
DeplacementsAvecOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  080068a8  080068a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006be0  08006be0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08006be0  08006be0  00016be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006be8  08006be8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006be8  08006be8  00016be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bec  08006bec  00016bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004408  20000084  08006c74  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000448c  08006c74  0002448c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c561  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c8d  00000000  00000000  0003c615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  000402a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  00041678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000258fa  00000000  00000000  000428d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017dfd  00000000  00000000  000681ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db3fa  00000000  00000000  0007ffc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015b3c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a08  00000000  00000000  0015b414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006890 	.word	0x08006890

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08006890 	.word	0x08006890

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <__io_putchar>:
static int shell_func_list_size = 0;
static shell_func_t shell_func_list[_SHELL_FUNC_LIST_MAX_SIZE];

static int dataReady = 0;

int __io_putchar(int ch) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005b0:	1d39      	adds	r1, r7, #4
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295
 80005b6:	2201      	movs	r2, #1
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <__io_putchar+0x20>)
 80005ba:	f002 f946 	bl	800284a <HAL_UART_Transmit>
	return ch;
 80005be:	687b      	ldr	r3, [r7, #4]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20004434 	.word	0x20004434

080005cc <uart_write>:
	HAL_UART_Receive(&UART_DEVICE, (uint8_t*)(&c), 1, 0xFFFFFFFF);

	return c;
}

int uart_write(char * s, uint16_t size) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, 0xFFFF);
 80005d8:	887a      	ldrh	r2, [r7, #2]
 80005da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <uart_write+0x24>)
 80005e2:	f002 f932 	bl	800284a <HAL_UART_Transmit>
	return size;
 80005e6:	887b      	ldrh	r3, [r7, #2]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20004434 	.word	0x20004434

080005f4 <sh_help>:

void uart_data_ready() {
	dataReady = 1;
}

int sh_help(int argc, char ** argv) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
    int i;
    for(i = 0 ; i < shell_func_list_size ; i++) {
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e019      	b.n	8000638 <sh_help+0x44>
        printf("%c %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8000604:	4911      	ldr	r1, [pc, #68]	; (800064c <sh_help+0x58>)
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	4613      	mov	r3, r2
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	4413      	add	r3, r2
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	440b      	add	r3, r1
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	490d      	ldr	r1, [pc, #52]	; (800064c <sh_help+0x58>)
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	4613      	mov	r3, r2
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	4413      	add	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	440b      	add	r3, r1
 8000624:	3308      	adds	r3, #8
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	4601      	mov	r1, r0
 800062c:	4808      	ldr	r0, [pc, #32]	; (8000650 <sh_help+0x5c>)
 800062e:	f005 f9bd 	bl	80059ac <iprintf>
    for(i = 0 ; i < shell_func_list_size ; i++) {
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3301      	adds	r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <sh_help+0x60>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	429a      	cmp	r2, r3
 8000640:	dbe0      	blt.n	8000604 <sh_help+0x10>
    }

    return 0;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000a4 	.word	0x200000a4
 8000650:	080068a8 	.word	0x080068a8
 8000654:	200000a0 	.word	0x200000a0

08000658 <shell_init>:

void shell_init() {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	printf("\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 800065e:	4810      	ldr	r0, [pc, #64]	; (80006a0 <shell_init+0x48>)
 8000660:	f005 fa2a 	bl	8005ab8 <puts>

	shell_add('h', sh_help, help);
 8000664:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <shell_init+0x4c>)
 8000666:	4910      	ldr	r1, [pc, #64]	; (80006a8 <shell_init+0x50>)
 8000668:	2068      	movs	r0, #104	; 0x68
 800066a:	f000 f821 	bl	80006b0 <shell_add>
	qShell = xQueueCreate(1,sizeof(char));
 800066e:	2200      	movs	r2, #0
 8000670:	2101      	movs	r1, #1
 8000672:	2001      	movs	r0, #1
 8000674:	f003 fa00 	bl	8003a78 <xQueueGenericCreate>
 8000678:	4603      	mov	r3, r0
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <shell_init+0x54>)
 800067c:	6013      	str	r3, [r2, #0]

	for (int i = 0 ; i < 3 ; i++) {
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	e005      	b.n	8000690 <shell_init+0x38>

		HAL_Delay(200);
 8000684:	20c8      	movs	r0, #200	; 0xc8
 8000686:	f000 fd1d 	bl	80010c4 <HAL_Delay>
	for (int i = 0 ; i < 3 ; i++) {
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3301      	adds	r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b02      	cmp	r3, #2
 8000694:	ddf6      	ble.n	8000684 <shell_init+0x2c>
	}
}
 8000696:	bf00      	nop
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	080068b0 	.word	0x080068b0
 80006a4:	20000000 	.word	0x20000000
 80006a8:	080005f5 	.word	0x080005f5
 80006ac:	200043e4 	.word	0x200043e4

080006b0 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	73fb      	strb	r3, [r7, #15]
    if (shell_func_list_size < _SHELL_FUNC_LIST_MAX_SIZE) {
 80006be:	4b19      	ldr	r3, [pc, #100]	; (8000724 <shell_add+0x74>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b3f      	cmp	r3, #63	; 0x3f
 80006c4:	dc26      	bgt.n	8000714 <shell_add+0x64>
        shell_func_list[shell_func_list_size].c = c;
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <shell_add+0x74>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	4917      	ldr	r1, [pc, #92]	; (8000728 <shell_add+0x78>)
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	440b      	add	r3, r1
 80006d6:	7bfa      	ldrb	r2, [r7, #15]
 80006d8:	701a      	strb	r2, [r3, #0]
        shell_func_list[shell_func_list_size].func = pfunc;
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <shell_add+0x74>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4912      	ldr	r1, [pc, #72]	; (8000728 <shell_add+0x78>)
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	440b      	add	r3, r1
 80006ea:	3304      	adds	r3, #4
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	601a      	str	r2, [r3, #0]
        shell_func_list[shell_func_list_size].description = description;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <shell_add+0x74>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	490c      	ldr	r1, [pc, #48]	; (8000728 <shell_add+0x78>)
 80006f6:	4613      	mov	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	4413      	add	r3, r2
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	440b      	add	r3, r1
 8000700:	3308      	adds	r3, #8
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	601a      	str	r2, [r3, #0]
        shell_func_list_size++;
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <shell_add+0x74>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	4a05      	ldr	r2, [pc, #20]	; (8000724 <shell_add+0x74>)
 800070e:	6013      	str	r3, [r2, #0]
        return 0;
 8000710:	2300      	movs	r3, #0
 8000712:	e001      	b.n	8000718 <shell_add+0x68>
    }

    return -1;
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000718:	4618      	mov	r0, r3
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	200000a0 	.word	0x200000a0
 8000728:	200000a4 	.word	0x200000a4

0800072c <shell_exec>:

int shell_exec(char c, char * buf) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b08e      	sub	sp, #56	; 0x38
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]

    int argc;
    char * argv[ARGC_MAX];
    char *p;

    for(i = 0 ; i < shell_func_list_size ; i++) {
 8000738:	2300      	movs	r3, #0
 800073a:	637b      	str	r3, [r7, #52]	; 0x34
 800073c:	e040      	b.n	80007c0 <shell_exec+0x94>
        if (shell_func_list[i].c == c) {
 800073e:	4928      	ldr	r1, [pc, #160]	; (80007e0 <shell_exec+0xb4>)
 8000740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000742:	4613      	mov	r3, r2
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	4413      	add	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	440b      	add	r3, r1
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	79fa      	ldrb	r2, [r7, #7]
 8000750:	429a      	cmp	r2, r3
 8000752:	d132      	bne.n	80007ba <shell_exec+0x8e>
            argc = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
            argv[0] = buf;
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	60fb      	str	r3, [r7, #12]

            for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000760:	e014      	b.n	800078c <shell_exec+0x60>
                if(*p == ' ') {
 8000762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b20      	cmp	r3, #32
 8000768:	d10d      	bne.n	8000786 <shell_exec+0x5a>
                    *p = '\0';
 800076a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
                    argv[argc++] = p+1;
 8000770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	633a      	str	r2, [r7, #48]	; 0x30
 8000776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000778:	3201      	adds	r2, #1
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000780:	440b      	add	r3, r1
 8000782:	f843 2c2c 	str.w	r2, [r3, #-44]
            for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000788:	3301      	adds	r3, #1
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800078c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <shell_exec+0x6e>
 8000794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000796:	2b07      	cmp	r3, #7
 8000798:	dde3      	ble.n	8000762 <shell_exec+0x36>
                }
            }

            return shell_func_list[i].func(argc, argv);
 800079a:	4911      	ldr	r1, [pc, #68]	; (80007e0 <shell_exec+0xb4>)
 800079c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800079e:	4613      	mov	r3, r2
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	4413      	add	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	440b      	add	r3, r1
 80007a8:	3304      	adds	r3, #4
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f107 020c 	add.w	r2, r7, #12
 80007b0:	4611      	mov	r1, r2
 80007b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80007b4:	4798      	blx	r3
 80007b6:	4603      	mov	r3, r0
 80007b8:	e00e      	b.n	80007d8 <shell_exec+0xac>
    for(i = 0 ; i < shell_func_list_size ; i++) {
 80007ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007bc:	3301      	adds	r3, #1
 80007be:	637b      	str	r3, [r7, #52]	; 0x34
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <shell_exec+0xb8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007c6:	429a      	cmp	r2, r3
 80007c8:	dbb9      	blt.n	800073e <shell_exec+0x12>
        }
    }
    printf("%c: no such command\r\n", c);
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <shell_exec+0xbc>)
 80007d0:	f005 f8ec 	bl	80059ac <iprintf>
    return -1;
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3738      	adds	r7, #56	; 0x38
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000a4 	.word	0x200000a4
 80007e4:	200000a0 	.word	0x200000a0
 80007e8:	080068d8 	.word	0x080068d8

080007ec <shell_run>:

static char buf[BUFFER_SIZE];
static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
	int reading = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]

	while (1) {
		  uart_write(prompt, 2);
 80007fa:	2102      	movs	r1, #2
 80007fc:	4825      	ldr	r0, [pc, #148]	; (8000894 <shell_run+0xa8>)
 80007fe:	f7ff fee5 	bl	80005cc <uart_write>
		  reading = 1;
 8000802:	2301      	movs	r3, #1
 8000804:	60fb      	str	r3, [r7, #12]

		  while(reading) {
 8000806:	e03b      	b.n	8000880 <shell_run+0x94>
			  //char c = uart_read();
			  char c = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	71fb      	strb	r3, [r7, #7]
			  xQueueReceive(qShell, &c, portMAX_DELAY);
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <shell_run+0xac>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	1df9      	adds	r1, r7, #7
 8000812:	f04f 32ff 	mov.w	r2, #4294967295
 8000816:	4618      	mov	r0, r3
 8000818:	f003 fa22 	bl	8003c60 <xQueueReceive>

			  switch (c) {
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b08      	cmp	r3, #8
 8000820:	d013      	beq.n	800084a <shell_run+0x5e>
 8000822:	2b0d      	cmp	r3, #13
 8000824:	d11c      	bne.n	8000860 <shell_run+0x74>
				  //process RETURN key
				  case '\r':
					  //case '\n':
					  printf("\r\n");    //finish line
 8000826:	481d      	ldr	r0, [pc, #116]	; (800089c <shell_run+0xb0>)
 8000828:	f005 f946 	bl	8005ab8 <puts>
					  buf[pos++] = 0;     //to use cprintf...
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	60ba      	str	r2, [r7, #8]
 8000832:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <shell_run+0xb4>)
 8000834:	2100      	movs	r1, #0
 8000836:	54d1      	strb	r1, [r2, r3]
					  printf(":%s\r\n", buf);
 8000838:	4919      	ldr	r1, [pc, #100]	; (80008a0 <shell_run+0xb4>)
 800083a:	481a      	ldr	r0, [pc, #104]	; (80008a4 <shell_run+0xb8>)
 800083c:	f005 f8b6 	bl	80059ac <iprintf>
					  reading = 0;        //exit read loop
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
					  pos = 0;            //reset buffer
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
					  break;
 8000848:	e01a      	b.n	8000880 <shell_run+0x94>
					  //backspace
				  case '\b':
					  if (pos > 0) {      //is there a char to delete?
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	2b00      	cmp	r3, #0
 800084e:	dd16      	ble.n	800087e <shell_run+0x92>
						  pos--;          //remove it in buffer
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	3b01      	subs	r3, #1
 8000854:	60bb      	str	r3, [r7, #8]

						  uart_write(backspace, 3);
 8000856:	2103      	movs	r1, #3
 8000858:	4813      	ldr	r0, [pc, #76]	; (80008a8 <shell_run+0xbc>)
 800085a:	f7ff feb7 	bl	80005cc <uart_write>
					  }
					  break;
 800085e:	e00e      	b.n	800087e <shell_run+0x92>
					  //other characters
				  default:
					  //only store characters if buffer has space
					  if (pos < BUFFER_SIZE) {
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	2b27      	cmp	r3, #39	; 0x27
 8000864:	dc0c      	bgt.n	8000880 <shell_run+0x94>
						  uart_write(&c, 1);
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	2101      	movs	r1, #1
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff feae 	bl	80005cc <uart_write>
						  buf[pos++] = c; //store
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	60ba      	str	r2, [r7, #8]
 8000876:	79f9      	ldrb	r1, [r7, #7]
 8000878:	4a09      	ldr	r2, [pc, #36]	; (80008a0 <shell_run+0xb4>)
 800087a:	54d1      	strb	r1, [r2, r3]
 800087c:	e000      	b.n	8000880 <shell_run+0x94>
					  break;
 800087e:	bf00      	nop
		  while(reading) {
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1c0      	bne.n	8000808 <shell_run+0x1c>
					  }
			  }
		  }
		  shell_exec(buf[0], buf);
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <shell_run+0xb4>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4905      	ldr	r1, [pc, #20]	; (80008a0 <shell_run+0xb4>)
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff4d 	bl	800072c <shell_exec>
		  uart_write(prompt, 2);
 8000892:	e7b2      	b.n	80007fa <shell_run+0xe>
 8000894:	2000000c 	.word	0x2000000c
 8000898:	200043e4 	.word	0x200043e4
 800089c:	080068f0 	.word	0x080068f0
 80008a0:	200003a4 	.word	0x200003a4
 80008a4:	080068f4 	.word	0x080068f4
 80008a8:	20000008 	.word	0x20000008

080008ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80008bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	4a06      	ldr	r2, [pc, #24]	; (80008dc <vApplicationGetIdleTaskMemory+0x30>)
 80008c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	200003cc 	.word	0x200003cc
 80008dc:	20000480 	.word	0x20000480

080008e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008e0:	b5b0      	push	{r4, r5, r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_FREERTOS_Init+0x30>)
 80008e8:	1d3c      	adds	r4, r7, #4
 80008ea:	461d      	mov	r5, r3
 80008ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 ff3e 	bl	800377e <osThreadCreate>
 8000902:	4603      	mov	r3, r0
 8000904:	4a03      	ldr	r2, [pc, #12]	; (8000914 <MX_FREERTOS_Init+0x34>)
 8000906:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bdb0      	pop	{r4, r5, r7, pc}
 8000910:	08006908 	.word	0x08006908
 8000914:	200043e8 	.word	0x200043e8

08000918 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000920:	2001      	movs	r0, #1
 8000922:	f002 ff78 	bl	8003816 <osDelay>
 8000926:	e7fb      	b.n	8000920 <StartDefaultTask+0x8>

08000928 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_GPIO_Init+0x4c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <MX_GPIO_Init+0x4c>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <MX_GPIO_Init+0x4c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_GPIO_Init+0x4c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <MX_GPIO_Init+0x4c>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_GPIO_Init+0x4c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <fonction>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int fonction(int argc, char ** argv) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	printf("Fonction bidon\r\n");
 8000982:	4810      	ldr	r0, [pc, #64]	; (80009c4 <fonction+0x4c>)
 8000984:	f005 f898 	bl	8005ab8 <puts>

	printf("argc = %d\r\n", argc);
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	480f      	ldr	r0, [pc, #60]	; (80009c8 <fonction+0x50>)
 800098c:	f005 f80e 	bl	80059ac <iprintf>

	for (int i = 0 ; i < argc ; i++) {
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	e00c      	b.n	80009b0 <fonction+0x38>
		printf("arg numero %d = %s\r\n", i, argv[i]);
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	4413      	add	r3, r2
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	461a      	mov	r2, r3
 80009a2:	68f9      	ldr	r1, [r7, #12]
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <fonction+0x54>)
 80009a6:	f005 f801 	bl	80059ac <iprintf>
	for (int i = 0 ; i < argc ; i++) {
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	3301      	adds	r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	dbee      	blt.n	8000996 <fonction+0x1e>
	}

	return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	08006924 	.word	0x08006924
 80009c8:	08006934 	.word	0x08006934
 80009cc:	08006940 	.word	0x08006940

080009d0 <addition>:

int addition(int argc, char ** argv) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
	// Usage : a <nombre1> <nombre2>
	// Affiche le résultat de l'addition des deux nombres

	if (argc == 3) {
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d116      	bne.n	8000a0e <addition+0x3e>
		int a, b;
		a = atoi(argv[1]);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	3304      	adds	r3, #4
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f004 fe48 	bl	800567c <atoi>
 80009ec:	60f8      	str	r0, [r7, #12]
		b = atoi(argv[2]);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	3308      	adds	r3, #8
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f004 fe41 	bl	800567c <atoi>
 80009fa:	60b8      	str	r0, [r7, #8]
		printf("%d + %d = %d\r\n", a, b, a+b);
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	4413      	add	r3, r2
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	68f9      	ldr	r1, [r7, #12]
 8000a06:	4809      	ldr	r0, [pc, #36]	; (8000a2c <addition+0x5c>)
 8000a08:	f004 ffd0 	bl	80059ac <iprintf>
 8000a0c:	e008      	b.n	8000a20 <addition+0x50>
	}
	else {
		printf("Erreur: nombre d'arguments incorrect\r\n");
 8000a0e:	4808      	ldr	r0, [pc, #32]	; (8000a30 <addition+0x60>)
 8000a10:	f005 f852 	bl	8005ab8 <puts>
		printf("Usage : %s <nombre1> <nombre2>\r\n", argv[0]);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4806      	ldr	r0, [pc, #24]	; (8000a34 <addition+0x64>)
 8000a1c:	f004 ffc6 	bl	80059ac <iprintf>
	}

	return 0;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	08006958 	.word	0x08006958
 8000a30:	08006968 	.word	0x08006968
 8000a34:	08006990 	.word	0x08006990

08000a38 <vTaskShell>:

void vTaskShell(void * p) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	shell_init();
 8000a40:	f7ff fe0a 	bl	8000658 <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <vTaskShell+0x2c>)
 8000a46:	4908      	ldr	r1, [pc, #32]	; (8000a68 <vTaskShell+0x30>)
 8000a48:	2066      	movs	r0, #102	; 0x66
 8000a4a:	f7ff fe31 	bl	80006b0 <shell_add>
	shell_add('a', addition, "Ma super addition");
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <vTaskShell+0x34>)
 8000a50:	4907      	ldr	r1, [pc, #28]	; (8000a70 <vTaskShell+0x38>)
 8000a52:	2061      	movs	r0, #97	; 0x61
 8000a54:	f7ff fe2c 	bl	80006b0 <shell_add>

	shell_run();
 8000a58:	f7ff fec8 	bl	80007ec <shell_run>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	080069b4 	.word	0x080069b4
 8000a68:	08000979 	.word	0x08000979
 8000a6c:	080069cc 	.word	0x080069cc
 8000a70:	080009d1 	.word	0x080009d1

08000a74 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	BaseType_t xReturned;
	TaskHandle_t xHandle = NULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a7e:	f000 fadf 	bl	8001040 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a82:	f000 f82b 	bl	8000adc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a86:	f7ff ff4f 	bl	8000928 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000a8a:	f000 fa35 	bl	8000ef8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&c, sizeof(c));
 8000a8e:	2201      	movs	r2, #1
 8000a90:	490d      	ldr	r1, [pc, #52]	; (8000ac8 <main+0x54>)
 8000a92:	480e      	ldr	r0, [pc, #56]	; (8000acc <main+0x58>)
 8000a94:	f001 ff6b 	bl	800296e <HAL_UART_Receive_IT>

	xReturned = xTaskCreate(
 8000a98:	463b      	mov	r3, r7
 8000a9a:	9301      	str	r3, [sp, #4]
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aa6:	490a      	ldr	r1, [pc, #40]	; (8000ad0 <main+0x5c>)
 8000aa8:	480a      	ldr	r0, [pc, #40]	; (8000ad4 <main+0x60>)
 8000aaa:	f003 fb0e 	bl	80040ca <xTaskCreate>
 8000aae:	6078      	str	r0, [r7, #4]
			"Shell",         	/* Text name for the task. */
			STACK_SIZE,      	/* Stack size in words, not bytes. */
			( void * ) NULL,    /* Parameter passed into the task. */
			1,					/* Priority at which the task is created. */
			&xHandle );      	/* Used to pass out the created task's handle. */
	if( xReturned == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY ) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab6:	d102      	bne.n	8000abe <main+0x4a>
		printf("Task Shell creation error: Could not allocate required memory\r\n");
 8000ab8:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <main+0x64>)
 8000aba:	f004 fffd 	bl	8005ab8 <puts>
	}
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8000abe:	f7ff ff0f 	bl	80008e0 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 8000ac2:	f002 fe55 	bl	8003770 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <main+0x52>
 8000ac8:	20000680 	.word	0x20000680
 8000acc:	20004434 	.word	0x20004434
 8000ad0:	080069e0 	.word	0x080069e0
 8000ad4:	08000a39 	.word	0x08000a39
 8000ad8:	080069e8 	.word	0x080069e8

08000adc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b094      	sub	sp, #80	; 0x50
 8000ae0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	2234      	movs	r2, #52	; 0x34
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f004 fefb 	bl	80058e6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <SystemClock_Config+0xd4>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	4a29      	ldr	r2, [pc, #164]	; (8000bb0 <SystemClock_Config+0xd4>)
 8000b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b10:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <SystemClock_Config+0xd4>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <SystemClock_Config+0xd8>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b28:	4a22      	ldr	r2, [pc, #136]	; (8000bb4 <SystemClock_Config+0xd8>)
 8000b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <SystemClock_Config+0xd8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b40:	2301      	movs	r3, #1
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b44:	2310      	movs	r3, #16
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000b50:	2310      	movs	r3, #16
 8000b52:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000b54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b58:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000b62:	2302      	movs	r3, #2
 8000b64:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 f8d4 	bl	8001d18 <HAL_RCC_OscConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8000b76:	f000 f853 	bl	8000c20 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	2102      	movs	r1, #2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 fdc0 	bl	800171c <HAL_RCC_ClockConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000ba2:	f000 f83d 	bl	8000c20 <Error_Handler>
	}
}
 8000ba6:	bf00      	nop
 8000ba8:	3750      	adds	r7, #80	; 0x50
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40007000 	.word	0x40007000

08000bb8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a09      	ldr	r2, [pc, #36]	; (8000bec <HAL_UART_RxCpltCallback+0x34>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d10b      	bne.n	8000be2 <HAL_UART_RxCpltCallback+0x2a>
		xQueueSendFromISR(qShell, &c, NULL);
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_UART_RxCpltCallback+0x38>)
 8000bcc:	6818      	ldr	r0, [r3, #0]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <HAL_UART_RxCpltCallback+0x3c>)
 8000bd4:	f002 ffa9 	bl	8003b2a <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(&huart2, (uint8_t*)&c, 1);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	4906      	ldr	r1, [pc, #24]	; (8000bf4 <HAL_UART_RxCpltCallback+0x3c>)
 8000bdc:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <HAL_UART_RxCpltCallback+0x40>)
 8000bde:	f001 fec6 	bl	800296e <HAL_UART_Receive_IT>
	}
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40004400 	.word	0x40004400
 8000bf0:	200043e4 	.word	0x200043e4
 8000bf4:	20000680 	.word	0x20000680
 8000bf8:	20004434 	.word	0x20004434

08000bfc <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d101      	bne.n	8000c12 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000c0e:	f000 fa39 	bl	8001084 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40001000 	.word	0x40001000

08000c20 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c28:	e7fe      	b.n	8000c28 <Error_Handler+0x8>
	...

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_MspInit+0x54>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a11      	ldr	r2, [pc, #68]	; (8000c80 <HAL_MspInit+0x54>)
 8000c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_MspInit+0x54>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_MspInit+0x54>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_MspInit+0x54>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_MspInit+0x54>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	f06f 0001 	mvn.w	r0, #1
 8000c72:	f000 fb03 	bl	800127c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	; 0x30
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	2036      	movs	r0, #54	; 0x36
 8000c9a:	f000 faef 	bl	800127c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c9e:	2036      	movs	r0, #54	; 0x36
 8000ca0:	f000 fb08 	bl	80012b4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <HAL_InitTick+0xa4>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <HAL_InitTick+0xa4>)
 8000cae:	f043 0310 	orr.w	r3, r3, #16
 8000cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <HAL_InitTick+0xa4>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	f003 0310 	and.w	r3, r3, #16
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc0:	f107 0210 	add.w	r2, r7, #16
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 fe40 	bl	8001950 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000cd0:	f000 fe16 	bl	8001900 <HAL_RCC_GetPCLK1Freq>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cdc:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <HAL_InitTick+0xa8>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	0c9b      	lsrs	r3, r3, #18
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_InitTick+0xac>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <HAL_InitTick+0xb0>)
 8000cec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <HAL_InitTick+0xac>)
 8000cf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cf4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <HAL_InitTick+0xac>)
 8000cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_InitTick+0xac>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <HAL_InitTick+0xac>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d08:	4809      	ldr	r0, [pc, #36]	; (8000d30 <HAL_InitTick+0xac>)
 8000d0a:	f001 faa3 	bl	8002254 <HAL_TIM_Base_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d104      	bne.n	8000d1e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <HAL_InitTick+0xac>)
 8000d16:	f001 faf7 	bl	8002308 <HAL_TIM_Base_Start_IT>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3730      	adds	r7, #48	; 0x30
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	431bde83 	.word	0x431bde83
 8000d30:	200043ec 	.word	0x200043ec
 8000d34:	40001000 	.word	0x40001000

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <USART2_IRQHandler+0x10>)
 8000d6a:	f001 fe31 	bl	80029d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20004434 	.word	0x20004434

08000d78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <TIM6_DAC_IRQHandler+0x10>)
 8000d7e:	f001 fb33 	bl	80023e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200043ec 	.word	0x200043ec

08000d8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	e00a      	b.n	8000db4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d9e:	f3af 8000 	nop.w
 8000da2:	4601      	mov	r1, r0
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	1c5a      	adds	r2, r3, #1
 8000da8:	60ba      	str	r2, [r7, #8]
 8000daa:	b2ca      	uxtb	r2, r1
 8000dac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dbf0      	blt.n	8000d9e <_read+0x12>
	}

return len;
 8000dbc:	687b      	ldr	r3, [r7, #4]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	e009      	b.n	8000dec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	60ba      	str	r2, [r7, #8]
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fbe1 	bl	80005a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbf1      	blt.n	8000dd8 <_write+0x12>
	}
	return len;
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_close>:

int _close(int file)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
	return -1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e26:	605a      	str	r2, [r3, #4]
	return 0;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_isatty>:

int _isatty(int file)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
	return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e70:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <_sbrk+0x5c>)
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <_sbrk+0x60>)
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <_sbrk+0x64>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <_sbrk+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d207      	bcs.n	8000ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e98:	f004 fbf4 	bl	8005684 <__errno>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	e009      	b.n	8000ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <_sbrk+0x64>)
 8000eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20020000 	.word	0x20020000
 8000ec8:	00000400 	.word	0x00000400
 8000ecc:	20000684 	.word	0x20000684
 8000ed0:	20004490 	.word	0x20004490

08000ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <SystemInit+0x20>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <SystemInit+0x20>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <MX_USART2_UART_Init+0x50>)
 8000f00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f1e:	220c      	movs	r2, #12
 8000f20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f30:	f001 fc3e 	bl	80027b0 <HAL_UART_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f3a:	f7ff fe71 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20004434 	.word	0x20004434
 8000f48:	40004400 	.word	0x40004400

08000f4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a1d      	ldr	r2, [pc, #116]	; (8000fe0 <HAL_UART_MspInit+0x94>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d133      	bne.n	8000fd6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <HAL_UART_MspInit+0x98>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <HAL_UART_MspInit+0x98>)
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_UART_MspInit+0x98>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_UART_MspInit+0x98>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <HAL_UART_MspInit+0x98>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_UART_MspInit+0x98>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fa6:	230c      	movs	r3, #12
 8000fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <HAL_UART_MspInit+0x9c>)
 8000fc2:	f000 fa17 	bl	80013f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2105      	movs	r1, #5
 8000fca:	2026      	movs	r0, #38	; 0x26
 8000fcc:	f000 f956 	bl	800127c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fd0:	2026      	movs	r0, #38	; 0x26
 8000fd2:	f000 f96f 	bl	80012b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	; 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40004400 	.word	0x40004400
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020000 	.word	0x40020000

08000fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001024 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff0:	480d      	ldr	r0, [pc, #52]	; (8001028 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ff2:	490e      	ldr	r1, [pc, #56]	; (800102c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ff4:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001008:	4c0b      	ldr	r4, [pc, #44]	; (8001038 <LoopFillZerobss+0x26>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001016:	f7ff ff5d 	bl	8000ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101a:	f004 fc2f 	bl	800587c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101e:	f7ff fd29 	bl	8000a74 <main>
  bx  lr    
 8001022:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001030:	08006bf0 	.word	0x08006bf0
  ldr r2, =_sbss
 8001034:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001038:	2000448c 	.word	0x2000448c

0800103c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC_IRQHandler>
	...

08001040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <HAL_Init+0x40>)
 800104a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_Init+0x40>)
 8001056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a07      	ldr	r2, [pc, #28]	; (8001080 <HAL_Init+0x40>)
 8001062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f000 f8fc 	bl	8001266 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106e:	200f      	movs	r0, #15
 8001070:	f7ff fe08 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001074:	f7ff fdda 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023c00 	.word	0x40023c00

08001084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x20>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_IncTick+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000018 	.word	0x20000018
 80010a8:	20004478 	.word	0x20004478

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20004478 	.word	0x20004478

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff ffee 	bl	80010ac <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffde 	bl	80010ac <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000018 	.word	0x20000018

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4907      	ldr	r1, [pc, #28]	; (80011a8 <__NVIC_EnableIRQ+0x38>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff4c 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128e:	f7ff ff61 	bl	8001154 <__NVIC_GetPriorityGrouping>
 8001292:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	68b9      	ldr	r1, [r7, #8]
 8001298:	6978      	ldr	r0, [r7, #20]
 800129a:	f7ff ffb1 	bl	8001200 <NVIC_EncodePriority>
 800129e:	4602      	mov	r2, r0
 80012a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff80 	bl	80011ac <__NVIC_SetPriority>
}
 80012ac:	bf00      	nop
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff54 	bl	8001170 <__NVIC_EnableIRQ>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012de:	f7ff fee5 	bl	80010ac <HAL_GetTick>
 80012e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d008      	beq.n	8001302 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e052      	b.n	80013a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0216 	bic.w	r2, r2, #22
 8001310:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	695a      	ldr	r2, [r3, #20]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001320:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	2b00      	cmp	r3, #0
 8001328:	d103      	bne.n	8001332 <HAL_DMA_Abort+0x62>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0208 	bic.w	r2, r2, #8
 8001340:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001352:	e013      	b.n	800137c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001354:	f7ff feaa 	bl	80010ac <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b05      	cmp	r3, #5
 8001360:	d90c      	bls.n	800137c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2220      	movs	r2, #32
 8001366:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2203      	movs	r2, #3
 800136c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e015      	b.n	80013a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1e4      	bne.n	8001354 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138e:	223f      	movs	r2, #63	; 0x3f
 8001390:	409a      	lsls	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d004      	beq.n	80013ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2280      	movs	r2, #128	; 0x80
 80013c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00c      	b.n	80013e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2205      	movs	r2, #5
 80013d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0201 	bic.w	r2, r2, #1
 80013e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	e165      	b.n	80016dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001410:	2201      	movs	r2, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	429a      	cmp	r2, r3
 800142a:	f040 8154 	bne.w	80016d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b01      	cmp	r3, #1
 8001438:	d005      	beq.n	8001446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001442:	2b02      	cmp	r3, #2
 8001444:	d130      	bne.n	80014a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800147c:	2201      	movs	r2, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	f003 0201 	and.w	r2, r3, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d017      	beq.n	80014e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d123      	bne.n	8001538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	08da      	lsrs	r2, r3, #3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3208      	adds	r2, #8
 80014f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	220f      	movs	r2, #15
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	08da      	lsrs	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3208      	adds	r2, #8
 8001532:	69b9      	ldr	r1, [r7, #24]
 8001534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	2203      	movs	r2, #3
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0203 	and.w	r2, r3, #3
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80ae 	beq.w	80016d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b5d      	ldr	r3, [pc, #372]	; (80016f4 <HAL_GPIO_Init+0x300>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a5c      	ldr	r2, [pc, #368]	; (80016f4 <HAL_GPIO_Init+0x300>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b5a      	ldr	r3, [pc, #360]	; (80016f4 <HAL_GPIO_Init+0x300>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001596:	4a58      	ldr	r2, [pc, #352]	; (80016f8 <HAL_GPIO_Init+0x304>)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	220f      	movs	r2, #15
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4f      	ldr	r2, [pc, #316]	; (80016fc <HAL_GPIO_Init+0x308>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d025      	beq.n	800160e <HAL_GPIO_Init+0x21a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4e      	ldr	r2, [pc, #312]	; (8001700 <HAL_GPIO_Init+0x30c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d01f      	beq.n	800160a <HAL_GPIO_Init+0x216>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4d      	ldr	r2, [pc, #308]	; (8001704 <HAL_GPIO_Init+0x310>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d019      	beq.n	8001606 <HAL_GPIO_Init+0x212>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4c      	ldr	r2, [pc, #304]	; (8001708 <HAL_GPIO_Init+0x314>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d013      	beq.n	8001602 <HAL_GPIO_Init+0x20e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4b      	ldr	r2, [pc, #300]	; (800170c <HAL_GPIO_Init+0x318>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d00d      	beq.n	80015fe <HAL_GPIO_Init+0x20a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4a      	ldr	r2, [pc, #296]	; (8001710 <HAL_GPIO_Init+0x31c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d007      	beq.n	80015fa <HAL_GPIO_Init+0x206>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a49      	ldr	r2, [pc, #292]	; (8001714 <HAL_GPIO_Init+0x320>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d101      	bne.n	80015f6 <HAL_GPIO_Init+0x202>
 80015f2:	2306      	movs	r3, #6
 80015f4:	e00c      	b.n	8001610 <HAL_GPIO_Init+0x21c>
 80015f6:	2307      	movs	r3, #7
 80015f8:	e00a      	b.n	8001610 <HAL_GPIO_Init+0x21c>
 80015fa:	2305      	movs	r3, #5
 80015fc:	e008      	b.n	8001610 <HAL_GPIO_Init+0x21c>
 80015fe:	2304      	movs	r3, #4
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x21c>
 8001602:	2303      	movs	r3, #3
 8001604:	e004      	b.n	8001610 <HAL_GPIO_Init+0x21c>
 8001606:	2302      	movs	r3, #2
 8001608:	e002      	b.n	8001610 <HAL_GPIO_Init+0x21c>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <HAL_GPIO_Init+0x21c>
 800160e:	2300      	movs	r3, #0
 8001610:	69fa      	ldr	r2, [r7, #28]
 8001612:	f002 0203 	and.w	r2, r2, #3
 8001616:	0092      	lsls	r2, r2, #2
 8001618:	4093      	lsls	r3, r2
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001620:	4935      	ldr	r1, [pc, #212]	; (80016f8 <HAL_GPIO_Init+0x304>)
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	089b      	lsrs	r3, r3, #2
 8001626:	3302      	adds	r3, #2
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800162e:	4b3a      	ldr	r3, [pc, #232]	; (8001718 <HAL_GPIO_Init+0x324>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001652:	4a31      	ldr	r2, [pc, #196]	; (8001718 <HAL_GPIO_Init+0x324>)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001658:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <HAL_GPIO_Init+0x324>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800167c:	4a26      	ldr	r2, [pc, #152]	; (8001718 <HAL_GPIO_Init+0x324>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001682:	4b25      	ldr	r3, [pc, #148]	; (8001718 <HAL_GPIO_Init+0x324>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016a6:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <HAL_GPIO_Init+0x324>)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <HAL_GPIO_Init+0x324>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016d0:	4a11      	ldr	r2, [pc, #68]	; (8001718 <HAL_GPIO_Init+0x324>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3301      	adds	r3, #1
 80016da:	61fb      	str	r3, [r7, #28]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	2b0f      	cmp	r3, #15
 80016e0:	f67f ae96 	bls.w	8001410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016e4:	bf00      	nop
 80016e6:	bf00      	nop
 80016e8:	3724      	adds	r7, #36	; 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40013800 	.word	0x40013800
 80016fc:	40020000 	.word	0x40020000
 8001700:	40020400 	.word	0x40020400
 8001704:	40020800 	.word	0x40020800
 8001708:	40020c00 	.word	0x40020c00
 800170c:	40021000 	.word	0x40021000
 8001710:	40021400 	.word	0x40021400
 8001714:	40021800 	.word	0x40021800
 8001718:	40013c00 	.word	0x40013c00

0800171c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0cc      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001730:	4b68      	ldr	r3, [pc, #416]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 030f 	and.w	r3, r3, #15
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d90c      	bls.n	8001758 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b65      	ldr	r3, [pc, #404]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001746:	4b63      	ldr	r3, [pc, #396]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0b8      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d020      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001770:	4b59      	ldr	r3, [pc, #356]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	4a58      	ldr	r2, [pc, #352]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800177a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001788:	4b53      	ldr	r3, [pc, #332]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4a52      	ldr	r2, [pc, #328]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001792:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001794:	4b50      	ldr	r3, [pc, #320]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	494d      	ldr	r1, [pc, #308]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d044      	beq.n	800183c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d119      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e07f      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d003      	beq.n	80017da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017da:	4b3f      	ldr	r3, [pc, #252]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e06f      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ea:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e067      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fa:	4b37      	ldr	r3, [pc, #220]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f023 0203 	bic.w	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4934      	ldr	r1, [pc, #208]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	4313      	orrs	r3, r2
 800180a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800180c:	f7ff fc4e 	bl	80010ac <HAL_GetTick>
 8001810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001812:	e00a      	b.n	800182a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001814:	f7ff fc4a 	bl	80010ac <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e04f      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 020c 	and.w	r2, r3, #12
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	429a      	cmp	r2, r3
 800183a:	d1eb      	bne.n	8001814 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d20c      	bcs.n	8001864 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e032      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	4916      	ldr	r1, [pc, #88]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	4313      	orrs	r3, r2
 8001880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d009      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	490e      	ldr	r1, [pc, #56]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018a2:	f000 f887 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 80018a6:	4602      	mov	r2, r0
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	490a      	ldr	r1, [pc, #40]	; (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	5ccb      	ldrb	r3, [r1, r3]
 80018b6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ba:	4a09      	ldr	r2, [pc, #36]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1c8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff f9de 	bl	8000c84 <HAL_InitTick>

  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023c00 	.word	0x40023c00
 80018d8:	40023800 	.word	0x40023800
 80018dc:	08006a30 	.word	0x08006a30
 80018e0:	20000010 	.word	0x20000010
 80018e4:	20000014 	.word	0x20000014

080018e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_RCC_GetHCLKFreq+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000010 	.word	0x20000010

08001900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001904:	f7ff fff0 	bl	80018e8 <HAL_RCC_GetHCLKFreq>
 8001908:	4602      	mov	r2, r0
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	0a9b      	lsrs	r3, r3, #10
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	4903      	ldr	r1, [pc, #12]	; (8001924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001916:	5ccb      	ldrb	r3, [r1, r3]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800191c:	4618      	mov	r0, r3
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40023800 	.word	0x40023800
 8001924:	08006a40 	.word	0x08006a40

08001928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800192c:	f7ff ffdc 	bl	80018e8 <HAL_RCC_GetHCLKFreq>
 8001930:	4602      	mov	r2, r0
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	0b5b      	lsrs	r3, r3, #13
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	4903      	ldr	r1, [pc, #12]	; (800194c <HAL_RCC_GetPCLK2Freq+0x24>)
 800193e:	5ccb      	ldrb	r3, [r1, r3]
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001944:	4618      	mov	r0, r3
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	08006a40 	.word	0x08006a40

08001950 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	220f      	movs	r2, #15
 800195e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_RCC_GetClockConfig+0x5c>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0203 	and.w	r2, r3, #3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <HAL_RCC_GetClockConfig+0x5c>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_RCC_GetClockConfig+0x5c>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_RCC_GetClockConfig+0x5c>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	08db      	lsrs	r3, r3, #3
 800198a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <HAL_RCC_GetClockConfig+0x60>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 020f 	and.w	r2, r3, #15
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	601a      	str	r2, [r3, #0]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40023c00 	.word	0x40023c00

080019b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b8:	b088      	sub	sp, #32
 80019ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019d0:	4bce      	ldr	r3, [pc, #824]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x358>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	f200 818d 	bhi.w	8001cf8 <HAL_RCC_GetSysClockFreq+0x344>
 80019de:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <HAL_RCC_GetSysClockFreq+0x30>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	08001a19 	.word	0x08001a19
 80019e8:	08001cf9 	.word	0x08001cf9
 80019ec:	08001cf9 	.word	0x08001cf9
 80019f0:	08001cf9 	.word	0x08001cf9
 80019f4:	08001a1f 	.word	0x08001a1f
 80019f8:	08001cf9 	.word	0x08001cf9
 80019fc:	08001cf9 	.word	0x08001cf9
 8001a00:	08001cf9 	.word	0x08001cf9
 8001a04:	08001a25 	.word	0x08001a25
 8001a08:	08001cf9 	.word	0x08001cf9
 8001a0c:	08001cf9 	.word	0x08001cf9
 8001a10:	08001cf9 	.word	0x08001cf9
 8001a14:	08001b99 	.word	0x08001b99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a18:	4bbd      	ldr	r3, [pc, #756]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a1a:	61bb      	str	r3, [r7, #24]
       break;
 8001a1c:	e16f      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a1e:	4bbd      	ldr	r3, [pc, #756]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x360>)
 8001a20:	61bb      	str	r3, [r7, #24]
      break;
 8001a22:	e16c      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a24:	4bb9      	ldr	r3, [pc, #740]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a2c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a2e:	4bb7      	ldr	r3, [pc, #732]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d053      	beq.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3a:	4bb4      	ldr	r3, [pc, #720]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	099b      	lsrs	r3, r3, #6
 8001a40:	461a      	mov	r2, r3
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a4a:	f04f 0100 	mov.w	r1, #0
 8001a4e:	ea02 0400 	and.w	r4, r2, r0
 8001a52:	603c      	str	r4, [r7, #0]
 8001a54:	400b      	ands	r3, r1
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	4629      	mov	r1, r5
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	014b      	lsls	r3, r1, #5
 8001a6a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a6e:	0142      	lsls	r2, r0, #5
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	4623      	mov	r3, r4
 8001a76:	1ac0      	subs	r0, r0, r3
 8001a78:	462b      	mov	r3, r5
 8001a7a:	eb61 0103 	sbc.w	r1, r1, r3
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	018b      	lsls	r3, r1, #6
 8001a88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a8c:	0182      	lsls	r2, r0, #6
 8001a8e:	1a12      	subs	r2, r2, r0
 8001a90:	eb63 0301 	sbc.w	r3, r3, r1
 8001a94:	f04f 0000 	mov.w	r0, #0
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	00d9      	lsls	r1, r3, #3
 8001a9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aa2:	00d0      	lsls	r0, r2, #3
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	1852      	adds	r2, r2, r1
 8001aac:	4629      	mov	r1, r5
 8001aae:	eb43 0101 	adc.w	r1, r3, r1
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	f04f 0000 	mov.w	r0, #0
 8001ab8:	f04f 0100 	mov.w	r1, #0
 8001abc:	0259      	lsls	r1, r3, #9
 8001abe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ac2:	0250      	lsls	r0, r2, #9
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	f7fe fbec 	bl	80002b0 <__aeabi_uldivmod>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4613      	mov	r3, r2
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	e04c      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae2:	4b8a      	ldr	r3, [pc, #552]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	099b      	lsrs	r3, r3, #6
 8001ae8:	461a      	mov	r2, r3
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001af2:	f04f 0100 	mov.w	r1, #0
 8001af6:	ea02 0a00 	and.w	sl, r2, r0
 8001afa:	ea03 0b01 	and.w	fp, r3, r1
 8001afe:	4650      	mov	r0, sl
 8001b00:	4659      	mov	r1, fp
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	014b      	lsls	r3, r1, #5
 8001b0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b10:	0142      	lsls	r2, r0, #5
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	ebb0 000a 	subs.w	r0, r0, sl
 8001b1a:	eb61 010b 	sbc.w	r1, r1, fp
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	018b      	lsls	r3, r1, #6
 8001b28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b2c:	0182      	lsls	r2, r0, #6
 8001b2e:	1a12      	subs	r2, r2, r0
 8001b30:	eb63 0301 	sbc.w	r3, r3, r1
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	f04f 0100 	mov.w	r1, #0
 8001b3c:	00d9      	lsls	r1, r3, #3
 8001b3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b42:	00d0      	lsls	r0, r2, #3
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	eb12 020a 	adds.w	r2, r2, sl
 8001b4c:	eb43 030b 	adc.w	r3, r3, fp
 8001b50:	f04f 0000 	mov.w	r0, #0
 8001b54:	f04f 0100 	mov.w	r1, #0
 8001b58:	0299      	lsls	r1, r3, #10
 8001b5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b5e:	0290      	lsls	r0, r2, #10
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	f7fe fb9e 	bl	80002b0 <__aeabi_uldivmod>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4613      	mov	r3, r2
 8001b7a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b7c:	4b63      	ldr	r3, [pc, #396]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	0c1b      	lsrs	r3, r3, #16
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	3301      	adds	r3, #1
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b94:	61bb      	str	r3, [r7, #24]
      break;
 8001b96:	e0b2      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b98:	4b5c      	ldr	r3, [pc, #368]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ba0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ba2:	4b5a      	ldr	r3, [pc, #360]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d04d      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bae:	4b57      	ldr	r3, [pc, #348]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	099b      	lsrs	r3, r3, #6
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bbe:	f04f 0100 	mov.w	r1, #0
 8001bc2:	ea02 0800 	and.w	r8, r2, r0
 8001bc6:	ea03 0901 	and.w	r9, r3, r1
 8001bca:	4640      	mov	r0, r8
 8001bcc:	4649      	mov	r1, r9
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	014b      	lsls	r3, r1, #5
 8001bd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bdc:	0142      	lsls	r2, r0, #5
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	ebb0 0008 	subs.w	r0, r0, r8
 8001be6:	eb61 0109 	sbc.w	r1, r1, r9
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	018b      	lsls	r3, r1, #6
 8001bf4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bf8:	0182      	lsls	r2, r0, #6
 8001bfa:	1a12      	subs	r2, r2, r0
 8001bfc:	eb63 0301 	sbc.w	r3, r3, r1
 8001c00:	f04f 0000 	mov.w	r0, #0
 8001c04:	f04f 0100 	mov.w	r1, #0
 8001c08:	00d9      	lsls	r1, r3, #3
 8001c0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c0e:	00d0      	lsls	r0, r2, #3
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	eb12 0208 	adds.w	r2, r2, r8
 8001c18:	eb43 0309 	adc.w	r3, r3, r9
 8001c1c:	f04f 0000 	mov.w	r0, #0
 8001c20:	f04f 0100 	mov.w	r1, #0
 8001c24:	0259      	lsls	r1, r3, #9
 8001c26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c2a:	0250      	lsls	r0, r2, #9
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	461a      	mov	r2, r3
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	f7fe fb38 	bl	80002b0 <__aeabi_uldivmod>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4613      	mov	r3, r2
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	e04a      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4a:	4b30      	ldr	r3, [pc, #192]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	099b      	lsrs	r3, r3, #6
 8001c50:	461a      	mov	r2, r3
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c5a:	f04f 0100 	mov.w	r1, #0
 8001c5e:	ea02 0400 	and.w	r4, r2, r0
 8001c62:	ea03 0501 	and.w	r5, r3, r1
 8001c66:	4620      	mov	r0, r4
 8001c68:	4629      	mov	r1, r5
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	014b      	lsls	r3, r1, #5
 8001c74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c78:	0142      	lsls	r2, r0, #5
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	1b00      	subs	r0, r0, r4
 8001c80:	eb61 0105 	sbc.w	r1, r1, r5
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	018b      	lsls	r3, r1, #6
 8001c8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c92:	0182      	lsls	r2, r0, #6
 8001c94:	1a12      	subs	r2, r2, r0
 8001c96:	eb63 0301 	sbc.w	r3, r3, r1
 8001c9a:	f04f 0000 	mov.w	r0, #0
 8001c9e:	f04f 0100 	mov.w	r1, #0
 8001ca2:	00d9      	lsls	r1, r3, #3
 8001ca4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ca8:	00d0      	lsls	r0, r2, #3
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	1912      	adds	r2, r2, r4
 8001cb0:	eb45 0303 	adc.w	r3, r5, r3
 8001cb4:	f04f 0000 	mov.w	r0, #0
 8001cb8:	f04f 0100 	mov.w	r1, #0
 8001cbc:	0299      	lsls	r1, r3, #10
 8001cbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001cc2:	0290      	lsls	r0, r2, #10
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	f7fe faec 	bl	80002b0 <__aeabi_uldivmod>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4613      	mov	r3, r2
 8001cde:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	0f1b      	lsrs	r3, r3, #28
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	61bb      	str	r3, [r7, #24]
      break;
 8001cf6:	e002      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001cfa:	61bb      	str	r3, [r7, #24]
      break;
 8001cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cfe:	69bb      	ldr	r3, [r7, #24]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	00f42400 	.word	0x00f42400
 8001d14:	007a1200 	.word	0x007a1200

08001d18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e28d      	b.n	8002246 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8083 	beq.w	8001e3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d38:	4b94      	ldr	r3, [pc, #592]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d019      	beq.n	8001d78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d44:	4b91      	ldr	r3, [pc, #580]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d106      	bne.n	8001d5e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d50:	4b8e      	ldr	r3, [pc, #568]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d5c:	d00c      	beq.n	8001d78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d5e:	4b8b      	ldr	r3, [pc, #556]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d112      	bne.n	8001d90 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d6a:	4b88      	ldr	r3, [pc, #544]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d76:	d10b      	bne.n	8001d90 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	4b84      	ldr	r3, [pc, #528]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d05b      	beq.n	8001e3c <HAL_RCC_OscConfig+0x124>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d157      	bne.n	8001e3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e25a      	b.n	8002246 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d98:	d106      	bne.n	8001da8 <HAL_RCC_OscConfig+0x90>
 8001d9a:	4b7c      	ldr	r3, [pc, #496]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a7b      	ldr	r2, [pc, #492]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e01d      	b.n	8001de4 <HAL_RCC_OscConfig+0xcc>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0xb4>
 8001db2:	4b76      	ldr	r3, [pc, #472]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a75      	ldr	r2, [pc, #468]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b73      	ldr	r3, [pc, #460]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a72      	ldr	r2, [pc, #456]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0xcc>
 8001dcc:	4b6f      	ldr	r3, [pc, #444]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a6e      	ldr	r2, [pc, #440]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b6c      	ldr	r3, [pc, #432]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a6b      	ldr	r2, [pc, #428]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d013      	beq.n	8001e14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7ff f95e 	bl	80010ac <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df4:	f7ff f95a 	bl	80010ac <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b64      	cmp	r3, #100	; 0x64
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e21f      	b.n	8002246 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	4b61      	ldr	r3, [pc, #388]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0xdc>
 8001e12:	e014      	b.n	8001e3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff f94a 	bl	80010ac <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7ff f946 	bl	80010ac <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e20b      	b.n	8002246 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2e:	4b57      	ldr	r3, [pc, #348]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x104>
 8001e3a:	e000      	b.n	8001e3e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d06f      	beq.n	8001f2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e4a:	4b50      	ldr	r3, [pc, #320]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d017      	beq.n	8001e86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e56:	4b4d      	ldr	r3, [pc, #308]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d105      	bne.n	8001e6e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e62:	4b4a      	ldr	r3, [pc, #296]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00b      	beq.n	8001e86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e6e:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d11c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7a:	4b44      	ldr	r3, [pc, #272]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d116      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d005      	beq.n	8001e9e <HAL_RCC_OscConfig+0x186>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e1d3      	b.n	8002246 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9e:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4937      	ldr	r1, [pc, #220]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb2:	e03a      	b.n	8001f2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d020      	beq.n	8001efe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ebc:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff f8f3 	bl	80010ac <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eca:	f7ff f8ef 	bl	80010ac <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e1b4      	b.n	8002246 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee8:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4925      	ldr	r1, [pc, #148]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]
 8001efc:	e015      	b.n	8001f2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efe:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff f8d2 	bl	80010ac <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0c:	f7ff f8ce 	bl	80010ac <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e193      	b.n	8002246 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d036      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d016      	beq.n	8001f6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_RCC_OscConfig+0x27c>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f44:	f7ff f8b2 	bl	80010ac <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f4c:	f7ff f8ae 	bl	80010ac <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e173      	b.n	8002246 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0x234>
 8001f6a:	e01b      	b.n	8001fa4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_RCC_OscConfig+0x27c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f72:	f7ff f89b 	bl	80010ac <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f78:	e00e      	b.n	8001f98 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f7a:	f7ff f897 	bl	80010ac <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d907      	bls.n	8001f98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e15c      	b.n	8002246 <HAL_RCC_OscConfig+0x52e>
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	42470000 	.word	0x42470000
 8001f94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f98:	4b8a      	ldr	r3, [pc, #552]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 8001f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1ea      	bne.n	8001f7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 8097 	beq.w	80020e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb6:	4b83      	ldr	r3, [pc, #524]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10f      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	4b7f      	ldr	r3, [pc, #508]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	4a7e      	ldr	r2, [pc, #504]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 8001fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd2:	4b7c      	ldr	r3, [pc, #496]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe2:	4b79      	ldr	r3, [pc, #484]	; (80021c8 <HAL_RCC_OscConfig+0x4b0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d118      	bne.n	8002020 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fee:	4b76      	ldr	r3, [pc, #472]	; (80021c8 <HAL_RCC_OscConfig+0x4b0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a75      	ldr	r2, [pc, #468]	; (80021c8 <HAL_RCC_OscConfig+0x4b0>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffa:	f7ff f857 	bl	80010ac <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002002:	f7ff f853 	bl	80010ac <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e118      	b.n	8002246 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002014:	4b6c      	ldr	r3, [pc, #432]	; (80021c8 <HAL_RCC_OscConfig+0x4b0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d106      	bne.n	8002036 <HAL_RCC_OscConfig+0x31e>
 8002028:	4b66      	ldr	r3, [pc, #408]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202c:	4a65      	ldr	r2, [pc, #404]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6713      	str	r3, [r2, #112]	; 0x70
 8002034:	e01c      	b.n	8002070 <HAL_RCC_OscConfig+0x358>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b05      	cmp	r3, #5
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x340>
 800203e:	4b61      	ldr	r3, [pc, #388]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	4a60      	ldr	r2, [pc, #384]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	6713      	str	r3, [r2, #112]	; 0x70
 800204a:	4b5e      	ldr	r3, [pc, #376]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	4a5d      	ldr	r2, [pc, #372]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6713      	str	r3, [r2, #112]	; 0x70
 8002056:	e00b      	b.n	8002070 <HAL_RCC_OscConfig+0x358>
 8002058:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 800205a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205c:	4a59      	ldr	r2, [pc, #356]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	6713      	str	r3, [r2, #112]	; 0x70
 8002064:	4b57      	ldr	r3, [pc, #348]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	4a56      	ldr	r2, [pc, #344]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 800206a:	f023 0304 	bic.w	r3, r3, #4
 800206e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d015      	beq.n	80020a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7ff f818 	bl	80010ac <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207e:	e00a      	b.n	8002096 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002080:	f7ff f814 	bl	80010ac <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	; 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e0d7      	b.n	8002246 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002096:	4b4b      	ldr	r3, [pc, #300]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0ee      	beq.n	8002080 <HAL_RCC_OscConfig+0x368>
 80020a2:	e014      	b.n	80020ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a4:	f7ff f802 	bl	80010ac <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ac:	f7fe fffe 	bl	80010ac <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e0c1      	b.n	8002246 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c2:	4b40      	ldr	r3, [pc, #256]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 80020c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1ee      	bne.n	80020ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ce:	7dfb      	ldrb	r3, [r7, #23]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d105      	bne.n	80020e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d4:	4b3b      	ldr	r3, [pc, #236]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	4a3a      	ldr	r2, [pc, #232]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 80020da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80ad 	beq.w	8002244 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ea:	4b36      	ldr	r3, [pc, #216]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d060      	beq.n	80021b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d145      	bne.n	800218a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fe:	4b33      	ldr	r3, [pc, #204]	; (80021cc <HAL_RCC_OscConfig+0x4b4>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7fe ffd2 	bl	80010ac <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210c:	f7fe ffce 	bl	80010ac <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e093      	b.n	8002246 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211e:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	019b      	lsls	r3, r3, #6
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	085b      	lsrs	r3, r3, #1
 8002142:	3b01      	subs	r3, #1
 8002144:	041b      	lsls	r3, r3, #16
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	071b      	lsls	r3, r3, #28
 8002156:	491b      	ldr	r1, [pc, #108]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <HAL_RCC_OscConfig+0x4b4>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002162:	f7fe ffa3 	bl	80010ac <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216a:	f7fe ff9f 	bl	80010ac <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e064      	b.n	8002246 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x452>
 8002188:	e05c      	b.n	8002244 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <HAL_RCC_OscConfig+0x4b4>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7fe ff8c 	bl	80010ac <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002198:	f7fe ff88 	bl	80010ac <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e04d      	b.n	8002246 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_RCC_OscConfig+0x4ac>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x480>
 80021b6:	e045      	b.n	8002244 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d107      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e040      	b.n	8002246 <HAL_RCC_OscConfig+0x52e>
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40007000 	.word	0x40007000
 80021cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <HAL_RCC_OscConfig+0x538>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d030      	beq.n	8002240 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d129      	bne.n	8002240 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d122      	bne.n	8002240 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002200:	4013      	ands	r3, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002206:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002208:	4293      	cmp	r3, r2
 800220a:	d119      	bne.n	8002240 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002216:	085b      	lsrs	r3, r3, #1
 8002218:	3b01      	subs	r3, #1
 800221a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800221c:	429a      	cmp	r2, r3
 800221e:	d10f      	bne.n	8002240 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800222c:	429a      	cmp	r2, r3
 800222e:	d107      	bne.n	8002240 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800223c:	429a      	cmp	r2, r3
 800223e:	d001      	beq.n	8002244 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800

08002254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e041      	b.n	80022ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f839 	bl	80022f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3304      	adds	r3, #4
 8002290:	4619      	mov	r1, r3
 8002292:	4610      	mov	r0, r2
 8002294:	f000 f9d8 	bl	8002648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d001      	beq.n	8002320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e04e      	b.n	80023be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2202      	movs	r2, #2
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a23      	ldr	r2, [pc, #140]	; (80023cc <HAL_TIM_Base_Start_IT+0xc4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d022      	beq.n	8002388 <HAL_TIM_Base_Start_IT+0x80>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234a:	d01d      	beq.n	8002388 <HAL_TIM_Base_Start_IT+0x80>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1f      	ldr	r2, [pc, #124]	; (80023d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d018      	beq.n	8002388 <HAL_TIM_Base_Start_IT+0x80>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a1e      	ldr	r2, [pc, #120]	; (80023d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d013      	beq.n	8002388 <HAL_TIM_Base_Start_IT+0x80>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a1c      	ldr	r2, [pc, #112]	; (80023d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00e      	beq.n	8002388 <HAL_TIM_Base_Start_IT+0x80>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a1b      	ldr	r2, [pc, #108]	; (80023dc <HAL_TIM_Base_Start_IT+0xd4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d009      	beq.n	8002388 <HAL_TIM_Base_Start_IT+0x80>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a19      	ldr	r2, [pc, #100]	; (80023e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d004      	beq.n	8002388 <HAL_TIM_Base_Start_IT+0x80>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a18      	ldr	r2, [pc, #96]	; (80023e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d111      	bne.n	80023ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b06      	cmp	r3, #6
 8002398:	d010      	beq.n	80023bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0201 	orr.w	r2, r2, #1
 80023a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023aa:	e007      	b.n	80023bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40010000 	.word	0x40010000
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40000800 	.word	0x40000800
 80023d8:	40000c00 	.word	0x40000c00
 80023dc:	40010400 	.word	0x40010400
 80023e0:	40014000 	.word	0x40014000
 80023e4:	40001800 	.word	0x40001800

080023e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d122      	bne.n	8002444 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b02      	cmp	r3, #2
 800240a:	d11b      	bne.n	8002444 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0202 	mvn.w	r2, #2
 8002414:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f8ee 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 8002430:	e005      	b.n	800243e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f8e0 	bl	80025f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f8f1 	bl	8002620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b04      	cmp	r3, #4
 8002450:	d122      	bne.n	8002498 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b04      	cmp	r3, #4
 800245e:	d11b      	bne.n	8002498 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0204 	mvn.w	r2, #4
 8002468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2202      	movs	r2, #2
 800246e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f8c4 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 8002484:	e005      	b.n	8002492 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f8b6 	bl	80025f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f8c7 	bl	8002620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d122      	bne.n	80024ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d11b      	bne.n	80024ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f06f 0208 	mvn.w	r2, #8
 80024bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2204      	movs	r2, #4
 80024c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f89a 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 80024d8:	e005      	b.n	80024e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f88c 	bl	80025f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f89d 	bl	8002620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b10      	cmp	r3, #16
 80024f8:	d122      	bne.n	8002540 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b10      	cmp	r3, #16
 8002506:	d11b      	bne.n	8002540 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0210 	mvn.w	r2, #16
 8002510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2208      	movs	r2, #8
 8002516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f870 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 800252c:	e005      	b.n	800253a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f862 	bl	80025f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f873 	bl	8002620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b01      	cmp	r3, #1
 800254c:	d10e      	bne.n	800256c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b01      	cmp	r3, #1
 800255a:	d107      	bne.n	800256c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0201 	mvn.w	r2, #1
 8002564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7fe fb48 	bl	8000bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002576:	2b80      	cmp	r3, #128	; 0x80
 8002578:	d10e      	bne.n	8002598 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002584:	2b80      	cmp	r3, #128	; 0x80
 8002586:	d107      	bne.n	8002598 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f902 	bl	800279c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a2:	2b40      	cmp	r3, #64	; 0x40
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b0:	2b40      	cmp	r3, #64	; 0x40
 80025b2:	d107      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f838 	bl	8002634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d10e      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d107      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0220 	mvn.w	r2, #32
 80025e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f8cc 	bl	8002788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025f0:	bf00      	nop
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a40      	ldr	r2, [pc, #256]	; (800275c <TIM_Base_SetConfig+0x114>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d013      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002666:	d00f      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a3d      	ldr	r2, [pc, #244]	; (8002760 <TIM_Base_SetConfig+0x118>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00b      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a3c      	ldr	r2, [pc, #240]	; (8002764 <TIM_Base_SetConfig+0x11c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d007      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a3b      	ldr	r2, [pc, #236]	; (8002768 <TIM_Base_SetConfig+0x120>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d003      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a3a      	ldr	r2, [pc, #232]	; (800276c <TIM_Base_SetConfig+0x124>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d108      	bne.n	800269a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a2f      	ldr	r2, [pc, #188]	; (800275c <TIM_Base_SetConfig+0x114>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d02b      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a8:	d027      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a2c      	ldr	r2, [pc, #176]	; (8002760 <TIM_Base_SetConfig+0x118>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d023      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a2b      	ldr	r2, [pc, #172]	; (8002764 <TIM_Base_SetConfig+0x11c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d01f      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a2a      	ldr	r2, [pc, #168]	; (8002768 <TIM_Base_SetConfig+0x120>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d01b      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a29      	ldr	r2, [pc, #164]	; (800276c <TIM_Base_SetConfig+0x124>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d017      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a28      	ldr	r2, [pc, #160]	; (8002770 <TIM_Base_SetConfig+0x128>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d013      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a27      	ldr	r2, [pc, #156]	; (8002774 <TIM_Base_SetConfig+0x12c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00f      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a26      	ldr	r2, [pc, #152]	; (8002778 <TIM_Base_SetConfig+0x130>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00b      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a25      	ldr	r2, [pc, #148]	; (800277c <TIM_Base_SetConfig+0x134>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d007      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a24      	ldr	r2, [pc, #144]	; (8002780 <TIM_Base_SetConfig+0x138>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d003      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a23      	ldr	r2, [pc, #140]	; (8002784 <TIM_Base_SetConfig+0x13c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d108      	bne.n	800270c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	4313      	orrs	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a0a      	ldr	r2, [pc, #40]	; (800275c <TIM_Base_SetConfig+0x114>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d003      	beq.n	8002740 <TIM_Base_SetConfig+0xf8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a0c      	ldr	r2, [pc, #48]	; (800276c <TIM_Base_SetConfig+0x124>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d103      	bne.n	8002748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	615a      	str	r2, [r3, #20]
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40010000 	.word	0x40010000
 8002760:	40000400 	.word	0x40000400
 8002764:	40000800 	.word	0x40000800
 8002768:	40000c00 	.word	0x40000c00
 800276c:	40010400 	.word	0x40010400
 8002770:	40014000 	.word	0x40014000
 8002774:	40014400 	.word	0x40014400
 8002778:	40014800 	.word	0x40014800
 800277c:	40001800 	.word	0x40001800
 8002780:	40001c00 	.word	0x40001c00
 8002784:	40002000 	.word	0x40002000

08002788 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e03f      	b.n	8002842 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7fe fbb8 	bl	8000f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2224      	movs	r2, #36	; 0x24
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fddb 	bl	80033b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b08a      	sub	sp, #40	; 0x28
 800284e:	af02      	add	r7, sp, #8
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	603b      	str	r3, [r7, #0]
 8002856:	4613      	mov	r3, r2
 8002858:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b20      	cmp	r3, #32
 8002868:	d17c      	bne.n	8002964 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <HAL_UART_Transmit+0x2c>
 8002870:	88fb      	ldrh	r3, [r7, #6]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e075      	b.n	8002966 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_UART_Transmit+0x3e>
 8002884:	2302      	movs	r3, #2
 8002886:	e06e      	b.n	8002966 <HAL_UART_Transmit+0x11c>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2221      	movs	r2, #33	; 0x21
 800289a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800289e:	f7fe fc05 	bl	80010ac <HAL_GetTick>
 80028a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	88fa      	ldrh	r2, [r7, #6]
 80028a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	88fa      	ldrh	r2, [r7, #6]
 80028ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b8:	d108      	bne.n	80028cc <HAL_UART_Transmit+0x82>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d104      	bne.n	80028cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	e003      	b.n	80028d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028dc:	e02a      	b.n	8002934 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2200      	movs	r2, #0
 80028e6:	2180      	movs	r1, #128	; 0x80
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 fb1f 	bl	8002f2c <UART_WaitOnFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e036      	b.n	8002966 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10b      	bne.n	8002916 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800290c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	3302      	adds	r3, #2
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	e007      	b.n	8002926 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	3301      	adds	r3, #1
 8002924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1cf      	bne.n	80028de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2200      	movs	r2, #0
 8002946:	2140      	movs	r1, #64	; 0x40
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 faef 	bl	8002f2c <UART_WaitOnFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e006      	b.n	8002966 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	e000      	b.n	8002966 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002964:	2302      	movs	r3, #2
  }
}
 8002966:	4618      	mov	r0, r3
 8002968:	3720      	adds	r7, #32
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	4613      	mov	r3, r2
 800297a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b20      	cmp	r3, #32
 8002986:	d11d      	bne.n	80029c4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_UART_Receive_IT+0x26>
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e016      	b.n	80029c6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_UART_Receive_IT+0x38>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e00f      	b.n	80029c6 <HAL_UART_Receive_IT+0x58>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	461a      	mov	r2, r3
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fb24 	bl	8003008 <UART_Start_Receive_IT>
 80029c0:	4603      	mov	r3, r0
 80029c2:	e000      	b.n	80029c6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80029c4:	2302      	movs	r3, #2
  }
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b0ba      	sub	sp, #232	; 0xe8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10f      	bne.n	8002a36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <HAL_UART_IRQHandler+0x66>
 8002a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fc03 	bl	800323a <UART_Receive_IT>
      return;
 8002a34:	e256      	b.n	8002ee4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 80de 	beq.w	8002bfc <HAL_UART_IRQHandler+0x22c>
 8002a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d106      	bne.n	8002a5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80d1 	beq.w	8002bfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <HAL_UART_IRQHandler+0xae>
 8002a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HAL_UART_IRQHandler+0xd2>
 8002a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f043 0202 	orr.w	r2, r3, #2
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_UART_IRQHandler+0xf6>
 8002aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d005      	beq.n	8002ac6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f043 0204 	orr.w	r2, r3, #4
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d011      	beq.n	8002af6 <HAL_UART_IRQHandler+0x126>
 8002ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d105      	bne.n	8002aea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f043 0208 	orr.w	r2, r3, #8
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 81ed 	beq.w	8002eda <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_UART_IRQHandler+0x14e>
 8002b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fb8e 	bl	800323a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d103      	bne.n	8002b4a <HAL_UART_IRQHandler+0x17a>
 8002b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d04f      	beq.n	8002bea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fa96 	bl	800307c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d141      	bne.n	8002be2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3314      	adds	r3, #20
 8002b64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b6c:	e853 3f00 	ldrex	r3, [r3]
 8002b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3314      	adds	r3, #20
 8002b86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b9a:	e841 2300 	strex	r3, r2, [r1]
 8002b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1d9      	bne.n	8002b5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d013      	beq.n	8002bda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	4a7d      	ldr	r2, [pc, #500]	; (8002dac <HAL_UART_IRQHandler+0x3dc>)
 8002bb8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fbf6 	bl	80013b0 <HAL_DMA_Abort_IT>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d016      	beq.n	8002bf8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd8:	e00e      	b.n	8002bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f990 	bl	8002f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be0:	e00a      	b.n	8002bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f98c 	bl	8002f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be8:	e006      	b.n	8002bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f988 	bl	8002f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002bf6:	e170      	b.n	8002eda <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf8:	bf00      	nop
    return;
 8002bfa:	e16e      	b.n	8002eda <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	f040 814a 	bne.w	8002e9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8143 	beq.w	8002e9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 813c 	beq.w	8002e9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b40      	cmp	r3, #64	; 0x40
 8002c44:	f040 80b4 	bne.w	8002db0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8140 	beq.w	8002ede <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c66:	429a      	cmp	r2, r3
 8002c68:	f080 8139 	bcs.w	8002ede <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c7e:	f000 8088 	beq.w	8002d92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	330c      	adds	r3, #12
 8002c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c90:	e853 3f00 	ldrex	r3, [r3]
 8002c94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	330c      	adds	r3, #12
 8002caa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002cae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cbe:	e841 2300 	strex	r3, r2, [r1]
 8002cc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1d9      	bne.n	8002c82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3314      	adds	r3, #20
 8002cd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cd8:	e853 3f00 	ldrex	r3, [r3]
 8002cdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ce0:	f023 0301 	bic.w	r3, r3, #1
 8002ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3314      	adds	r3, #20
 8002cee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cf2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cfe:	e841 2300 	strex	r3, r2, [r1]
 8002d02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1e1      	bne.n	8002cce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3314      	adds	r3, #20
 8002d10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d14:	e853 3f00 	ldrex	r3, [r3]
 8002d18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3314      	adds	r3, #20
 8002d2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d36:	e841 2300 	strex	r3, r2, [r1]
 8002d3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1e3      	bne.n	8002d0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5a:	e853 3f00 	ldrex	r3, [r3]
 8002d5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d62:	f023 0310 	bic.w	r3, r3, #16
 8002d66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	330c      	adds	r3, #12
 8002d70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d74:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d7c:	e841 2300 	strex	r3, r2, [r1]
 8002d80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e3      	bne.n	8002d50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe fa9f 	bl	80012d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	4619      	mov	r1, r3
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f8b6 	bl	8002f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002da8:	e099      	b.n	8002ede <HAL_UART_IRQHandler+0x50e>
 8002daa:	bf00      	nop
 8002dac:	08003143 	.word	0x08003143
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 808b 	beq.w	8002ee2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002dcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8086 	beq.w	8002ee2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	330c      	adds	r3, #12
 8002ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de0:	e853 3f00 	ldrex	r3, [r3]
 8002de4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002dfa:	647a      	str	r2, [r7, #68]	; 0x44
 8002dfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e3      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3314      	adds	r3, #20
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	e853 3f00 	ldrex	r3, [r3]
 8002e1c:	623b      	str	r3, [r7, #32]
   return(result);
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3314      	adds	r3, #20
 8002e2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e32:	633a      	str	r2, [r7, #48]	; 0x30
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e3      	bne.n	8002e0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	e853 3f00 	ldrex	r3, [r3]
 8002e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0310 	bic.w	r3, r3, #16
 8002e6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	330c      	adds	r3, #12
 8002e74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e78:	61fa      	str	r2, [r7, #28]
 8002e7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7c:	69b9      	ldr	r1, [r7, #24]
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	e841 2300 	strex	r3, r2, [r1]
 8002e84:	617b      	str	r3, [r7, #20]
   return(result);
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e3      	bne.n	8002e54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e90:	4619      	mov	r1, r3
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f83e 	bl	8002f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e98:	e023      	b.n	8002ee2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_UART_IRQHandler+0x4ea>
 8002ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f959 	bl	800316a <UART_Transmit_IT>
    return;
 8002eb8:	e014      	b.n	8002ee4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00e      	beq.n	8002ee4 <HAL_UART_IRQHandler+0x514>
 8002ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f999 	bl	800320a <UART_EndTransmit_IT>
    return;
 8002ed8:	e004      	b.n	8002ee4 <HAL_UART_IRQHandler+0x514>
    return;
 8002eda:	bf00      	nop
 8002edc:	e002      	b.n	8002ee4 <HAL_UART_IRQHandler+0x514>
      return;
 8002ede:	bf00      	nop
 8002ee0:	e000      	b.n	8002ee4 <HAL_UART_IRQHandler+0x514>
      return;
 8002ee2:	bf00      	nop
  }
}
 8002ee4:	37e8      	adds	r7, #232	; 0xe8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop

08002eec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b090      	sub	sp, #64	; 0x40
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f3c:	e050      	b.n	8002fe0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d04c      	beq.n	8002fe0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d007      	beq.n	8002f5c <UART_WaitOnFlagUntilTimeout+0x30>
 8002f4c:	f7fe f8ae 	bl	80010ac <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d241      	bcs.n	8002fe0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	330c      	adds	r3, #12
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	e853 3f00 	ldrex	r3, [r3]
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	330c      	adds	r3, #12
 8002f7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f7c:	637a      	str	r2, [r7, #52]	; 0x34
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f84:	e841 2300 	strex	r3, r2, [r1]
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e5      	bne.n	8002f5c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3314      	adds	r3, #20
 8002f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	e853 3f00 	ldrex	r3, [r3]
 8002f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3314      	adds	r3, #20
 8002fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fb0:	623a      	str	r2, [r7, #32]
 8002fb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb4:	69f9      	ldr	r1, [r7, #28]
 8002fb6:	6a3a      	ldr	r2, [r7, #32]
 8002fb8:	e841 2300 	strex	r3, r2, [r1]
 8002fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1e5      	bne.n	8002f90 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e00f      	b.n	8003000 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d09f      	beq.n	8002f3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3740      	adds	r7, #64	; 0x40
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	4613      	mov	r3, r2
 8003014:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	88fa      	ldrh	r2, [r7, #6]
 8003020:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	88fa      	ldrh	r2, [r7, #6]
 8003026:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2222      	movs	r2, #34	; 0x22
 8003032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800304c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695a      	ldr	r2, [r3, #20]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 0220 	orr.w	r2, r2, #32
 800306c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800307c:	b480      	push	{r7}
 800307e:	b095      	sub	sp, #84	; 0x54
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	330c      	adds	r3, #12
 800308a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308e:	e853 3f00 	ldrex	r3, [r3]
 8003092:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800309a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	330c      	adds	r3, #12
 80030a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030a4:	643a      	str	r2, [r7, #64]	; 0x40
 80030a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030ac:	e841 2300 	strex	r3, r2, [r1]
 80030b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e5      	bne.n	8003084 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3314      	adds	r3, #20
 80030be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	e853 3f00 	ldrex	r3, [r3]
 80030c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f023 0301 	bic.w	r3, r3, #1
 80030ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3314      	adds	r3, #20
 80030d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e0:	e841 2300 	strex	r3, r2, [r1]
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e5      	bne.n	80030b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d119      	bne.n	8003128 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	330c      	adds	r3, #12
 80030fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	e853 3f00 	ldrex	r3, [r3]
 8003102:	60bb      	str	r3, [r7, #8]
   return(result);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f023 0310 	bic.w	r3, r3, #16
 800310a:	647b      	str	r3, [r7, #68]	; 0x44
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	330c      	adds	r3, #12
 8003112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003114:	61ba      	str	r2, [r7, #24]
 8003116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003118:	6979      	ldr	r1, [r7, #20]
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	e841 2300 	strex	r3, r2, [r1]
 8003120:	613b      	str	r3, [r7, #16]
   return(result);
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e5      	bne.n	80030f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003136:	bf00      	nop
 8003138:	3754      	adds	r7, #84	; 0x54
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7ff fecf 	bl	8002f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800316a:	b480      	push	{r7}
 800316c:	b085      	sub	sp, #20
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b21      	cmp	r3, #33	; 0x21
 800317c:	d13e      	bne.n	80031fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003186:	d114      	bne.n	80031b2 <UART_Transmit_IT+0x48>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d110      	bne.n	80031b2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	1c9a      	adds	r2, r3, #2
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	621a      	str	r2, [r3, #32]
 80031b0:	e008      	b.n	80031c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	1c59      	adds	r1, r3, #1
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6211      	str	r1, [r2, #32]
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4619      	mov	r1, r3
 80031d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10f      	bne.n	80031f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e000      	b.n	80031fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
  }
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003220:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff fe5e 	bl	8002eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b08c      	sub	sp, #48	; 0x30
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b22      	cmp	r3, #34	; 0x22
 800324c:	f040 80ab 	bne.w	80033a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003258:	d117      	bne.n	800328a <UART_Receive_IT+0x50>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d113      	bne.n	800328a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003262:	2300      	movs	r3, #0
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003278:	b29a      	uxth	r2, r3
 800327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003282:	1c9a      	adds	r2, r3, #2
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
 8003288:	e026      	b.n	80032d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003290:	2300      	movs	r3, #0
 8003292:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329c:	d007      	beq.n	80032ae <UART_Receive_IT+0x74>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <UART_Receive_IT+0x82>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e008      	b.n	80032ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	4619      	mov	r1, r3
 80032e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d15a      	bne.n	80033a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0220 	bic.w	r2, r2, #32
 80032fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800330a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	2b01      	cmp	r3, #1
 800332a:	d135      	bne.n	8003398 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	e853 3f00 	ldrex	r3, [r3]
 8003340:	613b      	str	r3, [r7, #16]
   return(result);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f023 0310 	bic.w	r3, r3, #16
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003352:	623a      	str	r2, [r7, #32]
 8003354:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003356:	69f9      	ldr	r1, [r7, #28]
 8003358:	6a3a      	ldr	r2, [r7, #32]
 800335a:	e841 2300 	strex	r3, r2, [r1]
 800335e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1e5      	bne.n	8003332 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b10      	cmp	r3, #16
 8003372:	d10a      	bne.n	800338a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800338e:	4619      	mov	r1, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff fdbf 	bl	8002f14 <HAL_UARTEx_RxEventCallback>
 8003396:	e002      	b.n	800339e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7fd fc0d 	bl	8000bb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e002      	b.n	80033a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e000      	b.n	80033a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
  }
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3730      	adds	r7, #48	; 0x30
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033b4:	b09f      	sub	sp, #124	; 0x7c
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c6:	68d9      	ldr	r1, [r3, #12]
 80033c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	ea40 0301 	orr.w	r3, r0, r1
 80033d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	431a      	orrs	r2, r3
 80033dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	431a      	orrs	r2, r3
 80033e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80033ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033f4:	f021 010c 	bic.w	r1, r1, #12
 80033f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033fe:	430b      	orrs	r3, r1
 8003400:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800340c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340e:	6999      	ldr	r1, [r3, #24]
 8003410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	ea40 0301 	orr.w	r3, r0, r1
 8003418:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800341a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	4bc5      	ldr	r3, [pc, #788]	; (8003734 <UART_SetConfig+0x384>)
 8003420:	429a      	cmp	r2, r3
 8003422:	d004      	beq.n	800342e <UART_SetConfig+0x7e>
 8003424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4bc3      	ldr	r3, [pc, #780]	; (8003738 <UART_SetConfig+0x388>)
 800342a:	429a      	cmp	r2, r3
 800342c:	d103      	bne.n	8003436 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800342e:	f7fe fa7b 	bl	8001928 <HAL_RCC_GetPCLK2Freq>
 8003432:	6778      	str	r0, [r7, #116]	; 0x74
 8003434:	e002      	b.n	800343c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003436:	f7fe fa63 	bl	8001900 <HAL_RCC_GetPCLK1Freq>
 800343a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800343c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003444:	f040 80b6 	bne.w	80035b4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800344a:	461c      	mov	r4, r3
 800344c:	f04f 0500 	mov.w	r5, #0
 8003450:	4622      	mov	r2, r4
 8003452:	462b      	mov	r3, r5
 8003454:	1891      	adds	r1, r2, r2
 8003456:	6439      	str	r1, [r7, #64]	; 0x40
 8003458:	415b      	adcs	r3, r3
 800345a:	647b      	str	r3, [r7, #68]	; 0x44
 800345c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003460:	1912      	adds	r2, r2, r4
 8003462:	eb45 0303 	adc.w	r3, r5, r3
 8003466:	f04f 0000 	mov.w	r0, #0
 800346a:	f04f 0100 	mov.w	r1, #0
 800346e:	00d9      	lsls	r1, r3, #3
 8003470:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003474:	00d0      	lsls	r0, r2, #3
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	1911      	adds	r1, r2, r4
 800347c:	6639      	str	r1, [r7, #96]	; 0x60
 800347e:	416b      	adcs	r3, r5
 8003480:	667b      	str	r3, [r7, #100]	; 0x64
 8003482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	461a      	mov	r2, r3
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	1891      	adds	r1, r2, r2
 800348e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003490:	415b      	adcs	r3, r3
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003494:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003498:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800349c:	f7fc ff08 	bl	80002b0 <__aeabi_uldivmod>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4ba5      	ldr	r3, [pc, #660]	; (800373c <UART_SetConfig+0x38c>)
 80034a6:	fba3 2302 	umull	r2, r3, r3, r2
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	011e      	lsls	r6, r3, #4
 80034ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b0:	461c      	mov	r4, r3
 80034b2:	f04f 0500 	mov.w	r5, #0
 80034b6:	4622      	mov	r2, r4
 80034b8:	462b      	mov	r3, r5
 80034ba:	1891      	adds	r1, r2, r2
 80034bc:	6339      	str	r1, [r7, #48]	; 0x30
 80034be:	415b      	adcs	r3, r3
 80034c0:	637b      	str	r3, [r7, #52]	; 0x34
 80034c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034c6:	1912      	adds	r2, r2, r4
 80034c8:	eb45 0303 	adc.w	r3, r5, r3
 80034cc:	f04f 0000 	mov.w	r0, #0
 80034d0:	f04f 0100 	mov.w	r1, #0
 80034d4:	00d9      	lsls	r1, r3, #3
 80034d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034da:	00d0      	lsls	r0, r2, #3
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	1911      	adds	r1, r2, r4
 80034e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80034e4:	416b      	adcs	r3, r5
 80034e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	461a      	mov	r2, r3
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	1891      	adds	r1, r2, r2
 80034f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80034f6:	415b      	adcs	r3, r3
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034fe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003502:	f7fc fed5 	bl	80002b0 <__aeabi_uldivmod>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4b8c      	ldr	r3, [pc, #560]	; (800373c <UART_SetConfig+0x38c>)
 800350c:	fba3 1302 	umull	r1, r3, r3, r2
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	2164      	movs	r1, #100	; 0x64
 8003514:	fb01 f303 	mul.w	r3, r1, r3
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	3332      	adds	r3, #50	; 0x32
 800351e:	4a87      	ldr	r2, [pc, #540]	; (800373c <UART_SetConfig+0x38c>)
 8003520:	fba2 2303 	umull	r2, r3, r2, r3
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800352c:	441e      	add	r6, r3
 800352e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003530:	4618      	mov	r0, r3
 8003532:	f04f 0100 	mov.w	r1, #0
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	1894      	adds	r4, r2, r2
 800353c:	623c      	str	r4, [r7, #32]
 800353e:	415b      	adcs	r3, r3
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
 8003542:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003546:	1812      	adds	r2, r2, r0
 8003548:	eb41 0303 	adc.w	r3, r1, r3
 800354c:	f04f 0400 	mov.w	r4, #0
 8003550:	f04f 0500 	mov.w	r5, #0
 8003554:	00dd      	lsls	r5, r3, #3
 8003556:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800355a:	00d4      	lsls	r4, r2, #3
 800355c:	4622      	mov	r2, r4
 800355e:	462b      	mov	r3, r5
 8003560:	1814      	adds	r4, r2, r0
 8003562:	653c      	str	r4, [r7, #80]	; 0x50
 8003564:	414b      	adcs	r3, r1
 8003566:	657b      	str	r3, [r7, #84]	; 0x54
 8003568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	461a      	mov	r2, r3
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	1891      	adds	r1, r2, r2
 8003574:	61b9      	str	r1, [r7, #24]
 8003576:	415b      	adcs	r3, r3
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800357e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003582:	f7fc fe95 	bl	80002b0 <__aeabi_uldivmod>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4b6c      	ldr	r3, [pc, #432]	; (800373c <UART_SetConfig+0x38c>)
 800358c:	fba3 1302 	umull	r1, r3, r3, r2
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	2164      	movs	r1, #100	; 0x64
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	3332      	adds	r3, #50	; 0x32
 800359e:	4a67      	ldr	r2, [pc, #412]	; (800373c <UART_SetConfig+0x38c>)
 80035a0:	fba2 2303 	umull	r2, r3, r2, r3
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	f003 0207 	and.w	r2, r3, #7
 80035aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4432      	add	r2, r6
 80035b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035b2:	e0b9      	b.n	8003728 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b6:	461c      	mov	r4, r3
 80035b8:	f04f 0500 	mov.w	r5, #0
 80035bc:	4622      	mov	r2, r4
 80035be:	462b      	mov	r3, r5
 80035c0:	1891      	adds	r1, r2, r2
 80035c2:	6139      	str	r1, [r7, #16]
 80035c4:	415b      	adcs	r3, r3
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035cc:	1912      	adds	r2, r2, r4
 80035ce:	eb45 0303 	adc.w	r3, r5, r3
 80035d2:	f04f 0000 	mov.w	r0, #0
 80035d6:	f04f 0100 	mov.w	r1, #0
 80035da:	00d9      	lsls	r1, r3, #3
 80035dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035e0:	00d0      	lsls	r0, r2, #3
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	eb12 0804 	adds.w	r8, r2, r4
 80035ea:	eb43 0905 	adc.w	r9, r3, r5
 80035ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f04f 0100 	mov.w	r1, #0
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	008b      	lsls	r3, r1, #2
 8003602:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003606:	0082      	lsls	r2, r0, #2
 8003608:	4640      	mov	r0, r8
 800360a:	4649      	mov	r1, r9
 800360c:	f7fc fe50 	bl	80002b0 <__aeabi_uldivmod>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4b49      	ldr	r3, [pc, #292]	; (800373c <UART_SetConfig+0x38c>)
 8003616:	fba3 2302 	umull	r2, r3, r3, r2
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	011e      	lsls	r6, r3, #4
 800361e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003620:	4618      	mov	r0, r3
 8003622:	f04f 0100 	mov.w	r1, #0
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	1894      	adds	r4, r2, r2
 800362c:	60bc      	str	r4, [r7, #8]
 800362e:	415b      	adcs	r3, r3
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003636:	1812      	adds	r2, r2, r0
 8003638:	eb41 0303 	adc.w	r3, r1, r3
 800363c:	f04f 0400 	mov.w	r4, #0
 8003640:	f04f 0500 	mov.w	r5, #0
 8003644:	00dd      	lsls	r5, r3, #3
 8003646:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800364a:	00d4      	lsls	r4, r2, #3
 800364c:	4622      	mov	r2, r4
 800364e:	462b      	mov	r3, r5
 8003650:	1814      	adds	r4, r2, r0
 8003652:	64bc      	str	r4, [r7, #72]	; 0x48
 8003654:	414b      	adcs	r3, r1
 8003656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4618      	mov	r0, r3
 800365e:	f04f 0100 	mov.w	r1, #0
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	008b      	lsls	r3, r1, #2
 800366c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003670:	0082      	lsls	r2, r0, #2
 8003672:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003676:	f7fc fe1b 	bl	80002b0 <__aeabi_uldivmod>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4b2f      	ldr	r3, [pc, #188]	; (800373c <UART_SetConfig+0x38c>)
 8003680:	fba3 1302 	umull	r1, r3, r3, r2
 8003684:	095b      	lsrs	r3, r3, #5
 8003686:	2164      	movs	r1, #100	; 0x64
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	3332      	adds	r3, #50	; 0x32
 8003692:	4a2a      	ldr	r2, [pc, #168]	; (800373c <UART_SetConfig+0x38c>)
 8003694:	fba2 2303 	umull	r2, r3, r2, r3
 8003698:	095b      	lsrs	r3, r3, #5
 800369a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800369e:	441e      	add	r6, r3
 80036a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a2:	4618      	mov	r0, r3
 80036a4:	f04f 0100 	mov.w	r1, #0
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	1894      	adds	r4, r2, r2
 80036ae:	603c      	str	r4, [r7, #0]
 80036b0:	415b      	adcs	r3, r3
 80036b2:	607b      	str	r3, [r7, #4]
 80036b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036b8:	1812      	adds	r2, r2, r0
 80036ba:	eb41 0303 	adc.w	r3, r1, r3
 80036be:	f04f 0400 	mov.w	r4, #0
 80036c2:	f04f 0500 	mov.w	r5, #0
 80036c6:	00dd      	lsls	r5, r3, #3
 80036c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036cc:	00d4      	lsls	r4, r2, #3
 80036ce:	4622      	mov	r2, r4
 80036d0:	462b      	mov	r3, r5
 80036d2:	eb12 0a00 	adds.w	sl, r2, r0
 80036d6:	eb43 0b01 	adc.w	fp, r3, r1
 80036da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4618      	mov	r0, r3
 80036e0:	f04f 0100 	mov.w	r1, #0
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	008b      	lsls	r3, r1, #2
 80036ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036f2:	0082      	lsls	r2, r0, #2
 80036f4:	4650      	mov	r0, sl
 80036f6:	4659      	mov	r1, fp
 80036f8:	f7fc fdda 	bl	80002b0 <__aeabi_uldivmod>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4b0e      	ldr	r3, [pc, #56]	; (800373c <UART_SetConfig+0x38c>)
 8003702:	fba3 1302 	umull	r1, r3, r3, r2
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	2164      	movs	r1, #100	; 0x64
 800370a:	fb01 f303 	mul.w	r3, r1, r3
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	3332      	adds	r3, #50	; 0x32
 8003714:	4a09      	ldr	r2, [pc, #36]	; (800373c <UART_SetConfig+0x38c>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	f003 020f 	and.w	r2, r3, #15
 8003720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4432      	add	r2, r6
 8003726:	609a      	str	r2, [r3, #8]
}
 8003728:	bf00      	nop
 800372a:	377c      	adds	r7, #124	; 0x7c
 800372c:	46bd      	mov	sp, r7
 800372e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003732:	bf00      	nop
 8003734:	40011000 	.word	0x40011000
 8003738:	40011400 	.word	0x40011400
 800373c:	51eb851f 	.word	0x51eb851f

08003740 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800374e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003752:	2b84      	cmp	r3, #132	; 0x84
 8003754:	d005      	beq.n	8003762 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003756:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4413      	add	r3, r2
 800375e:	3303      	adds	r3, #3
 8003760:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003762:	68fb      	ldr	r3, [r7, #12]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003774:	f000 fe2a 	bl	80043cc <vTaskStartScheduler>
  
  return osOK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	bd80      	pop	{r7, pc}

0800377e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800377e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003780:	b089      	sub	sp, #36	; 0x24
 8003782:	af04      	add	r7, sp, #16
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d020      	beq.n	80037d2 <osThreadCreate+0x54>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01c      	beq.n	80037d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685c      	ldr	r4, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681d      	ldr	r5, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691e      	ldr	r6, [r3, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff ffc8 	bl	8003740 <makeFreeRtosPriority>
 80037b0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037ba:	9202      	str	r2, [sp, #8]
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	9100      	str	r1, [sp, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	4632      	mov	r2, r6
 80037c4:	4629      	mov	r1, r5
 80037c6:	4620      	mov	r0, r4
 80037c8:	f000 fc22 	bl	8004010 <xTaskCreateStatic>
 80037cc:	4603      	mov	r3, r0
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	e01c      	b.n	800380c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685c      	ldr	r4, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037de:	b29e      	uxth	r6, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff ffaa 	bl	8003740 <makeFreeRtosPriority>
 80037ec:	4602      	mov	r2, r0
 80037ee:	f107 030c 	add.w	r3, r7, #12
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	9200      	str	r2, [sp, #0]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	4632      	mov	r2, r6
 80037fa:	4629      	mov	r1, r5
 80037fc:	4620      	mov	r0, r4
 80037fe:	f000 fc64 	bl	80040ca <xTaskCreate>
 8003802:	4603      	mov	r3, r0
 8003804:	2b01      	cmp	r3, #1
 8003806:	d001      	beq.n	800380c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003808:	2300      	movs	r3, #0
 800380a:	e000      	b.n	800380e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800380c:	68fb      	ldr	r3, [r7, #12]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003816 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <osDelay+0x16>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	e000      	b.n	800382e <osDelay+0x18>
 800382c:	2301      	movs	r3, #1
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fd98 	bl	8004364 <vTaskDelay>
  
  return osOK;
 8003834:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f103 0208 	add.w	r2, r3, #8
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f04f 32ff 	mov.w	r2, #4294967295
 8003856:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f103 0208 	add.w	r2, r3, #8
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f103 0208 	add.w	r2, r3, #8
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	601a      	str	r2, [r3, #0]
}
 80038d4:	bf00      	nop
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f6:	d103      	bne.n	8003900 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	e00c      	b.n	800391a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3308      	adds	r3, #8
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	e002      	b.n	800390e <vListInsert+0x2e>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	429a      	cmp	r2, r3
 8003918:	d2f6      	bcs.n	8003908 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	601a      	str	r2, [r3, #0]
}
 8003946:	bf00      	nop
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003952:	b480      	push	{r7}
 8003954:	b085      	sub	sp, #20
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6892      	ldr	r2, [r2, #8]
 8003968:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6852      	ldr	r2, [r2, #4]
 8003972:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	429a      	cmp	r2, r3
 800397c:	d103      	bne.n	8003986 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	1e5a      	subs	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80039ce:	bf00      	nop
 80039d0:	e7fe      	b.n	80039d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80039d2:	f001 fb47 	bl	8005064 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039de:	68f9      	ldr	r1, [r7, #12]
 80039e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	441a      	add	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a02:	3b01      	subs	r3, #1
 8003a04:	68f9      	ldr	r1, [r7, #12]
 8003a06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	441a      	add	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	22ff      	movs	r2, #255	; 0xff
 8003a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	22ff      	movs	r2, #255	; 0xff
 8003a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d114      	bne.n	8003a52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d01a      	beq.n	8003a66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3310      	adds	r3, #16
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 ff1b 	bl	8004870 <xTaskRemoveFromEventList>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d012      	beq.n	8003a66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <xQueueGenericReset+0xcc>)
 8003a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	e009      	b.n	8003a66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	3310      	adds	r3, #16
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fef1 	bl	800383e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3324      	adds	r3, #36	; 0x24
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff feec 	bl	800383e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a66:	f001 fb2d 	bl	80050c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a6a:	2301      	movs	r3, #1
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	e000ed04 	.word	0xe000ed04

08003a78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	; 0x28
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	4613      	mov	r3, r2
 8003a84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	613b      	str	r3, [r7, #16]
}
 8003a9e:	bf00      	nop
 8003aa0:	e7fe      	b.n	8003aa0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	3348      	adds	r3, #72	; 0x48
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f001 fbf9 	bl	80052a8 <pvPortMalloc>
 8003ab6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d011      	beq.n	8003ae2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	3348      	adds	r3, #72	; 0x48
 8003ac6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ad0:	79fa      	ldrb	r2, [r7, #7]
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 f805 	bl	8003aec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ae2:	69bb      	ldr	r3, [r7, #24]
	}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3720      	adds	r7, #32
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d103      	bne.n	8003b08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	e002      	b.n	8003b0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	69b8      	ldr	r0, [r7, #24]
 8003b1e:	f7ff ff43 	bl	80039a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b090      	sub	sp, #64	; 0x40
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
 8003b36:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10a      	bne.n	8003b58 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b54:	bf00      	nop
 8003b56:	e7fe      	b.n	8003b56 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d103      	bne.n	8003b66 <xQueueGenericSendFromISR+0x3c>
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <xQueueGenericSendFromISR+0x40>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <xQueueGenericSendFromISR+0x42>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d103      	bne.n	8003b94 <xQueueGenericSendFromISR+0x6a>
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <xQueueGenericSendFromISR+0x6e>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <xQueueGenericSendFromISR+0x70>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10a      	bne.n	8003bb4 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	623b      	str	r3, [r7, #32]
}
 8003bb0:	bf00      	nop
 8003bb2:	e7fe      	b.n	8003bb2 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bb4:	f001 fb38 	bl	8005228 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003bb8:	f3ef 8211 	mrs	r2, BASEPRI
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	61fa      	str	r2, [r7, #28]
 8003bce:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003bd0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bd2:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d302      	bcc.n	8003be6 <xQueueGenericSendFromISR+0xbc>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d12f      	bne.n	8003c46 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003bfc:	f000 f910 	bl	8003e20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c00:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c08:	d112      	bne.n	8003c30 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d016      	beq.n	8003c40 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c14:	3324      	adds	r3, #36	; 0x24
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fe2a 	bl	8004870 <xTaskRemoveFromEventList>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00e      	beq.n	8003c40 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00b      	beq.n	8003c40 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	e007      	b.n	8003c40 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c34:	3301      	adds	r3, #1
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	b25a      	sxtb	r2, r3
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c40:	2301      	movs	r3, #1
 8003c42:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003c44:	e001      	b.n	8003c4a <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3740      	adds	r7, #64	; 0x40
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08c      	sub	sp, #48	; 0x30
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <xQueueReceive+0x30>
	__asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	623b      	str	r3, [r7, #32]
}
 8003c8c:	bf00      	nop
 8003c8e:	e7fe      	b.n	8003c8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d103      	bne.n	8003c9e <xQueueReceive+0x3e>
 8003c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <xQueueReceive+0x42>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <xQueueReceive+0x44>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <xQueueReceive+0x5e>
	__asm volatile
 8003ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	61fb      	str	r3, [r7, #28]
}
 8003cba:	bf00      	nop
 8003cbc:	e7fe      	b.n	8003cbc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cbe:	f000 ff97 	bl	8004bf0 <xTaskGetSchedulerState>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d102      	bne.n	8003cce <xQueueReceive+0x6e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <xQueueReceive+0x72>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <xQueueReceive+0x74>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10a      	bne.n	8003cee <xQueueReceive+0x8e>
	__asm volatile
 8003cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	61bb      	str	r3, [r7, #24]
}
 8003cea:	bf00      	nop
 8003cec:	e7fe      	b.n	8003cec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cee:	f001 f9b9 	bl	8005064 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d01f      	beq.n	8003d3e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d02:	f000 f8f7 	bl	8003ef4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	1e5a      	subs	r2, r3, #1
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00f      	beq.n	8003d36 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	3310      	adds	r3, #16
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fda8 	bl	8004870 <xTaskRemoveFromEventList>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d007      	beq.n	8003d36 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d26:	4b3d      	ldr	r3, [pc, #244]	; (8003e1c <xQueueReceive+0x1bc>)
 8003d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d36:	f001 f9c5 	bl	80050c4 <vPortExitCritical>
				return pdPASS;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e069      	b.n	8003e12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d103      	bne.n	8003d4c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d44:	f001 f9be 	bl	80050c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e062      	b.n	8003e12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d52:	f107 0310 	add.w	r3, r7, #16
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fdec 	bl	8004934 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d60:	f001 f9b0 	bl	80050c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d64:	f000 fb9c 	bl	80044a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d68:	f001 f97c 	bl	8005064 <vPortEnterCritical>
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d72:	b25b      	sxtb	r3, r3
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d78:	d103      	bne.n	8003d82 <xQueueReceive+0x122>
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d88:	b25b      	sxtb	r3, r3
 8003d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8e:	d103      	bne.n	8003d98 <xQueueReceive+0x138>
 8003d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d98:	f001 f994 	bl	80050c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d9c:	1d3a      	adds	r2, r7, #4
 8003d9e:	f107 0310 	add.w	r3, r7, #16
 8003da2:	4611      	mov	r1, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fddb 	bl	8004960 <xTaskCheckForTimeOut>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d123      	bne.n	8003df8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003db2:	f000 f917 	bl	8003fe4 <prvIsQueueEmpty>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d017      	beq.n	8003dec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	3324      	adds	r3, #36	; 0x24
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fd2f 	bl	8004828 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003dca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dcc:	f000 f8b8 	bl	8003f40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003dd0:	f000 fb74 	bl	80044bc <xTaskResumeAll>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d189      	bne.n	8003cee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003dda:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <xQueueReceive+0x1bc>)
 8003ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	e780      	b.n	8003cee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dee:	f000 f8a7 	bl	8003f40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003df2:	f000 fb63 	bl	80044bc <xTaskResumeAll>
 8003df6:	e77a      	b.n	8003cee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dfa:	f000 f8a1 	bl	8003f40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dfe:	f000 fb5d 	bl	80044bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e04:	f000 f8ee 	bl	8003fe4 <prvIsQueueEmpty>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f43f af6f 	beq.w	8003cee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3730      	adds	r7, #48	; 0x30
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	e000ed04 	.word	0xe000ed04

08003e20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10d      	bne.n	8003e5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d14d      	bne.n	8003ee2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 feee 	bl	8004c2c <xTaskPriorityDisinherit>
 8003e50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	e043      	b.n	8003ee2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d119      	bne.n	8003e94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6858      	ldr	r0, [r3, #4]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	f001 fd2d 	bl	80058ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	441a      	add	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d32b      	bcc.n	8003ee2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	605a      	str	r2, [r3, #4]
 8003e92:	e026      	b.n	8003ee2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	68d8      	ldr	r0, [r3, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	f001 fd13 	bl	80058ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	425b      	negs	r3, r3
 8003eae:	441a      	add	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d207      	bcs.n	8003ed0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	425b      	negs	r3, r3
 8003eca:	441a      	add	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d105      	bne.n	8003ee2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003eea:	697b      	ldr	r3, [r7, #20]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d018      	beq.n	8003f38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	441a      	add	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d303      	bcc.n	8003f28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68d9      	ldr	r1, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	461a      	mov	r2, r3
 8003f32:	6838      	ldr	r0, [r7, #0]
 8003f34:	f001 fcc9 	bl	80058ca <memcpy>
	}
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f48:	f001 f88c 	bl	8005064 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f54:	e011      	b.n	8003f7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d012      	beq.n	8003f84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3324      	adds	r3, #36	; 0x24
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fc84 	bl	8004870 <xTaskRemoveFromEventList>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f6e:	f000 fd59 	bl	8004a24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	dce9      	bgt.n	8003f56 <prvUnlockQueue+0x16>
 8003f82:	e000      	b.n	8003f86 <prvUnlockQueue+0x46>
					break;
 8003f84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	22ff      	movs	r2, #255	; 0xff
 8003f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f8e:	f001 f899 	bl	80050c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f92:	f001 f867 	bl	8005064 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f9e:	e011      	b.n	8003fc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d012      	beq.n	8003fce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3310      	adds	r3, #16
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fc5f 	bl	8004870 <xTaskRemoveFromEventList>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003fb8:	f000 fd34 	bl	8004a24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003fbc:	7bbb      	ldrb	r3, [r7, #14]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	dce9      	bgt.n	8003fa0 <prvUnlockQueue+0x60>
 8003fcc:	e000      	b.n	8003fd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003fce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	22ff      	movs	r2, #255	; 0xff
 8003fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003fd8:	f001 f874 	bl	80050c4 <vPortExitCritical>
}
 8003fdc:	bf00      	nop
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fec:	f001 f83a 	bl	8005064 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d102      	bne.n	8003ffe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e001      	b.n	8004002 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004002:	f001 f85f 	bl	80050c4 <vPortExitCritical>

	return xReturn;
 8004006:	68fb      	ldr	r3, [r7, #12]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08e      	sub	sp, #56	; 0x38
 8004014:	af04      	add	r7, sp, #16
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800401e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	623b      	str	r3, [r7, #32]
}
 8004036:	bf00      	nop
 8004038:	e7fe      	b.n	8004038 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <xTaskCreateStatic+0x46>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	61fb      	str	r3, [r7, #28]
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004056:	23b4      	movs	r3, #180	; 0xb4
 8004058:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2bb4      	cmp	r3, #180	; 0xb4
 800405e:	d00a      	beq.n	8004076 <xTaskCreateStatic+0x66>
	__asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	61bb      	str	r3, [r7, #24]
}
 8004072:	bf00      	nop
 8004074:	e7fe      	b.n	8004074 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004076:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407a:	2b00      	cmp	r3, #0
 800407c:	d01e      	beq.n	80040bc <xTaskCreateStatic+0xac>
 800407e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01b      	beq.n	80040bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800408c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	2202      	movs	r2, #2
 8004092:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004096:	2300      	movs	r3, #0
 8004098:	9303      	str	r3, [sp, #12]
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	9302      	str	r3, [sp, #8]
 800409e:	f107 0314 	add.w	r3, r7, #20
 80040a2:	9301      	str	r3, [sp, #4]
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f850 	bl	8004154 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040b6:	f000 f8eb 	bl	8004290 <prvAddNewTaskToReadyList>
 80040ba:	e001      	b.n	80040c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040c0:	697b      	ldr	r3, [r7, #20]
	}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3728      	adds	r7, #40	; 0x28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b08c      	sub	sp, #48	; 0x30
 80040ce:	af04      	add	r7, sp, #16
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	603b      	str	r3, [r7, #0]
 80040d6:	4613      	mov	r3, r2
 80040d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4618      	mov	r0, r3
 80040e0:	f001 f8e2 	bl	80052a8 <pvPortMalloc>
 80040e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00e      	beq.n	800410a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80040ec:	20b4      	movs	r0, #180	; 0xb4
 80040ee:	f001 f8db 	bl	80052a8 <pvPortMalloc>
 80040f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004100:	e005      	b.n	800410e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004102:	6978      	ldr	r0, [r7, #20]
 8004104:	f001 f99c 	bl	8005440 <vPortFree>
 8004108:	e001      	b.n	800410e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d017      	beq.n	8004144 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800411c:	88fa      	ldrh	r2, [r7, #6]
 800411e:	2300      	movs	r3, #0
 8004120:	9303      	str	r3, [sp, #12]
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	9302      	str	r3, [sp, #8]
 8004126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004128:	9301      	str	r3, [sp, #4]
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68b9      	ldr	r1, [r7, #8]
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f80e 	bl	8004154 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004138:	69f8      	ldr	r0, [r7, #28]
 800413a:	f000 f8a9 	bl	8004290 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800413e:	2301      	movs	r3, #1
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	e002      	b.n	800414a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004144:	f04f 33ff 	mov.w	r3, #4294967295
 8004148:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800414a:	69bb      	ldr	r3, [r7, #24]
	}
 800414c:	4618      	mov	r0, r3
 800414e:	3720      	adds	r7, #32
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800416c:	3b01      	subs	r3, #1
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	f023 0307 	bic.w	r3, r3, #7
 800417a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <prvInitialiseNewTask+0x48>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	617b      	str	r3, [r7, #20]
}
 8004198:	bf00      	nop
 800419a:	e7fe      	b.n	800419a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d01f      	beq.n	80041e2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
 80041a6:	e012      	b.n	80041ce <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	4413      	add	r3, r2
 80041ae:	7819      	ldrb	r1, [r3, #0]
 80041b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	4413      	add	r3, r2
 80041b6:	3334      	adds	r3, #52	; 0x34
 80041b8:	460a      	mov	r2, r1
 80041ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	4413      	add	r3, r2
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d006      	beq.n	80041d6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	3301      	adds	r3, #1
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	2b0f      	cmp	r3, #15
 80041d2:	d9e9      	bls.n	80041a8 <prvInitialiseNewTask+0x54>
 80041d4:	e000      	b.n	80041d8 <prvInitialiseNewTask+0x84>
			{
				break;
 80041d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041e0:	e003      	b.n	80041ea <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	2b06      	cmp	r3, #6
 80041ee:	d901      	bls.n	80041f4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041f0:	2306      	movs	r3, #6
 80041f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80041f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	2200      	movs	r2, #0
 8004204:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	3304      	adds	r3, #4
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff fb37 	bl	800387e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	3318      	adds	r3, #24
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fb32 	bl	800387e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800421e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	f1c3 0207 	rsb	r2, r3, #7
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800422e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	2200      	movs	r2, #0
 8004234:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	2200      	movs	r2, #0
 800423c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	334c      	adds	r3, #76	; 0x4c
 8004244:	2260      	movs	r2, #96	; 0x60
 8004246:	2100      	movs	r1, #0
 8004248:	4618      	mov	r0, r3
 800424a:	f001 fb4c 	bl	80058e6 <memset>
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	4a0c      	ldr	r2, [pc, #48]	; (8004284 <prvInitialiseNewTask+0x130>)
 8004252:	651a      	str	r2, [r3, #80]	; 0x50
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	4a0c      	ldr	r2, [pc, #48]	; (8004288 <prvInitialiseNewTask+0x134>)
 8004258:	655a      	str	r2, [r3, #84]	; 0x54
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	4a0b      	ldr	r2, [pc, #44]	; (800428c <prvInitialiseNewTask+0x138>)
 800425e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	68f9      	ldr	r1, [r7, #12]
 8004264:	69b8      	ldr	r0, [r7, #24]
 8004266:	f000 fdcd 	bl	8004e04 <pxPortInitialiseStack>
 800426a:	4602      	mov	r2, r0
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800427a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800427c:	bf00      	nop
 800427e:	3720      	adds	r7, #32
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	08006a68 	.word	0x08006a68
 8004288:	08006a88 	.word	0x08006a88
 800428c:	08006a48 	.word	0x08006a48

08004290 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004298:	f000 fee4 	bl	8005064 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800429c:	4b2a      	ldr	r3, [pc, #168]	; (8004348 <prvAddNewTaskToReadyList+0xb8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3301      	adds	r3, #1
 80042a2:	4a29      	ldr	r2, [pc, #164]	; (8004348 <prvAddNewTaskToReadyList+0xb8>)
 80042a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042a6:	4b29      	ldr	r3, [pc, #164]	; (800434c <prvAddNewTaskToReadyList+0xbc>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042ae:	4a27      	ldr	r2, [pc, #156]	; (800434c <prvAddNewTaskToReadyList+0xbc>)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042b4:	4b24      	ldr	r3, [pc, #144]	; (8004348 <prvAddNewTaskToReadyList+0xb8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d110      	bne.n	80042de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042bc:	f000 fbd6 	bl	8004a6c <prvInitialiseTaskLists>
 80042c0:	e00d      	b.n	80042de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042c2:	4b23      	ldr	r3, [pc, #140]	; (8004350 <prvAddNewTaskToReadyList+0xc0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d109      	bne.n	80042de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042ca:	4b20      	ldr	r3, [pc, #128]	; (800434c <prvAddNewTaskToReadyList+0xbc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d802      	bhi.n	80042de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042d8:	4a1c      	ldr	r2, [pc, #112]	; (800434c <prvAddNewTaskToReadyList+0xbc>)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042de:	4b1d      	ldr	r3, [pc, #116]	; (8004354 <prvAddNewTaskToReadyList+0xc4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3301      	adds	r3, #1
 80042e4:	4a1b      	ldr	r2, [pc, #108]	; (8004354 <prvAddNewTaskToReadyList+0xc4>)
 80042e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	2201      	movs	r2, #1
 80042ee:	409a      	lsls	r2, r3
 80042f0:	4b19      	ldr	r3, [pc, #100]	; (8004358 <prvAddNewTaskToReadyList+0xc8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	4a18      	ldr	r2, [pc, #96]	; (8004358 <prvAddNewTaskToReadyList+0xc8>)
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4a15      	ldr	r2, [pc, #84]	; (800435c <prvAddNewTaskToReadyList+0xcc>)
 8004308:	441a      	add	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3304      	adds	r3, #4
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f7ff fac1 	bl	8003898 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004316:	f000 fed5 	bl	80050c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800431a:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <prvAddNewTaskToReadyList+0xc0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00e      	beq.n	8004340 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004322:	4b0a      	ldr	r3, [pc, #40]	; (800434c <prvAddNewTaskToReadyList+0xbc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	429a      	cmp	r2, r3
 800432e:	d207      	bcs.n	8004340 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <prvAddNewTaskToReadyList+0xd0>)
 8004332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20000788 	.word	0x20000788
 800434c:	20000688 	.word	0x20000688
 8004350:	20000794 	.word	0x20000794
 8004354:	200007a4 	.word	0x200007a4
 8004358:	20000790 	.word	0x20000790
 800435c:	2000068c 	.word	0x2000068c
 8004360:	e000ed04 	.word	0xe000ed04

08004364 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d017      	beq.n	80043a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004376:	4b13      	ldr	r3, [pc, #76]	; (80043c4 <vTaskDelay+0x60>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <vTaskDelay+0x30>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	60bb      	str	r3, [r7, #8]
}
 8004390:	bf00      	nop
 8004392:	e7fe      	b.n	8004392 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004394:	f000 f884 	bl	80044a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004398:	2100      	movs	r1, #0
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fccc 	bl	8004d38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043a0:	f000 f88c 	bl	80044bc <xTaskResumeAll>
 80043a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d107      	bne.n	80043bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <vTaskDelay+0x64>)
 80043ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043bc:	bf00      	nop
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	200007b0 	.word	0x200007b0
 80043c8:	e000ed04 	.word	0xe000ed04

080043cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08a      	sub	sp, #40	; 0x28
 80043d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043da:	463a      	mov	r2, r7
 80043dc:	1d39      	adds	r1, r7, #4
 80043de:	f107 0308 	add.w	r3, r7, #8
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fc fa62 	bl	80008ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80043e8:	6839      	ldr	r1, [r7, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	9202      	str	r2, [sp, #8]
 80043f0:	9301      	str	r3, [sp, #4]
 80043f2:	2300      	movs	r3, #0
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	2300      	movs	r3, #0
 80043f8:	460a      	mov	r2, r1
 80043fa:	4921      	ldr	r1, [pc, #132]	; (8004480 <vTaskStartScheduler+0xb4>)
 80043fc:	4821      	ldr	r0, [pc, #132]	; (8004484 <vTaskStartScheduler+0xb8>)
 80043fe:	f7ff fe07 	bl	8004010 <xTaskCreateStatic>
 8004402:	4603      	mov	r3, r0
 8004404:	4a20      	ldr	r2, [pc, #128]	; (8004488 <vTaskStartScheduler+0xbc>)
 8004406:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004408:	4b1f      	ldr	r3, [pc, #124]	; (8004488 <vTaskStartScheduler+0xbc>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004410:	2301      	movs	r3, #1
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	e001      	b.n	800441a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004416:	2300      	movs	r3, #0
 8004418:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d11b      	bne.n	8004458 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	613b      	str	r3, [r7, #16]
}
 8004432:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004434:	4b15      	ldr	r3, [pc, #84]	; (800448c <vTaskStartScheduler+0xc0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	334c      	adds	r3, #76	; 0x4c
 800443a:	4a15      	ldr	r2, [pc, #84]	; (8004490 <vTaskStartScheduler+0xc4>)
 800443c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800443e:	4b15      	ldr	r3, [pc, #84]	; (8004494 <vTaskStartScheduler+0xc8>)
 8004440:	f04f 32ff 	mov.w	r2, #4294967295
 8004444:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004446:	4b14      	ldr	r3, [pc, #80]	; (8004498 <vTaskStartScheduler+0xcc>)
 8004448:	2201      	movs	r2, #1
 800444a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800444c:	4b13      	ldr	r3, [pc, #76]	; (800449c <vTaskStartScheduler+0xd0>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004452:	f000 fd65 	bl	8004f20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004456:	e00e      	b.n	8004476 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445e:	d10a      	bne.n	8004476 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	60fb      	str	r3, [r7, #12]
}
 8004472:	bf00      	nop
 8004474:	e7fe      	b.n	8004474 <vTaskStartScheduler+0xa8>
}
 8004476:	bf00      	nop
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	08006a28 	.word	0x08006a28
 8004484:	08004a3d 	.word	0x08004a3d
 8004488:	200007ac 	.word	0x200007ac
 800448c:	20000688 	.word	0x20000688
 8004490:	20000020 	.word	0x20000020
 8004494:	200007a8 	.word	0x200007a8
 8004498:	20000794 	.word	0x20000794
 800449c:	2000078c 	.word	0x2000078c

080044a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80044a4:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <vTaskSuspendAll+0x18>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3301      	adds	r3, #1
 80044aa:	4a03      	ldr	r2, [pc, #12]	; (80044b8 <vTaskSuspendAll+0x18>)
 80044ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80044ae:	bf00      	nop
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	200007b0 	.word	0x200007b0

080044bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044ca:	4b41      	ldr	r3, [pc, #260]	; (80045d0 <xTaskResumeAll+0x114>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	603b      	str	r3, [r7, #0]
}
 80044e4:	bf00      	nop
 80044e6:	e7fe      	b.n	80044e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044e8:	f000 fdbc 	bl	8005064 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044ec:	4b38      	ldr	r3, [pc, #224]	; (80045d0 <xTaskResumeAll+0x114>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	4a37      	ldr	r2, [pc, #220]	; (80045d0 <xTaskResumeAll+0x114>)
 80044f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044f6:	4b36      	ldr	r3, [pc, #216]	; (80045d0 <xTaskResumeAll+0x114>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d161      	bne.n	80045c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044fe:	4b35      	ldr	r3, [pc, #212]	; (80045d4 <xTaskResumeAll+0x118>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d05d      	beq.n	80045c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004506:	e02e      	b.n	8004566 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004508:	4b33      	ldr	r3, [pc, #204]	; (80045d8 <xTaskResumeAll+0x11c>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3318      	adds	r3, #24
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff fa1c 	bl	8003952 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3304      	adds	r3, #4
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff fa17 	bl	8003952 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	2201      	movs	r2, #1
 800452a:	409a      	lsls	r2, r3
 800452c:	4b2b      	ldr	r3, [pc, #172]	; (80045dc <xTaskResumeAll+0x120>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4313      	orrs	r3, r2
 8004532:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <xTaskResumeAll+0x120>)
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4a27      	ldr	r2, [pc, #156]	; (80045e0 <xTaskResumeAll+0x124>)
 8004544:	441a      	add	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	3304      	adds	r3, #4
 800454a:	4619      	mov	r1, r3
 800454c:	4610      	mov	r0, r2
 800454e:	f7ff f9a3 	bl	8003898 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004556:	4b23      	ldr	r3, [pc, #140]	; (80045e4 <xTaskResumeAll+0x128>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	429a      	cmp	r2, r3
 800455e:	d302      	bcc.n	8004566 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004560:	4b21      	ldr	r3, [pc, #132]	; (80045e8 <xTaskResumeAll+0x12c>)
 8004562:	2201      	movs	r2, #1
 8004564:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004566:	4b1c      	ldr	r3, [pc, #112]	; (80045d8 <xTaskResumeAll+0x11c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1cc      	bne.n	8004508 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004574:	f000 fb1c 	bl	8004bb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004578:	4b1c      	ldr	r3, [pc, #112]	; (80045ec <xTaskResumeAll+0x130>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d010      	beq.n	80045a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004584:	f000 f836 	bl	80045f4 <xTaskIncrementTick>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800458e:	4b16      	ldr	r3, [pc, #88]	; (80045e8 <xTaskResumeAll+0x12c>)
 8004590:	2201      	movs	r2, #1
 8004592:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3b01      	subs	r3, #1
 8004598:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1f1      	bne.n	8004584 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80045a0:	4b12      	ldr	r3, [pc, #72]	; (80045ec <xTaskResumeAll+0x130>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045a6:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <xTaskResumeAll+0x12c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045ae:	2301      	movs	r3, #1
 80045b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045b2:	4b0f      	ldr	r3, [pc, #60]	; (80045f0 <xTaskResumeAll+0x134>)
 80045b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045c2:	f000 fd7f 	bl	80050c4 <vPortExitCritical>

	return xAlreadyYielded;
 80045c6:	68bb      	ldr	r3, [r7, #8]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	200007b0 	.word	0x200007b0
 80045d4:	20000788 	.word	0x20000788
 80045d8:	20000748 	.word	0x20000748
 80045dc:	20000790 	.word	0x20000790
 80045e0:	2000068c 	.word	0x2000068c
 80045e4:	20000688 	.word	0x20000688
 80045e8:	2000079c 	.word	0x2000079c
 80045ec:	20000798 	.word	0x20000798
 80045f0:	e000ed04 	.word	0xe000ed04

080045f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045fe:	4b4e      	ldr	r3, [pc, #312]	; (8004738 <xTaskIncrementTick+0x144>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	f040 808e 	bne.w	8004724 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004608:	4b4c      	ldr	r3, [pc, #304]	; (800473c <xTaskIncrementTick+0x148>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3301      	adds	r3, #1
 800460e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004610:	4a4a      	ldr	r2, [pc, #296]	; (800473c <xTaskIncrementTick+0x148>)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d120      	bne.n	800465e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800461c:	4b48      	ldr	r3, [pc, #288]	; (8004740 <xTaskIncrementTick+0x14c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <xTaskIncrementTick+0x48>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	603b      	str	r3, [r7, #0]
}
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <xTaskIncrementTick+0x46>
 800463c:	4b40      	ldr	r3, [pc, #256]	; (8004740 <xTaskIncrementTick+0x14c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	4b40      	ldr	r3, [pc, #256]	; (8004744 <xTaskIncrementTick+0x150>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a3e      	ldr	r2, [pc, #248]	; (8004740 <xTaskIncrementTick+0x14c>)
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	4a3e      	ldr	r2, [pc, #248]	; (8004744 <xTaskIncrementTick+0x150>)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	4b3d      	ldr	r3, [pc, #244]	; (8004748 <xTaskIncrementTick+0x154>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3301      	adds	r3, #1
 8004656:	4a3c      	ldr	r2, [pc, #240]	; (8004748 <xTaskIncrementTick+0x154>)
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	f000 faa9 	bl	8004bb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800465e:	4b3b      	ldr	r3, [pc, #236]	; (800474c <xTaskIncrementTick+0x158>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	429a      	cmp	r2, r3
 8004666:	d348      	bcc.n	80046fa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004668:	4b35      	ldr	r3, [pc, #212]	; (8004740 <xTaskIncrementTick+0x14c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d104      	bne.n	800467c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004672:	4b36      	ldr	r3, [pc, #216]	; (800474c <xTaskIncrementTick+0x158>)
 8004674:	f04f 32ff 	mov.w	r2, #4294967295
 8004678:	601a      	str	r2, [r3, #0]
					break;
 800467a:	e03e      	b.n	80046fa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800467c:	4b30      	ldr	r3, [pc, #192]	; (8004740 <xTaskIncrementTick+0x14c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	429a      	cmp	r2, r3
 8004692:	d203      	bcs.n	800469c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004694:	4a2d      	ldr	r2, [pc, #180]	; (800474c <xTaskIncrementTick+0x158>)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800469a:	e02e      	b.n	80046fa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	3304      	adds	r3, #4
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff f956 	bl	8003952 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d004      	beq.n	80046b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	3318      	adds	r3, #24
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff f94d 	bl	8003952 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	2201      	movs	r2, #1
 80046be:	409a      	lsls	r2, r3
 80046c0:	4b23      	ldr	r3, [pc, #140]	; (8004750 <xTaskIncrementTick+0x15c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	4a22      	ldr	r2, [pc, #136]	; (8004750 <xTaskIncrementTick+0x15c>)
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4a1f      	ldr	r2, [pc, #124]	; (8004754 <xTaskIncrementTick+0x160>)
 80046d8:	441a      	add	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	3304      	adds	r3, #4
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f7ff f8d9 	bl	8003898 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ea:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <xTaskIncrementTick+0x164>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d3b9      	bcc.n	8004668 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80046f4:	2301      	movs	r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046f8:	e7b6      	b.n	8004668 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046fa:	4b17      	ldr	r3, [pc, #92]	; (8004758 <xTaskIncrementTick+0x164>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004700:	4914      	ldr	r1, [pc, #80]	; (8004754 <xTaskIncrementTick+0x160>)
 8004702:	4613      	mov	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d901      	bls.n	8004716 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004712:	2301      	movs	r3, #1
 8004714:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004716:	4b11      	ldr	r3, [pc, #68]	; (800475c <xTaskIncrementTick+0x168>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d007      	beq.n	800472e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800471e:	2301      	movs	r3, #1
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	e004      	b.n	800472e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004724:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <xTaskIncrementTick+0x16c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3301      	adds	r3, #1
 800472a:	4a0d      	ldr	r2, [pc, #52]	; (8004760 <xTaskIncrementTick+0x16c>)
 800472c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800472e:	697b      	ldr	r3, [r7, #20]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	200007b0 	.word	0x200007b0
 800473c:	2000078c 	.word	0x2000078c
 8004740:	20000740 	.word	0x20000740
 8004744:	20000744 	.word	0x20000744
 8004748:	200007a0 	.word	0x200007a0
 800474c:	200007a8 	.word	0x200007a8
 8004750:	20000790 	.word	0x20000790
 8004754:	2000068c 	.word	0x2000068c
 8004758:	20000688 	.word	0x20000688
 800475c:	2000079c 	.word	0x2000079c
 8004760:	20000798 	.word	0x20000798

08004764 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800476a:	4b29      	ldr	r3, [pc, #164]	; (8004810 <vTaskSwitchContext+0xac>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004772:	4b28      	ldr	r3, [pc, #160]	; (8004814 <vTaskSwitchContext+0xb0>)
 8004774:	2201      	movs	r2, #1
 8004776:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004778:	e044      	b.n	8004804 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800477a:	4b26      	ldr	r3, [pc, #152]	; (8004814 <vTaskSwitchContext+0xb0>)
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004780:	4b25      	ldr	r3, [pc, #148]	; (8004818 <vTaskSwitchContext+0xb4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	fab3 f383 	clz	r3, r3
 800478c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800478e:	7afb      	ldrb	r3, [r7, #11]
 8004790:	f1c3 031f 	rsb	r3, r3, #31
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	4921      	ldr	r1, [pc, #132]	; (800481c <vTaskSwitchContext+0xb8>)
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10a      	bne.n	80047c0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	607b      	str	r3, [r7, #4]
}
 80047bc:	bf00      	nop
 80047be:	e7fe      	b.n	80047be <vTaskSwitchContext+0x5a>
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4613      	mov	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4a14      	ldr	r2, [pc, #80]	; (800481c <vTaskSwitchContext+0xb8>)
 80047cc:	4413      	add	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	605a      	str	r2, [r3, #4]
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	3308      	adds	r3, #8
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d104      	bne.n	80047f0 <vTaskSwitchContext+0x8c>
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	605a      	str	r2, [r3, #4]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	4a0a      	ldr	r2, [pc, #40]	; (8004820 <vTaskSwitchContext+0xbc>)
 80047f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047fa:	4b09      	ldr	r3, [pc, #36]	; (8004820 <vTaskSwitchContext+0xbc>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	334c      	adds	r3, #76	; 0x4c
 8004800:	4a08      	ldr	r2, [pc, #32]	; (8004824 <vTaskSwitchContext+0xc0>)
 8004802:	6013      	str	r3, [r2, #0]
}
 8004804:	bf00      	nop
 8004806:	371c      	adds	r7, #28
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	200007b0 	.word	0x200007b0
 8004814:	2000079c 	.word	0x2000079c
 8004818:	20000790 	.word	0x20000790
 800481c:	2000068c 	.word	0x2000068c
 8004820:	20000688 	.word	0x20000688
 8004824:	20000020 	.word	0x20000020

08004828 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	60fb      	str	r3, [r7, #12]
}
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800484e:	4b07      	ldr	r3, [pc, #28]	; (800486c <vTaskPlaceOnEventList+0x44>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3318      	adds	r3, #24
 8004854:	4619      	mov	r1, r3
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff f842 	bl	80038e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800485c:	2101      	movs	r1, #1
 800485e:	6838      	ldr	r0, [r7, #0]
 8004860:	f000 fa6a 	bl	8004d38 <prvAddCurrentTaskToDelayedList>
}
 8004864:	bf00      	nop
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20000688 	.word	0x20000688

08004870 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10a      	bne.n	800489c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	60fb      	str	r3, [r7, #12]
}
 8004898:	bf00      	nop
 800489a:	e7fe      	b.n	800489a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	3318      	adds	r3, #24
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff f856 	bl	8003952 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048a6:	4b1d      	ldr	r3, [pc, #116]	; (800491c <xTaskRemoveFromEventList+0xac>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d11c      	bne.n	80048e8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	3304      	adds	r3, #4
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff f84d 	bl	8003952 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	2201      	movs	r2, #1
 80048be:	409a      	lsls	r2, r3
 80048c0:	4b17      	ldr	r3, [pc, #92]	; (8004920 <xTaskRemoveFromEventList+0xb0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	4a16      	ldr	r2, [pc, #88]	; (8004920 <xTaskRemoveFromEventList+0xb0>)
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ce:	4613      	mov	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4a13      	ldr	r2, [pc, #76]	; (8004924 <xTaskRemoveFromEventList+0xb4>)
 80048d8:	441a      	add	r2, r3
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	3304      	adds	r3, #4
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f7fe ffd9 	bl	8003898 <vListInsertEnd>
 80048e6:	e005      	b.n	80048f4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	3318      	adds	r3, #24
 80048ec:	4619      	mov	r1, r3
 80048ee:	480e      	ldr	r0, [pc, #56]	; (8004928 <xTaskRemoveFromEventList+0xb8>)
 80048f0:	f7fe ffd2 	bl	8003898 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f8:	4b0c      	ldr	r3, [pc, #48]	; (800492c <xTaskRemoveFromEventList+0xbc>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	429a      	cmp	r2, r3
 8004900:	d905      	bls.n	800490e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004902:	2301      	movs	r3, #1
 8004904:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004906:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <xTaskRemoveFromEventList+0xc0>)
 8004908:	2201      	movs	r2, #1
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	e001      	b.n	8004912 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004912:	697b      	ldr	r3, [r7, #20]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	200007b0 	.word	0x200007b0
 8004920:	20000790 	.word	0x20000790
 8004924:	2000068c 	.word	0x2000068c
 8004928:	20000748 	.word	0x20000748
 800492c:	20000688 	.word	0x20000688
 8004930:	2000079c 	.word	0x2000079c

08004934 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <vTaskInternalSetTimeOutState+0x24>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <vTaskInternalSetTimeOutState+0x28>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	605a      	str	r2, [r3, #4]
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	200007a0 	.word	0x200007a0
 800495c:	2000078c 	.word	0x2000078c

08004960 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10a      	bne.n	8004986 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	613b      	str	r3, [r7, #16]
}
 8004982:	bf00      	nop
 8004984:	e7fe      	b.n	8004984 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	60fb      	str	r3, [r7, #12]
}
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80049a2:	f000 fb5f 	bl	8005064 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049a6:	4b1d      	ldr	r3, [pc, #116]	; (8004a1c <xTaskCheckForTimeOut+0xbc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049be:	d102      	bne.n	80049c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049c0:	2300      	movs	r3, #0
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	e023      	b.n	8004a0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <xTaskCheckForTimeOut+0xc0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d007      	beq.n	80049e2 <xTaskCheckForTimeOut+0x82>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d302      	bcc.n	80049e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049dc:	2301      	movs	r3, #1
 80049de:	61fb      	str	r3, [r7, #28]
 80049e0:	e015      	b.n	8004a0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d20b      	bcs.n	8004a04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	1ad2      	subs	r2, r2, r3
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff ff9b 	bl	8004934 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
 8004a02:	e004      	b.n	8004a0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a0e:	f000 fb59 	bl	80050c4 <vPortExitCritical>

	return xReturn;
 8004a12:	69fb      	ldr	r3, [r7, #28]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3720      	adds	r7, #32
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	2000078c 	.word	0x2000078c
 8004a20:	200007a0 	.word	0x200007a0

08004a24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a28:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <vTaskMissedYield+0x14>)
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
}
 8004a2e:	bf00      	nop
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	2000079c 	.word	0x2000079c

08004a3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a44:	f000 f852 	bl	8004aec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a48:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <prvIdleTask+0x28>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d9f9      	bls.n	8004a44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a50:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <prvIdleTask+0x2c>)
 8004a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a60:	e7f0      	b.n	8004a44 <prvIdleTask+0x8>
 8004a62:	bf00      	nop
 8004a64:	2000068c 	.word	0x2000068c
 8004a68:	e000ed04 	.word	0xe000ed04

08004a6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a72:	2300      	movs	r3, #0
 8004a74:	607b      	str	r3, [r7, #4]
 8004a76:	e00c      	b.n	8004a92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4a12      	ldr	r2, [pc, #72]	; (8004acc <prvInitialiseTaskLists+0x60>)
 8004a84:	4413      	add	r3, r2
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fe fed9 	bl	800383e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	607b      	str	r3, [r7, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b06      	cmp	r3, #6
 8004a96:	d9ef      	bls.n	8004a78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a98:	480d      	ldr	r0, [pc, #52]	; (8004ad0 <prvInitialiseTaskLists+0x64>)
 8004a9a:	f7fe fed0 	bl	800383e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a9e:	480d      	ldr	r0, [pc, #52]	; (8004ad4 <prvInitialiseTaskLists+0x68>)
 8004aa0:	f7fe fecd 	bl	800383e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004aa4:	480c      	ldr	r0, [pc, #48]	; (8004ad8 <prvInitialiseTaskLists+0x6c>)
 8004aa6:	f7fe feca 	bl	800383e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004aaa:	480c      	ldr	r0, [pc, #48]	; (8004adc <prvInitialiseTaskLists+0x70>)
 8004aac:	f7fe fec7 	bl	800383e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ab0:	480b      	ldr	r0, [pc, #44]	; (8004ae0 <prvInitialiseTaskLists+0x74>)
 8004ab2:	f7fe fec4 	bl	800383e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ab6:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <prvInitialiseTaskLists+0x78>)
 8004ab8:	4a05      	ldr	r2, [pc, #20]	; (8004ad0 <prvInitialiseTaskLists+0x64>)
 8004aba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <prvInitialiseTaskLists+0x7c>)
 8004abe:	4a05      	ldr	r2, [pc, #20]	; (8004ad4 <prvInitialiseTaskLists+0x68>)
 8004ac0:	601a      	str	r2, [r3, #0]
}
 8004ac2:	bf00      	nop
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	2000068c 	.word	0x2000068c
 8004ad0:	20000718 	.word	0x20000718
 8004ad4:	2000072c 	.word	0x2000072c
 8004ad8:	20000748 	.word	0x20000748
 8004adc:	2000075c 	.word	0x2000075c
 8004ae0:	20000774 	.word	0x20000774
 8004ae4:	20000740 	.word	0x20000740
 8004ae8:	20000744 	.word	0x20000744

08004aec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004af2:	e019      	b.n	8004b28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004af4:	f000 fab6 	bl	8005064 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004af8:	4b10      	ldr	r3, [pc, #64]	; (8004b3c <prvCheckTasksWaitingTermination+0x50>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fe ff24 	bl	8003952 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b0a:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <prvCheckTasksWaitingTermination+0x54>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	4a0b      	ldr	r2, [pc, #44]	; (8004b40 <prvCheckTasksWaitingTermination+0x54>)
 8004b12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b14:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <prvCheckTasksWaitingTermination+0x58>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	4a0a      	ldr	r2, [pc, #40]	; (8004b44 <prvCheckTasksWaitingTermination+0x58>)
 8004b1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b1e:	f000 fad1 	bl	80050c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f810 	bl	8004b48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <prvCheckTasksWaitingTermination+0x58>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e1      	bne.n	8004af4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b30:	bf00      	nop
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	2000075c 	.word	0x2000075c
 8004b40:	20000788 	.word	0x20000788
 8004b44:	20000770 	.word	0x20000770

08004b48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	334c      	adds	r3, #76	; 0x4c
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 ffc5 	bl	8005ae4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d108      	bne.n	8004b76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fc69 	bl	8005440 <vPortFree>
				vPortFree( pxTCB );
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fc66 	bl	8005440 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b74:	e018      	b.n	8004ba8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d103      	bne.n	8004b88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fc5d 	bl	8005440 <vPortFree>
	}
 8004b86:	e00f      	b.n	8004ba8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d00a      	beq.n	8004ba8 <prvDeleteTCB+0x60>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	60fb      	str	r3, [r7, #12]
}
 8004ba4:	bf00      	nop
 8004ba6:	e7fe      	b.n	8004ba6 <prvDeleteTCB+0x5e>
	}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bb6:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <prvResetNextTaskUnblockTime+0x38>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d104      	bne.n	8004bca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bc0:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <prvResetNextTaskUnblockTime+0x3c>)
 8004bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bc8:	e008      	b.n	8004bdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bca:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <prvResetNextTaskUnblockTime+0x38>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	4a04      	ldr	r2, [pc, #16]	; (8004bec <prvResetNextTaskUnblockTime+0x3c>)
 8004bda:	6013      	str	r3, [r2, #0]
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	20000740 	.word	0x20000740
 8004bec:	200007a8 	.word	0x200007a8

08004bf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <xTaskGetSchedulerState+0x34>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d102      	bne.n	8004c04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	607b      	str	r3, [r7, #4]
 8004c02:	e008      	b.n	8004c16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c04:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <xTaskGetSchedulerState+0x38>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d102      	bne.n	8004c12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	607b      	str	r3, [r7, #4]
 8004c10:	e001      	b.n	8004c16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c12:	2300      	movs	r3, #0
 8004c14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c16:	687b      	ldr	r3, [r7, #4]
	}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	20000794 	.word	0x20000794
 8004c28:	200007b0 	.word	0x200007b0

08004c2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d06e      	beq.n	8004d20 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c42:	4b3a      	ldr	r3, [pc, #232]	; (8004d2c <xTaskPriorityDisinherit+0x100>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d00a      	beq.n	8004c62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	60fb      	str	r3, [r7, #12]
}
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10a      	bne.n	8004c80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	60bb      	str	r3, [r7, #8]
}
 8004c7c:	bf00      	nop
 8004c7e:	e7fe      	b.n	8004c7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c84:	1e5a      	subs	r2, r3, #1
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d044      	beq.n	8004d20 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d140      	bne.n	8004d20 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fe fe55 	bl	8003952 <uxListRemove>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d115      	bne.n	8004cda <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb2:	491f      	ldr	r1, [pc, #124]	; (8004d30 <xTaskPriorityDisinherit+0x104>)
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10a      	bne.n	8004cda <xTaskPriorityDisinherit+0xae>
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	2201      	movs	r2, #1
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	43da      	mvns	r2, r3
 8004cd0:	4b18      	ldr	r3, [pc, #96]	; (8004d34 <xTaskPriorityDisinherit+0x108>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	4a17      	ldr	r2, [pc, #92]	; (8004d34 <xTaskPriorityDisinherit+0x108>)
 8004cd8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	f1c3 0207 	rsb	r2, r3, #7
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	409a      	lsls	r2, r3
 8004cf6:	4b0f      	ldr	r3, [pc, #60]	; (8004d34 <xTaskPriorityDisinherit+0x108>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	4a0d      	ldr	r2, [pc, #52]	; (8004d34 <xTaskPriorityDisinherit+0x108>)
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4a08      	ldr	r2, [pc, #32]	; (8004d30 <xTaskPriorityDisinherit+0x104>)
 8004d0e:	441a      	add	r2, r3
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	3304      	adds	r3, #4
 8004d14:	4619      	mov	r1, r3
 8004d16:	4610      	mov	r0, r2
 8004d18:	f7fe fdbe 	bl	8003898 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d20:	697b      	ldr	r3, [r7, #20]
	}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000688 	.word	0x20000688
 8004d30:	2000068c 	.word	0x2000068c
 8004d34:	20000790 	.word	0x20000790

08004d38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d42:	4b29      	ldr	r3, [pc, #164]	; (8004de8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d48:	4b28      	ldr	r3, [pc, #160]	; (8004dec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe fdff 	bl	8003952 <uxListRemove>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10b      	bne.n	8004d72 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d5a:	4b24      	ldr	r3, [pc, #144]	; (8004dec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	2201      	movs	r2, #1
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	43da      	mvns	r2, r3
 8004d68:	4b21      	ldr	r3, [pc, #132]	; (8004df0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	4a20      	ldr	r2, [pc, #128]	; (8004df0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d70:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d78:	d10a      	bne.n	8004d90 <prvAddCurrentTaskToDelayedList+0x58>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d007      	beq.n	8004d90 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d80:	4b1a      	ldr	r3, [pc, #104]	; (8004dec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3304      	adds	r3, #4
 8004d86:	4619      	mov	r1, r3
 8004d88:	481a      	ldr	r0, [pc, #104]	; (8004df4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d8a:	f7fe fd85 	bl	8003898 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d8e:	e026      	b.n	8004dde <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4413      	add	r3, r2
 8004d96:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d98:	4b14      	ldr	r3, [pc, #80]	; (8004dec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d209      	bcs.n	8004dbc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004da8:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	4b0f      	ldr	r3, [pc, #60]	; (8004dec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3304      	adds	r3, #4
 8004db2:	4619      	mov	r1, r3
 8004db4:	4610      	mov	r0, r2
 8004db6:	f7fe fd93 	bl	80038e0 <vListInsert>
}
 8004dba:	e010      	b.n	8004dde <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dbc:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <prvAddCurrentTaskToDelayedList+0xc4>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4610      	mov	r0, r2
 8004dca:	f7fe fd89 	bl	80038e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004dce:	4b0c      	ldr	r3, [pc, #48]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d202      	bcs.n	8004dde <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004dd8:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	6013      	str	r3, [r2, #0]
}
 8004dde:	bf00      	nop
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	2000078c 	.word	0x2000078c
 8004dec:	20000688 	.word	0x20000688
 8004df0:	20000790 	.word	0x20000790
 8004df4:	20000774 	.word	0x20000774
 8004df8:	20000744 	.word	0x20000744
 8004dfc:	20000740 	.word	0x20000740
 8004e00:	200007a8 	.word	0x200007a8

08004e04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3b04      	subs	r3, #4
 8004e14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3b04      	subs	r3, #4
 8004e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f023 0201 	bic.w	r2, r3, #1
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3b04      	subs	r3, #4
 8004e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e34:	4a0c      	ldr	r2, [pc, #48]	; (8004e68 <pxPortInitialiseStack+0x64>)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3b14      	subs	r3, #20
 8004e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3b04      	subs	r3, #4
 8004e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f06f 0202 	mvn.w	r2, #2
 8004e52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3b20      	subs	r3, #32
 8004e58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	08004e6d 	.word	0x08004e6d

08004e6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e76:	4b12      	ldr	r3, [pc, #72]	; (8004ec0 <prvTaskExitError+0x54>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7e:	d00a      	beq.n	8004e96 <prvTaskExitError+0x2a>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	60fb      	str	r3, [r7, #12]
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <prvTaskExitError+0x28>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	60bb      	str	r3, [r7, #8]
}
 8004ea8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004eaa:	bf00      	nop
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0fc      	beq.n	8004eac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	2000001c 	.word	0x2000001c
	...

08004ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ed0:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <pxCurrentTCBConst2>)
 8004ed2:	6819      	ldr	r1, [r3, #0]
 8004ed4:	6808      	ldr	r0, [r1, #0]
 8004ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eda:	f380 8809 	msr	PSP, r0
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f04f 0000 	mov.w	r0, #0
 8004ee6:	f380 8811 	msr	BASEPRI, r0
 8004eea:	4770      	bx	lr
 8004eec:	f3af 8000 	nop.w

08004ef0 <pxCurrentTCBConst2>:
 8004ef0:	20000688 	.word	0x20000688
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop

08004ef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ef8:	4808      	ldr	r0, [pc, #32]	; (8004f1c <prvPortStartFirstTask+0x24>)
 8004efa:	6800      	ldr	r0, [r0, #0]
 8004efc:	6800      	ldr	r0, [r0, #0]
 8004efe:	f380 8808 	msr	MSP, r0
 8004f02:	f04f 0000 	mov.w	r0, #0
 8004f06:	f380 8814 	msr	CONTROL, r0
 8004f0a:	b662      	cpsie	i
 8004f0c:	b661      	cpsie	f
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	df00      	svc	0
 8004f18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f1a:	bf00      	nop
 8004f1c:	e000ed08 	.word	0xe000ed08

08004f20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f26:	4b46      	ldr	r3, [pc, #280]	; (8005040 <xPortStartScheduler+0x120>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a46      	ldr	r2, [pc, #280]	; (8005044 <xPortStartScheduler+0x124>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d10a      	bne.n	8004f46 <xPortStartScheduler+0x26>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	613b      	str	r3, [r7, #16]
}
 8004f42:	bf00      	nop
 8004f44:	e7fe      	b.n	8004f44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f46:	4b3e      	ldr	r3, [pc, #248]	; (8005040 <xPortStartScheduler+0x120>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a3f      	ldr	r2, [pc, #252]	; (8005048 <xPortStartScheduler+0x128>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d10a      	bne.n	8004f66 <xPortStartScheduler+0x46>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	60fb      	str	r3, [r7, #12]
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f66:	4b39      	ldr	r3, [pc, #228]	; (800504c <xPortStartScheduler+0x12c>)
 8004f68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	22ff      	movs	r2, #255	; 0xff
 8004f76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	4b31      	ldr	r3, [pc, #196]	; (8005050 <xPortStartScheduler+0x130>)
 8004f8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f8e:	4b31      	ldr	r3, [pc, #196]	; (8005054 <xPortStartScheduler+0x134>)
 8004f90:	2207      	movs	r2, #7
 8004f92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f94:	e009      	b.n	8004faa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004f96:	4b2f      	ldr	r3, [pc, #188]	; (8005054 <xPortStartScheduler+0x134>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	4a2d      	ldr	r2, [pc, #180]	; (8005054 <xPortStartScheduler+0x134>)
 8004f9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb2:	2b80      	cmp	r3, #128	; 0x80
 8004fb4:	d0ef      	beq.n	8004f96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fb6:	4b27      	ldr	r3, [pc, #156]	; (8005054 <xPortStartScheduler+0x134>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f1c3 0307 	rsb	r3, r3, #7
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d00a      	beq.n	8004fd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	60bb      	str	r3, [r7, #8]
}
 8004fd4:	bf00      	nop
 8004fd6:	e7fe      	b.n	8004fd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fd8:	4b1e      	ldr	r3, [pc, #120]	; (8005054 <xPortStartScheduler+0x134>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <xPortStartScheduler+0x134>)
 8004fe0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fe2:	4b1c      	ldr	r3, [pc, #112]	; (8005054 <xPortStartScheduler+0x134>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fea:	4a1a      	ldr	r2, [pc, #104]	; (8005054 <xPortStartScheduler+0x134>)
 8004fec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ff6:	4b18      	ldr	r3, [pc, #96]	; (8005058 <xPortStartScheduler+0x138>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a17      	ldr	r2, [pc, #92]	; (8005058 <xPortStartScheduler+0x138>)
 8004ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005000:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005002:	4b15      	ldr	r3, [pc, #84]	; (8005058 <xPortStartScheduler+0x138>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a14      	ldr	r2, [pc, #80]	; (8005058 <xPortStartScheduler+0x138>)
 8005008:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800500c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800500e:	f000 f8dd 	bl	80051cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005012:	4b12      	ldr	r3, [pc, #72]	; (800505c <xPortStartScheduler+0x13c>)
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005018:	f000 f8fc 	bl	8005214 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800501c:	4b10      	ldr	r3, [pc, #64]	; (8005060 <xPortStartScheduler+0x140>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a0f      	ldr	r2, [pc, #60]	; (8005060 <xPortStartScheduler+0x140>)
 8005022:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005026:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005028:	f7ff ff66 	bl	8004ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800502c:	f7ff fb9a 	bl	8004764 <vTaskSwitchContext>
	prvTaskExitError();
 8005030:	f7ff ff1c 	bl	8004e6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	e000ed00 	.word	0xe000ed00
 8005044:	410fc271 	.word	0x410fc271
 8005048:	410fc270 	.word	0x410fc270
 800504c:	e000e400 	.word	0xe000e400
 8005050:	200007b4 	.word	0x200007b4
 8005054:	200007b8 	.word	0x200007b8
 8005058:	e000ed20 	.word	0xe000ed20
 800505c:	2000001c 	.word	0x2000001c
 8005060:	e000ef34 	.word	0xe000ef34

08005064 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
	__asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	607b      	str	r3, [r7, #4]
}
 800507c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800507e:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <vPortEnterCritical+0x58>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3301      	adds	r3, #1
 8005084:	4a0d      	ldr	r2, [pc, #52]	; (80050bc <vPortEnterCritical+0x58>)
 8005086:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005088:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <vPortEnterCritical+0x58>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d10f      	bne.n	80050b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <vPortEnterCritical+0x5c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	603b      	str	r3, [r7, #0]
}
 80050ac:	bf00      	nop
 80050ae:	e7fe      	b.n	80050ae <vPortEnterCritical+0x4a>
	}
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	2000001c 	.word	0x2000001c
 80050c0:	e000ed04 	.word	0xe000ed04

080050c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050ca:	4b12      	ldr	r3, [pc, #72]	; (8005114 <vPortExitCritical+0x50>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10a      	bne.n	80050e8 <vPortExitCritical+0x24>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	607b      	str	r3, [r7, #4]
}
 80050e4:	bf00      	nop
 80050e6:	e7fe      	b.n	80050e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050e8:	4b0a      	ldr	r3, [pc, #40]	; (8005114 <vPortExitCritical+0x50>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	4a09      	ldr	r2, [pc, #36]	; (8005114 <vPortExitCritical+0x50>)
 80050f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050f2:	4b08      	ldr	r3, [pc, #32]	; (8005114 <vPortExitCritical+0x50>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d105      	bne.n	8005106 <vPortExitCritical+0x42>
 80050fa:	2300      	movs	r3, #0
 80050fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	f383 8811 	msr	BASEPRI, r3
}
 8005104:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	2000001c 	.word	0x2000001c
	...

08005120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005120:	f3ef 8009 	mrs	r0, PSP
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	4b15      	ldr	r3, [pc, #84]	; (8005180 <pxCurrentTCBConst>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	f01e 0f10 	tst.w	lr, #16
 8005130:	bf08      	it	eq
 8005132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513a:	6010      	str	r0, [r2, #0]
 800513c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005140:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005144:	f380 8811 	msr	BASEPRI, r0
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f7ff fb08 	bl	8004764 <vTaskSwitchContext>
 8005154:	f04f 0000 	mov.w	r0, #0
 8005158:	f380 8811 	msr	BASEPRI, r0
 800515c:	bc09      	pop	{r0, r3}
 800515e:	6819      	ldr	r1, [r3, #0]
 8005160:	6808      	ldr	r0, [r1, #0]
 8005162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005166:	f01e 0f10 	tst.w	lr, #16
 800516a:	bf08      	it	eq
 800516c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005170:	f380 8809 	msr	PSP, r0
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	f3af 8000 	nop.w

08005180 <pxCurrentTCBConst>:
 8005180:	20000688 	.word	0x20000688
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop

08005188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	607b      	str	r3, [r7, #4]
}
 80051a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051a2:	f7ff fa27 	bl	80045f4 <xTaskIncrementTick>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051ac:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <SysTick_Handler+0x40>)
 80051ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	2300      	movs	r3, #0
 80051b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	f383 8811 	msr	BASEPRI, r3
}
 80051be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051c0:	bf00      	nop
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	e000ed04 	.word	0xe000ed04

080051cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051d0:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <vPortSetupTimerInterrupt+0x34>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <vPortSetupTimerInterrupt+0x38>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051dc:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <vPortSetupTimerInterrupt+0x3c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a0a      	ldr	r2, [pc, #40]	; (800520c <vPortSetupTimerInterrupt+0x40>)
 80051e2:	fba2 2303 	umull	r2, r3, r2, r3
 80051e6:	099b      	lsrs	r3, r3, #6
 80051e8:	4a09      	ldr	r2, [pc, #36]	; (8005210 <vPortSetupTimerInterrupt+0x44>)
 80051ea:	3b01      	subs	r3, #1
 80051ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051ee:	4b04      	ldr	r3, [pc, #16]	; (8005200 <vPortSetupTimerInterrupt+0x34>)
 80051f0:	2207      	movs	r2, #7
 80051f2:	601a      	str	r2, [r3, #0]
}
 80051f4:	bf00      	nop
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	e000e010 	.word	0xe000e010
 8005204:	e000e018 	.word	0xe000e018
 8005208:	20000010 	.word	0x20000010
 800520c:	10624dd3 	.word	0x10624dd3
 8005210:	e000e014 	.word	0xe000e014

08005214 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005214:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005224 <vPortEnableVFP+0x10>
 8005218:	6801      	ldr	r1, [r0, #0]
 800521a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800521e:	6001      	str	r1, [r0, #0]
 8005220:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005222:	bf00      	nop
 8005224:	e000ed88 	.word	0xe000ed88

08005228 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800522e:	f3ef 8305 	mrs	r3, IPSR
 8005232:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b0f      	cmp	r3, #15
 8005238:	d914      	bls.n	8005264 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800523a:	4a17      	ldr	r2, [pc, #92]	; (8005298 <vPortValidateInterruptPriority+0x70>)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4413      	add	r3, r2
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005244:	4b15      	ldr	r3, [pc, #84]	; (800529c <vPortValidateInterruptPriority+0x74>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	7afa      	ldrb	r2, [r7, #11]
 800524a:	429a      	cmp	r2, r3
 800524c:	d20a      	bcs.n	8005264 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	607b      	str	r3, [r7, #4]
}
 8005260:	bf00      	nop
 8005262:	e7fe      	b.n	8005262 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005264:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <vPortValidateInterruptPriority+0x78>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800526c:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <vPortValidateInterruptPriority+0x7c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d90a      	bls.n	800528a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	603b      	str	r3, [r7, #0]
}
 8005286:	bf00      	nop
 8005288:	e7fe      	b.n	8005288 <vPortValidateInterruptPriority+0x60>
	}
 800528a:	bf00      	nop
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	e000e3f0 	.word	0xe000e3f0
 800529c:	200007b4 	.word	0x200007b4
 80052a0:	e000ed0c 	.word	0xe000ed0c
 80052a4:	200007b8 	.word	0x200007b8

080052a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08a      	sub	sp, #40	; 0x28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052b4:	f7ff f8f4 	bl	80044a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052b8:	4b5b      	ldr	r3, [pc, #364]	; (8005428 <pvPortMalloc+0x180>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052c0:	f000 f920 	bl	8005504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052c4:	4b59      	ldr	r3, [pc, #356]	; (800542c <pvPortMalloc+0x184>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f040 8093 	bne.w	80053f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01d      	beq.n	8005314 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80052d8:	2208      	movs	r2, #8
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4413      	add	r3, r2
 80052de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d014      	beq.n	8005314 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f023 0307 	bic.w	r3, r3, #7
 80052f0:	3308      	adds	r3, #8
 80052f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <pvPortMalloc+0x6c>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	617b      	str	r3, [r7, #20]
}
 8005310:	bf00      	nop
 8005312:	e7fe      	b.n	8005312 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d06e      	beq.n	80053f8 <pvPortMalloc+0x150>
 800531a:	4b45      	ldr	r3, [pc, #276]	; (8005430 <pvPortMalloc+0x188>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	429a      	cmp	r2, r3
 8005322:	d869      	bhi.n	80053f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005324:	4b43      	ldr	r3, [pc, #268]	; (8005434 <pvPortMalloc+0x18c>)
 8005326:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005328:	4b42      	ldr	r3, [pc, #264]	; (8005434 <pvPortMalloc+0x18c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800532e:	e004      	b.n	800533a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	429a      	cmp	r2, r3
 8005342:	d903      	bls.n	800534c <pvPortMalloc+0xa4>
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f1      	bne.n	8005330 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800534c:	4b36      	ldr	r3, [pc, #216]	; (8005428 <pvPortMalloc+0x180>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005352:	429a      	cmp	r2, r3
 8005354:	d050      	beq.n	80053f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2208      	movs	r2, #8
 800535c:	4413      	add	r3, r2
 800535e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	1ad2      	subs	r2, r2, r3
 8005370:	2308      	movs	r3, #8
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	429a      	cmp	r2, r3
 8005376:	d91f      	bls.n	80053b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4413      	add	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <pvPortMalloc+0xf8>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	613b      	str	r3, [r7, #16]
}
 800539c:	bf00      	nop
 800539e:	e7fe      	b.n	800539e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	1ad2      	subs	r2, r2, r3
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053b2:	69b8      	ldr	r0, [r7, #24]
 80053b4:	f000 f908 	bl	80055c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053b8:	4b1d      	ldr	r3, [pc, #116]	; (8005430 <pvPortMalloc+0x188>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	4a1b      	ldr	r2, [pc, #108]	; (8005430 <pvPortMalloc+0x188>)
 80053c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053c6:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <pvPortMalloc+0x188>)
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4b1b      	ldr	r3, [pc, #108]	; (8005438 <pvPortMalloc+0x190>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d203      	bcs.n	80053da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053d2:	4b17      	ldr	r3, [pc, #92]	; (8005430 <pvPortMalloc+0x188>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a18      	ldr	r2, [pc, #96]	; (8005438 <pvPortMalloc+0x190>)
 80053d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	4b13      	ldr	r3, [pc, #76]	; (800542c <pvPortMalloc+0x184>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	431a      	orrs	r2, r3
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80053ee:	4b13      	ldr	r3, [pc, #76]	; (800543c <pvPortMalloc+0x194>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3301      	adds	r3, #1
 80053f4:	4a11      	ldr	r2, [pc, #68]	; (800543c <pvPortMalloc+0x194>)
 80053f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053f8:	f7ff f860 	bl	80044bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <pvPortMalloc+0x174>
	__asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	60fb      	str	r3, [r7, #12]
}
 8005418:	bf00      	nop
 800541a:	e7fe      	b.n	800541a <pvPortMalloc+0x172>
	return pvReturn;
 800541c:	69fb      	ldr	r3, [r7, #28]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3728      	adds	r7, #40	; 0x28
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	200043c4 	.word	0x200043c4
 800542c:	200043d8 	.word	0x200043d8
 8005430:	200043c8 	.word	0x200043c8
 8005434:	200043bc 	.word	0x200043bc
 8005438:	200043cc 	.word	0x200043cc
 800543c:	200043d0 	.word	0x200043d0

08005440 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d04d      	beq.n	80054ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005452:	2308      	movs	r3, #8
 8005454:	425b      	negs	r3, r3
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4413      	add	r3, r2
 800545a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <vPortFree+0xb8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4013      	ands	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <vPortFree+0x44>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	60fb      	str	r3, [r7, #12]
}
 8005480:	bf00      	nop
 8005482:	e7fe      	b.n	8005482 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <vPortFree+0x62>
	__asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	60bb      	str	r3, [r7, #8]
}
 800549e:	bf00      	nop
 80054a0:	e7fe      	b.n	80054a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <vPortFree+0xb8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4013      	ands	r3, r2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01e      	beq.n	80054ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d11a      	bne.n	80054ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	4b0e      	ldr	r3, [pc, #56]	; (80054f8 <vPortFree+0xb8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	43db      	mvns	r3, r3
 80054c2:	401a      	ands	r2, r3
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054c8:	f7fe ffea 	bl	80044a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <vPortFree+0xbc>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4413      	add	r3, r2
 80054d6:	4a09      	ldr	r2, [pc, #36]	; (80054fc <vPortFree+0xbc>)
 80054d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054da:	6938      	ldr	r0, [r7, #16]
 80054dc:	f000 f874 	bl	80055c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80054e0:	4b07      	ldr	r3, [pc, #28]	; (8005500 <vPortFree+0xc0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3301      	adds	r3, #1
 80054e6:	4a06      	ldr	r2, [pc, #24]	; (8005500 <vPortFree+0xc0>)
 80054e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80054ea:	f7fe ffe7 	bl	80044bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054ee:	bf00      	nop
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	200043d8 	.word	0x200043d8
 80054fc:	200043c8 	.word	0x200043c8
 8005500:	200043d4 	.word	0x200043d4

08005504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800550a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800550e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005510:	4b27      	ldr	r3, [pc, #156]	; (80055b0 <prvHeapInit+0xac>)
 8005512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00c      	beq.n	8005538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3307      	adds	r3, #7
 8005522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0307 	bic.w	r3, r3, #7
 800552a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	4a1f      	ldr	r2, [pc, #124]	; (80055b0 <prvHeapInit+0xac>)
 8005534:	4413      	add	r3, r2
 8005536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800553c:	4a1d      	ldr	r2, [pc, #116]	; (80055b4 <prvHeapInit+0xb0>)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005542:	4b1c      	ldr	r3, [pc, #112]	; (80055b4 <prvHeapInit+0xb0>)
 8005544:	2200      	movs	r2, #0
 8005546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	4413      	add	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005550:	2208      	movs	r2, #8
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1a9b      	subs	r3, r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0307 	bic.w	r3, r3, #7
 800555e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <prvHeapInit+0xb4>)
 8005564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005566:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <prvHeapInit+0xb4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2200      	movs	r2, #0
 800556c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800556e:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <prvHeapInit+0xb4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	1ad2      	subs	r2, r2, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005584:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <prvHeapInit+0xb4>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <prvHeapInit+0xb8>)
 8005592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	4a09      	ldr	r2, [pc, #36]	; (80055c0 <prvHeapInit+0xbc>)
 800559a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800559c:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <prvHeapInit+0xc0>)
 800559e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055a2:	601a      	str	r2, [r3, #0]
}
 80055a4:	bf00      	nop
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	200007bc 	.word	0x200007bc
 80055b4:	200043bc 	.word	0x200043bc
 80055b8:	200043c4 	.word	0x200043c4
 80055bc:	200043cc 	.word	0x200043cc
 80055c0:	200043c8 	.word	0x200043c8
 80055c4:	200043d8 	.word	0x200043d8

080055c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055d0:	4b28      	ldr	r3, [pc, #160]	; (8005674 <prvInsertBlockIntoFreeList+0xac>)
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e002      	b.n	80055dc <prvInsertBlockIntoFreeList+0x14>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d8f7      	bhi.n	80055d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4413      	add	r3, r2
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d108      	bne.n	800560a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	441a      	add	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	441a      	add	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d118      	bne.n	8005650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4b15      	ldr	r3, [pc, #84]	; (8005678 <prvInsertBlockIntoFreeList+0xb0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d00d      	beq.n	8005646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	441a      	add	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	e008      	b.n	8005658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005646:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <prvInsertBlockIntoFreeList+0xb0>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	e003      	b.n	8005658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	429a      	cmp	r2, r3
 800565e:	d002      	beq.n	8005666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005666:	bf00      	nop
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	200043bc 	.word	0x200043bc
 8005678:	200043c4 	.word	0x200043c4

0800567c <atoi>:
 800567c:	220a      	movs	r2, #10
 800567e:	2100      	movs	r1, #0
 8005680:	f000 bb64 	b.w	8005d4c <strtol>

08005684 <__errno>:
 8005684:	4b01      	ldr	r3, [pc, #4]	; (800568c <__errno+0x8>)
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	20000020 	.word	0x20000020

08005690 <std>:
 8005690:	2300      	movs	r3, #0
 8005692:	b510      	push	{r4, lr}
 8005694:	4604      	mov	r4, r0
 8005696:	e9c0 3300 	strd	r3, r3, [r0]
 800569a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800569e:	6083      	str	r3, [r0, #8]
 80056a0:	8181      	strh	r1, [r0, #12]
 80056a2:	6643      	str	r3, [r0, #100]	; 0x64
 80056a4:	81c2      	strh	r2, [r0, #14]
 80056a6:	6183      	str	r3, [r0, #24]
 80056a8:	4619      	mov	r1, r3
 80056aa:	2208      	movs	r2, #8
 80056ac:	305c      	adds	r0, #92	; 0x5c
 80056ae:	f000 f91a 	bl	80058e6 <memset>
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <std+0x38>)
 80056b4:	6263      	str	r3, [r4, #36]	; 0x24
 80056b6:	4b05      	ldr	r3, [pc, #20]	; (80056cc <std+0x3c>)
 80056b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80056ba:	4b05      	ldr	r3, [pc, #20]	; (80056d0 <std+0x40>)
 80056bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056be:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <std+0x44>)
 80056c0:	6224      	str	r4, [r4, #32]
 80056c2:	6323      	str	r3, [r4, #48]	; 0x30
 80056c4:	bd10      	pop	{r4, pc}
 80056c6:	bf00      	nop
 80056c8:	08005bbd 	.word	0x08005bbd
 80056cc:	08005bdf 	.word	0x08005bdf
 80056d0:	08005c17 	.word	0x08005c17
 80056d4:	08005c3b 	.word	0x08005c3b

080056d8 <_cleanup_r>:
 80056d8:	4901      	ldr	r1, [pc, #4]	; (80056e0 <_cleanup_r+0x8>)
 80056da:	f000 b8af 	b.w	800583c <_fwalk_reent>
 80056de:	bf00      	nop
 80056e0:	08006031 	.word	0x08006031

080056e4 <__sfmoreglue>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	1e4a      	subs	r2, r1, #1
 80056e8:	2568      	movs	r5, #104	; 0x68
 80056ea:	4355      	muls	r5, r2
 80056ec:	460e      	mov	r6, r1
 80056ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056f2:	f000 f901 	bl	80058f8 <_malloc_r>
 80056f6:	4604      	mov	r4, r0
 80056f8:	b140      	cbz	r0, 800570c <__sfmoreglue+0x28>
 80056fa:	2100      	movs	r1, #0
 80056fc:	e9c0 1600 	strd	r1, r6, [r0]
 8005700:	300c      	adds	r0, #12
 8005702:	60a0      	str	r0, [r4, #8]
 8005704:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005708:	f000 f8ed 	bl	80058e6 <memset>
 800570c:	4620      	mov	r0, r4
 800570e:	bd70      	pop	{r4, r5, r6, pc}

08005710 <__sfp_lock_acquire>:
 8005710:	4801      	ldr	r0, [pc, #4]	; (8005718 <__sfp_lock_acquire+0x8>)
 8005712:	f000 b8d8 	b.w	80058c6 <__retarget_lock_acquire_recursive>
 8005716:	bf00      	nop
 8005718:	20004484 	.word	0x20004484

0800571c <__sfp_lock_release>:
 800571c:	4801      	ldr	r0, [pc, #4]	; (8005724 <__sfp_lock_release+0x8>)
 800571e:	f000 b8d3 	b.w	80058c8 <__retarget_lock_release_recursive>
 8005722:	bf00      	nop
 8005724:	20004484 	.word	0x20004484

08005728 <__sinit_lock_acquire>:
 8005728:	4801      	ldr	r0, [pc, #4]	; (8005730 <__sinit_lock_acquire+0x8>)
 800572a:	f000 b8cc 	b.w	80058c6 <__retarget_lock_acquire_recursive>
 800572e:	bf00      	nop
 8005730:	2000447f 	.word	0x2000447f

08005734 <__sinit_lock_release>:
 8005734:	4801      	ldr	r0, [pc, #4]	; (800573c <__sinit_lock_release+0x8>)
 8005736:	f000 b8c7 	b.w	80058c8 <__retarget_lock_release_recursive>
 800573a:	bf00      	nop
 800573c:	2000447f 	.word	0x2000447f

08005740 <__sinit>:
 8005740:	b510      	push	{r4, lr}
 8005742:	4604      	mov	r4, r0
 8005744:	f7ff fff0 	bl	8005728 <__sinit_lock_acquire>
 8005748:	69a3      	ldr	r3, [r4, #24]
 800574a:	b11b      	cbz	r3, 8005754 <__sinit+0x14>
 800574c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005750:	f7ff bff0 	b.w	8005734 <__sinit_lock_release>
 8005754:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005758:	6523      	str	r3, [r4, #80]	; 0x50
 800575a:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <__sinit+0x68>)
 800575c:	4a13      	ldr	r2, [pc, #76]	; (80057ac <__sinit+0x6c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	62a2      	str	r2, [r4, #40]	; 0x28
 8005762:	42a3      	cmp	r3, r4
 8005764:	bf04      	itt	eq
 8005766:	2301      	moveq	r3, #1
 8005768:	61a3      	streq	r3, [r4, #24]
 800576a:	4620      	mov	r0, r4
 800576c:	f000 f820 	bl	80057b0 <__sfp>
 8005770:	6060      	str	r0, [r4, #4]
 8005772:	4620      	mov	r0, r4
 8005774:	f000 f81c 	bl	80057b0 <__sfp>
 8005778:	60a0      	str	r0, [r4, #8]
 800577a:	4620      	mov	r0, r4
 800577c:	f000 f818 	bl	80057b0 <__sfp>
 8005780:	2200      	movs	r2, #0
 8005782:	60e0      	str	r0, [r4, #12]
 8005784:	2104      	movs	r1, #4
 8005786:	6860      	ldr	r0, [r4, #4]
 8005788:	f7ff ff82 	bl	8005690 <std>
 800578c:	68a0      	ldr	r0, [r4, #8]
 800578e:	2201      	movs	r2, #1
 8005790:	2109      	movs	r1, #9
 8005792:	f7ff ff7d 	bl	8005690 <std>
 8005796:	68e0      	ldr	r0, [r4, #12]
 8005798:	2202      	movs	r2, #2
 800579a:	2112      	movs	r1, #18
 800579c:	f7ff ff78 	bl	8005690 <std>
 80057a0:	2301      	movs	r3, #1
 80057a2:	61a3      	str	r3, [r4, #24]
 80057a4:	e7d2      	b.n	800574c <__sinit+0xc>
 80057a6:	bf00      	nop
 80057a8:	08006aa8 	.word	0x08006aa8
 80057ac:	080056d9 	.word	0x080056d9

080057b0 <__sfp>:
 80057b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b2:	4607      	mov	r7, r0
 80057b4:	f7ff ffac 	bl	8005710 <__sfp_lock_acquire>
 80057b8:	4b1e      	ldr	r3, [pc, #120]	; (8005834 <__sfp+0x84>)
 80057ba:	681e      	ldr	r6, [r3, #0]
 80057bc:	69b3      	ldr	r3, [r6, #24]
 80057be:	b913      	cbnz	r3, 80057c6 <__sfp+0x16>
 80057c0:	4630      	mov	r0, r6
 80057c2:	f7ff ffbd 	bl	8005740 <__sinit>
 80057c6:	3648      	adds	r6, #72	; 0x48
 80057c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057cc:	3b01      	subs	r3, #1
 80057ce:	d503      	bpl.n	80057d8 <__sfp+0x28>
 80057d0:	6833      	ldr	r3, [r6, #0]
 80057d2:	b30b      	cbz	r3, 8005818 <__sfp+0x68>
 80057d4:	6836      	ldr	r6, [r6, #0]
 80057d6:	e7f7      	b.n	80057c8 <__sfp+0x18>
 80057d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057dc:	b9d5      	cbnz	r5, 8005814 <__sfp+0x64>
 80057de:	4b16      	ldr	r3, [pc, #88]	; (8005838 <__sfp+0x88>)
 80057e0:	60e3      	str	r3, [r4, #12]
 80057e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057e6:	6665      	str	r5, [r4, #100]	; 0x64
 80057e8:	f000 f86c 	bl	80058c4 <__retarget_lock_init_recursive>
 80057ec:	f7ff ff96 	bl	800571c <__sfp_lock_release>
 80057f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80057f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057f8:	6025      	str	r5, [r4, #0]
 80057fa:	61a5      	str	r5, [r4, #24]
 80057fc:	2208      	movs	r2, #8
 80057fe:	4629      	mov	r1, r5
 8005800:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005804:	f000 f86f 	bl	80058e6 <memset>
 8005808:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800580c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005810:	4620      	mov	r0, r4
 8005812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005814:	3468      	adds	r4, #104	; 0x68
 8005816:	e7d9      	b.n	80057cc <__sfp+0x1c>
 8005818:	2104      	movs	r1, #4
 800581a:	4638      	mov	r0, r7
 800581c:	f7ff ff62 	bl	80056e4 <__sfmoreglue>
 8005820:	4604      	mov	r4, r0
 8005822:	6030      	str	r0, [r6, #0]
 8005824:	2800      	cmp	r0, #0
 8005826:	d1d5      	bne.n	80057d4 <__sfp+0x24>
 8005828:	f7ff ff78 	bl	800571c <__sfp_lock_release>
 800582c:	230c      	movs	r3, #12
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	e7ee      	b.n	8005810 <__sfp+0x60>
 8005832:	bf00      	nop
 8005834:	08006aa8 	.word	0x08006aa8
 8005838:	ffff0001 	.word	0xffff0001

0800583c <_fwalk_reent>:
 800583c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005840:	4606      	mov	r6, r0
 8005842:	4688      	mov	r8, r1
 8005844:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005848:	2700      	movs	r7, #0
 800584a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800584e:	f1b9 0901 	subs.w	r9, r9, #1
 8005852:	d505      	bpl.n	8005860 <_fwalk_reent+0x24>
 8005854:	6824      	ldr	r4, [r4, #0]
 8005856:	2c00      	cmp	r4, #0
 8005858:	d1f7      	bne.n	800584a <_fwalk_reent+0xe>
 800585a:	4638      	mov	r0, r7
 800585c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005860:	89ab      	ldrh	r3, [r5, #12]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d907      	bls.n	8005876 <_fwalk_reent+0x3a>
 8005866:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800586a:	3301      	adds	r3, #1
 800586c:	d003      	beq.n	8005876 <_fwalk_reent+0x3a>
 800586e:	4629      	mov	r1, r5
 8005870:	4630      	mov	r0, r6
 8005872:	47c0      	blx	r8
 8005874:	4307      	orrs	r7, r0
 8005876:	3568      	adds	r5, #104	; 0x68
 8005878:	e7e9      	b.n	800584e <_fwalk_reent+0x12>
	...

0800587c <__libc_init_array>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	4d0d      	ldr	r5, [pc, #52]	; (80058b4 <__libc_init_array+0x38>)
 8005880:	4c0d      	ldr	r4, [pc, #52]	; (80058b8 <__libc_init_array+0x3c>)
 8005882:	1b64      	subs	r4, r4, r5
 8005884:	10a4      	asrs	r4, r4, #2
 8005886:	2600      	movs	r6, #0
 8005888:	42a6      	cmp	r6, r4
 800588a:	d109      	bne.n	80058a0 <__libc_init_array+0x24>
 800588c:	4d0b      	ldr	r5, [pc, #44]	; (80058bc <__libc_init_array+0x40>)
 800588e:	4c0c      	ldr	r4, [pc, #48]	; (80058c0 <__libc_init_array+0x44>)
 8005890:	f000 fffe 	bl	8006890 <_init>
 8005894:	1b64      	subs	r4, r4, r5
 8005896:	10a4      	asrs	r4, r4, #2
 8005898:	2600      	movs	r6, #0
 800589a:	42a6      	cmp	r6, r4
 800589c:	d105      	bne.n	80058aa <__libc_init_array+0x2e>
 800589e:	bd70      	pop	{r4, r5, r6, pc}
 80058a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a4:	4798      	blx	r3
 80058a6:	3601      	adds	r6, #1
 80058a8:	e7ee      	b.n	8005888 <__libc_init_array+0xc>
 80058aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ae:	4798      	blx	r3
 80058b0:	3601      	adds	r6, #1
 80058b2:	e7f2      	b.n	800589a <__libc_init_array+0x1e>
 80058b4:	08006be8 	.word	0x08006be8
 80058b8:	08006be8 	.word	0x08006be8
 80058bc:	08006be8 	.word	0x08006be8
 80058c0:	08006bec 	.word	0x08006bec

080058c4 <__retarget_lock_init_recursive>:
 80058c4:	4770      	bx	lr

080058c6 <__retarget_lock_acquire_recursive>:
 80058c6:	4770      	bx	lr

080058c8 <__retarget_lock_release_recursive>:
 80058c8:	4770      	bx	lr

080058ca <memcpy>:
 80058ca:	440a      	add	r2, r1
 80058cc:	4291      	cmp	r1, r2
 80058ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80058d2:	d100      	bne.n	80058d6 <memcpy+0xc>
 80058d4:	4770      	bx	lr
 80058d6:	b510      	push	{r4, lr}
 80058d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058e0:	4291      	cmp	r1, r2
 80058e2:	d1f9      	bne.n	80058d8 <memcpy+0xe>
 80058e4:	bd10      	pop	{r4, pc}

080058e6 <memset>:
 80058e6:	4402      	add	r2, r0
 80058e8:	4603      	mov	r3, r0
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d100      	bne.n	80058f0 <memset+0xa>
 80058ee:	4770      	bx	lr
 80058f0:	f803 1b01 	strb.w	r1, [r3], #1
 80058f4:	e7f9      	b.n	80058ea <memset+0x4>
	...

080058f8 <_malloc_r>:
 80058f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fa:	1ccd      	adds	r5, r1, #3
 80058fc:	f025 0503 	bic.w	r5, r5, #3
 8005900:	3508      	adds	r5, #8
 8005902:	2d0c      	cmp	r5, #12
 8005904:	bf38      	it	cc
 8005906:	250c      	movcc	r5, #12
 8005908:	2d00      	cmp	r5, #0
 800590a:	4606      	mov	r6, r0
 800590c:	db01      	blt.n	8005912 <_malloc_r+0x1a>
 800590e:	42a9      	cmp	r1, r5
 8005910:	d903      	bls.n	800591a <_malloc_r+0x22>
 8005912:	230c      	movs	r3, #12
 8005914:	6033      	str	r3, [r6, #0]
 8005916:	2000      	movs	r0, #0
 8005918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800591a:	f000 fc3b 	bl	8006194 <__malloc_lock>
 800591e:	4921      	ldr	r1, [pc, #132]	; (80059a4 <_malloc_r+0xac>)
 8005920:	680a      	ldr	r2, [r1, #0]
 8005922:	4614      	mov	r4, r2
 8005924:	b99c      	cbnz	r4, 800594e <_malloc_r+0x56>
 8005926:	4f20      	ldr	r7, [pc, #128]	; (80059a8 <_malloc_r+0xb0>)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	b923      	cbnz	r3, 8005936 <_malloc_r+0x3e>
 800592c:	4621      	mov	r1, r4
 800592e:	4630      	mov	r0, r6
 8005930:	f000 f934 	bl	8005b9c <_sbrk_r>
 8005934:	6038      	str	r0, [r7, #0]
 8005936:	4629      	mov	r1, r5
 8005938:	4630      	mov	r0, r6
 800593a:	f000 f92f 	bl	8005b9c <_sbrk_r>
 800593e:	1c43      	adds	r3, r0, #1
 8005940:	d123      	bne.n	800598a <_malloc_r+0x92>
 8005942:	230c      	movs	r3, #12
 8005944:	6033      	str	r3, [r6, #0]
 8005946:	4630      	mov	r0, r6
 8005948:	f000 fc2a 	bl	80061a0 <__malloc_unlock>
 800594c:	e7e3      	b.n	8005916 <_malloc_r+0x1e>
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	1b5b      	subs	r3, r3, r5
 8005952:	d417      	bmi.n	8005984 <_malloc_r+0x8c>
 8005954:	2b0b      	cmp	r3, #11
 8005956:	d903      	bls.n	8005960 <_malloc_r+0x68>
 8005958:	6023      	str	r3, [r4, #0]
 800595a:	441c      	add	r4, r3
 800595c:	6025      	str	r5, [r4, #0]
 800595e:	e004      	b.n	800596a <_malloc_r+0x72>
 8005960:	6863      	ldr	r3, [r4, #4]
 8005962:	42a2      	cmp	r2, r4
 8005964:	bf0c      	ite	eq
 8005966:	600b      	streq	r3, [r1, #0]
 8005968:	6053      	strne	r3, [r2, #4]
 800596a:	4630      	mov	r0, r6
 800596c:	f000 fc18 	bl	80061a0 <__malloc_unlock>
 8005970:	f104 000b 	add.w	r0, r4, #11
 8005974:	1d23      	adds	r3, r4, #4
 8005976:	f020 0007 	bic.w	r0, r0, #7
 800597a:	1ac2      	subs	r2, r0, r3
 800597c:	d0cc      	beq.n	8005918 <_malloc_r+0x20>
 800597e:	1a1b      	subs	r3, r3, r0
 8005980:	50a3      	str	r3, [r4, r2]
 8005982:	e7c9      	b.n	8005918 <_malloc_r+0x20>
 8005984:	4622      	mov	r2, r4
 8005986:	6864      	ldr	r4, [r4, #4]
 8005988:	e7cc      	b.n	8005924 <_malloc_r+0x2c>
 800598a:	1cc4      	adds	r4, r0, #3
 800598c:	f024 0403 	bic.w	r4, r4, #3
 8005990:	42a0      	cmp	r0, r4
 8005992:	d0e3      	beq.n	800595c <_malloc_r+0x64>
 8005994:	1a21      	subs	r1, r4, r0
 8005996:	4630      	mov	r0, r6
 8005998:	f000 f900 	bl	8005b9c <_sbrk_r>
 800599c:	3001      	adds	r0, #1
 800599e:	d1dd      	bne.n	800595c <_malloc_r+0x64>
 80059a0:	e7cf      	b.n	8005942 <_malloc_r+0x4a>
 80059a2:	bf00      	nop
 80059a4:	200043dc 	.word	0x200043dc
 80059a8:	200043e0 	.word	0x200043e0

080059ac <iprintf>:
 80059ac:	b40f      	push	{r0, r1, r2, r3}
 80059ae:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <iprintf+0x2c>)
 80059b0:	b513      	push	{r0, r1, r4, lr}
 80059b2:	681c      	ldr	r4, [r3, #0]
 80059b4:	b124      	cbz	r4, 80059c0 <iprintf+0x14>
 80059b6:	69a3      	ldr	r3, [r4, #24]
 80059b8:	b913      	cbnz	r3, 80059c0 <iprintf+0x14>
 80059ba:	4620      	mov	r0, r4
 80059bc:	f7ff fec0 	bl	8005740 <__sinit>
 80059c0:	ab05      	add	r3, sp, #20
 80059c2:	9a04      	ldr	r2, [sp, #16]
 80059c4:	68a1      	ldr	r1, [r4, #8]
 80059c6:	9301      	str	r3, [sp, #4]
 80059c8:	4620      	mov	r0, r4
 80059ca:	f000 fc69 	bl	80062a0 <_vfiprintf_r>
 80059ce:	b002      	add	sp, #8
 80059d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059d4:	b004      	add	sp, #16
 80059d6:	4770      	bx	lr
 80059d8:	20000020 	.word	0x20000020

080059dc <_puts_r>:
 80059dc:	b570      	push	{r4, r5, r6, lr}
 80059de:	460e      	mov	r6, r1
 80059e0:	4605      	mov	r5, r0
 80059e2:	b118      	cbz	r0, 80059ec <_puts_r+0x10>
 80059e4:	6983      	ldr	r3, [r0, #24]
 80059e6:	b90b      	cbnz	r3, 80059ec <_puts_r+0x10>
 80059e8:	f7ff feaa 	bl	8005740 <__sinit>
 80059ec:	69ab      	ldr	r3, [r5, #24]
 80059ee:	68ac      	ldr	r4, [r5, #8]
 80059f0:	b913      	cbnz	r3, 80059f8 <_puts_r+0x1c>
 80059f2:	4628      	mov	r0, r5
 80059f4:	f7ff fea4 	bl	8005740 <__sinit>
 80059f8:	4b2c      	ldr	r3, [pc, #176]	; (8005aac <_puts_r+0xd0>)
 80059fa:	429c      	cmp	r4, r3
 80059fc:	d120      	bne.n	8005a40 <_puts_r+0x64>
 80059fe:	686c      	ldr	r4, [r5, #4]
 8005a00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a02:	07db      	lsls	r3, r3, #31
 8005a04:	d405      	bmi.n	8005a12 <_puts_r+0x36>
 8005a06:	89a3      	ldrh	r3, [r4, #12]
 8005a08:	0598      	lsls	r0, r3, #22
 8005a0a:	d402      	bmi.n	8005a12 <_puts_r+0x36>
 8005a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a0e:	f7ff ff5a 	bl	80058c6 <__retarget_lock_acquire_recursive>
 8005a12:	89a3      	ldrh	r3, [r4, #12]
 8005a14:	0719      	lsls	r1, r3, #28
 8005a16:	d51d      	bpl.n	8005a54 <_puts_r+0x78>
 8005a18:	6923      	ldr	r3, [r4, #16]
 8005a1a:	b1db      	cbz	r3, 8005a54 <_puts_r+0x78>
 8005a1c:	3e01      	subs	r6, #1
 8005a1e:	68a3      	ldr	r3, [r4, #8]
 8005a20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a24:	3b01      	subs	r3, #1
 8005a26:	60a3      	str	r3, [r4, #8]
 8005a28:	bb39      	cbnz	r1, 8005a7a <_puts_r+0x9e>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	da38      	bge.n	8005aa0 <_puts_r+0xc4>
 8005a2e:	4622      	mov	r2, r4
 8005a30:	210a      	movs	r1, #10
 8005a32:	4628      	mov	r0, r5
 8005a34:	f000 f994 	bl	8005d60 <__swbuf_r>
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d011      	beq.n	8005a60 <_puts_r+0x84>
 8005a3c:	250a      	movs	r5, #10
 8005a3e:	e011      	b.n	8005a64 <_puts_r+0x88>
 8005a40:	4b1b      	ldr	r3, [pc, #108]	; (8005ab0 <_puts_r+0xd4>)
 8005a42:	429c      	cmp	r4, r3
 8005a44:	d101      	bne.n	8005a4a <_puts_r+0x6e>
 8005a46:	68ac      	ldr	r4, [r5, #8]
 8005a48:	e7da      	b.n	8005a00 <_puts_r+0x24>
 8005a4a:	4b1a      	ldr	r3, [pc, #104]	; (8005ab4 <_puts_r+0xd8>)
 8005a4c:	429c      	cmp	r4, r3
 8005a4e:	bf08      	it	eq
 8005a50:	68ec      	ldreq	r4, [r5, #12]
 8005a52:	e7d5      	b.n	8005a00 <_puts_r+0x24>
 8005a54:	4621      	mov	r1, r4
 8005a56:	4628      	mov	r0, r5
 8005a58:	f000 f9e6 	bl	8005e28 <__swsetup_r>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	d0dd      	beq.n	8005a1c <_puts_r+0x40>
 8005a60:	f04f 35ff 	mov.w	r5, #4294967295
 8005a64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a66:	07da      	lsls	r2, r3, #31
 8005a68:	d405      	bmi.n	8005a76 <_puts_r+0x9a>
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	059b      	lsls	r3, r3, #22
 8005a6e:	d402      	bmi.n	8005a76 <_puts_r+0x9a>
 8005a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a72:	f7ff ff29 	bl	80058c8 <__retarget_lock_release_recursive>
 8005a76:	4628      	mov	r0, r5
 8005a78:	bd70      	pop	{r4, r5, r6, pc}
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	da04      	bge.n	8005a88 <_puts_r+0xac>
 8005a7e:	69a2      	ldr	r2, [r4, #24]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	dc06      	bgt.n	8005a92 <_puts_r+0xb6>
 8005a84:	290a      	cmp	r1, #10
 8005a86:	d004      	beq.n	8005a92 <_puts_r+0xb6>
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	6022      	str	r2, [r4, #0]
 8005a8e:	7019      	strb	r1, [r3, #0]
 8005a90:	e7c5      	b.n	8005a1e <_puts_r+0x42>
 8005a92:	4622      	mov	r2, r4
 8005a94:	4628      	mov	r0, r5
 8005a96:	f000 f963 	bl	8005d60 <__swbuf_r>
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d1bf      	bne.n	8005a1e <_puts_r+0x42>
 8005a9e:	e7df      	b.n	8005a60 <_puts_r+0x84>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	250a      	movs	r5, #10
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	6022      	str	r2, [r4, #0]
 8005aa8:	701d      	strb	r5, [r3, #0]
 8005aaa:	e7db      	b.n	8005a64 <_puts_r+0x88>
 8005aac:	08006a68 	.word	0x08006a68
 8005ab0:	08006a88 	.word	0x08006a88
 8005ab4:	08006a48 	.word	0x08006a48

08005ab8 <puts>:
 8005ab8:	4b02      	ldr	r3, [pc, #8]	; (8005ac4 <puts+0xc>)
 8005aba:	4601      	mov	r1, r0
 8005abc:	6818      	ldr	r0, [r3, #0]
 8005abe:	f7ff bf8d 	b.w	80059dc <_puts_r>
 8005ac2:	bf00      	nop
 8005ac4:	20000020 	.word	0x20000020

08005ac8 <cleanup_glue>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	460c      	mov	r4, r1
 8005acc:	6809      	ldr	r1, [r1, #0]
 8005ace:	4605      	mov	r5, r0
 8005ad0:	b109      	cbz	r1, 8005ad6 <cleanup_glue+0xe>
 8005ad2:	f7ff fff9 	bl	8005ac8 <cleanup_glue>
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	4628      	mov	r0, r5
 8005ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ade:	f000 bb65 	b.w	80061ac <_free_r>
	...

08005ae4 <_reclaim_reent>:
 8005ae4:	4b2c      	ldr	r3, [pc, #176]	; (8005b98 <_reclaim_reent+0xb4>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4283      	cmp	r3, r0
 8005aea:	b570      	push	{r4, r5, r6, lr}
 8005aec:	4604      	mov	r4, r0
 8005aee:	d051      	beq.n	8005b94 <_reclaim_reent+0xb0>
 8005af0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005af2:	b143      	cbz	r3, 8005b06 <_reclaim_reent+0x22>
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d14a      	bne.n	8005b90 <_reclaim_reent+0xac>
 8005afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005afc:	6819      	ldr	r1, [r3, #0]
 8005afe:	b111      	cbz	r1, 8005b06 <_reclaim_reent+0x22>
 8005b00:	4620      	mov	r0, r4
 8005b02:	f000 fb53 	bl	80061ac <_free_r>
 8005b06:	6961      	ldr	r1, [r4, #20]
 8005b08:	b111      	cbz	r1, 8005b10 <_reclaim_reent+0x2c>
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f000 fb4e 	bl	80061ac <_free_r>
 8005b10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005b12:	b111      	cbz	r1, 8005b1a <_reclaim_reent+0x36>
 8005b14:	4620      	mov	r0, r4
 8005b16:	f000 fb49 	bl	80061ac <_free_r>
 8005b1a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005b1c:	b111      	cbz	r1, 8005b24 <_reclaim_reent+0x40>
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f000 fb44 	bl	80061ac <_free_r>
 8005b24:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005b26:	b111      	cbz	r1, 8005b2e <_reclaim_reent+0x4a>
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f000 fb3f 	bl	80061ac <_free_r>
 8005b2e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005b30:	b111      	cbz	r1, 8005b38 <_reclaim_reent+0x54>
 8005b32:	4620      	mov	r0, r4
 8005b34:	f000 fb3a 	bl	80061ac <_free_r>
 8005b38:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005b3a:	b111      	cbz	r1, 8005b42 <_reclaim_reent+0x5e>
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f000 fb35 	bl	80061ac <_free_r>
 8005b42:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005b44:	b111      	cbz	r1, 8005b4c <_reclaim_reent+0x68>
 8005b46:	4620      	mov	r0, r4
 8005b48:	f000 fb30 	bl	80061ac <_free_r>
 8005b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b4e:	b111      	cbz	r1, 8005b56 <_reclaim_reent+0x72>
 8005b50:	4620      	mov	r0, r4
 8005b52:	f000 fb2b 	bl	80061ac <_free_r>
 8005b56:	69a3      	ldr	r3, [r4, #24]
 8005b58:	b1e3      	cbz	r3, 8005b94 <_reclaim_reent+0xb0>
 8005b5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	4798      	blx	r3
 8005b60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005b62:	b1b9      	cbz	r1, 8005b94 <_reclaim_reent+0xb0>
 8005b64:	4620      	mov	r0, r4
 8005b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b6a:	f7ff bfad 	b.w	8005ac8 <cleanup_glue>
 8005b6e:	5949      	ldr	r1, [r1, r5]
 8005b70:	b941      	cbnz	r1, 8005b84 <_reclaim_reent+0xa0>
 8005b72:	3504      	adds	r5, #4
 8005b74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b76:	2d80      	cmp	r5, #128	; 0x80
 8005b78:	68d9      	ldr	r1, [r3, #12]
 8005b7a:	d1f8      	bne.n	8005b6e <_reclaim_reent+0x8a>
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f000 fb15 	bl	80061ac <_free_r>
 8005b82:	e7ba      	b.n	8005afa <_reclaim_reent+0x16>
 8005b84:	680e      	ldr	r6, [r1, #0]
 8005b86:	4620      	mov	r0, r4
 8005b88:	f000 fb10 	bl	80061ac <_free_r>
 8005b8c:	4631      	mov	r1, r6
 8005b8e:	e7ef      	b.n	8005b70 <_reclaim_reent+0x8c>
 8005b90:	2500      	movs	r5, #0
 8005b92:	e7ef      	b.n	8005b74 <_reclaim_reent+0x90>
 8005b94:	bd70      	pop	{r4, r5, r6, pc}
 8005b96:	bf00      	nop
 8005b98:	20000020 	.word	0x20000020

08005b9c <_sbrk_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	4d06      	ldr	r5, [pc, #24]	; (8005bb8 <_sbrk_r+0x1c>)
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	4608      	mov	r0, r1
 8005ba6:	602b      	str	r3, [r5, #0]
 8005ba8:	f7fb f95e 	bl	8000e68 <_sbrk>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d102      	bne.n	8005bb6 <_sbrk_r+0x1a>
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	b103      	cbz	r3, 8005bb6 <_sbrk_r+0x1a>
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	bd38      	pop	{r3, r4, r5, pc}
 8005bb8:	20004488 	.word	0x20004488

08005bbc <__sread>:
 8005bbc:	b510      	push	{r4, lr}
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc4:	f000 fe30 	bl	8006828 <_read_r>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	bfab      	itete	ge
 8005bcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bce:	89a3      	ldrhlt	r3, [r4, #12]
 8005bd0:	181b      	addge	r3, r3, r0
 8005bd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bd6:	bfac      	ite	ge
 8005bd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bda:	81a3      	strhlt	r3, [r4, #12]
 8005bdc:	bd10      	pop	{r4, pc}

08005bde <__swrite>:
 8005bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be2:	461f      	mov	r7, r3
 8005be4:	898b      	ldrh	r3, [r1, #12]
 8005be6:	05db      	lsls	r3, r3, #23
 8005be8:	4605      	mov	r5, r0
 8005bea:	460c      	mov	r4, r1
 8005bec:	4616      	mov	r6, r2
 8005bee:	d505      	bpl.n	8005bfc <__swrite+0x1e>
 8005bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f000 fa56 	bl	80060a8 <_lseek_r>
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c06:	81a3      	strh	r3, [r4, #12]
 8005c08:	4632      	mov	r2, r6
 8005c0a:	463b      	mov	r3, r7
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c12:	f000 b8f7 	b.w	8005e04 <_write_r>

08005c16 <__sseek>:
 8005c16:	b510      	push	{r4, lr}
 8005c18:	460c      	mov	r4, r1
 8005c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c1e:	f000 fa43 	bl	80060a8 <_lseek_r>
 8005c22:	1c43      	adds	r3, r0, #1
 8005c24:	89a3      	ldrh	r3, [r4, #12]
 8005c26:	bf15      	itete	ne
 8005c28:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c32:	81a3      	strheq	r3, [r4, #12]
 8005c34:	bf18      	it	ne
 8005c36:	81a3      	strhne	r3, [r4, #12]
 8005c38:	bd10      	pop	{r4, pc}

08005c3a <__sclose>:
 8005c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c3e:	f000 b961 	b.w	8005f04 <_close_r>
	...

08005c44 <_strtol_l.isra.0>:
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4a:	d001      	beq.n	8005c50 <_strtol_l.isra.0+0xc>
 8005c4c:	2b24      	cmp	r3, #36	; 0x24
 8005c4e:	d906      	bls.n	8005c5e <_strtol_l.isra.0+0x1a>
 8005c50:	f7ff fd18 	bl	8005684 <__errno>
 8005c54:	2316      	movs	r3, #22
 8005c56:	6003      	str	r3, [r0, #0]
 8005c58:	2000      	movs	r0, #0
 8005c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c5e:	4f3a      	ldr	r7, [pc, #232]	; (8005d48 <_strtol_l.isra.0+0x104>)
 8005c60:	468e      	mov	lr, r1
 8005c62:	4676      	mov	r6, lr
 8005c64:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005c68:	5de5      	ldrb	r5, [r4, r7]
 8005c6a:	f015 0508 	ands.w	r5, r5, #8
 8005c6e:	d1f8      	bne.n	8005c62 <_strtol_l.isra.0+0x1e>
 8005c70:	2c2d      	cmp	r4, #45	; 0x2d
 8005c72:	d134      	bne.n	8005cde <_strtol_l.isra.0+0x9a>
 8005c74:	f89e 4000 	ldrb.w	r4, [lr]
 8005c78:	f04f 0801 	mov.w	r8, #1
 8005c7c:	f106 0e02 	add.w	lr, r6, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d05c      	beq.n	8005d3e <_strtol_l.isra.0+0xfa>
 8005c84:	2b10      	cmp	r3, #16
 8005c86:	d10c      	bne.n	8005ca2 <_strtol_l.isra.0+0x5e>
 8005c88:	2c30      	cmp	r4, #48	; 0x30
 8005c8a:	d10a      	bne.n	8005ca2 <_strtol_l.isra.0+0x5e>
 8005c8c:	f89e 4000 	ldrb.w	r4, [lr]
 8005c90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005c94:	2c58      	cmp	r4, #88	; 0x58
 8005c96:	d14d      	bne.n	8005d34 <_strtol_l.isra.0+0xf0>
 8005c98:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	f10e 0e02 	add.w	lr, lr, #2
 8005ca2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005ca6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005caa:	2600      	movs	r6, #0
 8005cac:	fbbc f9f3 	udiv	r9, ip, r3
 8005cb0:	4635      	mov	r5, r6
 8005cb2:	fb03 ca19 	mls	sl, r3, r9, ip
 8005cb6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005cba:	2f09      	cmp	r7, #9
 8005cbc:	d818      	bhi.n	8005cf0 <_strtol_l.isra.0+0xac>
 8005cbe:	463c      	mov	r4, r7
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	dd24      	ble.n	8005d0e <_strtol_l.isra.0+0xca>
 8005cc4:	2e00      	cmp	r6, #0
 8005cc6:	db1f      	blt.n	8005d08 <_strtol_l.isra.0+0xc4>
 8005cc8:	45a9      	cmp	r9, r5
 8005cca:	d31d      	bcc.n	8005d08 <_strtol_l.isra.0+0xc4>
 8005ccc:	d101      	bne.n	8005cd2 <_strtol_l.isra.0+0x8e>
 8005cce:	45a2      	cmp	sl, r4
 8005cd0:	db1a      	blt.n	8005d08 <_strtol_l.isra.0+0xc4>
 8005cd2:	fb05 4503 	mla	r5, r5, r3, r4
 8005cd6:	2601      	movs	r6, #1
 8005cd8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005cdc:	e7eb      	b.n	8005cb6 <_strtol_l.isra.0+0x72>
 8005cde:	2c2b      	cmp	r4, #43	; 0x2b
 8005ce0:	bf08      	it	eq
 8005ce2:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005ce6:	46a8      	mov	r8, r5
 8005ce8:	bf08      	it	eq
 8005cea:	f106 0e02 	addeq.w	lr, r6, #2
 8005cee:	e7c7      	b.n	8005c80 <_strtol_l.isra.0+0x3c>
 8005cf0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005cf4:	2f19      	cmp	r7, #25
 8005cf6:	d801      	bhi.n	8005cfc <_strtol_l.isra.0+0xb8>
 8005cf8:	3c37      	subs	r4, #55	; 0x37
 8005cfa:	e7e1      	b.n	8005cc0 <_strtol_l.isra.0+0x7c>
 8005cfc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005d00:	2f19      	cmp	r7, #25
 8005d02:	d804      	bhi.n	8005d0e <_strtol_l.isra.0+0xca>
 8005d04:	3c57      	subs	r4, #87	; 0x57
 8005d06:	e7db      	b.n	8005cc0 <_strtol_l.isra.0+0x7c>
 8005d08:	f04f 36ff 	mov.w	r6, #4294967295
 8005d0c:	e7e4      	b.n	8005cd8 <_strtol_l.isra.0+0x94>
 8005d0e:	2e00      	cmp	r6, #0
 8005d10:	da05      	bge.n	8005d1e <_strtol_l.isra.0+0xda>
 8005d12:	2322      	movs	r3, #34	; 0x22
 8005d14:	6003      	str	r3, [r0, #0]
 8005d16:	4665      	mov	r5, ip
 8005d18:	b942      	cbnz	r2, 8005d2c <_strtol_l.isra.0+0xe8>
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	e79d      	b.n	8005c5a <_strtol_l.isra.0+0x16>
 8005d1e:	f1b8 0f00 	cmp.w	r8, #0
 8005d22:	d000      	beq.n	8005d26 <_strtol_l.isra.0+0xe2>
 8005d24:	426d      	negs	r5, r5
 8005d26:	2a00      	cmp	r2, #0
 8005d28:	d0f7      	beq.n	8005d1a <_strtol_l.isra.0+0xd6>
 8005d2a:	b10e      	cbz	r6, 8005d30 <_strtol_l.isra.0+0xec>
 8005d2c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005d30:	6011      	str	r1, [r2, #0]
 8005d32:	e7f2      	b.n	8005d1a <_strtol_l.isra.0+0xd6>
 8005d34:	2430      	movs	r4, #48	; 0x30
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1b3      	bne.n	8005ca2 <_strtol_l.isra.0+0x5e>
 8005d3a:	2308      	movs	r3, #8
 8005d3c:	e7b1      	b.n	8005ca2 <_strtol_l.isra.0+0x5e>
 8005d3e:	2c30      	cmp	r4, #48	; 0x30
 8005d40:	d0a4      	beq.n	8005c8c <_strtol_l.isra.0+0x48>
 8005d42:	230a      	movs	r3, #10
 8005d44:	e7ad      	b.n	8005ca2 <_strtol_l.isra.0+0x5e>
 8005d46:	bf00      	nop
 8005d48:	08006aad 	.word	0x08006aad

08005d4c <strtol>:
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	460a      	mov	r2, r1
 8005d50:	4601      	mov	r1, r0
 8005d52:	4802      	ldr	r0, [pc, #8]	; (8005d5c <strtol+0x10>)
 8005d54:	6800      	ldr	r0, [r0, #0]
 8005d56:	f7ff bf75 	b.w	8005c44 <_strtol_l.isra.0>
 8005d5a:	bf00      	nop
 8005d5c:	20000020 	.word	0x20000020

08005d60 <__swbuf_r>:
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	460e      	mov	r6, r1
 8005d64:	4614      	mov	r4, r2
 8005d66:	4605      	mov	r5, r0
 8005d68:	b118      	cbz	r0, 8005d72 <__swbuf_r+0x12>
 8005d6a:	6983      	ldr	r3, [r0, #24]
 8005d6c:	b90b      	cbnz	r3, 8005d72 <__swbuf_r+0x12>
 8005d6e:	f7ff fce7 	bl	8005740 <__sinit>
 8005d72:	4b21      	ldr	r3, [pc, #132]	; (8005df8 <__swbuf_r+0x98>)
 8005d74:	429c      	cmp	r4, r3
 8005d76:	d12b      	bne.n	8005dd0 <__swbuf_r+0x70>
 8005d78:	686c      	ldr	r4, [r5, #4]
 8005d7a:	69a3      	ldr	r3, [r4, #24]
 8005d7c:	60a3      	str	r3, [r4, #8]
 8005d7e:	89a3      	ldrh	r3, [r4, #12]
 8005d80:	071a      	lsls	r2, r3, #28
 8005d82:	d52f      	bpl.n	8005de4 <__swbuf_r+0x84>
 8005d84:	6923      	ldr	r3, [r4, #16]
 8005d86:	b36b      	cbz	r3, 8005de4 <__swbuf_r+0x84>
 8005d88:	6923      	ldr	r3, [r4, #16]
 8005d8a:	6820      	ldr	r0, [r4, #0]
 8005d8c:	1ac0      	subs	r0, r0, r3
 8005d8e:	6963      	ldr	r3, [r4, #20]
 8005d90:	b2f6      	uxtb	r6, r6
 8005d92:	4283      	cmp	r3, r0
 8005d94:	4637      	mov	r7, r6
 8005d96:	dc04      	bgt.n	8005da2 <__swbuf_r+0x42>
 8005d98:	4621      	mov	r1, r4
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	f000 f948 	bl	8006030 <_fflush_r>
 8005da0:	bb30      	cbnz	r0, 8005df0 <__swbuf_r+0x90>
 8005da2:	68a3      	ldr	r3, [r4, #8]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	60a3      	str	r3, [r4, #8]
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	6022      	str	r2, [r4, #0]
 8005dae:	701e      	strb	r6, [r3, #0]
 8005db0:	6963      	ldr	r3, [r4, #20]
 8005db2:	3001      	adds	r0, #1
 8005db4:	4283      	cmp	r3, r0
 8005db6:	d004      	beq.n	8005dc2 <__swbuf_r+0x62>
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	07db      	lsls	r3, r3, #31
 8005dbc:	d506      	bpl.n	8005dcc <__swbuf_r+0x6c>
 8005dbe:	2e0a      	cmp	r6, #10
 8005dc0:	d104      	bne.n	8005dcc <__swbuf_r+0x6c>
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	f000 f933 	bl	8006030 <_fflush_r>
 8005dca:	b988      	cbnz	r0, 8005df0 <__swbuf_r+0x90>
 8005dcc:	4638      	mov	r0, r7
 8005dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dd0:	4b0a      	ldr	r3, [pc, #40]	; (8005dfc <__swbuf_r+0x9c>)
 8005dd2:	429c      	cmp	r4, r3
 8005dd4:	d101      	bne.n	8005dda <__swbuf_r+0x7a>
 8005dd6:	68ac      	ldr	r4, [r5, #8]
 8005dd8:	e7cf      	b.n	8005d7a <__swbuf_r+0x1a>
 8005dda:	4b09      	ldr	r3, [pc, #36]	; (8005e00 <__swbuf_r+0xa0>)
 8005ddc:	429c      	cmp	r4, r3
 8005dde:	bf08      	it	eq
 8005de0:	68ec      	ldreq	r4, [r5, #12]
 8005de2:	e7ca      	b.n	8005d7a <__swbuf_r+0x1a>
 8005de4:	4621      	mov	r1, r4
 8005de6:	4628      	mov	r0, r5
 8005de8:	f000 f81e 	bl	8005e28 <__swsetup_r>
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d0cb      	beq.n	8005d88 <__swbuf_r+0x28>
 8005df0:	f04f 37ff 	mov.w	r7, #4294967295
 8005df4:	e7ea      	b.n	8005dcc <__swbuf_r+0x6c>
 8005df6:	bf00      	nop
 8005df8:	08006a68 	.word	0x08006a68
 8005dfc:	08006a88 	.word	0x08006a88
 8005e00:	08006a48 	.word	0x08006a48

08005e04 <_write_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4d07      	ldr	r5, [pc, #28]	; (8005e24 <_write_r+0x20>)
 8005e08:	4604      	mov	r4, r0
 8005e0a:	4608      	mov	r0, r1
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	2200      	movs	r2, #0
 8005e10:	602a      	str	r2, [r5, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f7fa ffd7 	bl	8000dc6 <_write>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d102      	bne.n	8005e22 <_write_r+0x1e>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	b103      	cbz	r3, 8005e22 <_write_r+0x1e>
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	20004488 	.word	0x20004488

08005e28 <__swsetup_r>:
 8005e28:	4b32      	ldr	r3, [pc, #200]	; (8005ef4 <__swsetup_r+0xcc>)
 8005e2a:	b570      	push	{r4, r5, r6, lr}
 8005e2c:	681d      	ldr	r5, [r3, #0]
 8005e2e:	4606      	mov	r6, r0
 8005e30:	460c      	mov	r4, r1
 8005e32:	b125      	cbz	r5, 8005e3e <__swsetup_r+0x16>
 8005e34:	69ab      	ldr	r3, [r5, #24]
 8005e36:	b913      	cbnz	r3, 8005e3e <__swsetup_r+0x16>
 8005e38:	4628      	mov	r0, r5
 8005e3a:	f7ff fc81 	bl	8005740 <__sinit>
 8005e3e:	4b2e      	ldr	r3, [pc, #184]	; (8005ef8 <__swsetup_r+0xd0>)
 8005e40:	429c      	cmp	r4, r3
 8005e42:	d10f      	bne.n	8005e64 <__swsetup_r+0x3c>
 8005e44:	686c      	ldr	r4, [r5, #4]
 8005e46:	89a3      	ldrh	r3, [r4, #12]
 8005e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e4c:	0719      	lsls	r1, r3, #28
 8005e4e:	d42c      	bmi.n	8005eaa <__swsetup_r+0x82>
 8005e50:	06dd      	lsls	r5, r3, #27
 8005e52:	d411      	bmi.n	8005e78 <__swsetup_r+0x50>
 8005e54:	2309      	movs	r3, #9
 8005e56:	6033      	str	r3, [r6, #0]
 8005e58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e5c:	81a3      	strh	r3, [r4, #12]
 8005e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e62:	e03e      	b.n	8005ee2 <__swsetup_r+0xba>
 8005e64:	4b25      	ldr	r3, [pc, #148]	; (8005efc <__swsetup_r+0xd4>)
 8005e66:	429c      	cmp	r4, r3
 8005e68:	d101      	bne.n	8005e6e <__swsetup_r+0x46>
 8005e6a:	68ac      	ldr	r4, [r5, #8]
 8005e6c:	e7eb      	b.n	8005e46 <__swsetup_r+0x1e>
 8005e6e:	4b24      	ldr	r3, [pc, #144]	; (8005f00 <__swsetup_r+0xd8>)
 8005e70:	429c      	cmp	r4, r3
 8005e72:	bf08      	it	eq
 8005e74:	68ec      	ldreq	r4, [r5, #12]
 8005e76:	e7e6      	b.n	8005e46 <__swsetup_r+0x1e>
 8005e78:	0758      	lsls	r0, r3, #29
 8005e7a:	d512      	bpl.n	8005ea2 <__swsetup_r+0x7a>
 8005e7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e7e:	b141      	cbz	r1, 8005e92 <__swsetup_r+0x6a>
 8005e80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e84:	4299      	cmp	r1, r3
 8005e86:	d002      	beq.n	8005e8e <__swsetup_r+0x66>
 8005e88:	4630      	mov	r0, r6
 8005e8a:	f000 f98f 	bl	80061ac <_free_r>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	6363      	str	r3, [r4, #52]	; 0x34
 8005e92:	89a3      	ldrh	r3, [r4, #12]
 8005e94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e98:	81a3      	strh	r3, [r4, #12]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	6063      	str	r3, [r4, #4]
 8005e9e:	6923      	ldr	r3, [r4, #16]
 8005ea0:	6023      	str	r3, [r4, #0]
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	f043 0308 	orr.w	r3, r3, #8
 8005ea8:	81a3      	strh	r3, [r4, #12]
 8005eaa:	6923      	ldr	r3, [r4, #16]
 8005eac:	b94b      	cbnz	r3, 8005ec2 <__swsetup_r+0x9a>
 8005eae:	89a3      	ldrh	r3, [r4, #12]
 8005eb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eb8:	d003      	beq.n	8005ec2 <__swsetup_r+0x9a>
 8005eba:	4621      	mov	r1, r4
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	f000 f929 	bl	8006114 <__smakebuf_r>
 8005ec2:	89a0      	ldrh	r0, [r4, #12]
 8005ec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ec8:	f010 0301 	ands.w	r3, r0, #1
 8005ecc:	d00a      	beq.n	8005ee4 <__swsetup_r+0xbc>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60a3      	str	r3, [r4, #8]
 8005ed2:	6963      	ldr	r3, [r4, #20]
 8005ed4:	425b      	negs	r3, r3
 8005ed6:	61a3      	str	r3, [r4, #24]
 8005ed8:	6923      	ldr	r3, [r4, #16]
 8005eda:	b943      	cbnz	r3, 8005eee <__swsetup_r+0xc6>
 8005edc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ee0:	d1ba      	bne.n	8005e58 <__swsetup_r+0x30>
 8005ee2:	bd70      	pop	{r4, r5, r6, pc}
 8005ee4:	0781      	lsls	r1, r0, #30
 8005ee6:	bf58      	it	pl
 8005ee8:	6963      	ldrpl	r3, [r4, #20]
 8005eea:	60a3      	str	r3, [r4, #8]
 8005eec:	e7f4      	b.n	8005ed8 <__swsetup_r+0xb0>
 8005eee:	2000      	movs	r0, #0
 8005ef0:	e7f7      	b.n	8005ee2 <__swsetup_r+0xba>
 8005ef2:	bf00      	nop
 8005ef4:	20000020 	.word	0x20000020
 8005ef8:	08006a68 	.word	0x08006a68
 8005efc:	08006a88 	.word	0x08006a88
 8005f00:	08006a48 	.word	0x08006a48

08005f04 <_close_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	4d06      	ldr	r5, [pc, #24]	; (8005f20 <_close_r+0x1c>)
 8005f08:	2300      	movs	r3, #0
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	602b      	str	r3, [r5, #0]
 8005f10:	f7fa ff75 	bl	8000dfe <_close>
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d102      	bne.n	8005f1e <_close_r+0x1a>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	b103      	cbz	r3, 8005f1e <_close_r+0x1a>
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
 8005f20:	20004488 	.word	0x20004488

08005f24 <__sflush_r>:
 8005f24:	898a      	ldrh	r2, [r1, #12]
 8005f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f2a:	4605      	mov	r5, r0
 8005f2c:	0710      	lsls	r0, r2, #28
 8005f2e:	460c      	mov	r4, r1
 8005f30:	d458      	bmi.n	8005fe4 <__sflush_r+0xc0>
 8005f32:	684b      	ldr	r3, [r1, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	dc05      	bgt.n	8005f44 <__sflush_r+0x20>
 8005f38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	dc02      	bgt.n	8005f44 <__sflush_r+0x20>
 8005f3e:	2000      	movs	r0, #0
 8005f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f46:	2e00      	cmp	r6, #0
 8005f48:	d0f9      	beq.n	8005f3e <__sflush_r+0x1a>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f50:	682f      	ldr	r7, [r5, #0]
 8005f52:	602b      	str	r3, [r5, #0]
 8005f54:	d032      	beq.n	8005fbc <__sflush_r+0x98>
 8005f56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	075a      	lsls	r2, r3, #29
 8005f5c:	d505      	bpl.n	8005f6a <__sflush_r+0x46>
 8005f5e:	6863      	ldr	r3, [r4, #4]
 8005f60:	1ac0      	subs	r0, r0, r3
 8005f62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f64:	b10b      	cbz	r3, 8005f6a <__sflush_r+0x46>
 8005f66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f68:	1ac0      	subs	r0, r0, r3
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f70:	6a21      	ldr	r1, [r4, #32]
 8005f72:	4628      	mov	r0, r5
 8005f74:	47b0      	blx	r6
 8005f76:	1c43      	adds	r3, r0, #1
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	d106      	bne.n	8005f8a <__sflush_r+0x66>
 8005f7c:	6829      	ldr	r1, [r5, #0]
 8005f7e:	291d      	cmp	r1, #29
 8005f80:	d82c      	bhi.n	8005fdc <__sflush_r+0xb8>
 8005f82:	4a2a      	ldr	r2, [pc, #168]	; (800602c <__sflush_r+0x108>)
 8005f84:	40ca      	lsrs	r2, r1
 8005f86:	07d6      	lsls	r6, r2, #31
 8005f88:	d528      	bpl.n	8005fdc <__sflush_r+0xb8>
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	6062      	str	r2, [r4, #4]
 8005f8e:	04d9      	lsls	r1, r3, #19
 8005f90:	6922      	ldr	r2, [r4, #16]
 8005f92:	6022      	str	r2, [r4, #0]
 8005f94:	d504      	bpl.n	8005fa0 <__sflush_r+0x7c>
 8005f96:	1c42      	adds	r2, r0, #1
 8005f98:	d101      	bne.n	8005f9e <__sflush_r+0x7a>
 8005f9a:	682b      	ldr	r3, [r5, #0]
 8005f9c:	b903      	cbnz	r3, 8005fa0 <__sflush_r+0x7c>
 8005f9e:	6560      	str	r0, [r4, #84]	; 0x54
 8005fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fa2:	602f      	str	r7, [r5, #0]
 8005fa4:	2900      	cmp	r1, #0
 8005fa6:	d0ca      	beq.n	8005f3e <__sflush_r+0x1a>
 8005fa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fac:	4299      	cmp	r1, r3
 8005fae:	d002      	beq.n	8005fb6 <__sflush_r+0x92>
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	f000 f8fb 	bl	80061ac <_free_r>
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	6360      	str	r0, [r4, #52]	; 0x34
 8005fba:	e7c1      	b.n	8005f40 <__sflush_r+0x1c>
 8005fbc:	6a21      	ldr	r1, [r4, #32]
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	47b0      	blx	r6
 8005fc4:	1c41      	adds	r1, r0, #1
 8005fc6:	d1c7      	bne.n	8005f58 <__sflush_r+0x34>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0c4      	beq.n	8005f58 <__sflush_r+0x34>
 8005fce:	2b1d      	cmp	r3, #29
 8005fd0:	d001      	beq.n	8005fd6 <__sflush_r+0xb2>
 8005fd2:	2b16      	cmp	r3, #22
 8005fd4:	d101      	bne.n	8005fda <__sflush_r+0xb6>
 8005fd6:	602f      	str	r7, [r5, #0]
 8005fd8:	e7b1      	b.n	8005f3e <__sflush_r+0x1a>
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe0:	81a3      	strh	r3, [r4, #12]
 8005fe2:	e7ad      	b.n	8005f40 <__sflush_r+0x1c>
 8005fe4:	690f      	ldr	r7, [r1, #16]
 8005fe6:	2f00      	cmp	r7, #0
 8005fe8:	d0a9      	beq.n	8005f3e <__sflush_r+0x1a>
 8005fea:	0793      	lsls	r3, r2, #30
 8005fec:	680e      	ldr	r6, [r1, #0]
 8005fee:	bf08      	it	eq
 8005ff0:	694b      	ldreq	r3, [r1, #20]
 8005ff2:	600f      	str	r7, [r1, #0]
 8005ff4:	bf18      	it	ne
 8005ff6:	2300      	movne	r3, #0
 8005ff8:	eba6 0807 	sub.w	r8, r6, r7
 8005ffc:	608b      	str	r3, [r1, #8]
 8005ffe:	f1b8 0f00 	cmp.w	r8, #0
 8006002:	dd9c      	ble.n	8005f3e <__sflush_r+0x1a>
 8006004:	6a21      	ldr	r1, [r4, #32]
 8006006:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006008:	4643      	mov	r3, r8
 800600a:	463a      	mov	r2, r7
 800600c:	4628      	mov	r0, r5
 800600e:	47b0      	blx	r6
 8006010:	2800      	cmp	r0, #0
 8006012:	dc06      	bgt.n	8006022 <__sflush_r+0xfe>
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800601a:	81a3      	strh	r3, [r4, #12]
 800601c:	f04f 30ff 	mov.w	r0, #4294967295
 8006020:	e78e      	b.n	8005f40 <__sflush_r+0x1c>
 8006022:	4407      	add	r7, r0
 8006024:	eba8 0800 	sub.w	r8, r8, r0
 8006028:	e7e9      	b.n	8005ffe <__sflush_r+0xda>
 800602a:	bf00      	nop
 800602c:	20400001 	.word	0x20400001

08006030 <_fflush_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	690b      	ldr	r3, [r1, #16]
 8006034:	4605      	mov	r5, r0
 8006036:	460c      	mov	r4, r1
 8006038:	b913      	cbnz	r3, 8006040 <_fflush_r+0x10>
 800603a:	2500      	movs	r5, #0
 800603c:	4628      	mov	r0, r5
 800603e:	bd38      	pop	{r3, r4, r5, pc}
 8006040:	b118      	cbz	r0, 800604a <_fflush_r+0x1a>
 8006042:	6983      	ldr	r3, [r0, #24]
 8006044:	b90b      	cbnz	r3, 800604a <_fflush_r+0x1a>
 8006046:	f7ff fb7b 	bl	8005740 <__sinit>
 800604a:	4b14      	ldr	r3, [pc, #80]	; (800609c <_fflush_r+0x6c>)
 800604c:	429c      	cmp	r4, r3
 800604e:	d11b      	bne.n	8006088 <_fflush_r+0x58>
 8006050:	686c      	ldr	r4, [r5, #4]
 8006052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0ef      	beq.n	800603a <_fflush_r+0xa>
 800605a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800605c:	07d0      	lsls	r0, r2, #31
 800605e:	d404      	bmi.n	800606a <_fflush_r+0x3a>
 8006060:	0599      	lsls	r1, r3, #22
 8006062:	d402      	bmi.n	800606a <_fflush_r+0x3a>
 8006064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006066:	f7ff fc2e 	bl	80058c6 <__retarget_lock_acquire_recursive>
 800606a:	4628      	mov	r0, r5
 800606c:	4621      	mov	r1, r4
 800606e:	f7ff ff59 	bl	8005f24 <__sflush_r>
 8006072:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006074:	07da      	lsls	r2, r3, #31
 8006076:	4605      	mov	r5, r0
 8006078:	d4e0      	bmi.n	800603c <_fflush_r+0xc>
 800607a:	89a3      	ldrh	r3, [r4, #12]
 800607c:	059b      	lsls	r3, r3, #22
 800607e:	d4dd      	bmi.n	800603c <_fflush_r+0xc>
 8006080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006082:	f7ff fc21 	bl	80058c8 <__retarget_lock_release_recursive>
 8006086:	e7d9      	b.n	800603c <_fflush_r+0xc>
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <_fflush_r+0x70>)
 800608a:	429c      	cmp	r4, r3
 800608c:	d101      	bne.n	8006092 <_fflush_r+0x62>
 800608e:	68ac      	ldr	r4, [r5, #8]
 8006090:	e7df      	b.n	8006052 <_fflush_r+0x22>
 8006092:	4b04      	ldr	r3, [pc, #16]	; (80060a4 <_fflush_r+0x74>)
 8006094:	429c      	cmp	r4, r3
 8006096:	bf08      	it	eq
 8006098:	68ec      	ldreq	r4, [r5, #12]
 800609a:	e7da      	b.n	8006052 <_fflush_r+0x22>
 800609c:	08006a68 	.word	0x08006a68
 80060a0:	08006a88 	.word	0x08006a88
 80060a4:	08006a48 	.word	0x08006a48

080060a8 <_lseek_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4d07      	ldr	r5, [pc, #28]	; (80060c8 <_lseek_r+0x20>)
 80060ac:	4604      	mov	r4, r0
 80060ae:	4608      	mov	r0, r1
 80060b0:	4611      	mov	r1, r2
 80060b2:	2200      	movs	r2, #0
 80060b4:	602a      	str	r2, [r5, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	f7fa fec8 	bl	8000e4c <_lseek>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d102      	bne.n	80060c6 <_lseek_r+0x1e>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	b103      	cbz	r3, 80060c6 <_lseek_r+0x1e>
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	20004488 	.word	0x20004488

080060cc <__swhatbuf_r>:
 80060cc:	b570      	push	{r4, r5, r6, lr}
 80060ce:	460e      	mov	r6, r1
 80060d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d4:	2900      	cmp	r1, #0
 80060d6:	b096      	sub	sp, #88	; 0x58
 80060d8:	4614      	mov	r4, r2
 80060da:	461d      	mov	r5, r3
 80060dc:	da07      	bge.n	80060ee <__swhatbuf_r+0x22>
 80060de:	2300      	movs	r3, #0
 80060e0:	602b      	str	r3, [r5, #0]
 80060e2:	89b3      	ldrh	r3, [r6, #12]
 80060e4:	061a      	lsls	r2, r3, #24
 80060e6:	d410      	bmi.n	800610a <__swhatbuf_r+0x3e>
 80060e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060ec:	e00e      	b.n	800610c <__swhatbuf_r+0x40>
 80060ee:	466a      	mov	r2, sp
 80060f0:	f000 fbac 	bl	800684c <_fstat_r>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	dbf2      	blt.n	80060de <__swhatbuf_r+0x12>
 80060f8:	9a01      	ldr	r2, [sp, #4]
 80060fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80060fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006102:	425a      	negs	r2, r3
 8006104:	415a      	adcs	r2, r3
 8006106:	602a      	str	r2, [r5, #0]
 8006108:	e7ee      	b.n	80060e8 <__swhatbuf_r+0x1c>
 800610a:	2340      	movs	r3, #64	; 0x40
 800610c:	2000      	movs	r0, #0
 800610e:	6023      	str	r3, [r4, #0]
 8006110:	b016      	add	sp, #88	; 0x58
 8006112:	bd70      	pop	{r4, r5, r6, pc}

08006114 <__smakebuf_r>:
 8006114:	898b      	ldrh	r3, [r1, #12]
 8006116:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006118:	079d      	lsls	r5, r3, #30
 800611a:	4606      	mov	r6, r0
 800611c:	460c      	mov	r4, r1
 800611e:	d507      	bpl.n	8006130 <__smakebuf_r+0x1c>
 8006120:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	6123      	str	r3, [r4, #16]
 8006128:	2301      	movs	r3, #1
 800612a:	6163      	str	r3, [r4, #20]
 800612c:	b002      	add	sp, #8
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	ab01      	add	r3, sp, #4
 8006132:	466a      	mov	r2, sp
 8006134:	f7ff ffca 	bl	80060cc <__swhatbuf_r>
 8006138:	9900      	ldr	r1, [sp, #0]
 800613a:	4605      	mov	r5, r0
 800613c:	4630      	mov	r0, r6
 800613e:	f7ff fbdb 	bl	80058f8 <_malloc_r>
 8006142:	b948      	cbnz	r0, 8006158 <__smakebuf_r+0x44>
 8006144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006148:	059a      	lsls	r2, r3, #22
 800614a:	d4ef      	bmi.n	800612c <__smakebuf_r+0x18>
 800614c:	f023 0303 	bic.w	r3, r3, #3
 8006150:	f043 0302 	orr.w	r3, r3, #2
 8006154:	81a3      	strh	r3, [r4, #12]
 8006156:	e7e3      	b.n	8006120 <__smakebuf_r+0xc>
 8006158:	4b0d      	ldr	r3, [pc, #52]	; (8006190 <__smakebuf_r+0x7c>)
 800615a:	62b3      	str	r3, [r6, #40]	; 0x28
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	6020      	str	r0, [r4, #0]
 8006160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006164:	81a3      	strh	r3, [r4, #12]
 8006166:	9b00      	ldr	r3, [sp, #0]
 8006168:	6163      	str	r3, [r4, #20]
 800616a:	9b01      	ldr	r3, [sp, #4]
 800616c:	6120      	str	r0, [r4, #16]
 800616e:	b15b      	cbz	r3, 8006188 <__smakebuf_r+0x74>
 8006170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006174:	4630      	mov	r0, r6
 8006176:	f000 fb7b 	bl	8006870 <_isatty_r>
 800617a:	b128      	cbz	r0, 8006188 <__smakebuf_r+0x74>
 800617c:	89a3      	ldrh	r3, [r4, #12]
 800617e:	f023 0303 	bic.w	r3, r3, #3
 8006182:	f043 0301 	orr.w	r3, r3, #1
 8006186:	81a3      	strh	r3, [r4, #12]
 8006188:	89a0      	ldrh	r0, [r4, #12]
 800618a:	4305      	orrs	r5, r0
 800618c:	81a5      	strh	r5, [r4, #12]
 800618e:	e7cd      	b.n	800612c <__smakebuf_r+0x18>
 8006190:	080056d9 	.word	0x080056d9

08006194 <__malloc_lock>:
 8006194:	4801      	ldr	r0, [pc, #4]	; (800619c <__malloc_lock+0x8>)
 8006196:	f7ff bb96 	b.w	80058c6 <__retarget_lock_acquire_recursive>
 800619a:	bf00      	nop
 800619c:	20004480 	.word	0x20004480

080061a0 <__malloc_unlock>:
 80061a0:	4801      	ldr	r0, [pc, #4]	; (80061a8 <__malloc_unlock+0x8>)
 80061a2:	f7ff bb91 	b.w	80058c8 <__retarget_lock_release_recursive>
 80061a6:	bf00      	nop
 80061a8:	20004480 	.word	0x20004480

080061ac <_free_r>:
 80061ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061ae:	2900      	cmp	r1, #0
 80061b0:	d048      	beq.n	8006244 <_free_r+0x98>
 80061b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061b6:	9001      	str	r0, [sp, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f1a1 0404 	sub.w	r4, r1, #4
 80061be:	bfb8      	it	lt
 80061c0:	18e4      	addlt	r4, r4, r3
 80061c2:	f7ff ffe7 	bl	8006194 <__malloc_lock>
 80061c6:	4a20      	ldr	r2, [pc, #128]	; (8006248 <_free_r+0x9c>)
 80061c8:	9801      	ldr	r0, [sp, #4]
 80061ca:	6813      	ldr	r3, [r2, #0]
 80061cc:	4615      	mov	r5, r2
 80061ce:	b933      	cbnz	r3, 80061de <_free_r+0x32>
 80061d0:	6063      	str	r3, [r4, #4]
 80061d2:	6014      	str	r4, [r2, #0]
 80061d4:	b003      	add	sp, #12
 80061d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061da:	f7ff bfe1 	b.w	80061a0 <__malloc_unlock>
 80061de:	42a3      	cmp	r3, r4
 80061e0:	d90b      	bls.n	80061fa <_free_r+0x4e>
 80061e2:	6821      	ldr	r1, [r4, #0]
 80061e4:	1862      	adds	r2, r4, r1
 80061e6:	4293      	cmp	r3, r2
 80061e8:	bf04      	itt	eq
 80061ea:	681a      	ldreq	r2, [r3, #0]
 80061ec:	685b      	ldreq	r3, [r3, #4]
 80061ee:	6063      	str	r3, [r4, #4]
 80061f0:	bf04      	itt	eq
 80061f2:	1852      	addeq	r2, r2, r1
 80061f4:	6022      	streq	r2, [r4, #0]
 80061f6:	602c      	str	r4, [r5, #0]
 80061f8:	e7ec      	b.n	80061d4 <_free_r+0x28>
 80061fa:	461a      	mov	r2, r3
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	b10b      	cbz	r3, 8006204 <_free_r+0x58>
 8006200:	42a3      	cmp	r3, r4
 8006202:	d9fa      	bls.n	80061fa <_free_r+0x4e>
 8006204:	6811      	ldr	r1, [r2, #0]
 8006206:	1855      	adds	r5, r2, r1
 8006208:	42a5      	cmp	r5, r4
 800620a:	d10b      	bne.n	8006224 <_free_r+0x78>
 800620c:	6824      	ldr	r4, [r4, #0]
 800620e:	4421      	add	r1, r4
 8006210:	1854      	adds	r4, r2, r1
 8006212:	42a3      	cmp	r3, r4
 8006214:	6011      	str	r1, [r2, #0]
 8006216:	d1dd      	bne.n	80061d4 <_free_r+0x28>
 8006218:	681c      	ldr	r4, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	6053      	str	r3, [r2, #4]
 800621e:	4421      	add	r1, r4
 8006220:	6011      	str	r1, [r2, #0]
 8006222:	e7d7      	b.n	80061d4 <_free_r+0x28>
 8006224:	d902      	bls.n	800622c <_free_r+0x80>
 8006226:	230c      	movs	r3, #12
 8006228:	6003      	str	r3, [r0, #0]
 800622a:	e7d3      	b.n	80061d4 <_free_r+0x28>
 800622c:	6825      	ldr	r5, [r4, #0]
 800622e:	1961      	adds	r1, r4, r5
 8006230:	428b      	cmp	r3, r1
 8006232:	bf04      	itt	eq
 8006234:	6819      	ldreq	r1, [r3, #0]
 8006236:	685b      	ldreq	r3, [r3, #4]
 8006238:	6063      	str	r3, [r4, #4]
 800623a:	bf04      	itt	eq
 800623c:	1949      	addeq	r1, r1, r5
 800623e:	6021      	streq	r1, [r4, #0]
 8006240:	6054      	str	r4, [r2, #4]
 8006242:	e7c7      	b.n	80061d4 <_free_r+0x28>
 8006244:	b003      	add	sp, #12
 8006246:	bd30      	pop	{r4, r5, pc}
 8006248:	200043dc 	.word	0x200043dc

0800624c <__sfputc_r>:
 800624c:	6893      	ldr	r3, [r2, #8]
 800624e:	3b01      	subs	r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	b410      	push	{r4}
 8006254:	6093      	str	r3, [r2, #8]
 8006256:	da08      	bge.n	800626a <__sfputc_r+0x1e>
 8006258:	6994      	ldr	r4, [r2, #24]
 800625a:	42a3      	cmp	r3, r4
 800625c:	db01      	blt.n	8006262 <__sfputc_r+0x16>
 800625e:	290a      	cmp	r1, #10
 8006260:	d103      	bne.n	800626a <__sfputc_r+0x1e>
 8006262:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006266:	f7ff bd7b 	b.w	8005d60 <__swbuf_r>
 800626a:	6813      	ldr	r3, [r2, #0]
 800626c:	1c58      	adds	r0, r3, #1
 800626e:	6010      	str	r0, [r2, #0]
 8006270:	7019      	strb	r1, [r3, #0]
 8006272:	4608      	mov	r0, r1
 8006274:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006278:	4770      	bx	lr

0800627a <__sfputs_r>:
 800627a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627c:	4606      	mov	r6, r0
 800627e:	460f      	mov	r7, r1
 8006280:	4614      	mov	r4, r2
 8006282:	18d5      	adds	r5, r2, r3
 8006284:	42ac      	cmp	r4, r5
 8006286:	d101      	bne.n	800628c <__sfputs_r+0x12>
 8006288:	2000      	movs	r0, #0
 800628a:	e007      	b.n	800629c <__sfputs_r+0x22>
 800628c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006290:	463a      	mov	r2, r7
 8006292:	4630      	mov	r0, r6
 8006294:	f7ff ffda 	bl	800624c <__sfputc_r>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d1f3      	bne.n	8006284 <__sfputs_r+0xa>
 800629c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062a0 <_vfiprintf_r>:
 80062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	460d      	mov	r5, r1
 80062a6:	b09d      	sub	sp, #116	; 0x74
 80062a8:	4614      	mov	r4, r2
 80062aa:	4698      	mov	r8, r3
 80062ac:	4606      	mov	r6, r0
 80062ae:	b118      	cbz	r0, 80062b8 <_vfiprintf_r+0x18>
 80062b0:	6983      	ldr	r3, [r0, #24]
 80062b2:	b90b      	cbnz	r3, 80062b8 <_vfiprintf_r+0x18>
 80062b4:	f7ff fa44 	bl	8005740 <__sinit>
 80062b8:	4b89      	ldr	r3, [pc, #548]	; (80064e0 <_vfiprintf_r+0x240>)
 80062ba:	429d      	cmp	r5, r3
 80062bc:	d11b      	bne.n	80062f6 <_vfiprintf_r+0x56>
 80062be:	6875      	ldr	r5, [r6, #4]
 80062c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062c2:	07d9      	lsls	r1, r3, #31
 80062c4:	d405      	bmi.n	80062d2 <_vfiprintf_r+0x32>
 80062c6:	89ab      	ldrh	r3, [r5, #12]
 80062c8:	059a      	lsls	r2, r3, #22
 80062ca:	d402      	bmi.n	80062d2 <_vfiprintf_r+0x32>
 80062cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062ce:	f7ff fafa 	bl	80058c6 <__retarget_lock_acquire_recursive>
 80062d2:	89ab      	ldrh	r3, [r5, #12]
 80062d4:	071b      	lsls	r3, r3, #28
 80062d6:	d501      	bpl.n	80062dc <_vfiprintf_r+0x3c>
 80062d8:	692b      	ldr	r3, [r5, #16]
 80062da:	b9eb      	cbnz	r3, 8006318 <_vfiprintf_r+0x78>
 80062dc:	4629      	mov	r1, r5
 80062de:	4630      	mov	r0, r6
 80062e0:	f7ff fda2 	bl	8005e28 <__swsetup_r>
 80062e4:	b1c0      	cbz	r0, 8006318 <_vfiprintf_r+0x78>
 80062e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062e8:	07dc      	lsls	r4, r3, #31
 80062ea:	d50e      	bpl.n	800630a <_vfiprintf_r+0x6a>
 80062ec:	f04f 30ff 	mov.w	r0, #4294967295
 80062f0:	b01d      	add	sp, #116	; 0x74
 80062f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f6:	4b7b      	ldr	r3, [pc, #492]	; (80064e4 <_vfiprintf_r+0x244>)
 80062f8:	429d      	cmp	r5, r3
 80062fa:	d101      	bne.n	8006300 <_vfiprintf_r+0x60>
 80062fc:	68b5      	ldr	r5, [r6, #8]
 80062fe:	e7df      	b.n	80062c0 <_vfiprintf_r+0x20>
 8006300:	4b79      	ldr	r3, [pc, #484]	; (80064e8 <_vfiprintf_r+0x248>)
 8006302:	429d      	cmp	r5, r3
 8006304:	bf08      	it	eq
 8006306:	68f5      	ldreq	r5, [r6, #12]
 8006308:	e7da      	b.n	80062c0 <_vfiprintf_r+0x20>
 800630a:	89ab      	ldrh	r3, [r5, #12]
 800630c:	0598      	lsls	r0, r3, #22
 800630e:	d4ed      	bmi.n	80062ec <_vfiprintf_r+0x4c>
 8006310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006312:	f7ff fad9 	bl	80058c8 <__retarget_lock_release_recursive>
 8006316:	e7e9      	b.n	80062ec <_vfiprintf_r+0x4c>
 8006318:	2300      	movs	r3, #0
 800631a:	9309      	str	r3, [sp, #36]	; 0x24
 800631c:	2320      	movs	r3, #32
 800631e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006322:	f8cd 800c 	str.w	r8, [sp, #12]
 8006326:	2330      	movs	r3, #48	; 0x30
 8006328:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80064ec <_vfiprintf_r+0x24c>
 800632c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006330:	f04f 0901 	mov.w	r9, #1
 8006334:	4623      	mov	r3, r4
 8006336:	469a      	mov	sl, r3
 8006338:	f813 2b01 	ldrb.w	r2, [r3], #1
 800633c:	b10a      	cbz	r2, 8006342 <_vfiprintf_r+0xa2>
 800633e:	2a25      	cmp	r2, #37	; 0x25
 8006340:	d1f9      	bne.n	8006336 <_vfiprintf_r+0x96>
 8006342:	ebba 0b04 	subs.w	fp, sl, r4
 8006346:	d00b      	beq.n	8006360 <_vfiprintf_r+0xc0>
 8006348:	465b      	mov	r3, fp
 800634a:	4622      	mov	r2, r4
 800634c:	4629      	mov	r1, r5
 800634e:	4630      	mov	r0, r6
 8006350:	f7ff ff93 	bl	800627a <__sfputs_r>
 8006354:	3001      	adds	r0, #1
 8006356:	f000 80aa 	beq.w	80064ae <_vfiprintf_r+0x20e>
 800635a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800635c:	445a      	add	r2, fp
 800635e:	9209      	str	r2, [sp, #36]	; 0x24
 8006360:	f89a 3000 	ldrb.w	r3, [sl]
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 80a2 	beq.w	80064ae <_vfiprintf_r+0x20e>
 800636a:	2300      	movs	r3, #0
 800636c:	f04f 32ff 	mov.w	r2, #4294967295
 8006370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006374:	f10a 0a01 	add.w	sl, sl, #1
 8006378:	9304      	str	r3, [sp, #16]
 800637a:	9307      	str	r3, [sp, #28]
 800637c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006380:	931a      	str	r3, [sp, #104]	; 0x68
 8006382:	4654      	mov	r4, sl
 8006384:	2205      	movs	r2, #5
 8006386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800638a:	4858      	ldr	r0, [pc, #352]	; (80064ec <_vfiprintf_r+0x24c>)
 800638c:	f7f9 ff40 	bl	8000210 <memchr>
 8006390:	9a04      	ldr	r2, [sp, #16]
 8006392:	b9d8      	cbnz	r0, 80063cc <_vfiprintf_r+0x12c>
 8006394:	06d1      	lsls	r1, r2, #27
 8006396:	bf44      	itt	mi
 8006398:	2320      	movmi	r3, #32
 800639a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800639e:	0713      	lsls	r3, r2, #28
 80063a0:	bf44      	itt	mi
 80063a2:	232b      	movmi	r3, #43	; 0x2b
 80063a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063a8:	f89a 3000 	ldrb.w	r3, [sl]
 80063ac:	2b2a      	cmp	r3, #42	; 0x2a
 80063ae:	d015      	beq.n	80063dc <_vfiprintf_r+0x13c>
 80063b0:	9a07      	ldr	r2, [sp, #28]
 80063b2:	4654      	mov	r4, sl
 80063b4:	2000      	movs	r0, #0
 80063b6:	f04f 0c0a 	mov.w	ip, #10
 80063ba:	4621      	mov	r1, r4
 80063bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063c0:	3b30      	subs	r3, #48	; 0x30
 80063c2:	2b09      	cmp	r3, #9
 80063c4:	d94e      	bls.n	8006464 <_vfiprintf_r+0x1c4>
 80063c6:	b1b0      	cbz	r0, 80063f6 <_vfiprintf_r+0x156>
 80063c8:	9207      	str	r2, [sp, #28]
 80063ca:	e014      	b.n	80063f6 <_vfiprintf_r+0x156>
 80063cc:	eba0 0308 	sub.w	r3, r0, r8
 80063d0:	fa09 f303 	lsl.w	r3, r9, r3
 80063d4:	4313      	orrs	r3, r2
 80063d6:	9304      	str	r3, [sp, #16]
 80063d8:	46a2      	mov	sl, r4
 80063da:	e7d2      	b.n	8006382 <_vfiprintf_r+0xe2>
 80063dc:	9b03      	ldr	r3, [sp, #12]
 80063de:	1d19      	adds	r1, r3, #4
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	9103      	str	r1, [sp, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	bfbb      	ittet	lt
 80063e8:	425b      	neglt	r3, r3
 80063ea:	f042 0202 	orrlt.w	r2, r2, #2
 80063ee:	9307      	strge	r3, [sp, #28]
 80063f0:	9307      	strlt	r3, [sp, #28]
 80063f2:	bfb8      	it	lt
 80063f4:	9204      	strlt	r2, [sp, #16]
 80063f6:	7823      	ldrb	r3, [r4, #0]
 80063f8:	2b2e      	cmp	r3, #46	; 0x2e
 80063fa:	d10c      	bne.n	8006416 <_vfiprintf_r+0x176>
 80063fc:	7863      	ldrb	r3, [r4, #1]
 80063fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006400:	d135      	bne.n	800646e <_vfiprintf_r+0x1ce>
 8006402:	9b03      	ldr	r3, [sp, #12]
 8006404:	1d1a      	adds	r2, r3, #4
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	9203      	str	r2, [sp, #12]
 800640a:	2b00      	cmp	r3, #0
 800640c:	bfb8      	it	lt
 800640e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006412:	3402      	adds	r4, #2
 8006414:	9305      	str	r3, [sp, #20]
 8006416:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80064fc <_vfiprintf_r+0x25c>
 800641a:	7821      	ldrb	r1, [r4, #0]
 800641c:	2203      	movs	r2, #3
 800641e:	4650      	mov	r0, sl
 8006420:	f7f9 fef6 	bl	8000210 <memchr>
 8006424:	b140      	cbz	r0, 8006438 <_vfiprintf_r+0x198>
 8006426:	2340      	movs	r3, #64	; 0x40
 8006428:	eba0 000a 	sub.w	r0, r0, sl
 800642c:	fa03 f000 	lsl.w	r0, r3, r0
 8006430:	9b04      	ldr	r3, [sp, #16]
 8006432:	4303      	orrs	r3, r0
 8006434:	3401      	adds	r4, #1
 8006436:	9304      	str	r3, [sp, #16]
 8006438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800643c:	482c      	ldr	r0, [pc, #176]	; (80064f0 <_vfiprintf_r+0x250>)
 800643e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006442:	2206      	movs	r2, #6
 8006444:	f7f9 fee4 	bl	8000210 <memchr>
 8006448:	2800      	cmp	r0, #0
 800644a:	d03f      	beq.n	80064cc <_vfiprintf_r+0x22c>
 800644c:	4b29      	ldr	r3, [pc, #164]	; (80064f4 <_vfiprintf_r+0x254>)
 800644e:	bb1b      	cbnz	r3, 8006498 <_vfiprintf_r+0x1f8>
 8006450:	9b03      	ldr	r3, [sp, #12]
 8006452:	3307      	adds	r3, #7
 8006454:	f023 0307 	bic.w	r3, r3, #7
 8006458:	3308      	adds	r3, #8
 800645a:	9303      	str	r3, [sp, #12]
 800645c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645e:	443b      	add	r3, r7
 8006460:	9309      	str	r3, [sp, #36]	; 0x24
 8006462:	e767      	b.n	8006334 <_vfiprintf_r+0x94>
 8006464:	fb0c 3202 	mla	r2, ip, r2, r3
 8006468:	460c      	mov	r4, r1
 800646a:	2001      	movs	r0, #1
 800646c:	e7a5      	b.n	80063ba <_vfiprintf_r+0x11a>
 800646e:	2300      	movs	r3, #0
 8006470:	3401      	adds	r4, #1
 8006472:	9305      	str	r3, [sp, #20]
 8006474:	4619      	mov	r1, r3
 8006476:	f04f 0c0a 	mov.w	ip, #10
 800647a:	4620      	mov	r0, r4
 800647c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006480:	3a30      	subs	r2, #48	; 0x30
 8006482:	2a09      	cmp	r2, #9
 8006484:	d903      	bls.n	800648e <_vfiprintf_r+0x1ee>
 8006486:	2b00      	cmp	r3, #0
 8006488:	d0c5      	beq.n	8006416 <_vfiprintf_r+0x176>
 800648a:	9105      	str	r1, [sp, #20]
 800648c:	e7c3      	b.n	8006416 <_vfiprintf_r+0x176>
 800648e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006492:	4604      	mov	r4, r0
 8006494:	2301      	movs	r3, #1
 8006496:	e7f0      	b.n	800647a <_vfiprintf_r+0x1da>
 8006498:	ab03      	add	r3, sp, #12
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	462a      	mov	r2, r5
 800649e:	4b16      	ldr	r3, [pc, #88]	; (80064f8 <_vfiprintf_r+0x258>)
 80064a0:	a904      	add	r1, sp, #16
 80064a2:	4630      	mov	r0, r6
 80064a4:	f3af 8000 	nop.w
 80064a8:	4607      	mov	r7, r0
 80064aa:	1c78      	adds	r0, r7, #1
 80064ac:	d1d6      	bne.n	800645c <_vfiprintf_r+0x1bc>
 80064ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064b0:	07d9      	lsls	r1, r3, #31
 80064b2:	d405      	bmi.n	80064c0 <_vfiprintf_r+0x220>
 80064b4:	89ab      	ldrh	r3, [r5, #12]
 80064b6:	059a      	lsls	r2, r3, #22
 80064b8:	d402      	bmi.n	80064c0 <_vfiprintf_r+0x220>
 80064ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064bc:	f7ff fa04 	bl	80058c8 <__retarget_lock_release_recursive>
 80064c0:	89ab      	ldrh	r3, [r5, #12]
 80064c2:	065b      	lsls	r3, r3, #25
 80064c4:	f53f af12 	bmi.w	80062ec <_vfiprintf_r+0x4c>
 80064c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064ca:	e711      	b.n	80062f0 <_vfiprintf_r+0x50>
 80064cc:	ab03      	add	r3, sp, #12
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	462a      	mov	r2, r5
 80064d2:	4b09      	ldr	r3, [pc, #36]	; (80064f8 <_vfiprintf_r+0x258>)
 80064d4:	a904      	add	r1, sp, #16
 80064d6:	4630      	mov	r0, r6
 80064d8:	f000 f880 	bl	80065dc <_printf_i>
 80064dc:	e7e4      	b.n	80064a8 <_vfiprintf_r+0x208>
 80064de:	bf00      	nop
 80064e0:	08006a68 	.word	0x08006a68
 80064e4:	08006a88 	.word	0x08006a88
 80064e8:	08006a48 	.word	0x08006a48
 80064ec:	08006bad 	.word	0x08006bad
 80064f0:	08006bb7 	.word	0x08006bb7
 80064f4:	00000000 	.word	0x00000000
 80064f8:	0800627b 	.word	0x0800627b
 80064fc:	08006bb3 	.word	0x08006bb3

08006500 <_printf_common>:
 8006500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006504:	4616      	mov	r6, r2
 8006506:	4699      	mov	r9, r3
 8006508:	688a      	ldr	r2, [r1, #8]
 800650a:	690b      	ldr	r3, [r1, #16]
 800650c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006510:	4293      	cmp	r3, r2
 8006512:	bfb8      	it	lt
 8006514:	4613      	movlt	r3, r2
 8006516:	6033      	str	r3, [r6, #0]
 8006518:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800651c:	4607      	mov	r7, r0
 800651e:	460c      	mov	r4, r1
 8006520:	b10a      	cbz	r2, 8006526 <_printf_common+0x26>
 8006522:	3301      	adds	r3, #1
 8006524:	6033      	str	r3, [r6, #0]
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	0699      	lsls	r1, r3, #26
 800652a:	bf42      	ittt	mi
 800652c:	6833      	ldrmi	r3, [r6, #0]
 800652e:	3302      	addmi	r3, #2
 8006530:	6033      	strmi	r3, [r6, #0]
 8006532:	6825      	ldr	r5, [r4, #0]
 8006534:	f015 0506 	ands.w	r5, r5, #6
 8006538:	d106      	bne.n	8006548 <_printf_common+0x48>
 800653a:	f104 0a19 	add.w	sl, r4, #25
 800653e:	68e3      	ldr	r3, [r4, #12]
 8006540:	6832      	ldr	r2, [r6, #0]
 8006542:	1a9b      	subs	r3, r3, r2
 8006544:	42ab      	cmp	r3, r5
 8006546:	dc26      	bgt.n	8006596 <_printf_common+0x96>
 8006548:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800654c:	1e13      	subs	r3, r2, #0
 800654e:	6822      	ldr	r2, [r4, #0]
 8006550:	bf18      	it	ne
 8006552:	2301      	movne	r3, #1
 8006554:	0692      	lsls	r2, r2, #26
 8006556:	d42b      	bmi.n	80065b0 <_printf_common+0xb0>
 8006558:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800655c:	4649      	mov	r1, r9
 800655e:	4638      	mov	r0, r7
 8006560:	47c0      	blx	r8
 8006562:	3001      	adds	r0, #1
 8006564:	d01e      	beq.n	80065a4 <_printf_common+0xa4>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	68e5      	ldr	r5, [r4, #12]
 800656a:	6832      	ldr	r2, [r6, #0]
 800656c:	f003 0306 	and.w	r3, r3, #6
 8006570:	2b04      	cmp	r3, #4
 8006572:	bf08      	it	eq
 8006574:	1aad      	subeq	r5, r5, r2
 8006576:	68a3      	ldr	r3, [r4, #8]
 8006578:	6922      	ldr	r2, [r4, #16]
 800657a:	bf0c      	ite	eq
 800657c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006580:	2500      	movne	r5, #0
 8006582:	4293      	cmp	r3, r2
 8006584:	bfc4      	itt	gt
 8006586:	1a9b      	subgt	r3, r3, r2
 8006588:	18ed      	addgt	r5, r5, r3
 800658a:	2600      	movs	r6, #0
 800658c:	341a      	adds	r4, #26
 800658e:	42b5      	cmp	r5, r6
 8006590:	d11a      	bne.n	80065c8 <_printf_common+0xc8>
 8006592:	2000      	movs	r0, #0
 8006594:	e008      	b.n	80065a8 <_printf_common+0xa8>
 8006596:	2301      	movs	r3, #1
 8006598:	4652      	mov	r2, sl
 800659a:	4649      	mov	r1, r9
 800659c:	4638      	mov	r0, r7
 800659e:	47c0      	blx	r8
 80065a0:	3001      	adds	r0, #1
 80065a2:	d103      	bne.n	80065ac <_printf_common+0xac>
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295
 80065a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ac:	3501      	adds	r5, #1
 80065ae:	e7c6      	b.n	800653e <_printf_common+0x3e>
 80065b0:	18e1      	adds	r1, r4, r3
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	2030      	movs	r0, #48	; 0x30
 80065b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ba:	4422      	add	r2, r4
 80065bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065c4:	3302      	adds	r3, #2
 80065c6:	e7c7      	b.n	8006558 <_printf_common+0x58>
 80065c8:	2301      	movs	r3, #1
 80065ca:	4622      	mov	r2, r4
 80065cc:	4649      	mov	r1, r9
 80065ce:	4638      	mov	r0, r7
 80065d0:	47c0      	blx	r8
 80065d2:	3001      	adds	r0, #1
 80065d4:	d0e6      	beq.n	80065a4 <_printf_common+0xa4>
 80065d6:	3601      	adds	r6, #1
 80065d8:	e7d9      	b.n	800658e <_printf_common+0x8e>
	...

080065dc <_printf_i>:
 80065dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065e0:	460c      	mov	r4, r1
 80065e2:	4691      	mov	r9, r2
 80065e4:	7e27      	ldrb	r7, [r4, #24]
 80065e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065e8:	2f78      	cmp	r7, #120	; 0x78
 80065ea:	4680      	mov	r8, r0
 80065ec:	469a      	mov	sl, r3
 80065ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065f2:	d807      	bhi.n	8006604 <_printf_i+0x28>
 80065f4:	2f62      	cmp	r7, #98	; 0x62
 80065f6:	d80a      	bhi.n	800660e <_printf_i+0x32>
 80065f8:	2f00      	cmp	r7, #0
 80065fa:	f000 80d8 	beq.w	80067ae <_printf_i+0x1d2>
 80065fe:	2f58      	cmp	r7, #88	; 0x58
 8006600:	f000 80a3 	beq.w	800674a <_printf_i+0x16e>
 8006604:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006608:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800660c:	e03a      	b.n	8006684 <_printf_i+0xa8>
 800660e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006612:	2b15      	cmp	r3, #21
 8006614:	d8f6      	bhi.n	8006604 <_printf_i+0x28>
 8006616:	a001      	add	r0, pc, #4	; (adr r0, 800661c <_printf_i+0x40>)
 8006618:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800661c:	08006675 	.word	0x08006675
 8006620:	08006689 	.word	0x08006689
 8006624:	08006605 	.word	0x08006605
 8006628:	08006605 	.word	0x08006605
 800662c:	08006605 	.word	0x08006605
 8006630:	08006605 	.word	0x08006605
 8006634:	08006689 	.word	0x08006689
 8006638:	08006605 	.word	0x08006605
 800663c:	08006605 	.word	0x08006605
 8006640:	08006605 	.word	0x08006605
 8006644:	08006605 	.word	0x08006605
 8006648:	08006795 	.word	0x08006795
 800664c:	080066b9 	.word	0x080066b9
 8006650:	08006777 	.word	0x08006777
 8006654:	08006605 	.word	0x08006605
 8006658:	08006605 	.word	0x08006605
 800665c:	080067b7 	.word	0x080067b7
 8006660:	08006605 	.word	0x08006605
 8006664:	080066b9 	.word	0x080066b9
 8006668:	08006605 	.word	0x08006605
 800666c:	08006605 	.word	0x08006605
 8006670:	0800677f 	.word	0x0800677f
 8006674:	680b      	ldr	r3, [r1, #0]
 8006676:	1d1a      	adds	r2, r3, #4
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	600a      	str	r2, [r1, #0]
 800667c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006680:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006684:	2301      	movs	r3, #1
 8006686:	e0a3      	b.n	80067d0 <_printf_i+0x1f4>
 8006688:	6825      	ldr	r5, [r4, #0]
 800668a:	6808      	ldr	r0, [r1, #0]
 800668c:	062e      	lsls	r6, r5, #24
 800668e:	f100 0304 	add.w	r3, r0, #4
 8006692:	d50a      	bpl.n	80066aa <_printf_i+0xce>
 8006694:	6805      	ldr	r5, [r0, #0]
 8006696:	600b      	str	r3, [r1, #0]
 8006698:	2d00      	cmp	r5, #0
 800669a:	da03      	bge.n	80066a4 <_printf_i+0xc8>
 800669c:	232d      	movs	r3, #45	; 0x2d
 800669e:	426d      	negs	r5, r5
 80066a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066a4:	485e      	ldr	r0, [pc, #376]	; (8006820 <_printf_i+0x244>)
 80066a6:	230a      	movs	r3, #10
 80066a8:	e019      	b.n	80066de <_printf_i+0x102>
 80066aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80066ae:	6805      	ldr	r5, [r0, #0]
 80066b0:	600b      	str	r3, [r1, #0]
 80066b2:	bf18      	it	ne
 80066b4:	b22d      	sxthne	r5, r5
 80066b6:	e7ef      	b.n	8006698 <_printf_i+0xbc>
 80066b8:	680b      	ldr	r3, [r1, #0]
 80066ba:	6825      	ldr	r5, [r4, #0]
 80066bc:	1d18      	adds	r0, r3, #4
 80066be:	6008      	str	r0, [r1, #0]
 80066c0:	0628      	lsls	r0, r5, #24
 80066c2:	d501      	bpl.n	80066c8 <_printf_i+0xec>
 80066c4:	681d      	ldr	r5, [r3, #0]
 80066c6:	e002      	b.n	80066ce <_printf_i+0xf2>
 80066c8:	0669      	lsls	r1, r5, #25
 80066ca:	d5fb      	bpl.n	80066c4 <_printf_i+0xe8>
 80066cc:	881d      	ldrh	r5, [r3, #0]
 80066ce:	4854      	ldr	r0, [pc, #336]	; (8006820 <_printf_i+0x244>)
 80066d0:	2f6f      	cmp	r7, #111	; 0x6f
 80066d2:	bf0c      	ite	eq
 80066d4:	2308      	moveq	r3, #8
 80066d6:	230a      	movne	r3, #10
 80066d8:	2100      	movs	r1, #0
 80066da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066de:	6866      	ldr	r6, [r4, #4]
 80066e0:	60a6      	str	r6, [r4, #8]
 80066e2:	2e00      	cmp	r6, #0
 80066e4:	bfa2      	ittt	ge
 80066e6:	6821      	ldrge	r1, [r4, #0]
 80066e8:	f021 0104 	bicge.w	r1, r1, #4
 80066ec:	6021      	strge	r1, [r4, #0]
 80066ee:	b90d      	cbnz	r5, 80066f4 <_printf_i+0x118>
 80066f0:	2e00      	cmp	r6, #0
 80066f2:	d04d      	beq.n	8006790 <_printf_i+0x1b4>
 80066f4:	4616      	mov	r6, r2
 80066f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80066fa:	fb03 5711 	mls	r7, r3, r1, r5
 80066fe:	5dc7      	ldrb	r7, [r0, r7]
 8006700:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006704:	462f      	mov	r7, r5
 8006706:	42bb      	cmp	r3, r7
 8006708:	460d      	mov	r5, r1
 800670a:	d9f4      	bls.n	80066f6 <_printf_i+0x11a>
 800670c:	2b08      	cmp	r3, #8
 800670e:	d10b      	bne.n	8006728 <_printf_i+0x14c>
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	07df      	lsls	r7, r3, #31
 8006714:	d508      	bpl.n	8006728 <_printf_i+0x14c>
 8006716:	6923      	ldr	r3, [r4, #16]
 8006718:	6861      	ldr	r1, [r4, #4]
 800671a:	4299      	cmp	r1, r3
 800671c:	bfde      	ittt	le
 800671e:	2330      	movle	r3, #48	; 0x30
 8006720:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006724:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006728:	1b92      	subs	r2, r2, r6
 800672a:	6122      	str	r2, [r4, #16]
 800672c:	f8cd a000 	str.w	sl, [sp]
 8006730:	464b      	mov	r3, r9
 8006732:	aa03      	add	r2, sp, #12
 8006734:	4621      	mov	r1, r4
 8006736:	4640      	mov	r0, r8
 8006738:	f7ff fee2 	bl	8006500 <_printf_common>
 800673c:	3001      	adds	r0, #1
 800673e:	d14c      	bne.n	80067da <_printf_i+0x1fe>
 8006740:	f04f 30ff 	mov.w	r0, #4294967295
 8006744:	b004      	add	sp, #16
 8006746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800674a:	4835      	ldr	r0, [pc, #212]	; (8006820 <_printf_i+0x244>)
 800674c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	680e      	ldr	r6, [r1, #0]
 8006754:	061f      	lsls	r7, r3, #24
 8006756:	f856 5b04 	ldr.w	r5, [r6], #4
 800675a:	600e      	str	r6, [r1, #0]
 800675c:	d514      	bpl.n	8006788 <_printf_i+0x1ac>
 800675e:	07d9      	lsls	r1, r3, #31
 8006760:	bf44      	itt	mi
 8006762:	f043 0320 	orrmi.w	r3, r3, #32
 8006766:	6023      	strmi	r3, [r4, #0]
 8006768:	b91d      	cbnz	r5, 8006772 <_printf_i+0x196>
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	f023 0320 	bic.w	r3, r3, #32
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	2310      	movs	r3, #16
 8006774:	e7b0      	b.n	80066d8 <_printf_i+0xfc>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	f043 0320 	orr.w	r3, r3, #32
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	2378      	movs	r3, #120	; 0x78
 8006780:	4828      	ldr	r0, [pc, #160]	; (8006824 <_printf_i+0x248>)
 8006782:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006786:	e7e3      	b.n	8006750 <_printf_i+0x174>
 8006788:	065e      	lsls	r6, r3, #25
 800678a:	bf48      	it	mi
 800678c:	b2ad      	uxthmi	r5, r5
 800678e:	e7e6      	b.n	800675e <_printf_i+0x182>
 8006790:	4616      	mov	r6, r2
 8006792:	e7bb      	b.n	800670c <_printf_i+0x130>
 8006794:	680b      	ldr	r3, [r1, #0]
 8006796:	6826      	ldr	r6, [r4, #0]
 8006798:	6960      	ldr	r0, [r4, #20]
 800679a:	1d1d      	adds	r5, r3, #4
 800679c:	600d      	str	r5, [r1, #0]
 800679e:	0635      	lsls	r5, r6, #24
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	d501      	bpl.n	80067a8 <_printf_i+0x1cc>
 80067a4:	6018      	str	r0, [r3, #0]
 80067a6:	e002      	b.n	80067ae <_printf_i+0x1d2>
 80067a8:	0671      	lsls	r1, r6, #25
 80067aa:	d5fb      	bpl.n	80067a4 <_printf_i+0x1c8>
 80067ac:	8018      	strh	r0, [r3, #0]
 80067ae:	2300      	movs	r3, #0
 80067b0:	6123      	str	r3, [r4, #16]
 80067b2:	4616      	mov	r6, r2
 80067b4:	e7ba      	b.n	800672c <_printf_i+0x150>
 80067b6:	680b      	ldr	r3, [r1, #0]
 80067b8:	1d1a      	adds	r2, r3, #4
 80067ba:	600a      	str	r2, [r1, #0]
 80067bc:	681e      	ldr	r6, [r3, #0]
 80067be:	6862      	ldr	r2, [r4, #4]
 80067c0:	2100      	movs	r1, #0
 80067c2:	4630      	mov	r0, r6
 80067c4:	f7f9 fd24 	bl	8000210 <memchr>
 80067c8:	b108      	cbz	r0, 80067ce <_printf_i+0x1f2>
 80067ca:	1b80      	subs	r0, r0, r6
 80067cc:	6060      	str	r0, [r4, #4]
 80067ce:	6863      	ldr	r3, [r4, #4]
 80067d0:	6123      	str	r3, [r4, #16]
 80067d2:	2300      	movs	r3, #0
 80067d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067d8:	e7a8      	b.n	800672c <_printf_i+0x150>
 80067da:	6923      	ldr	r3, [r4, #16]
 80067dc:	4632      	mov	r2, r6
 80067de:	4649      	mov	r1, r9
 80067e0:	4640      	mov	r0, r8
 80067e2:	47d0      	blx	sl
 80067e4:	3001      	adds	r0, #1
 80067e6:	d0ab      	beq.n	8006740 <_printf_i+0x164>
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	079b      	lsls	r3, r3, #30
 80067ec:	d413      	bmi.n	8006816 <_printf_i+0x23a>
 80067ee:	68e0      	ldr	r0, [r4, #12]
 80067f0:	9b03      	ldr	r3, [sp, #12]
 80067f2:	4298      	cmp	r0, r3
 80067f4:	bfb8      	it	lt
 80067f6:	4618      	movlt	r0, r3
 80067f8:	e7a4      	b.n	8006744 <_printf_i+0x168>
 80067fa:	2301      	movs	r3, #1
 80067fc:	4632      	mov	r2, r6
 80067fe:	4649      	mov	r1, r9
 8006800:	4640      	mov	r0, r8
 8006802:	47d0      	blx	sl
 8006804:	3001      	adds	r0, #1
 8006806:	d09b      	beq.n	8006740 <_printf_i+0x164>
 8006808:	3501      	adds	r5, #1
 800680a:	68e3      	ldr	r3, [r4, #12]
 800680c:	9903      	ldr	r1, [sp, #12]
 800680e:	1a5b      	subs	r3, r3, r1
 8006810:	42ab      	cmp	r3, r5
 8006812:	dcf2      	bgt.n	80067fa <_printf_i+0x21e>
 8006814:	e7eb      	b.n	80067ee <_printf_i+0x212>
 8006816:	2500      	movs	r5, #0
 8006818:	f104 0619 	add.w	r6, r4, #25
 800681c:	e7f5      	b.n	800680a <_printf_i+0x22e>
 800681e:	bf00      	nop
 8006820:	08006bbe 	.word	0x08006bbe
 8006824:	08006bcf 	.word	0x08006bcf

08006828 <_read_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4d07      	ldr	r5, [pc, #28]	; (8006848 <_read_r+0x20>)
 800682c:	4604      	mov	r4, r0
 800682e:	4608      	mov	r0, r1
 8006830:	4611      	mov	r1, r2
 8006832:	2200      	movs	r2, #0
 8006834:	602a      	str	r2, [r5, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	f7fa faa8 	bl	8000d8c <_read>
 800683c:	1c43      	adds	r3, r0, #1
 800683e:	d102      	bne.n	8006846 <_read_r+0x1e>
 8006840:	682b      	ldr	r3, [r5, #0]
 8006842:	b103      	cbz	r3, 8006846 <_read_r+0x1e>
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	bd38      	pop	{r3, r4, r5, pc}
 8006848:	20004488 	.word	0x20004488

0800684c <_fstat_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	4d07      	ldr	r5, [pc, #28]	; (800686c <_fstat_r+0x20>)
 8006850:	2300      	movs	r3, #0
 8006852:	4604      	mov	r4, r0
 8006854:	4608      	mov	r0, r1
 8006856:	4611      	mov	r1, r2
 8006858:	602b      	str	r3, [r5, #0]
 800685a:	f7fa fadc 	bl	8000e16 <_fstat>
 800685e:	1c43      	adds	r3, r0, #1
 8006860:	d102      	bne.n	8006868 <_fstat_r+0x1c>
 8006862:	682b      	ldr	r3, [r5, #0]
 8006864:	b103      	cbz	r3, 8006868 <_fstat_r+0x1c>
 8006866:	6023      	str	r3, [r4, #0]
 8006868:	bd38      	pop	{r3, r4, r5, pc}
 800686a:	bf00      	nop
 800686c:	20004488 	.word	0x20004488

08006870 <_isatty_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	4d06      	ldr	r5, [pc, #24]	; (800688c <_isatty_r+0x1c>)
 8006874:	2300      	movs	r3, #0
 8006876:	4604      	mov	r4, r0
 8006878:	4608      	mov	r0, r1
 800687a:	602b      	str	r3, [r5, #0]
 800687c:	f7fa fadb 	bl	8000e36 <_isatty>
 8006880:	1c43      	adds	r3, r0, #1
 8006882:	d102      	bne.n	800688a <_isatty_r+0x1a>
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	b103      	cbz	r3, 800688a <_isatty_r+0x1a>
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	bd38      	pop	{r3, r4, r5, pc}
 800688c:	20004488 	.word	0x20004488

08006890 <_init>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	bf00      	nop
 8006894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006896:	bc08      	pop	{r3}
 8006898:	469e      	mov	lr, r3
 800689a:	4770      	bx	lr

0800689c <_fini>:
 800689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689e:	bf00      	nop
 80068a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a2:	bc08      	pop	{r3}
 80068a4:	469e      	mov	lr, r3
 80068a6:	4770      	bx	lr
