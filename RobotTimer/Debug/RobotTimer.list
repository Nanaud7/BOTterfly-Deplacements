
RobotTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dce4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e8  0800deb8  0800deb8  0001deb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7a0  0800e7a0  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800e7a0  0800e7a0  0001e7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7a8  0800e7a8  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7a8  0800e7a8  0001e7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7ac  0800e7ac  0001e7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800e7b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  20000218  0800e9c8  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  0800e9c8  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c28a  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b07  00000000  00000000  0003c4d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0003ffe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  00041138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267aa  00000000  00000000  000420f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e8f  00000000  00000000  000688a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e04f6  00000000  00000000  00080731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00160c27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ef0  00000000  00000000  00160c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800de9c 	.word	0x0800de9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	0800de9c 	.word	0x0800de9c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a4 	b.w	8001048 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468c      	mov	ip, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8083 	bne.w	8000e9a <__udivmoddi4+0x116>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d947      	bls.n	8000e2a <__udivmoddi4+0xa6>
 8000d9a:	fab2 f282 	clz	r2, r2
 8000d9e:	b142      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	f1c2 0020 	rsb	r0, r2, #32
 8000da4:	fa24 f000 	lsr.w	r0, r4, r0
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4097      	lsls	r7, r2
 8000dac:	ea40 0c01 	orr.w	ip, r0, r1
 8000db0:	4094      	lsls	r4, r2
 8000db2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db6:	0c23      	lsrs	r3, r4, #16
 8000db8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dbc:	fa1f fe87 	uxth.w	lr, r7
 8000dc0:	fb08 c116 	mls	r1, r8, r6, ip
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x60>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dd6:	f080 8119 	bcs.w	800100c <__udivmoddi4+0x288>
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	f240 8116 	bls.w	800100c <__udivmoddi4+0x288>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	443b      	add	r3, r7
 8000de4:	1a5b      	subs	r3, r3, r1
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dec:	fb08 3310 	mls	r3, r8, r0, r3
 8000df0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d909      	bls.n	8000e10 <__udivmoddi4+0x8c>
 8000dfc:	193c      	adds	r4, r7, r4
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	f080 8105 	bcs.w	8001010 <__udivmoddi4+0x28c>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f240 8102 	bls.w	8001010 <__udivmoddi4+0x28c>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	443c      	add	r4, r7
 8000e10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e14:	eba4 040e 	sub.w	r4, r4, lr
 8000e18:	2600      	movs	r6, #0
 8000e1a:	b11d      	cbz	r5, 8000e24 <__udivmoddi4+0xa0>
 8000e1c:	40d4      	lsrs	r4, r2
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e9c5 4300 	strd	r4, r3, [r5]
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	b902      	cbnz	r2, 8000e2e <__udivmoddi4+0xaa>
 8000e2c:	deff      	udf	#255	; 0xff
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d150      	bne.n	8000ed8 <__udivmoddi4+0x154>
 8000e36:	1bcb      	subs	r3, r1, r7
 8000e38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3c:	fa1f f887 	uxth.w	r8, r7
 8000e40:	2601      	movs	r6, #1
 8000e42:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e46:	0c21      	lsrs	r1, r4, #16
 8000e48:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e50:	fb08 f30c 	mul.w	r3, r8, ip
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0xe4>
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0xe2>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	f200 80e9 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e66:	4684      	mov	ip, r0
 8000e68:	1ac9      	subs	r1, r1, r3
 8000e6a:	b2a3      	uxth	r3, r4
 8000e6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e74:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e78:	fb08 f800 	mul.w	r8, r8, r0
 8000e7c:	45a0      	cmp	r8, r4
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0x10c>
 8000e80:	193c      	adds	r4, r7, r4
 8000e82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x10a>
 8000e88:	45a0      	cmp	r8, r4
 8000e8a:	f200 80d9 	bhi.w	8001040 <__udivmoddi4+0x2bc>
 8000e8e:	4618      	mov	r0, r3
 8000e90:	eba4 0408 	sub.w	r4, r4, r8
 8000e94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e98:	e7bf      	b.n	8000e1a <__udivmoddi4+0x96>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d909      	bls.n	8000eb2 <__udivmoddi4+0x12e>
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	f000 80b1 	beq.w	8001006 <__udivmoddi4+0x282>
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eaa:	4630      	mov	r0, r6
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	fab3 f683 	clz	r6, r3
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	d14a      	bne.n	8000f50 <__udivmoddi4+0x1cc>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d302      	bcc.n	8000ec4 <__udivmoddi4+0x140>
 8000ebe:	4282      	cmp	r2, r0
 8000ec0:	f200 80b8 	bhi.w	8001034 <__udivmoddi4+0x2b0>
 8000ec4:	1a84      	subs	r4, r0, r2
 8000ec6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eca:	2001      	movs	r0, #1
 8000ecc:	468c      	mov	ip, r1
 8000ece:	2d00      	cmp	r5, #0
 8000ed0:	d0a8      	beq.n	8000e24 <__udivmoddi4+0xa0>
 8000ed2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ed6:	e7a5      	b.n	8000e24 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ee0:	4097      	lsls	r7, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eea:	40d9      	lsrs	r1, r3
 8000eec:	4330      	orrs	r0, r6
 8000eee:	0c03      	lsrs	r3, r0, #16
 8000ef0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ef4:	fa1f f887 	uxth.w	r8, r7
 8000ef8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000efc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f00:	fb06 f108 	mul.w	r1, r6, r8
 8000f04:	4299      	cmp	r1, r3
 8000f06:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0a:	d909      	bls.n	8000f20 <__udivmoddi4+0x19c>
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f12:	f080 808d 	bcs.w	8001030 <__udivmoddi4+0x2ac>
 8000f16:	4299      	cmp	r1, r3
 8000f18:	f240 808a 	bls.w	8001030 <__udivmoddi4+0x2ac>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	443b      	add	r3, r7
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b281      	uxth	r1, r0
 8000f24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f30:	fb00 f308 	mul.w	r3, r0, r8
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d907      	bls.n	8000f48 <__udivmoddi4+0x1c4>
 8000f38:	1879      	adds	r1, r7, r1
 8000f3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3e:	d273      	bcs.n	8001028 <__udivmoddi4+0x2a4>
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d971      	bls.n	8001028 <__udivmoddi4+0x2a4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4439      	add	r1, r7
 8000f48:	1acb      	subs	r3, r1, r3
 8000f4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f4e:	e778      	b.n	8000e42 <__udivmoddi4+0xbe>
 8000f50:	f1c6 0c20 	rsb	ip, r6, #32
 8000f54:	fa03 f406 	lsl.w	r4, r3, r6
 8000f58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f5c:	431c      	orrs	r4, r3
 8000f5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f62:	fa01 f306 	lsl.w	r3, r1, r6
 8000f66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f6e:	431f      	orrs	r7, r3
 8000f70:	0c3b      	lsrs	r3, r7, #16
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fa1f f884 	uxth.w	r8, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f82:	fb09 fa08 	mul.w	sl, r9, r8
 8000f86:	458a      	cmp	sl, r1
 8000f88:	fa02 f206 	lsl.w	r2, r2, r6
 8000f8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x220>
 8000f92:	1861      	adds	r1, r4, r1
 8000f94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f98:	d248      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000f9a:	458a      	cmp	sl, r1
 8000f9c:	d946      	bls.n	800102c <__udivmoddi4+0x2a8>
 8000f9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000fa2:	4421      	add	r1, r4
 8000fa4:	eba1 010a 	sub.w	r1, r1, sl
 8000fa8:	b2bf      	uxth	r7, r7
 8000faa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fb2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fb6:	fb00 f808 	mul.w	r8, r0, r8
 8000fba:	45b8      	cmp	r8, r7
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x24a>
 8000fbe:	19e7      	adds	r7, r4, r7
 8000fc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fc4:	d22e      	bcs.n	8001024 <__udivmoddi4+0x2a0>
 8000fc6:	45b8      	cmp	r8, r7
 8000fc8:	d92c      	bls.n	8001024 <__udivmoddi4+0x2a0>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	4427      	add	r7, r4
 8000fce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fd2:	eba7 0708 	sub.w	r7, r7, r8
 8000fd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fda:	454f      	cmp	r7, r9
 8000fdc:	46c6      	mov	lr, r8
 8000fde:	4649      	mov	r1, r9
 8000fe0:	d31a      	bcc.n	8001018 <__udivmoddi4+0x294>
 8000fe2:	d017      	beq.n	8001014 <__udivmoddi4+0x290>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x27a>
 8000fe6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fea:	eb67 0701 	sbc.w	r7, r7, r1
 8000fee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ff2:	40f2      	lsrs	r2, r6
 8000ff4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ff8:	40f7      	lsrs	r7, r6
 8000ffa:	e9c5 2700 	strd	r2, r7, [r5]
 8000ffe:	2600      	movs	r6, #0
 8001000:	4631      	mov	r1, r6
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e70b      	b.n	8000e24 <__udivmoddi4+0xa0>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e9      	b.n	8000de4 <__udivmoddi4+0x60>
 8001010:	4618      	mov	r0, r3
 8001012:	e6fd      	b.n	8000e10 <__udivmoddi4+0x8c>
 8001014:	4543      	cmp	r3, r8
 8001016:	d2e5      	bcs.n	8000fe4 <__udivmoddi4+0x260>
 8001018:	ebb8 0e02 	subs.w	lr, r8, r2
 800101c:	eb69 0104 	sbc.w	r1, r9, r4
 8001020:	3801      	subs	r0, #1
 8001022:	e7df      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001024:	4608      	mov	r0, r1
 8001026:	e7d2      	b.n	8000fce <__udivmoddi4+0x24a>
 8001028:	4660      	mov	r0, ip
 800102a:	e78d      	b.n	8000f48 <__udivmoddi4+0x1c4>
 800102c:	4681      	mov	r9, r0
 800102e:	e7b9      	b.n	8000fa4 <__udivmoddi4+0x220>
 8001030:	4666      	mov	r6, ip
 8001032:	e775      	b.n	8000f20 <__udivmoddi4+0x19c>
 8001034:	4630      	mov	r0, r6
 8001036:	e74a      	b.n	8000ece <__udivmoddi4+0x14a>
 8001038:	f1ac 0c02 	sub.w	ip, ip, #2
 800103c:	4439      	add	r1, r7
 800103e:	e713      	b.n	8000e68 <__udivmoddi4+0xe4>
 8001040:	3802      	subs	r0, #2
 8001042:	443c      	add	r4, r7
 8001044:	e724      	b.n	8000e90 <__udivmoddi4+0x10c>
 8001046:	bf00      	nop

08001048 <__aeabi_idiv0>:
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <setTargetX>:

/**
 * setTargetX
 * @param x x coordinate
 */
void setTargetX(double x){
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	ed87 0b00 	vstr	d0, [r7]
	targetX = x;
 8001056:	4907      	ldr	r1, [pc, #28]	; (8001074 <setTargetX+0x28>)
 8001058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800105c:	e9c1 2300 	strd	r2, r3, [r1]
	printf("setTargetX done with %lf\r\n",targetX);
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <setTargetX+0x28>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	4804      	ldr	r0, [pc, #16]	; (8001078 <setTargetX+0x2c>)
 8001068:	f006 ff92 	bl	8007f90 <iprintf>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000238 	.word	0x20000238
 8001078:	0800deb8 	.word	0x0800deb8

0800107c <setTargetY>:

/**
 * setTargetY
 * @param y y coordinate
 */
void setTargetY(double y){
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	ed87 0b00 	vstr	d0, [r7]
	targetY = y;
 8001086:	4907      	ldr	r1, [pc, #28]	; (80010a4 <setTargetY+0x28>)
 8001088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800108c:	e9c1 2300 	strd	r2, r3, [r1]
	printf("setTargetY done with %lf\r\n",targetY);
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <setTargetY+0x28>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	4804      	ldr	r0, [pc, #16]	; (80010a8 <setTargetY+0x2c>)
 8001098:	f006 ff7a 	bl	8007f90 <iprintf>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000240 	.word	0x20000240
 80010a8:	0800ded4 	.word	0x0800ded4

080010ac <isArrived>:

/**
 * isArrived
 * @return 1 if BOTterfly arrived to its target
 */
uint8_t isArrived(){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	if(targetX == 0 && targetY == 0){
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <isArrived+0x40>)
 80010b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	f7ff fd33 	bl	8000b28 <__aeabi_dcmpeq>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00d      	beq.n	80010e4 <isArrived+0x38>
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <isArrived+0x44>)
 80010ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	f7ff fd27 	bl	8000b28 <__aeabi_dcmpeq>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <isArrived+0x38>
		return 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e000      	b.n	80010e6 <isArrived+0x3a>
	} else{
		return 0;
 80010e4:	2300      	movs	r3, #0
	}
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000238 	.word	0x20000238
 80010f0:	20000240 	.word	0x20000240

080010f4 <toZeroOne>:
/**
 * toZeroOne
 * @param x Value needs to be scaled between 0 and 1
 * @return x Corrected value
 */
double toZeroOne(double x) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	ed87 0b00 	vstr	d0, [r7]
	if (x < 0) return 0;
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	e9d7 0100 	ldrd	r0, r1, [r7]
 800110a:	f7ff fd17 	bl	8000b3c <__aeabi_dcmplt>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d004      	beq.n	800111e <toZeroOne+0x2a>
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	e00f      	b.n	800113e <toZeroOne+0x4a>
	if (x > 1) return 1;
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <toZeroOne+0x5c>)
 8001124:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001128:	f7ff fd26 	bl	8000b78 <__aeabi_dcmpgt>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <toZeroOne+0x46>
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <toZeroOne+0x5c>)
 8001138:	e001      	b.n	800113e <toZeroOne+0x4a>
	return x;
 800113a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800113e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001142:	eeb0 0a47 	vmov.f32	s0, s14
 8001146:	eef0 0a67 	vmov.f32	s1, s15
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	3ff00000 	.word	0x3ff00000
 8001154:	00000000 	.word	0x00000000

08001158 <toZeroTwoPi>:
/**
 * toZeroTwoPi
 * @param angle Angle needs to be scaled between 0 and 2*Pi
 * @return Corrected angle
 */
double toZeroTwoPi(double angle) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	ed87 0b00 	vstr	d0, [r7]
	return fmod(fmod(angle, M_TWOPI) + M_TWOPI, M_TWOPI);
 8001162:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80011b0 <toZeroTwoPi+0x58>
 8001166:	ed97 0b00 	vldr	d0, [r7]
 800116a:	f00a fd53 	bl	800bc14 <fmod>
 800116e:	ec51 0b10 	vmov	r0, r1, d0
 8001172:	a30f      	add	r3, pc, #60	; (adr r3, 80011b0 <toZeroTwoPi+0x58>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	f7ff f8b8 	bl	80002ec <__adddf3>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	ec43 2b17 	vmov	d7, r2, r3
 8001184:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 80011b0 <toZeroTwoPi+0x58>
 8001188:	eeb0 0a47 	vmov.f32	s0, s14
 800118c:	eef0 0a67 	vmov.f32	s1, s15
 8001190:	f00a fd40 	bl	800bc14 <fmod>
 8001194:	eeb0 7a40 	vmov.f32	s14, s0
 8001198:	eef0 7a60 	vmov.f32	s15, s1
}
 800119c:	eeb0 0a47 	vmov.f32	s0, s14
 80011a0:	eef0 0a67 	vmov.f32	s1, s15
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	f3af 8000 	nop.w
 80011b0:	54442d18 	.word	0x54442d18
 80011b4:	401921fb 	.word	0x401921fb

080011b8 <speedCurve>:
 * speedCurve
 * @param x value scaled between 0 and 1
 * @param a curve coefficient, increase this value to up the acceleration
 * @return speed calculated
 */
double speedCurve(double x, double a){
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	ed87 0b02 	vstr	d0, [r7, #8]
 80011c2:	ed87 1b00 	vstr	d1, [r7]
	double speed = atan(-x*(x-1)*a) / atan(0.25*a);
 80011c6:	68bc      	ldr	r4, [r7, #8]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <speedCurve+0xa4>)
 80011d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011d8:	f7ff f886 	bl	80002e8 <__aeabi_dsub>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4620      	mov	r0, r4
 80011e2:	4629      	mov	r1, r5
 80011e4:	f7ff fa38 	bl	8000658 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011f4:	f7ff fa30 	bl	8000658 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	ec43 2b17 	vmov	d7, r2, r3
 8001200:	eeb0 0a47 	vmov.f32	s0, s14
 8001204:	eef0 0a67 	vmov.f32	s1, s15
 8001208:	f00a fab2 	bl	800b770 <atan>
 800120c:	ec55 4b10 	vmov	r4, r5, d0
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <speedCurve+0xa8>)
 8001216:	e9d7 0100 	ldrd	r0, r1, [r7]
 800121a:	f7ff fa1d 	bl	8000658 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	ec43 2b17 	vmov	d7, r2, r3
 8001226:	eeb0 0a47 	vmov.f32	s0, s14
 800122a:	eef0 0a67 	vmov.f32	s1, s15
 800122e:	f00a fa9f 	bl	800b770 <atan>
 8001232:	ec53 2b10 	vmov	r2, r3, d0
 8001236:	4620      	mov	r0, r4
 8001238:	4629      	mov	r1, r5
 800123a:	f7ff fb37 	bl	80008ac <__aeabi_ddiv>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return speed;
 8001246:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800124a:	ec43 2b17 	vmov	d7, r2, r3
}
 800124e:	eeb0 0a47 	vmov.f32	s0, s14
 8001252:	eef0 0a67 	vmov.f32	s1, s15
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bdb0      	pop	{r4, r5, r7, pc}
 800125c:	3ff00000 	.word	0x3ff00000
 8001260:	3fd00000 	.word	0x3fd00000
 8001264:	00000000 	.word	0x00000000

08001268 <Pos_ControlLoop_2steps>:


/**
 * Pos_ControlLoop_2steps
 */
void Pos_ControlLoop_2steps(){
 8001268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800126c:	ed2d 8b02 	vpush	{d8}
 8001270:	b094      	sub	sp, #80	; 0x50
 8001272:	af00      	add	r7, sp, #0
	static double spin_previous = 0;

	/* ODOMETRY ------------------------*/
	int16_t ticksLeft = ENC_GetCnt(&CodeurGauche);
 8001274:	48ba      	ldr	r0, [pc, #744]	; (8001560 <Pos_ControlLoop_2steps+0x2f8>)
 8001276:	f000 fe92 	bl	8001f9e <ENC_GetCnt>
 800127a:	4603      	mov	r3, r0
 800127c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t ticksRight = ENC_GetCnt(&CodeurDroite);
 8001280:	48b8      	ldr	r0, [pc, #736]	; (8001564 <Pos_ControlLoop_2steps+0x2fc>)
 8001282:	f000 fe8c 	bl	8001f9e <ENC_GetCnt>
 8001286:	4603      	mov	r3, r0
 8001288:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	Odo_Odometry(ticksLeft, ticksRight);
 800128c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001290:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f001 f81e 	bl	80022d8 <Odo_Odometry>

	/* ROTATION ------------------------*/
	double angleToTarget = atan2(targetY - Odo_GetY(), targetX - Odo_GetX());
 800129c:	4bb2      	ldr	r3, [pc, #712]	; (8001568 <Pos_ControlLoop_2steps+0x300>)
 800129e:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80012a2:	f000 fff3 	bl	800228c <Odo_GetY>
 80012a6:	ec53 2b10 	vmov	r2, r3, d0
 80012aa:	4650      	mov	r0, sl
 80012ac:	4659      	mov	r1, fp
 80012ae:	f7ff f81b 	bl	80002e8 <__aeabi_dsub>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	ec43 2b18 	vmov	d8, r2, r3
 80012ba:	4bac      	ldr	r3, [pc, #688]	; (800156c <Pos_ControlLoop_2steps+0x304>)
 80012bc:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80012c0:	f000 ffd2 	bl	8002268 <Odo_GetX>
 80012c4:	ec53 2b10 	vmov	r2, r3, d0
 80012c8:	4650      	mov	r0, sl
 80012ca:	4659      	mov	r1, fp
 80012cc:	f7ff f80c 	bl	80002e8 <__aeabi_dsub>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	ec43 2b17 	vmov	d7, r2, r3
 80012d8:	eeb0 1a47 	vmov.f32	s2, s14
 80012dc:	eef0 1a67 	vmov.f32	s3, s15
 80012e0:	eeb0 0a48 	vmov.f32	s0, s16
 80012e4:	eef0 0a68 	vmov.f32	s1, s17
 80012e8:	f00a fc92 	bl	800bc10 <atan2>
 80012ec:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	// Rotation direction
	double angleRelative = toZeroTwoPi(angleToTarget) - toZeroTwoPi(Odo_GetO());
 80012f0:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80012f4:	f7ff ff30 	bl	8001158 <toZeroTwoPi>
 80012f8:	ec5b ab10 	vmov	sl, fp, d0
 80012fc:	f000 ffd8 	bl	80022b0 <Odo_GetO>
 8001300:	eeb0 7a40 	vmov.f32	s14, s0
 8001304:	eef0 7a60 	vmov.f32	s15, s1
 8001308:	eeb0 0a47 	vmov.f32	s0, s14
 800130c:	eef0 0a67 	vmov.f32	s1, s15
 8001310:	f7ff ff22 	bl	8001158 <toZeroTwoPi>
 8001314:	ec53 2b10 	vmov	r2, r3, d0
 8001318:	4650      	mov	r0, sl
 800131a:	4659      	mov	r1, fp
 800131c:	f7fe ffe4 	bl	80002e8 <__aeabi_dsub>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if(angleRelative > M_PI) angleRelative = angleRelative - M_TWOPI;
 8001328:	a385      	add	r3, pc, #532	; (adr r3, 8001540 <Pos_ControlLoop_2steps+0x2d8>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001332:	f7ff fc21 	bl	8000b78 <__aeabi_dcmpgt>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00b      	beq.n	8001354 <Pos_ControlLoop_2steps+0xec>
 800133c:	a382      	add	r3, pc, #520	; (adr r3, 8001548 <Pos_ControlLoop_2steps+0x2e0>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001346:	f7fe ffcf 	bl	80002e8 <__aeabi_dsub>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001352:	e014      	b.n	800137e <Pos_ControlLoop_2steps+0x116>
	else if(angleRelative < (-M_PI)) angleRelative = angleRelative + M_TWOPI;
 8001354:	a37e      	add	r3, pc, #504	; (adr r3, 8001550 <Pos_ControlLoop_2steps+0x2e8>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800135e:	f7ff fbed 	bl	8000b3c <__aeabi_dcmplt>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00a      	beq.n	800137e <Pos_ControlLoop_2steps+0x116>
 8001368:	a377      	add	r3, pc, #476	; (adr r3, 8001548 <Pos_ControlLoop_2steps+0x2e0>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001372:	f7fe ffbb 	bl	80002ec <__adddf3>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if (angleRelativeInitial == 0) angleRelativeInitial = angleRelative;
 800137e:	4b7c      	ldr	r3, [pc, #496]	; (8001570 <Pos_ControlLoop_2steps+0x308>)
 8001380:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	f7ff fbcc 	bl	8000b28 <__aeabi_dcmpeq>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d004      	beq.n	80013a0 <Pos_ControlLoop_2steps+0x138>
 8001396:	4976      	ldr	r1, [pc, #472]	; (8001570 <Pos_ControlLoop_2steps+0x308>)
 8001398:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800139c:	e9c1 2300 	strd	r2, r3, [r1]
	// Progression
	double rotationProgress = 1 - (fabs(angleRelative) / fabs(angleRelativeInitial));
 80013a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	4b70      	ldr	r3, [pc, #448]	; (8001570 <Pos_ControlLoop_2steps+0x308>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	4690      	mov	r8, r2
 80013b4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80013b8:	4642      	mov	r2, r8
 80013ba:	464b      	mov	r3, r9
 80013bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013c0:	f7ff fa74 	bl	80008ac <__aeabi_ddiv>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	f04f 0000 	mov.w	r0, #0
 80013cc:	4969      	ldr	r1, [pc, #420]	; (8001574 <Pos_ControlLoop_2steps+0x30c>)
 80013ce:	f7fe ff8b 	bl	80002e8 <__aeabi_dsub>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	rotationProgress = toZeroOne(rotationProgress);
 80013da:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80013de:	f7ff fe89 	bl	80010f4 <toZeroOne>
 80013e2:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

	/* MOVE ----------------------------*/
	double distanceToTarget = sqrt(pow(targetX - Odo_GetX(),2) + pow(targetY - Odo_GetY(),2));
 80013e6:	4b61      	ldr	r3, [pc, #388]	; (800156c <Pos_ControlLoop_2steps+0x304>)
 80013e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80013ec:	f000 ff3c 	bl	8002268 <Odo_GetX>
 80013f0:	ec53 2b10 	vmov	r2, r3, d0
 80013f4:	4640      	mov	r0, r8
 80013f6:	4649      	mov	r1, r9
 80013f8:	f7fe ff76 	bl	80002e8 <__aeabi_dsub>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	ec43 2b17 	vmov	d7, r2, r3
 8001404:	ed9f 1b54 	vldr	d1, [pc, #336]	; 8001558 <Pos_ControlLoop_2steps+0x2f0>
 8001408:	eeb0 0a47 	vmov.f32	s0, s14
 800140c:	eef0 0a67 	vmov.f32	s1, s15
 8001410:	f00a fc3c 	bl	800bc8c <pow>
 8001414:	ec5b ab10 	vmov	sl, fp, d0
 8001418:	4b53      	ldr	r3, [pc, #332]	; (8001568 <Pos_ControlLoop_2steps+0x300>)
 800141a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800141e:	f000 ff35 	bl	800228c <Odo_GetY>
 8001422:	ec53 2b10 	vmov	r2, r3, d0
 8001426:	4640      	mov	r0, r8
 8001428:	4649      	mov	r1, r9
 800142a:	f7fe ff5d 	bl	80002e8 <__aeabi_dsub>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	ec43 2b17 	vmov	d7, r2, r3
 8001436:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8001558 <Pos_ControlLoop_2steps+0x2f0>
 800143a:	eeb0 0a47 	vmov.f32	s0, s14
 800143e:	eef0 0a67 	vmov.f32	s1, s15
 8001442:	f00a fc23 	bl	800bc8c <pow>
 8001446:	ec53 2b10 	vmov	r2, r3, d0
 800144a:	4650      	mov	r0, sl
 800144c:	4659      	mov	r1, fp
 800144e:	f7fe ff4d 	bl	80002ec <__adddf3>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	ec43 2b17 	vmov	d7, r2, r3
 800145a:	eeb0 0a47 	vmov.f32	s0, s14
 800145e:	eef0 0a67 	vmov.f32	s1, s15
 8001462:	f00a fcc1 	bl	800bde8 <sqrt>
 8001466:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	if (distanceToTargetInitial == 0) distanceToTargetInitial = distanceToTarget;
 800146a:	4b43      	ldr	r3, [pc, #268]	; (8001578 <Pos_ControlLoop_2steps+0x310>)
 800146c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	f7ff fb56 	bl	8000b28 <__aeabi_dcmpeq>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d004      	beq.n	800148c <Pos_ControlLoop_2steps+0x224>
 8001482:	493d      	ldr	r1, [pc, #244]	; (8001578 <Pos_ControlLoop_2steps+0x310>)
 8001484:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001488:	e9c1 2300 	strd	r2, r3, [r1]
	// Progression
	double moveProgress = 1 - toZeroOne(distanceToTarget / distanceToTargetInitial);
 800148c:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <Pos_ControlLoop_2steps+0x310>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001496:	f7ff fa09 	bl	80008ac <__aeabi_ddiv>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	ec43 2b17 	vmov	d7, r2, r3
 80014a2:	eeb0 0a47 	vmov.f32	s0, s14
 80014a6:	eef0 0a67 	vmov.f32	s1, s15
 80014aa:	f7ff fe23 	bl	80010f4 <toZeroOne>
 80014ae:	ec53 2b10 	vmov	r2, r3, d0
 80014b2:	f04f 0000 	mov.w	r0, #0
 80014b6:	492f      	ldr	r1, [pc, #188]	; (8001574 <Pos_ControlLoop_2steps+0x30c>)
 80014b8:	f7fe ff16 	bl	80002e8 <__aeabi_dsub>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	e9c7 2308 	strd	r2, r3, [r7, #32]

	// Tests
	tckG += ticksLeft;
 80014c4:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80014c8:	4b2c      	ldr	r3, [pc, #176]	; (800157c <Pos_ControlLoop_2steps+0x314>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4413      	add	r3, r2
 80014ce:	4a2b      	ldr	r2, [pc, #172]	; (800157c <Pos_ControlLoop_2steps+0x314>)
 80014d0:	6013      	str	r3, [r2, #0]
	tckD += ticksRight;
 80014d2:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 80014d6:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <Pos_ControlLoop_2steps+0x318>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a28      	ldr	r2, [pc, #160]	; (8001580 <Pos_ControlLoop_2steps+0x318>)
 80014de:	6013      	str	r3, [r2, #0]

	/* STATE MACHINE -------------------*/
	switch(state){
 80014e0:	4b28      	ldr	r3, [pc, #160]	; (8001584 <Pos_ControlLoop_2steps+0x31c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	f000 80e9 	beq.w	80016bc <Pos_ControlLoop_2steps+0x454>
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	f300 8204 	bgt.w	80018f8 <Pos_ControlLoop_2steps+0x690>
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <Pos_ControlLoop_2steps+0x292>
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d04d      	beq.n	8001594 <Pos_ControlLoop_2steps+0x32c>
 80014f8:	e1fe      	b.n	80018f8 <Pos_ControlLoop_2steps+0x690>

	case STAND_BY:
		MOT_SetDutyCycle(&MoteurGauche, 0);
 80014fa:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001588 <Pos_ControlLoop_2steps+0x320>
 80014fe:	4823      	ldr	r0, [pc, #140]	; (800158c <Pos_ControlLoop_2steps+0x324>)
 8001500:	f000 fe14 	bl	800212c <MOT_SetDutyCycle>
		MOT_SetDutyCycle(&MoteurDroite, 0);
 8001504:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001588 <Pos_ControlLoop_2steps+0x320>
 8001508:	4821      	ldr	r0, [pc, #132]	; (8001590 <Pos_ControlLoop_2steps+0x328>)
 800150a:	f000 fe0f 	bl	800212c <MOT_SetDutyCycle>

		distanceToTargetInitial = 0;
 800150e:	491a      	ldr	r1, [pc, #104]	; (8001578 <Pos_ControlLoop_2steps+0x310>)
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9c1 2300 	strd	r2, r3, [r1]
		angleRelativeInitial = 0;
 800151c:	4914      	ldr	r1, [pc, #80]	; (8001570 <Pos_ControlLoop_2steps+0x308>)
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	e9c1 2300 	strd	r2, r3, [r1]

		if (!isArrived()) {
 800152a:	f7ff fdbf 	bl	80010ac <isArrived>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	f040 81e5 	bne.w	8001900 <Pos_ControlLoop_2steps+0x698>
			state = ROTATION;
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <Pos_ControlLoop_2steps+0x31c>)
 8001538:	2201      	movs	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800153c:	e1e0      	b.n	8001900 <Pos_ControlLoop_2steps+0x698>
 800153e:	bf00      	nop
 8001540:	54442d18 	.word	0x54442d18
 8001544:	400921fb 	.word	0x400921fb
 8001548:	54442d18 	.word	0x54442d18
 800154c:	401921fb 	.word	0x401921fb
 8001550:	54442d18 	.word	0x54442d18
 8001554:	c00921fb 	.word	0xc00921fb
 8001558:	00000000 	.word	0x00000000
 800155c:	40000000 	.word	0x40000000
 8001560:	2000040c 	.word	0x2000040c
 8001564:	200003f8 	.word	0x200003f8
 8001568:	20000240 	.word	0x20000240
 800156c:	20000238 	.word	0x20000238
 8001570:	20000250 	.word	0x20000250
 8001574:	3ff00000 	.word	0x3ff00000
 8001578:	20000248 	.word	0x20000248
 800157c:	20000258 	.word	0x20000258
 8001580:	2000025c 	.word	0x2000025c
 8001584:	20000234 	.word	0x20000234
 8001588:	00000000 	.word	0x00000000
 800158c:	20000388 	.word	0x20000388
 8001590:	200003c0 	.word	0x200003c0

	case ROTATION:
		printf("rotationProgress = %lf\r\n", rotationProgress);
 8001594:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001598:	48bf      	ldr	r0, [pc, #764]	; (8001898 <Pos_ControlLoop_2steps+0x630>)
 800159a:	f006 fcf9 	bl	8007f90 <iprintf>

		// Choix du sens de rotation
		if (angleRelative < M_PI && angleRelative > 0){
 800159e:	a3b0      	add	r3, pc, #704	; (adr r3, 8001860 <Pos_ControlLoop_2steps+0x5f8>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80015a8:	f7ff fac8 	bl	8000b3c <__aeabi_dcmplt>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d013      	beq.n	80015da <Pos_ControlLoop_2steps+0x372>
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80015be:	f7ff fadb 	bl	8000b78 <__aeabi_dcmpgt>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <Pos_ControlLoop_2steps+0x372>
			MOT_SetDirection(&MoteurGauche, MOT_FUNCTIONS_REVERSE);
 80015c8:	2102      	movs	r1, #2
 80015ca:	48b4      	ldr	r0, [pc, #720]	; (800189c <Pos_ControlLoop_2steps+0x634>)
 80015cc:	f000 fd55 	bl	800207a <MOT_SetDirection>
			MOT_SetDirection(&MoteurDroite, MOT_FUNCTIONS_FORWARD);
 80015d0:	2101      	movs	r1, #1
 80015d2:	48b3      	ldr	r0, [pc, #716]	; (80018a0 <Pos_ControlLoop_2steps+0x638>)
 80015d4:	f000 fd51 	bl	800207a <MOT_SetDirection>
 80015d8:	e007      	b.n	80015ea <Pos_ControlLoop_2steps+0x382>
		} else {
			MOT_SetDirection(&MoteurGauche, MOT_FUNCTIONS_FORWARD);
 80015da:	2101      	movs	r1, #1
 80015dc:	48af      	ldr	r0, [pc, #700]	; (800189c <Pos_ControlLoop_2steps+0x634>)
 80015de:	f000 fd4c 	bl	800207a <MOT_SetDirection>
			MOT_SetDirection(&MoteurDroite, MOT_FUNCTIONS_REVERSE);
 80015e2:	2102      	movs	r1, #2
 80015e4:	48ae      	ldr	r0, [pc, #696]	; (80018a0 <Pos_ControlLoop_2steps+0x638>)
 80015e6:	f000 fd48 	bl	800207a <MOT_SetDirection>
		}

		// Contrôle de la vitesse
		double spin = POS_ROT_SMAX * speedCurve(rotationProgress, 1);
 80015ea:	ed9f 1b9f 	vldr	d1, [pc, #636]	; 8001868 <Pos_ControlLoop_2steps+0x600>
 80015ee:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80015f2:	f7ff fde1 	bl	80011b8 <speedCurve>
 80015f6:	ec51 0b10 	vmov	r0, r1, d0
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4ba9      	ldr	r3, [pc, #676]	; (80018a4 <Pos_ControlLoop_2steps+0x63c>)
 8001600:	f7ff f82a 	bl	8000658 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	e9c7 2302 	strd	r2, r3, [r7, #8]
		spin += POS_ROT_SMIN * (1 - rotationProgress);
 800160c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001610:	f04f 0000 	mov.w	r0, #0
 8001614:	49a4      	ldr	r1, [pc, #656]	; (80018a8 <Pos_ControlLoop_2steps+0x640>)
 8001616:	f7fe fe67 	bl	80002e8 <__aeabi_dsub>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4ba1      	ldr	r3, [pc, #644]	; (80018ac <Pos_ControlLoop_2steps+0x644>)
 8001628:	f7ff f816 	bl	8000658 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001634:	f7fe fe5a 	bl	80002ec <__adddf3>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		vit_SpeedControl(&MoteurGauche, &CodeurGauche, ticksLeft, spin);
 8001640:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001644:	ed97 0b02 	vldr	d0, [r7, #8]
 8001648:	461a      	mov	r2, r3
 800164a:	4999      	ldr	r1, [pc, #612]	; (80018b0 <Pos_ControlLoop_2steps+0x648>)
 800164c:	4893      	ldr	r0, [pc, #588]	; (800189c <Pos_ControlLoop_2steps+0x634>)
 800164e:	f000 fbc7 	bl	8001de0 <vit_SpeedControl>
		vit_SpeedControl(&MoteurDroite, &CodeurDroite, ticksRight, spin);
 8001652:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001656:	ed97 0b02 	vldr	d0, [r7, #8]
 800165a:	461a      	mov	r2, r3
 800165c:	4995      	ldr	r1, [pc, #596]	; (80018b4 <Pos_ControlLoop_2steps+0x64c>)
 800165e:	4890      	ldr	r0, [pc, #576]	; (80018a0 <Pos_ControlLoop_2steps+0x638>)
 8001660:	f000 fbbe 	bl	8001de0 <vit_SpeedControl>

		// Stop conditions
		printf("spin = %lf\r\n", spin);
 8001664:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001668:	4893      	ldr	r0, [pc, #588]	; (80018b8 <Pos_ControlLoop_2steps+0x650>)
 800166a:	f006 fc91 	bl	8007f90 <iprintf>
		if(spin == spin_previous && (angleRelative <= 0.1 && angleRelative >= -0.1)) state = MOVE;
 800166e:	4b93      	ldr	r3, [pc, #588]	; (80018bc <Pos_ControlLoop_2steps+0x654>)
 8001670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001674:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001678:	f7ff fa56 	bl	8000b28 <__aeabi_dcmpeq>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d016      	beq.n	80016b0 <Pos_ControlLoop_2steps+0x448>
 8001682:	a37b      	add	r3, pc, #492	; (adr r3, 8001870 <Pos_ControlLoop_2steps+0x608>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800168c:	f7ff fa60 	bl	8000b50 <__aeabi_dcmple>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00c      	beq.n	80016b0 <Pos_ControlLoop_2steps+0x448>
 8001696:	a378      	add	r3, pc, #480	; (adr r3, 8001878 <Pos_ControlLoop_2steps+0x610>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80016a0:	f7ff fa60 	bl	8000b64 <__aeabi_dcmpge>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d002      	beq.n	80016b0 <Pos_ControlLoop_2steps+0x448>
 80016aa:	4b85      	ldr	r3, [pc, #532]	; (80018c0 <Pos_ControlLoop_2steps+0x658>)
 80016ac:	2202      	movs	r2, #2
 80016ae:	701a      	strb	r2, [r3, #0]

		spin_previous = spin;
 80016b0:	4982      	ldr	r1, [pc, #520]	; (80018bc <Pos_ControlLoop_2steps+0x654>)
 80016b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016b6:	e9c1 2300 	strd	r2, r3, [r1]

		break;
 80016ba:	e122      	b.n	8001902 <Pos_ControlLoop_2steps+0x69a>

	case MOVE:
		//printf("moveProgress = %lf\r\n", moveProgress);
		printf("angleRelative = %lf\r\n", angleRelative);
 80016bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016c0:	4880      	ldr	r0, [pc, #512]	; (80018c4 <Pos_ControlLoop_2steps+0x65c>)
 80016c2:	f006 fc65 	bl	8007f90 <iprintf>

		// Choix du sens de rotation
		MOT_SetDirection(&MoteurGauche, MOT_FUNCTIONS_FORWARD);
 80016c6:	2101      	movs	r1, #1
 80016c8:	4874      	ldr	r0, [pc, #464]	; (800189c <Pos_ControlLoop_2steps+0x634>)
 80016ca:	f000 fcd6 	bl	800207a <MOT_SetDirection>
		MOT_SetDirection(&MoteurDroite, MOT_FUNCTIONS_FORWARD);
 80016ce:	2101      	movs	r1, #1
 80016d0:	4873      	ldr	r0, [pc, #460]	; (80018a0 <Pos_ControlLoop_2steps+0x638>)
 80016d2:	f000 fcd2 	bl	800207a <MOT_SetDirection>

		// Contrôle de la vitesse
		double speed = POS_LIN_SMAX * speedCurve(moveProgress, 1);
 80016d6:	ed9f 1b64 	vldr	d1, [pc, #400]	; 8001868 <Pos_ControlLoop_2steps+0x600>
 80016da:	ed97 0b08 	vldr	d0, [r7, #32]
 80016de:	f7ff fd6b 	bl	80011b8 <speedCurve>
 80016e2:	ec51 0b10 	vmov	r0, r1, d0
 80016e6:	a366      	add	r3, pc, #408	; (adr r3, 8001880 <Pos_ControlLoop_2steps+0x618>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	f7fe ffb4 	bl	8000658 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		speed += POS_LIN_SMIN * (1 - moveProgress);
 80016f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016fc:	f04f 0000 	mov.w	r0, #0
 8001700:	4969      	ldr	r1, [pc, #420]	; (80018a8 <Pos_ControlLoop_2steps+0x640>)
 8001702:	f7fe fdf1 	bl	80002e8 <__aeabi_dsub>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	4b6d      	ldr	r3, [pc, #436]	; (80018c8 <Pos_ControlLoop_2steps+0x660>)
 8001714:	f7fe ffa0 	bl	8000658 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001720:	f7fe fde4 	bl	80002ec <__adddf3>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double spCorrection = 1 - fabs(angleRelative);
 800172c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800172e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001730:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001734:	4622      	mov	r2, r4
 8001736:	462b      	mov	r3, r5
 8001738:	f04f 0000 	mov.w	r0, #0
 800173c:	495a      	ldr	r1, [pc, #360]	; (80018a8 <Pos_ControlLoop_2steps+0x640>)
 800173e:	f7fe fdd3 	bl	80002e8 <__aeabi_dsub>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	e9c7 2304 	strd	r2, r3, [r7, #16]

		if(distanceToTarget < 50){
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	4b5e      	ldr	r3, [pc, #376]	; (80018c8 <Pos_ControlLoop_2steps+0x660>)
 8001750:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001754:	f7ff f9f2 	bl	8000b3c <__aeabi_dcmplt>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d012      	beq.n	8001784 <Pos_ControlLoop_2steps+0x51c>
			vit_SpeedControl(&MoteurGauche, &CodeurGauche, ticksLeft, speed);
 800175e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001762:	ed97 0b06 	vldr	d0, [r7, #24]
 8001766:	461a      	mov	r2, r3
 8001768:	4951      	ldr	r1, [pc, #324]	; (80018b0 <Pos_ControlLoop_2steps+0x648>)
 800176a:	484c      	ldr	r0, [pc, #304]	; (800189c <Pos_ControlLoop_2steps+0x634>)
 800176c:	f000 fb38 	bl	8001de0 <vit_SpeedControl>
			vit_SpeedControl(&MoteurDroite, &CodeurDroite, ticksRight, speed);
 8001770:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001774:	ed97 0b06 	vldr	d0, [r7, #24]
 8001778:	461a      	mov	r2, r3
 800177a:	494e      	ldr	r1, [pc, #312]	; (80018b4 <Pos_ControlLoop_2steps+0x64c>)
 800177c:	4848      	ldr	r0, [pc, #288]	; (80018a0 <Pos_ControlLoop_2steps+0x638>)
 800177e:	f000 fb2f 	bl	8001de0 <vit_SpeedControl>
 8001782:	e047      	b.n	8001814 <Pos_ControlLoop_2steps+0x5ac>
		}
		else{
			if(angleRelative < 0){
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001790:	f7ff f9d4 	bl	8000b3c <__aeabi_dcmplt>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d01e      	beq.n	80017d8 <Pos_ControlLoop_2steps+0x570>
				vit_SpeedControl(&MoteurGauche, &CodeurGauche, ticksLeft, speed);
 800179a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800179e:	ed97 0b06 	vldr	d0, [r7, #24]
 80017a2:	461a      	mov	r2, r3
 80017a4:	4942      	ldr	r1, [pc, #264]	; (80018b0 <Pos_ControlLoop_2steps+0x648>)
 80017a6:	483d      	ldr	r0, [pc, #244]	; (800189c <Pos_ControlLoop_2steps+0x634>)
 80017a8:	f000 fb1a 	bl	8001de0 <vit_SpeedControl>
				vit_SpeedControl(&MoteurDroite, &CodeurDroite, ticksRight, speed * spCorrection);
 80017ac:	f9b7 4044 	ldrsh.w	r4, [r7, #68]	; 0x44
 80017b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017b8:	f7fe ff4e 	bl	8000658 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	ec43 2b17 	vmov	d7, r2, r3
 80017c4:	eeb0 0a47 	vmov.f32	s0, s14
 80017c8:	eef0 0a67 	vmov.f32	s1, s15
 80017cc:	4622      	mov	r2, r4
 80017ce:	4939      	ldr	r1, [pc, #228]	; (80018b4 <Pos_ControlLoop_2steps+0x64c>)
 80017d0:	4833      	ldr	r0, [pc, #204]	; (80018a0 <Pos_ControlLoop_2steps+0x638>)
 80017d2:	f000 fb05 	bl	8001de0 <vit_SpeedControl>
 80017d6:	e01d      	b.n	8001814 <Pos_ControlLoop_2steps+0x5ac>
			} else{
				vit_SpeedControl(&MoteurGauche, &CodeurGauche, ticksLeft, speed * spCorrection);
 80017d8:	f9b7 4046 	ldrsh.w	r4, [r7, #70]	; 0x46
 80017dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017e4:	f7fe ff38 	bl	8000658 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	ec43 2b17 	vmov	d7, r2, r3
 80017f0:	eeb0 0a47 	vmov.f32	s0, s14
 80017f4:	eef0 0a67 	vmov.f32	s1, s15
 80017f8:	4622      	mov	r2, r4
 80017fa:	492d      	ldr	r1, [pc, #180]	; (80018b0 <Pos_ControlLoop_2steps+0x648>)
 80017fc:	4827      	ldr	r0, [pc, #156]	; (800189c <Pos_ControlLoop_2steps+0x634>)
 80017fe:	f000 faef 	bl	8001de0 <vit_SpeedControl>
				vit_SpeedControl(&MoteurDroite, &CodeurDroite, ticksRight, speed);
 8001802:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001806:	ed97 0b06 	vldr	d0, [r7, #24]
 800180a:	461a      	mov	r2, r3
 800180c:	4929      	ldr	r1, [pc, #164]	; (80018b4 <Pos_ControlLoop_2steps+0x64c>)
 800180e:	4824      	ldr	r0, [pc, #144]	; (80018a0 <Pos_ControlLoop_2steps+0x638>)
 8001810:	f000 fae6 	bl	8001de0 <vit_SpeedControl>
			}
		}

		// Stop conditions
		printf("speed = %lf\r\n", speed);
 8001814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001818:	482c      	ldr	r0, [pc, #176]	; (80018cc <Pos_ControlLoop_2steps+0x664>)
 800181a:	f006 fbb9 	bl	8007f90 <iprintf>
		if(angleRelative < (M_PI/2) && angleRelative > (-M_PI/2) && distanceToTarget < 10){
 800181e:	a31a      	add	r3, pc, #104	; (adr r3, 8001888 <Pos_ControlLoop_2steps+0x620>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001828:	f7ff f988 	bl	8000b3c <__aeabi_dcmplt>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d100      	bne.n	8001834 <Pos_ControlLoop_2steps+0x5cc>
			state = STAND_BY;
			targetX = 0;
			targetY = 0;
		}
		break;
 8001832:	e066      	b.n	8001902 <Pos_ControlLoop_2steps+0x69a>
		if(angleRelative < (M_PI/2) && angleRelative > (-M_PI/2) && distanceToTarget < 10){
 8001834:	a316      	add	r3, pc, #88	; (adr r3, 8001890 <Pos_ControlLoop_2steps+0x628>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800183e:	f7ff f99b 	bl	8000b78 <__aeabi_dcmpgt>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d100      	bne.n	800184a <Pos_ControlLoop_2steps+0x5e2>
		break;
 8001848:	e05b      	b.n	8001902 <Pos_ControlLoop_2steps+0x69a>
		if(angleRelative < (M_PI/2) && angleRelative > (-M_PI/2) && distanceToTarget < 10){
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <Pos_ControlLoop_2steps+0x668>)
 8001850:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001854:	f7ff f972 	bl	8000b3c <__aeabi_dcmplt>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d13a      	bne.n	80018d4 <Pos_ControlLoop_2steps+0x66c>
		break;
 800185e:	e050      	b.n	8001902 <Pos_ControlLoop_2steps+0x69a>
 8001860:	54442d18 	.word	0x54442d18
 8001864:	400921fb 	.word	0x400921fb
 8001868:	00000000 	.word	0x00000000
 800186c:	3ff00000 	.word	0x3ff00000
 8001870:	9999999a 	.word	0x9999999a
 8001874:	3fb99999 	.word	0x3fb99999
 8001878:	9999999a 	.word	0x9999999a
 800187c:	bfb99999 	.word	0xbfb99999
 8001880:	00000000 	.word	0x00000000
 8001884:	4062c000 	.word	0x4062c000
 8001888:	54442d18 	.word	0x54442d18
 800188c:	3ff921fb 	.word	0x3ff921fb
 8001890:	54442d18 	.word	0x54442d18
 8001894:	bff921fb 	.word	0xbff921fb
 8001898:	0800def0 	.word	0x0800def0
 800189c:	20000388 	.word	0x20000388
 80018a0:	200003c0 	.word	0x200003c0
 80018a4:	405e0000 	.word	0x405e0000
 80018a8:	3ff00000 	.word	0x3ff00000
 80018ac:	40540000 	.word	0x40540000
 80018b0:	2000040c 	.word	0x2000040c
 80018b4:	200003f8 	.word	0x200003f8
 80018b8:	0800df0c 	.word	0x0800df0c
 80018bc:	20000260 	.word	0x20000260
 80018c0:	20000234 	.word	0x20000234
 80018c4:	0800df1c 	.word	0x0800df1c
 80018c8:	40490000 	.word	0x40490000
 80018cc:	0800df34 	.word	0x0800df34
 80018d0:	40240000 	.word	0x40240000
			state = STAND_BY;
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <Pos_ControlLoop_2steps+0x6a8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
			targetX = 0;
 80018da:	490e      	ldr	r1, [pc, #56]	; (8001914 <Pos_ControlLoop_2steps+0x6ac>)
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	e9c1 2300 	strd	r2, r3, [r1]
			targetY = 0;
 80018e8:	490b      	ldr	r1, [pc, #44]	; (8001918 <Pos_ControlLoop_2steps+0x6b0>)
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80018f6:	e004      	b.n	8001902 <Pos_ControlLoop_2steps+0x69a>

	default:
		state = STAND_BY;
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <Pos_ControlLoop_2steps+0x6a8>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
		break;
 80018fe:	e000      	b.n	8001902 <Pos_ControlLoop_2steps+0x69a>
		break;
 8001900:	bf00      	nop
	}
}
 8001902:	bf00      	nop
 8001904:	3750      	adds	r7, #80	; 0x50
 8001906:	46bd      	mov	sp, r7
 8001908:	ecbd 8b02 	vpop	{d8}
 800190c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001910:	20000234 	.word	0x20000234
 8001914:	20000238 	.word	0x20000238
 8001918:	20000240 	.word	0x20000240
 800191c:	00000000 	.word	0x00000000

08001920 <Pos_ControlLoop_Smooth>:

/**
 * Pos_ControlLoop_Smooth
 */
void Pos_ControlLoop_Smooth(){
 8001920:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001924:	ed2d 8b02 	vpush	{d8}
 8001928:	b094      	sub	sp, #80	; 0x50
 800192a:	af00      	add	r7, sp, #0
	/* ODOMETRY ------------------------*/
	int16_t ticksLeft = ENC_GetCnt(&CodeurGauche);
 800192c:	489e      	ldr	r0, [pc, #632]	; (8001ba8 <Pos_ControlLoop_Smooth+0x288>)
 800192e:	f000 fb36 	bl	8001f9e <ENC_GetCnt>
 8001932:	4603      	mov	r3, r0
 8001934:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t ticksRight = ENC_GetCnt(&CodeurDroite);
 8001938:	489c      	ldr	r0, [pc, #624]	; (8001bac <Pos_ControlLoop_Smooth+0x28c>)
 800193a:	f000 fb30 	bl	8001f9e <ENC_GetCnt>
 800193e:	4603      	mov	r3, r0
 8001940:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	Odo_Odometry(ticksLeft, ticksRight);
 8001944:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001948:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800194c:	4611      	mov	r1, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f000 fcc2 	bl	80022d8 <Odo_Odometry>

	/* ROTATION ------------------------*/
	double angleToTarget = atan2(targetY - Odo_GetY(), targetX - Odo_GetX());
 8001954:	4b96      	ldr	r3, [pc, #600]	; (8001bb0 <Pos_ControlLoop_Smooth+0x290>)
 8001956:	e9d3 4500 	ldrd	r4, r5, [r3]
 800195a:	f000 fc97 	bl	800228c <Odo_GetY>
 800195e:	ec53 2b10 	vmov	r2, r3, d0
 8001962:	4620      	mov	r0, r4
 8001964:	4629      	mov	r1, r5
 8001966:	f7fe fcbf 	bl	80002e8 <__aeabi_dsub>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	ec43 2b18 	vmov	d8, r2, r3
 8001972:	4b90      	ldr	r3, [pc, #576]	; (8001bb4 <Pos_ControlLoop_Smooth+0x294>)
 8001974:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001978:	f000 fc76 	bl	8002268 <Odo_GetX>
 800197c:	ec53 2b10 	vmov	r2, r3, d0
 8001980:	4620      	mov	r0, r4
 8001982:	4629      	mov	r1, r5
 8001984:	f7fe fcb0 	bl	80002e8 <__aeabi_dsub>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	ec43 2b17 	vmov	d7, r2, r3
 8001990:	eeb0 1a47 	vmov.f32	s2, s14
 8001994:	eef0 1a67 	vmov.f32	s3, s15
 8001998:	eeb0 0a48 	vmov.f32	s0, s16
 800199c:	eef0 0a68 	vmov.f32	s1, s17
 80019a0:	f00a f936 	bl	800bc10 <atan2>
 80019a4:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	// Rotation direction
	double angleRelative = toZeroTwoPi(angleToTarget) - toZeroTwoPi(Odo_GetO());
 80019a8:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80019ac:	f7ff fbd4 	bl	8001158 <toZeroTwoPi>
 80019b0:	ec55 4b10 	vmov	r4, r5, d0
 80019b4:	f000 fc7c 	bl	80022b0 <Odo_GetO>
 80019b8:	eeb0 7a40 	vmov.f32	s14, s0
 80019bc:	eef0 7a60 	vmov.f32	s15, s1
 80019c0:	eeb0 0a47 	vmov.f32	s0, s14
 80019c4:	eef0 0a67 	vmov.f32	s1, s15
 80019c8:	f7ff fbc6 	bl	8001158 <toZeroTwoPi>
 80019cc:	ec53 2b10 	vmov	r2, r3, d0
 80019d0:	4620      	mov	r0, r4
 80019d2:	4629      	mov	r1, r5
 80019d4:	f7fe fc88 	bl	80002e8 <__aeabi_dsub>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if(angleRelative > M_PI) angleRelative = angleRelative - M_TWOPI;
 80019e0:	a369      	add	r3, pc, #420	; (adr r3, 8001b88 <Pos_ControlLoop_Smooth+0x268>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80019ea:	f7ff f8c5 	bl	8000b78 <__aeabi_dcmpgt>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00b      	beq.n	8001a0c <Pos_ControlLoop_Smooth+0xec>
 80019f4:	a366      	add	r3, pc, #408	; (adr r3, 8001b90 <Pos_ControlLoop_Smooth+0x270>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80019fe:	f7fe fc73 	bl	80002e8 <__aeabi_dsub>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001a0a:	e014      	b.n	8001a36 <Pos_ControlLoop_Smooth+0x116>
	else if(angleRelative < (-M_PI)) angleRelative = angleRelative + M_TWOPI;
 8001a0c:	a362      	add	r3, pc, #392	; (adr r3, 8001b98 <Pos_ControlLoop_Smooth+0x278>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a16:	f7ff f891 	bl	8000b3c <__aeabi_dcmplt>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00a      	beq.n	8001a36 <Pos_ControlLoop_Smooth+0x116>
 8001a20:	a35b      	add	r3, pc, #364	; (adr r3, 8001b90 <Pos_ControlLoop_Smooth+0x270>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a2a:	f7fe fc5f 	bl	80002ec <__adddf3>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if (angleRelativeInitial == 0) angleRelativeInitial = angleRelative;
 8001a36:	4b60      	ldr	r3, [pc, #384]	; (8001bb8 <Pos_ControlLoop_Smooth+0x298>)
 8001a38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	f7ff f870 	bl	8000b28 <__aeabi_dcmpeq>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d004      	beq.n	8001a58 <Pos_ControlLoop_Smooth+0x138>
 8001a4e:	495a      	ldr	r1, [pc, #360]	; (8001bb8 <Pos_ControlLoop_Smooth+0x298>)
 8001a50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a54:	e9c1 2300 	strd	r2, r3, [r1]

	/* MOVE ----------------------------*/
	double distanceToTarget = sqrt(pow(targetX - Odo_GetX(),2) + pow(targetY - Odo_GetY(),2));
 8001a58:	4b56      	ldr	r3, [pc, #344]	; (8001bb4 <Pos_ControlLoop_Smooth+0x294>)
 8001a5a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a5e:	f000 fc03 	bl	8002268 <Odo_GetX>
 8001a62:	ec53 2b10 	vmov	r2, r3, d0
 8001a66:	4620      	mov	r0, r4
 8001a68:	4629      	mov	r1, r5
 8001a6a:	f7fe fc3d 	bl	80002e8 <__aeabi_dsub>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	ec43 2b17 	vmov	d7, r2, r3
 8001a76:	ed9f 1b4a 	vldr	d1, [pc, #296]	; 8001ba0 <Pos_ControlLoop_Smooth+0x280>
 8001a7a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a7e:	eef0 0a67 	vmov.f32	s1, s15
 8001a82:	f00a f903 	bl	800bc8c <pow>
 8001a86:	ec59 8b10 	vmov	r8, r9, d0
 8001a8a:	4b49      	ldr	r3, [pc, #292]	; (8001bb0 <Pos_ControlLoop_Smooth+0x290>)
 8001a8c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a90:	f000 fbfc 	bl	800228c <Odo_GetY>
 8001a94:	ec53 2b10 	vmov	r2, r3, d0
 8001a98:	4620      	mov	r0, r4
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	f7fe fc24 	bl	80002e8 <__aeabi_dsub>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	ec43 2b17 	vmov	d7, r2, r3
 8001aa8:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8001ba0 <Pos_ControlLoop_Smooth+0x280>
 8001aac:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab0:	eef0 0a67 	vmov.f32	s1, s15
 8001ab4:	f00a f8ea 	bl	800bc8c <pow>
 8001ab8:	ec53 2b10 	vmov	r2, r3, d0
 8001abc:	4640      	mov	r0, r8
 8001abe:	4649      	mov	r1, r9
 8001ac0:	f7fe fc14 	bl	80002ec <__adddf3>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	ec43 2b17 	vmov	d7, r2, r3
 8001acc:	eeb0 0a47 	vmov.f32	s0, s14
 8001ad0:	eef0 0a67 	vmov.f32	s1, s15
 8001ad4:	f00a f988 	bl	800bde8 <sqrt>
 8001ad8:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	if (distanceToTargetInitial == 0) distanceToTargetInitial = distanceToTarget;
 8001adc:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <Pos_ControlLoop_Smooth+0x29c>)
 8001ade:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	f7ff f81d 	bl	8000b28 <__aeabi_dcmpeq>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d004      	beq.n	8001afe <Pos_ControlLoop_Smooth+0x1de>
 8001af4:	4931      	ldr	r1, [pc, #196]	; (8001bbc <Pos_ControlLoop_Smooth+0x29c>)
 8001af6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001afa:	e9c1 2300 	strd	r2, r3, [r1]
	// Progression
	double moveProgress = 1 - toZeroOne(distanceToTarget / distanceToTargetInitial);
 8001afe:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <Pos_ControlLoop_Smooth+0x29c>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b08:	f7fe fed0 	bl	80008ac <__aeabi_ddiv>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	ec43 2b17 	vmov	d7, r2, r3
 8001b14:	eeb0 0a47 	vmov.f32	s0, s14
 8001b18:	eef0 0a67 	vmov.f32	s1, s15
 8001b1c:	f7ff faea 	bl	80010f4 <toZeroOne>
 8001b20:	ec53 2b10 	vmov	r2, r3, d0
 8001b24:	f04f 0000 	mov.w	r0, #0
 8001b28:	4925      	ldr	r1, [pc, #148]	; (8001bc0 <Pos_ControlLoop_Smooth+0x2a0>)
 8001b2a:	f7fe fbdd 	bl	80002e8 <__aeabi_dsub>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	switch(state){
 8001b36:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <Pos_ControlLoop_Smooth+0x2a4>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <Pos_ControlLoop_Smooth+0x224>
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d048      	beq.n	8001bd4 <Pos_ControlLoop_Smooth+0x2b4>
 8001b42:	e0f8      	b.n	8001d36 <Pos_ControlLoop_Smooth+0x416>

	case STAND_BY:
		MOT_SetDutyCycle(&MoteurGauche, 0);
 8001b44:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001bc8 <Pos_ControlLoop_Smooth+0x2a8>
 8001b48:	4820      	ldr	r0, [pc, #128]	; (8001bcc <Pos_ControlLoop_Smooth+0x2ac>)
 8001b4a:	f000 faef 	bl	800212c <MOT_SetDutyCycle>
		MOT_SetDutyCycle(&MoteurDroite, 0);
 8001b4e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001bc8 <Pos_ControlLoop_Smooth+0x2a8>
 8001b52:	481f      	ldr	r0, [pc, #124]	; (8001bd0 <Pos_ControlLoop_Smooth+0x2b0>)
 8001b54:	f000 faea 	bl	800212c <MOT_SetDutyCycle>

		distanceToTargetInitial = 0;
 8001b58:	4918      	ldr	r1, [pc, #96]	; (8001bbc <Pos_ControlLoop_Smooth+0x29c>)
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	e9c1 2300 	strd	r2, r3, [r1]
		angleRelativeInitial = 0;
 8001b66:	4914      	ldr	r1, [pc, #80]	; (8001bb8 <Pos_ControlLoop_Smooth+0x298>)
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	e9c1 2300 	strd	r2, r3, [r1]

		if (!isArrived()) {
 8001b74:	f7ff fa9a 	bl	80010ac <isArrived>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 80df 	bne.w	8001d3e <Pos_ControlLoop_Smooth+0x41e>
			state = MOVE;
 8001b80:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <Pos_ControlLoop_Smooth+0x2a4>)
 8001b82:	2202      	movs	r2, #2
 8001b84:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001b86:	e0da      	b.n	8001d3e <Pos_ControlLoop_Smooth+0x41e>
 8001b88:	54442d18 	.word	0x54442d18
 8001b8c:	400921fb 	.word	0x400921fb
 8001b90:	54442d18 	.word	0x54442d18
 8001b94:	401921fb 	.word	0x401921fb
 8001b98:	54442d18 	.word	0x54442d18
 8001b9c:	c00921fb 	.word	0xc00921fb
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	40000000 	.word	0x40000000
 8001ba8:	2000040c 	.word	0x2000040c
 8001bac:	200003f8 	.word	0x200003f8
 8001bb0:	20000240 	.word	0x20000240
 8001bb4:	20000238 	.word	0x20000238
 8001bb8:	20000250 	.word	0x20000250
 8001bbc:	20000248 	.word	0x20000248
 8001bc0:	3ff00000 	.word	0x3ff00000
 8001bc4:	20000234 	.word	0x20000234
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	20000388 	.word	0x20000388
 8001bd0:	200003c0 	.word	0x200003c0

	case MOVE:
		//printf("moveProgress = %lf\r\n", moveProgress);
		printf("distanceToTarget = %lf\r\n", distanceToTarget);
 8001bd4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001bd8:	4869      	ldr	r0, [pc, #420]	; (8001d80 <Pos_ControlLoop_Smooth+0x460>)
 8001bda:	f006 f9d9 	bl	8007f90 <iprintf>
		printf("angleRelative = %lf\r\n", angleRelative);
 8001bde:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001be2:	4868      	ldr	r0, [pc, #416]	; (8001d84 <Pos_ControlLoop_Smooth+0x464>)
 8001be4:	f006 f9d4 	bl	8007f90 <iprintf>

		// Choix du sens de rotation
		MOT_SetDirection(&MoteurGauche, MOT_FUNCTIONS_FORWARD);
 8001be8:	2101      	movs	r1, #1
 8001bea:	4867      	ldr	r0, [pc, #412]	; (8001d88 <Pos_ControlLoop_Smooth+0x468>)
 8001bec:	f000 fa45 	bl	800207a <MOT_SetDirection>
		MOT_SetDirection(&MoteurDroite, MOT_FUNCTIONS_FORWARD);
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	4866      	ldr	r0, [pc, #408]	; (8001d8c <Pos_ControlLoop_Smooth+0x46c>)
 8001bf4:	f000 fa41 	bl	800207a <MOT_SetDirection>

		// Contrôle de la vitesse
		double robotLinSpeed = POS_LIN_SMAX * speedCurve(moveProgress, 1);
 8001bf8:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8001d50 <Pos_ControlLoop_Smooth+0x430>
 8001bfc:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001c00:	f7ff fada 	bl	80011b8 <speedCurve>
 8001c04:	ec51 0b10 	vmov	r0, r1, d0
 8001c08:	a353      	add	r3, pc, #332	; (adr r3, 8001d58 <Pos_ControlLoop_Smooth+0x438>)
 8001c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0e:	f7fe fd23 	bl	8000658 <__aeabi_dmul>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	e9c7 2308 	strd	r2, r3, [r7, #32]
		robotLinSpeed += POS_LIN_SMIN * (1 - moveProgress);
 8001c1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c1e:	f04f 0000 	mov.w	r0, #0
 8001c22:	495b      	ldr	r1, [pc, #364]	; (8001d90 <Pos_ControlLoop_Smooth+0x470>)
 8001c24:	f7fe fb60 	bl	80002e8 <__aeabi_dsub>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	4b57      	ldr	r3, [pc, #348]	; (8001d94 <Pos_ControlLoop_Smooth+0x474>)
 8001c36:	f7fe fd0f 	bl	8000658 <__aeabi_dmul>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c42:	f7fe fb53 	bl	80002ec <__adddf3>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		double robotAngSpeed = robotLinSpeed * (M_TWOPI / WHEEL_PERIMETER);
 8001c4e:	a344      	add	r3, pc, #272	; (adr r3, 8001d60 <Pos_ControlLoop_Smooth+0x440>)
 8001c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c54:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c58:	f7fe fcfe 	bl	8000658 <__aeabi_dmul>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	e9c7 2306 	strd	r2, r3, [r7, #24]

		double radius = distanceToTarget;
 8001c64:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c68:	e9c7 2304 	strd	r2, r3, [r7, #16]
		double rightWheelSpeed = (radius + ((float)ENTRAXE / 2)) * robotAngSpeed;
 8001c6c:	a33e      	add	r3, pc, #248	; (adr r3, 8001d68 <Pos_ControlLoop_Smooth+0x448>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c76:	f7fe fb39 	bl	80002ec <__adddf3>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c82:	f7fe fce9 	bl	8000658 <__aeabi_dmul>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		double leftWheelSpeed = (radius - ((float)ENTRAXE / 2)) * robotAngSpeed;
 8001c8e:	a336      	add	r3, pc, #216	; (adr r3, 8001d68 <Pos_ControlLoop_Smooth+0x448>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c98:	f7fe fb26 	bl	80002e8 <__aeabi_dsub>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ca4:	f7fe fcd8 	bl	8000658 <__aeabi_dmul>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	e9c7 2300 	strd	r2, r3, [r7]

		vit_SpeedControl(&MoteurGauche, &CodeurGauche, ticksLeft, leftWheelSpeed);
 8001cb0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001cb4:	ed97 0b00 	vldr	d0, [r7]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4937      	ldr	r1, [pc, #220]	; (8001d98 <Pos_ControlLoop_Smooth+0x478>)
 8001cbc:	4832      	ldr	r0, [pc, #200]	; (8001d88 <Pos_ControlLoop_Smooth+0x468>)
 8001cbe:	f000 f88f 	bl	8001de0 <vit_SpeedControl>
		vit_SpeedControl(&MoteurDroite, &CodeurDroite, ticksRight, rightWheelSpeed);
 8001cc2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001cc6:	ed97 0b02 	vldr	d0, [r7, #8]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4933      	ldr	r1, [pc, #204]	; (8001d9c <Pos_ControlLoop_Smooth+0x47c>)
 8001cce:	482f      	ldr	r0, [pc, #188]	; (8001d8c <Pos_ControlLoop_Smooth+0x46c>)
 8001cd0:	f000 f886 	bl	8001de0 <vit_SpeedControl>

		// Stop conditions
		//printf("speed = %lf\r\n", robotLinSpeed);
		if(angleRelative > (M_PI/2) || angleRelative < (-M_PI/2)){
 8001cd4:	a326      	add	r3, pc, #152	; (adr r3, 8001d70 <Pos_ControlLoop_Smooth+0x450>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001cde:	f7fe ff4b 	bl	8000b78 <__aeabi_dcmpgt>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10a      	bne.n	8001cfe <Pos_ControlLoop_Smooth+0x3de>
 8001ce8:	a323      	add	r3, pc, #140	; (adr r3, 8001d78 <Pos_ControlLoop_Smooth+0x458>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001cf2:	f7fe ff23 	bl	8000b3c <__aeabi_dcmplt>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d100      	bne.n	8001cfe <Pos_ControlLoop_Smooth+0x3de>
			targetX = 0;
			targetY = 0;
			MOT_SetDutyCycle(&MoteurGauche, 0);
			MOT_SetDutyCycle(&MoteurDroite, 0);
		}
		break;
 8001cfc:	e020      	b.n	8001d40 <Pos_ControlLoop_Smooth+0x420>
			state = STAND_BY;
 8001cfe:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <Pos_ControlLoop_Smooth+0x480>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
			targetX = 0;
 8001d04:	4927      	ldr	r1, [pc, #156]	; (8001da4 <Pos_ControlLoop_Smooth+0x484>)
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	e9c1 2300 	strd	r2, r3, [r1]
			targetY = 0;
 8001d12:	4925      	ldr	r1, [pc, #148]	; (8001da8 <Pos_ControlLoop_Smooth+0x488>)
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	e9c1 2300 	strd	r2, r3, [r1]
			MOT_SetDutyCycle(&MoteurGauche, 0);
 8001d20:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001dac <Pos_ControlLoop_Smooth+0x48c>
 8001d24:	4818      	ldr	r0, [pc, #96]	; (8001d88 <Pos_ControlLoop_Smooth+0x468>)
 8001d26:	f000 fa01 	bl	800212c <MOT_SetDutyCycle>
			MOT_SetDutyCycle(&MoteurDroite, 0);
 8001d2a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001dac <Pos_ControlLoop_Smooth+0x48c>
 8001d2e:	4817      	ldr	r0, [pc, #92]	; (8001d8c <Pos_ControlLoop_Smooth+0x46c>)
 8001d30:	f000 f9fc 	bl	800212c <MOT_SetDutyCycle>
		break;
 8001d34:	e004      	b.n	8001d40 <Pos_ControlLoop_Smooth+0x420>

	default:
		state = STAND_BY;
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <Pos_ControlLoop_Smooth+0x480>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
		break;
 8001d3c:	e000      	b.n	8001d40 <Pos_ControlLoop_Smooth+0x420>
		break;
 8001d3e:	bf00      	nop
	}
}
 8001d40:	bf00      	nop
 8001d42:	3750      	adds	r7, #80	; 0x50
 8001d44:	46bd      	mov	sp, r7
 8001d46:	ecbd 8b02 	vpop	{d8}
 8001d4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d4e:	bf00      	nop
 8001d50:	00000000 	.word	0x00000000
 8001d54:	3ff00000 	.word	0x3ff00000
 8001d58:	00000000 	.word	0x00000000
 8001d5c:	4062c000 	.word	0x4062c000
 8001d60:	b571d8b1 	.word	0xb571d8b1
 8001d64:	3fa9ecc0 	.word	0x3fa9ecc0
 8001d68:	00000000 	.word	0x00000000
 8001d6c:	40572000 	.word	0x40572000
 8001d70:	54442d18 	.word	0x54442d18
 8001d74:	3ff921fb 	.word	0x3ff921fb
 8001d78:	54442d18 	.word	0x54442d18
 8001d7c:	bff921fb 	.word	0xbff921fb
 8001d80:	0800df44 	.word	0x0800df44
 8001d84:	0800df1c 	.word	0x0800df1c
 8001d88:	20000388 	.word	0x20000388
 8001d8c:	200003c0 	.word	0x200003c0
 8001d90:	3ff00000 	.word	0x3ff00000
 8001d94:	40490000 	.word	0x40490000
 8001d98:	2000040c 	.word	0x2000040c
 8001d9c:	200003f8 	.word	0x200003f8
 8001da0:	20000234 	.word	0x20000234
 8001da4:	20000238 	.word	0x20000238
 8001da8:	20000240 	.word	0x20000240
 8001dac:	00000000 	.word	0x00000000

08001db0 <vit_SetTimer>:
/**
 * Define which timer is used for speed control loop
 * @param htim TIM HandleTypeDef
 * @return 0 if HAL_OK
 */
uint8_t vit_SetTimer(TIM_HandleTypeDef *htim){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	SpeedControl.Timer = htim;
 8001db8:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <vit_SetTimer+0x2c>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6013      	str	r3, [r2, #0]

	if(HAL_OK != HAL_TIM_Base_Start_IT(SpeedControl.Timer)){
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <vit_SetTimer+0x2c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 fb0a 	bl	80053dc <HAL_TIM_Base_Start_IT>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <vit_SetTimer+0x22>
		return 1;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <vit_SetTimer+0x24>
	}

	return 0;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000420 	.word	0x20000420

08001de0 <vit_SpeedControl>:
 * @param Motor Motor HandleTypeDef
 * @param Encoder Encoder HandleTypeDef
 * @return TBD
 */
int32_t vit_SpeedControl(MOT_HandleTypeDef* Motor, ENC_HandleTypeDef* Encoder,
		int32_t ticks, double consigne){
 8001de0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001de4:	b08c      	sub	sp, #48	; 0x30
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6178      	str	r0, [r7, #20]
 8001dea:	6139      	str	r1, [r7, #16]
 8001dec:	60fa      	str	r2, [r7, #12]
 8001dee:	ed87 0b00 	vstr	d0, [r7]
	// Récupération du nombre de ticks
	int32_t ticksMem = ticks;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
	if(ticks < 0) ticks = ticks * (-1);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	da02      	bge.n	8001e02 <vit_SpeedControl+0x22>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	425b      	negs	r3, r3
 8001e00:	60fb      	str	r3, [r7, #12]

	// Calcul de la vitesse du moteur
	int freq_codeuse = SPEED_CONTROL_FREQUENCY * ticks;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2232      	movs	r2, #50	; 0x32
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
	//float speed = ((float)freq_codeuse * ((float)WHEEL_PERIMETER/Encoder->TicksPerRev));
	float speed = ((float)freq_codeuse * Encoder->TicksCoeff);
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e20:	edc7 7a08 	vstr	s15, [r7, #32]
	// Vitesse calculée en mm/sec

	float erreur = consigne - speed;
 8001e24:	6a38      	ldr	r0, [r7, #32]
 8001e26:	f7fe fbbf 	bl	80005a8 <__aeabi_f2d>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e32:	f7fe fa59 	bl	80002e8 <__aeabi_dsub>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe ff03 	bl	8000c48 <__aeabi_d2f>
 8001e42:	4603      	mov	r3, r0
 8001e44:	61fb      	str	r3, [r7, #28]
	float s = 60; // Command offset
 8001e46:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <vit_SpeedControl+0x140>)
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
	s = s + Motor->Kp * erreur;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001e50:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e58:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e60:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s = s + Motor->Ki * (erreur + Motor->err_previous);
 8001e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e66:	f7fe fb9f 	bl	80005a8 <__aeabi_f2d>
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	460d      	mov	r5, r1
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fb98 	bl	80005a8 <__aeabi_f2d>
 8001e78:	4680      	mov	r8, r0
 8001e7a:	4689      	mov	r9, r1
 8001e7c:	69f8      	ldr	r0, [r7, #28]
 8001e7e:	f7fe fb93 	bl	80005a8 <__aeabi_f2d>
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001e88:	f7fe fa30 	bl	80002ec <__adddf3>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4640      	mov	r0, r8
 8001e92:	4649      	mov	r1, r9
 8001e94:	f7fe fbe0 	bl	8000658 <__aeabi_dmul>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	4629      	mov	r1, r5
 8001ea0:	f7fe fa24 	bl	80002ec <__adddf3>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f7fe fecc 	bl	8000c48 <__aeabi_d2f>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	//s = s + Motor->s_previous + Motor->Ki * (erreur + Motor->err_previous) * (SPEED_CONTROL_PERIOD/2);


	if(s >= 80) 	s = 80;
 8001eb4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001eb8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001f24 <vit_SpeedControl+0x144>
 8001ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec4:	db02      	blt.n	8001ecc <vit_SpeedControl+0xec>
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <vit_SpeedControl+0x148>)
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eca:	e009      	b.n	8001ee0 <vit_SpeedControl+0x100>
	else if(s < 0) 	s = 0;
 8001ecc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ed0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed8:	d502      	bpl.n	8001ee0 <vit_SpeedControl+0x100>
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c

	Motor->s_previous = s;
 8001ee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ee2:	f7fe fb61 	bl	80005a8 <__aeabi_f2d>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	6979      	ldr	r1, [r7, #20]
 8001eec:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Motor->err_previous = erreur;
 8001ef0:	69f8      	ldr	r0, [r7, #28]
 8001ef2:	f7fe fb59 	bl	80005a8 <__aeabi_f2d>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	6979      	ldr	r1, [r7, #20]
 8001efc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	MOT_SetDutyCycle(Motor,s);
 8001f00:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001f04:	6978      	ldr	r0, [r7, #20]
 8001f06:	f000 f911 	bl	800212c <MOT_SetDutyCycle>

	return speed;
 8001f0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f12:	ee17 3a90 	vmov	r3, s15
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3730      	adds	r7, #48	; 0x30
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f20:	42700000 	.word	0x42700000
 8001f24:	42a00000 	.word	0x42a00000
 8001f28:	42a00000 	.word	0x42a00000

08001f2c <ENC_InitTimer>:
 *	@param 	htim is a TIM handle
 *  @param  Channel_A is the TIM Channels
 *  @param  Channel_B is the TIM Channels
 *	@retval HAL_Status
 */
uint8_t ENC_InitTimer(ENC_HandleTypeDef* Encoder, TIM_HandleTypeDef *htim, uint32_t Channel_A, uint32_t Channel_B){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
	Encoder->Timer = htim;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	601a      	str	r2, [r3, #0]
	Encoder->Timer_Channel_A = Channel_A;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	605a      	str	r2, [r3, #4]
	Encoder->Timer_Channel_B = Channel_B;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	609a      	str	r2, [r3, #8]

	if(HAL_OK != HAL_TIM_Encoder_Start(Encoder->Timer, Encoder->Timer_Channel_A & Encoder->Timer_Channel_B))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f003 fc76 	bl	800584c <HAL_TIM_Encoder_Start>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <ENC_InitTimer+0x3e>
		return 1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <ENC_InitTimer+0x40>

	return 0;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <ENC_SetTicksPerRev>:

/*	@brief	Set the TicksPerRev value of the encoder
 *	@param	Encoder is a ENC_HandleTypeDef
 *	@param 	ticksPerRev value
 */
void ENC_SetTicksPerRev(ENC_HandleTypeDef* Encoder, float ticksPerRev){
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	ed87 0a00 	vstr	s0, [r7]
	Encoder->TicksPerRev = ticksPerRev;
 8001f80:	edd7 7a00 	vldr	s15, [r7]
 8001f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f88:	ee17 3a90 	vmov	r3, s15
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	819a      	strh	r2, [r3, #12]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <ENC_GetCnt>:

/*	@brief	Get the counter value of the timer
 *	@param	Encoder is a Enc_Struct structure
 *	@retval CNT value of the timer
 */
int16_t ENC_GetCnt(ENC_HandleTypeDef* Encoder){
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
	//uint16_t ticks = __HAL_TIM_GET_COUNTER(Encoder->Timer);
	int16_t ticks = Encoder->Timer->Instance->CNT;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	81fb      	strh	r3, [r7, #14]
	ENC_ResetCnt(Encoder);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f806 	bl	8001fc2 <ENC_ResetCnt>

	return ticks;
 8001fb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <ENC_ResetCnt>:

/*	@brief	Reset the counter value of the timer
 *	@param	Encoder is a Enc_Struct structure
 *	@retval 0
 */
uint8_t ENC_ResetCnt(ENC_HandleTypeDef* Encoder){
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
	Encoder->Timer->Instance->CNT = 0;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24

	return 0;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <MOT_InitTimer>:
 *	@param	Motor is a MOT_HandleTypeDef
 *	@param 	htim is a TIM handle
 *  @param  Channel is the TIM Channel used
 *	@retval HAL status
 */
uint8_t MOT_InitTimer(MOT_HandleTypeDef* Motor, TIM_HandleTypeDef *htim, uint32_t Channel){
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
	Motor->Timer_Handle = htim;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	601a      	str	r2, [r3, #0]
	Motor->Timer_Channel = Channel;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	605a      	str	r2, [r3, #4]

	if(HAL_OK != HAL_TIM_PWM_Start(Motor->Timer_Handle, Motor->Timer_Channel))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4619      	mov	r1, r3
 8002004:	4610      	mov	r0, r2
 8002006:	f003 fab3 	bl	8005570 <HAL_TIM_PWM_Start>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MOT_InitTimer+0x32>
		return 1;
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <MOT_InitTimer+0x34>

	return 0;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <MOT_InitGPIOs>:
 *  @param  IN1_GPIO_Pin specifies the port bit
 *	@param 	IN2_GPIOx is a GPIOx where x can be (A..K) to select the GPIO peripheral
 *  @param  IN2_GPIO_Pin specifies the port bit
 */
void MOT_InitGPIOs(MOT_HandleTypeDef* Motor, GPIO_TypeDef* IN1_GPIOx, uint16_t IN1_GPIO_Pin,
		GPIO_TypeDef* IN2_GPIOx, uint16_t IN2_GPIO_Pin){
 800201e:	b480      	push	{r7}
 8002020:	b085      	sub	sp, #20
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	4613      	mov	r3, r2
 800202c:	80fb      	strh	r3, [r7, #6]
	Motor->IN1_GPIOx = IN1_GPIOx;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	609a      	str	r2, [r3, #8]
	Motor->IN1_GPIO_Pin = IN1_GPIO_Pin;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	88fa      	ldrh	r2, [r7, #6]
 8002038:	819a      	strh	r2, [r3, #12]
	Motor->IN2_GPIOx = IN2_GPIOx;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	611a      	str	r2, [r3, #16]
	Motor->IN2_GPIO_Pin = IN2_GPIO_Pin;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8b3a      	ldrh	r2, [r7, #24]
 8002044:	829a      	strh	r2, [r3, #20]
}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <MOT_SetCoeff>:
/**	@brief	Set coefficient for the error correction of the motor
 *	@param	Motor is a MOT_HandleTypeDef
 *	@param 	Kp coefficient
 *	@param 	Ki coefficient
 */
void MOT_SetCoeff(MOT_HandleTypeDef* Motor, float Kp, float Ki){
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	ed87 0a02 	vstr	s0, [r7, #8]
 800205e:	edc7 0a01 	vstr	s1, [r7, #4]
	Motor->Kp = Kp;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	61da      	str	r2, [r3, #28]
	Motor->Ki = Ki;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	621a      	str	r2, [r3, #32]
}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <MOT_SetDirection>:
 *		@arg	MOT_FUNCTIONS_STOP
 *		@arg 	MOT_FUNCTIONS_FORWARD
 *		@arg 	MOT_FUNCTIONS_REVERSE
 */

void MOT_SetDirection(MOT_HandleTypeDef* Motor, uint8_t direction){
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	70fb      	strb	r3, [r7, #3]
	switch(direction){
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d028      	beq.n	80020de <MOT_SetDirection+0x64>
 800208c:	2b02      	cmp	r3, #2
 800208e:	dc37      	bgt.n	8002100 <MOT_SetDirection+0x86>
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <MOT_SetDirection+0x20>
 8002094:	2b01      	cmp	r3, #1
 8002096:	d011      	beq.n	80020bc <MOT_SetDirection+0x42>
 8002098:	e032      	b.n	8002100 <MOT_SetDirection+0x86>

	case MOT_FUNCTIONS_STOP:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6898      	ldr	r0, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	899b      	ldrh	r3, [r3, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	4619      	mov	r1, r3
 80020a6:	f002 fbad 	bl	8004804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6918      	ldr	r0, [r3, #16]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	8a9b      	ldrh	r3, [r3, #20]
 80020b2:	2200      	movs	r2, #0
 80020b4:	4619      	mov	r1, r3
 80020b6:	f002 fba5 	bl	8004804 <HAL_GPIO_WritePin>
		break;
 80020ba:	e032      	b.n	8002122 <MOT_SetDirection+0xa8>

	case MOT_FUNCTIONS_FORWARD:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6898      	ldr	r0, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	899b      	ldrh	r3, [r3, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	4619      	mov	r1, r3
 80020c8:	f002 fb9c 	bl	8004804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_SET);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6918      	ldr	r0, [r3, #16]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	8a9b      	ldrh	r3, [r3, #20]
 80020d4:	2201      	movs	r2, #1
 80020d6:	4619      	mov	r1, r3
 80020d8:	f002 fb94 	bl	8004804 <HAL_GPIO_WritePin>
		break;
 80020dc:	e021      	b.n	8002122 <MOT_SetDirection+0xa8>

	case MOT_FUNCTIONS_REVERSE:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_SET);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6898      	ldr	r0, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	899b      	ldrh	r3, [r3, #12]
 80020e6:	2201      	movs	r2, #1
 80020e8:	4619      	mov	r1, r3
 80020ea:	f002 fb8b 	bl	8004804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6918      	ldr	r0, [r3, #16]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	8a9b      	ldrh	r3, [r3, #20]
 80020f6:	2200      	movs	r2, #0
 80020f8:	4619      	mov	r1, r3
 80020fa:	f002 fb83 	bl	8004804 <HAL_GPIO_WritePin>
		break;
 80020fe:	e010      	b.n	8002122 <MOT_SetDirection+0xa8>

	default:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6898      	ldr	r0, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	899b      	ldrh	r3, [r3, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	4619      	mov	r1, r3
 800210c:	f002 fb7a 	bl	8004804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6918      	ldr	r0, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	8a9b      	ldrh	r3, [r3, #20]
 8002118:	2200      	movs	r2, #0
 800211a:	4619      	mov	r1, r3
 800211c:	f002 fb72 	bl	8004804 <HAL_GPIO_WritePin>
	}
}
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <MOT_SetDutyCycle>:

/*	@brief	Set the duty cycle of the PWM signal
 *	@param	Motor is a MOT_HandleTypeDef
 *	@param	duty_cycle is value between 0 and 100
 */
void MOT_SetDutyCycle(MOT_HandleTypeDef* Motor, float duty_cycle){
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	ed87 0a00 	vstr	s0, [r7]
	if(duty_cycle > 80) duty_cycle = 80;
 8002138:	edd7 7a00 	vldr	s15, [r7]
 800213c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80021f8 <MOT_SetDutyCycle+0xcc>
 8002140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002148:	dd02      	ble.n	8002150 <MOT_SetDutyCycle+0x24>
 800214a:	4b2c      	ldr	r3, [pc, #176]	; (80021fc <MOT_SetDutyCycle+0xd0>)
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	e009      	b.n	8002164 <MOT_SetDutyCycle+0x38>
	else if(duty_cycle < 0) duty_cycle = 0;
 8002150:	edd7 7a00 	vldr	s15, [r7]
 8002154:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215c:	d502      	bpl.n	8002164 <MOT_SetDutyCycle+0x38>
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	603b      	str	r3, [r7, #0]

	float pulse = (duty_cycle / 100) * (float)MOT_TIM_PERIOD;
 8002164:	ed97 7a00 	vldr	s14, [r7]
 8002168:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002200 <MOT_SetDutyCycle+0xd4>
 800216c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002170:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002204 <MOT_SetDutyCycle+0xd8>
 8002174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002178:	edc7 7a03 	vstr	s15, [r7, #12]

	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10a      	bne.n	800219a <MOT_SetDutyCycle+0x6e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	edd7 7a03 	vldr	s15, [r7, #12]
 800218e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002192:	ee17 2a90 	vmov	r2, s15
 8002196:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002198:	e027      	b.n	80021ea <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d10a      	bne.n	80021b8 <MOT_SetDutyCycle+0x8c>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021b0:	ee17 3a90 	vmov	r3, s15
 80021b4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80021b6:	e018      	b.n	80021ea <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d10a      	bne.n	80021d6 <MOT_SetDutyCycle+0xaa>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021ce:	ee17 3a90 	vmov	r3, s15
 80021d2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80021d4:	e009      	b.n	80021ea <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80021e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021e4:	ee17 3a90 	vmov	r3, s15
 80021e8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	42a00000 	.word	0x42a00000
 80021fc:	42a00000 	.word	0x42a00000
 8002200:	42c80000 	.word	0x42c80000
 8002204:	45520000 	.word	0x45520000

08002208 <Odo_Init>:

/**
 * Initialization of odometry module
 * @return 0
 */
uint8_t Odo_Init(){
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
	Odometry.leftTicks = 0;
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <Odo_Init+0x50>)
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
	Odometry.rightTicks = 0;
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <Odo_Init+0x50>)
 8002214:	2200      	movs	r2, #0
 8002216:	605a      	str	r2, [r3, #4]

	x = 0;
 8002218:	4910      	ldr	r1, [pc, #64]	; (800225c <Odo_Init+0x54>)
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	e9c1 2300 	strd	r2, r3, [r1]
	y = 0;
 8002226:	490e      	ldr	r1, [pc, #56]	; (8002260 <Odo_Init+0x58>)
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	e9c1 2300 	strd	r2, r3, [r1]
	o = (-M_PI/2);
 8002234:	490b      	ldr	r1, [pc, #44]	; (8002264 <Odo_Init+0x5c>)
 8002236:	a306      	add	r3, pc, #24	; (adr r3, 8002250 <Odo_Init+0x48>)
 8002238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223c:	e9c1 2300 	strd	r2, r3, [r1]
	return 0;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	f3af 8000 	nop.w
 8002250:	54442d18 	.word	0x54442d18
 8002254:	bff921fb 	.word	0xbff921fb
 8002258:	20000430 	.word	0x20000430
 800225c:	20000268 	.word	0x20000268
 8002260:	20000270 	.word	0x20000270
 8002264:	20000278 	.word	0x20000278

08002268 <Odo_GetX>:

double Odo_GetX(){
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
	return x;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <Odo_GetX+0x20>)
 800226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002272:	ec43 2b17 	vmov	d7, r2, r3
}
 8002276:	eeb0 0a47 	vmov.f32	s0, s14
 800227a:	eef0 0a67 	vmov.f32	s1, s15
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000268 	.word	0x20000268

0800228c <Odo_GetY>:

double Odo_GetY(){
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	return y;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <Odo_GetY+0x20>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	ec43 2b17 	vmov	d7, r2, r3
}
 800229a:	eeb0 0a47 	vmov.f32	s0, s14
 800229e:	eef0 0a67 	vmov.f32	s1, s15
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20000270 	.word	0x20000270

080022b0 <Odo_GetO>:

double Odo_GetO(){
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
	return o;
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <Odo_GetO+0x20>)
 80022b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ba:	ec43 2b17 	vmov	d7, r2, r3
}
 80022be:	eeb0 0a47 	vmov.f32	s0, s14
 80022c2:	eef0 0a67 	vmov.f32	s1, s15
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000278 	.word	0x20000278
 80022d4:	00000000 	.word	0x00000000

080022d8 <Odo_Odometry>:
/**
 *
 * @param Odo
 * @return
 */
uint8_t Odo_Odometry(int32_t leftTicks, int32_t rightTicks){
 80022d8:	b5b0      	push	{r4, r5, r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
	leftTicks = leftTicks * (-1);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	425b      	negs	r3, r3
 80022e6:	607b      	str	r3, [r7, #4]

	float dDistance = ((float)leftTicks * CodeurGauche.TicksCoeff
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	ee07 3a90 	vmov	s15, r3
 80022ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <Odo_Odometry+0x1a8>)
 80022f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80022f8:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (float)rightTicks * CodeurDroite.TicksCoeff) / 2;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002306:	4b5f      	ldr	r3, [pc, #380]	; (8002484 <Odo_Odometry+0x1ac>)
 8002308:	edd3 7a04 	vldr	s15, [r3, #16]
 800230c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002310:	ee37 7a27 	vadd.f32	s14, s14, s15
	float dDistance = ((float)leftTicks * CodeurGauche.TicksCoeff
 8002314:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002318:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800231c:	edc7 7a03 	vstr	s15, [r7, #12]
	float dAngle = ((float)rightTicks * CodeurDroite.TicksCoeff
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800232a:	4b56      	ldr	r3, [pc, #344]	; (8002484 <Odo_Odometry+0x1ac>)
 800232c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002330:	ee27 7a27 	vmul.f32	s14, s14, s15
			- (float)leftTicks * CodeurGauche.TicksCoeff)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800233e:	4b50      	ldr	r3, [pc, #320]	; (8002480 <Odo_Odometry+0x1a8>)
 8002340:	edd3 7a04 	vldr	s15, [r3, #16]
 8002344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002348:	ee37 7a67 	vsub.f32	s14, s14, s15
	float dAngle = ((float)rightTicks * CodeurDroite.TicksCoeff
 800234c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8002488 <Odo_Odometry+0x1b0>
 8002350:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002354:	edc7 7a02 	vstr	s15, [r7, #8]
			/ (float)ENTRAXE;

	x += dDistance * cos(o);
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f7fe f925 	bl	80005a8 <__aeabi_f2d>
 800235e:	4604      	mov	r4, r0
 8002360:	460d      	mov	r5, r1
 8002362:	4b4a      	ldr	r3, [pc, #296]	; (800248c <Odo_Odometry+0x1b4>)
 8002364:	ed93 7b00 	vldr	d7, [r3]
 8002368:	eeb0 0a47 	vmov.f32	s0, s14
 800236c:	eef0 0a67 	vmov.f32	s1, s15
 8002370:	f009 fb9e 	bl	800bab0 <cos>
 8002374:	ec53 2b10 	vmov	r2, r3, d0
 8002378:	4620      	mov	r0, r4
 800237a:	4629      	mov	r1, r5
 800237c:	f7fe f96c 	bl	8000658 <__aeabi_dmul>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4610      	mov	r0, r2
 8002386:	4619      	mov	r1, r3
 8002388:	4b41      	ldr	r3, [pc, #260]	; (8002490 <Odo_Odometry+0x1b8>)
 800238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238e:	f7fd ffad 	bl	80002ec <__adddf3>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	493e      	ldr	r1, [pc, #248]	; (8002490 <Odo_Odometry+0x1b8>)
 8002398:	e9c1 2300 	strd	r2, r3, [r1]
	y += dDistance * sin(o);
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f7fe f903 	bl	80005a8 <__aeabi_f2d>
 80023a2:	4604      	mov	r4, r0
 80023a4:	460d      	mov	r5, r1
 80023a6:	4b39      	ldr	r3, [pc, #228]	; (800248c <Odo_Odometry+0x1b4>)
 80023a8:	ed93 7b00 	vldr	d7, [r3]
 80023ac:	eeb0 0a47 	vmov.f32	s0, s14
 80023b0:	eef0 0a67 	vmov.f32	s1, s15
 80023b4:	f009 fbd8 	bl	800bb68 <sin>
 80023b8:	ec53 2b10 	vmov	r2, r3, d0
 80023bc:	4620      	mov	r0, r4
 80023be:	4629      	mov	r1, r5
 80023c0:	f7fe f94a 	bl	8000658 <__aeabi_dmul>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	4b31      	ldr	r3, [pc, #196]	; (8002494 <Odo_Odometry+0x1bc>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	f7fd ff8b 	bl	80002ec <__adddf3>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	492e      	ldr	r1, [pc, #184]	; (8002494 <Odo_Odometry+0x1bc>)
 80023dc:	e9c1 2300 	strd	r2, r3, [r1]
	o += dAngle;
 80023e0:	68b8      	ldr	r0, [r7, #8]
 80023e2:	f7fe f8e1 	bl	80005a8 <__aeabi_f2d>
 80023e6:	4b29      	ldr	r3, [pc, #164]	; (800248c <Odo_Odometry+0x1b4>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	f7fd ff7e 	bl	80002ec <__adddf3>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4925      	ldr	r1, [pc, #148]	; (800248c <Odo_Odometry+0x1b4>)
 80023f6:	e9c1 2300 	strd	r2, r3, [r1]

	if(o > M_PI)
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <Odo_Odometry+0x1b4>)
 80023fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002400:	a319      	add	r3, pc, #100	; (adr r3, 8002468 <Odo_Odometry+0x190>)
 8002402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002406:	f7fe fbb7 	bl	8000b78 <__aeabi_dcmpgt>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00c      	beq.n	800242a <Odo_Odometry+0x152>
		o -= M_PI * 2.0f;
 8002410:	4b1e      	ldr	r3, [pc, #120]	; (800248c <Odo_Odometry+0x1b4>)
 8002412:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002416:	a316      	add	r3, pc, #88	; (adr r3, 8002470 <Odo_Odometry+0x198>)
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	f7fd ff64 	bl	80002e8 <__aeabi_dsub>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4919      	ldr	r1, [pc, #100]	; (800248c <Odo_Odometry+0x1b4>)
 8002426:	e9c1 2300 	strd	r2, r3, [r1]

	if(o < (-1) * M_PI)
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <Odo_Odometry+0x1b4>)
 800242c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002430:	a311      	add	r3, pc, #68	; (adr r3, 8002478 <Odo_Odometry+0x1a0>)
 8002432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002436:	f7fe fb81 	bl	8000b3c <__aeabi_dcmplt>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00c      	beq.n	800245a <Odo_Odometry+0x182>
		o += M_PI * 2.0f;
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <Odo_Odometry+0x1b4>)
 8002442:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002446:	a30a      	add	r3, pc, #40	; (adr r3, 8002470 <Odo_Odometry+0x198>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	f7fd ff4e 	bl	80002ec <__adddf3>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	490d      	ldr	r1, [pc, #52]	; (800248c <Odo_Odometry+0x1b4>)
 8002456:	e9c1 2300 	strd	r2, r3, [r1]
	//printf("left:%d\t\tright:%d\r\n", Odo->leftTicks, Odo->rightTicks);

	//ENC_ResetCnt(Odo->LeftEncoder);
	//ENC_ResetCnt(Odo->RightEncoder);

	return 0;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bdb0      	pop	{r4, r5, r7, pc}
 8002464:	f3af 8000 	nop.w
 8002468:	54442d18 	.word	0x54442d18
 800246c:	400921fb 	.word	0x400921fb
 8002470:	54442d18 	.word	0x54442d18
 8002474:	401921fb 	.word	0x401921fb
 8002478:	54442d18 	.word	0x54442d18
 800247c:	c00921fb 	.word	0xc00921fb
 8002480:	2000040c 	.word	0x2000040c
 8002484:	200003f8 	.word	0x200003f8
 8002488:	43390000 	.word	0x43390000
 800248c:	20000278 	.word	0x20000278
 8002490:	20000268 	.word	0x20000268
 8002494:	20000270 	.word	0x20000270

08002498 <__io_putchar>:
/**
 * __io_putchar : Indispensable pour printf() sur la liaison uart
 * @param ch Caractère à écrire sur la liaison uart
 * @return 0 si HAL_OK
 */
uint8_t __io_putchar(int ch) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	if(HAL_OK != HAL_UART_Transmit(shell_huart, (uint8_t *)&ch, 1, HAL_MAX_DELAY)){
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <__io_putchar+0x2c>)
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	1d39      	adds	r1, r7, #4
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	2201      	movs	r2, #1
 80024ac:	f004 f955 	bl	800675a <HAL_UART_Transmit>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <__io_putchar+0x22>
		return 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <__io_putchar+0x24>
	}
	return 0;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000280 	.word	0x20000280

080024c8 <uart_write>:
 * uart_write : Ecrire sur la liaison uart
 * @param s Chaîne de caractères à écrire sur la liaison uart
 * @param size Longueur de la chaîne de caractère
 * @return 0 si HAL_OK
 */
uint8_t uart_write(char *s, uint16_t size) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
	if(HAL_OK != HAL_UART_Transmit(shell_huart, (uint8_t*)s, size, 0xFFFF)){
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <uart_write+0x30>)
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	887a      	ldrh	r2, [r7, #2]
 80024da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	f004 f93b 	bl	800675a <HAL_UART_Transmit>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <uart_write+0x26>
		return 1;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <uart_write+0x28>
	}
	return 0;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000280 	.word	0x20000280

080024fc <sh_help>:
 * sh_help : Menu d'aide du Shell
 * @param argc Nombre d'éléments de la ligne de commande
 * @param argv Eléments sous la forme d'un tableau de chaînes de caractères
 * @return 0
 */
uint8_t sh_help(int argc, char ** argv) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	e017      	b.n	800253c <sh_help+0x40>
		printf("%s : %s\r\n", shell_func_list[i].cmd, shell_func_list[i].description);
 800250c:	4910      	ldr	r1, [pc, #64]	; (8002550 <sh_help+0x54>)
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	6819      	ldr	r1, [r3, #0]
 800251c:	480c      	ldr	r0, [pc, #48]	; (8002550 <sh_help+0x54>)
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4613      	mov	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4403      	add	r3, r0
 800252a:	3308      	adds	r3, #8
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	4808      	ldr	r0, [pc, #32]	; (8002554 <sh_help+0x58>)
 8002532:	f005 fd2d 	bl	8007f90 <iprintf>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3301      	adds	r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <sh_help+0x5c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	429a      	cmp	r2, r3
 8002544:	dbe2      	blt.n	800250c <sh_help+0x10>
	}
	return 0;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	200002b4 	.word	0x200002b4
 8002554:	0800df60 	.word	0x0800df60
 8002558:	200002b0 	.word	0x200002b0

0800255c <sh_example>:
 * sh_example : Fonction d'exemple pour le Shell
 * @param argc Nombre d'éléments de la ligne de commande
 * @param argv Eléments sous la forme d'un tableau de chaînes de caractères
 * @return 0
 */
uint8_t sh_example(int argc, char ** argv) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
	printf("argc = %d\r\n", argc);
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	480d      	ldr	r0, [pc, #52]	; (80025a0 <sh_example+0x44>)
 800256a:	f005 fd11 	bl	8007f90 <iprintf>
	for (int i = 0 ; i < argc ; i++) {
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	e00c      	b.n	800258e <sh_example+0x32>
		printf("arg numero %d = %s\r\n", i, argv[i]);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	4413      	add	r3, r2
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	68f9      	ldr	r1, [r7, #12]
 8002582:	4808      	ldr	r0, [pc, #32]	; (80025a4 <sh_example+0x48>)
 8002584:	f005 fd04 	bl	8007f90 <iprintf>
	for (int i = 0 ; i < argc ; i++) {
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	3301      	adds	r3, #1
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	429a      	cmp	r2, r3
 8002594:	dbee      	blt.n	8002574 <sh_example+0x18>
	}
	return 0;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	0800df6c 	.word	0x0800df6c
 80025a4:	0800df78 	.word	0x0800df78

080025a8 <shell_init>:
/**
 *shell_init : Initialisation du Shell
 * @param huart UART Handle à utiliser
 * @return 0 si HAL_OK
 */
uint8_t shell_init(UART_HandleTypeDef* huart) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	shell_huart = huart;
 80025b0:	4a12      	ldr	r2, [pc, #72]	; (80025fc <shell_init+0x54>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6013      	str	r3, [r2, #0]

	uart_write(starting,sizeof(starting));
 80025b6:	2118      	movs	r1, #24
 80025b8:	4811      	ldr	r0, [pc, #68]	; (8002600 <shell_init+0x58>)
 80025ba:	f7ff ff85 	bl	80024c8 <uart_write>
	uart_write(prompt,sizeof(prompt));
 80025be:	2111      	movs	r1, #17
 80025c0:	4810      	ldr	r0, [pc, #64]	; (8002604 <shell_init+0x5c>)
 80025c2:	f7ff ff81 	bl	80024c8 <uart_write>

	shell_add("help", sh_help, (char *)"help");
 80025c6:	4a10      	ldr	r2, [pc, #64]	; (8002608 <shell_init+0x60>)
 80025c8:	4910      	ldr	r1, [pc, #64]	; (800260c <shell_init+0x64>)
 80025ca:	480f      	ldr	r0, [pc, #60]	; (8002608 <shell_init+0x60>)
 80025cc:	f000 f828 	bl	8002620 <shell_add>
	shell_add("f", sh_example, "Commande exemple");
 80025d0:	4a0f      	ldr	r2, [pc, #60]	; (8002610 <shell_init+0x68>)
 80025d2:	4910      	ldr	r1, [pc, #64]	; (8002614 <shell_init+0x6c>)
 80025d4:	4810      	ldr	r0, [pc, #64]	; (8002618 <shell_init+0x70>)
 80025d6:	f000 f823 	bl	8002620 <shell_add>

	if(HAL_OK != HAL_UART_Receive_IT(shell_huart, (uint8_t*)&c, 1)){
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <shell_init+0x54>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2201      	movs	r2, #1
 80025e0:	490e      	ldr	r1, [pc, #56]	; (800261c <shell_init+0x74>)
 80025e2:	4618      	mov	r0, r3
 80025e4:	f004 f94b 	bl	800687e <HAL_UART_Receive_IT>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <shell_init+0x4a>
		return 1;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <shell_init+0x4c>
	}

	return 0;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000280 	.word	0x20000280
 8002600:	20000000 	.word	0x20000000
 8002604:	20000018 	.word	0x20000018
 8002608:	0800df90 	.word	0x0800df90
 800260c:	080024fd 	.word	0x080024fd
 8002610:	0800df98 	.word	0x0800df98
 8002614:	0800255d 	.word	0x0800255d
 8002618:	0800dfac 	.word	0x0800dfac
 800261c:	20000284 	.word	0x20000284

08002620 <shell_add>:
 * @param cmd Commande à rentrer
 * @param pfunc Référence vers la fonction à appeler
 * @param description Description de la fonction pour le menu d'aide
 * @return 0 si le nombre de commande est valide
 */
uint8_t shell_add(char * cmd, int (* pfunc)(int argc, char ** argv), char * description) {
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 800262c:	4b18      	ldr	r3, [pc, #96]	; (8002690 <shell_add+0x70>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b0f      	cmp	r3, #15
 8002632:	dc26      	bgt.n	8002682 <shell_add+0x62>
		shell_func_list[shell_func_list_size].cmd = cmd;
 8002634:	4b16      	ldr	r3, [pc, #88]	; (8002690 <shell_add+0x70>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4916      	ldr	r1, [pc, #88]	; (8002694 <shell_add+0x74>)
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <shell_add+0x70>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4911      	ldr	r1, [pc, #68]	; (8002694 <shell_add+0x74>)
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	3304      	adds	r3, #4
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <shell_add+0x70>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	490c      	ldr	r1, [pc, #48]	; (8002694 <shell_add+0x74>)
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	3308      	adds	r3, #8
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <shell_add+0x70>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3301      	adds	r3, #1
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <shell_add+0x70>)
 800267c:	6013      	str	r3, [r2, #0]
		return 0;
 800267e:	2300      	movs	r3, #0
 8002680:	e000      	b.n	8002684 <shell_add+0x64>
	}

	return -1;
 8002682:	23ff      	movs	r3, #255	; 0xff
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	200002b0 	.word	0x200002b0
 8002694:	200002b4 	.word	0x200002b4

08002698 <shell_char_received>:

/**
 * shell_char_received : Traitement du dernier caractère reçu
 * @return 0
 */
uint8_t shell_char_received() {
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0

	switch (c) {
 800269c:	4b22      	ldr	r3, [pc, #136]	; (8002728 <shell_char_received+0x90>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d019      	beq.n	80026d8 <shell_char_received+0x40>
 80026a4:	2b0d      	cmp	r3, #13
 80026a6:	d126      	bne.n	80026f6 <shell_char_received+0x5e>
	case '\r':
		// Appui sur la touche ENTER
		printf("\r\n");
 80026a8:	4820      	ldr	r0, [pc, #128]	; (800272c <shell_char_received+0x94>)
 80026aa:	f005 fcf7 	bl	800809c <puts>
		buf[pos++] = 0;
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <shell_char_received+0x98>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	b2d1      	uxtb	r1, r2
 80026b6:	4a1e      	ldr	r2, [pc, #120]	; (8002730 <shell_char_received+0x98>)
 80026b8:	7011      	strb	r1, [r2, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <shell_char_received+0x9c>)
 80026be:	2100      	movs	r1, #0
 80026c0:	5499      	strb	r1, [r3, r2]
		pos = 0;
 80026c2:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <shell_char_received+0x98>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
		shell_exec(buf);
 80026c8:	481a      	ldr	r0, [pc, #104]	; (8002734 <shell_char_received+0x9c>)
 80026ca:	f000 f839 	bl	8002740 <shell_exec>
		uart_write(prompt,sizeof(prompt));
 80026ce:	2111      	movs	r1, #17
 80026d0:	4819      	ldr	r0, [pc, #100]	; (8002738 <shell_char_received+0xa0>)
 80026d2:	f7ff fef9 	bl	80024c8 <uart_write>
		break;
 80026d6:	e023      	b.n	8002720 <shell_char_received+0x88>

	case '\b':
		// Appui sur la touche DELETE
		if (pos > 0) {
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <shell_char_received+0x98>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d01e      	beq.n	800271e <shell_char_received+0x86>
			pos--;
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <shell_char_received+0x98>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <shell_char_received+0x98>)
 80026ea:	701a      	strb	r2, [r3, #0]
			uart_write(backspace, 3);
 80026ec:	2103      	movs	r1, #3
 80026ee:	4813      	ldr	r0, [pc, #76]	; (800273c <shell_char_received+0xa4>)
 80026f0:	f7ff feea 	bl	80024c8 <uart_write>
		}
		break;
 80026f4:	e013      	b.n	800271e <shell_char_received+0x86>

	default:
		if (pos < SHELL_BUFFER_SIZE) {
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <shell_char_received+0x98>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b27      	cmp	r3, #39	; 0x27
 80026fc:	d810      	bhi.n	8002720 <shell_char_received+0x88>
			uart_write(&c, 1);
 80026fe:	2101      	movs	r1, #1
 8002700:	4809      	ldr	r0, [pc, #36]	; (8002728 <shell_char_received+0x90>)
 8002702:	f7ff fee1 	bl	80024c8 <uart_write>
			buf[pos++] = c;
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <shell_char_received+0x98>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	b2d1      	uxtb	r1, r2
 800270e:	4a08      	ldr	r2, [pc, #32]	; (8002730 <shell_char_received+0x98>)
 8002710:	7011      	strb	r1, [r2, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	4b04      	ldr	r3, [pc, #16]	; (8002728 <shell_char_received+0x90>)
 8002716:	7819      	ldrb	r1, [r3, #0]
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <shell_char_received+0x9c>)
 800271a:	5499      	strb	r1, [r3, r2]
 800271c:	e000      	b.n	8002720 <shell_char_received+0x88>
		break;
 800271e:	bf00      	nop
		}
	}

	return 0;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000284 	.word	0x20000284
 800272c:	0800dfb0 	.word	0x0800dfb0
 8002730:	20000285 	.word	0x20000285
 8002734:	20000288 	.word	0x20000288
 8002738:	20000018 	.word	0x20000018
 800273c:	2000002c 	.word	0x2000002c

08002740 <shell_exec>:
/**
 * shell_exec : Recherche et execution de la commande
 * @param cmd Commande à traiter
 * @return Référence vers la fonction à exécuter
 */
uint8_t shell_exec(char * cmd) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b092      	sub	sp, #72	; 0x48
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	int argc;
	char * argv[SHELL_ARGC_MAX];
	char *p;

	// Séparation du header et des paramètres
	char header[SHELL_CMD_MAX_SIZE] = "";
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
	int h = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	63fb      	str	r3, [r7, #60]	; 0x3c

	while(cmd[h] != ' ' && h < SHELL_CMD_MAX_SIZE){
 800275c:	e00c      	b.n	8002778 <shell_exec+0x38>
		header[h] = cmd[h];
 800275e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	4413      	add	r3, r2
 8002764:	7819      	ldrb	r1, [r3, #0]
 8002766:	f107 0208 	add.w	r2, r7, #8
 800276a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800276c:	4413      	add	r3, r2
 800276e:	460a      	mov	r2, r1
 8002770:	701a      	strb	r2, [r3, #0]
		h++;
 8002772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002774:	3301      	adds	r3, #1
 8002776:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(cmd[h] != ' ' && h < SHELL_CMD_MAX_SIZE){
 8002778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b20      	cmp	r3, #32
 8002782:	d002      	beq.n	800278a <shell_exec+0x4a>
 8002784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002786:	2b0f      	cmp	r3, #15
 8002788:	dde9      	ble.n	800275e <shell_exec+0x1e>
	}
	header[h] = '\0';
 800278a:	f107 0208 	add.w	r2, r7, #8
 800278e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002790:	4413      	add	r3, r2
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]

	// Recherche de la commande et paramètres
	for(int i = 0 ; i < shell_func_list_size ; i++) {
 8002796:	2300      	movs	r3, #0
 8002798:	63bb      	str	r3, [r7, #56]	; 0x38
 800279a:	e047      	b.n	800282c <shell_exec+0xec>
		if (!strcmp(shell_func_list[i].cmd, header)) {
 800279c:	492a      	ldr	r1, [pc, #168]	; (8002848 <shell_exec+0x108>)
 800279e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f107 0208 	add.w	r2, r7, #8
 80027b0:	4611      	mov	r1, r2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fd fd2c 	bl	8000210 <strcmp>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d133      	bne.n	8002826 <shell_exec+0xe6>
			argc = 1;
 80027be:	2301      	movs	r3, #1
 80027c0:	647b      	str	r3, [r7, #68]	; 0x44
			argv[0] = cmd;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	61bb      	str	r3, [r7, #24]

			for(p = cmd ; *p != '\0' && argc < SHELL_ARGC_MAX ; p++){
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	643b      	str	r3, [r7, #64]	; 0x40
 80027ca:	e014      	b.n	80027f6 <shell_exec+0xb6>
				if(*p == ' ') {
 80027cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d10d      	bne.n	80027f0 <shell_exec+0xb0>
					*p = '\0';
 80027d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80027da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	647a      	str	r2, [r7, #68]	; 0x44
 80027e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027e2:	3201      	adds	r2, #1
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80027ea:	440b      	add	r3, r1
 80027ec:	f843 2c30 	str.w	r2, [r3, #-48]
			for(p = cmd ; *p != '\0' && argc < SHELL_ARGC_MAX ; p++){
 80027f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f2:	3301      	adds	r3, #1
 80027f4:	643b      	str	r3, [r7, #64]	; 0x40
 80027f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <shell_exec+0xc4>
 80027fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002800:	2b07      	cmp	r3, #7
 8002802:	dde3      	ble.n	80027cc <shell_exec+0x8c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8002804:	4910      	ldr	r1, [pc, #64]	; (8002848 <shell_exec+0x108>)
 8002806:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002808:	4613      	mov	r3, r2
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	3304      	adds	r3, #4
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f107 0218 	add.w	r2, r7, #24
 800281a:	4611      	mov	r1, r2
 800281c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800281e:	4798      	blx	r3
 8002820:	4603      	mov	r3, r0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	e00c      	b.n	8002840 <shell_exec+0x100>
	for(int i = 0 ; i < shell_func_list_size ; i++) {
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	3301      	adds	r3, #1
 800282a:	63bb      	str	r3, [r7, #56]	; 0x38
 800282c:	4b07      	ldr	r3, [pc, #28]	; (800284c <shell_exec+0x10c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002832:	429a      	cmp	r2, r3
 8002834:	dbb2      	blt.n	800279c <shell_exec+0x5c>
		}
	}
	printf("%s: command not found\r\n", cmd);
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4805      	ldr	r0, [pc, #20]	; (8002850 <shell_exec+0x110>)
 800283a:	f005 fba9 	bl	8007f90 <iprintf>
	return -1;
 800283e:	23ff      	movs	r3, #255	; 0xff
}
 8002840:	4618      	mov	r0, r3
 8002842:	3748      	adds	r7, #72	; 0x48
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	200002b4 	.word	0x200002b4
 800284c:	200002b0 	.word	0x200002b0
 8002850:	0800dfb4 	.word	0x0800dfb4

08002854 <strategyInit>:
uint8_t indexStrategy = 1;

/* End of variables ----------------------------------------------------------*/

/* Functions -----------------------------------------------------------------*/
void strategyInit(){
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
	strategy[0].x = 0;
 8002858:	492b      	ldr	r1, [pc, #172]	; (8002908 <strategyInit+0xb4>)
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	e9c1 2300 	strd	r2, r3, [r1]
	strategy[0].y = 1;
 8002866:	4928      	ldr	r1, [pc, #160]	; (8002908 <strategyInit+0xb4>)
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <strategyInit+0xb8>)
 800286e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	strategy[0].dir = 1;
 8002872:	4b25      	ldr	r3, [pc, #148]	; (8002908 <strategyInit+0xb4>)
 8002874:	2201      	movs	r2, #1
 8002876:	741a      	strb	r2, [r3, #16]

	strategy[1].x = 100;
 8002878:	4923      	ldr	r1, [pc, #140]	; (8002908 <strategyInit+0xb4>)
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	4b24      	ldr	r3, [pc, #144]	; (8002910 <strategyInit+0xbc>)
 8002880:	e9c1 2306 	strd	r2, r3, [r1, #24]
	strategy[1].y = 100;
 8002884:	4920      	ldr	r1, [pc, #128]	; (8002908 <strategyInit+0xb4>)
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	4b21      	ldr	r3, [pc, #132]	; (8002910 <strategyInit+0xbc>)
 800288c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	strategy[1].dir = 1;
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <strategyInit+0xb4>)
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	strategy[2].x = 200;
 8002898:	491b      	ldr	r1, [pc, #108]	; (8002908 <strategyInit+0xb4>)
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <strategyInit+0xc0>)
 80028a0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	strategy[2].y = 0;
 80028a4:	4918      	ldr	r1, [pc, #96]	; (8002908 <strategyInit+0xb4>)
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	strategy[2].dir = 1;
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <strategyInit+0xb4>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	strategy[3].x = 0;
 80028ba:	4913      	ldr	r1, [pc, #76]	; (8002908 <strategyInit+0xb4>)
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	strategy[3].y = 200;
 80028c8:	490f      	ldr	r1, [pc, #60]	; (8002908 <strategyInit+0xb4>)
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <strategyInit+0xc0>)
 80028d0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	strategy[3].dir = 1;
 80028d4:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <strategyInit+0xb4>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	strategy[4].x = 0;
 80028dc:	490a      	ldr	r1, [pc, #40]	; (8002908 <strategyInit+0xb4>)
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	strategy[4].y = 1;
 80028ea:	4907      	ldr	r1, [pc, #28]	; (8002908 <strategyInit+0xb4>)
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <strategyInit+0xb8>)
 80028f2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	strategy[4].dir = 1;
 80028f6:	4b04      	ldr	r3, [pc, #16]	; (8002908 <strategyInit+0xb4>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	20000438 	.word	0x20000438
 800290c:	3ff00000 	.word	0x3ff00000
 8002910:	40590000 	.word	0x40590000
 8002914:	40690000 	.word	0x40690000

08002918 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800291e:	463b      	mov	r3, r7
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800292a:	4b21      	ldr	r3, [pc, #132]	; (80029b0 <MX_ADC1_Init+0x98>)
 800292c:	4a21      	ldr	r2, [pc, #132]	; (80029b4 <MX_ADC1_Init+0x9c>)
 800292e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002930:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <MX_ADC1_Init+0x98>)
 8002932:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002936:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002938:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <MX_ADC1_Init+0x98>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800293e:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <MX_ADC1_Init+0x98>)
 8002940:	2200      	movs	r2, #0
 8002942:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002944:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <MX_ADC1_Init+0x98>)
 8002946:	2201      	movs	r2, #1
 8002948:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800294a:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <MX_ADC1_Init+0x98>)
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002952:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <MX_ADC1_Init+0x98>)
 8002954:	2200      	movs	r2, #0
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002958:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <MX_ADC1_Init+0x98>)
 800295a:	4a17      	ldr	r2, [pc, #92]	; (80029b8 <MX_ADC1_Init+0xa0>)
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800295e:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <MX_ADC1_Init+0x98>)
 8002960:	2200      	movs	r2, #0
 8002962:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <MX_ADC1_Init+0x98>)
 8002966:	2201      	movs	r2, #1
 8002968:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800296a:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <MX_ADC1_Init+0x98>)
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002972:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <MX_ADC1_Init+0x98>)
 8002974:	2200      	movs	r2, #0
 8002976:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002978:	480d      	ldr	r0, [pc, #52]	; (80029b0 <MX_ADC1_Init+0x98>)
 800297a:	f001 f83b 	bl	80039f4 <HAL_ADC_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002984:	f000 fb4e 	bl	8003024 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002988:	2308      	movs	r3, #8
 800298a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800298c:	2301      	movs	r3, #1
 800298e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002990:	2300      	movs	r3, #0
 8002992:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002994:	463b      	mov	r3, r7
 8002996:	4619      	mov	r1, r3
 8002998:	4805      	ldr	r0, [pc, #20]	; (80029b0 <MX_ADC1_Init+0x98>)
 800299a:	f001 f9c3 	bl	8003d24 <HAL_ADC_ConfigChannel>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80029a4:	f000 fb3e 	bl	8003024 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	200004b0 	.word	0x200004b0
 80029b4:	40012000 	.word	0x40012000
 80029b8:	0f000001 	.word	0x0f000001

080029bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1b      	ldr	r2, [pc, #108]	; (8002a48 <HAL_ADC_MspInit+0x8c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d12f      	bne.n	8002a3e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <HAL_ADC_MspInit+0x90>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <HAL_ADC_MspInit+0x90>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ec:	6453      	str	r3, [r2, #68]	; 0x44
 80029ee:	4b17      	ldr	r3, [pc, #92]	; (8002a4c <HAL_ADC_MspInit+0x90>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <HAL_ADC_MspInit+0x90>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <HAL_ADC_MspInit+0x90>)
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <HAL_ADC_MspInit+0x90>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a16:	2301      	movs	r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	4619      	mov	r1, r3
 8002a28:	4809      	ldr	r0, [pc, #36]	; (8002a50 <HAL_ADC_MspInit+0x94>)
 8002a2a:	f001 fd57 	bl	80044dc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	2012      	movs	r0, #18
 8002a34:	f001 fc89 	bl	800434a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002a38:	2012      	movs	r0, #18
 8002a3a:	f001 fca2 	bl	8004382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002a3e:	bf00      	nop
 8002a40:	3728      	adds	r7, #40	; 0x28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40012000 	.word	0x40012000
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40020400 	.word	0x40020400

08002a54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	; 0x28
 8002a58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	60da      	str	r2, [r3, #12]
 8002a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	4b45      	ldr	r3, [pc, #276]	; (8002b84 <MX_GPIO_Init+0x130>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	4a44      	ldr	r2, [pc, #272]	; (8002b84 <MX_GPIO_Init+0x130>)
 8002a74:	f043 0304 	orr.w	r3, r3, #4
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7a:	4b42      	ldr	r3, [pc, #264]	; (8002b84 <MX_GPIO_Init+0x130>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b3e      	ldr	r3, [pc, #248]	; (8002b84 <MX_GPIO_Init+0x130>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a3d      	ldr	r2, [pc, #244]	; (8002b84 <MX_GPIO_Init+0x130>)
 8002a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <MX_GPIO_Init+0x130>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	4b37      	ldr	r3, [pc, #220]	; (8002b84 <MX_GPIO_Init+0x130>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a36      	ldr	r2, [pc, #216]	; (8002b84 <MX_GPIO_Init+0x130>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <MX_GPIO_Init+0x130>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	4b30      	ldr	r3, [pc, #192]	; (8002b84 <MX_GPIO_Init+0x130>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a2f      	ldr	r2, [pc, #188]	; (8002b84 <MX_GPIO_Init+0x130>)
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <MX_GPIO_Init+0x130>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	607b      	str	r3, [r7, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTG_IN2_Pin|MOTG_IN1_Pin, GPIO_PIN_RESET);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2103      	movs	r1, #3
 8002ade:	482a      	ldr	r0, [pc, #168]	; (8002b88 <MX_GPIO_Init+0x134>)
 8002ae0:	f001 fe90 	bl	8004804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2120      	movs	r1, #32
 8002ae8:	4828      	ldr	r0, [pc, #160]	; (8002b8c <MX_GPIO_Init+0x138>)
 8002aea:	f001 fe8b 	bl	8004804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTD_IN3_Pin|MOTD_IN4_Pin, GPIO_PIN_RESET);
 8002aee:	2200      	movs	r2, #0
 8002af0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002af4:	4826      	ldr	r0, [pc, #152]	; (8002b90 <MX_GPIO_Init+0x13c>)
 8002af6:	f001 fe85 	bl	8004804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b00:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	f107 0314 	add.w	r3, r7, #20
 8002b0e:	4619      	mov	r1, r3
 8002b10:	481d      	ldr	r0, [pc, #116]	; (8002b88 <MX_GPIO_Init+0x134>)
 8002b12:	f001 fce3 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTG_IN2_Pin|MOTG_IN1_Pin;
 8002b16:	2303      	movs	r3, #3
 8002b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b26:	f107 0314 	add.w	r3, r7, #20
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4816      	ldr	r0, [pc, #88]	; (8002b88 <MX_GPIO_Init+0x134>)
 8002b2e:	f001 fcd5 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002b32:	2320      	movs	r3, #32
 8002b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b36:	2301      	movs	r3, #1
 8002b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002b42:	f107 0314 	add.w	r3, r7, #20
 8002b46:	4619      	mov	r1, r3
 8002b48:	4810      	ldr	r0, [pc, #64]	; (8002b8c <MX_GPIO_Init+0x138>)
 8002b4a:	f001 fcc7 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOTD_IN3_Pin|MOTD_IN4_Pin;
 8002b4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b54:	2301      	movs	r3, #1
 8002b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b60:	f107 0314 	add.w	r3, r7, #20
 8002b64:	4619      	mov	r1, r3
 8002b66:	480a      	ldr	r0, [pc, #40]	; (8002b90 <MX_GPIO_Init+0x13c>)
 8002b68:	f001 fcb8 	bl	80044dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2100      	movs	r1, #0
 8002b70:	2028      	movs	r0, #40	; 0x28
 8002b72:	f001 fbea 	bl	800434a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b76:	2028      	movs	r0, #40	; 0x28
 8002b78:	f001 fc03 	bl	8004382 <HAL_NVIC_EnableIRQ>

}
 8002b7c:	bf00      	nop
 8002b7e:	3728      	adds	r7, #40	; 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40020800 	.word	0x40020800
 8002b8c:	40020000 	.word	0x40020000
 8002b90:	40020400 	.word	0x40020400

08002b94 <start>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int start(int argc, char ** argv){
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
	testStart = 1;
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <start+0x20>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	701a      	strb	r2, [r3, #0]
	return 0;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000374 	.word	0x20000374

08002bb8 <stop>:

int stop(int argc, char ** argv){
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
	testStart = 0;
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <stop+0x20>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
	return 0;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20000374 	.word	0x20000374

08002bdc <target>:

int target(int argc, char ** argv){
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
	if(argc == 3){
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d12d      	bne.n	8002c48 <target+0x6c>
		float x = atof(argv[1]);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	3304      	adds	r3, #4
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f004 fd2c 	bl	8007650 <atof>
 8002bf8:	ec53 2b10 	vmov	r2, r3, d0
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f7fe f822 	bl	8000c48 <__aeabi_d2f>
 8002c04:	4603      	mov	r3, r0
 8002c06:	60fb      	str	r3, [r7, #12]
		float y = atof(argv[2]);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	3308      	adds	r3, #8
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f004 fd1e 	bl	8007650 <atof>
 8002c14:	ec53 2b10 	vmov	r2, r3, d0
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f7fe f814 	bl	8000c48 <__aeabi_d2f>
 8002c20:	4603      	mov	r3, r0
 8002c22:	60bb      	str	r3, [r7, #8]
		setTargetX((double)x);
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7fd fcbf 	bl	80005a8 <__aeabi_f2d>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	ec43 2b10 	vmov	d0, r2, r3
 8002c32:	f7fe fa0b 	bl	800104c <setTargetX>
		setTargetY((double)y);
 8002c36:	68b8      	ldr	r0, [r7, #8]
 8002c38:	f7fd fcb6 	bl	80005a8 <__aeabi_f2d>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	ec43 2b10 	vmov	d0, r2, r3
 8002c44:	f7fe fa1a 	bl	800107c <setTargetY>
	}

	return 0;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002c5a:	f000 fe59 	bl	8003910 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002c5e:	f000 f8f9 	bl	8002e54 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002c62:	f7ff fef7 	bl	8002a54 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002c66:	f000 fdaf 	bl	80037c8 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8002c6a:	f000 fb31 	bl	80032d0 <MX_TIM1_Init>
	MX_TIM2_Init();
 8002c6e:	f000 fbdb 	bl	8003428 <MX_TIM2_Init>
	MX_TIM6_Init();
 8002c72:	f000 fc81 	bl	8003578 <MX_TIM6_Init>
	MX_ADC1_Init();
 8002c76:	f7ff fe4f 	bl	8002918 <MX_ADC1_Init>
	MX_TIM3_Init();
 8002c7a:	f000 fc29 	bl	80034d0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	/* Initialisation du shell ---------------------------------------------------*/
	shell_init(&huart2);
 8002c7e:	4857      	ldr	r0, [pc, #348]	; (8002ddc <main+0x188>)
 8002c80:	f7ff fc92 	bl	80025a8 <shell_init>
	shell_add("start", start, "Demarrage");
 8002c84:	4a56      	ldr	r2, [pc, #344]	; (8002de0 <main+0x18c>)
 8002c86:	4957      	ldr	r1, [pc, #348]	; (8002de4 <main+0x190>)
 8002c88:	4857      	ldr	r0, [pc, #348]	; (8002de8 <main+0x194>)
 8002c8a:	f7ff fcc9 	bl	8002620 <shell_add>
	shell_add("stop", stop, "Arret");
 8002c8e:	4a57      	ldr	r2, [pc, #348]	; (8002dec <main+0x198>)
 8002c90:	4957      	ldr	r1, [pc, #348]	; (8002df0 <main+0x19c>)
 8002c92:	4858      	ldr	r0, [pc, #352]	; (8002df4 <main+0x1a0>)
 8002c94:	f7ff fcc4 	bl	8002620 <shell_add>
	shell_add("target", target, "Mise a jour de la position cible");
 8002c98:	4a57      	ldr	r2, [pc, #348]	; (8002df8 <main+0x1a4>)
 8002c9a:	4958      	ldr	r1, [pc, #352]	; (8002dfc <main+0x1a8>)
 8002c9c:	4858      	ldr	r0, [pc, #352]	; (8002e00 <main+0x1ac>)
 8002c9e:	f7ff fcbf 	bl	8002620 <shell_add>
	/* Fin initialisation du shell -----------------------------------------------*/

	/* Initialisation des moteurs ------------------------------------------------*/

	/* Moteur Gauche */
	MOT_InitTimer(&MoteurGauche, &htim1, TIM_CHANNEL_1); // PA8(D7)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	4957      	ldr	r1, [pc, #348]	; (8002e04 <main+0x1b0>)
 8002ca6:	4858      	ldr	r0, [pc, #352]	; (8002e08 <main+0x1b4>)
 8002ca8:	f7ff f99b 	bl	8001fe2 <MOT_InitTimer>
	MOT_InitGPIOs(&MoteurGauche, GPIOC, GPIO_PIN_1, GPIOC, GPIO_PIN_0); // IN1:PC0 & IN2:PC1
 8002cac:	2301      	movs	r3, #1
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	4b56      	ldr	r3, [pc, #344]	; (8002e0c <main+0x1b8>)
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	4955      	ldr	r1, [pc, #340]	; (8002e0c <main+0x1b8>)
 8002cb6:	4854      	ldr	r0, [pc, #336]	; (8002e08 <main+0x1b4>)
 8002cb8:	f7ff f9b1 	bl	800201e <MOT_InitGPIOs>
	MOT_SetCoeff(&MoteurGauche, 1.2, 0.1);
 8002cbc:	eddf 0a54 	vldr	s1, [pc, #336]	; 8002e10 <main+0x1bc>
 8002cc0:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8002e14 <main+0x1c0>
 8002cc4:	4850      	ldr	r0, [pc, #320]	; (8002e08 <main+0x1b4>)
 8002cc6:	f7ff f9c4 	bl	8002052 <MOT_SetCoeff>
	MOT_SetDirection(&MoteurGauche, MOT_FUNCTIONS_FORWARD);
 8002cca:	2101      	movs	r1, #1
 8002ccc:	484e      	ldr	r0, [pc, #312]	; (8002e08 <main+0x1b4>)
 8002cce:	f7ff f9d4 	bl	800207a <MOT_SetDirection>
	MOT_SetDutyCycle(&MoteurGauche, 0);
 8002cd2:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8002e18 <main+0x1c4>
 8002cd6:	484c      	ldr	r0, [pc, #304]	; (8002e08 <main+0x1b4>)
 8002cd8:	f7ff fa28 	bl	800212c <MOT_SetDutyCycle>

	/* Moteur Droite */
	MOT_InitTimer(&MoteurDroite, &htim1, TIM_CHANNEL_2); // PA9(D8)
 8002cdc:	2204      	movs	r2, #4
 8002cde:	4949      	ldr	r1, [pc, #292]	; (8002e04 <main+0x1b0>)
 8002ce0:	484e      	ldr	r0, [pc, #312]	; (8002e1c <main+0x1c8>)
 8002ce2:	f7ff f97e 	bl	8001fe2 <MOT_InitTimer>
	MOT_InitGPIOs(&MoteurDroite, GPIOB, GPIO_PIN_8, GPIOB, GPIO_PIN_9); // IN1:PB8 & IN2:PB9
 8002ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	4b4c      	ldr	r3, [pc, #304]	; (8002e20 <main+0x1cc>)
 8002cee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cf2:	494b      	ldr	r1, [pc, #300]	; (8002e20 <main+0x1cc>)
 8002cf4:	4849      	ldr	r0, [pc, #292]	; (8002e1c <main+0x1c8>)
 8002cf6:	f7ff f992 	bl	800201e <MOT_InitGPIOs>
	MOT_SetCoeff(&MoteurDroite, 1.2, 0.1);
 8002cfa:	eddf 0a45 	vldr	s1, [pc, #276]	; 8002e10 <main+0x1bc>
 8002cfe:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8002e14 <main+0x1c0>
 8002d02:	4846      	ldr	r0, [pc, #280]	; (8002e1c <main+0x1c8>)
 8002d04:	f7ff f9a5 	bl	8002052 <MOT_SetCoeff>
	MOT_SetDirection(&MoteurDroite, MOT_FUNCTIONS_FORWARD);
 8002d08:	2101      	movs	r1, #1
 8002d0a:	4844      	ldr	r0, [pc, #272]	; (8002e1c <main+0x1c8>)
 8002d0c:	f7ff f9b5 	bl	800207a <MOT_SetDirection>
	MOT_SetDutyCycle(&MoteurDroite, 0);
 8002d10:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8002e18 <main+0x1c4>
 8002d14:	4841      	ldr	r0, [pc, #260]	; (8002e1c <main+0x1c8>)
 8002d16:	f7ff fa09 	bl	800212c <MOT_SetDutyCycle>
	/* Fin initialisation des moteurs --------------------------------------------*/

	/* Initialisation des encodeurs ----------------------------------------------*/

	/* Encodeur Gauche */
	ENC_InitTimer(&CodeurGauche, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2); // PhA:PA0 et PhB:PA1
 8002d1a:	2304      	movs	r3, #4
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	4941      	ldr	r1, [pc, #260]	; (8002e24 <main+0x1d0>)
 8002d20:	4841      	ldr	r0, [pc, #260]	; (8002e28 <main+0x1d4>)
 8002d22:	f7ff f903 	bl	8001f2c <ENC_InitTimer>
	ENC_SetTicksPerRev(&CodeurGauche, 1364.8);
 8002d26:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8002e2c <main+0x1d8>
 8002d2a:	483f      	ldr	r0, [pc, #252]	; (8002e28 <main+0x1d4>)
 8002d2c:	f7ff f922 	bl	8001f74 <ENC_SetTicksPerRev>
	CodeurGauche.TicksCoeff = 0.0821596;
 8002d30:	4b3d      	ldr	r3, [pc, #244]	; (8002e28 <main+0x1d4>)
 8002d32:	4a3f      	ldr	r2, [pc, #252]	; (8002e30 <main+0x1dc>)
 8002d34:	611a      	str	r2, [r3, #16]
	// December 2021 Codeur Gauche Coeff : 0.085430

	/* Encodeur Droite */
	ENC_InitTimer(&CodeurDroite, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2); // PhA:PA6 et PhB:PA7
 8002d36:	2304      	movs	r3, #4
 8002d38:	2200      	movs	r2, #0
 8002d3a:	493e      	ldr	r1, [pc, #248]	; (8002e34 <main+0x1e0>)
 8002d3c:	483e      	ldr	r0, [pc, #248]	; (8002e38 <main+0x1e4>)
 8002d3e:	f7ff f8f5 	bl	8001f2c <ENC_InitTimer>
	ENC_SetTicksPerRev(&CodeurDroite, 1364.8);
 8002d42:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8002e2c <main+0x1d8>
 8002d46:	483c      	ldr	r0, [pc, #240]	; (8002e38 <main+0x1e4>)
 8002d48:	f7ff f914 	bl	8001f74 <ENC_SetTicksPerRev>
	CodeurDroite.TicksCoeff = 0.0822777;
 8002d4c:	4b3a      	ldr	r3, [pc, #232]	; (8002e38 <main+0x1e4>)
 8002d4e:	4a3b      	ldr	r2, [pc, #236]	; (8002e3c <main+0x1e8>)
 8002d50:	611a      	str	r2, [r3, #16]
	// December 2021 Codeur Droite Coeff : 0.084198

	/* Fin initialisation des encodeurs ------------------------------------------*/

	// Initialisation de l'asservissement
	strategyInit();
 8002d52:	f7ff fd7f 	bl	8002854 <strategyInit>
	vit_SetTimer(&htim6);
 8002d56:	483a      	ldr	r0, [pc, #232]	; (8002e40 <main+0x1ec>)
 8002d58:	f7ff f82a 	bl	8001db0 <vit_SetTimer>
	Odo_Init();
 8002d5c:	f7ff fa54 	bl	8002208 <Odo_Init>


	reglage = 0;
 8002d60:	4b38      	ldr	r3, [pc, #224]	; (8002e44 <main+0x1f0>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
	testStart = 0;
 8002d66:	4b38      	ldr	r3, [pc, #224]	; (8002e48 <main+0x1f4>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
		//printf("cpt = %d\r\n",cpt);
		//printf("Ticks = %d\r\n",i);
		//printf("%d\r\n",i);
		//printf("%f\r\n",(float)DISTANCE_PER_TICK);

		if(testStart){
 8002d6c:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <main+0x1f4>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0fb      	beq.n	8002d6c <main+0x118>

			if(isArrived()){
 8002d74:	f7fe f99a 	bl	80010ac <isArrived>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f6      	beq.n	8002d6c <main+0x118>

				if(indexStrategy >= (int)5){
 8002d7e:	4b33      	ldr	r3, [pc, #204]	; (8002e4c <main+0x1f8>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d8f2      	bhi.n	8002d6c <main+0x118>
					//bTypeAsserv = 1;
					//setTargetX(200);
					//setTargetY(100);
				} else {
					setTargetX(strategy[indexStrategy].x);
 8002d86:	4b31      	ldr	r3, [pc, #196]	; (8002e4c <main+0x1f8>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4a30      	ldr	r2, [pc, #192]	; (8002e50 <main+0x1fc>)
 8002d8e:	460b      	mov	r3, r1
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	440b      	add	r3, r1
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4413      	add	r3, r2
 8002d98:	ed93 7b00 	vldr	d7, [r3]
 8002d9c:	eeb0 0a47 	vmov.f32	s0, s14
 8002da0:	eef0 0a67 	vmov.f32	s1, s15
 8002da4:	f7fe f952 	bl	800104c <setTargetX>
					setTargetY(strategy[indexStrategy].y);
 8002da8:	4b28      	ldr	r3, [pc, #160]	; (8002e4c <main+0x1f8>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	4619      	mov	r1, r3
 8002dae:	4a28      	ldr	r2, [pc, #160]	; (8002e50 <main+0x1fc>)
 8002db0:	460b      	mov	r3, r1
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	440b      	add	r3, r1
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4413      	add	r3, r2
 8002dba:	3308      	adds	r3, #8
 8002dbc:	ed93 7b00 	vldr	d7, [r3]
 8002dc0:	eeb0 0a47 	vmov.f32	s0, s14
 8002dc4:	eef0 0a67 	vmov.f32	s1, s15
 8002dc8:	f7fe f958 	bl	800107c <setTargetY>
					indexStrategy++;
 8002dcc:	4b1f      	ldr	r3, [pc, #124]	; (8002e4c <main+0x1f8>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <main+0x1f8>)
 8002dd6:	701a      	strb	r2, [r3, #0]
		if(testStart){
 8002dd8:	e7c8      	b.n	8002d6c <main+0x118>
 8002dda:	bf00      	nop
 8002ddc:	20000618 	.word	0x20000618
 8002de0:	0800dfcc 	.word	0x0800dfcc
 8002de4:	08002b95 	.word	0x08002b95
 8002de8:	0800dfd8 	.word	0x0800dfd8
 8002dec:	0800dfe0 	.word	0x0800dfe0
 8002df0:	08002bb9 	.word	0x08002bb9
 8002df4:	0800dfe8 	.word	0x0800dfe8
 8002df8:	0800dff0 	.word	0x0800dff0
 8002dfc:	08002bdd 	.word	0x08002bdd
 8002e00:	0800e014 	.word	0x0800e014
 8002e04:	20000588 	.word	0x20000588
 8002e08:	20000388 	.word	0x20000388
 8002e0c:	40020800 	.word	0x40020800
 8002e10:	3dcccccd 	.word	0x3dcccccd
 8002e14:	3f99999a 	.word	0x3f99999a
 8002e18:	00000000 	.word	0x00000000
 8002e1c:	200003c0 	.word	0x200003c0
 8002e20:	40020400 	.word	0x40020400
 8002e24:	200005d0 	.word	0x200005d0
 8002e28:	2000040c 	.word	0x2000040c
 8002e2c:	44aa999a 	.word	0x44aa999a
 8002e30:	3da8434b 	.word	0x3da8434b
 8002e34:	200004f8 	.word	0x200004f8
 8002e38:	200003f8 	.word	0x200003f8
 8002e3c:	3da88136 	.word	0x3da88136
 8002e40:	20000540 	.word	0x20000540
 8002e44:	20000375 	.word	0x20000375
 8002e48:	20000374 	.word	0x20000374
 8002e4c:	20000030 	.word	0x20000030
 8002e50:	20000438 	.word	0x20000438

08002e54 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b094      	sub	sp, #80	; 0x50
 8002e58:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e5a:	f107 031c 	add.w	r3, r7, #28
 8002e5e:	2234      	movs	r2, #52	; 0x34
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f004 fc22 	bl	80076ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e68:	f107 0308 	add.w	r3, r7, #8
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002e78:	2300      	movs	r3, #0
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <SystemClock_Config+0xd4>)
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	4a29      	ldr	r2, [pc, #164]	; (8002f28 <SystemClock_Config+0xd4>)
 8002e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e86:	6413      	str	r3, [r2, #64]	; 0x40
 8002e88:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <SystemClock_Config+0xd4>)
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002e94:	2300      	movs	r3, #0
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <SystemClock_Config+0xd8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002ea0:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <SystemClock_Config+0xd8>)
 8002ea2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <SystemClock_Config+0xd8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002eb0:	603b      	str	r3, [r7, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8002ec8:	2310      	movs	r3, #16
 8002eca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002ecc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002ed0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002eda:	2302      	movs	r3, #2
 8002edc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ede:	f107 031c 	add.w	r3, r7, #28
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f001 ff8c 	bl	8004e00 <HAL_RCC_OscConfig>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8002eee:	f000 f899 	bl	8003024 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ef2:	230f      	movs	r3, #15
 8002ef4:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f02:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f08:	f107 0308 	add.w	r3, r7, #8
 8002f0c:	2102      	movs	r1, #2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f001 fcaa 	bl	8004868 <HAL_RCC_ClockConfig>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <SystemClock_Config+0xca>
	{
		Error_Handler();
 8002f1a:	f000 f883 	bl	8003024 <Error_Handler>
	}
}
 8002f1e:	bf00      	nop
 8002f20:	3750      	adds	r7, #80	; 0x50
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	40007000 	.word	0x40007000

08002f30 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f40:	d110      	bne.n	8002f64 <HAL_GPIO_EXTI_Callback+0x34>
		if(testStart == 0) {
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_GPIO_EXTI_Callback+0x28>
			testStart = 1;
 8002f4a:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
			printf("Debut du test\r\n");
 8002f50:	4807      	ldr	r0, [pc, #28]	; (8002f70 <HAL_GPIO_EXTI_Callback+0x40>)
 8002f52:	f005 f8a3 	bl	800809c <puts>
		else {
			testStart = 0;
			printf("Fin du test\r\n");
		}
	}
}
 8002f56:	e005      	b.n	8002f64 <HAL_GPIO_EXTI_Callback+0x34>
			testStart = 0;
 8002f58:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
			printf("Fin du test\r\n");
 8002f5e:	4805      	ldr	r0, [pc, #20]	; (8002f74 <HAL_GPIO_EXTI_Callback+0x44>)
 8002f60:	f005 f89c 	bl	800809c <puts>
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000374 	.word	0x20000374
 8002f70:	0800e01c 	.word	0x0800e01c
 8002f74:	0800e02c 	.word	0x0800e02c

08002f78 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a06      	ldr	r2, [pc, #24]	; (8002fa0 <HAL_UART_RxCpltCallback+0x28>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d106      	bne.n	8002f98 <HAL_UART_RxCpltCallback+0x20>
		shell_char_received();
 8002f8a:	f7ff fb85 	bl	8002698 <shell_char_received>
		HAL_UART_Receive_IT(&huart2, (uint8_t*)&c, 1);
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4904      	ldr	r1, [pc, #16]	; (8002fa4 <HAL_UART_RxCpltCallback+0x2c>)
 8002f92:	4805      	ldr	r0, [pc, #20]	; (8002fa8 <HAL_UART_RxCpltCallback+0x30>)
 8002f94:	f003 fc73 	bl	800687e <HAL_UART_Receive_IT>
	}
}
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40004400 	.word	0x40004400
 8002fa4:	20000284 	.word	0x20000284
 8002fa8:	20000618 	.word	0x20000618

08002fac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0f      	ldr	r2, [pc, #60]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d117      	bne.n	8002fee <HAL_TIM_PeriodElapsedCallback+0x42>
		if(testStart == 1){
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d109      	bne.n	8002fda <HAL_TIM_PeriodElapsedCallback+0x2e>

			//Pos_ControlLoop_Smooth();


			if(bTypeAsserv == 0)
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d102      	bne.n	8002fd4 <HAL_TIM_PeriodElapsedCallback+0x28>
				Pos_ControlLoop_2steps();
 8002fce:	f7fe f94b 	bl	8001268 <Pos_ControlLoop_2steps>
		else{
			MOT_SetDutyCycle(&MoteurGauche, 0);
			MOT_SetDutyCycle(&MoteurDroite, 0);
		}
	}
}
 8002fd2:	e00c      	b.n	8002fee <HAL_TIM_PeriodElapsedCallback+0x42>
				Pos_ControlLoop_Smooth();
 8002fd4:	f7fe fca4 	bl	8001920 <Pos_ControlLoop_Smooth>
}
 8002fd8:	e009      	b.n	8002fee <HAL_TIM_PeriodElapsedCallback+0x42>
			MOT_SetDutyCycle(&MoteurGauche, 0);
 8002fda:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8003004 <HAL_TIM_PeriodElapsedCallback+0x58>
 8002fde:	480a      	ldr	r0, [pc, #40]	; (8003008 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002fe0:	f7ff f8a4 	bl	800212c <MOT_SetDutyCycle>
			MOT_SetDutyCycle(&MoteurDroite, 0);
 8002fe4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8003004 <HAL_TIM_PeriodElapsedCallback+0x58>
 8002fe8:	4808      	ldr	r0, [pc, #32]	; (800300c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002fea:	f7ff f89f 	bl	800212c <MOT_SetDutyCycle>
}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40001000 	.word	0x40001000
 8002ffc:	20000374 	.word	0x20000374
 8003000:	20000376 	.word	0x20000376
 8003004:	00000000 	.word	0x00000000
 8003008:	20000388 	.word	0x20000388
 800300c:	200003c0 	.word	0x200003c0

08003010 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
		//uint32_t val = HAL_ADC_GetValue(&hadc1);
		//printf("val = %ld\r\n", val);
		//HAL_ADC_Start_IT(&hadc1);
	}
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003028:	b672      	cpsid	i
}
 800302a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800302c:	e7fe      	b.n	800302c <Error_Handler+0x8>
	...

08003030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <HAL_MspInit+0x4c>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	4a0f      	ldr	r2, [pc, #60]	; (800307c <HAL_MspInit+0x4c>)
 8003040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003044:	6453      	str	r3, [r2, #68]	; 0x44
 8003046:	4b0d      	ldr	r3, [pc, #52]	; (800307c <HAL_MspInit+0x4c>)
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800304e:	607b      	str	r3, [r7, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	603b      	str	r3, [r7, #0]
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_MspInit+0x4c>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	4a08      	ldr	r2, [pc, #32]	; (800307c <HAL_MspInit+0x4c>)
 800305c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003060:	6413      	str	r3, [r2, #64]	; 0x40
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_MspInit+0x4c>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800306e:	2007      	movs	r0, #7
 8003070:	f001 f960 	bl	8004334 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40023800 	.word	0x40023800

08003080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003084:	e7fe      	b.n	8003084 <NMI_Handler+0x4>

08003086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800308a:	e7fe      	b.n	800308a <HardFault_Handler+0x4>

0800308c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003090:	e7fe      	b.n	8003090 <MemManage_Handler+0x4>

08003092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003096:	e7fe      	b.n	8003096 <BusFault_Handler+0x4>

08003098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800309c:	e7fe      	b.n	800309c <UsageFault_Handler+0x4>

0800309e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800309e:	b480      	push	{r7}
 80030a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030cc:	f000 fc72 	bl	80039b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030d0:	bf00      	nop
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80030d8:	4802      	ldr	r0, [pc, #8]	; (80030e4 <ADC_IRQHandler+0x10>)
 80030da:	f000 fcce 	bl	8003a7a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200004b0 	.word	0x200004b0

080030e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80030ec:	4802      	ldr	r0, [pc, #8]	; (80030f8 <USART2_IRQHandler+0x10>)
 80030ee:	f003 fbf7 	bl	80068e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000618 	.word	0x20000618

080030fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003100:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003104:	f001 fb98 	bl	8004838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003108:	bf00      	nop
 800310a:	bd80      	pop	{r7, pc}

0800310c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003110:	4802      	ldr	r0, [pc, #8]	; (800311c <TIM6_DAC_IRQHandler+0x10>)
 8003112:	f002 fc29 	bl	8005968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000540 	.word	0x20000540

08003120 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
	return 1;
 8003124:	2301      	movs	r3, #1
}
 8003126:	4618      	mov	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <_kill>:

int _kill(int pid, int sig)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800313a:	f004 fa8d 	bl	8007658 <__errno>
 800313e:	4603      	mov	r3, r0
 8003140:	2216      	movs	r2, #22
 8003142:	601a      	str	r2, [r3, #0]
	return -1;
 8003144:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <_exit>:

void _exit (int status)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003158:	f04f 31ff 	mov.w	r1, #4294967295
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff ffe7 	bl	8003130 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003162:	e7fe      	b.n	8003162 <_exit+0x12>

08003164 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	e00a      	b.n	800318c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003176:	f3af 8000 	nop.w
 800317a:	4601      	mov	r1, r0
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	60ba      	str	r2, [r7, #8]
 8003182:	b2ca      	uxtb	r2, r1
 8003184:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	3301      	adds	r3, #1
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	429a      	cmp	r2, r3
 8003192:	dbf0      	blt.n	8003176 <_read+0x12>
	}

return len;
 8003194:	687b      	ldr	r3, [r7, #4]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	e009      	b.n	80031c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	60ba      	str	r2, [r7, #8]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff f96d 	bl	8002498 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	3301      	adds	r3, #1
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	dbf1      	blt.n	80031b0 <_write+0x12>
	}
	return len;
 80031cc:	687b      	ldr	r3, [r7, #4]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <_close>:

int _close(int file)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
	return -1;
 80031de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031fe:	605a      	str	r2, [r3, #4]
	return 0;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <_isatty>:

int _isatty(int file)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
	return 1;
 8003216:	2301      	movs	r3, #1
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
	return 0;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003248:	4a14      	ldr	r2, [pc, #80]	; (800329c <_sbrk+0x5c>)
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <_sbrk+0x60>)
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003254:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <_sbrk+0x64>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <_sbrk+0x64>)
 800325e:	4a12      	ldr	r2, [pc, #72]	; (80032a8 <_sbrk+0x68>)
 8003260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003262:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <_sbrk+0x64>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	429a      	cmp	r2, r3
 800326e:	d207      	bcs.n	8003280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003270:	f004 f9f2 	bl	8007658 <__errno>
 8003274:	4603      	mov	r3, r0
 8003276:	220c      	movs	r2, #12
 8003278:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800327a:	f04f 33ff 	mov.w	r3, #4294967295
 800327e:	e009      	b.n	8003294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003280:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <_sbrk+0x64>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003286:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <_sbrk+0x64>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	4a05      	ldr	r2, [pc, #20]	; (80032a4 <_sbrk+0x64>)
 8003290:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003292:	68fb      	ldr	r3, [r7, #12]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20020000 	.word	0x20020000
 80032a0:	00000400 	.word	0x00000400
 80032a4:	20000378 	.word	0x20000378
 80032a8:	20000670 	.word	0x20000670

080032ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032b0:	4b06      	ldr	r3, [pc, #24]	; (80032cc <SystemInit+0x20>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	4a05      	ldr	r2, [pc, #20]	; (80032cc <SystemInit+0x20>)
 80032b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000ed00 	.word	0xe000ed00

080032d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b096      	sub	sp, #88	; 0x58
 80032d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	605a      	str	r2, [r3, #4]
 80032e0:	609a      	str	r2, [r3, #8]
 80032e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	60da      	str	r2, [r3, #12]
 80032fc:	611a      	str	r2, [r3, #16]
 80032fe:	615a      	str	r2, [r3, #20]
 8003300:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003302:	1d3b      	adds	r3, r7, #4
 8003304:	2220      	movs	r2, #32
 8003306:	2100      	movs	r1, #0
 8003308:	4618      	mov	r0, r3
 800330a:	f004 f9cf 	bl	80076ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800330e:	4b44      	ldr	r3, [pc, #272]	; (8003420 <MX_TIM1_Init+0x150>)
 8003310:	4a44      	ldr	r2, [pc, #272]	; (8003424 <MX_TIM1_Init+0x154>)
 8003312:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003314:	4b42      	ldr	r3, [pc, #264]	; (8003420 <MX_TIM1_Init+0x150>)
 8003316:	2200      	movs	r2, #0
 8003318:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800331a:	4b41      	ldr	r3, [pc, #260]	; (8003420 <MX_TIM1_Init+0x150>)
 800331c:	2200      	movs	r2, #0
 800331e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3360-1;
 8003320:	4b3f      	ldr	r3, [pc, #252]	; (8003420 <MX_TIM1_Init+0x150>)
 8003322:	f640 521f 	movw	r2, #3359	; 0xd1f
 8003326:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003328:	4b3d      	ldr	r3, [pc, #244]	; (8003420 <MX_TIM1_Init+0x150>)
 800332a:	2200      	movs	r2, #0
 800332c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800332e:	4b3c      	ldr	r3, [pc, #240]	; (8003420 <MX_TIM1_Init+0x150>)
 8003330:	2200      	movs	r2, #0
 8003332:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003334:	4b3a      	ldr	r3, [pc, #232]	; (8003420 <MX_TIM1_Init+0x150>)
 8003336:	2200      	movs	r2, #0
 8003338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800333a:	4839      	ldr	r0, [pc, #228]	; (8003420 <MX_TIM1_Init+0x150>)
 800333c:	f001 fffe 	bl	800533c <HAL_TIM_Base_Init>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003346:	f7ff fe6d 	bl	8003024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800334a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800334e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003350:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003354:	4619      	mov	r1, r3
 8003356:	4832      	ldr	r0, [pc, #200]	; (8003420 <MX_TIM1_Init+0x150>)
 8003358:	f002 fcd0 	bl	8005cfc <HAL_TIM_ConfigClockSource>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003362:	f7ff fe5f 	bl	8003024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003366:	482e      	ldr	r0, [pc, #184]	; (8003420 <MX_TIM1_Init+0x150>)
 8003368:	f002 f8a8 	bl	80054bc <HAL_TIM_PWM_Init>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003372:	f7ff fe57 	bl	8003024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003376:	2300      	movs	r3, #0
 8003378:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800337a:	2300      	movs	r3, #0
 800337c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800337e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003382:	4619      	mov	r1, r3
 8003384:	4826      	ldr	r0, [pc, #152]	; (8003420 <MX_TIM1_Init+0x150>)
 8003386:	f003 f8b9 	bl	80064fc <HAL_TIMEx_MasterConfigSynchronization>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003390:	f7ff fe48 	bl	8003024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003394:	2360      	movs	r3, #96	; 0x60
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800339c:	2300      	movs	r3, #0
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80033a0:	2300      	movs	r3, #0
 80033a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033a4:	2300      	movs	r3, #0
 80033a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80033a8:	2300      	movs	r3, #0
 80033aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033ac:	2300      	movs	r3, #0
 80033ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b4:	2200      	movs	r2, #0
 80033b6:	4619      	mov	r1, r3
 80033b8:	4819      	ldr	r0, [pc, #100]	; (8003420 <MX_TIM1_Init+0x150>)
 80033ba:	f002 fbdd 	bl	8005b78 <HAL_TIM_PWM_ConfigChannel>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80033c4:	f7ff fe2e 	bl	8003024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033cc:	2204      	movs	r2, #4
 80033ce:	4619      	mov	r1, r3
 80033d0:	4813      	ldr	r0, [pc, #76]	; (8003420 <MX_TIM1_Init+0x150>)
 80033d2:	f002 fbd1 	bl	8005b78 <HAL_TIM_PWM_ConfigChannel>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80033dc:	f7ff fe22 	bl	8003024 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80033fe:	1d3b      	adds	r3, r7, #4
 8003400:	4619      	mov	r1, r3
 8003402:	4807      	ldr	r0, [pc, #28]	; (8003420 <MX_TIM1_Init+0x150>)
 8003404:	f003 f8f6 	bl	80065f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800340e:	f7ff fe09 	bl	8003024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003412:	4803      	ldr	r0, [pc, #12]	; (8003420 <MX_TIM1_Init+0x150>)
 8003414:	f000 f99e 	bl	8003754 <HAL_TIM_MspPostInit>

}
 8003418:	bf00      	nop
 800341a:	3758      	adds	r7, #88	; 0x58
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000588 	.word	0x20000588
 8003424:	40010000 	.word	0x40010000

08003428 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08c      	sub	sp, #48	; 0x30
 800342c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800342e:	f107 030c 	add.w	r3, r7, #12
 8003432:	2224      	movs	r2, #36	; 0x24
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f004 f938 	bl	80076ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003444:	4b21      	ldr	r3, [pc, #132]	; (80034cc <MX_TIM2_Init+0xa4>)
 8003446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800344a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800344c:	4b1f      	ldr	r3, [pc, #124]	; (80034cc <MX_TIM2_Init+0xa4>)
 800344e:	2200      	movs	r2, #0
 8003450:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003452:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <MX_TIM2_Init+0xa4>)
 8003454:	2200      	movs	r2, #0
 8003456:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003458:	4b1c      	ldr	r3, [pc, #112]	; (80034cc <MX_TIM2_Init+0xa4>)
 800345a:	f04f 32ff 	mov.w	r2, #4294967295
 800345e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003460:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <MX_TIM2_Init+0xa4>)
 8003462:	2200      	movs	r2, #0
 8003464:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003466:	4b19      	ldr	r3, [pc, #100]	; (80034cc <MX_TIM2_Init+0xa4>)
 8003468:	2280      	movs	r2, #128	; 0x80
 800346a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800346c:	2303      	movs	r3, #3
 800346e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003470:	2300      	movs	r3, #0
 8003472:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003474:	2301      	movs	r3, #1
 8003476:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003478:	2300      	movs	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003480:	2300      	movs	r3, #0
 8003482:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003484:	2301      	movs	r3, #1
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003488:	2300      	movs	r3, #0
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003490:	f107 030c 	add.w	r3, r7, #12
 8003494:	4619      	mov	r1, r3
 8003496:	480d      	ldr	r0, [pc, #52]	; (80034cc <MX_TIM2_Init+0xa4>)
 8003498:	f002 f932 	bl	8005700 <HAL_TIM_Encoder_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80034a2:	f7ff fdbf 	bl	8003024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034a6:	2300      	movs	r3, #0
 80034a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034ae:	1d3b      	adds	r3, r7, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4806      	ldr	r0, [pc, #24]	; (80034cc <MX_TIM2_Init+0xa4>)
 80034b4:	f003 f822 	bl	80064fc <HAL_TIMEx_MasterConfigSynchronization>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80034be:	f7ff fdb1 	bl	8003024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80034c2:	bf00      	nop
 80034c4:	3730      	adds	r7, #48	; 0x30
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	200005d0 	.word	0x200005d0

080034d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08c      	sub	sp, #48	; 0x30
 80034d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80034d6:	f107 030c 	add.w	r3, r7, #12
 80034da:	2224      	movs	r2, #36	; 0x24
 80034dc:	2100      	movs	r1, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	f004 f8e4 	bl	80076ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034e4:	1d3b      	adds	r3, r7, #4
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80034ec:	4b20      	ldr	r3, [pc, #128]	; (8003570 <MX_TIM3_Init+0xa0>)
 80034ee:	4a21      	ldr	r2, [pc, #132]	; (8003574 <MX_TIM3_Init+0xa4>)
 80034f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80034f2:	4b1f      	ldr	r3, [pc, #124]	; (8003570 <MX_TIM3_Init+0xa0>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034f8:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <MX_TIM3_Init+0xa0>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80034fe:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <MX_TIM3_Init+0xa0>)
 8003500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003504:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003506:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <MX_TIM3_Init+0xa0>)
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800350c:	4b18      	ldr	r3, [pc, #96]	; (8003570 <MX_TIM3_Init+0xa0>)
 800350e:	2200      	movs	r2, #0
 8003510:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003512:	2303      	movs	r3, #3
 8003514:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800351a:	2301      	movs	r3, #1
 800351c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800351e:	2300      	movs	r3, #0
 8003520:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003526:	2300      	movs	r3, #0
 8003528:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800352a:	2301      	movs	r3, #1
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800352e:	2300      	movs	r3, #0
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003536:	f107 030c 	add.w	r3, r7, #12
 800353a:	4619      	mov	r1, r3
 800353c:	480c      	ldr	r0, [pc, #48]	; (8003570 <MX_TIM3_Init+0xa0>)
 800353e:	f002 f8df 	bl	8005700 <HAL_TIM_Encoder_Init>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003548:	f7ff fd6c 	bl	8003024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800354c:	2300      	movs	r3, #0
 800354e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003550:	2300      	movs	r3, #0
 8003552:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003554:	1d3b      	adds	r3, r7, #4
 8003556:	4619      	mov	r1, r3
 8003558:	4805      	ldr	r0, [pc, #20]	; (8003570 <MX_TIM3_Init+0xa0>)
 800355a:	f002 ffcf 	bl	80064fc <HAL_TIMEx_MasterConfigSynchronization>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003564:	f7ff fd5e 	bl	8003024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003568:	bf00      	nop
 800356a:	3730      	adds	r7, #48	; 0x30
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	200004f8 	.word	0x200004f8
 8003574:	40000400 	.word	0x40000400

08003578 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800357e:	463b      	mov	r3, r7
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003586:	4b15      	ldr	r3, [pc, #84]	; (80035dc <MX_TIM6_Init+0x64>)
 8003588:	4a15      	ldr	r2, [pc, #84]	; (80035e0 <MX_TIM6_Init+0x68>)
 800358a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 800358c:	4b13      	ldr	r3, [pc, #76]	; (80035dc <MX_TIM6_Init+0x64>)
 800358e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003592:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003594:	4b11      	ldr	r3, [pc, #68]	; (80035dc <MX_TIM6_Init+0x64>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200;
 800359a:	4b10      	ldr	r3, [pc, #64]	; (80035dc <MX_TIM6_Init+0x64>)
 800359c:	22c8      	movs	r2, #200	; 0xc8
 800359e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035a0:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <MX_TIM6_Init+0x64>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80035a6:	480d      	ldr	r0, [pc, #52]	; (80035dc <MX_TIM6_Init+0x64>)
 80035a8:	f001 fec8 	bl	800533c <HAL_TIM_Base_Init>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80035b2:	f7ff fd37 	bl	8003024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035b6:	2300      	movs	r3, #0
 80035b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80035be:	463b      	mov	r3, r7
 80035c0:	4619      	mov	r1, r3
 80035c2:	4806      	ldr	r0, [pc, #24]	; (80035dc <MX_TIM6_Init+0x64>)
 80035c4:	f002 ff9a 	bl	80064fc <HAL_TIMEx_MasterConfigSynchronization>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80035ce:	f7ff fd29 	bl	8003024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000540 	.word	0x20000540
 80035e0:	40001000 	.word	0x40001000

080035e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a18      	ldr	r2, [pc, #96]	; (8003654 <HAL_TIM_Base_MspInit+0x70>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d10e      	bne.n	8003614 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	4b17      	ldr	r3, [pc, #92]	; (8003658 <HAL_TIM_Base_MspInit+0x74>)
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	4a16      	ldr	r2, [pc, #88]	; (8003658 <HAL_TIM_Base_MspInit+0x74>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6453      	str	r3, [r2, #68]	; 0x44
 8003606:	4b14      	ldr	r3, [pc, #80]	; (8003658 <HAL_TIM_Base_MspInit+0x74>)
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003612:	e01a      	b.n	800364a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a10      	ldr	r2, [pc, #64]	; (800365c <HAL_TIM_Base_MspInit+0x78>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d115      	bne.n	800364a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <HAL_TIM_Base_MspInit+0x74>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	4a0c      	ldr	r2, [pc, #48]	; (8003658 <HAL_TIM_Base_MspInit+0x74>)
 8003628:	f043 0310 	orr.w	r3, r3, #16
 800362c:	6413      	str	r3, [r2, #64]	; 0x40
 800362e:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <HAL_TIM_Base_MspInit+0x74>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800363a:	2200      	movs	r2, #0
 800363c:	2100      	movs	r1, #0
 800363e:	2036      	movs	r0, #54	; 0x36
 8003640:	f000 fe83 	bl	800434a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003644:	2036      	movs	r0, #54	; 0x36
 8003646:	f000 fe9c 	bl	8004382 <HAL_NVIC_EnableIRQ>
}
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40010000 	.word	0x40010000
 8003658:	40023800 	.word	0x40023800
 800365c:	40001000 	.word	0x40001000

08003660 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08c      	sub	sp, #48	; 0x30
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003668:	f107 031c 	add.w	r3, r7, #28
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003680:	d12c      	bne.n	80036dc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	4b30      	ldr	r3, [pc, #192]	; (8003748 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	4a2f      	ldr	r2, [pc, #188]	; (8003748 <HAL_TIM_Encoder_MspInit+0xe8>)
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	6413      	str	r3, [r2, #64]	; 0x40
 8003692:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	61bb      	str	r3, [r7, #24]
 800369c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	4b29      	ldr	r3, [pc, #164]	; (8003748 <HAL_TIM_Encoder_MspInit+0xe8>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	4a28      	ldr	r2, [pc, #160]	; (8003748 <HAL_TIM_Encoder_MspInit+0xe8>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	6313      	str	r3, [r2, #48]	; 0x30
 80036ae:	4b26      	ldr	r3, [pc, #152]	; (8003748 <HAL_TIM_Encoder_MspInit+0xe8>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCG_A_Pin|ENCG_B_Pin;
 80036ba:	2303      	movs	r3, #3
 80036bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036be:	2302      	movs	r3, #2
 80036c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c6:	2300      	movs	r3, #0
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036ca:	2301      	movs	r3, #1
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ce:	f107 031c 	add.w	r3, r7, #28
 80036d2:	4619      	mov	r1, r3
 80036d4:	481d      	ldr	r0, [pc, #116]	; (800374c <HAL_TIM_Encoder_MspInit+0xec>)
 80036d6:	f000 ff01 	bl	80044dc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80036da:	e030      	b.n	800373e <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1b      	ldr	r2, [pc, #108]	; (8003750 <HAL_TIM_Encoder_MspInit+0xf0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d12b      	bne.n	800373e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	4b17      	ldr	r3, [pc, #92]	; (8003748 <HAL_TIM_Encoder_MspInit+0xe8>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	4a16      	ldr	r2, [pc, #88]	; (8003748 <HAL_TIM_Encoder_MspInit+0xe8>)
 80036f0:	f043 0302 	orr.w	r3, r3, #2
 80036f4:	6413      	str	r3, [r2, #64]	; 0x40
 80036f6:	4b14      	ldr	r3, [pc, #80]	; (8003748 <HAL_TIM_Encoder_MspInit+0xe8>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	4b10      	ldr	r3, [pc, #64]	; (8003748 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	4a0f      	ldr	r2, [pc, #60]	; (8003748 <HAL_TIM_Encoder_MspInit+0xe8>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6313      	str	r3, [r2, #48]	; 0x30
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCD_A_Pin|ENCD_B_Pin;
 800371e:	23c0      	movs	r3, #192	; 0xc0
 8003720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003722:	2302      	movs	r3, #2
 8003724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372a:	2300      	movs	r3, #0
 800372c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800372e:	2302      	movs	r3, #2
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003732:	f107 031c 	add.w	r3, r7, #28
 8003736:	4619      	mov	r1, r3
 8003738:	4804      	ldr	r0, [pc, #16]	; (800374c <HAL_TIM_Encoder_MspInit+0xec>)
 800373a:	f000 fecf 	bl	80044dc <HAL_GPIO_Init>
}
 800373e:	bf00      	nop
 8003740:	3730      	adds	r7, #48	; 0x30
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800
 800374c:	40020000 	.word	0x40020000
 8003750:	40000400 	.word	0x40000400

08003754 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800375c:	f107 030c 	add.w	r3, r7, #12
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a12      	ldr	r2, [pc, #72]	; (80037bc <HAL_TIM_MspPostInit+0x68>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d11e      	bne.n	80037b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_TIM_MspPostInit+0x6c>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	4a10      	ldr	r2, [pc, #64]	; (80037c0 <HAL_TIM_MspPostInit+0x6c>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	6313      	str	r3, [r2, #48]	; 0x30
 8003786:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <HAL_TIM_MspPostInit+0x6c>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTG_PWM_Pin|MOTD_PWM_Pin;
 8003792:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003796:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003798:	2302      	movs	r3, #2
 800379a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037a4:	2301      	movs	r3, #1
 80037a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a8:	f107 030c 	add.w	r3, r7, #12
 80037ac:	4619      	mov	r1, r3
 80037ae:	4805      	ldr	r0, [pc, #20]	; (80037c4 <HAL_TIM_MspPostInit+0x70>)
 80037b0:	f000 fe94 	bl	80044dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80037b4:	bf00      	nop
 80037b6:	3720      	adds	r7, #32
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40010000 	.word	0x40010000
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40020000 	.word	0x40020000

080037c8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80037cc:	4b11      	ldr	r3, [pc, #68]	; (8003814 <MX_USART2_UART_Init+0x4c>)
 80037ce:	4a12      	ldr	r2, [pc, #72]	; (8003818 <MX_USART2_UART_Init+0x50>)
 80037d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80037d2:	4b10      	ldr	r3, [pc, #64]	; (8003814 <MX_USART2_UART_Init+0x4c>)
 80037d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037da:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <MX_USART2_UART_Init+0x4c>)
 80037dc:	2200      	movs	r2, #0
 80037de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037e0:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <MX_USART2_UART_Init+0x4c>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <MX_USART2_UART_Init+0x4c>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037ec:	4b09      	ldr	r3, [pc, #36]	; (8003814 <MX_USART2_UART_Init+0x4c>)
 80037ee:	220c      	movs	r2, #12
 80037f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037f2:	4b08      	ldr	r3, [pc, #32]	; (8003814 <MX_USART2_UART_Init+0x4c>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <MX_USART2_UART_Init+0x4c>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037fe:	4805      	ldr	r0, [pc, #20]	; (8003814 <MX_USART2_UART_Init+0x4c>)
 8003800:	f002 ff5e 	bl	80066c0 <HAL_UART_Init>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800380a:	f7ff fc0b 	bl	8003024 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000618 	.word	0x20000618
 8003818:	40004400 	.word	0x40004400

0800381c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08a      	sub	sp, #40	; 0x28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003824:	f107 0314 	add.w	r3, r7, #20
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1d      	ldr	r2, [pc, #116]	; (80038b0 <HAL_UART_MspInit+0x94>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d133      	bne.n	80038a6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <HAL_UART_MspInit+0x98>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	4a1b      	ldr	r2, [pc, #108]	; (80038b4 <HAL_UART_MspInit+0x98>)
 8003848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800384c:	6413      	str	r3, [r2, #64]	; 0x40
 800384e:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <HAL_UART_MspInit+0x98>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <HAL_UART_MspInit+0x98>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	4a14      	ldr	r2, [pc, #80]	; (80038b4 <HAL_UART_MspInit+0x98>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6313      	str	r3, [r2, #48]	; 0x30
 800386a:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <HAL_UART_MspInit+0x98>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003876:	230c      	movs	r3, #12
 8003878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387a:	2302      	movs	r3, #2
 800387c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003882:	2303      	movs	r3, #3
 8003884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003886:	2307      	movs	r3, #7
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800388a:	f107 0314 	add.w	r3, r7, #20
 800388e:	4619      	mov	r1, r3
 8003890:	4809      	ldr	r0, [pc, #36]	; (80038b8 <HAL_UART_MspInit+0x9c>)
 8003892:	f000 fe23 	bl	80044dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003896:	2200      	movs	r2, #0
 8003898:	2100      	movs	r1, #0
 800389a:	2026      	movs	r0, #38	; 0x26
 800389c:	f000 fd55 	bl	800434a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038a0:	2026      	movs	r0, #38	; 0x26
 80038a2:	f000 fd6e 	bl	8004382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80038a6:	bf00      	nop
 80038a8:	3728      	adds	r7, #40	; 0x28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40004400 	.word	0x40004400
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40020000 	.word	0x40020000

080038bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80038bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038c0:	480d      	ldr	r0, [pc, #52]	; (80038f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80038c2:	490e      	ldr	r1, [pc, #56]	; (80038fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80038c4:	4a0e      	ldr	r2, [pc, #56]	; (8003900 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038c8:	e002      	b.n	80038d0 <LoopCopyDataInit>

080038ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038ce:	3304      	adds	r3, #4

080038d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038d4:	d3f9      	bcc.n	80038ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038d6:	4a0b      	ldr	r2, [pc, #44]	; (8003904 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80038d8:	4c0b      	ldr	r4, [pc, #44]	; (8003908 <LoopFillZerobss+0x26>)
  movs r3, #0
 80038da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038dc:	e001      	b.n	80038e2 <LoopFillZerobss>

080038de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038e0:	3204      	adds	r2, #4

080038e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038e4:	d3fb      	bcc.n	80038de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038e6:	f7ff fce1 	bl	80032ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038ea:	f003 febb 	bl	8007664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038ee:	f7ff f9b1 	bl	8002c54 <main>
  bx  lr    
 80038f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80038f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80038f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038fc:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003900:	0800e7b0 	.word	0x0800e7b0
  ldr r2, =_sbss
 8003904:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003908:	20000670 	.word	0x20000670

0800390c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800390c:	e7fe      	b.n	800390c <CAN1_RX0_IRQHandler>
	...

08003910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003914:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <HAL_Init+0x40>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a0d      	ldr	r2, [pc, #52]	; (8003950 <HAL_Init+0x40>)
 800391a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800391e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_Init+0x40>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <HAL_Init+0x40>)
 8003926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800392a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800392c:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_Init+0x40>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a07      	ldr	r2, [pc, #28]	; (8003950 <HAL_Init+0x40>)
 8003932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003938:	2003      	movs	r0, #3
 800393a:	f000 fcfb 	bl	8004334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800393e:	2000      	movs	r0, #0
 8003940:	f000 f808 	bl	8003954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003944:	f7ff fb74 	bl	8003030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40023c00 	.word	0x40023c00

08003954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800395c:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <HAL_InitTick+0x54>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_InitTick+0x58>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	4619      	mov	r1, r3
 8003966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800396a:	fbb3 f3f1 	udiv	r3, r3, r1
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fd13 	bl	800439e <HAL_SYSTICK_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e00e      	b.n	80039a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b0f      	cmp	r3, #15
 8003986:	d80a      	bhi.n	800399e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003988:	2200      	movs	r2, #0
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	f04f 30ff 	mov.w	r0, #4294967295
 8003990:	f000 fcdb 	bl	800434a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003994:	4a06      	ldr	r2, [pc, #24]	; (80039b0 <HAL_InitTick+0x5c>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e000      	b.n	80039a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000034 	.word	0x20000034
 80039ac:	2000003c 	.word	0x2000003c
 80039b0:	20000038 	.word	0x20000038

080039b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <HAL_IncTick+0x20>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_IncTick+0x24>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4413      	add	r3, r2
 80039c4:	4a04      	ldr	r2, [pc, #16]	; (80039d8 <HAL_IncTick+0x24>)
 80039c6:	6013      	str	r3, [r2, #0]
}
 80039c8:	bf00      	nop
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	2000003c 	.word	0x2000003c
 80039d8:	2000065c 	.word	0x2000065c

080039dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return uwTick;
 80039e0:	4b03      	ldr	r3, [pc, #12]	; (80039f0 <HAL_GetTick+0x14>)
 80039e2:	681b      	ldr	r3, [r3, #0]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	2000065c 	.word	0x2000065c

080039f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e033      	b.n	8003a72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d109      	bne.n	8003a26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fe ffd2 	bl	80029bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f003 0310 	and.w	r3, r3, #16
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d118      	bne.n	8003a64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a3a:	f023 0302 	bic.w	r3, r3, #2
 8003a3e:	f043 0202 	orr.w	r2, r3, #2
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fa9e 	bl	8003f88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	f023 0303 	bic.w	r3, r3, #3
 8003a5a:	f043 0201 	orr.w	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
 8003a62:	e001      	b.n	8003a68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	2300      	movs	r3, #0
 8003a88:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	bf0c      	ite	eq
 8003a98:	2301      	moveq	r3, #1
 8003a9a:	2300      	movne	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d049      	beq.n	8003b50 <HAL_ADC_IRQHandler+0xd6>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d046      	beq.n	8003b50 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d105      	bne.n	8003ada <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d12b      	bne.n	8003b40 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d127      	bne.n	8003b40 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d006      	beq.n	8003b0c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d119      	bne.n	8003b40 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0220 	bic.w	r2, r2, #32
 8003b1a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d105      	bne.n	8003b40 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f043 0201 	orr.w	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff fa65 	bl	8003010 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f06f 0212 	mvn.w	r2, #18
 8003b4e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	bf0c      	ite	eq
 8003b5e:	2301      	moveq	r3, #1
 8003b60:	2300      	movne	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b70:	2b80      	cmp	r3, #128	; 0x80
 8003b72:	bf0c      	ite	eq
 8003b74:	2301      	moveq	r3, #1
 8003b76:	2300      	movne	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d057      	beq.n	8003c32 <HAL_ADC_IRQHandler+0x1b8>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d054      	beq.n	8003c32 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d139      	bne.n	8003c22 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d006      	beq.n	8003bca <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d12b      	bne.n	8003c22 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d124      	bne.n	8003c22 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d11d      	bne.n	8003c22 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d119      	bne.n	8003c22 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bfc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d105      	bne.n	8003c22 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f043 0201 	orr.w	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 faac 	bl	8004180 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 020c 	mvn.w	r2, #12
 8003c30:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	bf0c      	ite	eq
 8003c40:	2301      	moveq	r3, #1
 8003c42:	2300      	movne	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c52:	2b40      	cmp	r3, #64	; 0x40
 8003c54:	bf0c      	ite	eq
 8003c56:	2301      	moveq	r3, #1
 8003c58:	2300      	movne	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d017      	beq.n	8003c94 <HAL_ADC_IRQHandler+0x21a>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d014      	beq.n	8003c94 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d10d      	bne.n	8003c94 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f839 	bl	8003cfc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f06f 0201 	mvn.w	r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	bf0c      	ite	eq
 8003ca2:	2301      	moveq	r3, #1
 8003ca4:	2300      	movne	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cb8:	bf0c      	ite	eq
 8003cba:	2301      	moveq	r3, #1
 8003cbc:	2300      	movne	r3, #0
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d015      	beq.n	8003cf4 <HAL_ADC_IRQHandler+0x27a>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d012      	beq.n	8003cf4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	f043 0202 	orr.w	r2, r3, #2
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f06f 0220 	mvn.w	r2, #32
 8003ce2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f813 	bl	8003d10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f06f 0220 	mvn.w	r2, #32
 8003cf2:	601a      	str	r2, [r3, #0]
  }
}
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x1c>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e113      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x244>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b09      	cmp	r3, #9
 8003d4e:	d925      	bls.n	8003d9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68d9      	ldr	r1, [r3, #12]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4613      	mov	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	3b1e      	subs	r3, #30
 8003d66:	2207      	movs	r2, #7
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	400a      	ands	r2, r1
 8003d74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68d9      	ldr	r1, [r3, #12]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	4618      	mov	r0, r3
 8003d88:	4603      	mov	r3, r0
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	4403      	add	r3, r0
 8003d8e:	3b1e      	subs	r3, #30
 8003d90:	409a      	lsls	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	60da      	str	r2, [r3, #12]
 8003d9a:	e022      	b.n	8003de2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6919      	ldr	r1, [r3, #16]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	4613      	mov	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	4413      	add	r3, r2
 8003db0:	2207      	movs	r2, #7
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43da      	mvns	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	400a      	ands	r2, r1
 8003dbe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6919      	ldr	r1, [r3, #16]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	4403      	add	r3, r0
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b06      	cmp	r3, #6
 8003de8:	d824      	bhi.n	8003e34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	3b05      	subs	r3, #5
 8003dfc:	221f      	movs	r2, #31
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43da      	mvns	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	400a      	ands	r2, r1
 8003e0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	4618      	mov	r0, r3
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	3b05      	subs	r3, #5
 8003e26:	fa00 f203 	lsl.w	r2, r0, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	635a      	str	r2, [r3, #52]	; 0x34
 8003e32:	e04c      	b.n	8003ece <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b0c      	cmp	r3, #12
 8003e3a:	d824      	bhi.n	8003e86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3b23      	subs	r3, #35	; 0x23
 8003e4e:	221f      	movs	r2, #31
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43da      	mvns	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	400a      	ands	r2, r1
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	3b23      	subs	r3, #35	; 0x23
 8003e78:	fa00 f203 	lsl.w	r2, r0, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
 8003e84:	e023      	b.n	8003ece <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	3b41      	subs	r3, #65	; 0x41
 8003e98:	221f      	movs	r2, #31
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3b41      	subs	r3, #65	; 0x41
 8003ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ece:	4b29      	ldr	r3, [pc, #164]	; (8003f74 <HAL_ADC_ConfigChannel+0x250>)
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a28      	ldr	r2, [pc, #160]	; (8003f78 <HAL_ADC_ConfigChannel+0x254>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d10f      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x1d8>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b12      	cmp	r3, #18
 8003ee2:	d10b      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1d      	ldr	r2, [pc, #116]	; (8003f78 <HAL_ADC_ConfigChannel+0x254>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d12b      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x23a>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1c      	ldr	r2, [pc, #112]	; (8003f7c <HAL_ADC_ConfigChannel+0x258>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <HAL_ADC_ConfigChannel+0x1f4>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b11      	cmp	r3, #17
 8003f16:	d122      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a11      	ldr	r2, [pc, #68]	; (8003f7c <HAL_ADC_ConfigChannel+0x258>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d111      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f3a:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <HAL_ADC_ConfigChannel+0x25c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a11      	ldr	r2, [pc, #68]	; (8003f84 <HAL_ADC_ConfigChannel+0x260>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	0c9a      	lsrs	r2, r3, #18
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f50:	e002      	b.n	8003f58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f9      	bne.n	8003f52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	40012300 	.word	0x40012300
 8003f78:	40012000 	.word	0x40012000
 8003f7c:	10000012 	.word	0x10000012
 8003f80:	20000034 	.word	0x20000034
 8003f84:	431bde83 	.word	0x431bde83

08003f88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f90:	4b79      	ldr	r3, [pc, #484]	; (8004178 <ADC_Init+0x1f0>)
 8003f92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6859      	ldr	r1, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	021a      	lsls	r2, r3, #8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003fe0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6859      	ldr	r1, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004002:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6899      	ldr	r1, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	4a58      	ldr	r2, [pc, #352]	; (800417c <ADC_Init+0x1f4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d022      	beq.n	8004066 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800402e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6899      	ldr	r1, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004050:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6899      	ldr	r1, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	e00f      	b.n	8004086 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004074:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004084:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0202 	bic.w	r2, r2, #2
 8004094:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6899      	ldr	r1, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	7e1b      	ldrb	r3, [r3, #24]
 80040a0:	005a      	lsls	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d01b      	beq.n	80040ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80040d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6859      	ldr	r1, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	3b01      	subs	r3, #1
 80040e0:	035a      	lsls	r2, r3, #13
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	e007      	b.n	80040fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	3b01      	subs	r3, #1
 8004118:	051a      	lsls	r2, r3, #20
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004130:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6899      	ldr	r1, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800413e:	025a      	lsls	r2, r3, #9
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004156:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6899      	ldr	r1, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	029a      	lsls	r2, r3, #10
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	609a      	str	r2, [r3, #8]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	40012300 	.word	0x40012300
 800417c:	0f000001 	.word	0x0f000001

08004180 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041a4:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <__NVIC_SetPriorityGrouping+0x44>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041b0:	4013      	ands	r3, r2
 80041b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041c6:	4a04      	ldr	r2, [pc, #16]	; (80041d8 <__NVIC_SetPriorityGrouping+0x44>)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	60d3      	str	r3, [r2, #12]
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	e000ed00 	.word	0xe000ed00

080041dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <__NVIC_GetPriorityGrouping+0x18>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	0a1b      	lsrs	r3, r3, #8
 80041e6:	f003 0307 	and.w	r3, r3, #7
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	e000ed00 	.word	0xe000ed00

080041f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004206:	2b00      	cmp	r3, #0
 8004208:	db0b      	blt.n	8004222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	f003 021f 	and.w	r2, r3, #31
 8004210:	4907      	ldr	r1, [pc, #28]	; (8004230 <__NVIC_EnableIRQ+0x38>)
 8004212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	2001      	movs	r0, #1
 800421a:	fa00 f202 	lsl.w	r2, r0, r2
 800421e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	e000e100 	.word	0xe000e100

08004234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	6039      	str	r1, [r7, #0]
 800423e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004244:	2b00      	cmp	r3, #0
 8004246:	db0a      	blt.n	800425e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	b2da      	uxtb	r2, r3
 800424c:	490c      	ldr	r1, [pc, #48]	; (8004280 <__NVIC_SetPriority+0x4c>)
 800424e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004252:	0112      	lsls	r2, r2, #4
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	440b      	add	r3, r1
 8004258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800425c:	e00a      	b.n	8004274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	b2da      	uxtb	r2, r3
 8004262:	4908      	ldr	r1, [pc, #32]	; (8004284 <__NVIC_SetPriority+0x50>)
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	3b04      	subs	r3, #4
 800426c:	0112      	lsls	r2, r2, #4
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	440b      	add	r3, r1
 8004272:	761a      	strb	r2, [r3, #24]
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	e000e100 	.word	0xe000e100
 8004284:	e000ed00 	.word	0xe000ed00

08004288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004288:	b480      	push	{r7}
 800428a:	b089      	sub	sp, #36	; 0x24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f1c3 0307 	rsb	r3, r3, #7
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	bf28      	it	cs
 80042a6:	2304      	movcs	r3, #4
 80042a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	3304      	adds	r3, #4
 80042ae:	2b06      	cmp	r3, #6
 80042b0:	d902      	bls.n	80042b8 <NVIC_EncodePriority+0x30>
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	3b03      	subs	r3, #3
 80042b6:	e000      	b.n	80042ba <NVIC_EncodePriority+0x32>
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042bc:	f04f 32ff 	mov.w	r2, #4294967295
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43da      	mvns	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	401a      	ands	r2, r3
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042d0:	f04f 31ff 	mov.w	r1, #4294967295
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	fa01 f303 	lsl.w	r3, r1, r3
 80042da:	43d9      	mvns	r1, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042e0:	4313      	orrs	r3, r2
         );
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3724      	adds	r7, #36	; 0x24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
	...

080042f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004300:	d301      	bcc.n	8004306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004302:	2301      	movs	r3, #1
 8004304:	e00f      	b.n	8004326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004306:	4a0a      	ldr	r2, [pc, #40]	; (8004330 <SysTick_Config+0x40>)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3b01      	subs	r3, #1
 800430c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800430e:	210f      	movs	r1, #15
 8004310:	f04f 30ff 	mov.w	r0, #4294967295
 8004314:	f7ff ff8e 	bl	8004234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004318:	4b05      	ldr	r3, [pc, #20]	; (8004330 <SysTick_Config+0x40>)
 800431a:	2200      	movs	r2, #0
 800431c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800431e:	4b04      	ldr	r3, [pc, #16]	; (8004330 <SysTick_Config+0x40>)
 8004320:	2207      	movs	r2, #7
 8004322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	e000e010 	.word	0xe000e010

08004334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff ff29 	bl	8004194 <__NVIC_SetPriorityGrouping>
}
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800434a:	b580      	push	{r7, lr}
 800434c:	b086      	sub	sp, #24
 800434e:	af00      	add	r7, sp, #0
 8004350:	4603      	mov	r3, r0
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800435c:	f7ff ff3e 	bl	80041dc <__NVIC_GetPriorityGrouping>
 8004360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68b9      	ldr	r1, [r7, #8]
 8004366:	6978      	ldr	r0, [r7, #20]
 8004368:	f7ff ff8e 	bl	8004288 <NVIC_EncodePriority>
 800436c:	4602      	mov	r2, r0
 800436e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004372:	4611      	mov	r1, r2
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff ff5d 	bl	8004234 <__NVIC_SetPriority>
}
 800437a:	bf00      	nop
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	4603      	mov	r3, r0
 800438a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800438c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff ff31 	bl	80041f8 <__NVIC_EnableIRQ>
}
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff ffa2 	bl	80042f0 <SysTick_Config>
 80043ac:	4603      	mov	r3, r0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043c4:	f7ff fb0a 	bl	80039dc <HAL_GetTick>
 80043c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d008      	beq.n	80043e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2280      	movs	r2, #128	; 0x80
 80043da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e052      	b.n	800448e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0216 	bic.w	r2, r2, #22
 80043f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004406:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	2b00      	cmp	r3, #0
 800440e:	d103      	bne.n	8004418 <HAL_DMA_Abort+0x62>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004414:	2b00      	cmp	r3, #0
 8004416:	d007      	beq.n	8004428 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0208 	bic.w	r2, r2, #8
 8004426:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0201 	bic.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004438:	e013      	b.n	8004462 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800443a:	f7ff facf 	bl	80039dc <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b05      	cmp	r3, #5
 8004446:	d90c      	bls.n	8004462 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2203      	movs	r2, #3
 8004452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e015      	b.n	800448e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e4      	bne.n	800443a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004474:	223f      	movs	r2, #63	; 0x3f
 8004476:	409a      	lsls	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d004      	beq.n	80044b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2280      	movs	r2, #128	; 0x80
 80044ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e00c      	b.n	80044ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2205      	movs	r2, #5
 80044b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0201 	bic.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
	...

080044dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044dc:	b480      	push	{r7}
 80044de:	b089      	sub	sp, #36	; 0x24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044f2:	2300      	movs	r3, #0
 80044f4:	61fb      	str	r3, [r7, #28]
 80044f6:	e165      	b.n	80047c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044f8:	2201      	movs	r2, #1
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4013      	ands	r3, r2
 800450a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	429a      	cmp	r2, r3
 8004512:	f040 8154 	bne.w	80047be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b01      	cmp	r3, #1
 8004520:	d005      	beq.n	800452e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800452a:	2b02      	cmp	r3, #2
 800452c:	d130      	bne.n	8004590 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	2203      	movs	r2, #3
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	43db      	mvns	r3, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4013      	ands	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4313      	orrs	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004564:	2201      	movs	r2, #1
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	43db      	mvns	r3, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	091b      	lsrs	r3, r3, #4
 800457a:	f003 0201 	and.w	r2, r3, #1
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4313      	orrs	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f003 0303 	and.w	r3, r3, #3
 8004598:	2b03      	cmp	r3, #3
 800459a:	d017      	beq.n	80045cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	2203      	movs	r2, #3
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	43db      	mvns	r3, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4013      	ands	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f003 0303 	and.w	r3, r3, #3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d123      	bne.n	8004620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	08da      	lsrs	r2, r3, #3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3208      	adds	r2, #8
 80045e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	220f      	movs	r2, #15
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	43db      	mvns	r3, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4013      	ands	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4313      	orrs	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	08da      	lsrs	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3208      	adds	r2, #8
 800461a:	69b9      	ldr	r1, [r7, #24]
 800461c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	2203      	movs	r2, #3
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	43db      	mvns	r3, r3
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	4013      	ands	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 0203 	and.w	r2, r3, #3
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4313      	orrs	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 80ae 	beq.w	80047be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	4b5d      	ldr	r3, [pc, #372]	; (80047dc <HAL_GPIO_Init+0x300>)
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	4a5c      	ldr	r2, [pc, #368]	; (80047dc <HAL_GPIO_Init+0x300>)
 800466c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004670:	6453      	str	r3, [r2, #68]	; 0x44
 8004672:	4b5a      	ldr	r3, [pc, #360]	; (80047dc <HAL_GPIO_Init+0x300>)
 8004674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800467e:	4a58      	ldr	r2, [pc, #352]	; (80047e0 <HAL_GPIO_Init+0x304>)
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	089b      	lsrs	r3, r3, #2
 8004684:	3302      	adds	r3, #2
 8004686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800468a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	220f      	movs	r2, #15
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4013      	ands	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a4f      	ldr	r2, [pc, #316]	; (80047e4 <HAL_GPIO_Init+0x308>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d025      	beq.n	80046f6 <HAL_GPIO_Init+0x21a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a4e      	ldr	r2, [pc, #312]	; (80047e8 <HAL_GPIO_Init+0x30c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d01f      	beq.n	80046f2 <HAL_GPIO_Init+0x216>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a4d      	ldr	r2, [pc, #308]	; (80047ec <HAL_GPIO_Init+0x310>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d019      	beq.n	80046ee <HAL_GPIO_Init+0x212>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a4c      	ldr	r2, [pc, #304]	; (80047f0 <HAL_GPIO_Init+0x314>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <HAL_GPIO_Init+0x20e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a4b      	ldr	r2, [pc, #300]	; (80047f4 <HAL_GPIO_Init+0x318>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00d      	beq.n	80046e6 <HAL_GPIO_Init+0x20a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a4a      	ldr	r2, [pc, #296]	; (80047f8 <HAL_GPIO_Init+0x31c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d007      	beq.n	80046e2 <HAL_GPIO_Init+0x206>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a49      	ldr	r2, [pc, #292]	; (80047fc <HAL_GPIO_Init+0x320>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d101      	bne.n	80046de <HAL_GPIO_Init+0x202>
 80046da:	2306      	movs	r3, #6
 80046dc:	e00c      	b.n	80046f8 <HAL_GPIO_Init+0x21c>
 80046de:	2307      	movs	r3, #7
 80046e0:	e00a      	b.n	80046f8 <HAL_GPIO_Init+0x21c>
 80046e2:	2305      	movs	r3, #5
 80046e4:	e008      	b.n	80046f8 <HAL_GPIO_Init+0x21c>
 80046e6:	2304      	movs	r3, #4
 80046e8:	e006      	b.n	80046f8 <HAL_GPIO_Init+0x21c>
 80046ea:	2303      	movs	r3, #3
 80046ec:	e004      	b.n	80046f8 <HAL_GPIO_Init+0x21c>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e002      	b.n	80046f8 <HAL_GPIO_Init+0x21c>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <HAL_GPIO_Init+0x21c>
 80046f6:	2300      	movs	r3, #0
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	f002 0203 	and.w	r2, r2, #3
 80046fe:	0092      	lsls	r2, r2, #2
 8004700:	4093      	lsls	r3, r2
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004708:	4935      	ldr	r1, [pc, #212]	; (80047e0 <HAL_GPIO_Init+0x304>)
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	089b      	lsrs	r3, r3, #2
 800470e:	3302      	adds	r3, #2
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004716:	4b3a      	ldr	r3, [pc, #232]	; (8004800 <HAL_GPIO_Init+0x324>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	43db      	mvns	r3, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4013      	ands	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800473a:	4a31      	ldr	r2, [pc, #196]	; (8004800 <HAL_GPIO_Init+0x324>)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004740:	4b2f      	ldr	r3, [pc, #188]	; (8004800 <HAL_GPIO_Init+0x324>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	43db      	mvns	r3, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4013      	ands	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004764:	4a26      	ldr	r2, [pc, #152]	; (8004800 <HAL_GPIO_Init+0x324>)
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800476a:	4b25      	ldr	r3, [pc, #148]	; (8004800 <HAL_GPIO_Init+0x324>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	43db      	mvns	r3, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4013      	ands	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800478e:	4a1c      	ldr	r2, [pc, #112]	; (8004800 <HAL_GPIO_Init+0x324>)
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004794:	4b1a      	ldr	r3, [pc, #104]	; (8004800 <HAL_GPIO_Init+0x324>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	43db      	mvns	r3, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4013      	ands	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047b8:	4a11      	ldr	r2, [pc, #68]	; (8004800 <HAL_GPIO_Init+0x324>)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	3301      	adds	r3, #1
 80047c2:	61fb      	str	r3, [r7, #28]
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	2b0f      	cmp	r3, #15
 80047c8:	f67f ae96 	bls.w	80044f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop
 80047d0:	3724      	adds	r7, #36	; 0x24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40023800 	.word	0x40023800
 80047e0:	40013800 	.word	0x40013800
 80047e4:	40020000 	.word	0x40020000
 80047e8:	40020400 	.word	0x40020400
 80047ec:	40020800 	.word	0x40020800
 80047f0:	40020c00 	.word	0x40020c00
 80047f4:	40021000 	.word	0x40021000
 80047f8:	40021400 	.word	0x40021400
 80047fc:	40021800 	.word	0x40021800
 8004800:	40013c00 	.word	0x40013c00

08004804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	807b      	strh	r3, [r7, #2]
 8004810:	4613      	mov	r3, r2
 8004812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004814:	787b      	ldrb	r3, [r7, #1]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800481a:	887a      	ldrh	r2, [r7, #2]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004820:	e003      	b.n	800482a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004822:	887b      	ldrh	r3, [r7, #2]
 8004824:	041a      	lsls	r2, r3, #16
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	619a      	str	r2, [r3, #24]
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	4603      	mov	r3, r0
 8004840:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004842:	4b08      	ldr	r3, [pc, #32]	; (8004864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	4013      	ands	r3, r2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d006      	beq.n	800485c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800484e:	4a05      	ldr	r2, [pc, #20]	; (8004864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	4618      	mov	r0, r3
 8004858:	f7fe fb6a 	bl	8002f30 <HAL_GPIO_EXTI_Callback>
  }
}
 800485c:	bf00      	nop
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40013c00 	.word	0x40013c00

08004868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0cc      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800487c:	4b68      	ldr	r3, [pc, #416]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d90c      	bls.n	80048a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488a:	4b65      	ldr	r3, [pc, #404]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004892:	4b63      	ldr	r3, [pc, #396]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d001      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0b8      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d020      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048bc:	4b59      	ldr	r3, [pc, #356]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4a58      	ldr	r2, [pc, #352]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048d4:	4b53      	ldr	r3, [pc, #332]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	4a52      	ldr	r2, [pc, #328]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e0:	4b50      	ldr	r3, [pc, #320]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	494d      	ldr	r1, [pc, #308]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d044      	beq.n	8004988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d107      	bne.n	8004916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004906:	4b47      	ldr	r3, [pc, #284]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d119      	bne.n	8004946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e07f      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d003      	beq.n	8004926 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004922:	2b03      	cmp	r3, #3
 8004924:	d107      	bne.n	8004936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004926:	4b3f      	ldr	r3, [pc, #252]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e06f      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004936:	4b3b      	ldr	r3, [pc, #236]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e067      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004946:	4b37      	ldr	r3, [pc, #220]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f023 0203 	bic.w	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	4934      	ldr	r1, [pc, #208]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	4313      	orrs	r3, r2
 8004956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004958:	f7ff f840 	bl	80039dc <HAL_GetTick>
 800495c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495e:	e00a      	b.n	8004976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004960:	f7ff f83c 	bl	80039dc <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	f241 3288 	movw	r2, #5000	; 0x1388
 800496e:	4293      	cmp	r3, r2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e04f      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004976:	4b2b      	ldr	r3, [pc, #172]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 020c 	and.w	r2, r3, #12
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	429a      	cmp	r2, r3
 8004986:	d1eb      	bne.n	8004960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004988:	4b25      	ldr	r3, [pc, #148]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 030f 	and.w	r3, r3, #15
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d20c      	bcs.n	80049b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004996:	4b22      	ldr	r3, [pc, #136]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800499e:	4b20      	ldr	r3, [pc, #128]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e032      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049bc:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	4916      	ldr	r1, [pc, #88]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d009      	beq.n	80049ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049da:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	490e      	ldr	r1, [pc, #56]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ee:	f000 f855 	bl	8004a9c <HAL_RCC_GetSysClockFreq>
 80049f2:	4602      	mov	r2, r0
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	091b      	lsrs	r3, r3, #4
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	490a      	ldr	r1, [pc, #40]	; (8004a28 <HAL_RCC_ClockConfig+0x1c0>)
 8004a00:	5ccb      	ldrb	r3, [r1, r3]
 8004a02:	fa22 f303 	lsr.w	r3, r2, r3
 8004a06:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 8004a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a0a:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe ffa0 	bl	8003954 <HAL_InitTick>

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	40023c00 	.word	0x40023c00
 8004a24:	40023800 	.word	0x40023800
 8004a28:	0800e03c 	.word	0x0800e03c
 8004a2c:	20000034 	.word	0x20000034
 8004a30:	20000038 	.word	0x20000038

08004a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a38:	4b03      	ldr	r3, [pc, #12]	; (8004a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	20000034 	.word	0x20000034

08004a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a50:	f7ff fff0 	bl	8004a34 <HAL_RCC_GetHCLKFreq>
 8004a54:	4602      	mov	r2, r0
 8004a56:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	0a9b      	lsrs	r3, r3, #10
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	4903      	ldr	r1, [pc, #12]	; (8004a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a62:	5ccb      	ldrb	r3, [r1, r3]
 8004a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	0800e04c 	.word	0x0800e04c

08004a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a78:	f7ff ffdc 	bl	8004a34 <HAL_RCC_GetHCLKFreq>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	0b5b      	lsrs	r3, r3, #13
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	4903      	ldr	r1, [pc, #12]	; (8004a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a8a:	5ccb      	ldrb	r3, [r1, r3]
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40023800 	.word	0x40023800
 8004a98:	0800e04c 	.word	0x0800e04c

08004a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa0:	b088      	sub	sp, #32
 8004aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ab8:	4bce      	ldr	r3, [pc, #824]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 030c 	and.w	r3, r3, #12
 8004ac0:	2b0c      	cmp	r3, #12
 8004ac2:	f200 818d 	bhi.w	8004de0 <HAL_RCC_GetSysClockFreq+0x344>
 8004ac6:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <HAL_RCC_GetSysClockFreq+0x30>)
 8004ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004acc:	08004b01 	.word	0x08004b01
 8004ad0:	08004de1 	.word	0x08004de1
 8004ad4:	08004de1 	.word	0x08004de1
 8004ad8:	08004de1 	.word	0x08004de1
 8004adc:	08004b07 	.word	0x08004b07
 8004ae0:	08004de1 	.word	0x08004de1
 8004ae4:	08004de1 	.word	0x08004de1
 8004ae8:	08004de1 	.word	0x08004de1
 8004aec:	08004b0d 	.word	0x08004b0d
 8004af0:	08004de1 	.word	0x08004de1
 8004af4:	08004de1 	.word	0x08004de1
 8004af8:	08004de1 	.word	0x08004de1
 8004afc:	08004c81 	.word	0x08004c81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b00:	4bbd      	ldr	r3, [pc, #756]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004b02:	61bb      	str	r3, [r7, #24]
       break;
 8004b04:	e16f      	b.n	8004de6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b06:	4bbd      	ldr	r3, [pc, #756]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x360>)
 8004b08:	61bb      	str	r3, [r7, #24]
      break;
 8004b0a:	e16c      	b.n	8004de6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b0c:	4bb9      	ldr	r3, [pc, #740]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b14:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b16:	4bb7      	ldr	r3, [pc, #732]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d053      	beq.n	8004bca <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b22:	4bb4      	ldr	r3, [pc, #720]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	099b      	lsrs	r3, r3, #6
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b32:	f04f 0100 	mov.w	r1, #0
 8004b36:	ea02 0400 	and.w	r4, r2, r0
 8004b3a:	603c      	str	r4, [r7, #0]
 8004b3c:	400b      	ands	r3, r1
 8004b3e:	607b      	str	r3, [r7, #4]
 8004b40:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b44:	4620      	mov	r0, r4
 8004b46:	4629      	mov	r1, r5
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	014b      	lsls	r3, r1, #5
 8004b52:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b56:	0142      	lsls	r2, r0, #5
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4623      	mov	r3, r4
 8004b5e:	1ac0      	subs	r0, r0, r3
 8004b60:	462b      	mov	r3, r5
 8004b62:	eb61 0103 	sbc.w	r1, r1, r3
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	018b      	lsls	r3, r1, #6
 8004b70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b74:	0182      	lsls	r2, r0, #6
 8004b76:	1a12      	subs	r2, r2, r0
 8004b78:	eb63 0301 	sbc.w	r3, r3, r1
 8004b7c:	f04f 0000 	mov.w	r0, #0
 8004b80:	f04f 0100 	mov.w	r1, #0
 8004b84:	00d9      	lsls	r1, r3, #3
 8004b86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b8a:	00d0      	lsls	r0, r2, #3
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4621      	mov	r1, r4
 8004b92:	1852      	adds	r2, r2, r1
 8004b94:	4629      	mov	r1, r5
 8004b96:	eb43 0101 	adc.w	r1, r3, r1
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	f04f 0000 	mov.w	r0, #0
 8004ba0:	f04f 0100 	mov.w	r1, #0
 8004ba4:	0259      	lsls	r1, r3, #9
 8004ba6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004baa:	0250      	lsls	r0, r2, #9
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	f7fc f894 	bl	8000ce8 <__aeabi_uldivmod>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	61fb      	str	r3, [r7, #28]
 8004bc8:	e04c      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bca:	4b8a      	ldr	r3, [pc, #552]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	099b      	lsrs	r3, r3, #6
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004bda:	f04f 0100 	mov.w	r1, #0
 8004bde:	ea02 0a00 	and.w	sl, r2, r0
 8004be2:	ea03 0b01 	and.w	fp, r3, r1
 8004be6:	4650      	mov	r0, sl
 8004be8:	4659      	mov	r1, fp
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	014b      	lsls	r3, r1, #5
 8004bf4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004bf8:	0142      	lsls	r2, r0, #5
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	ebb0 000a 	subs.w	r0, r0, sl
 8004c02:	eb61 010b 	sbc.w	r1, r1, fp
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	018b      	lsls	r3, r1, #6
 8004c10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c14:	0182      	lsls	r2, r0, #6
 8004c16:	1a12      	subs	r2, r2, r0
 8004c18:	eb63 0301 	sbc.w	r3, r3, r1
 8004c1c:	f04f 0000 	mov.w	r0, #0
 8004c20:	f04f 0100 	mov.w	r1, #0
 8004c24:	00d9      	lsls	r1, r3, #3
 8004c26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c2a:	00d0      	lsls	r0, r2, #3
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	eb12 020a 	adds.w	r2, r2, sl
 8004c34:	eb43 030b 	adc.w	r3, r3, fp
 8004c38:	f04f 0000 	mov.w	r0, #0
 8004c3c:	f04f 0100 	mov.w	r1, #0
 8004c40:	0299      	lsls	r1, r3, #10
 8004c42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c46:	0290      	lsls	r0, r2, #10
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4619      	mov	r1, r3
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	461a      	mov	r2, r3
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	f7fc f846 	bl	8000ce8 <__aeabi_uldivmod>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4613      	mov	r3, r2
 8004c62:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c64:	4b63      	ldr	r3, [pc, #396]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	0c1b      	lsrs	r3, r3, #16
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	3301      	adds	r3, #1
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7c:	61bb      	str	r3, [r7, #24]
      break;
 8004c7e:	e0b2      	b.n	8004de6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c80:	4b5c      	ldr	r3, [pc, #368]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c88:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c8a:	4b5a      	ldr	r3, [pc, #360]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d04d      	beq.n	8004d32 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c96:	4b57      	ldr	r3, [pc, #348]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	099b      	lsrs	r3, r3, #6
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ca6:	f04f 0100 	mov.w	r1, #0
 8004caa:	ea02 0800 	and.w	r8, r2, r0
 8004cae:	ea03 0901 	and.w	r9, r3, r1
 8004cb2:	4640      	mov	r0, r8
 8004cb4:	4649      	mov	r1, r9
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	014b      	lsls	r3, r1, #5
 8004cc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004cc4:	0142      	lsls	r2, r0, #5
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	4619      	mov	r1, r3
 8004cca:	ebb0 0008 	subs.w	r0, r0, r8
 8004cce:	eb61 0109 	sbc.w	r1, r1, r9
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	018b      	lsls	r3, r1, #6
 8004cdc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ce0:	0182      	lsls	r2, r0, #6
 8004ce2:	1a12      	subs	r2, r2, r0
 8004ce4:	eb63 0301 	sbc.w	r3, r3, r1
 8004ce8:	f04f 0000 	mov.w	r0, #0
 8004cec:	f04f 0100 	mov.w	r1, #0
 8004cf0:	00d9      	lsls	r1, r3, #3
 8004cf2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cf6:	00d0      	lsls	r0, r2, #3
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	eb12 0208 	adds.w	r2, r2, r8
 8004d00:	eb43 0309 	adc.w	r3, r3, r9
 8004d04:	f04f 0000 	mov.w	r0, #0
 8004d08:	f04f 0100 	mov.w	r1, #0
 8004d0c:	0259      	lsls	r1, r3, #9
 8004d0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004d12:	0250      	lsls	r0, r2, #9
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4610      	mov	r0, r2
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	f7fb ffe0 	bl	8000ce8 <__aeabi_uldivmod>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	61fb      	str	r3, [r7, #28]
 8004d30:	e04a      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d32:	4b30      	ldr	r3, [pc, #192]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	099b      	lsrs	r3, r3, #6
 8004d38:	461a      	mov	r2, r3
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d42:	f04f 0100 	mov.w	r1, #0
 8004d46:	ea02 0400 	and.w	r4, r2, r0
 8004d4a:	ea03 0501 	and.w	r5, r3, r1
 8004d4e:	4620      	mov	r0, r4
 8004d50:	4629      	mov	r1, r5
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	f04f 0300 	mov.w	r3, #0
 8004d5a:	014b      	lsls	r3, r1, #5
 8004d5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d60:	0142      	lsls	r2, r0, #5
 8004d62:	4610      	mov	r0, r2
 8004d64:	4619      	mov	r1, r3
 8004d66:	1b00      	subs	r0, r0, r4
 8004d68:	eb61 0105 	sbc.w	r1, r1, r5
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	018b      	lsls	r3, r1, #6
 8004d76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d7a:	0182      	lsls	r2, r0, #6
 8004d7c:	1a12      	subs	r2, r2, r0
 8004d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d82:	f04f 0000 	mov.w	r0, #0
 8004d86:	f04f 0100 	mov.w	r1, #0
 8004d8a:	00d9      	lsls	r1, r3, #3
 8004d8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d90:	00d0      	lsls	r0, r2, #3
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	1912      	adds	r2, r2, r4
 8004d98:	eb45 0303 	adc.w	r3, r5, r3
 8004d9c:	f04f 0000 	mov.w	r0, #0
 8004da0:	f04f 0100 	mov.w	r1, #0
 8004da4:	0299      	lsls	r1, r3, #10
 8004da6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004daa:	0290      	lsls	r0, r2, #10
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4610      	mov	r0, r2
 8004db2:	4619      	mov	r1, r3
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	f7fb ff94 	bl	8000ce8 <__aeabi_uldivmod>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	0f1b      	lsrs	r3, r3, #28
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	61bb      	str	r3, [r7, #24]
      break;
 8004dde:	e002      	b.n	8004de6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004de0:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004de2:	61bb      	str	r3, [r7, #24]
      break;
 8004de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004de6:	69bb      	ldr	r3, [r7, #24]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3720      	adds	r7, #32
 8004dec:	46bd      	mov	sp, r7
 8004dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004df2:	bf00      	nop
 8004df4:	40023800 	.word	0x40023800
 8004df8:	00f42400 	.word	0x00f42400
 8004dfc:	007a1200 	.word	0x007a1200

08004e00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e28d      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 8083 	beq.w	8004f26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e20:	4b94      	ldr	r3, [pc, #592]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 030c 	and.w	r3, r3, #12
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d019      	beq.n	8004e60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e2c:	4b91      	ldr	r3, [pc, #580]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d106      	bne.n	8004e46 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e38:	4b8e      	ldr	r3, [pc, #568]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e44:	d00c      	beq.n	8004e60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e46:	4b8b      	ldr	r3, [pc, #556]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e4e:	2b0c      	cmp	r3, #12
 8004e50:	d112      	bne.n	8004e78 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e52:	4b88      	ldr	r3, [pc, #544]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e5e:	d10b      	bne.n	8004e78 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e60:	4b84      	ldr	r3, [pc, #528]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d05b      	beq.n	8004f24 <HAL_RCC_OscConfig+0x124>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d157      	bne.n	8004f24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e25a      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e80:	d106      	bne.n	8004e90 <HAL_RCC_OscConfig+0x90>
 8004e82:	4b7c      	ldr	r3, [pc, #496]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a7b      	ldr	r2, [pc, #492]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	e01d      	b.n	8004ecc <HAL_RCC_OscConfig+0xcc>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e98:	d10c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0xb4>
 8004e9a:	4b76      	ldr	r3, [pc, #472]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a75      	ldr	r2, [pc, #468]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	4b73      	ldr	r3, [pc, #460]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a72      	ldr	r2, [pc, #456]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e00b      	b.n	8004ecc <HAL_RCC_OscConfig+0xcc>
 8004eb4:	4b6f      	ldr	r3, [pc, #444]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a6e      	ldr	r2, [pc, #440]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ebe:	6013      	str	r3, [r2, #0]
 8004ec0:	4b6c      	ldr	r3, [pc, #432]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a6b      	ldr	r2, [pc, #428]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d013      	beq.n	8004efc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed4:	f7fe fd82 	bl	80039dc <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004edc:	f7fe fd7e 	bl	80039dc <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	; 0x64
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e21f      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eee:	4b61      	ldr	r3, [pc, #388]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCC_OscConfig+0xdc>
 8004efa:	e014      	b.n	8004f26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fe fd6e 	bl	80039dc <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f04:	f7fe fd6a 	bl	80039dc <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b64      	cmp	r3, #100	; 0x64
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e20b      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f16:	4b57      	ldr	r3, [pc, #348]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f0      	bne.n	8004f04 <HAL_RCC_OscConfig+0x104>
 8004f22:	e000      	b.n	8004f26 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d06f      	beq.n	8005012 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f32:	4b50      	ldr	r3, [pc, #320]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 030c 	and.w	r3, r3, #12
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d017      	beq.n	8004f6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f3e:	4b4d      	ldr	r3, [pc, #308]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d105      	bne.n	8004f56 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f4a:	4b4a      	ldr	r3, [pc, #296]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00b      	beq.n	8004f6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f56:	4b47      	ldr	r3, [pc, #284]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f5e:	2b0c      	cmp	r3, #12
 8004f60:	d11c      	bne.n	8004f9c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f62:	4b44      	ldr	r3, [pc, #272]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d116      	bne.n	8004f9c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f6e:	4b41      	ldr	r3, [pc, #260]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <HAL_RCC_OscConfig+0x186>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d001      	beq.n	8004f86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e1d3      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f86:	4b3b      	ldr	r3, [pc, #236]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	4937      	ldr	r1, [pc, #220]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f9a:	e03a      	b.n	8005012 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d020      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fa4:	4b34      	ldr	r3, [pc, #208]	; (8005078 <HAL_RCC_OscConfig+0x278>)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004faa:	f7fe fd17 	bl	80039dc <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fb2:	f7fe fd13 	bl	80039dc <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e1b4      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc4:	4b2b      	ldr	r3, [pc, #172]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0f0      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd0:	4b28      	ldr	r3, [pc, #160]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	4925      	ldr	r1, [pc, #148]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	600b      	str	r3, [r1, #0]
 8004fe4:	e015      	b.n	8005012 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fe6:	4b24      	ldr	r3, [pc, #144]	; (8005078 <HAL_RCC_OscConfig+0x278>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fec:	f7fe fcf6 	bl	80039dc <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ff4:	f7fe fcf2 	bl	80039dc <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e193      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005006:	4b1b      	ldr	r3, [pc, #108]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f0      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	2b00      	cmp	r3, #0
 800501c:	d036      	beq.n	800508c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d016      	beq.n	8005054 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005026:	4b15      	ldr	r3, [pc, #84]	; (800507c <HAL_RCC_OscConfig+0x27c>)
 8005028:	2201      	movs	r2, #1
 800502a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502c:	f7fe fcd6 	bl	80039dc <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005034:	f7fe fcd2 	bl	80039dc <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e173      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005046:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8005048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0f0      	beq.n	8005034 <HAL_RCC_OscConfig+0x234>
 8005052:	e01b      	b.n	800508c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005054:	4b09      	ldr	r3, [pc, #36]	; (800507c <HAL_RCC_OscConfig+0x27c>)
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505a:	f7fe fcbf 	bl	80039dc <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005060:	e00e      	b.n	8005080 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005062:	f7fe fcbb 	bl	80039dc <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d907      	bls.n	8005080 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e15c      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
 8005074:	40023800 	.word	0x40023800
 8005078:	42470000 	.word	0x42470000
 800507c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005080:	4b8a      	ldr	r3, [pc, #552]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1ea      	bne.n	8005062 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8097 	beq.w	80051c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800509a:	2300      	movs	r3, #0
 800509c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800509e:	4b83      	ldr	r3, [pc, #524]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10f      	bne.n	80050ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050aa:	2300      	movs	r3, #0
 80050ac:	60bb      	str	r3, [r7, #8]
 80050ae:	4b7f      	ldr	r3, [pc, #508]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	4a7e      	ldr	r2, [pc, #504]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 80050b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b8:	6413      	str	r3, [r2, #64]	; 0x40
 80050ba:	4b7c      	ldr	r3, [pc, #496]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c2:	60bb      	str	r3, [r7, #8]
 80050c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050c6:	2301      	movs	r3, #1
 80050c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ca:	4b79      	ldr	r3, [pc, #484]	; (80052b0 <HAL_RCC_OscConfig+0x4b0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d118      	bne.n	8005108 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050d6:	4b76      	ldr	r3, [pc, #472]	; (80052b0 <HAL_RCC_OscConfig+0x4b0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a75      	ldr	r2, [pc, #468]	; (80052b0 <HAL_RCC_OscConfig+0x4b0>)
 80050dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050e2:	f7fe fc7b 	bl	80039dc <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ea:	f7fe fc77 	bl	80039dc <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e118      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fc:	4b6c      	ldr	r3, [pc, #432]	; (80052b0 <HAL_RCC_OscConfig+0x4b0>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0f0      	beq.n	80050ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d106      	bne.n	800511e <HAL_RCC_OscConfig+0x31e>
 8005110:	4b66      	ldr	r3, [pc, #408]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005114:	4a65      	ldr	r2, [pc, #404]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005116:	f043 0301 	orr.w	r3, r3, #1
 800511a:	6713      	str	r3, [r2, #112]	; 0x70
 800511c:	e01c      	b.n	8005158 <HAL_RCC_OscConfig+0x358>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b05      	cmp	r3, #5
 8005124:	d10c      	bne.n	8005140 <HAL_RCC_OscConfig+0x340>
 8005126:	4b61      	ldr	r3, [pc, #388]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512a:	4a60      	ldr	r2, [pc, #384]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 800512c:	f043 0304 	orr.w	r3, r3, #4
 8005130:	6713      	str	r3, [r2, #112]	; 0x70
 8005132:	4b5e      	ldr	r3, [pc, #376]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005136:	4a5d      	ldr	r2, [pc, #372]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	6713      	str	r3, [r2, #112]	; 0x70
 800513e:	e00b      	b.n	8005158 <HAL_RCC_OscConfig+0x358>
 8005140:	4b5a      	ldr	r3, [pc, #360]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005144:	4a59      	ldr	r2, [pc, #356]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005146:	f023 0301 	bic.w	r3, r3, #1
 800514a:	6713      	str	r3, [r2, #112]	; 0x70
 800514c:	4b57      	ldr	r3, [pc, #348]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 800514e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005150:	4a56      	ldr	r2, [pc, #344]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005152:	f023 0304 	bic.w	r3, r3, #4
 8005156:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d015      	beq.n	800518c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005160:	f7fe fc3c 	bl	80039dc <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005166:	e00a      	b.n	800517e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005168:	f7fe fc38 	bl	80039dc <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	f241 3288 	movw	r2, #5000	; 0x1388
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e0d7      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517e:	4b4b      	ldr	r3, [pc, #300]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0ee      	beq.n	8005168 <HAL_RCC_OscConfig+0x368>
 800518a:	e014      	b.n	80051b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518c:	f7fe fc26 	bl	80039dc <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005192:	e00a      	b.n	80051aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005194:	f7fe fc22 	bl	80039dc <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e0c1      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051aa:	4b40      	ldr	r3, [pc, #256]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1ee      	bne.n	8005194 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d105      	bne.n	80051c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051bc:	4b3b      	ldr	r3, [pc, #236]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	4a3a      	ldr	r2, [pc, #232]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 80051c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 80ad 	beq.w	800532c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051d2:	4b36      	ldr	r3, [pc, #216]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d060      	beq.n	80052a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d145      	bne.n	8005272 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e6:	4b33      	ldr	r3, [pc, #204]	; (80052b4 <HAL_RCC_OscConfig+0x4b4>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ec:	f7fe fbf6 	bl	80039dc <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f4:	f7fe fbf2 	bl	80039dc <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e093      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005206:	4b29      	ldr	r3, [pc, #164]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f0      	bne.n	80051f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69da      	ldr	r2, [r3, #28]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	019b      	lsls	r3, r3, #6
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	085b      	lsrs	r3, r3, #1
 800522a:	3b01      	subs	r3, #1
 800522c:	041b      	lsls	r3, r3, #16
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	061b      	lsls	r3, r3, #24
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	071b      	lsls	r3, r3, #28
 800523e:	491b      	ldr	r1, [pc, #108]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005240:	4313      	orrs	r3, r2
 8005242:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005244:	4b1b      	ldr	r3, [pc, #108]	; (80052b4 <HAL_RCC_OscConfig+0x4b4>)
 8005246:	2201      	movs	r2, #1
 8005248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524a:	f7fe fbc7 	bl	80039dc <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005252:	f7fe fbc3 	bl	80039dc <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e064      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005264:	4b11      	ldr	r3, [pc, #68]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0f0      	beq.n	8005252 <HAL_RCC_OscConfig+0x452>
 8005270:	e05c      	b.n	800532c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005272:	4b10      	ldr	r3, [pc, #64]	; (80052b4 <HAL_RCC_OscConfig+0x4b4>)
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005278:	f7fe fbb0 	bl	80039dc <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005280:	f7fe fbac 	bl	80039dc <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e04d      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f0      	bne.n	8005280 <HAL_RCC_OscConfig+0x480>
 800529e:	e045      	b.n	800532c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d107      	bne.n	80052b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e040      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
 80052ac:	40023800 	.word	0x40023800
 80052b0:	40007000 	.word	0x40007000
 80052b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052b8:	4b1f      	ldr	r3, [pc, #124]	; (8005338 <HAL_RCC_OscConfig+0x538>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d030      	beq.n	8005328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d129      	bne.n	8005328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052de:	429a      	cmp	r2, r3
 80052e0:	d122      	bne.n	8005328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052e8:	4013      	ands	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d119      	bne.n	8005328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	085b      	lsrs	r3, r3, #1
 8005300:	3b01      	subs	r3, #1
 8005302:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005304:	429a      	cmp	r2, r3
 8005306:	d10f      	bne.n	8005328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005314:	429a      	cmp	r2, r3
 8005316:	d107      	bne.n	8005328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005324:	429a      	cmp	r2, r3
 8005326:	d001      	beq.n	800532c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e000      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40023800 	.word	0x40023800

0800533c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e041      	b.n	80053d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fe f93e 	bl	80035e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3304      	adds	r3, #4
 8005378:	4619      	mov	r1, r3
 800537a:	4610      	mov	r0, r2
 800537c:	f000 fdae 	bl	8005edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d001      	beq.n	80053f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e04e      	b.n	8005492 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a23      	ldr	r2, [pc, #140]	; (80054a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d022      	beq.n	800545c <HAL_TIM_Base_Start_IT+0x80>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541e:	d01d      	beq.n	800545c <HAL_TIM_Base_Start_IT+0x80>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1f      	ldr	r2, [pc, #124]	; (80054a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d018      	beq.n	800545c <HAL_TIM_Base_Start_IT+0x80>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1e      	ldr	r2, [pc, #120]	; (80054a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d013      	beq.n	800545c <HAL_TIM_Base_Start_IT+0x80>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a1c      	ldr	r2, [pc, #112]	; (80054ac <HAL_TIM_Base_Start_IT+0xd0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00e      	beq.n	800545c <HAL_TIM_Base_Start_IT+0x80>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a1b      	ldr	r2, [pc, #108]	; (80054b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d009      	beq.n	800545c <HAL_TIM_Base_Start_IT+0x80>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a19      	ldr	r2, [pc, #100]	; (80054b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d004      	beq.n	800545c <HAL_TIM_Base_Start_IT+0x80>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a18      	ldr	r2, [pc, #96]	; (80054b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d111      	bne.n	8005480 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b06      	cmp	r3, #6
 800546c:	d010      	beq.n	8005490 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f042 0201 	orr.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547e:	e007      	b.n	8005490 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 0201 	orr.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40010000 	.word	0x40010000
 80054a4:	40000400 	.word	0x40000400
 80054a8:	40000800 	.word	0x40000800
 80054ac:	40000c00 	.word	0x40000c00
 80054b0:	40010400 	.word	0x40010400
 80054b4:	40014000 	.word	0x40014000
 80054b8:	40001800 	.word	0x40001800

080054bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e041      	b.n	8005552 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f839 	bl	800555a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3304      	adds	r3, #4
 80054f8:	4619      	mov	r1, r3
 80054fa:	4610      	mov	r0, r2
 80054fc:	f000 fcee 	bl	8005edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
	...

08005570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d109      	bne.n	8005594 <HAL_TIM_PWM_Start+0x24>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b01      	cmp	r3, #1
 800558a:	bf14      	ite	ne
 800558c:	2301      	movne	r3, #1
 800558e:	2300      	moveq	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	e022      	b.n	80055da <HAL_TIM_PWM_Start+0x6a>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b04      	cmp	r3, #4
 8005598:	d109      	bne.n	80055ae <HAL_TIM_PWM_Start+0x3e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	bf14      	ite	ne
 80055a6:	2301      	movne	r3, #1
 80055a8:	2300      	moveq	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	e015      	b.n	80055da <HAL_TIM_PWM_Start+0x6a>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d109      	bne.n	80055c8 <HAL_TIM_PWM_Start+0x58>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b01      	cmp	r3, #1
 80055be:	bf14      	ite	ne
 80055c0:	2301      	movne	r3, #1
 80055c2:	2300      	moveq	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	e008      	b.n	80055da <HAL_TIM_PWM_Start+0x6a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	bf14      	ite	ne
 80055d4:	2301      	movne	r3, #1
 80055d6:	2300      	moveq	r3, #0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e07c      	b.n	80056dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d104      	bne.n	80055f2 <HAL_TIM_PWM_Start+0x82>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055f0:	e013      	b.n	800561a <HAL_TIM_PWM_Start+0xaa>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d104      	bne.n	8005602 <HAL_TIM_PWM_Start+0x92>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005600:	e00b      	b.n	800561a <HAL_TIM_PWM_Start+0xaa>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b08      	cmp	r3, #8
 8005606:	d104      	bne.n	8005612 <HAL_TIM_PWM_Start+0xa2>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005610:	e003      	b.n	800561a <HAL_TIM_PWM_Start+0xaa>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2202      	movs	r2, #2
 8005616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2201      	movs	r2, #1
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f000 ff44 	bl	80064b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a2d      	ldr	r2, [pc, #180]	; (80056e4 <HAL_TIM_PWM_Start+0x174>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d004      	beq.n	800563c <HAL_TIM_PWM_Start+0xcc>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a2c      	ldr	r2, [pc, #176]	; (80056e8 <HAL_TIM_PWM_Start+0x178>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d101      	bne.n	8005640 <HAL_TIM_PWM_Start+0xd0>
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <HAL_TIM_PWM_Start+0xd2>
 8005640:	2300      	movs	r3, #0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005654:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a22      	ldr	r2, [pc, #136]	; (80056e4 <HAL_TIM_PWM_Start+0x174>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d022      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x136>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005668:	d01d      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x136>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a1f      	ldr	r2, [pc, #124]	; (80056ec <HAL_TIM_PWM_Start+0x17c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d018      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x136>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a1d      	ldr	r2, [pc, #116]	; (80056f0 <HAL_TIM_PWM_Start+0x180>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d013      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x136>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a1c      	ldr	r2, [pc, #112]	; (80056f4 <HAL_TIM_PWM_Start+0x184>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00e      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x136>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a16      	ldr	r2, [pc, #88]	; (80056e8 <HAL_TIM_PWM_Start+0x178>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d009      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x136>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a18      	ldr	r2, [pc, #96]	; (80056f8 <HAL_TIM_PWM_Start+0x188>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d004      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x136>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a16      	ldr	r2, [pc, #88]	; (80056fc <HAL_TIM_PWM_Start+0x18c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d111      	bne.n	80056ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b06      	cmp	r3, #6
 80056b6:	d010      	beq.n	80056da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0201 	orr.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c8:	e007      	b.n	80056da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0201 	orr.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40010000 	.word	0x40010000
 80056e8:	40010400 	.word	0x40010400
 80056ec:	40000400 	.word	0x40000400
 80056f0:	40000800 	.word	0x40000800
 80056f4:	40000c00 	.word	0x40000c00
 80056f8:	40014000 	.word	0x40014000
 80056fc:	40001800 	.word	0x40001800

08005700 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e097      	b.n	8005844 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7fd ff99 	bl	8003660 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2202      	movs	r2, #2
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6812      	ldr	r2, [r2, #0]
 8005740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005744:	f023 0307 	bic.w	r3, r3, #7
 8005748:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3304      	adds	r3, #4
 8005752:	4619      	mov	r1, r3
 8005754:	4610      	mov	r0, r2
 8005756:	f000 fbc1 	bl	8005edc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4313      	orrs	r3, r2
 800577a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005782:	f023 0303 	bic.w	r3, r3, #3
 8005786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	021b      	lsls	r3, r3, #8
 8005792:	4313      	orrs	r3, r2
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80057a0:	f023 030c 	bic.w	r3, r3, #12
 80057a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	4313      	orrs	r3, r2
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	011a      	lsls	r2, r3, #4
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	031b      	lsls	r3, r3, #12
 80057d0:	4313      	orrs	r3, r2
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80057de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80057e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	4313      	orrs	r3, r2
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800585c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005864:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800586c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005874:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d110      	bne.n	800589e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d102      	bne.n	8005888 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005882:	7b7b      	ldrb	r3, [r7, #13]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d001      	beq.n	800588c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e069      	b.n	8005960 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800589c:	e031      	b.n	8005902 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d110      	bne.n	80058c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058a4:	7bbb      	ldrb	r3, [r7, #14]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d102      	bne.n	80058b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058aa:	7b3b      	ldrb	r3, [r7, #12]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d001      	beq.n	80058b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e055      	b.n	8005960 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058c4:	e01d      	b.n	8005902 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d108      	bne.n	80058de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058cc:	7bbb      	ldrb	r3, [r7, #14]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d105      	bne.n	80058de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058d2:	7b7b      	ldrb	r3, [r7, #13]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d102      	bne.n	80058de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058d8:	7b3b      	ldrb	r3, [r7, #12]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d001      	beq.n	80058e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e03e      	b.n	8005960 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2202      	movs	r2, #2
 80058e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2202      	movs	r2, #2
 80058ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2202      	movs	r2, #2
 80058f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2202      	movs	r2, #2
 80058fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <HAL_TIM_Encoder_Start+0xc4>
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2b04      	cmp	r3, #4
 800590c:	d008      	beq.n	8005920 <HAL_TIM_Encoder_Start+0xd4>
 800590e:	e00f      	b.n	8005930 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2201      	movs	r2, #1
 8005916:	2100      	movs	r1, #0
 8005918:	4618      	mov	r0, r3
 800591a:	f000 fdc9 	bl	80064b0 <TIM_CCxChannelCmd>
      break;
 800591e:	e016      	b.n	800594e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2201      	movs	r2, #1
 8005926:	2104      	movs	r1, #4
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fdc1 	bl	80064b0 <TIM_CCxChannelCmd>
      break;
 800592e:	e00e      	b.n	800594e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2201      	movs	r2, #1
 8005936:	2100      	movs	r1, #0
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fdb9 	bl	80064b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2201      	movs	r2, #1
 8005944:	2104      	movs	r1, #4
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fdb2 	bl	80064b0 <TIM_CCxChannelCmd>
      break;
 800594c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f042 0201 	orr.w	r2, r2, #1
 800595c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b02      	cmp	r3, #2
 800597c:	d122      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b02      	cmp	r3, #2
 800598a:	d11b      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0202 	mvn.w	r2, #2
 8005994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa77 	bl	8005e9e <HAL_TIM_IC_CaptureCallback>
 80059b0:	e005      	b.n	80059be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fa69 	bl	8005e8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fa7a 	bl	8005eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d122      	bne.n	8005a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d11b      	bne.n	8005a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f06f 0204 	mvn.w	r2, #4
 80059e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fa4d 	bl	8005e9e <HAL_TIM_IC_CaptureCallback>
 8005a04:	e005      	b.n	8005a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fa3f 	bl	8005e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fa50 	bl	8005eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b08      	cmp	r3, #8
 8005a24:	d122      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f003 0308 	and.w	r3, r3, #8
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d11b      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f06f 0208 	mvn.w	r2, #8
 8005a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2204      	movs	r2, #4
 8005a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fa23 	bl	8005e9e <HAL_TIM_IC_CaptureCallback>
 8005a58:	e005      	b.n	8005a66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fa15 	bl	8005e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fa26 	bl	8005eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0310 	and.w	r3, r3, #16
 8005a76:	2b10      	cmp	r3, #16
 8005a78:	d122      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f003 0310 	and.w	r3, r3, #16
 8005a84:	2b10      	cmp	r3, #16
 8005a86:	d11b      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f06f 0210 	mvn.w	r2, #16
 8005a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2208      	movs	r2, #8
 8005a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f9f9 	bl	8005e9e <HAL_TIM_IC_CaptureCallback>
 8005aac:	e005      	b.n	8005aba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f9eb 	bl	8005e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f9fc 	bl	8005eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d10e      	bne.n	8005aec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d107      	bne.n	8005aec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0201 	mvn.w	r2, #1
 8005ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7fd fa60 	bl	8002fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af6:	2b80      	cmp	r3, #128	; 0x80
 8005af8:	d10e      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b04:	2b80      	cmp	r3, #128	; 0x80
 8005b06:	d107      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fdca 	bl	80066ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b22:	2b40      	cmp	r3, #64	; 0x40
 8005b24:	d10e      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b30:	2b40      	cmp	r3, #64	; 0x40
 8005b32:	d107      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f9c1 	bl	8005ec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0320 	and.w	r3, r3, #32
 8005b4e:	2b20      	cmp	r3, #32
 8005b50:	d10e      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	d107      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0220 	mvn.w	r2, #32
 8005b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fd94 	bl	8006698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b70:	bf00      	nop
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e0ae      	b.n	8005cf4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b0c      	cmp	r3, #12
 8005ba2:	f200 809f 	bhi.w	8005ce4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ba6:	a201      	add	r2, pc, #4	; (adr r2, 8005bac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bac:	08005be1 	.word	0x08005be1
 8005bb0:	08005ce5 	.word	0x08005ce5
 8005bb4:	08005ce5 	.word	0x08005ce5
 8005bb8:	08005ce5 	.word	0x08005ce5
 8005bbc:	08005c21 	.word	0x08005c21
 8005bc0:	08005ce5 	.word	0x08005ce5
 8005bc4:	08005ce5 	.word	0x08005ce5
 8005bc8:	08005ce5 	.word	0x08005ce5
 8005bcc:	08005c63 	.word	0x08005c63
 8005bd0:	08005ce5 	.word	0x08005ce5
 8005bd4:	08005ce5 	.word	0x08005ce5
 8005bd8:	08005ce5 	.word	0x08005ce5
 8005bdc:	08005ca3 	.word	0x08005ca3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fa18 	bl	800601c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0208 	orr.w	r2, r2, #8
 8005bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699a      	ldr	r2, [r3, #24]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0204 	bic.w	r2, r2, #4
 8005c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6999      	ldr	r1, [r3, #24]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	691a      	ldr	r2, [r3, #16]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	619a      	str	r2, [r3, #24]
      break;
 8005c1e:	e064      	b.n	8005cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68b9      	ldr	r1, [r7, #8]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 fa68 	bl	80060fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699a      	ldr	r2, [r3, #24]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699a      	ldr	r2, [r3, #24]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6999      	ldr	r1, [r3, #24]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	021a      	lsls	r2, r3, #8
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	619a      	str	r2, [r3, #24]
      break;
 8005c60:	e043      	b.n	8005cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68b9      	ldr	r1, [r7, #8]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fabd 	bl	80061e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69da      	ldr	r2, [r3, #28]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f042 0208 	orr.w	r2, r2, #8
 8005c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0204 	bic.w	r2, r2, #4
 8005c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69d9      	ldr	r1, [r3, #28]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	61da      	str	r2, [r3, #28]
      break;
 8005ca0:	e023      	b.n	8005cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68b9      	ldr	r1, [r7, #8]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 fb11 	bl	80062d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69da      	ldr	r2, [r3, #28]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69da      	ldr	r2, [r3, #28]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69d9      	ldr	r1, [r3, #28]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	021a      	lsls	r2, r3, #8
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	61da      	str	r2, [r3, #28]
      break;
 8005ce2:	e002      	b.n	8005cea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ce8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_TIM_ConfigClockSource+0x1c>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e0b4      	b.n	8005e82 <HAL_TIM_ConfigClockSource+0x186>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d50:	d03e      	beq.n	8005dd0 <HAL_TIM_ConfigClockSource+0xd4>
 8005d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d56:	f200 8087 	bhi.w	8005e68 <HAL_TIM_ConfigClockSource+0x16c>
 8005d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5e:	f000 8086 	beq.w	8005e6e <HAL_TIM_ConfigClockSource+0x172>
 8005d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d66:	d87f      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x16c>
 8005d68:	2b70      	cmp	r3, #112	; 0x70
 8005d6a:	d01a      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0xa6>
 8005d6c:	2b70      	cmp	r3, #112	; 0x70
 8005d6e:	d87b      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x16c>
 8005d70:	2b60      	cmp	r3, #96	; 0x60
 8005d72:	d050      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0x11a>
 8005d74:	2b60      	cmp	r3, #96	; 0x60
 8005d76:	d877      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x16c>
 8005d78:	2b50      	cmp	r3, #80	; 0x50
 8005d7a:	d03c      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0xfa>
 8005d7c:	2b50      	cmp	r3, #80	; 0x50
 8005d7e:	d873      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x16c>
 8005d80:	2b40      	cmp	r3, #64	; 0x40
 8005d82:	d058      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x13a>
 8005d84:	2b40      	cmp	r3, #64	; 0x40
 8005d86:	d86f      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x16c>
 8005d88:	2b30      	cmp	r3, #48	; 0x30
 8005d8a:	d064      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x15a>
 8005d8c:	2b30      	cmp	r3, #48	; 0x30
 8005d8e:	d86b      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x16c>
 8005d90:	2b20      	cmp	r3, #32
 8005d92:	d060      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x15a>
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	d867      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x16c>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d05c      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x15a>
 8005d9c:	2b10      	cmp	r3, #16
 8005d9e:	d05a      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x15a>
 8005da0:	e062      	b.n	8005e68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6899      	ldr	r1, [r3, #8]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f000 fb5d 	bl	8006470 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	609a      	str	r2, [r3, #8]
      break;
 8005dce:	e04f      	b.n	8005e70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	6899      	ldr	r1, [r3, #8]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f000 fb46 	bl	8006470 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005df2:	609a      	str	r2, [r3, #8]
      break;
 8005df4:	e03c      	b.n	8005e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	6859      	ldr	r1, [r3, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	461a      	mov	r2, r3
 8005e04:	f000 faba 	bl	800637c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2150      	movs	r1, #80	; 0x50
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fb13 	bl	800643a <TIM_ITRx_SetConfig>
      break;
 8005e14:	e02c      	b.n	8005e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	6859      	ldr	r1, [r3, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	461a      	mov	r2, r3
 8005e24:	f000 fad9 	bl	80063da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2160      	movs	r1, #96	; 0x60
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fb03 	bl	800643a <TIM_ITRx_SetConfig>
      break;
 8005e34:	e01c      	b.n	8005e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6818      	ldr	r0, [r3, #0]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	6859      	ldr	r1, [r3, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	461a      	mov	r2, r3
 8005e44:	f000 fa9a 	bl	800637c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2140      	movs	r1, #64	; 0x40
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 faf3 	bl	800643a <TIM_ITRx_SetConfig>
      break;
 8005e54:	e00c      	b.n	8005e70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4610      	mov	r0, r2
 8005e62:	f000 faea 	bl	800643a <TIM_ITRx_SetConfig>
      break;
 8005e66:	e003      	b.n	8005e70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e6c:	e000      	b.n	8005e70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
	...

08005edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a40      	ldr	r2, [pc, #256]	; (8005ff0 <TIM_Base_SetConfig+0x114>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d013      	beq.n	8005f1c <TIM_Base_SetConfig+0x40>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005efa:	d00f      	beq.n	8005f1c <TIM_Base_SetConfig+0x40>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a3d      	ldr	r2, [pc, #244]	; (8005ff4 <TIM_Base_SetConfig+0x118>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00b      	beq.n	8005f1c <TIM_Base_SetConfig+0x40>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a3c      	ldr	r2, [pc, #240]	; (8005ff8 <TIM_Base_SetConfig+0x11c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d007      	beq.n	8005f1c <TIM_Base_SetConfig+0x40>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a3b      	ldr	r2, [pc, #236]	; (8005ffc <TIM_Base_SetConfig+0x120>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d003      	beq.n	8005f1c <TIM_Base_SetConfig+0x40>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a3a      	ldr	r2, [pc, #232]	; (8006000 <TIM_Base_SetConfig+0x124>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d108      	bne.n	8005f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a2f      	ldr	r2, [pc, #188]	; (8005ff0 <TIM_Base_SetConfig+0x114>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d02b      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3c:	d027      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a2c      	ldr	r2, [pc, #176]	; (8005ff4 <TIM_Base_SetConfig+0x118>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d023      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a2b      	ldr	r2, [pc, #172]	; (8005ff8 <TIM_Base_SetConfig+0x11c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d01f      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a2a      	ldr	r2, [pc, #168]	; (8005ffc <TIM_Base_SetConfig+0x120>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d01b      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a29      	ldr	r2, [pc, #164]	; (8006000 <TIM_Base_SetConfig+0x124>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d017      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a28      	ldr	r2, [pc, #160]	; (8006004 <TIM_Base_SetConfig+0x128>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d013      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a27      	ldr	r2, [pc, #156]	; (8006008 <TIM_Base_SetConfig+0x12c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00f      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a26      	ldr	r2, [pc, #152]	; (800600c <TIM_Base_SetConfig+0x130>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d00b      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a25      	ldr	r2, [pc, #148]	; (8006010 <TIM_Base_SetConfig+0x134>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d007      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a24      	ldr	r2, [pc, #144]	; (8006014 <TIM_Base_SetConfig+0x138>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d003      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a23      	ldr	r2, [pc, #140]	; (8006018 <TIM_Base_SetConfig+0x13c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d108      	bne.n	8005fa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a0a      	ldr	r2, [pc, #40]	; (8005ff0 <TIM_Base_SetConfig+0x114>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d003      	beq.n	8005fd4 <TIM_Base_SetConfig+0xf8>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a0c      	ldr	r2, [pc, #48]	; (8006000 <TIM_Base_SetConfig+0x124>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d103      	bne.n	8005fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	691a      	ldr	r2, [r3, #16]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	615a      	str	r2, [r3, #20]
}
 8005fe2:	bf00      	nop
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	40010000 	.word	0x40010000
 8005ff4:	40000400 	.word	0x40000400
 8005ff8:	40000800 	.word	0x40000800
 8005ffc:	40000c00 	.word	0x40000c00
 8006000:	40010400 	.word	0x40010400
 8006004:	40014000 	.word	0x40014000
 8006008:	40014400 	.word	0x40014400
 800600c:	40014800 	.word	0x40014800
 8006010:	40001800 	.word	0x40001800
 8006014:	40001c00 	.word	0x40001c00
 8006018:	40002000 	.word	0x40002000

0800601c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f023 0201 	bic.w	r2, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0303 	bic.w	r3, r3, #3
 8006052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f023 0302 	bic.w	r3, r3, #2
 8006064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a20      	ldr	r2, [pc, #128]	; (80060f4 <TIM_OC1_SetConfig+0xd8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d003      	beq.n	8006080 <TIM_OC1_SetConfig+0x64>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a1f      	ldr	r2, [pc, #124]	; (80060f8 <TIM_OC1_SetConfig+0xdc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d10c      	bne.n	800609a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f023 0308 	bic.w	r3, r3, #8
 8006086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	4313      	orrs	r3, r2
 8006090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f023 0304 	bic.w	r3, r3, #4
 8006098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a15      	ldr	r2, [pc, #84]	; (80060f4 <TIM_OC1_SetConfig+0xd8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d003      	beq.n	80060aa <TIM_OC1_SetConfig+0x8e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a14      	ldr	r2, [pc, #80]	; (80060f8 <TIM_OC1_SetConfig+0xdc>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d111      	bne.n	80060ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	621a      	str	r2, [r3, #32]
}
 80060e8:	bf00      	nop
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	40010000 	.word	0x40010000
 80060f8:	40010400 	.word	0x40010400

080060fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	f023 0210 	bic.w	r2, r3, #16
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	021b      	lsls	r3, r3, #8
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4313      	orrs	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f023 0320 	bic.w	r3, r3, #32
 8006146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	011b      	lsls	r3, r3, #4
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a22      	ldr	r2, [pc, #136]	; (80061e0 <TIM_OC2_SetConfig+0xe4>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d003      	beq.n	8006164 <TIM_OC2_SetConfig+0x68>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a21      	ldr	r2, [pc, #132]	; (80061e4 <TIM_OC2_SetConfig+0xe8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d10d      	bne.n	8006180 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800616a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800617e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a17      	ldr	r2, [pc, #92]	; (80061e0 <TIM_OC2_SetConfig+0xe4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_OC2_SetConfig+0x94>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a16      	ldr	r2, [pc, #88]	; (80061e4 <TIM_OC2_SetConfig+0xe8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d113      	bne.n	80061b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800619e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	621a      	str	r2, [r3, #32]
}
 80061d2:	bf00      	nop
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40010000 	.word	0x40010000
 80061e4:	40010400 	.word	0x40010400

080061e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0303 	bic.w	r3, r3, #3
 800621e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	021b      	lsls	r3, r3, #8
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	4313      	orrs	r3, r2
 800623c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a21      	ldr	r2, [pc, #132]	; (80062c8 <TIM_OC3_SetConfig+0xe0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d003      	beq.n	800624e <TIM_OC3_SetConfig+0x66>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a20      	ldr	r2, [pc, #128]	; (80062cc <TIM_OC3_SetConfig+0xe4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d10d      	bne.n	800626a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006254:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	4313      	orrs	r3, r2
 8006260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a16      	ldr	r2, [pc, #88]	; (80062c8 <TIM_OC3_SetConfig+0xe0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d003      	beq.n	800627a <TIM_OC3_SetConfig+0x92>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a15      	ldr	r2, [pc, #84]	; (80062cc <TIM_OC3_SetConfig+0xe4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d113      	bne.n	80062a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	011b      	lsls	r3, r3, #4
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	4313      	orrs	r3, r2
 8006294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	621a      	str	r2, [r3, #32]
}
 80062bc:	bf00      	nop
 80062be:	371c      	adds	r7, #28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	40010000 	.word	0x40010000
 80062cc:	40010400 	.word	0x40010400

080062d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800631a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	031b      	lsls	r3, r3, #12
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a12      	ldr	r2, [pc, #72]	; (8006374 <TIM_OC4_SetConfig+0xa4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d003      	beq.n	8006338 <TIM_OC4_SetConfig+0x68>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a11      	ldr	r2, [pc, #68]	; (8006378 <TIM_OC4_SetConfig+0xa8>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d109      	bne.n	800634c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800633e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	019b      	lsls	r3, r3, #6
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	4313      	orrs	r3, r2
 800634a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	621a      	str	r2, [r3, #32]
}
 8006366:	bf00      	nop
 8006368:	371c      	adds	r7, #28
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	40010000 	.word	0x40010000
 8006378:	40010400 	.word	0x40010400

0800637c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	f023 0201 	bic.w	r2, r3, #1
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f023 030a 	bic.w	r3, r3, #10
 80063b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4313      	orrs	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	621a      	str	r2, [r3, #32]
}
 80063ce:	bf00      	nop
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063da:	b480      	push	{r7}
 80063dc:	b087      	sub	sp, #28
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f023 0210 	bic.w	r2, r3, #16
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006404:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	031b      	lsls	r3, r3, #12
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006416:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	621a      	str	r2, [r3, #32]
}
 800642e:	bf00      	nop
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800643a:	b480      	push	{r7}
 800643c:	b085      	sub	sp, #20
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4313      	orrs	r3, r2
 8006458:	f043 0307 	orr.w	r3, r3, #7
 800645c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	609a      	str	r2, [r3, #8]
}
 8006464:	bf00      	nop
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
 800647c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800648a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	021a      	lsls	r2, r3, #8
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	431a      	orrs	r2, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4313      	orrs	r3, r2
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	609a      	str	r2, [r3, #8]
}
 80064a4:	bf00      	nop
 80064a6:	371c      	adds	r7, #28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2201      	movs	r2, #1
 80064c4:	fa02 f303 	lsl.w	r3, r2, r3
 80064c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a1a      	ldr	r2, [r3, #32]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	43db      	mvns	r3, r3
 80064d2:	401a      	ands	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6a1a      	ldr	r2, [r3, #32]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f003 031f 	and.w	r3, r3, #31
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	fa01 f303 	lsl.w	r3, r1, r3
 80064e8:	431a      	orrs	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	621a      	str	r2, [r3, #32]
}
 80064ee:	bf00      	nop
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
	...

080064fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800650c:	2b01      	cmp	r3, #1
 800650e:	d101      	bne.n	8006514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006510:	2302      	movs	r3, #2
 8006512:	e05a      	b.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a21      	ldr	r2, [pc, #132]	; (80065d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d022      	beq.n	800659e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006560:	d01d      	beq.n	800659e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a1d      	ldr	r2, [pc, #116]	; (80065dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d018      	beq.n	800659e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a1b      	ldr	r2, [pc, #108]	; (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d013      	beq.n	800659e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a1a      	ldr	r2, [pc, #104]	; (80065e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00e      	beq.n	800659e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a18      	ldr	r2, [pc, #96]	; (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d009      	beq.n	800659e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a17      	ldr	r2, [pc, #92]	; (80065ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d004      	beq.n	800659e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a15      	ldr	r2, [pc, #84]	; (80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d10c      	bne.n	80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	40010000 	.word	0x40010000
 80065dc:	40000400 	.word	0x40000400
 80065e0:	40000800 	.word	0x40000800
 80065e4:	40000c00 	.word	0x40000c00
 80065e8:	40010400 	.word	0x40010400
 80065ec:	40014000 	.word	0x40014000
 80065f0:	40001800 	.word	0x40001800

080065f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006608:	2b01      	cmp	r3, #1
 800660a:	d101      	bne.n	8006610 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800660c:	2302      	movs	r3, #2
 800660e:	e03d      	b.n	800668c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	4313      	orrs	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	4313      	orrs	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e03f      	b.n	8006752 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d106      	bne.n	80066ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7fd f898 	bl	800381c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2224      	movs	r2, #36	; 0x24
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006702:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fddb 	bl	80072c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006718:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695a      	ldr	r2, [r3, #20]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006728:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006738:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b08a      	sub	sp, #40	; 0x28
 800675e:	af02      	add	r7, sp, #8
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	603b      	str	r3, [r7, #0]
 8006766:	4613      	mov	r3, r2
 8006768:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b20      	cmp	r3, #32
 8006778:	d17c      	bne.n	8006874 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <HAL_UART_Transmit+0x2c>
 8006780:	88fb      	ldrh	r3, [r7, #6]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e075      	b.n	8006876 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_UART_Transmit+0x3e>
 8006794:	2302      	movs	r3, #2
 8006796:	e06e      	b.n	8006876 <HAL_UART_Transmit+0x11c>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2221      	movs	r2, #33	; 0x21
 80067aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067ae:	f7fd f915 	bl	80039dc <HAL_GetTick>
 80067b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	88fa      	ldrh	r2, [r7, #6]
 80067b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	88fa      	ldrh	r2, [r7, #6]
 80067be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c8:	d108      	bne.n	80067dc <HAL_UART_Transmit+0x82>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80067d2:	2300      	movs	r3, #0
 80067d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	61bb      	str	r3, [r7, #24]
 80067da:	e003      	b.n	80067e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067e0:	2300      	movs	r3, #0
 80067e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80067ec:	e02a      	b.n	8006844 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2200      	movs	r2, #0
 80067f6:	2180      	movs	r1, #128	; 0x80
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 fb1f 	bl	8006e3c <UART_WaitOnFlagUntilTimeout>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e036      	b.n	8006876 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10b      	bne.n	8006826 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800681c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	3302      	adds	r3, #2
 8006822:	61bb      	str	r3, [r7, #24]
 8006824:	e007      	b.n	8006836 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	781a      	ldrb	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	3301      	adds	r3, #1
 8006834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800683a:	b29b      	uxth	r3, r3
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006848:	b29b      	uxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1cf      	bne.n	80067ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2200      	movs	r2, #0
 8006856:	2140      	movs	r1, #64	; 0x40
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 faef 	bl	8006e3c <UART_WaitOnFlagUntilTimeout>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e006      	b.n	8006876 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2220      	movs	r2, #32
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	e000      	b.n	8006876 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006874:	2302      	movs	r3, #2
  }
}
 8006876:	4618      	mov	r0, r3
 8006878:	3720      	adds	r7, #32
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	4613      	mov	r3, r2
 800688a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b20      	cmp	r3, #32
 8006896:	d11d      	bne.n	80068d4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <HAL_UART_Receive_IT+0x26>
 800689e:	88fb      	ldrh	r3, [r7, #6]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e016      	b.n	80068d6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d101      	bne.n	80068b6 <HAL_UART_Receive_IT+0x38>
 80068b2:	2302      	movs	r3, #2
 80068b4:	e00f      	b.n	80068d6 <HAL_UART_Receive_IT+0x58>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80068c4:	88fb      	ldrh	r3, [r7, #6]
 80068c6:	461a      	mov	r2, r3
 80068c8:	68b9      	ldr	r1, [r7, #8]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 fb24 	bl	8006f18 <UART_Start_Receive_IT>
 80068d0:	4603      	mov	r3, r0
 80068d2:	e000      	b.n	80068d6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80068d4:	2302      	movs	r3, #2
  }
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b0ba      	sub	sp, #232	; 0xe8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006906:	2300      	movs	r3, #0
 8006908:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800690c:	2300      	movs	r3, #0
 800690e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006916:	f003 030f 	and.w	r3, r3, #15
 800691a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800691e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10f      	bne.n	8006946 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800692a:	f003 0320 	and.w	r3, r3, #32
 800692e:	2b00      	cmp	r3, #0
 8006930:	d009      	beq.n	8006946 <HAL_UART_IRQHandler+0x66>
 8006932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006936:	f003 0320 	and.w	r3, r3, #32
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fc03 	bl	800714a <UART_Receive_IT>
      return;
 8006944:	e256      	b.n	8006df4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006946:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 80de 	beq.w	8006b0c <HAL_UART_IRQHandler+0x22c>
 8006950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d106      	bne.n	800696a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006960:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 80d1 	beq.w	8006b0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800696a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00b      	beq.n	800698e <HAL_UART_IRQHandler+0xae>
 8006976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800697a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697e:	2b00      	cmp	r3, #0
 8006980:	d005      	beq.n	800698e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	f043 0201 	orr.w	r2, r3, #1
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800698e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00b      	beq.n	80069b2 <HAL_UART_IRQHandler+0xd2>
 800699a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d005      	beq.n	80069b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	f043 0202 	orr.w	r2, r3, #2
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00b      	beq.n	80069d6 <HAL_UART_IRQHandler+0xf6>
 80069be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d005      	beq.n	80069d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	f043 0204 	orr.w	r2, r3, #4
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80069d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d011      	beq.n	8006a06 <HAL_UART_IRQHandler+0x126>
 80069e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d105      	bne.n	80069fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80069ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	f043 0208 	orr.w	r2, r3, #8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 81ed 	beq.w	8006dea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <HAL_UART_IRQHandler+0x14e>
 8006a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fb8e 	bl	800714a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a38:	2b40      	cmp	r3, #64	; 0x40
 8006a3a:	bf0c      	ite	eq
 8006a3c:	2301      	moveq	r3, #1
 8006a3e:	2300      	movne	r3, #0
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4a:	f003 0308 	and.w	r3, r3, #8
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <HAL_UART_IRQHandler+0x17a>
 8006a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d04f      	beq.n	8006afa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fa96 	bl	8006f8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6a:	2b40      	cmp	r3, #64	; 0x40
 8006a6c:	d141      	bne.n	8006af2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3314      	adds	r3, #20
 8006a74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3314      	adds	r3, #20
 8006a96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006aa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ab2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1d9      	bne.n	8006a6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d013      	beq.n	8006aea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac6:	4a7d      	ldr	r2, [pc, #500]	; (8006cbc <HAL_UART_IRQHandler+0x3dc>)
 8006ac8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fd fce1 	bl	8004496 <HAL_DMA_Abort_IT>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d016      	beq.n	8006b08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae8:	e00e      	b.n	8006b08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f990 	bl	8006e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af0:	e00a      	b.n	8006b08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f98c 	bl	8006e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af8:	e006      	b.n	8006b08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f988 	bl	8006e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b06:	e170      	b.n	8006dea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b08:	bf00      	nop
    return;
 8006b0a:	e16e      	b.n	8006dea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	f040 814a 	bne.w	8006daa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1a:	f003 0310 	and.w	r3, r3, #16
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 8143 	beq.w	8006daa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b28:	f003 0310 	and.w	r3, r3, #16
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 813c 	beq.w	8006daa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b32:	2300      	movs	r3, #0
 8006b34:	60bb      	str	r3, [r7, #8]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	60bb      	str	r3, [r7, #8]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	60bb      	str	r3, [r7, #8]
 8006b46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b52:	2b40      	cmp	r3, #64	; 0x40
 8006b54:	f040 80b4 	bne.w	8006cc0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 8140 	beq.w	8006dee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b76:	429a      	cmp	r2, r3
 8006b78:	f080 8139 	bcs.w	8006dee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b8e:	f000 8088 	beq.w	8006ca2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	330c      	adds	r3, #12
 8006b98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	330c      	adds	r3, #12
 8006bba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006bbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006bca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1d9      	bne.n	8006b92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3314      	adds	r3, #20
 8006be4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bf0:	f023 0301 	bic.w	r3, r3, #1
 8006bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3314      	adds	r3, #20
 8006bfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e1      	bne.n	8006bde <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3314      	adds	r3, #20
 8006c20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3314      	adds	r3, #20
 8006c3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e3      	bne.n	8006c1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2220      	movs	r2, #32
 8006c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	330c      	adds	r3, #12
 8006c66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6a:	e853 3f00 	ldrex	r3, [r3]
 8006c6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c72:	f023 0310 	bic.w	r3, r3, #16
 8006c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	330c      	adds	r3, #12
 8006c80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c84:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c8c:	e841 2300 	strex	r3, r2, [r1]
 8006c90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1e3      	bne.n	8006c60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fd fb8a 	bl	80043b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f8b6 	bl	8006e24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cb8:	e099      	b.n	8006dee <HAL_UART_IRQHandler+0x50e>
 8006cba:	bf00      	nop
 8006cbc:	08007053 	.word	0x08007053
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 808b 	beq.w	8006df2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006cdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8086 	beq.w	8006df2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	330c      	adds	r3, #12
 8006cec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	330c      	adds	r3, #12
 8006d06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d0a:	647a      	str	r2, [r7, #68]	; 0x44
 8006d0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d12:	e841 2300 	strex	r3, r2, [r1]
 8006d16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1e3      	bne.n	8006ce6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3314      	adds	r3, #20
 8006d24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	f023 0301 	bic.w	r3, r3, #1
 8006d34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3314      	adds	r3, #20
 8006d3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d42:	633a      	str	r2, [r7, #48]	; 0x30
 8006d44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e3      	bne.n	8006d1e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	330c      	adds	r3, #12
 8006d6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0310 	bic.w	r3, r3, #16
 8006d7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	330c      	adds	r3, #12
 8006d84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d88:	61fa      	str	r2, [r7, #28]
 8006d8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	69b9      	ldr	r1, [r7, #24]
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	e841 2300 	strex	r3, r2, [r1]
 8006d94:	617b      	str	r3, [r7, #20]
   return(result);
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e3      	bne.n	8006d64 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f83e 	bl	8006e24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006da8:	e023      	b.n	8006df2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d009      	beq.n	8006dca <HAL_UART_IRQHandler+0x4ea>
 8006db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f959 	bl	800707a <UART_Transmit_IT>
    return;
 8006dc8:	e014      	b.n	8006df4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00e      	beq.n	8006df4 <HAL_UART_IRQHandler+0x514>
 8006dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d008      	beq.n	8006df4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f999 	bl	800711a <UART_EndTransmit_IT>
    return;
 8006de8:	e004      	b.n	8006df4 <HAL_UART_IRQHandler+0x514>
    return;
 8006dea:	bf00      	nop
 8006dec:	e002      	b.n	8006df4 <HAL_UART_IRQHandler+0x514>
      return;
 8006dee:	bf00      	nop
 8006df0:	e000      	b.n	8006df4 <HAL_UART_IRQHandler+0x514>
      return;
 8006df2:	bf00      	nop
  }
}
 8006df4:	37e8      	adds	r7, #232	; 0xe8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop

08006dfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b090      	sub	sp, #64	; 0x40
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	603b      	str	r3, [r7, #0]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e4c:	e050      	b.n	8006ef0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e54:	d04c      	beq.n	8006ef0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d007      	beq.n	8006e6c <UART_WaitOnFlagUntilTimeout+0x30>
 8006e5c:	f7fc fdbe 	bl	80039dc <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d241      	bcs.n	8006ef0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	330c      	adds	r3, #12
 8006e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	e853 3f00 	ldrex	r3, [r3]
 8006e7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	330c      	adds	r3, #12
 8006e8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e8c:	637a      	str	r2, [r7, #52]	; 0x34
 8006e8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e94:	e841 2300 	strex	r3, r2, [r1]
 8006e98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1e5      	bne.n	8006e6c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3314      	adds	r3, #20
 8006ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	e853 3f00 	ldrex	r3, [r3]
 8006eae:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f023 0301 	bic.w	r3, r3, #1
 8006eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3314      	adds	r3, #20
 8006ebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ec0:	623a      	str	r2, [r7, #32]
 8006ec2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	69f9      	ldr	r1, [r7, #28]
 8006ec6:	6a3a      	ldr	r2, [r7, #32]
 8006ec8:	e841 2300 	strex	r3, r2, [r1]
 8006ecc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e5      	bne.n	8006ea0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e00f      	b.n	8006f10 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	bf0c      	ite	eq
 8006f00:	2301      	moveq	r3, #1
 8006f02:	2300      	movne	r3, #0
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	461a      	mov	r2, r3
 8006f08:	79fb      	ldrb	r3, [r7, #7]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d09f      	beq.n	8006e4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3740      	adds	r7, #64	; 0x40
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	4613      	mov	r3, r2
 8006f24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	88fa      	ldrh	r2, [r7, #6]
 8006f30:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	88fa      	ldrh	r2, [r7, #6]
 8006f36:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2222      	movs	r2, #34	; 0x22
 8006f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68da      	ldr	r2, [r3, #12]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f5c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	695a      	ldr	r2, [r3, #20]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f042 0201 	orr.w	r2, r2, #1
 8006f6c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68da      	ldr	r2, [r3, #12]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f042 0220 	orr.w	r2, r2, #32
 8006f7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b095      	sub	sp, #84	; 0x54
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	330c      	adds	r3, #12
 8006f9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	330c      	adds	r3, #12
 8006fb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fb4:	643a      	str	r2, [r7, #64]	; 0x40
 8006fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e5      	bne.n	8006f94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3314      	adds	r3, #20
 8006fce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	f023 0301 	bic.w	r3, r3, #1
 8006fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3314      	adds	r3, #20
 8006fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fe8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ff0:	e841 2300 	strex	r3, r2, [r1]
 8006ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e5      	bne.n	8006fc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007000:	2b01      	cmp	r3, #1
 8007002:	d119      	bne.n	8007038 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	330c      	adds	r3, #12
 800700a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	60bb      	str	r3, [r7, #8]
   return(result);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f023 0310 	bic.w	r3, r3, #16
 800701a:	647b      	str	r3, [r7, #68]	; 0x44
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	330c      	adds	r3, #12
 8007022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007024:	61ba      	str	r2, [r7, #24]
 8007026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6979      	ldr	r1, [r7, #20]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	613b      	str	r3, [r7, #16]
   return(result);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e5      	bne.n	8007004 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2220      	movs	r2, #32
 800703c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007046:	bf00      	nop
 8007048:	3754      	adds	r7, #84	; 0x54
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f7ff fecf 	bl	8006e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007072:	bf00      	nop
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800707a:	b480      	push	{r7}
 800707c:	b085      	sub	sp, #20
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b21      	cmp	r3, #33	; 0x21
 800708c:	d13e      	bne.n	800710c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007096:	d114      	bne.n	80070c2 <UART_Transmit_IT+0x48>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d110      	bne.n	80070c2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	1c9a      	adds	r2, r3, #2
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	621a      	str	r2, [r3, #32]
 80070c0:	e008      	b.n	80070d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	1c59      	adds	r1, r3, #1
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	6211      	str	r1, [r2, #32]
 80070cc:	781a      	ldrb	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070d8:	b29b      	uxth	r3, r3
 80070da:	3b01      	subs	r3, #1
 80070dc:	b29b      	uxth	r3, r3
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	4619      	mov	r1, r3
 80070e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10f      	bne.n	8007108 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007106:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	e000      	b.n	800710e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800710c:	2302      	movs	r3, #2
  }
}
 800710e:	4618      	mov	r0, r3
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b082      	sub	sp, #8
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68da      	ldr	r2, [r3, #12]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007130:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2220      	movs	r2, #32
 8007136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff fe5e 	bl	8006dfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b08c      	sub	sp, #48	; 0x30
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b22      	cmp	r3, #34	; 0x22
 800715c:	f040 80ab 	bne.w	80072b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007168:	d117      	bne.n	800719a <UART_Receive_IT+0x50>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d113      	bne.n	800719a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	b29b      	uxth	r3, r3
 8007184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007188:	b29a      	uxth	r2, r3
 800718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007192:	1c9a      	adds	r2, r3, #2
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	629a      	str	r2, [r3, #40]	; 0x28
 8007198:	e026      	b.n	80071e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80071a0:	2300      	movs	r3, #0
 80071a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ac:	d007      	beq.n	80071be <UART_Receive_IT+0x74>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10a      	bne.n	80071cc <UART_Receive_IT+0x82>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d106      	bne.n	80071cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c8:	701a      	strb	r2, [r3, #0]
 80071ca:	e008      	b.n	80071de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	4619      	mov	r1, r3
 80071f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d15a      	bne.n	80072b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0220 	bic.w	r2, r2, #32
 800720a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800721a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	695a      	ldr	r2, [r3, #20]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 0201 	bic.w	r2, r2, #1
 800722a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2220      	movs	r2, #32
 8007230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007238:	2b01      	cmp	r3, #1
 800723a:	d135      	bne.n	80072a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	330c      	adds	r3, #12
 8007248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	e853 3f00 	ldrex	r3, [r3]
 8007250:	613b      	str	r3, [r7, #16]
   return(result);
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f023 0310 	bic.w	r3, r3, #16
 8007258:	627b      	str	r3, [r7, #36]	; 0x24
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	330c      	adds	r3, #12
 8007260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007262:	623a      	str	r2, [r7, #32]
 8007264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	69f9      	ldr	r1, [r7, #28]
 8007268:	6a3a      	ldr	r2, [r7, #32]
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e5      	bne.n	8007242 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0310 	and.w	r3, r3, #16
 8007280:	2b10      	cmp	r3, #16
 8007282:	d10a      	bne.n	800729a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007284:	2300      	movs	r3, #0
 8007286:	60fb      	str	r3, [r7, #12]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7ff fdbf 	bl	8006e24 <HAL_UARTEx_RxEventCallback>
 80072a6:	e002      	b.n	80072ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7fb fe65 	bl	8002f78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	e002      	b.n	80072b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	e000      	b.n	80072b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80072b6:	2302      	movs	r3, #2
  }
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3730      	adds	r7, #48	; 0x30
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c4:	b09f      	sub	sp, #124	; 0x7c
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d6:	68d9      	ldr	r1, [r3, #12]
 80072d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	ea40 0301 	orr.w	r3, r0, r1
 80072e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e4:	689a      	ldr	r2, [r3, #8]
 80072e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	431a      	orrs	r2, r3
 80072ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	431a      	orrs	r2, r3
 80072f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80072fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007304:	f021 010c 	bic.w	r1, r1, #12
 8007308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800730e:	430b      	orrs	r3, r1
 8007310:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800731c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731e:	6999      	ldr	r1, [r3, #24]
 8007320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	ea40 0301 	orr.w	r3, r0, r1
 8007328:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800732a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	4bc5      	ldr	r3, [pc, #788]	; (8007644 <UART_SetConfig+0x384>)
 8007330:	429a      	cmp	r2, r3
 8007332:	d004      	beq.n	800733e <UART_SetConfig+0x7e>
 8007334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	4bc3      	ldr	r3, [pc, #780]	; (8007648 <UART_SetConfig+0x388>)
 800733a:	429a      	cmp	r2, r3
 800733c:	d103      	bne.n	8007346 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800733e:	f7fd fb99 	bl	8004a74 <HAL_RCC_GetPCLK2Freq>
 8007342:	6778      	str	r0, [r7, #116]	; 0x74
 8007344:	e002      	b.n	800734c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007346:	f7fd fb81 	bl	8004a4c <HAL_RCC_GetPCLK1Freq>
 800734a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800734c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007354:	f040 80b6 	bne.w	80074c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800735a:	461c      	mov	r4, r3
 800735c:	f04f 0500 	mov.w	r5, #0
 8007360:	4622      	mov	r2, r4
 8007362:	462b      	mov	r3, r5
 8007364:	1891      	adds	r1, r2, r2
 8007366:	6439      	str	r1, [r7, #64]	; 0x40
 8007368:	415b      	adcs	r3, r3
 800736a:	647b      	str	r3, [r7, #68]	; 0x44
 800736c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007370:	1912      	adds	r2, r2, r4
 8007372:	eb45 0303 	adc.w	r3, r5, r3
 8007376:	f04f 0000 	mov.w	r0, #0
 800737a:	f04f 0100 	mov.w	r1, #0
 800737e:	00d9      	lsls	r1, r3, #3
 8007380:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007384:	00d0      	lsls	r0, r2, #3
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	1911      	adds	r1, r2, r4
 800738c:	6639      	str	r1, [r7, #96]	; 0x60
 800738e:	416b      	adcs	r3, r5
 8007390:	667b      	str	r3, [r7, #100]	; 0x64
 8007392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	461a      	mov	r2, r3
 8007398:	f04f 0300 	mov.w	r3, #0
 800739c:	1891      	adds	r1, r2, r2
 800739e:	63b9      	str	r1, [r7, #56]	; 0x38
 80073a0:	415b      	adcs	r3, r3
 80073a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80073ac:	f7f9 fc9c 	bl	8000ce8 <__aeabi_uldivmod>
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	4ba5      	ldr	r3, [pc, #660]	; (800764c <UART_SetConfig+0x38c>)
 80073b6:	fba3 2302 	umull	r2, r3, r3, r2
 80073ba:	095b      	lsrs	r3, r3, #5
 80073bc:	011e      	lsls	r6, r3, #4
 80073be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073c0:	461c      	mov	r4, r3
 80073c2:	f04f 0500 	mov.w	r5, #0
 80073c6:	4622      	mov	r2, r4
 80073c8:	462b      	mov	r3, r5
 80073ca:	1891      	adds	r1, r2, r2
 80073cc:	6339      	str	r1, [r7, #48]	; 0x30
 80073ce:	415b      	adcs	r3, r3
 80073d0:	637b      	str	r3, [r7, #52]	; 0x34
 80073d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80073d6:	1912      	adds	r2, r2, r4
 80073d8:	eb45 0303 	adc.w	r3, r5, r3
 80073dc:	f04f 0000 	mov.w	r0, #0
 80073e0:	f04f 0100 	mov.w	r1, #0
 80073e4:	00d9      	lsls	r1, r3, #3
 80073e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073ea:	00d0      	lsls	r0, r2, #3
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	1911      	adds	r1, r2, r4
 80073f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80073f4:	416b      	adcs	r3, r5
 80073f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	461a      	mov	r2, r3
 80073fe:	f04f 0300 	mov.w	r3, #0
 8007402:	1891      	adds	r1, r2, r2
 8007404:	62b9      	str	r1, [r7, #40]	; 0x28
 8007406:	415b      	adcs	r3, r3
 8007408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800740a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800740e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007412:	f7f9 fc69 	bl	8000ce8 <__aeabi_uldivmod>
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	4b8c      	ldr	r3, [pc, #560]	; (800764c <UART_SetConfig+0x38c>)
 800741c:	fba3 1302 	umull	r1, r3, r3, r2
 8007420:	095b      	lsrs	r3, r3, #5
 8007422:	2164      	movs	r1, #100	; 0x64
 8007424:	fb01 f303 	mul.w	r3, r1, r3
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	3332      	adds	r3, #50	; 0x32
 800742e:	4a87      	ldr	r2, [pc, #540]	; (800764c <UART_SetConfig+0x38c>)
 8007430:	fba2 2303 	umull	r2, r3, r2, r3
 8007434:	095b      	lsrs	r3, r3, #5
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800743c:	441e      	add	r6, r3
 800743e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007440:	4618      	mov	r0, r3
 8007442:	f04f 0100 	mov.w	r1, #0
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	1894      	adds	r4, r2, r2
 800744c:	623c      	str	r4, [r7, #32]
 800744e:	415b      	adcs	r3, r3
 8007450:	627b      	str	r3, [r7, #36]	; 0x24
 8007452:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007456:	1812      	adds	r2, r2, r0
 8007458:	eb41 0303 	adc.w	r3, r1, r3
 800745c:	f04f 0400 	mov.w	r4, #0
 8007460:	f04f 0500 	mov.w	r5, #0
 8007464:	00dd      	lsls	r5, r3, #3
 8007466:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800746a:	00d4      	lsls	r4, r2, #3
 800746c:	4622      	mov	r2, r4
 800746e:	462b      	mov	r3, r5
 8007470:	1814      	adds	r4, r2, r0
 8007472:	653c      	str	r4, [r7, #80]	; 0x50
 8007474:	414b      	adcs	r3, r1
 8007476:	657b      	str	r3, [r7, #84]	; 0x54
 8007478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	461a      	mov	r2, r3
 800747e:	f04f 0300 	mov.w	r3, #0
 8007482:	1891      	adds	r1, r2, r2
 8007484:	61b9      	str	r1, [r7, #24]
 8007486:	415b      	adcs	r3, r3
 8007488:	61fb      	str	r3, [r7, #28]
 800748a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800748e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007492:	f7f9 fc29 	bl	8000ce8 <__aeabi_uldivmod>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	4b6c      	ldr	r3, [pc, #432]	; (800764c <UART_SetConfig+0x38c>)
 800749c:	fba3 1302 	umull	r1, r3, r3, r2
 80074a0:	095b      	lsrs	r3, r3, #5
 80074a2:	2164      	movs	r1, #100	; 0x64
 80074a4:	fb01 f303 	mul.w	r3, r1, r3
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	3332      	adds	r3, #50	; 0x32
 80074ae:	4a67      	ldr	r2, [pc, #412]	; (800764c <UART_SetConfig+0x38c>)
 80074b0:	fba2 2303 	umull	r2, r3, r2, r3
 80074b4:	095b      	lsrs	r3, r3, #5
 80074b6:	f003 0207 	and.w	r2, r3, #7
 80074ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4432      	add	r2, r6
 80074c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074c2:	e0b9      	b.n	8007638 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074c6:	461c      	mov	r4, r3
 80074c8:	f04f 0500 	mov.w	r5, #0
 80074cc:	4622      	mov	r2, r4
 80074ce:	462b      	mov	r3, r5
 80074d0:	1891      	adds	r1, r2, r2
 80074d2:	6139      	str	r1, [r7, #16]
 80074d4:	415b      	adcs	r3, r3
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80074dc:	1912      	adds	r2, r2, r4
 80074de:	eb45 0303 	adc.w	r3, r5, r3
 80074e2:	f04f 0000 	mov.w	r0, #0
 80074e6:	f04f 0100 	mov.w	r1, #0
 80074ea:	00d9      	lsls	r1, r3, #3
 80074ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074f0:	00d0      	lsls	r0, r2, #3
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	eb12 0804 	adds.w	r8, r2, r4
 80074fa:	eb43 0905 	adc.w	r9, r3, r5
 80074fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	4618      	mov	r0, r3
 8007504:	f04f 0100 	mov.w	r1, #0
 8007508:	f04f 0200 	mov.w	r2, #0
 800750c:	f04f 0300 	mov.w	r3, #0
 8007510:	008b      	lsls	r3, r1, #2
 8007512:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007516:	0082      	lsls	r2, r0, #2
 8007518:	4640      	mov	r0, r8
 800751a:	4649      	mov	r1, r9
 800751c:	f7f9 fbe4 	bl	8000ce8 <__aeabi_uldivmod>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	4b49      	ldr	r3, [pc, #292]	; (800764c <UART_SetConfig+0x38c>)
 8007526:	fba3 2302 	umull	r2, r3, r3, r2
 800752a:	095b      	lsrs	r3, r3, #5
 800752c:	011e      	lsls	r6, r3, #4
 800752e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007530:	4618      	mov	r0, r3
 8007532:	f04f 0100 	mov.w	r1, #0
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	1894      	adds	r4, r2, r2
 800753c:	60bc      	str	r4, [r7, #8]
 800753e:	415b      	adcs	r3, r3
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007546:	1812      	adds	r2, r2, r0
 8007548:	eb41 0303 	adc.w	r3, r1, r3
 800754c:	f04f 0400 	mov.w	r4, #0
 8007550:	f04f 0500 	mov.w	r5, #0
 8007554:	00dd      	lsls	r5, r3, #3
 8007556:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800755a:	00d4      	lsls	r4, r2, #3
 800755c:	4622      	mov	r2, r4
 800755e:	462b      	mov	r3, r5
 8007560:	1814      	adds	r4, r2, r0
 8007562:	64bc      	str	r4, [r7, #72]	; 0x48
 8007564:	414b      	adcs	r3, r1
 8007566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	4618      	mov	r0, r3
 800756e:	f04f 0100 	mov.w	r1, #0
 8007572:	f04f 0200 	mov.w	r2, #0
 8007576:	f04f 0300 	mov.w	r3, #0
 800757a:	008b      	lsls	r3, r1, #2
 800757c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007580:	0082      	lsls	r2, r0, #2
 8007582:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007586:	f7f9 fbaf 	bl	8000ce8 <__aeabi_uldivmod>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4b2f      	ldr	r3, [pc, #188]	; (800764c <UART_SetConfig+0x38c>)
 8007590:	fba3 1302 	umull	r1, r3, r3, r2
 8007594:	095b      	lsrs	r3, r3, #5
 8007596:	2164      	movs	r1, #100	; 0x64
 8007598:	fb01 f303 	mul.w	r3, r1, r3
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	3332      	adds	r3, #50	; 0x32
 80075a2:	4a2a      	ldr	r2, [pc, #168]	; (800764c <UART_SetConfig+0x38c>)
 80075a4:	fba2 2303 	umull	r2, r3, r2, r3
 80075a8:	095b      	lsrs	r3, r3, #5
 80075aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075ae:	441e      	add	r6, r3
 80075b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075b2:	4618      	mov	r0, r3
 80075b4:	f04f 0100 	mov.w	r1, #0
 80075b8:	4602      	mov	r2, r0
 80075ba:	460b      	mov	r3, r1
 80075bc:	1894      	adds	r4, r2, r2
 80075be:	603c      	str	r4, [r7, #0]
 80075c0:	415b      	adcs	r3, r3
 80075c2:	607b      	str	r3, [r7, #4]
 80075c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c8:	1812      	adds	r2, r2, r0
 80075ca:	eb41 0303 	adc.w	r3, r1, r3
 80075ce:	f04f 0400 	mov.w	r4, #0
 80075d2:	f04f 0500 	mov.w	r5, #0
 80075d6:	00dd      	lsls	r5, r3, #3
 80075d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075dc:	00d4      	lsls	r4, r2, #3
 80075de:	4622      	mov	r2, r4
 80075e0:	462b      	mov	r3, r5
 80075e2:	eb12 0a00 	adds.w	sl, r2, r0
 80075e6:	eb43 0b01 	adc.w	fp, r3, r1
 80075ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f04f 0100 	mov.w	r1, #0
 80075f4:	f04f 0200 	mov.w	r2, #0
 80075f8:	f04f 0300 	mov.w	r3, #0
 80075fc:	008b      	lsls	r3, r1, #2
 80075fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007602:	0082      	lsls	r2, r0, #2
 8007604:	4650      	mov	r0, sl
 8007606:	4659      	mov	r1, fp
 8007608:	f7f9 fb6e 	bl	8000ce8 <__aeabi_uldivmod>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4b0e      	ldr	r3, [pc, #56]	; (800764c <UART_SetConfig+0x38c>)
 8007612:	fba3 1302 	umull	r1, r3, r3, r2
 8007616:	095b      	lsrs	r3, r3, #5
 8007618:	2164      	movs	r1, #100	; 0x64
 800761a:	fb01 f303 	mul.w	r3, r1, r3
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	011b      	lsls	r3, r3, #4
 8007622:	3332      	adds	r3, #50	; 0x32
 8007624:	4a09      	ldr	r2, [pc, #36]	; (800764c <UART_SetConfig+0x38c>)
 8007626:	fba2 2303 	umull	r2, r3, r2, r3
 800762a:	095b      	lsrs	r3, r3, #5
 800762c:	f003 020f 	and.w	r2, r3, #15
 8007630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4432      	add	r2, r6
 8007636:	609a      	str	r2, [r3, #8]
}
 8007638:	bf00      	nop
 800763a:	377c      	adds	r7, #124	; 0x7c
 800763c:	46bd      	mov	sp, r7
 800763e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007642:	bf00      	nop
 8007644:	40011000 	.word	0x40011000
 8007648:	40011400 	.word	0x40011400
 800764c:	51eb851f 	.word	0x51eb851f

08007650 <atof>:
 8007650:	2100      	movs	r1, #0
 8007652:	f001 bb53 	b.w	8008cfc <strtod>
	...

08007658 <__errno>:
 8007658:	4b01      	ldr	r3, [pc, #4]	; (8007660 <__errno+0x8>)
 800765a:	6818      	ldr	r0, [r3, #0]
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	20000040 	.word	0x20000040

08007664 <__libc_init_array>:
 8007664:	b570      	push	{r4, r5, r6, lr}
 8007666:	4d0d      	ldr	r5, [pc, #52]	; (800769c <__libc_init_array+0x38>)
 8007668:	4c0d      	ldr	r4, [pc, #52]	; (80076a0 <__libc_init_array+0x3c>)
 800766a:	1b64      	subs	r4, r4, r5
 800766c:	10a4      	asrs	r4, r4, #2
 800766e:	2600      	movs	r6, #0
 8007670:	42a6      	cmp	r6, r4
 8007672:	d109      	bne.n	8007688 <__libc_init_array+0x24>
 8007674:	4d0b      	ldr	r5, [pc, #44]	; (80076a4 <__libc_init_array+0x40>)
 8007676:	4c0c      	ldr	r4, [pc, #48]	; (80076a8 <__libc_init_array+0x44>)
 8007678:	f006 fc10 	bl	800de9c <_init>
 800767c:	1b64      	subs	r4, r4, r5
 800767e:	10a4      	asrs	r4, r4, #2
 8007680:	2600      	movs	r6, #0
 8007682:	42a6      	cmp	r6, r4
 8007684:	d105      	bne.n	8007692 <__libc_init_array+0x2e>
 8007686:	bd70      	pop	{r4, r5, r6, pc}
 8007688:	f855 3b04 	ldr.w	r3, [r5], #4
 800768c:	4798      	blx	r3
 800768e:	3601      	adds	r6, #1
 8007690:	e7ee      	b.n	8007670 <__libc_init_array+0xc>
 8007692:	f855 3b04 	ldr.w	r3, [r5], #4
 8007696:	4798      	blx	r3
 8007698:	3601      	adds	r6, #1
 800769a:	e7f2      	b.n	8007682 <__libc_init_array+0x1e>
 800769c:	0800e7a8 	.word	0x0800e7a8
 80076a0:	0800e7a8 	.word	0x0800e7a8
 80076a4:	0800e7a8 	.word	0x0800e7a8
 80076a8:	0800e7ac 	.word	0x0800e7ac

080076ac <memset>:
 80076ac:	4402      	add	r2, r0
 80076ae:	4603      	mov	r3, r0
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d100      	bne.n	80076b6 <memset+0xa>
 80076b4:	4770      	bx	lr
 80076b6:	f803 1b01 	strb.w	r1, [r3], #1
 80076ba:	e7f9      	b.n	80076b0 <memset+0x4>

080076bc <__cvt>:
 80076bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076c0:	ec55 4b10 	vmov	r4, r5, d0
 80076c4:	2d00      	cmp	r5, #0
 80076c6:	460e      	mov	r6, r1
 80076c8:	4619      	mov	r1, r3
 80076ca:	462b      	mov	r3, r5
 80076cc:	bfbb      	ittet	lt
 80076ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80076d2:	461d      	movlt	r5, r3
 80076d4:	2300      	movge	r3, #0
 80076d6:	232d      	movlt	r3, #45	; 0x2d
 80076d8:	700b      	strb	r3, [r1, #0]
 80076da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076e0:	4691      	mov	r9, r2
 80076e2:	f023 0820 	bic.w	r8, r3, #32
 80076e6:	bfbc      	itt	lt
 80076e8:	4622      	movlt	r2, r4
 80076ea:	4614      	movlt	r4, r2
 80076ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076f0:	d005      	beq.n	80076fe <__cvt+0x42>
 80076f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80076f6:	d100      	bne.n	80076fa <__cvt+0x3e>
 80076f8:	3601      	adds	r6, #1
 80076fa:	2102      	movs	r1, #2
 80076fc:	e000      	b.n	8007700 <__cvt+0x44>
 80076fe:	2103      	movs	r1, #3
 8007700:	ab03      	add	r3, sp, #12
 8007702:	9301      	str	r3, [sp, #4]
 8007704:	ab02      	add	r3, sp, #8
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	ec45 4b10 	vmov	d0, r4, r5
 800770c:	4653      	mov	r3, sl
 800770e:	4632      	mov	r2, r6
 8007710:	f001 fc4e 	bl	8008fb0 <_dtoa_r>
 8007714:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007718:	4607      	mov	r7, r0
 800771a:	d102      	bne.n	8007722 <__cvt+0x66>
 800771c:	f019 0f01 	tst.w	r9, #1
 8007720:	d022      	beq.n	8007768 <__cvt+0xac>
 8007722:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007726:	eb07 0906 	add.w	r9, r7, r6
 800772a:	d110      	bne.n	800774e <__cvt+0x92>
 800772c:	783b      	ldrb	r3, [r7, #0]
 800772e:	2b30      	cmp	r3, #48	; 0x30
 8007730:	d10a      	bne.n	8007748 <__cvt+0x8c>
 8007732:	2200      	movs	r2, #0
 8007734:	2300      	movs	r3, #0
 8007736:	4620      	mov	r0, r4
 8007738:	4629      	mov	r1, r5
 800773a:	f7f9 f9f5 	bl	8000b28 <__aeabi_dcmpeq>
 800773e:	b918      	cbnz	r0, 8007748 <__cvt+0x8c>
 8007740:	f1c6 0601 	rsb	r6, r6, #1
 8007744:	f8ca 6000 	str.w	r6, [sl]
 8007748:	f8da 3000 	ldr.w	r3, [sl]
 800774c:	4499      	add	r9, r3
 800774e:	2200      	movs	r2, #0
 8007750:	2300      	movs	r3, #0
 8007752:	4620      	mov	r0, r4
 8007754:	4629      	mov	r1, r5
 8007756:	f7f9 f9e7 	bl	8000b28 <__aeabi_dcmpeq>
 800775a:	b108      	cbz	r0, 8007760 <__cvt+0xa4>
 800775c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007760:	2230      	movs	r2, #48	; 0x30
 8007762:	9b03      	ldr	r3, [sp, #12]
 8007764:	454b      	cmp	r3, r9
 8007766:	d307      	bcc.n	8007778 <__cvt+0xbc>
 8007768:	9b03      	ldr	r3, [sp, #12]
 800776a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800776c:	1bdb      	subs	r3, r3, r7
 800776e:	4638      	mov	r0, r7
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	b004      	add	sp, #16
 8007774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007778:	1c59      	adds	r1, r3, #1
 800777a:	9103      	str	r1, [sp, #12]
 800777c:	701a      	strb	r2, [r3, #0]
 800777e:	e7f0      	b.n	8007762 <__cvt+0xa6>

08007780 <__exponent>:
 8007780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007782:	4603      	mov	r3, r0
 8007784:	2900      	cmp	r1, #0
 8007786:	bfb8      	it	lt
 8007788:	4249      	neglt	r1, r1
 800778a:	f803 2b02 	strb.w	r2, [r3], #2
 800778e:	bfb4      	ite	lt
 8007790:	222d      	movlt	r2, #45	; 0x2d
 8007792:	222b      	movge	r2, #43	; 0x2b
 8007794:	2909      	cmp	r1, #9
 8007796:	7042      	strb	r2, [r0, #1]
 8007798:	dd2a      	ble.n	80077f0 <__exponent+0x70>
 800779a:	f10d 0407 	add.w	r4, sp, #7
 800779e:	46a4      	mov	ip, r4
 80077a0:	270a      	movs	r7, #10
 80077a2:	46a6      	mov	lr, r4
 80077a4:	460a      	mov	r2, r1
 80077a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80077aa:	fb07 1516 	mls	r5, r7, r6, r1
 80077ae:	3530      	adds	r5, #48	; 0x30
 80077b0:	2a63      	cmp	r2, #99	; 0x63
 80077b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80077b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80077ba:	4631      	mov	r1, r6
 80077bc:	dcf1      	bgt.n	80077a2 <__exponent+0x22>
 80077be:	3130      	adds	r1, #48	; 0x30
 80077c0:	f1ae 0502 	sub.w	r5, lr, #2
 80077c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80077c8:	1c44      	adds	r4, r0, #1
 80077ca:	4629      	mov	r1, r5
 80077cc:	4561      	cmp	r1, ip
 80077ce:	d30a      	bcc.n	80077e6 <__exponent+0x66>
 80077d0:	f10d 0209 	add.w	r2, sp, #9
 80077d4:	eba2 020e 	sub.w	r2, r2, lr
 80077d8:	4565      	cmp	r5, ip
 80077da:	bf88      	it	hi
 80077dc:	2200      	movhi	r2, #0
 80077de:	4413      	add	r3, r2
 80077e0:	1a18      	subs	r0, r3, r0
 80077e2:	b003      	add	sp, #12
 80077e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80077ee:	e7ed      	b.n	80077cc <__exponent+0x4c>
 80077f0:	2330      	movs	r3, #48	; 0x30
 80077f2:	3130      	adds	r1, #48	; 0x30
 80077f4:	7083      	strb	r3, [r0, #2]
 80077f6:	70c1      	strb	r1, [r0, #3]
 80077f8:	1d03      	adds	r3, r0, #4
 80077fa:	e7f1      	b.n	80077e0 <__exponent+0x60>

080077fc <_printf_float>:
 80077fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007800:	ed2d 8b02 	vpush	{d8}
 8007804:	b08d      	sub	sp, #52	; 0x34
 8007806:	460c      	mov	r4, r1
 8007808:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800780c:	4616      	mov	r6, r2
 800780e:	461f      	mov	r7, r3
 8007810:	4605      	mov	r5, r0
 8007812:	f002 fedf 	bl	800a5d4 <_localeconv_r>
 8007816:	f8d0 a000 	ldr.w	sl, [r0]
 800781a:	4650      	mov	r0, sl
 800781c:	f7f8 fd02 	bl	8000224 <strlen>
 8007820:	2300      	movs	r3, #0
 8007822:	930a      	str	r3, [sp, #40]	; 0x28
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	9305      	str	r3, [sp, #20]
 8007828:	f8d8 3000 	ldr.w	r3, [r8]
 800782c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007830:	3307      	adds	r3, #7
 8007832:	f023 0307 	bic.w	r3, r3, #7
 8007836:	f103 0208 	add.w	r2, r3, #8
 800783a:	f8c8 2000 	str.w	r2, [r8]
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007846:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800784a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800784e:	9307      	str	r3, [sp, #28]
 8007850:	f8cd 8018 	str.w	r8, [sp, #24]
 8007854:	ee08 0a10 	vmov	s16, r0
 8007858:	4b9f      	ldr	r3, [pc, #636]	; (8007ad8 <_printf_float+0x2dc>)
 800785a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800785e:	f04f 32ff 	mov.w	r2, #4294967295
 8007862:	f7f9 f993 	bl	8000b8c <__aeabi_dcmpun>
 8007866:	bb88      	cbnz	r0, 80078cc <_printf_float+0xd0>
 8007868:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800786c:	4b9a      	ldr	r3, [pc, #616]	; (8007ad8 <_printf_float+0x2dc>)
 800786e:	f04f 32ff 	mov.w	r2, #4294967295
 8007872:	f7f9 f96d 	bl	8000b50 <__aeabi_dcmple>
 8007876:	bb48      	cbnz	r0, 80078cc <_printf_float+0xd0>
 8007878:	2200      	movs	r2, #0
 800787a:	2300      	movs	r3, #0
 800787c:	4640      	mov	r0, r8
 800787e:	4649      	mov	r1, r9
 8007880:	f7f9 f95c 	bl	8000b3c <__aeabi_dcmplt>
 8007884:	b110      	cbz	r0, 800788c <_printf_float+0x90>
 8007886:	232d      	movs	r3, #45	; 0x2d
 8007888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800788c:	4b93      	ldr	r3, [pc, #588]	; (8007adc <_printf_float+0x2e0>)
 800788e:	4894      	ldr	r0, [pc, #592]	; (8007ae0 <_printf_float+0x2e4>)
 8007890:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007894:	bf94      	ite	ls
 8007896:	4698      	movls	r8, r3
 8007898:	4680      	movhi	r8, r0
 800789a:	2303      	movs	r3, #3
 800789c:	6123      	str	r3, [r4, #16]
 800789e:	9b05      	ldr	r3, [sp, #20]
 80078a0:	f023 0204 	bic.w	r2, r3, #4
 80078a4:	6022      	str	r2, [r4, #0]
 80078a6:	f04f 0900 	mov.w	r9, #0
 80078aa:	9700      	str	r7, [sp, #0]
 80078ac:	4633      	mov	r3, r6
 80078ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80078b0:	4621      	mov	r1, r4
 80078b2:	4628      	mov	r0, r5
 80078b4:	f000 f9d8 	bl	8007c68 <_printf_common>
 80078b8:	3001      	adds	r0, #1
 80078ba:	f040 8090 	bne.w	80079de <_printf_float+0x1e2>
 80078be:	f04f 30ff 	mov.w	r0, #4294967295
 80078c2:	b00d      	add	sp, #52	; 0x34
 80078c4:	ecbd 8b02 	vpop	{d8}
 80078c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078cc:	4642      	mov	r2, r8
 80078ce:	464b      	mov	r3, r9
 80078d0:	4640      	mov	r0, r8
 80078d2:	4649      	mov	r1, r9
 80078d4:	f7f9 f95a 	bl	8000b8c <__aeabi_dcmpun>
 80078d8:	b140      	cbz	r0, 80078ec <_printf_float+0xf0>
 80078da:	464b      	mov	r3, r9
 80078dc:	2b00      	cmp	r3, #0
 80078de:	bfbc      	itt	lt
 80078e0:	232d      	movlt	r3, #45	; 0x2d
 80078e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078e6:	487f      	ldr	r0, [pc, #508]	; (8007ae4 <_printf_float+0x2e8>)
 80078e8:	4b7f      	ldr	r3, [pc, #508]	; (8007ae8 <_printf_float+0x2ec>)
 80078ea:	e7d1      	b.n	8007890 <_printf_float+0x94>
 80078ec:	6863      	ldr	r3, [r4, #4]
 80078ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80078f2:	9206      	str	r2, [sp, #24]
 80078f4:	1c5a      	adds	r2, r3, #1
 80078f6:	d13f      	bne.n	8007978 <_printf_float+0x17c>
 80078f8:	2306      	movs	r3, #6
 80078fa:	6063      	str	r3, [r4, #4]
 80078fc:	9b05      	ldr	r3, [sp, #20]
 80078fe:	6861      	ldr	r1, [r4, #4]
 8007900:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007904:	2300      	movs	r3, #0
 8007906:	9303      	str	r3, [sp, #12]
 8007908:	ab0a      	add	r3, sp, #40	; 0x28
 800790a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800790e:	ab09      	add	r3, sp, #36	; 0x24
 8007910:	ec49 8b10 	vmov	d0, r8, r9
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	6022      	str	r2, [r4, #0]
 8007918:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800791c:	4628      	mov	r0, r5
 800791e:	f7ff fecd 	bl	80076bc <__cvt>
 8007922:	9b06      	ldr	r3, [sp, #24]
 8007924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007926:	2b47      	cmp	r3, #71	; 0x47
 8007928:	4680      	mov	r8, r0
 800792a:	d108      	bne.n	800793e <_printf_float+0x142>
 800792c:	1cc8      	adds	r0, r1, #3
 800792e:	db02      	blt.n	8007936 <_printf_float+0x13a>
 8007930:	6863      	ldr	r3, [r4, #4]
 8007932:	4299      	cmp	r1, r3
 8007934:	dd41      	ble.n	80079ba <_printf_float+0x1be>
 8007936:	f1ab 0b02 	sub.w	fp, fp, #2
 800793a:	fa5f fb8b 	uxtb.w	fp, fp
 800793e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007942:	d820      	bhi.n	8007986 <_printf_float+0x18a>
 8007944:	3901      	subs	r1, #1
 8007946:	465a      	mov	r2, fp
 8007948:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800794c:	9109      	str	r1, [sp, #36]	; 0x24
 800794e:	f7ff ff17 	bl	8007780 <__exponent>
 8007952:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007954:	1813      	adds	r3, r2, r0
 8007956:	2a01      	cmp	r2, #1
 8007958:	4681      	mov	r9, r0
 800795a:	6123      	str	r3, [r4, #16]
 800795c:	dc02      	bgt.n	8007964 <_printf_float+0x168>
 800795e:	6822      	ldr	r2, [r4, #0]
 8007960:	07d2      	lsls	r2, r2, #31
 8007962:	d501      	bpl.n	8007968 <_printf_float+0x16c>
 8007964:	3301      	adds	r3, #1
 8007966:	6123      	str	r3, [r4, #16]
 8007968:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800796c:	2b00      	cmp	r3, #0
 800796e:	d09c      	beq.n	80078aa <_printf_float+0xae>
 8007970:	232d      	movs	r3, #45	; 0x2d
 8007972:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007976:	e798      	b.n	80078aa <_printf_float+0xae>
 8007978:	9a06      	ldr	r2, [sp, #24]
 800797a:	2a47      	cmp	r2, #71	; 0x47
 800797c:	d1be      	bne.n	80078fc <_printf_float+0x100>
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1bc      	bne.n	80078fc <_printf_float+0x100>
 8007982:	2301      	movs	r3, #1
 8007984:	e7b9      	b.n	80078fa <_printf_float+0xfe>
 8007986:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800798a:	d118      	bne.n	80079be <_printf_float+0x1c2>
 800798c:	2900      	cmp	r1, #0
 800798e:	6863      	ldr	r3, [r4, #4]
 8007990:	dd0b      	ble.n	80079aa <_printf_float+0x1ae>
 8007992:	6121      	str	r1, [r4, #16]
 8007994:	b913      	cbnz	r3, 800799c <_printf_float+0x1a0>
 8007996:	6822      	ldr	r2, [r4, #0]
 8007998:	07d0      	lsls	r0, r2, #31
 800799a:	d502      	bpl.n	80079a2 <_printf_float+0x1a6>
 800799c:	3301      	adds	r3, #1
 800799e:	440b      	add	r3, r1
 80079a0:	6123      	str	r3, [r4, #16]
 80079a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80079a4:	f04f 0900 	mov.w	r9, #0
 80079a8:	e7de      	b.n	8007968 <_printf_float+0x16c>
 80079aa:	b913      	cbnz	r3, 80079b2 <_printf_float+0x1b6>
 80079ac:	6822      	ldr	r2, [r4, #0]
 80079ae:	07d2      	lsls	r2, r2, #31
 80079b0:	d501      	bpl.n	80079b6 <_printf_float+0x1ba>
 80079b2:	3302      	adds	r3, #2
 80079b4:	e7f4      	b.n	80079a0 <_printf_float+0x1a4>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e7f2      	b.n	80079a0 <_printf_float+0x1a4>
 80079ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80079be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c0:	4299      	cmp	r1, r3
 80079c2:	db05      	blt.n	80079d0 <_printf_float+0x1d4>
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	6121      	str	r1, [r4, #16]
 80079c8:	07d8      	lsls	r0, r3, #31
 80079ca:	d5ea      	bpl.n	80079a2 <_printf_float+0x1a6>
 80079cc:	1c4b      	adds	r3, r1, #1
 80079ce:	e7e7      	b.n	80079a0 <_printf_float+0x1a4>
 80079d0:	2900      	cmp	r1, #0
 80079d2:	bfd4      	ite	le
 80079d4:	f1c1 0202 	rsble	r2, r1, #2
 80079d8:	2201      	movgt	r2, #1
 80079da:	4413      	add	r3, r2
 80079dc:	e7e0      	b.n	80079a0 <_printf_float+0x1a4>
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	055a      	lsls	r2, r3, #21
 80079e2:	d407      	bmi.n	80079f4 <_printf_float+0x1f8>
 80079e4:	6923      	ldr	r3, [r4, #16]
 80079e6:	4642      	mov	r2, r8
 80079e8:	4631      	mov	r1, r6
 80079ea:	4628      	mov	r0, r5
 80079ec:	47b8      	blx	r7
 80079ee:	3001      	adds	r0, #1
 80079f0:	d12c      	bne.n	8007a4c <_printf_float+0x250>
 80079f2:	e764      	b.n	80078be <_printf_float+0xc2>
 80079f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079f8:	f240 80e0 	bls.w	8007bbc <_printf_float+0x3c0>
 80079fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a00:	2200      	movs	r2, #0
 8007a02:	2300      	movs	r3, #0
 8007a04:	f7f9 f890 	bl	8000b28 <__aeabi_dcmpeq>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d034      	beq.n	8007a76 <_printf_float+0x27a>
 8007a0c:	4a37      	ldr	r2, [pc, #220]	; (8007aec <_printf_float+0x2f0>)
 8007a0e:	2301      	movs	r3, #1
 8007a10:	4631      	mov	r1, r6
 8007a12:	4628      	mov	r0, r5
 8007a14:	47b8      	blx	r7
 8007a16:	3001      	adds	r0, #1
 8007a18:	f43f af51 	beq.w	80078be <_printf_float+0xc2>
 8007a1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a20:	429a      	cmp	r2, r3
 8007a22:	db02      	blt.n	8007a2a <_printf_float+0x22e>
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	07d8      	lsls	r0, r3, #31
 8007a28:	d510      	bpl.n	8007a4c <_printf_float+0x250>
 8007a2a:	ee18 3a10 	vmov	r3, s16
 8007a2e:	4652      	mov	r2, sl
 8007a30:	4631      	mov	r1, r6
 8007a32:	4628      	mov	r0, r5
 8007a34:	47b8      	blx	r7
 8007a36:	3001      	adds	r0, #1
 8007a38:	f43f af41 	beq.w	80078be <_printf_float+0xc2>
 8007a3c:	f04f 0800 	mov.w	r8, #0
 8007a40:	f104 091a 	add.w	r9, r4, #26
 8007a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a46:	3b01      	subs	r3, #1
 8007a48:	4543      	cmp	r3, r8
 8007a4a:	dc09      	bgt.n	8007a60 <_printf_float+0x264>
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	079b      	lsls	r3, r3, #30
 8007a50:	f100 8105 	bmi.w	8007c5e <_printf_float+0x462>
 8007a54:	68e0      	ldr	r0, [r4, #12]
 8007a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a58:	4298      	cmp	r0, r3
 8007a5a:	bfb8      	it	lt
 8007a5c:	4618      	movlt	r0, r3
 8007a5e:	e730      	b.n	80078c2 <_printf_float+0xc6>
 8007a60:	2301      	movs	r3, #1
 8007a62:	464a      	mov	r2, r9
 8007a64:	4631      	mov	r1, r6
 8007a66:	4628      	mov	r0, r5
 8007a68:	47b8      	blx	r7
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	f43f af27 	beq.w	80078be <_printf_float+0xc2>
 8007a70:	f108 0801 	add.w	r8, r8, #1
 8007a74:	e7e6      	b.n	8007a44 <_printf_float+0x248>
 8007a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	dc39      	bgt.n	8007af0 <_printf_float+0x2f4>
 8007a7c:	4a1b      	ldr	r2, [pc, #108]	; (8007aec <_printf_float+0x2f0>)
 8007a7e:	2301      	movs	r3, #1
 8007a80:	4631      	mov	r1, r6
 8007a82:	4628      	mov	r0, r5
 8007a84:	47b8      	blx	r7
 8007a86:	3001      	adds	r0, #1
 8007a88:	f43f af19 	beq.w	80078be <_printf_float+0xc2>
 8007a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a90:	4313      	orrs	r3, r2
 8007a92:	d102      	bne.n	8007a9a <_printf_float+0x29e>
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	07d9      	lsls	r1, r3, #31
 8007a98:	d5d8      	bpl.n	8007a4c <_printf_float+0x250>
 8007a9a:	ee18 3a10 	vmov	r3, s16
 8007a9e:	4652      	mov	r2, sl
 8007aa0:	4631      	mov	r1, r6
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	47b8      	blx	r7
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	f43f af09 	beq.w	80078be <_printf_float+0xc2>
 8007aac:	f04f 0900 	mov.w	r9, #0
 8007ab0:	f104 0a1a 	add.w	sl, r4, #26
 8007ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab6:	425b      	negs	r3, r3
 8007ab8:	454b      	cmp	r3, r9
 8007aba:	dc01      	bgt.n	8007ac0 <_printf_float+0x2c4>
 8007abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007abe:	e792      	b.n	80079e6 <_printf_float+0x1ea>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	4652      	mov	r2, sl
 8007ac4:	4631      	mov	r1, r6
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	47b8      	blx	r7
 8007aca:	3001      	adds	r0, #1
 8007acc:	f43f aef7 	beq.w	80078be <_printf_float+0xc2>
 8007ad0:	f109 0901 	add.w	r9, r9, #1
 8007ad4:	e7ee      	b.n	8007ab4 <_printf_float+0x2b8>
 8007ad6:	bf00      	nop
 8007ad8:	7fefffff 	.word	0x7fefffff
 8007adc:	0800e058 	.word	0x0800e058
 8007ae0:	0800e05c 	.word	0x0800e05c
 8007ae4:	0800e064 	.word	0x0800e064
 8007ae8:	0800e060 	.word	0x0800e060
 8007aec:	0800e068 	.word	0x0800e068
 8007af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007af2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007af4:	429a      	cmp	r2, r3
 8007af6:	bfa8      	it	ge
 8007af8:	461a      	movge	r2, r3
 8007afa:	2a00      	cmp	r2, #0
 8007afc:	4691      	mov	r9, r2
 8007afe:	dc37      	bgt.n	8007b70 <_printf_float+0x374>
 8007b00:	f04f 0b00 	mov.w	fp, #0
 8007b04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b08:	f104 021a 	add.w	r2, r4, #26
 8007b0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b0e:	9305      	str	r3, [sp, #20]
 8007b10:	eba3 0309 	sub.w	r3, r3, r9
 8007b14:	455b      	cmp	r3, fp
 8007b16:	dc33      	bgt.n	8007b80 <_printf_float+0x384>
 8007b18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	db3b      	blt.n	8007b98 <_printf_float+0x39c>
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	07da      	lsls	r2, r3, #31
 8007b24:	d438      	bmi.n	8007b98 <_printf_float+0x39c>
 8007b26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b28:	9b05      	ldr	r3, [sp, #20]
 8007b2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	eba2 0901 	sub.w	r9, r2, r1
 8007b32:	4599      	cmp	r9, r3
 8007b34:	bfa8      	it	ge
 8007b36:	4699      	movge	r9, r3
 8007b38:	f1b9 0f00 	cmp.w	r9, #0
 8007b3c:	dc35      	bgt.n	8007baa <_printf_float+0x3ae>
 8007b3e:	f04f 0800 	mov.w	r8, #0
 8007b42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b46:	f104 0a1a 	add.w	sl, r4, #26
 8007b4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b4e:	1a9b      	subs	r3, r3, r2
 8007b50:	eba3 0309 	sub.w	r3, r3, r9
 8007b54:	4543      	cmp	r3, r8
 8007b56:	f77f af79 	ble.w	8007a4c <_printf_float+0x250>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4652      	mov	r2, sl
 8007b5e:	4631      	mov	r1, r6
 8007b60:	4628      	mov	r0, r5
 8007b62:	47b8      	blx	r7
 8007b64:	3001      	adds	r0, #1
 8007b66:	f43f aeaa 	beq.w	80078be <_printf_float+0xc2>
 8007b6a:	f108 0801 	add.w	r8, r8, #1
 8007b6e:	e7ec      	b.n	8007b4a <_printf_float+0x34e>
 8007b70:	4613      	mov	r3, r2
 8007b72:	4631      	mov	r1, r6
 8007b74:	4642      	mov	r2, r8
 8007b76:	4628      	mov	r0, r5
 8007b78:	47b8      	blx	r7
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	d1c0      	bne.n	8007b00 <_printf_float+0x304>
 8007b7e:	e69e      	b.n	80078be <_printf_float+0xc2>
 8007b80:	2301      	movs	r3, #1
 8007b82:	4631      	mov	r1, r6
 8007b84:	4628      	mov	r0, r5
 8007b86:	9205      	str	r2, [sp, #20]
 8007b88:	47b8      	blx	r7
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	f43f ae97 	beq.w	80078be <_printf_float+0xc2>
 8007b90:	9a05      	ldr	r2, [sp, #20]
 8007b92:	f10b 0b01 	add.w	fp, fp, #1
 8007b96:	e7b9      	b.n	8007b0c <_printf_float+0x310>
 8007b98:	ee18 3a10 	vmov	r3, s16
 8007b9c:	4652      	mov	r2, sl
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	47b8      	blx	r7
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	d1be      	bne.n	8007b26 <_printf_float+0x32a>
 8007ba8:	e689      	b.n	80078be <_printf_float+0xc2>
 8007baa:	9a05      	ldr	r2, [sp, #20]
 8007bac:	464b      	mov	r3, r9
 8007bae:	4442      	add	r2, r8
 8007bb0:	4631      	mov	r1, r6
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	47b8      	blx	r7
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	d1c1      	bne.n	8007b3e <_printf_float+0x342>
 8007bba:	e680      	b.n	80078be <_printf_float+0xc2>
 8007bbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bbe:	2a01      	cmp	r2, #1
 8007bc0:	dc01      	bgt.n	8007bc6 <_printf_float+0x3ca>
 8007bc2:	07db      	lsls	r3, r3, #31
 8007bc4:	d538      	bpl.n	8007c38 <_printf_float+0x43c>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	4642      	mov	r2, r8
 8007bca:	4631      	mov	r1, r6
 8007bcc:	4628      	mov	r0, r5
 8007bce:	47b8      	blx	r7
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	f43f ae74 	beq.w	80078be <_printf_float+0xc2>
 8007bd6:	ee18 3a10 	vmov	r3, s16
 8007bda:	4652      	mov	r2, sl
 8007bdc:	4631      	mov	r1, r6
 8007bde:	4628      	mov	r0, r5
 8007be0:	47b8      	blx	r7
 8007be2:	3001      	adds	r0, #1
 8007be4:	f43f ae6b 	beq.w	80078be <_printf_float+0xc2>
 8007be8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bec:	2200      	movs	r2, #0
 8007bee:	2300      	movs	r3, #0
 8007bf0:	f7f8 ff9a 	bl	8000b28 <__aeabi_dcmpeq>
 8007bf4:	b9d8      	cbnz	r0, 8007c2e <_printf_float+0x432>
 8007bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf8:	f108 0201 	add.w	r2, r8, #1
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	4631      	mov	r1, r6
 8007c00:	4628      	mov	r0, r5
 8007c02:	47b8      	blx	r7
 8007c04:	3001      	adds	r0, #1
 8007c06:	d10e      	bne.n	8007c26 <_printf_float+0x42a>
 8007c08:	e659      	b.n	80078be <_printf_float+0xc2>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	4652      	mov	r2, sl
 8007c0e:	4631      	mov	r1, r6
 8007c10:	4628      	mov	r0, r5
 8007c12:	47b8      	blx	r7
 8007c14:	3001      	adds	r0, #1
 8007c16:	f43f ae52 	beq.w	80078be <_printf_float+0xc2>
 8007c1a:	f108 0801 	add.w	r8, r8, #1
 8007c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c20:	3b01      	subs	r3, #1
 8007c22:	4543      	cmp	r3, r8
 8007c24:	dcf1      	bgt.n	8007c0a <_printf_float+0x40e>
 8007c26:	464b      	mov	r3, r9
 8007c28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c2c:	e6dc      	b.n	80079e8 <_printf_float+0x1ec>
 8007c2e:	f04f 0800 	mov.w	r8, #0
 8007c32:	f104 0a1a 	add.w	sl, r4, #26
 8007c36:	e7f2      	b.n	8007c1e <_printf_float+0x422>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	4642      	mov	r2, r8
 8007c3c:	e7df      	b.n	8007bfe <_printf_float+0x402>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	464a      	mov	r2, r9
 8007c42:	4631      	mov	r1, r6
 8007c44:	4628      	mov	r0, r5
 8007c46:	47b8      	blx	r7
 8007c48:	3001      	adds	r0, #1
 8007c4a:	f43f ae38 	beq.w	80078be <_printf_float+0xc2>
 8007c4e:	f108 0801 	add.w	r8, r8, #1
 8007c52:	68e3      	ldr	r3, [r4, #12]
 8007c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c56:	1a5b      	subs	r3, r3, r1
 8007c58:	4543      	cmp	r3, r8
 8007c5a:	dcf0      	bgt.n	8007c3e <_printf_float+0x442>
 8007c5c:	e6fa      	b.n	8007a54 <_printf_float+0x258>
 8007c5e:	f04f 0800 	mov.w	r8, #0
 8007c62:	f104 0919 	add.w	r9, r4, #25
 8007c66:	e7f4      	b.n	8007c52 <_printf_float+0x456>

08007c68 <_printf_common>:
 8007c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c6c:	4616      	mov	r6, r2
 8007c6e:	4699      	mov	r9, r3
 8007c70:	688a      	ldr	r2, [r1, #8]
 8007c72:	690b      	ldr	r3, [r1, #16]
 8007c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	bfb8      	it	lt
 8007c7c:	4613      	movlt	r3, r2
 8007c7e:	6033      	str	r3, [r6, #0]
 8007c80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c84:	4607      	mov	r7, r0
 8007c86:	460c      	mov	r4, r1
 8007c88:	b10a      	cbz	r2, 8007c8e <_printf_common+0x26>
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	6033      	str	r3, [r6, #0]
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	0699      	lsls	r1, r3, #26
 8007c92:	bf42      	ittt	mi
 8007c94:	6833      	ldrmi	r3, [r6, #0]
 8007c96:	3302      	addmi	r3, #2
 8007c98:	6033      	strmi	r3, [r6, #0]
 8007c9a:	6825      	ldr	r5, [r4, #0]
 8007c9c:	f015 0506 	ands.w	r5, r5, #6
 8007ca0:	d106      	bne.n	8007cb0 <_printf_common+0x48>
 8007ca2:	f104 0a19 	add.w	sl, r4, #25
 8007ca6:	68e3      	ldr	r3, [r4, #12]
 8007ca8:	6832      	ldr	r2, [r6, #0]
 8007caa:	1a9b      	subs	r3, r3, r2
 8007cac:	42ab      	cmp	r3, r5
 8007cae:	dc26      	bgt.n	8007cfe <_printf_common+0x96>
 8007cb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cb4:	1e13      	subs	r3, r2, #0
 8007cb6:	6822      	ldr	r2, [r4, #0]
 8007cb8:	bf18      	it	ne
 8007cba:	2301      	movne	r3, #1
 8007cbc:	0692      	lsls	r2, r2, #26
 8007cbe:	d42b      	bmi.n	8007d18 <_printf_common+0xb0>
 8007cc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cc4:	4649      	mov	r1, r9
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	47c0      	blx	r8
 8007cca:	3001      	adds	r0, #1
 8007ccc:	d01e      	beq.n	8007d0c <_printf_common+0xa4>
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	68e5      	ldr	r5, [r4, #12]
 8007cd2:	6832      	ldr	r2, [r6, #0]
 8007cd4:	f003 0306 	and.w	r3, r3, #6
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	bf08      	it	eq
 8007cdc:	1aad      	subeq	r5, r5, r2
 8007cde:	68a3      	ldr	r3, [r4, #8]
 8007ce0:	6922      	ldr	r2, [r4, #16]
 8007ce2:	bf0c      	ite	eq
 8007ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ce8:	2500      	movne	r5, #0
 8007cea:	4293      	cmp	r3, r2
 8007cec:	bfc4      	itt	gt
 8007cee:	1a9b      	subgt	r3, r3, r2
 8007cf0:	18ed      	addgt	r5, r5, r3
 8007cf2:	2600      	movs	r6, #0
 8007cf4:	341a      	adds	r4, #26
 8007cf6:	42b5      	cmp	r5, r6
 8007cf8:	d11a      	bne.n	8007d30 <_printf_common+0xc8>
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	e008      	b.n	8007d10 <_printf_common+0xa8>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	4652      	mov	r2, sl
 8007d02:	4649      	mov	r1, r9
 8007d04:	4638      	mov	r0, r7
 8007d06:	47c0      	blx	r8
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d103      	bne.n	8007d14 <_printf_common+0xac>
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d14:	3501      	adds	r5, #1
 8007d16:	e7c6      	b.n	8007ca6 <_printf_common+0x3e>
 8007d18:	18e1      	adds	r1, r4, r3
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	2030      	movs	r0, #48	; 0x30
 8007d1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d22:	4422      	add	r2, r4
 8007d24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d2c:	3302      	adds	r3, #2
 8007d2e:	e7c7      	b.n	8007cc0 <_printf_common+0x58>
 8007d30:	2301      	movs	r3, #1
 8007d32:	4622      	mov	r2, r4
 8007d34:	4649      	mov	r1, r9
 8007d36:	4638      	mov	r0, r7
 8007d38:	47c0      	blx	r8
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	d0e6      	beq.n	8007d0c <_printf_common+0xa4>
 8007d3e:	3601      	adds	r6, #1
 8007d40:	e7d9      	b.n	8007cf6 <_printf_common+0x8e>
	...

08007d44 <_printf_i>:
 8007d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d48:	460c      	mov	r4, r1
 8007d4a:	4691      	mov	r9, r2
 8007d4c:	7e27      	ldrb	r7, [r4, #24]
 8007d4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d50:	2f78      	cmp	r7, #120	; 0x78
 8007d52:	4680      	mov	r8, r0
 8007d54:	469a      	mov	sl, r3
 8007d56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d5a:	d807      	bhi.n	8007d6c <_printf_i+0x28>
 8007d5c:	2f62      	cmp	r7, #98	; 0x62
 8007d5e:	d80a      	bhi.n	8007d76 <_printf_i+0x32>
 8007d60:	2f00      	cmp	r7, #0
 8007d62:	f000 80d8 	beq.w	8007f16 <_printf_i+0x1d2>
 8007d66:	2f58      	cmp	r7, #88	; 0x58
 8007d68:	f000 80a3 	beq.w	8007eb2 <_printf_i+0x16e>
 8007d6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d74:	e03a      	b.n	8007dec <_printf_i+0xa8>
 8007d76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d7a:	2b15      	cmp	r3, #21
 8007d7c:	d8f6      	bhi.n	8007d6c <_printf_i+0x28>
 8007d7e:	a001      	add	r0, pc, #4	; (adr r0, 8007d84 <_printf_i+0x40>)
 8007d80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007d84:	08007ddd 	.word	0x08007ddd
 8007d88:	08007df1 	.word	0x08007df1
 8007d8c:	08007d6d 	.word	0x08007d6d
 8007d90:	08007d6d 	.word	0x08007d6d
 8007d94:	08007d6d 	.word	0x08007d6d
 8007d98:	08007d6d 	.word	0x08007d6d
 8007d9c:	08007df1 	.word	0x08007df1
 8007da0:	08007d6d 	.word	0x08007d6d
 8007da4:	08007d6d 	.word	0x08007d6d
 8007da8:	08007d6d 	.word	0x08007d6d
 8007dac:	08007d6d 	.word	0x08007d6d
 8007db0:	08007efd 	.word	0x08007efd
 8007db4:	08007e21 	.word	0x08007e21
 8007db8:	08007edf 	.word	0x08007edf
 8007dbc:	08007d6d 	.word	0x08007d6d
 8007dc0:	08007d6d 	.word	0x08007d6d
 8007dc4:	08007f1f 	.word	0x08007f1f
 8007dc8:	08007d6d 	.word	0x08007d6d
 8007dcc:	08007e21 	.word	0x08007e21
 8007dd0:	08007d6d 	.word	0x08007d6d
 8007dd4:	08007d6d 	.word	0x08007d6d
 8007dd8:	08007ee7 	.word	0x08007ee7
 8007ddc:	680b      	ldr	r3, [r1, #0]
 8007dde:	1d1a      	adds	r2, r3, #4
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	600a      	str	r2, [r1, #0]
 8007de4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dec:	2301      	movs	r3, #1
 8007dee:	e0a3      	b.n	8007f38 <_printf_i+0x1f4>
 8007df0:	6825      	ldr	r5, [r4, #0]
 8007df2:	6808      	ldr	r0, [r1, #0]
 8007df4:	062e      	lsls	r6, r5, #24
 8007df6:	f100 0304 	add.w	r3, r0, #4
 8007dfa:	d50a      	bpl.n	8007e12 <_printf_i+0xce>
 8007dfc:	6805      	ldr	r5, [r0, #0]
 8007dfe:	600b      	str	r3, [r1, #0]
 8007e00:	2d00      	cmp	r5, #0
 8007e02:	da03      	bge.n	8007e0c <_printf_i+0xc8>
 8007e04:	232d      	movs	r3, #45	; 0x2d
 8007e06:	426d      	negs	r5, r5
 8007e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e0c:	485e      	ldr	r0, [pc, #376]	; (8007f88 <_printf_i+0x244>)
 8007e0e:	230a      	movs	r3, #10
 8007e10:	e019      	b.n	8007e46 <_printf_i+0x102>
 8007e12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e16:	6805      	ldr	r5, [r0, #0]
 8007e18:	600b      	str	r3, [r1, #0]
 8007e1a:	bf18      	it	ne
 8007e1c:	b22d      	sxthne	r5, r5
 8007e1e:	e7ef      	b.n	8007e00 <_printf_i+0xbc>
 8007e20:	680b      	ldr	r3, [r1, #0]
 8007e22:	6825      	ldr	r5, [r4, #0]
 8007e24:	1d18      	adds	r0, r3, #4
 8007e26:	6008      	str	r0, [r1, #0]
 8007e28:	0628      	lsls	r0, r5, #24
 8007e2a:	d501      	bpl.n	8007e30 <_printf_i+0xec>
 8007e2c:	681d      	ldr	r5, [r3, #0]
 8007e2e:	e002      	b.n	8007e36 <_printf_i+0xf2>
 8007e30:	0669      	lsls	r1, r5, #25
 8007e32:	d5fb      	bpl.n	8007e2c <_printf_i+0xe8>
 8007e34:	881d      	ldrh	r5, [r3, #0]
 8007e36:	4854      	ldr	r0, [pc, #336]	; (8007f88 <_printf_i+0x244>)
 8007e38:	2f6f      	cmp	r7, #111	; 0x6f
 8007e3a:	bf0c      	ite	eq
 8007e3c:	2308      	moveq	r3, #8
 8007e3e:	230a      	movne	r3, #10
 8007e40:	2100      	movs	r1, #0
 8007e42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e46:	6866      	ldr	r6, [r4, #4]
 8007e48:	60a6      	str	r6, [r4, #8]
 8007e4a:	2e00      	cmp	r6, #0
 8007e4c:	bfa2      	ittt	ge
 8007e4e:	6821      	ldrge	r1, [r4, #0]
 8007e50:	f021 0104 	bicge.w	r1, r1, #4
 8007e54:	6021      	strge	r1, [r4, #0]
 8007e56:	b90d      	cbnz	r5, 8007e5c <_printf_i+0x118>
 8007e58:	2e00      	cmp	r6, #0
 8007e5a:	d04d      	beq.n	8007ef8 <_printf_i+0x1b4>
 8007e5c:	4616      	mov	r6, r2
 8007e5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e62:	fb03 5711 	mls	r7, r3, r1, r5
 8007e66:	5dc7      	ldrb	r7, [r0, r7]
 8007e68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e6c:	462f      	mov	r7, r5
 8007e6e:	42bb      	cmp	r3, r7
 8007e70:	460d      	mov	r5, r1
 8007e72:	d9f4      	bls.n	8007e5e <_printf_i+0x11a>
 8007e74:	2b08      	cmp	r3, #8
 8007e76:	d10b      	bne.n	8007e90 <_printf_i+0x14c>
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	07df      	lsls	r7, r3, #31
 8007e7c:	d508      	bpl.n	8007e90 <_printf_i+0x14c>
 8007e7e:	6923      	ldr	r3, [r4, #16]
 8007e80:	6861      	ldr	r1, [r4, #4]
 8007e82:	4299      	cmp	r1, r3
 8007e84:	bfde      	ittt	le
 8007e86:	2330      	movle	r3, #48	; 0x30
 8007e88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e90:	1b92      	subs	r2, r2, r6
 8007e92:	6122      	str	r2, [r4, #16]
 8007e94:	f8cd a000 	str.w	sl, [sp]
 8007e98:	464b      	mov	r3, r9
 8007e9a:	aa03      	add	r2, sp, #12
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	4640      	mov	r0, r8
 8007ea0:	f7ff fee2 	bl	8007c68 <_printf_common>
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d14c      	bne.n	8007f42 <_printf_i+0x1fe>
 8007ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eac:	b004      	add	sp, #16
 8007eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb2:	4835      	ldr	r0, [pc, #212]	; (8007f88 <_printf_i+0x244>)
 8007eb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	680e      	ldr	r6, [r1, #0]
 8007ebc:	061f      	lsls	r7, r3, #24
 8007ebe:	f856 5b04 	ldr.w	r5, [r6], #4
 8007ec2:	600e      	str	r6, [r1, #0]
 8007ec4:	d514      	bpl.n	8007ef0 <_printf_i+0x1ac>
 8007ec6:	07d9      	lsls	r1, r3, #31
 8007ec8:	bf44      	itt	mi
 8007eca:	f043 0320 	orrmi.w	r3, r3, #32
 8007ece:	6023      	strmi	r3, [r4, #0]
 8007ed0:	b91d      	cbnz	r5, 8007eda <_printf_i+0x196>
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	f023 0320 	bic.w	r3, r3, #32
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	2310      	movs	r3, #16
 8007edc:	e7b0      	b.n	8007e40 <_printf_i+0xfc>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	f043 0320 	orr.w	r3, r3, #32
 8007ee4:	6023      	str	r3, [r4, #0]
 8007ee6:	2378      	movs	r3, #120	; 0x78
 8007ee8:	4828      	ldr	r0, [pc, #160]	; (8007f8c <_printf_i+0x248>)
 8007eea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007eee:	e7e3      	b.n	8007eb8 <_printf_i+0x174>
 8007ef0:	065e      	lsls	r6, r3, #25
 8007ef2:	bf48      	it	mi
 8007ef4:	b2ad      	uxthmi	r5, r5
 8007ef6:	e7e6      	b.n	8007ec6 <_printf_i+0x182>
 8007ef8:	4616      	mov	r6, r2
 8007efa:	e7bb      	b.n	8007e74 <_printf_i+0x130>
 8007efc:	680b      	ldr	r3, [r1, #0]
 8007efe:	6826      	ldr	r6, [r4, #0]
 8007f00:	6960      	ldr	r0, [r4, #20]
 8007f02:	1d1d      	adds	r5, r3, #4
 8007f04:	600d      	str	r5, [r1, #0]
 8007f06:	0635      	lsls	r5, r6, #24
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	d501      	bpl.n	8007f10 <_printf_i+0x1cc>
 8007f0c:	6018      	str	r0, [r3, #0]
 8007f0e:	e002      	b.n	8007f16 <_printf_i+0x1d2>
 8007f10:	0671      	lsls	r1, r6, #25
 8007f12:	d5fb      	bpl.n	8007f0c <_printf_i+0x1c8>
 8007f14:	8018      	strh	r0, [r3, #0]
 8007f16:	2300      	movs	r3, #0
 8007f18:	6123      	str	r3, [r4, #16]
 8007f1a:	4616      	mov	r6, r2
 8007f1c:	e7ba      	b.n	8007e94 <_printf_i+0x150>
 8007f1e:	680b      	ldr	r3, [r1, #0]
 8007f20:	1d1a      	adds	r2, r3, #4
 8007f22:	600a      	str	r2, [r1, #0]
 8007f24:	681e      	ldr	r6, [r3, #0]
 8007f26:	6862      	ldr	r2, [r4, #4]
 8007f28:	2100      	movs	r1, #0
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f7f8 f988 	bl	8000240 <memchr>
 8007f30:	b108      	cbz	r0, 8007f36 <_printf_i+0x1f2>
 8007f32:	1b80      	subs	r0, r0, r6
 8007f34:	6060      	str	r0, [r4, #4]
 8007f36:	6863      	ldr	r3, [r4, #4]
 8007f38:	6123      	str	r3, [r4, #16]
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f40:	e7a8      	b.n	8007e94 <_printf_i+0x150>
 8007f42:	6923      	ldr	r3, [r4, #16]
 8007f44:	4632      	mov	r2, r6
 8007f46:	4649      	mov	r1, r9
 8007f48:	4640      	mov	r0, r8
 8007f4a:	47d0      	blx	sl
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	d0ab      	beq.n	8007ea8 <_printf_i+0x164>
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	079b      	lsls	r3, r3, #30
 8007f54:	d413      	bmi.n	8007f7e <_printf_i+0x23a>
 8007f56:	68e0      	ldr	r0, [r4, #12]
 8007f58:	9b03      	ldr	r3, [sp, #12]
 8007f5a:	4298      	cmp	r0, r3
 8007f5c:	bfb8      	it	lt
 8007f5e:	4618      	movlt	r0, r3
 8007f60:	e7a4      	b.n	8007eac <_printf_i+0x168>
 8007f62:	2301      	movs	r3, #1
 8007f64:	4632      	mov	r2, r6
 8007f66:	4649      	mov	r1, r9
 8007f68:	4640      	mov	r0, r8
 8007f6a:	47d0      	blx	sl
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d09b      	beq.n	8007ea8 <_printf_i+0x164>
 8007f70:	3501      	adds	r5, #1
 8007f72:	68e3      	ldr	r3, [r4, #12]
 8007f74:	9903      	ldr	r1, [sp, #12]
 8007f76:	1a5b      	subs	r3, r3, r1
 8007f78:	42ab      	cmp	r3, r5
 8007f7a:	dcf2      	bgt.n	8007f62 <_printf_i+0x21e>
 8007f7c:	e7eb      	b.n	8007f56 <_printf_i+0x212>
 8007f7e:	2500      	movs	r5, #0
 8007f80:	f104 0619 	add.w	r6, r4, #25
 8007f84:	e7f5      	b.n	8007f72 <_printf_i+0x22e>
 8007f86:	bf00      	nop
 8007f88:	0800e06a 	.word	0x0800e06a
 8007f8c:	0800e07b 	.word	0x0800e07b

08007f90 <iprintf>:
 8007f90:	b40f      	push	{r0, r1, r2, r3}
 8007f92:	4b0a      	ldr	r3, [pc, #40]	; (8007fbc <iprintf+0x2c>)
 8007f94:	b513      	push	{r0, r1, r4, lr}
 8007f96:	681c      	ldr	r4, [r3, #0]
 8007f98:	b124      	cbz	r4, 8007fa4 <iprintf+0x14>
 8007f9a:	69a3      	ldr	r3, [r4, #24]
 8007f9c:	b913      	cbnz	r3, 8007fa4 <iprintf+0x14>
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f001 ff0c 	bl	8009dbc <__sinit>
 8007fa4:	ab05      	add	r3, sp, #20
 8007fa6:	9a04      	ldr	r2, [sp, #16]
 8007fa8:	68a1      	ldr	r1, [r4, #8]
 8007faa:	9301      	str	r3, [sp, #4]
 8007fac:	4620      	mov	r0, r4
 8007fae:	f003 f943 	bl	800b238 <_vfiprintf_r>
 8007fb2:	b002      	add	sp, #8
 8007fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb8:	b004      	add	sp, #16
 8007fba:	4770      	bx	lr
 8007fbc:	20000040 	.word	0x20000040

08007fc0 <_puts_r>:
 8007fc0:	b570      	push	{r4, r5, r6, lr}
 8007fc2:	460e      	mov	r6, r1
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	b118      	cbz	r0, 8007fd0 <_puts_r+0x10>
 8007fc8:	6983      	ldr	r3, [r0, #24]
 8007fca:	b90b      	cbnz	r3, 8007fd0 <_puts_r+0x10>
 8007fcc:	f001 fef6 	bl	8009dbc <__sinit>
 8007fd0:	69ab      	ldr	r3, [r5, #24]
 8007fd2:	68ac      	ldr	r4, [r5, #8]
 8007fd4:	b913      	cbnz	r3, 8007fdc <_puts_r+0x1c>
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f001 fef0 	bl	8009dbc <__sinit>
 8007fdc:	4b2c      	ldr	r3, [pc, #176]	; (8008090 <_puts_r+0xd0>)
 8007fde:	429c      	cmp	r4, r3
 8007fe0:	d120      	bne.n	8008024 <_puts_r+0x64>
 8007fe2:	686c      	ldr	r4, [r5, #4]
 8007fe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fe6:	07db      	lsls	r3, r3, #31
 8007fe8:	d405      	bmi.n	8007ff6 <_puts_r+0x36>
 8007fea:	89a3      	ldrh	r3, [r4, #12]
 8007fec:	0598      	lsls	r0, r3, #22
 8007fee:	d402      	bmi.n	8007ff6 <_puts_r+0x36>
 8007ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ff2:	f002 faf4 	bl	800a5de <__retarget_lock_acquire_recursive>
 8007ff6:	89a3      	ldrh	r3, [r4, #12]
 8007ff8:	0719      	lsls	r1, r3, #28
 8007ffa:	d51d      	bpl.n	8008038 <_puts_r+0x78>
 8007ffc:	6923      	ldr	r3, [r4, #16]
 8007ffe:	b1db      	cbz	r3, 8008038 <_puts_r+0x78>
 8008000:	3e01      	subs	r6, #1
 8008002:	68a3      	ldr	r3, [r4, #8]
 8008004:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008008:	3b01      	subs	r3, #1
 800800a:	60a3      	str	r3, [r4, #8]
 800800c:	bb39      	cbnz	r1, 800805e <_puts_r+0x9e>
 800800e:	2b00      	cmp	r3, #0
 8008010:	da38      	bge.n	8008084 <_puts_r+0xc4>
 8008012:	4622      	mov	r2, r4
 8008014:	210a      	movs	r1, #10
 8008016:	4628      	mov	r0, r5
 8008018:	f000 fe7c 	bl	8008d14 <__swbuf_r>
 800801c:	3001      	adds	r0, #1
 800801e:	d011      	beq.n	8008044 <_puts_r+0x84>
 8008020:	250a      	movs	r5, #10
 8008022:	e011      	b.n	8008048 <_puts_r+0x88>
 8008024:	4b1b      	ldr	r3, [pc, #108]	; (8008094 <_puts_r+0xd4>)
 8008026:	429c      	cmp	r4, r3
 8008028:	d101      	bne.n	800802e <_puts_r+0x6e>
 800802a:	68ac      	ldr	r4, [r5, #8]
 800802c:	e7da      	b.n	8007fe4 <_puts_r+0x24>
 800802e:	4b1a      	ldr	r3, [pc, #104]	; (8008098 <_puts_r+0xd8>)
 8008030:	429c      	cmp	r4, r3
 8008032:	bf08      	it	eq
 8008034:	68ec      	ldreq	r4, [r5, #12]
 8008036:	e7d5      	b.n	8007fe4 <_puts_r+0x24>
 8008038:	4621      	mov	r1, r4
 800803a:	4628      	mov	r0, r5
 800803c:	f000 febc 	bl	8008db8 <__swsetup_r>
 8008040:	2800      	cmp	r0, #0
 8008042:	d0dd      	beq.n	8008000 <_puts_r+0x40>
 8008044:	f04f 35ff 	mov.w	r5, #4294967295
 8008048:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800804a:	07da      	lsls	r2, r3, #31
 800804c:	d405      	bmi.n	800805a <_puts_r+0x9a>
 800804e:	89a3      	ldrh	r3, [r4, #12]
 8008050:	059b      	lsls	r3, r3, #22
 8008052:	d402      	bmi.n	800805a <_puts_r+0x9a>
 8008054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008056:	f002 fac3 	bl	800a5e0 <__retarget_lock_release_recursive>
 800805a:	4628      	mov	r0, r5
 800805c:	bd70      	pop	{r4, r5, r6, pc}
 800805e:	2b00      	cmp	r3, #0
 8008060:	da04      	bge.n	800806c <_puts_r+0xac>
 8008062:	69a2      	ldr	r2, [r4, #24]
 8008064:	429a      	cmp	r2, r3
 8008066:	dc06      	bgt.n	8008076 <_puts_r+0xb6>
 8008068:	290a      	cmp	r1, #10
 800806a:	d004      	beq.n	8008076 <_puts_r+0xb6>
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	1c5a      	adds	r2, r3, #1
 8008070:	6022      	str	r2, [r4, #0]
 8008072:	7019      	strb	r1, [r3, #0]
 8008074:	e7c5      	b.n	8008002 <_puts_r+0x42>
 8008076:	4622      	mov	r2, r4
 8008078:	4628      	mov	r0, r5
 800807a:	f000 fe4b 	bl	8008d14 <__swbuf_r>
 800807e:	3001      	adds	r0, #1
 8008080:	d1bf      	bne.n	8008002 <_puts_r+0x42>
 8008082:	e7df      	b.n	8008044 <_puts_r+0x84>
 8008084:	6823      	ldr	r3, [r4, #0]
 8008086:	250a      	movs	r5, #10
 8008088:	1c5a      	adds	r2, r3, #1
 800808a:	6022      	str	r2, [r4, #0]
 800808c:	701d      	strb	r5, [r3, #0]
 800808e:	e7db      	b.n	8008048 <_puts_r+0x88>
 8008090:	0800e194 	.word	0x0800e194
 8008094:	0800e1b4 	.word	0x0800e1b4
 8008098:	0800e174 	.word	0x0800e174

0800809c <puts>:
 800809c:	4b02      	ldr	r3, [pc, #8]	; (80080a8 <puts+0xc>)
 800809e:	4601      	mov	r1, r0
 80080a0:	6818      	ldr	r0, [r3, #0]
 80080a2:	f7ff bf8d 	b.w	8007fc0 <_puts_r>
 80080a6:	bf00      	nop
 80080a8:	20000040 	.word	0x20000040

080080ac <sulp>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	4604      	mov	r4, r0
 80080b0:	460d      	mov	r5, r1
 80080b2:	ec45 4b10 	vmov	d0, r4, r5
 80080b6:	4616      	mov	r6, r2
 80080b8:	f002 fe8c 	bl	800add4 <__ulp>
 80080bc:	ec51 0b10 	vmov	r0, r1, d0
 80080c0:	b17e      	cbz	r6, 80080e2 <sulp+0x36>
 80080c2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80080c6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	dd09      	ble.n	80080e2 <sulp+0x36>
 80080ce:	051b      	lsls	r3, r3, #20
 80080d0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80080d4:	2400      	movs	r4, #0
 80080d6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80080da:	4622      	mov	r2, r4
 80080dc:	462b      	mov	r3, r5
 80080de:	f7f8 fabb 	bl	8000658 <__aeabi_dmul>
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	0000      	movs	r0, r0
	...

080080e8 <_strtod_l>:
 80080e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ec:	b0a3      	sub	sp, #140	; 0x8c
 80080ee:	461f      	mov	r7, r3
 80080f0:	2300      	movs	r3, #0
 80080f2:	931e      	str	r3, [sp, #120]	; 0x78
 80080f4:	4ba4      	ldr	r3, [pc, #656]	; (8008388 <_strtod_l+0x2a0>)
 80080f6:	9219      	str	r2, [sp, #100]	; 0x64
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	9307      	str	r3, [sp, #28]
 80080fc:	4604      	mov	r4, r0
 80080fe:	4618      	mov	r0, r3
 8008100:	4688      	mov	r8, r1
 8008102:	f7f8 f88f 	bl	8000224 <strlen>
 8008106:	f04f 0a00 	mov.w	sl, #0
 800810a:	4605      	mov	r5, r0
 800810c:	f04f 0b00 	mov.w	fp, #0
 8008110:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008114:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008116:	781a      	ldrb	r2, [r3, #0]
 8008118:	2a2b      	cmp	r2, #43	; 0x2b
 800811a:	d04c      	beq.n	80081b6 <_strtod_l+0xce>
 800811c:	d839      	bhi.n	8008192 <_strtod_l+0xaa>
 800811e:	2a0d      	cmp	r2, #13
 8008120:	d832      	bhi.n	8008188 <_strtod_l+0xa0>
 8008122:	2a08      	cmp	r2, #8
 8008124:	d832      	bhi.n	800818c <_strtod_l+0xa4>
 8008126:	2a00      	cmp	r2, #0
 8008128:	d03c      	beq.n	80081a4 <_strtod_l+0xbc>
 800812a:	2300      	movs	r3, #0
 800812c:	930e      	str	r3, [sp, #56]	; 0x38
 800812e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008130:	7833      	ldrb	r3, [r6, #0]
 8008132:	2b30      	cmp	r3, #48	; 0x30
 8008134:	f040 80b4 	bne.w	80082a0 <_strtod_l+0x1b8>
 8008138:	7873      	ldrb	r3, [r6, #1]
 800813a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800813e:	2b58      	cmp	r3, #88	; 0x58
 8008140:	d16c      	bne.n	800821c <_strtod_l+0x134>
 8008142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008144:	9301      	str	r3, [sp, #4]
 8008146:	ab1e      	add	r3, sp, #120	; 0x78
 8008148:	9702      	str	r7, [sp, #8]
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	4a8f      	ldr	r2, [pc, #572]	; (800838c <_strtod_l+0x2a4>)
 800814e:	ab1f      	add	r3, sp, #124	; 0x7c
 8008150:	a91d      	add	r1, sp, #116	; 0x74
 8008152:	4620      	mov	r0, r4
 8008154:	f001 ff36 	bl	8009fc4 <__gethex>
 8008158:	f010 0707 	ands.w	r7, r0, #7
 800815c:	4605      	mov	r5, r0
 800815e:	d005      	beq.n	800816c <_strtod_l+0x84>
 8008160:	2f06      	cmp	r7, #6
 8008162:	d12a      	bne.n	80081ba <_strtod_l+0xd2>
 8008164:	3601      	adds	r6, #1
 8008166:	2300      	movs	r3, #0
 8008168:	961d      	str	r6, [sp, #116]	; 0x74
 800816a:	930e      	str	r3, [sp, #56]	; 0x38
 800816c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800816e:	2b00      	cmp	r3, #0
 8008170:	f040 8596 	bne.w	8008ca0 <_strtod_l+0xbb8>
 8008174:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008176:	b1db      	cbz	r3, 80081b0 <_strtod_l+0xc8>
 8008178:	4652      	mov	r2, sl
 800817a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800817e:	ec43 2b10 	vmov	d0, r2, r3
 8008182:	b023      	add	sp, #140	; 0x8c
 8008184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008188:	2a20      	cmp	r2, #32
 800818a:	d1ce      	bne.n	800812a <_strtod_l+0x42>
 800818c:	3301      	adds	r3, #1
 800818e:	931d      	str	r3, [sp, #116]	; 0x74
 8008190:	e7c0      	b.n	8008114 <_strtod_l+0x2c>
 8008192:	2a2d      	cmp	r2, #45	; 0x2d
 8008194:	d1c9      	bne.n	800812a <_strtod_l+0x42>
 8008196:	2201      	movs	r2, #1
 8008198:	920e      	str	r2, [sp, #56]	; 0x38
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	921d      	str	r2, [sp, #116]	; 0x74
 800819e:	785b      	ldrb	r3, [r3, #1]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1c4      	bne.n	800812e <_strtod_l+0x46>
 80081a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081a6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f040 8576 	bne.w	8008c9c <_strtod_l+0xbb4>
 80081b0:	4652      	mov	r2, sl
 80081b2:	465b      	mov	r3, fp
 80081b4:	e7e3      	b.n	800817e <_strtod_l+0x96>
 80081b6:	2200      	movs	r2, #0
 80081b8:	e7ee      	b.n	8008198 <_strtod_l+0xb0>
 80081ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80081bc:	b13a      	cbz	r2, 80081ce <_strtod_l+0xe6>
 80081be:	2135      	movs	r1, #53	; 0x35
 80081c0:	a820      	add	r0, sp, #128	; 0x80
 80081c2:	f002 ff12 	bl	800afea <__copybits>
 80081c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80081c8:	4620      	mov	r0, r4
 80081ca:	f002 fad7 	bl	800a77c <_Bfree>
 80081ce:	3f01      	subs	r7, #1
 80081d0:	2f05      	cmp	r7, #5
 80081d2:	d807      	bhi.n	80081e4 <_strtod_l+0xfc>
 80081d4:	e8df f007 	tbb	[pc, r7]
 80081d8:	1d180b0e 	.word	0x1d180b0e
 80081dc:	030e      	.short	0x030e
 80081de:	f04f 0b00 	mov.w	fp, #0
 80081e2:	46da      	mov	sl, fp
 80081e4:	0728      	lsls	r0, r5, #28
 80081e6:	d5c1      	bpl.n	800816c <_strtod_l+0x84>
 80081e8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80081ec:	e7be      	b.n	800816c <_strtod_l+0x84>
 80081ee:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80081f2:	e7f7      	b.n	80081e4 <_strtod_l+0xfc>
 80081f4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80081f8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80081fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80081fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008202:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008206:	e7ed      	b.n	80081e4 <_strtod_l+0xfc>
 8008208:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008390 <_strtod_l+0x2a8>
 800820c:	f04f 0a00 	mov.w	sl, #0
 8008210:	e7e8      	b.n	80081e4 <_strtod_l+0xfc>
 8008212:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008216:	f04f 3aff 	mov.w	sl, #4294967295
 800821a:	e7e3      	b.n	80081e4 <_strtod_l+0xfc>
 800821c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	921d      	str	r2, [sp, #116]	; 0x74
 8008222:	785b      	ldrb	r3, [r3, #1]
 8008224:	2b30      	cmp	r3, #48	; 0x30
 8008226:	d0f9      	beq.n	800821c <_strtod_l+0x134>
 8008228:	2b00      	cmp	r3, #0
 800822a:	d09f      	beq.n	800816c <_strtod_l+0x84>
 800822c:	2301      	movs	r3, #1
 800822e:	f04f 0900 	mov.w	r9, #0
 8008232:	9304      	str	r3, [sp, #16]
 8008234:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008236:	930a      	str	r3, [sp, #40]	; 0x28
 8008238:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800823c:	464f      	mov	r7, r9
 800823e:	220a      	movs	r2, #10
 8008240:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008242:	7806      	ldrb	r6, [r0, #0]
 8008244:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008248:	b2d9      	uxtb	r1, r3
 800824a:	2909      	cmp	r1, #9
 800824c:	d92a      	bls.n	80082a4 <_strtod_l+0x1bc>
 800824e:	9907      	ldr	r1, [sp, #28]
 8008250:	462a      	mov	r2, r5
 8008252:	f003 f97c 	bl	800b54e <strncmp>
 8008256:	b398      	cbz	r0, 80082c0 <_strtod_l+0x1d8>
 8008258:	2000      	movs	r0, #0
 800825a:	4633      	mov	r3, r6
 800825c:	463d      	mov	r5, r7
 800825e:	9007      	str	r0, [sp, #28]
 8008260:	4602      	mov	r2, r0
 8008262:	2b65      	cmp	r3, #101	; 0x65
 8008264:	d001      	beq.n	800826a <_strtod_l+0x182>
 8008266:	2b45      	cmp	r3, #69	; 0x45
 8008268:	d118      	bne.n	800829c <_strtod_l+0x1b4>
 800826a:	b91d      	cbnz	r5, 8008274 <_strtod_l+0x18c>
 800826c:	9b04      	ldr	r3, [sp, #16]
 800826e:	4303      	orrs	r3, r0
 8008270:	d098      	beq.n	80081a4 <_strtod_l+0xbc>
 8008272:	2500      	movs	r5, #0
 8008274:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008278:	f108 0301 	add.w	r3, r8, #1
 800827c:	931d      	str	r3, [sp, #116]	; 0x74
 800827e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008282:	2b2b      	cmp	r3, #43	; 0x2b
 8008284:	d075      	beq.n	8008372 <_strtod_l+0x28a>
 8008286:	2b2d      	cmp	r3, #45	; 0x2d
 8008288:	d07b      	beq.n	8008382 <_strtod_l+0x29a>
 800828a:	f04f 0c00 	mov.w	ip, #0
 800828e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008292:	2909      	cmp	r1, #9
 8008294:	f240 8082 	bls.w	800839c <_strtod_l+0x2b4>
 8008298:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800829c:	2600      	movs	r6, #0
 800829e:	e09d      	b.n	80083dc <_strtod_l+0x2f4>
 80082a0:	2300      	movs	r3, #0
 80082a2:	e7c4      	b.n	800822e <_strtod_l+0x146>
 80082a4:	2f08      	cmp	r7, #8
 80082a6:	bfd8      	it	le
 80082a8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80082aa:	f100 0001 	add.w	r0, r0, #1
 80082ae:	bfda      	itte	le
 80082b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80082b4:	9309      	strle	r3, [sp, #36]	; 0x24
 80082b6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80082ba:	3701      	adds	r7, #1
 80082bc:	901d      	str	r0, [sp, #116]	; 0x74
 80082be:	e7bf      	b.n	8008240 <_strtod_l+0x158>
 80082c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082c2:	195a      	adds	r2, r3, r5
 80082c4:	921d      	str	r2, [sp, #116]	; 0x74
 80082c6:	5d5b      	ldrb	r3, [r3, r5]
 80082c8:	2f00      	cmp	r7, #0
 80082ca:	d037      	beq.n	800833c <_strtod_l+0x254>
 80082cc:	9007      	str	r0, [sp, #28]
 80082ce:	463d      	mov	r5, r7
 80082d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80082d4:	2a09      	cmp	r2, #9
 80082d6:	d912      	bls.n	80082fe <_strtod_l+0x216>
 80082d8:	2201      	movs	r2, #1
 80082da:	e7c2      	b.n	8008262 <_strtod_l+0x17a>
 80082dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082de:	1c5a      	adds	r2, r3, #1
 80082e0:	921d      	str	r2, [sp, #116]	; 0x74
 80082e2:	785b      	ldrb	r3, [r3, #1]
 80082e4:	3001      	adds	r0, #1
 80082e6:	2b30      	cmp	r3, #48	; 0x30
 80082e8:	d0f8      	beq.n	80082dc <_strtod_l+0x1f4>
 80082ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80082ee:	2a08      	cmp	r2, #8
 80082f0:	f200 84db 	bhi.w	8008caa <_strtod_l+0xbc2>
 80082f4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80082f6:	9007      	str	r0, [sp, #28]
 80082f8:	2000      	movs	r0, #0
 80082fa:	920a      	str	r2, [sp, #40]	; 0x28
 80082fc:	4605      	mov	r5, r0
 80082fe:	3b30      	subs	r3, #48	; 0x30
 8008300:	f100 0201 	add.w	r2, r0, #1
 8008304:	d014      	beq.n	8008330 <_strtod_l+0x248>
 8008306:	9907      	ldr	r1, [sp, #28]
 8008308:	4411      	add	r1, r2
 800830a:	9107      	str	r1, [sp, #28]
 800830c:	462a      	mov	r2, r5
 800830e:	eb00 0e05 	add.w	lr, r0, r5
 8008312:	210a      	movs	r1, #10
 8008314:	4572      	cmp	r2, lr
 8008316:	d113      	bne.n	8008340 <_strtod_l+0x258>
 8008318:	182a      	adds	r2, r5, r0
 800831a:	2a08      	cmp	r2, #8
 800831c:	f105 0501 	add.w	r5, r5, #1
 8008320:	4405      	add	r5, r0
 8008322:	dc1c      	bgt.n	800835e <_strtod_l+0x276>
 8008324:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008326:	220a      	movs	r2, #10
 8008328:	fb02 3301 	mla	r3, r2, r1, r3
 800832c:	9309      	str	r3, [sp, #36]	; 0x24
 800832e:	2200      	movs	r2, #0
 8008330:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008332:	1c59      	adds	r1, r3, #1
 8008334:	911d      	str	r1, [sp, #116]	; 0x74
 8008336:	785b      	ldrb	r3, [r3, #1]
 8008338:	4610      	mov	r0, r2
 800833a:	e7c9      	b.n	80082d0 <_strtod_l+0x1e8>
 800833c:	4638      	mov	r0, r7
 800833e:	e7d2      	b.n	80082e6 <_strtod_l+0x1fe>
 8008340:	2a08      	cmp	r2, #8
 8008342:	dc04      	bgt.n	800834e <_strtod_l+0x266>
 8008344:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008346:	434e      	muls	r6, r1
 8008348:	9609      	str	r6, [sp, #36]	; 0x24
 800834a:	3201      	adds	r2, #1
 800834c:	e7e2      	b.n	8008314 <_strtod_l+0x22c>
 800834e:	f102 0c01 	add.w	ip, r2, #1
 8008352:	f1bc 0f10 	cmp.w	ip, #16
 8008356:	bfd8      	it	le
 8008358:	fb01 f909 	mulle.w	r9, r1, r9
 800835c:	e7f5      	b.n	800834a <_strtod_l+0x262>
 800835e:	2d10      	cmp	r5, #16
 8008360:	bfdc      	itt	le
 8008362:	220a      	movle	r2, #10
 8008364:	fb02 3909 	mlale	r9, r2, r9, r3
 8008368:	e7e1      	b.n	800832e <_strtod_l+0x246>
 800836a:	2300      	movs	r3, #0
 800836c:	9307      	str	r3, [sp, #28]
 800836e:	2201      	movs	r2, #1
 8008370:	e77c      	b.n	800826c <_strtod_l+0x184>
 8008372:	f04f 0c00 	mov.w	ip, #0
 8008376:	f108 0302 	add.w	r3, r8, #2
 800837a:	931d      	str	r3, [sp, #116]	; 0x74
 800837c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008380:	e785      	b.n	800828e <_strtod_l+0x1a6>
 8008382:	f04f 0c01 	mov.w	ip, #1
 8008386:	e7f6      	b.n	8008376 <_strtod_l+0x28e>
 8008388:	0800e240 	.word	0x0800e240
 800838c:	0800e08c 	.word	0x0800e08c
 8008390:	7ff00000 	.word	0x7ff00000
 8008394:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008396:	1c59      	adds	r1, r3, #1
 8008398:	911d      	str	r1, [sp, #116]	; 0x74
 800839a:	785b      	ldrb	r3, [r3, #1]
 800839c:	2b30      	cmp	r3, #48	; 0x30
 800839e:	d0f9      	beq.n	8008394 <_strtod_l+0x2ac>
 80083a0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80083a4:	2908      	cmp	r1, #8
 80083a6:	f63f af79 	bhi.w	800829c <_strtod_l+0x1b4>
 80083aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80083ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083b0:	9308      	str	r3, [sp, #32]
 80083b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083b4:	1c59      	adds	r1, r3, #1
 80083b6:	911d      	str	r1, [sp, #116]	; 0x74
 80083b8:	785b      	ldrb	r3, [r3, #1]
 80083ba:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80083be:	2e09      	cmp	r6, #9
 80083c0:	d937      	bls.n	8008432 <_strtod_l+0x34a>
 80083c2:	9e08      	ldr	r6, [sp, #32]
 80083c4:	1b89      	subs	r1, r1, r6
 80083c6:	2908      	cmp	r1, #8
 80083c8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80083cc:	dc02      	bgt.n	80083d4 <_strtod_l+0x2ec>
 80083ce:	4576      	cmp	r6, lr
 80083d0:	bfa8      	it	ge
 80083d2:	4676      	movge	r6, lr
 80083d4:	f1bc 0f00 	cmp.w	ip, #0
 80083d8:	d000      	beq.n	80083dc <_strtod_l+0x2f4>
 80083da:	4276      	negs	r6, r6
 80083dc:	2d00      	cmp	r5, #0
 80083de:	d14f      	bne.n	8008480 <_strtod_l+0x398>
 80083e0:	9904      	ldr	r1, [sp, #16]
 80083e2:	4301      	orrs	r1, r0
 80083e4:	f47f aec2 	bne.w	800816c <_strtod_l+0x84>
 80083e8:	2a00      	cmp	r2, #0
 80083ea:	f47f aedb 	bne.w	80081a4 <_strtod_l+0xbc>
 80083ee:	2b69      	cmp	r3, #105	; 0x69
 80083f0:	d027      	beq.n	8008442 <_strtod_l+0x35a>
 80083f2:	dc24      	bgt.n	800843e <_strtod_l+0x356>
 80083f4:	2b49      	cmp	r3, #73	; 0x49
 80083f6:	d024      	beq.n	8008442 <_strtod_l+0x35a>
 80083f8:	2b4e      	cmp	r3, #78	; 0x4e
 80083fa:	f47f aed3 	bne.w	80081a4 <_strtod_l+0xbc>
 80083fe:	499e      	ldr	r1, [pc, #632]	; (8008678 <_strtod_l+0x590>)
 8008400:	a81d      	add	r0, sp, #116	; 0x74
 8008402:	f002 f837 	bl	800a474 <__match>
 8008406:	2800      	cmp	r0, #0
 8008408:	f43f aecc 	beq.w	80081a4 <_strtod_l+0xbc>
 800840c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	2b28      	cmp	r3, #40	; 0x28
 8008412:	d12d      	bne.n	8008470 <_strtod_l+0x388>
 8008414:	4999      	ldr	r1, [pc, #612]	; (800867c <_strtod_l+0x594>)
 8008416:	aa20      	add	r2, sp, #128	; 0x80
 8008418:	a81d      	add	r0, sp, #116	; 0x74
 800841a:	f002 f83f 	bl	800a49c <__hexnan>
 800841e:	2805      	cmp	r0, #5
 8008420:	d126      	bne.n	8008470 <_strtod_l+0x388>
 8008422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008424:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008428:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800842c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008430:	e69c      	b.n	800816c <_strtod_l+0x84>
 8008432:	210a      	movs	r1, #10
 8008434:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008438:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800843c:	e7b9      	b.n	80083b2 <_strtod_l+0x2ca>
 800843e:	2b6e      	cmp	r3, #110	; 0x6e
 8008440:	e7db      	b.n	80083fa <_strtod_l+0x312>
 8008442:	498f      	ldr	r1, [pc, #572]	; (8008680 <_strtod_l+0x598>)
 8008444:	a81d      	add	r0, sp, #116	; 0x74
 8008446:	f002 f815 	bl	800a474 <__match>
 800844a:	2800      	cmp	r0, #0
 800844c:	f43f aeaa 	beq.w	80081a4 <_strtod_l+0xbc>
 8008450:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008452:	498c      	ldr	r1, [pc, #560]	; (8008684 <_strtod_l+0x59c>)
 8008454:	3b01      	subs	r3, #1
 8008456:	a81d      	add	r0, sp, #116	; 0x74
 8008458:	931d      	str	r3, [sp, #116]	; 0x74
 800845a:	f002 f80b 	bl	800a474 <__match>
 800845e:	b910      	cbnz	r0, 8008466 <_strtod_l+0x37e>
 8008460:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008462:	3301      	adds	r3, #1
 8008464:	931d      	str	r3, [sp, #116]	; 0x74
 8008466:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008694 <_strtod_l+0x5ac>
 800846a:	f04f 0a00 	mov.w	sl, #0
 800846e:	e67d      	b.n	800816c <_strtod_l+0x84>
 8008470:	4885      	ldr	r0, [pc, #532]	; (8008688 <_strtod_l+0x5a0>)
 8008472:	f003 f811 	bl	800b498 <nan>
 8008476:	ed8d 0b04 	vstr	d0, [sp, #16]
 800847a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800847e:	e675      	b.n	800816c <_strtod_l+0x84>
 8008480:	9b07      	ldr	r3, [sp, #28]
 8008482:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008484:	1af3      	subs	r3, r6, r3
 8008486:	2f00      	cmp	r7, #0
 8008488:	bf08      	it	eq
 800848a:	462f      	moveq	r7, r5
 800848c:	2d10      	cmp	r5, #16
 800848e:	9308      	str	r3, [sp, #32]
 8008490:	46a8      	mov	r8, r5
 8008492:	bfa8      	it	ge
 8008494:	f04f 0810 	movge.w	r8, #16
 8008498:	f7f8 f864 	bl	8000564 <__aeabi_ui2d>
 800849c:	2d09      	cmp	r5, #9
 800849e:	4682      	mov	sl, r0
 80084a0:	468b      	mov	fp, r1
 80084a2:	dd13      	ble.n	80084cc <_strtod_l+0x3e4>
 80084a4:	4b79      	ldr	r3, [pc, #484]	; (800868c <_strtod_l+0x5a4>)
 80084a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80084aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80084ae:	f7f8 f8d3 	bl	8000658 <__aeabi_dmul>
 80084b2:	4682      	mov	sl, r0
 80084b4:	4648      	mov	r0, r9
 80084b6:	468b      	mov	fp, r1
 80084b8:	f7f8 f854 	bl	8000564 <__aeabi_ui2d>
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4650      	mov	r0, sl
 80084c2:	4659      	mov	r1, fp
 80084c4:	f7f7 ff12 	bl	80002ec <__adddf3>
 80084c8:	4682      	mov	sl, r0
 80084ca:	468b      	mov	fp, r1
 80084cc:	2d0f      	cmp	r5, #15
 80084ce:	dc38      	bgt.n	8008542 <_strtod_l+0x45a>
 80084d0:	9b08      	ldr	r3, [sp, #32]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f43f ae4a 	beq.w	800816c <_strtod_l+0x84>
 80084d8:	dd24      	ble.n	8008524 <_strtod_l+0x43c>
 80084da:	2b16      	cmp	r3, #22
 80084dc:	dc0b      	bgt.n	80084f6 <_strtod_l+0x40e>
 80084de:	4d6b      	ldr	r5, [pc, #428]	; (800868c <_strtod_l+0x5a4>)
 80084e0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80084e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80084e8:	4652      	mov	r2, sl
 80084ea:	465b      	mov	r3, fp
 80084ec:	f7f8 f8b4 	bl	8000658 <__aeabi_dmul>
 80084f0:	4682      	mov	sl, r0
 80084f2:	468b      	mov	fp, r1
 80084f4:	e63a      	b.n	800816c <_strtod_l+0x84>
 80084f6:	9a08      	ldr	r2, [sp, #32]
 80084f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80084fc:	4293      	cmp	r3, r2
 80084fe:	db20      	blt.n	8008542 <_strtod_l+0x45a>
 8008500:	4c62      	ldr	r4, [pc, #392]	; (800868c <_strtod_l+0x5a4>)
 8008502:	f1c5 050f 	rsb	r5, r5, #15
 8008506:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800850a:	4652      	mov	r2, sl
 800850c:	465b      	mov	r3, fp
 800850e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008512:	f7f8 f8a1 	bl	8000658 <__aeabi_dmul>
 8008516:	9b08      	ldr	r3, [sp, #32]
 8008518:	1b5d      	subs	r5, r3, r5
 800851a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800851e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008522:	e7e3      	b.n	80084ec <_strtod_l+0x404>
 8008524:	9b08      	ldr	r3, [sp, #32]
 8008526:	3316      	adds	r3, #22
 8008528:	db0b      	blt.n	8008542 <_strtod_l+0x45a>
 800852a:	9b07      	ldr	r3, [sp, #28]
 800852c:	4a57      	ldr	r2, [pc, #348]	; (800868c <_strtod_l+0x5a4>)
 800852e:	1b9e      	subs	r6, r3, r6
 8008530:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008534:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008538:	4650      	mov	r0, sl
 800853a:	4659      	mov	r1, fp
 800853c:	f7f8 f9b6 	bl	80008ac <__aeabi_ddiv>
 8008540:	e7d6      	b.n	80084f0 <_strtod_l+0x408>
 8008542:	9b08      	ldr	r3, [sp, #32]
 8008544:	eba5 0808 	sub.w	r8, r5, r8
 8008548:	4498      	add	r8, r3
 800854a:	f1b8 0f00 	cmp.w	r8, #0
 800854e:	dd71      	ble.n	8008634 <_strtod_l+0x54c>
 8008550:	f018 030f 	ands.w	r3, r8, #15
 8008554:	d00a      	beq.n	800856c <_strtod_l+0x484>
 8008556:	494d      	ldr	r1, [pc, #308]	; (800868c <_strtod_l+0x5a4>)
 8008558:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800855c:	4652      	mov	r2, sl
 800855e:	465b      	mov	r3, fp
 8008560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008564:	f7f8 f878 	bl	8000658 <__aeabi_dmul>
 8008568:	4682      	mov	sl, r0
 800856a:	468b      	mov	fp, r1
 800856c:	f038 080f 	bics.w	r8, r8, #15
 8008570:	d04d      	beq.n	800860e <_strtod_l+0x526>
 8008572:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008576:	dd22      	ble.n	80085be <_strtod_l+0x4d6>
 8008578:	2500      	movs	r5, #0
 800857a:	462e      	mov	r6, r5
 800857c:	9509      	str	r5, [sp, #36]	; 0x24
 800857e:	9507      	str	r5, [sp, #28]
 8008580:	2322      	movs	r3, #34	; 0x22
 8008582:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008694 <_strtod_l+0x5ac>
 8008586:	6023      	str	r3, [r4, #0]
 8008588:	f04f 0a00 	mov.w	sl, #0
 800858c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858e:	2b00      	cmp	r3, #0
 8008590:	f43f adec 	beq.w	800816c <_strtod_l+0x84>
 8008594:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008596:	4620      	mov	r0, r4
 8008598:	f002 f8f0 	bl	800a77c <_Bfree>
 800859c:	9907      	ldr	r1, [sp, #28]
 800859e:	4620      	mov	r0, r4
 80085a0:	f002 f8ec 	bl	800a77c <_Bfree>
 80085a4:	4631      	mov	r1, r6
 80085a6:	4620      	mov	r0, r4
 80085a8:	f002 f8e8 	bl	800a77c <_Bfree>
 80085ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085ae:	4620      	mov	r0, r4
 80085b0:	f002 f8e4 	bl	800a77c <_Bfree>
 80085b4:	4629      	mov	r1, r5
 80085b6:	4620      	mov	r0, r4
 80085b8:	f002 f8e0 	bl	800a77c <_Bfree>
 80085bc:	e5d6      	b.n	800816c <_strtod_l+0x84>
 80085be:	2300      	movs	r3, #0
 80085c0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80085c4:	4650      	mov	r0, sl
 80085c6:	4659      	mov	r1, fp
 80085c8:	4699      	mov	r9, r3
 80085ca:	f1b8 0f01 	cmp.w	r8, #1
 80085ce:	dc21      	bgt.n	8008614 <_strtod_l+0x52c>
 80085d0:	b10b      	cbz	r3, 80085d6 <_strtod_l+0x4ee>
 80085d2:	4682      	mov	sl, r0
 80085d4:	468b      	mov	fp, r1
 80085d6:	4b2e      	ldr	r3, [pc, #184]	; (8008690 <_strtod_l+0x5a8>)
 80085d8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80085dc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80085e0:	4652      	mov	r2, sl
 80085e2:	465b      	mov	r3, fp
 80085e4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80085e8:	f7f8 f836 	bl	8000658 <__aeabi_dmul>
 80085ec:	4b29      	ldr	r3, [pc, #164]	; (8008694 <_strtod_l+0x5ac>)
 80085ee:	460a      	mov	r2, r1
 80085f0:	400b      	ands	r3, r1
 80085f2:	4929      	ldr	r1, [pc, #164]	; (8008698 <_strtod_l+0x5b0>)
 80085f4:	428b      	cmp	r3, r1
 80085f6:	4682      	mov	sl, r0
 80085f8:	d8be      	bhi.n	8008578 <_strtod_l+0x490>
 80085fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80085fe:	428b      	cmp	r3, r1
 8008600:	bf86      	itte	hi
 8008602:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800869c <_strtod_l+0x5b4>
 8008606:	f04f 3aff 	movhi.w	sl, #4294967295
 800860a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800860e:	2300      	movs	r3, #0
 8008610:	9304      	str	r3, [sp, #16]
 8008612:	e081      	b.n	8008718 <_strtod_l+0x630>
 8008614:	f018 0f01 	tst.w	r8, #1
 8008618:	d007      	beq.n	800862a <_strtod_l+0x542>
 800861a:	4b1d      	ldr	r3, [pc, #116]	; (8008690 <_strtod_l+0x5a8>)
 800861c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008624:	f7f8 f818 	bl	8000658 <__aeabi_dmul>
 8008628:	2301      	movs	r3, #1
 800862a:	f109 0901 	add.w	r9, r9, #1
 800862e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008632:	e7ca      	b.n	80085ca <_strtod_l+0x4e2>
 8008634:	d0eb      	beq.n	800860e <_strtod_l+0x526>
 8008636:	f1c8 0800 	rsb	r8, r8, #0
 800863a:	f018 020f 	ands.w	r2, r8, #15
 800863e:	d00a      	beq.n	8008656 <_strtod_l+0x56e>
 8008640:	4b12      	ldr	r3, [pc, #72]	; (800868c <_strtod_l+0x5a4>)
 8008642:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008646:	4650      	mov	r0, sl
 8008648:	4659      	mov	r1, fp
 800864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864e:	f7f8 f92d 	bl	80008ac <__aeabi_ddiv>
 8008652:	4682      	mov	sl, r0
 8008654:	468b      	mov	fp, r1
 8008656:	ea5f 1828 	movs.w	r8, r8, asr #4
 800865a:	d0d8      	beq.n	800860e <_strtod_l+0x526>
 800865c:	f1b8 0f1f 	cmp.w	r8, #31
 8008660:	dd1e      	ble.n	80086a0 <_strtod_l+0x5b8>
 8008662:	2500      	movs	r5, #0
 8008664:	462e      	mov	r6, r5
 8008666:	9509      	str	r5, [sp, #36]	; 0x24
 8008668:	9507      	str	r5, [sp, #28]
 800866a:	2322      	movs	r3, #34	; 0x22
 800866c:	f04f 0a00 	mov.w	sl, #0
 8008670:	f04f 0b00 	mov.w	fp, #0
 8008674:	6023      	str	r3, [r4, #0]
 8008676:	e789      	b.n	800858c <_strtod_l+0x4a4>
 8008678:	0800e065 	.word	0x0800e065
 800867c:	0800e0a0 	.word	0x0800e0a0
 8008680:	0800e05d 	.word	0x0800e05d
 8008684:	0800e0e3 	.word	0x0800e0e3
 8008688:	0800e400 	.word	0x0800e400
 800868c:	0800e2e0 	.word	0x0800e2e0
 8008690:	0800e2b8 	.word	0x0800e2b8
 8008694:	7ff00000 	.word	0x7ff00000
 8008698:	7ca00000 	.word	0x7ca00000
 800869c:	7fefffff 	.word	0x7fefffff
 80086a0:	f018 0310 	ands.w	r3, r8, #16
 80086a4:	bf18      	it	ne
 80086a6:	236a      	movne	r3, #106	; 0x6a
 80086a8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008a60 <_strtod_l+0x978>
 80086ac:	9304      	str	r3, [sp, #16]
 80086ae:	4650      	mov	r0, sl
 80086b0:	4659      	mov	r1, fp
 80086b2:	2300      	movs	r3, #0
 80086b4:	f018 0f01 	tst.w	r8, #1
 80086b8:	d004      	beq.n	80086c4 <_strtod_l+0x5dc>
 80086ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 80086be:	f7f7 ffcb 	bl	8000658 <__aeabi_dmul>
 80086c2:	2301      	movs	r3, #1
 80086c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80086c8:	f109 0908 	add.w	r9, r9, #8
 80086cc:	d1f2      	bne.n	80086b4 <_strtod_l+0x5cc>
 80086ce:	b10b      	cbz	r3, 80086d4 <_strtod_l+0x5ec>
 80086d0:	4682      	mov	sl, r0
 80086d2:	468b      	mov	fp, r1
 80086d4:	9b04      	ldr	r3, [sp, #16]
 80086d6:	b1bb      	cbz	r3, 8008708 <_strtod_l+0x620>
 80086d8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80086dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	4659      	mov	r1, fp
 80086e4:	dd10      	ble.n	8008708 <_strtod_l+0x620>
 80086e6:	2b1f      	cmp	r3, #31
 80086e8:	f340 8128 	ble.w	800893c <_strtod_l+0x854>
 80086ec:	2b34      	cmp	r3, #52	; 0x34
 80086ee:	bfde      	ittt	le
 80086f0:	3b20      	suble	r3, #32
 80086f2:	f04f 32ff 	movle.w	r2, #4294967295
 80086f6:	fa02 f303 	lslle.w	r3, r2, r3
 80086fa:	f04f 0a00 	mov.w	sl, #0
 80086fe:	bfcc      	ite	gt
 8008700:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008704:	ea03 0b01 	andle.w	fp, r3, r1
 8008708:	2200      	movs	r2, #0
 800870a:	2300      	movs	r3, #0
 800870c:	4650      	mov	r0, sl
 800870e:	4659      	mov	r1, fp
 8008710:	f7f8 fa0a 	bl	8000b28 <__aeabi_dcmpeq>
 8008714:	2800      	cmp	r0, #0
 8008716:	d1a4      	bne.n	8008662 <_strtod_l+0x57a>
 8008718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800871e:	462b      	mov	r3, r5
 8008720:	463a      	mov	r2, r7
 8008722:	4620      	mov	r0, r4
 8008724:	f002 f896 	bl	800a854 <__s2b>
 8008728:	9009      	str	r0, [sp, #36]	; 0x24
 800872a:	2800      	cmp	r0, #0
 800872c:	f43f af24 	beq.w	8008578 <_strtod_l+0x490>
 8008730:	9b07      	ldr	r3, [sp, #28]
 8008732:	1b9e      	subs	r6, r3, r6
 8008734:	9b08      	ldr	r3, [sp, #32]
 8008736:	2b00      	cmp	r3, #0
 8008738:	bfb4      	ite	lt
 800873a:	4633      	movlt	r3, r6
 800873c:	2300      	movge	r3, #0
 800873e:	9310      	str	r3, [sp, #64]	; 0x40
 8008740:	9b08      	ldr	r3, [sp, #32]
 8008742:	2500      	movs	r5, #0
 8008744:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008748:	9318      	str	r3, [sp, #96]	; 0x60
 800874a:	462e      	mov	r6, r5
 800874c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800874e:	4620      	mov	r0, r4
 8008750:	6859      	ldr	r1, [r3, #4]
 8008752:	f001 ffd3 	bl	800a6fc <_Balloc>
 8008756:	9007      	str	r0, [sp, #28]
 8008758:	2800      	cmp	r0, #0
 800875a:	f43f af11 	beq.w	8008580 <_strtod_l+0x498>
 800875e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008760:	691a      	ldr	r2, [r3, #16]
 8008762:	3202      	adds	r2, #2
 8008764:	f103 010c 	add.w	r1, r3, #12
 8008768:	0092      	lsls	r2, r2, #2
 800876a:	300c      	adds	r0, #12
 800876c:	f001 ffb8 	bl	800a6e0 <memcpy>
 8008770:	ec4b ab10 	vmov	d0, sl, fp
 8008774:	aa20      	add	r2, sp, #128	; 0x80
 8008776:	a91f      	add	r1, sp, #124	; 0x7c
 8008778:	4620      	mov	r0, r4
 800877a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800877e:	f002 fba5 	bl	800aecc <__d2b>
 8008782:	901e      	str	r0, [sp, #120]	; 0x78
 8008784:	2800      	cmp	r0, #0
 8008786:	f43f aefb 	beq.w	8008580 <_strtod_l+0x498>
 800878a:	2101      	movs	r1, #1
 800878c:	4620      	mov	r0, r4
 800878e:	f002 f8fb 	bl	800a988 <__i2b>
 8008792:	4606      	mov	r6, r0
 8008794:	2800      	cmp	r0, #0
 8008796:	f43f aef3 	beq.w	8008580 <_strtod_l+0x498>
 800879a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800879c:	9904      	ldr	r1, [sp, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	bfab      	itete	ge
 80087a2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80087a4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80087a6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80087a8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80087ac:	bfac      	ite	ge
 80087ae:	eb03 0902 	addge.w	r9, r3, r2
 80087b2:	1ad7      	sublt	r7, r2, r3
 80087b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80087b6:	eba3 0801 	sub.w	r8, r3, r1
 80087ba:	4490      	add	r8, r2
 80087bc:	4ba3      	ldr	r3, [pc, #652]	; (8008a4c <_strtod_l+0x964>)
 80087be:	f108 38ff 	add.w	r8, r8, #4294967295
 80087c2:	4598      	cmp	r8, r3
 80087c4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80087c8:	f280 80cc 	bge.w	8008964 <_strtod_l+0x87c>
 80087cc:	eba3 0308 	sub.w	r3, r3, r8
 80087d0:	2b1f      	cmp	r3, #31
 80087d2:	eba2 0203 	sub.w	r2, r2, r3
 80087d6:	f04f 0101 	mov.w	r1, #1
 80087da:	f300 80b6 	bgt.w	800894a <_strtod_l+0x862>
 80087de:	fa01 f303 	lsl.w	r3, r1, r3
 80087e2:	9311      	str	r3, [sp, #68]	; 0x44
 80087e4:	2300      	movs	r3, #0
 80087e6:	930c      	str	r3, [sp, #48]	; 0x30
 80087e8:	eb09 0802 	add.w	r8, r9, r2
 80087ec:	9b04      	ldr	r3, [sp, #16]
 80087ee:	45c1      	cmp	r9, r8
 80087f0:	4417      	add	r7, r2
 80087f2:	441f      	add	r7, r3
 80087f4:	464b      	mov	r3, r9
 80087f6:	bfa8      	it	ge
 80087f8:	4643      	movge	r3, r8
 80087fa:	42bb      	cmp	r3, r7
 80087fc:	bfa8      	it	ge
 80087fe:	463b      	movge	r3, r7
 8008800:	2b00      	cmp	r3, #0
 8008802:	bfc2      	ittt	gt
 8008804:	eba8 0803 	subgt.w	r8, r8, r3
 8008808:	1aff      	subgt	r7, r7, r3
 800880a:	eba9 0903 	subgt.w	r9, r9, r3
 800880e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008810:	2b00      	cmp	r3, #0
 8008812:	dd17      	ble.n	8008844 <_strtod_l+0x75c>
 8008814:	4631      	mov	r1, r6
 8008816:	461a      	mov	r2, r3
 8008818:	4620      	mov	r0, r4
 800881a:	f002 f971 	bl	800ab00 <__pow5mult>
 800881e:	4606      	mov	r6, r0
 8008820:	2800      	cmp	r0, #0
 8008822:	f43f aead 	beq.w	8008580 <_strtod_l+0x498>
 8008826:	4601      	mov	r1, r0
 8008828:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800882a:	4620      	mov	r0, r4
 800882c:	f002 f8c2 	bl	800a9b4 <__multiply>
 8008830:	900f      	str	r0, [sp, #60]	; 0x3c
 8008832:	2800      	cmp	r0, #0
 8008834:	f43f aea4 	beq.w	8008580 <_strtod_l+0x498>
 8008838:	991e      	ldr	r1, [sp, #120]	; 0x78
 800883a:	4620      	mov	r0, r4
 800883c:	f001 ff9e 	bl	800a77c <_Bfree>
 8008840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008842:	931e      	str	r3, [sp, #120]	; 0x78
 8008844:	f1b8 0f00 	cmp.w	r8, #0
 8008848:	f300 8091 	bgt.w	800896e <_strtod_l+0x886>
 800884c:	9b08      	ldr	r3, [sp, #32]
 800884e:	2b00      	cmp	r3, #0
 8008850:	dd08      	ble.n	8008864 <_strtod_l+0x77c>
 8008852:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008854:	9907      	ldr	r1, [sp, #28]
 8008856:	4620      	mov	r0, r4
 8008858:	f002 f952 	bl	800ab00 <__pow5mult>
 800885c:	9007      	str	r0, [sp, #28]
 800885e:	2800      	cmp	r0, #0
 8008860:	f43f ae8e 	beq.w	8008580 <_strtod_l+0x498>
 8008864:	2f00      	cmp	r7, #0
 8008866:	dd08      	ble.n	800887a <_strtod_l+0x792>
 8008868:	9907      	ldr	r1, [sp, #28]
 800886a:	463a      	mov	r2, r7
 800886c:	4620      	mov	r0, r4
 800886e:	f002 f9a1 	bl	800abb4 <__lshift>
 8008872:	9007      	str	r0, [sp, #28]
 8008874:	2800      	cmp	r0, #0
 8008876:	f43f ae83 	beq.w	8008580 <_strtod_l+0x498>
 800887a:	f1b9 0f00 	cmp.w	r9, #0
 800887e:	dd08      	ble.n	8008892 <_strtod_l+0x7aa>
 8008880:	4631      	mov	r1, r6
 8008882:	464a      	mov	r2, r9
 8008884:	4620      	mov	r0, r4
 8008886:	f002 f995 	bl	800abb4 <__lshift>
 800888a:	4606      	mov	r6, r0
 800888c:	2800      	cmp	r0, #0
 800888e:	f43f ae77 	beq.w	8008580 <_strtod_l+0x498>
 8008892:	9a07      	ldr	r2, [sp, #28]
 8008894:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008896:	4620      	mov	r0, r4
 8008898:	f002 fa14 	bl	800acc4 <__mdiff>
 800889c:	4605      	mov	r5, r0
 800889e:	2800      	cmp	r0, #0
 80088a0:	f43f ae6e 	beq.w	8008580 <_strtod_l+0x498>
 80088a4:	68c3      	ldr	r3, [r0, #12]
 80088a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80088a8:	2300      	movs	r3, #0
 80088aa:	60c3      	str	r3, [r0, #12]
 80088ac:	4631      	mov	r1, r6
 80088ae:	f002 f9ed 	bl	800ac8c <__mcmp>
 80088b2:	2800      	cmp	r0, #0
 80088b4:	da65      	bge.n	8008982 <_strtod_l+0x89a>
 80088b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088b8:	ea53 030a 	orrs.w	r3, r3, sl
 80088bc:	f040 8087 	bne.w	80089ce <_strtod_l+0x8e6>
 80088c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f040 8082 	bne.w	80089ce <_strtod_l+0x8e6>
 80088ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80088ce:	0d1b      	lsrs	r3, r3, #20
 80088d0:	051b      	lsls	r3, r3, #20
 80088d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80088d6:	d97a      	bls.n	80089ce <_strtod_l+0x8e6>
 80088d8:	696b      	ldr	r3, [r5, #20]
 80088da:	b913      	cbnz	r3, 80088e2 <_strtod_l+0x7fa>
 80088dc:	692b      	ldr	r3, [r5, #16]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	dd75      	ble.n	80089ce <_strtod_l+0x8e6>
 80088e2:	4629      	mov	r1, r5
 80088e4:	2201      	movs	r2, #1
 80088e6:	4620      	mov	r0, r4
 80088e8:	f002 f964 	bl	800abb4 <__lshift>
 80088ec:	4631      	mov	r1, r6
 80088ee:	4605      	mov	r5, r0
 80088f0:	f002 f9cc 	bl	800ac8c <__mcmp>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	dd6a      	ble.n	80089ce <_strtod_l+0x8e6>
 80088f8:	9904      	ldr	r1, [sp, #16]
 80088fa:	4a55      	ldr	r2, [pc, #340]	; (8008a50 <_strtod_l+0x968>)
 80088fc:	465b      	mov	r3, fp
 80088fe:	2900      	cmp	r1, #0
 8008900:	f000 8085 	beq.w	8008a0e <_strtod_l+0x926>
 8008904:	ea02 010b 	and.w	r1, r2, fp
 8008908:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800890c:	dc7f      	bgt.n	8008a0e <_strtod_l+0x926>
 800890e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008912:	f77f aeaa 	ble.w	800866a <_strtod_l+0x582>
 8008916:	4a4f      	ldr	r2, [pc, #316]	; (8008a54 <_strtod_l+0x96c>)
 8008918:	2300      	movs	r3, #0
 800891a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800891e:	4650      	mov	r0, sl
 8008920:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008924:	4659      	mov	r1, fp
 8008926:	f7f7 fe97 	bl	8000658 <__aeabi_dmul>
 800892a:	460b      	mov	r3, r1
 800892c:	4303      	orrs	r3, r0
 800892e:	bf08      	it	eq
 8008930:	2322      	moveq	r3, #34	; 0x22
 8008932:	4682      	mov	sl, r0
 8008934:	468b      	mov	fp, r1
 8008936:	bf08      	it	eq
 8008938:	6023      	streq	r3, [r4, #0]
 800893a:	e62b      	b.n	8008594 <_strtod_l+0x4ac>
 800893c:	f04f 32ff 	mov.w	r2, #4294967295
 8008940:	fa02 f303 	lsl.w	r3, r2, r3
 8008944:	ea03 0a0a 	and.w	sl, r3, sl
 8008948:	e6de      	b.n	8008708 <_strtod_l+0x620>
 800894a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800894e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008952:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008956:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800895a:	fa01 f308 	lsl.w	r3, r1, r8
 800895e:	930c      	str	r3, [sp, #48]	; 0x30
 8008960:	9111      	str	r1, [sp, #68]	; 0x44
 8008962:	e741      	b.n	80087e8 <_strtod_l+0x700>
 8008964:	2300      	movs	r3, #0
 8008966:	930c      	str	r3, [sp, #48]	; 0x30
 8008968:	2301      	movs	r3, #1
 800896a:	9311      	str	r3, [sp, #68]	; 0x44
 800896c:	e73c      	b.n	80087e8 <_strtod_l+0x700>
 800896e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008970:	4642      	mov	r2, r8
 8008972:	4620      	mov	r0, r4
 8008974:	f002 f91e 	bl	800abb4 <__lshift>
 8008978:	901e      	str	r0, [sp, #120]	; 0x78
 800897a:	2800      	cmp	r0, #0
 800897c:	f47f af66 	bne.w	800884c <_strtod_l+0x764>
 8008980:	e5fe      	b.n	8008580 <_strtod_l+0x498>
 8008982:	465f      	mov	r7, fp
 8008984:	d16e      	bne.n	8008a64 <_strtod_l+0x97c>
 8008986:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008988:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800898c:	b342      	cbz	r2, 80089e0 <_strtod_l+0x8f8>
 800898e:	4a32      	ldr	r2, [pc, #200]	; (8008a58 <_strtod_l+0x970>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d128      	bne.n	80089e6 <_strtod_l+0x8fe>
 8008994:	9b04      	ldr	r3, [sp, #16]
 8008996:	4650      	mov	r0, sl
 8008998:	b1eb      	cbz	r3, 80089d6 <_strtod_l+0x8ee>
 800899a:	4a2d      	ldr	r2, [pc, #180]	; (8008a50 <_strtod_l+0x968>)
 800899c:	403a      	ands	r2, r7
 800899e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80089a2:	f04f 31ff 	mov.w	r1, #4294967295
 80089a6:	d819      	bhi.n	80089dc <_strtod_l+0x8f4>
 80089a8:	0d12      	lsrs	r2, r2, #20
 80089aa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80089ae:	fa01 f303 	lsl.w	r3, r1, r3
 80089b2:	4298      	cmp	r0, r3
 80089b4:	d117      	bne.n	80089e6 <_strtod_l+0x8fe>
 80089b6:	4b29      	ldr	r3, [pc, #164]	; (8008a5c <_strtod_l+0x974>)
 80089b8:	429f      	cmp	r7, r3
 80089ba:	d102      	bne.n	80089c2 <_strtod_l+0x8da>
 80089bc:	3001      	adds	r0, #1
 80089be:	f43f addf 	beq.w	8008580 <_strtod_l+0x498>
 80089c2:	4b23      	ldr	r3, [pc, #140]	; (8008a50 <_strtod_l+0x968>)
 80089c4:	403b      	ands	r3, r7
 80089c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80089ca:	f04f 0a00 	mov.w	sl, #0
 80089ce:	9b04      	ldr	r3, [sp, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1a0      	bne.n	8008916 <_strtod_l+0x82e>
 80089d4:	e5de      	b.n	8008594 <_strtod_l+0x4ac>
 80089d6:	f04f 33ff 	mov.w	r3, #4294967295
 80089da:	e7ea      	b.n	80089b2 <_strtod_l+0x8ca>
 80089dc:	460b      	mov	r3, r1
 80089de:	e7e8      	b.n	80089b2 <_strtod_l+0x8ca>
 80089e0:	ea53 030a 	orrs.w	r3, r3, sl
 80089e4:	d088      	beq.n	80088f8 <_strtod_l+0x810>
 80089e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089e8:	b1db      	cbz	r3, 8008a22 <_strtod_l+0x93a>
 80089ea:	423b      	tst	r3, r7
 80089ec:	d0ef      	beq.n	80089ce <_strtod_l+0x8e6>
 80089ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089f0:	9a04      	ldr	r2, [sp, #16]
 80089f2:	4650      	mov	r0, sl
 80089f4:	4659      	mov	r1, fp
 80089f6:	b1c3      	cbz	r3, 8008a2a <_strtod_l+0x942>
 80089f8:	f7ff fb58 	bl	80080ac <sulp>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a04:	f7f7 fc72 	bl	80002ec <__adddf3>
 8008a08:	4682      	mov	sl, r0
 8008a0a:	468b      	mov	fp, r1
 8008a0c:	e7df      	b.n	80089ce <_strtod_l+0x8e6>
 8008a0e:	4013      	ands	r3, r2
 8008a10:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008a14:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008a18:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008a1c:	f04f 3aff 	mov.w	sl, #4294967295
 8008a20:	e7d5      	b.n	80089ce <_strtod_l+0x8e6>
 8008a22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a24:	ea13 0f0a 	tst.w	r3, sl
 8008a28:	e7e0      	b.n	80089ec <_strtod_l+0x904>
 8008a2a:	f7ff fb3f 	bl	80080ac <sulp>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	460b      	mov	r3, r1
 8008a32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a36:	f7f7 fc57 	bl	80002e8 <__aeabi_dsub>
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	4682      	mov	sl, r0
 8008a40:	468b      	mov	fp, r1
 8008a42:	f7f8 f871 	bl	8000b28 <__aeabi_dcmpeq>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d0c1      	beq.n	80089ce <_strtod_l+0x8e6>
 8008a4a:	e60e      	b.n	800866a <_strtod_l+0x582>
 8008a4c:	fffffc02 	.word	0xfffffc02
 8008a50:	7ff00000 	.word	0x7ff00000
 8008a54:	39500000 	.word	0x39500000
 8008a58:	000fffff 	.word	0x000fffff
 8008a5c:	7fefffff 	.word	0x7fefffff
 8008a60:	0800e0b8 	.word	0x0800e0b8
 8008a64:	4631      	mov	r1, r6
 8008a66:	4628      	mov	r0, r5
 8008a68:	f002 fa8c 	bl	800af84 <__ratio>
 8008a6c:	ec59 8b10 	vmov	r8, r9, d0
 8008a70:	ee10 0a10 	vmov	r0, s0
 8008a74:	2200      	movs	r2, #0
 8008a76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	f7f8 f868 	bl	8000b50 <__aeabi_dcmple>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d07c      	beq.n	8008b7e <_strtod_l+0xa96>
 8008a84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d04c      	beq.n	8008b24 <_strtod_l+0xa3c>
 8008a8a:	4b95      	ldr	r3, [pc, #596]	; (8008ce0 <_strtod_l+0xbf8>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008a92:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008ce0 <_strtod_l+0xbf8>
 8008a96:	f04f 0800 	mov.w	r8, #0
 8008a9a:	4b92      	ldr	r3, [pc, #584]	; (8008ce4 <_strtod_l+0xbfc>)
 8008a9c:	403b      	ands	r3, r7
 8008a9e:	9311      	str	r3, [sp, #68]	; 0x44
 8008aa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008aa2:	4b91      	ldr	r3, [pc, #580]	; (8008ce8 <_strtod_l+0xc00>)
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	f040 80b2 	bne.w	8008c0e <_strtod_l+0xb26>
 8008aaa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008aae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ab2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008ab6:	ec4b ab10 	vmov	d0, sl, fp
 8008aba:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008abe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008ac2:	f002 f987 	bl	800add4 <__ulp>
 8008ac6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008aca:	ec53 2b10 	vmov	r2, r3, d0
 8008ace:	f7f7 fdc3 	bl	8000658 <__aeabi_dmul>
 8008ad2:	4652      	mov	r2, sl
 8008ad4:	465b      	mov	r3, fp
 8008ad6:	f7f7 fc09 	bl	80002ec <__adddf3>
 8008ada:	460b      	mov	r3, r1
 8008adc:	4981      	ldr	r1, [pc, #516]	; (8008ce4 <_strtod_l+0xbfc>)
 8008ade:	4a83      	ldr	r2, [pc, #524]	; (8008cec <_strtod_l+0xc04>)
 8008ae0:	4019      	ands	r1, r3
 8008ae2:	4291      	cmp	r1, r2
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	d95e      	bls.n	8008ba6 <_strtod_l+0xabe>
 8008ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aea:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d103      	bne.n	8008afa <_strtod_l+0xa12>
 8008af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008af4:	3301      	adds	r3, #1
 8008af6:	f43f ad43 	beq.w	8008580 <_strtod_l+0x498>
 8008afa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008cf8 <_strtod_l+0xc10>
 8008afe:	f04f 3aff 	mov.w	sl, #4294967295
 8008b02:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008b04:	4620      	mov	r0, r4
 8008b06:	f001 fe39 	bl	800a77c <_Bfree>
 8008b0a:	9907      	ldr	r1, [sp, #28]
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f001 fe35 	bl	800a77c <_Bfree>
 8008b12:	4631      	mov	r1, r6
 8008b14:	4620      	mov	r0, r4
 8008b16:	f001 fe31 	bl	800a77c <_Bfree>
 8008b1a:	4629      	mov	r1, r5
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f001 fe2d 	bl	800a77c <_Bfree>
 8008b22:	e613      	b.n	800874c <_strtod_l+0x664>
 8008b24:	f1ba 0f00 	cmp.w	sl, #0
 8008b28:	d11b      	bne.n	8008b62 <_strtod_l+0xa7a>
 8008b2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b2e:	b9f3      	cbnz	r3, 8008b6e <_strtod_l+0xa86>
 8008b30:	4b6b      	ldr	r3, [pc, #428]	; (8008ce0 <_strtod_l+0xbf8>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	4640      	mov	r0, r8
 8008b36:	4649      	mov	r1, r9
 8008b38:	f7f8 f800 	bl	8000b3c <__aeabi_dcmplt>
 8008b3c:	b9d0      	cbnz	r0, 8008b74 <_strtod_l+0xa8c>
 8008b3e:	4640      	mov	r0, r8
 8008b40:	4649      	mov	r1, r9
 8008b42:	4b6b      	ldr	r3, [pc, #428]	; (8008cf0 <_strtod_l+0xc08>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	f7f7 fd87 	bl	8000658 <__aeabi_dmul>
 8008b4a:	4680      	mov	r8, r0
 8008b4c:	4689      	mov	r9, r1
 8008b4e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008b52:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008b56:	931b      	str	r3, [sp, #108]	; 0x6c
 8008b58:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008b5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008b60:	e79b      	b.n	8008a9a <_strtod_l+0x9b2>
 8008b62:	f1ba 0f01 	cmp.w	sl, #1
 8008b66:	d102      	bne.n	8008b6e <_strtod_l+0xa86>
 8008b68:	2f00      	cmp	r7, #0
 8008b6a:	f43f ad7e 	beq.w	800866a <_strtod_l+0x582>
 8008b6e:	4b61      	ldr	r3, [pc, #388]	; (8008cf4 <_strtod_l+0xc0c>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	e78c      	b.n	8008a8e <_strtod_l+0x9a6>
 8008b74:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008cf0 <_strtod_l+0xc08>
 8008b78:	f04f 0800 	mov.w	r8, #0
 8008b7c:	e7e7      	b.n	8008b4e <_strtod_l+0xa66>
 8008b7e:	4b5c      	ldr	r3, [pc, #368]	; (8008cf0 <_strtod_l+0xc08>)
 8008b80:	4640      	mov	r0, r8
 8008b82:	4649      	mov	r1, r9
 8008b84:	2200      	movs	r2, #0
 8008b86:	f7f7 fd67 	bl	8000658 <__aeabi_dmul>
 8008b8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b8c:	4680      	mov	r8, r0
 8008b8e:	4689      	mov	r9, r1
 8008b90:	b933      	cbnz	r3, 8008ba0 <_strtod_l+0xab8>
 8008b92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b96:	9012      	str	r0, [sp, #72]	; 0x48
 8008b98:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b9a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008b9e:	e7dd      	b.n	8008b5c <_strtod_l+0xa74>
 8008ba0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008ba4:	e7f9      	b.n	8008b9a <_strtod_l+0xab2>
 8008ba6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008baa:	9b04      	ldr	r3, [sp, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1a8      	bne.n	8008b02 <_strtod_l+0xa1a>
 8008bb0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008bb6:	0d1b      	lsrs	r3, r3, #20
 8008bb8:	051b      	lsls	r3, r3, #20
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d1a1      	bne.n	8008b02 <_strtod_l+0xa1a>
 8008bbe:	4640      	mov	r0, r8
 8008bc0:	4649      	mov	r1, r9
 8008bc2:	f7f8 f8a9 	bl	8000d18 <__aeabi_d2lz>
 8008bc6:	f7f7 fd19 	bl	80005fc <__aeabi_l2d>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4640      	mov	r0, r8
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	f7f7 fb89 	bl	80002e8 <__aeabi_dsub>
 8008bd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bdc:	ea43 030a 	orr.w	r3, r3, sl
 8008be0:	4313      	orrs	r3, r2
 8008be2:	4680      	mov	r8, r0
 8008be4:	4689      	mov	r9, r1
 8008be6:	d053      	beq.n	8008c90 <_strtod_l+0xba8>
 8008be8:	a335      	add	r3, pc, #212	; (adr r3, 8008cc0 <_strtod_l+0xbd8>)
 8008bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bee:	f7f7 ffa5 	bl	8000b3c <__aeabi_dcmplt>
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	f47f acce 	bne.w	8008594 <_strtod_l+0x4ac>
 8008bf8:	a333      	add	r3, pc, #204	; (adr r3, 8008cc8 <_strtod_l+0xbe0>)
 8008bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfe:	4640      	mov	r0, r8
 8008c00:	4649      	mov	r1, r9
 8008c02:	f7f7 ffb9 	bl	8000b78 <__aeabi_dcmpgt>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	f43f af7b 	beq.w	8008b02 <_strtod_l+0xa1a>
 8008c0c:	e4c2      	b.n	8008594 <_strtod_l+0x4ac>
 8008c0e:	9b04      	ldr	r3, [sp, #16]
 8008c10:	b333      	cbz	r3, 8008c60 <_strtod_l+0xb78>
 8008c12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c14:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c18:	d822      	bhi.n	8008c60 <_strtod_l+0xb78>
 8008c1a:	a32d      	add	r3, pc, #180	; (adr r3, 8008cd0 <_strtod_l+0xbe8>)
 8008c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c20:	4640      	mov	r0, r8
 8008c22:	4649      	mov	r1, r9
 8008c24:	f7f7 ff94 	bl	8000b50 <__aeabi_dcmple>
 8008c28:	b1a0      	cbz	r0, 8008c54 <_strtod_l+0xb6c>
 8008c2a:	4649      	mov	r1, r9
 8008c2c:	4640      	mov	r0, r8
 8008c2e:	f7f7 ffeb 	bl	8000c08 <__aeabi_d2uiz>
 8008c32:	2801      	cmp	r0, #1
 8008c34:	bf38      	it	cc
 8008c36:	2001      	movcc	r0, #1
 8008c38:	f7f7 fc94 	bl	8000564 <__aeabi_ui2d>
 8008c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c3e:	4680      	mov	r8, r0
 8008c40:	4689      	mov	r9, r1
 8008c42:	bb13      	cbnz	r3, 8008c8a <_strtod_l+0xba2>
 8008c44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c48:	9014      	str	r0, [sp, #80]	; 0x50
 8008c4a:	9315      	str	r3, [sp, #84]	; 0x54
 8008c4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008c50:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008c54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c56:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008c58:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008c5c:	1a9b      	subs	r3, r3, r2
 8008c5e:	930d      	str	r3, [sp, #52]	; 0x34
 8008c60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c64:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008c68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008c6c:	f002 f8b2 	bl	800add4 <__ulp>
 8008c70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c74:	ec53 2b10 	vmov	r2, r3, d0
 8008c78:	f7f7 fcee 	bl	8000658 <__aeabi_dmul>
 8008c7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c80:	f7f7 fb34 	bl	80002ec <__adddf3>
 8008c84:	4682      	mov	sl, r0
 8008c86:	468b      	mov	fp, r1
 8008c88:	e78f      	b.n	8008baa <_strtod_l+0xac2>
 8008c8a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8008c8e:	e7dd      	b.n	8008c4c <_strtod_l+0xb64>
 8008c90:	a311      	add	r3, pc, #68	; (adr r3, 8008cd8 <_strtod_l+0xbf0>)
 8008c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c96:	f7f7 ff51 	bl	8000b3c <__aeabi_dcmplt>
 8008c9a:	e7b4      	b.n	8008c06 <_strtod_l+0xb1e>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	930e      	str	r3, [sp, #56]	; 0x38
 8008ca0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008ca2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ca4:	6013      	str	r3, [r2, #0]
 8008ca6:	f7ff ba65 	b.w	8008174 <_strtod_l+0x8c>
 8008caa:	2b65      	cmp	r3, #101	; 0x65
 8008cac:	f43f ab5d 	beq.w	800836a <_strtod_l+0x282>
 8008cb0:	2b45      	cmp	r3, #69	; 0x45
 8008cb2:	f43f ab5a 	beq.w	800836a <_strtod_l+0x282>
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f7ff bb92 	b.w	80083e0 <_strtod_l+0x2f8>
 8008cbc:	f3af 8000 	nop.w
 8008cc0:	94a03595 	.word	0x94a03595
 8008cc4:	3fdfffff 	.word	0x3fdfffff
 8008cc8:	35afe535 	.word	0x35afe535
 8008ccc:	3fe00000 	.word	0x3fe00000
 8008cd0:	ffc00000 	.word	0xffc00000
 8008cd4:	41dfffff 	.word	0x41dfffff
 8008cd8:	94a03595 	.word	0x94a03595
 8008cdc:	3fcfffff 	.word	0x3fcfffff
 8008ce0:	3ff00000 	.word	0x3ff00000
 8008ce4:	7ff00000 	.word	0x7ff00000
 8008ce8:	7fe00000 	.word	0x7fe00000
 8008cec:	7c9fffff 	.word	0x7c9fffff
 8008cf0:	3fe00000 	.word	0x3fe00000
 8008cf4:	bff00000 	.word	0xbff00000
 8008cf8:	7fefffff 	.word	0x7fefffff

08008cfc <strtod>:
 8008cfc:	460a      	mov	r2, r1
 8008cfe:	4601      	mov	r1, r0
 8008d00:	4802      	ldr	r0, [pc, #8]	; (8008d0c <strtod+0x10>)
 8008d02:	4b03      	ldr	r3, [pc, #12]	; (8008d10 <strtod+0x14>)
 8008d04:	6800      	ldr	r0, [r0, #0]
 8008d06:	f7ff b9ef 	b.w	80080e8 <_strtod_l>
 8008d0a:	bf00      	nop
 8008d0c:	20000040 	.word	0x20000040
 8008d10:	200000a8 	.word	0x200000a8

08008d14 <__swbuf_r>:
 8008d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d16:	460e      	mov	r6, r1
 8008d18:	4614      	mov	r4, r2
 8008d1a:	4605      	mov	r5, r0
 8008d1c:	b118      	cbz	r0, 8008d26 <__swbuf_r+0x12>
 8008d1e:	6983      	ldr	r3, [r0, #24]
 8008d20:	b90b      	cbnz	r3, 8008d26 <__swbuf_r+0x12>
 8008d22:	f001 f84b 	bl	8009dbc <__sinit>
 8008d26:	4b21      	ldr	r3, [pc, #132]	; (8008dac <__swbuf_r+0x98>)
 8008d28:	429c      	cmp	r4, r3
 8008d2a:	d12b      	bne.n	8008d84 <__swbuf_r+0x70>
 8008d2c:	686c      	ldr	r4, [r5, #4]
 8008d2e:	69a3      	ldr	r3, [r4, #24]
 8008d30:	60a3      	str	r3, [r4, #8]
 8008d32:	89a3      	ldrh	r3, [r4, #12]
 8008d34:	071a      	lsls	r2, r3, #28
 8008d36:	d52f      	bpl.n	8008d98 <__swbuf_r+0x84>
 8008d38:	6923      	ldr	r3, [r4, #16]
 8008d3a:	b36b      	cbz	r3, 8008d98 <__swbuf_r+0x84>
 8008d3c:	6923      	ldr	r3, [r4, #16]
 8008d3e:	6820      	ldr	r0, [r4, #0]
 8008d40:	1ac0      	subs	r0, r0, r3
 8008d42:	6963      	ldr	r3, [r4, #20]
 8008d44:	b2f6      	uxtb	r6, r6
 8008d46:	4283      	cmp	r3, r0
 8008d48:	4637      	mov	r7, r6
 8008d4a:	dc04      	bgt.n	8008d56 <__swbuf_r+0x42>
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	4628      	mov	r0, r5
 8008d50:	f000 ffa0 	bl	8009c94 <_fflush_r>
 8008d54:	bb30      	cbnz	r0, 8008da4 <__swbuf_r+0x90>
 8008d56:	68a3      	ldr	r3, [r4, #8]
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	60a3      	str	r3, [r4, #8]
 8008d5c:	6823      	ldr	r3, [r4, #0]
 8008d5e:	1c5a      	adds	r2, r3, #1
 8008d60:	6022      	str	r2, [r4, #0]
 8008d62:	701e      	strb	r6, [r3, #0]
 8008d64:	6963      	ldr	r3, [r4, #20]
 8008d66:	3001      	adds	r0, #1
 8008d68:	4283      	cmp	r3, r0
 8008d6a:	d004      	beq.n	8008d76 <__swbuf_r+0x62>
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	07db      	lsls	r3, r3, #31
 8008d70:	d506      	bpl.n	8008d80 <__swbuf_r+0x6c>
 8008d72:	2e0a      	cmp	r6, #10
 8008d74:	d104      	bne.n	8008d80 <__swbuf_r+0x6c>
 8008d76:	4621      	mov	r1, r4
 8008d78:	4628      	mov	r0, r5
 8008d7a:	f000 ff8b 	bl	8009c94 <_fflush_r>
 8008d7e:	b988      	cbnz	r0, 8008da4 <__swbuf_r+0x90>
 8008d80:	4638      	mov	r0, r7
 8008d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d84:	4b0a      	ldr	r3, [pc, #40]	; (8008db0 <__swbuf_r+0x9c>)
 8008d86:	429c      	cmp	r4, r3
 8008d88:	d101      	bne.n	8008d8e <__swbuf_r+0x7a>
 8008d8a:	68ac      	ldr	r4, [r5, #8]
 8008d8c:	e7cf      	b.n	8008d2e <__swbuf_r+0x1a>
 8008d8e:	4b09      	ldr	r3, [pc, #36]	; (8008db4 <__swbuf_r+0xa0>)
 8008d90:	429c      	cmp	r4, r3
 8008d92:	bf08      	it	eq
 8008d94:	68ec      	ldreq	r4, [r5, #12]
 8008d96:	e7ca      	b.n	8008d2e <__swbuf_r+0x1a>
 8008d98:	4621      	mov	r1, r4
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f000 f80c 	bl	8008db8 <__swsetup_r>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d0cb      	beq.n	8008d3c <__swbuf_r+0x28>
 8008da4:	f04f 37ff 	mov.w	r7, #4294967295
 8008da8:	e7ea      	b.n	8008d80 <__swbuf_r+0x6c>
 8008daa:	bf00      	nop
 8008dac:	0800e194 	.word	0x0800e194
 8008db0:	0800e1b4 	.word	0x0800e1b4
 8008db4:	0800e174 	.word	0x0800e174

08008db8 <__swsetup_r>:
 8008db8:	4b32      	ldr	r3, [pc, #200]	; (8008e84 <__swsetup_r+0xcc>)
 8008dba:	b570      	push	{r4, r5, r6, lr}
 8008dbc:	681d      	ldr	r5, [r3, #0]
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	460c      	mov	r4, r1
 8008dc2:	b125      	cbz	r5, 8008dce <__swsetup_r+0x16>
 8008dc4:	69ab      	ldr	r3, [r5, #24]
 8008dc6:	b913      	cbnz	r3, 8008dce <__swsetup_r+0x16>
 8008dc8:	4628      	mov	r0, r5
 8008dca:	f000 fff7 	bl	8009dbc <__sinit>
 8008dce:	4b2e      	ldr	r3, [pc, #184]	; (8008e88 <__swsetup_r+0xd0>)
 8008dd0:	429c      	cmp	r4, r3
 8008dd2:	d10f      	bne.n	8008df4 <__swsetup_r+0x3c>
 8008dd4:	686c      	ldr	r4, [r5, #4]
 8008dd6:	89a3      	ldrh	r3, [r4, #12]
 8008dd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ddc:	0719      	lsls	r1, r3, #28
 8008dde:	d42c      	bmi.n	8008e3a <__swsetup_r+0x82>
 8008de0:	06dd      	lsls	r5, r3, #27
 8008de2:	d411      	bmi.n	8008e08 <__swsetup_r+0x50>
 8008de4:	2309      	movs	r3, #9
 8008de6:	6033      	str	r3, [r6, #0]
 8008de8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008dec:	81a3      	strh	r3, [r4, #12]
 8008dee:	f04f 30ff 	mov.w	r0, #4294967295
 8008df2:	e03e      	b.n	8008e72 <__swsetup_r+0xba>
 8008df4:	4b25      	ldr	r3, [pc, #148]	; (8008e8c <__swsetup_r+0xd4>)
 8008df6:	429c      	cmp	r4, r3
 8008df8:	d101      	bne.n	8008dfe <__swsetup_r+0x46>
 8008dfa:	68ac      	ldr	r4, [r5, #8]
 8008dfc:	e7eb      	b.n	8008dd6 <__swsetup_r+0x1e>
 8008dfe:	4b24      	ldr	r3, [pc, #144]	; (8008e90 <__swsetup_r+0xd8>)
 8008e00:	429c      	cmp	r4, r3
 8008e02:	bf08      	it	eq
 8008e04:	68ec      	ldreq	r4, [r5, #12]
 8008e06:	e7e6      	b.n	8008dd6 <__swsetup_r+0x1e>
 8008e08:	0758      	lsls	r0, r3, #29
 8008e0a:	d512      	bpl.n	8008e32 <__swsetup_r+0x7a>
 8008e0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e0e:	b141      	cbz	r1, 8008e22 <__swsetup_r+0x6a>
 8008e10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e14:	4299      	cmp	r1, r3
 8008e16:	d002      	beq.n	8008e1e <__swsetup_r+0x66>
 8008e18:	4630      	mov	r0, r6
 8008e1a:	f002 f939 	bl	800b090 <_free_r>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	6363      	str	r3, [r4, #52]	; 0x34
 8008e22:	89a3      	ldrh	r3, [r4, #12]
 8008e24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e28:	81a3      	strh	r3, [r4, #12]
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	6063      	str	r3, [r4, #4]
 8008e2e:	6923      	ldr	r3, [r4, #16]
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	89a3      	ldrh	r3, [r4, #12]
 8008e34:	f043 0308 	orr.w	r3, r3, #8
 8008e38:	81a3      	strh	r3, [r4, #12]
 8008e3a:	6923      	ldr	r3, [r4, #16]
 8008e3c:	b94b      	cbnz	r3, 8008e52 <__swsetup_r+0x9a>
 8008e3e:	89a3      	ldrh	r3, [r4, #12]
 8008e40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e48:	d003      	beq.n	8008e52 <__swsetup_r+0x9a>
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	4630      	mov	r0, r6
 8008e4e:	f001 fbed 	bl	800a62c <__smakebuf_r>
 8008e52:	89a0      	ldrh	r0, [r4, #12]
 8008e54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e58:	f010 0301 	ands.w	r3, r0, #1
 8008e5c:	d00a      	beq.n	8008e74 <__swsetup_r+0xbc>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60a3      	str	r3, [r4, #8]
 8008e62:	6963      	ldr	r3, [r4, #20]
 8008e64:	425b      	negs	r3, r3
 8008e66:	61a3      	str	r3, [r4, #24]
 8008e68:	6923      	ldr	r3, [r4, #16]
 8008e6a:	b943      	cbnz	r3, 8008e7e <__swsetup_r+0xc6>
 8008e6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e70:	d1ba      	bne.n	8008de8 <__swsetup_r+0x30>
 8008e72:	bd70      	pop	{r4, r5, r6, pc}
 8008e74:	0781      	lsls	r1, r0, #30
 8008e76:	bf58      	it	pl
 8008e78:	6963      	ldrpl	r3, [r4, #20]
 8008e7a:	60a3      	str	r3, [r4, #8]
 8008e7c:	e7f4      	b.n	8008e68 <__swsetup_r+0xb0>
 8008e7e:	2000      	movs	r0, #0
 8008e80:	e7f7      	b.n	8008e72 <__swsetup_r+0xba>
 8008e82:	bf00      	nop
 8008e84:	20000040 	.word	0x20000040
 8008e88:	0800e194 	.word	0x0800e194
 8008e8c:	0800e1b4 	.word	0x0800e1b4
 8008e90:	0800e174 	.word	0x0800e174

08008e94 <quorem>:
 8008e94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e98:	6903      	ldr	r3, [r0, #16]
 8008e9a:	690c      	ldr	r4, [r1, #16]
 8008e9c:	42a3      	cmp	r3, r4
 8008e9e:	4607      	mov	r7, r0
 8008ea0:	f2c0 8081 	blt.w	8008fa6 <quorem+0x112>
 8008ea4:	3c01      	subs	r4, #1
 8008ea6:	f101 0814 	add.w	r8, r1, #20
 8008eaa:	f100 0514 	add.w	r5, r0, #20
 8008eae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008eb2:	9301      	str	r3, [sp, #4]
 8008eb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008eb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ec4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ec8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ecc:	d331      	bcc.n	8008f32 <quorem+0x9e>
 8008ece:	f04f 0e00 	mov.w	lr, #0
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	46ac      	mov	ip, r5
 8008ed6:	46f2      	mov	sl, lr
 8008ed8:	f850 2b04 	ldr.w	r2, [r0], #4
 8008edc:	b293      	uxth	r3, r2
 8008ede:	fb06 e303 	mla	r3, r6, r3, lr
 8008ee2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	ebaa 0303 	sub.w	r3, sl, r3
 8008eec:	0c12      	lsrs	r2, r2, #16
 8008eee:	f8dc a000 	ldr.w	sl, [ip]
 8008ef2:	fb06 e202 	mla	r2, r6, r2, lr
 8008ef6:	fa13 f38a 	uxtah	r3, r3, sl
 8008efa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008efe:	fa1f fa82 	uxth.w	sl, r2
 8008f02:	f8dc 2000 	ldr.w	r2, [ip]
 8008f06:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008f0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f14:	4581      	cmp	r9, r0
 8008f16:	f84c 3b04 	str.w	r3, [ip], #4
 8008f1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f1e:	d2db      	bcs.n	8008ed8 <quorem+0x44>
 8008f20:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f24:	b92b      	cbnz	r3, 8008f32 <quorem+0x9e>
 8008f26:	9b01      	ldr	r3, [sp, #4]
 8008f28:	3b04      	subs	r3, #4
 8008f2a:	429d      	cmp	r5, r3
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	d32e      	bcc.n	8008f8e <quorem+0xfa>
 8008f30:	613c      	str	r4, [r7, #16]
 8008f32:	4638      	mov	r0, r7
 8008f34:	f001 feaa 	bl	800ac8c <__mcmp>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	db24      	blt.n	8008f86 <quorem+0xf2>
 8008f3c:	3601      	adds	r6, #1
 8008f3e:	4628      	mov	r0, r5
 8008f40:	f04f 0c00 	mov.w	ip, #0
 8008f44:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f48:	f8d0 e000 	ldr.w	lr, [r0]
 8008f4c:	b293      	uxth	r3, r2
 8008f4e:	ebac 0303 	sub.w	r3, ip, r3
 8008f52:	0c12      	lsrs	r2, r2, #16
 8008f54:	fa13 f38e 	uxtah	r3, r3, lr
 8008f58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f66:	45c1      	cmp	r9, r8
 8008f68:	f840 3b04 	str.w	r3, [r0], #4
 8008f6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f70:	d2e8      	bcs.n	8008f44 <quorem+0xb0>
 8008f72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f7a:	b922      	cbnz	r2, 8008f86 <quorem+0xf2>
 8008f7c:	3b04      	subs	r3, #4
 8008f7e:	429d      	cmp	r5, r3
 8008f80:	461a      	mov	r2, r3
 8008f82:	d30a      	bcc.n	8008f9a <quorem+0x106>
 8008f84:	613c      	str	r4, [r7, #16]
 8008f86:	4630      	mov	r0, r6
 8008f88:	b003      	add	sp, #12
 8008f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8e:	6812      	ldr	r2, [r2, #0]
 8008f90:	3b04      	subs	r3, #4
 8008f92:	2a00      	cmp	r2, #0
 8008f94:	d1cc      	bne.n	8008f30 <quorem+0x9c>
 8008f96:	3c01      	subs	r4, #1
 8008f98:	e7c7      	b.n	8008f2a <quorem+0x96>
 8008f9a:	6812      	ldr	r2, [r2, #0]
 8008f9c:	3b04      	subs	r3, #4
 8008f9e:	2a00      	cmp	r2, #0
 8008fa0:	d1f0      	bne.n	8008f84 <quorem+0xf0>
 8008fa2:	3c01      	subs	r4, #1
 8008fa4:	e7eb      	b.n	8008f7e <quorem+0xea>
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	e7ee      	b.n	8008f88 <quorem+0xf4>
 8008faa:	0000      	movs	r0, r0
 8008fac:	0000      	movs	r0, r0
	...

08008fb0 <_dtoa_r>:
 8008fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb4:	ed2d 8b02 	vpush	{d8}
 8008fb8:	ec57 6b10 	vmov	r6, r7, d0
 8008fbc:	b095      	sub	sp, #84	; 0x54
 8008fbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008fc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008fc4:	9105      	str	r1, [sp, #20]
 8008fc6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008fca:	4604      	mov	r4, r0
 8008fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8008fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fd0:	b975      	cbnz	r5, 8008ff0 <_dtoa_r+0x40>
 8008fd2:	2010      	movs	r0, #16
 8008fd4:	f001 fb6a 	bl	800a6ac <malloc>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	6260      	str	r0, [r4, #36]	; 0x24
 8008fdc:	b920      	cbnz	r0, 8008fe8 <_dtoa_r+0x38>
 8008fde:	4bb2      	ldr	r3, [pc, #712]	; (80092a8 <_dtoa_r+0x2f8>)
 8008fe0:	21ea      	movs	r1, #234	; 0xea
 8008fe2:	48b2      	ldr	r0, [pc, #712]	; (80092ac <_dtoa_r+0x2fc>)
 8008fe4:	f002 fae4 	bl	800b5b0 <__assert_func>
 8008fe8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008fec:	6005      	str	r5, [r0, #0]
 8008fee:	60c5      	str	r5, [r0, #12]
 8008ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ff2:	6819      	ldr	r1, [r3, #0]
 8008ff4:	b151      	cbz	r1, 800900c <_dtoa_r+0x5c>
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	604a      	str	r2, [r1, #4]
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	4093      	lsls	r3, r2
 8008ffe:	608b      	str	r3, [r1, #8]
 8009000:	4620      	mov	r0, r4
 8009002:	f001 fbbb 	bl	800a77c <_Bfree>
 8009006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009008:	2200      	movs	r2, #0
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	1e3b      	subs	r3, r7, #0
 800900e:	bfb9      	ittee	lt
 8009010:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009014:	9303      	strlt	r3, [sp, #12]
 8009016:	2300      	movge	r3, #0
 8009018:	f8c8 3000 	strge.w	r3, [r8]
 800901c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009020:	4ba3      	ldr	r3, [pc, #652]	; (80092b0 <_dtoa_r+0x300>)
 8009022:	bfbc      	itt	lt
 8009024:	2201      	movlt	r2, #1
 8009026:	f8c8 2000 	strlt.w	r2, [r8]
 800902a:	ea33 0309 	bics.w	r3, r3, r9
 800902e:	d11b      	bne.n	8009068 <_dtoa_r+0xb8>
 8009030:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009032:	f242 730f 	movw	r3, #9999	; 0x270f
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800903c:	4333      	orrs	r3, r6
 800903e:	f000 857a 	beq.w	8009b36 <_dtoa_r+0xb86>
 8009042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009044:	b963      	cbnz	r3, 8009060 <_dtoa_r+0xb0>
 8009046:	4b9b      	ldr	r3, [pc, #620]	; (80092b4 <_dtoa_r+0x304>)
 8009048:	e024      	b.n	8009094 <_dtoa_r+0xe4>
 800904a:	4b9b      	ldr	r3, [pc, #620]	; (80092b8 <_dtoa_r+0x308>)
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	3308      	adds	r3, #8
 8009050:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009052:	6013      	str	r3, [r2, #0]
 8009054:	9800      	ldr	r0, [sp, #0]
 8009056:	b015      	add	sp, #84	; 0x54
 8009058:	ecbd 8b02 	vpop	{d8}
 800905c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009060:	4b94      	ldr	r3, [pc, #592]	; (80092b4 <_dtoa_r+0x304>)
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	3303      	adds	r3, #3
 8009066:	e7f3      	b.n	8009050 <_dtoa_r+0xa0>
 8009068:	ed9d 7b02 	vldr	d7, [sp, #8]
 800906c:	2200      	movs	r2, #0
 800906e:	ec51 0b17 	vmov	r0, r1, d7
 8009072:	2300      	movs	r3, #0
 8009074:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009078:	f7f7 fd56 	bl	8000b28 <__aeabi_dcmpeq>
 800907c:	4680      	mov	r8, r0
 800907e:	b158      	cbz	r0, 8009098 <_dtoa_r+0xe8>
 8009080:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009082:	2301      	movs	r3, #1
 8009084:	6013      	str	r3, [r2, #0]
 8009086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009088:	2b00      	cmp	r3, #0
 800908a:	f000 8551 	beq.w	8009b30 <_dtoa_r+0xb80>
 800908e:	488b      	ldr	r0, [pc, #556]	; (80092bc <_dtoa_r+0x30c>)
 8009090:	6018      	str	r0, [r3, #0]
 8009092:	1e43      	subs	r3, r0, #1
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	e7dd      	b.n	8009054 <_dtoa_r+0xa4>
 8009098:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800909c:	aa12      	add	r2, sp, #72	; 0x48
 800909e:	a913      	add	r1, sp, #76	; 0x4c
 80090a0:	4620      	mov	r0, r4
 80090a2:	f001 ff13 	bl	800aecc <__d2b>
 80090a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090aa:	4683      	mov	fp, r0
 80090ac:	2d00      	cmp	r5, #0
 80090ae:	d07c      	beq.n	80091aa <_dtoa_r+0x1fa>
 80090b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80090b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80090be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80090c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80090c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80090ca:	4b7d      	ldr	r3, [pc, #500]	; (80092c0 <_dtoa_r+0x310>)
 80090cc:	2200      	movs	r2, #0
 80090ce:	4630      	mov	r0, r6
 80090d0:	4639      	mov	r1, r7
 80090d2:	f7f7 f909 	bl	80002e8 <__aeabi_dsub>
 80090d6:	a36e      	add	r3, pc, #440	; (adr r3, 8009290 <_dtoa_r+0x2e0>)
 80090d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090dc:	f7f7 fabc 	bl	8000658 <__aeabi_dmul>
 80090e0:	a36d      	add	r3, pc, #436	; (adr r3, 8009298 <_dtoa_r+0x2e8>)
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	f7f7 f901 	bl	80002ec <__adddf3>
 80090ea:	4606      	mov	r6, r0
 80090ec:	4628      	mov	r0, r5
 80090ee:	460f      	mov	r7, r1
 80090f0:	f7f7 fa48 	bl	8000584 <__aeabi_i2d>
 80090f4:	a36a      	add	r3, pc, #424	; (adr r3, 80092a0 <_dtoa_r+0x2f0>)
 80090f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fa:	f7f7 faad 	bl	8000658 <__aeabi_dmul>
 80090fe:	4602      	mov	r2, r0
 8009100:	460b      	mov	r3, r1
 8009102:	4630      	mov	r0, r6
 8009104:	4639      	mov	r1, r7
 8009106:	f7f7 f8f1 	bl	80002ec <__adddf3>
 800910a:	4606      	mov	r6, r0
 800910c:	460f      	mov	r7, r1
 800910e:	f7f7 fd53 	bl	8000bb8 <__aeabi_d2iz>
 8009112:	2200      	movs	r2, #0
 8009114:	4682      	mov	sl, r0
 8009116:	2300      	movs	r3, #0
 8009118:	4630      	mov	r0, r6
 800911a:	4639      	mov	r1, r7
 800911c:	f7f7 fd0e 	bl	8000b3c <__aeabi_dcmplt>
 8009120:	b148      	cbz	r0, 8009136 <_dtoa_r+0x186>
 8009122:	4650      	mov	r0, sl
 8009124:	f7f7 fa2e 	bl	8000584 <__aeabi_i2d>
 8009128:	4632      	mov	r2, r6
 800912a:	463b      	mov	r3, r7
 800912c:	f7f7 fcfc 	bl	8000b28 <__aeabi_dcmpeq>
 8009130:	b908      	cbnz	r0, 8009136 <_dtoa_r+0x186>
 8009132:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009136:	f1ba 0f16 	cmp.w	sl, #22
 800913a:	d854      	bhi.n	80091e6 <_dtoa_r+0x236>
 800913c:	4b61      	ldr	r3, [pc, #388]	; (80092c4 <_dtoa_r+0x314>)
 800913e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009146:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800914a:	f7f7 fcf7 	bl	8000b3c <__aeabi_dcmplt>
 800914e:	2800      	cmp	r0, #0
 8009150:	d04b      	beq.n	80091ea <_dtoa_r+0x23a>
 8009152:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009156:	2300      	movs	r3, #0
 8009158:	930e      	str	r3, [sp, #56]	; 0x38
 800915a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800915c:	1b5d      	subs	r5, r3, r5
 800915e:	1e6b      	subs	r3, r5, #1
 8009160:	9304      	str	r3, [sp, #16]
 8009162:	bf43      	ittte	mi
 8009164:	2300      	movmi	r3, #0
 8009166:	f1c5 0801 	rsbmi	r8, r5, #1
 800916a:	9304      	strmi	r3, [sp, #16]
 800916c:	f04f 0800 	movpl.w	r8, #0
 8009170:	f1ba 0f00 	cmp.w	sl, #0
 8009174:	db3b      	blt.n	80091ee <_dtoa_r+0x23e>
 8009176:	9b04      	ldr	r3, [sp, #16]
 8009178:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800917c:	4453      	add	r3, sl
 800917e:	9304      	str	r3, [sp, #16]
 8009180:	2300      	movs	r3, #0
 8009182:	9306      	str	r3, [sp, #24]
 8009184:	9b05      	ldr	r3, [sp, #20]
 8009186:	2b09      	cmp	r3, #9
 8009188:	d869      	bhi.n	800925e <_dtoa_r+0x2ae>
 800918a:	2b05      	cmp	r3, #5
 800918c:	bfc4      	itt	gt
 800918e:	3b04      	subgt	r3, #4
 8009190:	9305      	strgt	r3, [sp, #20]
 8009192:	9b05      	ldr	r3, [sp, #20]
 8009194:	f1a3 0302 	sub.w	r3, r3, #2
 8009198:	bfcc      	ite	gt
 800919a:	2500      	movgt	r5, #0
 800919c:	2501      	movle	r5, #1
 800919e:	2b03      	cmp	r3, #3
 80091a0:	d869      	bhi.n	8009276 <_dtoa_r+0x2c6>
 80091a2:	e8df f003 	tbb	[pc, r3]
 80091a6:	4e2c      	.short	0x4e2c
 80091a8:	5a4c      	.short	0x5a4c
 80091aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80091ae:	441d      	add	r5, r3
 80091b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80091b4:	2b20      	cmp	r3, #32
 80091b6:	bfc1      	itttt	gt
 80091b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80091bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80091c0:	fa09 f303 	lslgt.w	r3, r9, r3
 80091c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80091c8:	bfda      	itte	le
 80091ca:	f1c3 0320 	rsble	r3, r3, #32
 80091ce:	fa06 f003 	lslle.w	r0, r6, r3
 80091d2:	4318      	orrgt	r0, r3
 80091d4:	f7f7 f9c6 	bl	8000564 <__aeabi_ui2d>
 80091d8:	2301      	movs	r3, #1
 80091da:	4606      	mov	r6, r0
 80091dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80091e0:	3d01      	subs	r5, #1
 80091e2:	9310      	str	r3, [sp, #64]	; 0x40
 80091e4:	e771      	b.n	80090ca <_dtoa_r+0x11a>
 80091e6:	2301      	movs	r3, #1
 80091e8:	e7b6      	b.n	8009158 <_dtoa_r+0x1a8>
 80091ea:	900e      	str	r0, [sp, #56]	; 0x38
 80091ec:	e7b5      	b.n	800915a <_dtoa_r+0x1aa>
 80091ee:	f1ca 0300 	rsb	r3, sl, #0
 80091f2:	9306      	str	r3, [sp, #24]
 80091f4:	2300      	movs	r3, #0
 80091f6:	eba8 080a 	sub.w	r8, r8, sl
 80091fa:	930d      	str	r3, [sp, #52]	; 0x34
 80091fc:	e7c2      	b.n	8009184 <_dtoa_r+0x1d4>
 80091fe:	2300      	movs	r3, #0
 8009200:	9308      	str	r3, [sp, #32]
 8009202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009204:	2b00      	cmp	r3, #0
 8009206:	dc39      	bgt.n	800927c <_dtoa_r+0x2cc>
 8009208:	f04f 0901 	mov.w	r9, #1
 800920c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009210:	464b      	mov	r3, r9
 8009212:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009216:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009218:	2200      	movs	r2, #0
 800921a:	6042      	str	r2, [r0, #4]
 800921c:	2204      	movs	r2, #4
 800921e:	f102 0614 	add.w	r6, r2, #20
 8009222:	429e      	cmp	r6, r3
 8009224:	6841      	ldr	r1, [r0, #4]
 8009226:	d92f      	bls.n	8009288 <_dtoa_r+0x2d8>
 8009228:	4620      	mov	r0, r4
 800922a:	f001 fa67 	bl	800a6fc <_Balloc>
 800922e:	9000      	str	r0, [sp, #0]
 8009230:	2800      	cmp	r0, #0
 8009232:	d14b      	bne.n	80092cc <_dtoa_r+0x31c>
 8009234:	4b24      	ldr	r3, [pc, #144]	; (80092c8 <_dtoa_r+0x318>)
 8009236:	4602      	mov	r2, r0
 8009238:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800923c:	e6d1      	b.n	8008fe2 <_dtoa_r+0x32>
 800923e:	2301      	movs	r3, #1
 8009240:	e7de      	b.n	8009200 <_dtoa_r+0x250>
 8009242:	2300      	movs	r3, #0
 8009244:	9308      	str	r3, [sp, #32]
 8009246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009248:	eb0a 0903 	add.w	r9, sl, r3
 800924c:	f109 0301 	add.w	r3, r9, #1
 8009250:	2b01      	cmp	r3, #1
 8009252:	9301      	str	r3, [sp, #4]
 8009254:	bfb8      	it	lt
 8009256:	2301      	movlt	r3, #1
 8009258:	e7dd      	b.n	8009216 <_dtoa_r+0x266>
 800925a:	2301      	movs	r3, #1
 800925c:	e7f2      	b.n	8009244 <_dtoa_r+0x294>
 800925e:	2501      	movs	r5, #1
 8009260:	2300      	movs	r3, #0
 8009262:	9305      	str	r3, [sp, #20]
 8009264:	9508      	str	r5, [sp, #32]
 8009266:	f04f 39ff 	mov.w	r9, #4294967295
 800926a:	2200      	movs	r2, #0
 800926c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009270:	2312      	movs	r3, #18
 8009272:	9209      	str	r2, [sp, #36]	; 0x24
 8009274:	e7cf      	b.n	8009216 <_dtoa_r+0x266>
 8009276:	2301      	movs	r3, #1
 8009278:	9308      	str	r3, [sp, #32]
 800927a:	e7f4      	b.n	8009266 <_dtoa_r+0x2b6>
 800927c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009280:	f8cd 9004 	str.w	r9, [sp, #4]
 8009284:	464b      	mov	r3, r9
 8009286:	e7c6      	b.n	8009216 <_dtoa_r+0x266>
 8009288:	3101      	adds	r1, #1
 800928a:	6041      	str	r1, [r0, #4]
 800928c:	0052      	lsls	r2, r2, #1
 800928e:	e7c6      	b.n	800921e <_dtoa_r+0x26e>
 8009290:	636f4361 	.word	0x636f4361
 8009294:	3fd287a7 	.word	0x3fd287a7
 8009298:	8b60c8b3 	.word	0x8b60c8b3
 800929c:	3fc68a28 	.word	0x3fc68a28
 80092a0:	509f79fb 	.word	0x509f79fb
 80092a4:	3fd34413 	.word	0x3fd34413
 80092a8:	0800e0ed 	.word	0x0800e0ed
 80092ac:	0800e104 	.word	0x0800e104
 80092b0:	7ff00000 	.word	0x7ff00000
 80092b4:	0800e0e9 	.word	0x0800e0e9
 80092b8:	0800e0e0 	.word	0x0800e0e0
 80092bc:	0800e069 	.word	0x0800e069
 80092c0:	3ff80000 	.word	0x3ff80000
 80092c4:	0800e2e0 	.word	0x0800e2e0
 80092c8:	0800e163 	.word	0x0800e163
 80092cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092ce:	9a00      	ldr	r2, [sp, #0]
 80092d0:	601a      	str	r2, [r3, #0]
 80092d2:	9b01      	ldr	r3, [sp, #4]
 80092d4:	2b0e      	cmp	r3, #14
 80092d6:	f200 80ad 	bhi.w	8009434 <_dtoa_r+0x484>
 80092da:	2d00      	cmp	r5, #0
 80092dc:	f000 80aa 	beq.w	8009434 <_dtoa_r+0x484>
 80092e0:	f1ba 0f00 	cmp.w	sl, #0
 80092e4:	dd36      	ble.n	8009354 <_dtoa_r+0x3a4>
 80092e6:	4ac3      	ldr	r2, [pc, #780]	; (80095f4 <_dtoa_r+0x644>)
 80092e8:	f00a 030f 	and.w	r3, sl, #15
 80092ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80092f0:	ed93 7b00 	vldr	d7, [r3]
 80092f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80092f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80092fc:	eeb0 8a47 	vmov.f32	s16, s14
 8009300:	eef0 8a67 	vmov.f32	s17, s15
 8009304:	d016      	beq.n	8009334 <_dtoa_r+0x384>
 8009306:	4bbc      	ldr	r3, [pc, #752]	; (80095f8 <_dtoa_r+0x648>)
 8009308:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800930c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009310:	f7f7 facc 	bl	80008ac <__aeabi_ddiv>
 8009314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009318:	f007 070f 	and.w	r7, r7, #15
 800931c:	2503      	movs	r5, #3
 800931e:	4eb6      	ldr	r6, [pc, #728]	; (80095f8 <_dtoa_r+0x648>)
 8009320:	b957      	cbnz	r7, 8009338 <_dtoa_r+0x388>
 8009322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009326:	ec53 2b18 	vmov	r2, r3, d8
 800932a:	f7f7 fabf 	bl	80008ac <__aeabi_ddiv>
 800932e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009332:	e029      	b.n	8009388 <_dtoa_r+0x3d8>
 8009334:	2502      	movs	r5, #2
 8009336:	e7f2      	b.n	800931e <_dtoa_r+0x36e>
 8009338:	07f9      	lsls	r1, r7, #31
 800933a:	d508      	bpl.n	800934e <_dtoa_r+0x39e>
 800933c:	ec51 0b18 	vmov	r0, r1, d8
 8009340:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009344:	f7f7 f988 	bl	8000658 <__aeabi_dmul>
 8009348:	ec41 0b18 	vmov	d8, r0, r1
 800934c:	3501      	adds	r5, #1
 800934e:	107f      	asrs	r7, r7, #1
 8009350:	3608      	adds	r6, #8
 8009352:	e7e5      	b.n	8009320 <_dtoa_r+0x370>
 8009354:	f000 80a6 	beq.w	80094a4 <_dtoa_r+0x4f4>
 8009358:	f1ca 0600 	rsb	r6, sl, #0
 800935c:	4ba5      	ldr	r3, [pc, #660]	; (80095f4 <_dtoa_r+0x644>)
 800935e:	4fa6      	ldr	r7, [pc, #664]	; (80095f8 <_dtoa_r+0x648>)
 8009360:	f006 020f 	and.w	r2, r6, #15
 8009364:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009370:	f7f7 f972 	bl	8000658 <__aeabi_dmul>
 8009374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009378:	1136      	asrs	r6, r6, #4
 800937a:	2300      	movs	r3, #0
 800937c:	2502      	movs	r5, #2
 800937e:	2e00      	cmp	r6, #0
 8009380:	f040 8085 	bne.w	800948e <_dtoa_r+0x4de>
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1d2      	bne.n	800932e <_dtoa_r+0x37e>
 8009388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800938a:	2b00      	cmp	r3, #0
 800938c:	f000 808c 	beq.w	80094a8 <_dtoa_r+0x4f8>
 8009390:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009394:	4b99      	ldr	r3, [pc, #612]	; (80095fc <_dtoa_r+0x64c>)
 8009396:	2200      	movs	r2, #0
 8009398:	4630      	mov	r0, r6
 800939a:	4639      	mov	r1, r7
 800939c:	f7f7 fbce 	bl	8000b3c <__aeabi_dcmplt>
 80093a0:	2800      	cmp	r0, #0
 80093a2:	f000 8081 	beq.w	80094a8 <_dtoa_r+0x4f8>
 80093a6:	9b01      	ldr	r3, [sp, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d07d      	beq.n	80094a8 <_dtoa_r+0x4f8>
 80093ac:	f1b9 0f00 	cmp.w	r9, #0
 80093b0:	dd3c      	ble.n	800942c <_dtoa_r+0x47c>
 80093b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80093b6:	9307      	str	r3, [sp, #28]
 80093b8:	2200      	movs	r2, #0
 80093ba:	4b91      	ldr	r3, [pc, #580]	; (8009600 <_dtoa_r+0x650>)
 80093bc:	4630      	mov	r0, r6
 80093be:	4639      	mov	r1, r7
 80093c0:	f7f7 f94a 	bl	8000658 <__aeabi_dmul>
 80093c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093c8:	3501      	adds	r5, #1
 80093ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80093ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80093d2:	4628      	mov	r0, r5
 80093d4:	f7f7 f8d6 	bl	8000584 <__aeabi_i2d>
 80093d8:	4632      	mov	r2, r6
 80093da:	463b      	mov	r3, r7
 80093dc:	f7f7 f93c 	bl	8000658 <__aeabi_dmul>
 80093e0:	4b88      	ldr	r3, [pc, #544]	; (8009604 <_dtoa_r+0x654>)
 80093e2:	2200      	movs	r2, #0
 80093e4:	f7f6 ff82 	bl	80002ec <__adddf3>
 80093e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80093ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093f0:	9303      	str	r3, [sp, #12]
 80093f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d15c      	bne.n	80094b2 <_dtoa_r+0x502>
 80093f8:	4b83      	ldr	r3, [pc, #524]	; (8009608 <_dtoa_r+0x658>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	4630      	mov	r0, r6
 80093fe:	4639      	mov	r1, r7
 8009400:	f7f6 ff72 	bl	80002e8 <__aeabi_dsub>
 8009404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009408:	4606      	mov	r6, r0
 800940a:	460f      	mov	r7, r1
 800940c:	f7f7 fbb4 	bl	8000b78 <__aeabi_dcmpgt>
 8009410:	2800      	cmp	r0, #0
 8009412:	f040 8296 	bne.w	8009942 <_dtoa_r+0x992>
 8009416:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800941a:	4630      	mov	r0, r6
 800941c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009420:	4639      	mov	r1, r7
 8009422:	f7f7 fb8b 	bl	8000b3c <__aeabi_dcmplt>
 8009426:	2800      	cmp	r0, #0
 8009428:	f040 8288 	bne.w	800993c <_dtoa_r+0x98c>
 800942c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009430:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009434:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009436:	2b00      	cmp	r3, #0
 8009438:	f2c0 8158 	blt.w	80096ec <_dtoa_r+0x73c>
 800943c:	f1ba 0f0e 	cmp.w	sl, #14
 8009440:	f300 8154 	bgt.w	80096ec <_dtoa_r+0x73c>
 8009444:	4b6b      	ldr	r3, [pc, #428]	; (80095f4 <_dtoa_r+0x644>)
 8009446:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800944a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800944e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009450:	2b00      	cmp	r3, #0
 8009452:	f280 80e3 	bge.w	800961c <_dtoa_r+0x66c>
 8009456:	9b01      	ldr	r3, [sp, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	f300 80df 	bgt.w	800961c <_dtoa_r+0x66c>
 800945e:	f040 826d 	bne.w	800993c <_dtoa_r+0x98c>
 8009462:	4b69      	ldr	r3, [pc, #420]	; (8009608 <_dtoa_r+0x658>)
 8009464:	2200      	movs	r2, #0
 8009466:	4640      	mov	r0, r8
 8009468:	4649      	mov	r1, r9
 800946a:	f7f7 f8f5 	bl	8000658 <__aeabi_dmul>
 800946e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009472:	f7f7 fb77 	bl	8000b64 <__aeabi_dcmpge>
 8009476:	9e01      	ldr	r6, [sp, #4]
 8009478:	4637      	mov	r7, r6
 800947a:	2800      	cmp	r0, #0
 800947c:	f040 8243 	bne.w	8009906 <_dtoa_r+0x956>
 8009480:	9d00      	ldr	r5, [sp, #0]
 8009482:	2331      	movs	r3, #49	; 0x31
 8009484:	f805 3b01 	strb.w	r3, [r5], #1
 8009488:	f10a 0a01 	add.w	sl, sl, #1
 800948c:	e23f      	b.n	800990e <_dtoa_r+0x95e>
 800948e:	07f2      	lsls	r2, r6, #31
 8009490:	d505      	bpl.n	800949e <_dtoa_r+0x4ee>
 8009492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009496:	f7f7 f8df 	bl	8000658 <__aeabi_dmul>
 800949a:	3501      	adds	r5, #1
 800949c:	2301      	movs	r3, #1
 800949e:	1076      	asrs	r6, r6, #1
 80094a0:	3708      	adds	r7, #8
 80094a2:	e76c      	b.n	800937e <_dtoa_r+0x3ce>
 80094a4:	2502      	movs	r5, #2
 80094a6:	e76f      	b.n	8009388 <_dtoa_r+0x3d8>
 80094a8:	9b01      	ldr	r3, [sp, #4]
 80094aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80094ae:	930c      	str	r3, [sp, #48]	; 0x30
 80094b0:	e78d      	b.n	80093ce <_dtoa_r+0x41e>
 80094b2:	9900      	ldr	r1, [sp, #0]
 80094b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80094b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094b8:	4b4e      	ldr	r3, [pc, #312]	; (80095f4 <_dtoa_r+0x644>)
 80094ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094be:	4401      	add	r1, r0
 80094c0:	9102      	str	r1, [sp, #8]
 80094c2:	9908      	ldr	r1, [sp, #32]
 80094c4:	eeb0 8a47 	vmov.f32	s16, s14
 80094c8:	eef0 8a67 	vmov.f32	s17, s15
 80094cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094d4:	2900      	cmp	r1, #0
 80094d6:	d045      	beq.n	8009564 <_dtoa_r+0x5b4>
 80094d8:	494c      	ldr	r1, [pc, #304]	; (800960c <_dtoa_r+0x65c>)
 80094da:	2000      	movs	r0, #0
 80094dc:	f7f7 f9e6 	bl	80008ac <__aeabi_ddiv>
 80094e0:	ec53 2b18 	vmov	r2, r3, d8
 80094e4:	f7f6 ff00 	bl	80002e8 <__aeabi_dsub>
 80094e8:	9d00      	ldr	r5, [sp, #0]
 80094ea:	ec41 0b18 	vmov	d8, r0, r1
 80094ee:	4639      	mov	r1, r7
 80094f0:	4630      	mov	r0, r6
 80094f2:	f7f7 fb61 	bl	8000bb8 <__aeabi_d2iz>
 80094f6:	900c      	str	r0, [sp, #48]	; 0x30
 80094f8:	f7f7 f844 	bl	8000584 <__aeabi_i2d>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4630      	mov	r0, r6
 8009502:	4639      	mov	r1, r7
 8009504:	f7f6 fef0 	bl	80002e8 <__aeabi_dsub>
 8009508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800950a:	3330      	adds	r3, #48	; 0x30
 800950c:	f805 3b01 	strb.w	r3, [r5], #1
 8009510:	ec53 2b18 	vmov	r2, r3, d8
 8009514:	4606      	mov	r6, r0
 8009516:	460f      	mov	r7, r1
 8009518:	f7f7 fb10 	bl	8000b3c <__aeabi_dcmplt>
 800951c:	2800      	cmp	r0, #0
 800951e:	d165      	bne.n	80095ec <_dtoa_r+0x63c>
 8009520:	4632      	mov	r2, r6
 8009522:	463b      	mov	r3, r7
 8009524:	4935      	ldr	r1, [pc, #212]	; (80095fc <_dtoa_r+0x64c>)
 8009526:	2000      	movs	r0, #0
 8009528:	f7f6 fede 	bl	80002e8 <__aeabi_dsub>
 800952c:	ec53 2b18 	vmov	r2, r3, d8
 8009530:	f7f7 fb04 	bl	8000b3c <__aeabi_dcmplt>
 8009534:	2800      	cmp	r0, #0
 8009536:	f040 80b9 	bne.w	80096ac <_dtoa_r+0x6fc>
 800953a:	9b02      	ldr	r3, [sp, #8]
 800953c:	429d      	cmp	r5, r3
 800953e:	f43f af75 	beq.w	800942c <_dtoa_r+0x47c>
 8009542:	4b2f      	ldr	r3, [pc, #188]	; (8009600 <_dtoa_r+0x650>)
 8009544:	ec51 0b18 	vmov	r0, r1, d8
 8009548:	2200      	movs	r2, #0
 800954a:	f7f7 f885 	bl	8000658 <__aeabi_dmul>
 800954e:	4b2c      	ldr	r3, [pc, #176]	; (8009600 <_dtoa_r+0x650>)
 8009550:	ec41 0b18 	vmov	d8, r0, r1
 8009554:	2200      	movs	r2, #0
 8009556:	4630      	mov	r0, r6
 8009558:	4639      	mov	r1, r7
 800955a:	f7f7 f87d 	bl	8000658 <__aeabi_dmul>
 800955e:	4606      	mov	r6, r0
 8009560:	460f      	mov	r7, r1
 8009562:	e7c4      	b.n	80094ee <_dtoa_r+0x53e>
 8009564:	ec51 0b17 	vmov	r0, r1, d7
 8009568:	f7f7 f876 	bl	8000658 <__aeabi_dmul>
 800956c:	9b02      	ldr	r3, [sp, #8]
 800956e:	9d00      	ldr	r5, [sp, #0]
 8009570:	930c      	str	r3, [sp, #48]	; 0x30
 8009572:	ec41 0b18 	vmov	d8, r0, r1
 8009576:	4639      	mov	r1, r7
 8009578:	4630      	mov	r0, r6
 800957a:	f7f7 fb1d 	bl	8000bb8 <__aeabi_d2iz>
 800957e:	9011      	str	r0, [sp, #68]	; 0x44
 8009580:	f7f7 f800 	bl	8000584 <__aeabi_i2d>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	4630      	mov	r0, r6
 800958a:	4639      	mov	r1, r7
 800958c:	f7f6 feac 	bl	80002e8 <__aeabi_dsub>
 8009590:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009592:	3330      	adds	r3, #48	; 0x30
 8009594:	f805 3b01 	strb.w	r3, [r5], #1
 8009598:	9b02      	ldr	r3, [sp, #8]
 800959a:	429d      	cmp	r5, r3
 800959c:	4606      	mov	r6, r0
 800959e:	460f      	mov	r7, r1
 80095a0:	f04f 0200 	mov.w	r2, #0
 80095a4:	d134      	bne.n	8009610 <_dtoa_r+0x660>
 80095a6:	4b19      	ldr	r3, [pc, #100]	; (800960c <_dtoa_r+0x65c>)
 80095a8:	ec51 0b18 	vmov	r0, r1, d8
 80095ac:	f7f6 fe9e 	bl	80002ec <__adddf3>
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	4630      	mov	r0, r6
 80095b6:	4639      	mov	r1, r7
 80095b8:	f7f7 fade 	bl	8000b78 <__aeabi_dcmpgt>
 80095bc:	2800      	cmp	r0, #0
 80095be:	d175      	bne.n	80096ac <_dtoa_r+0x6fc>
 80095c0:	ec53 2b18 	vmov	r2, r3, d8
 80095c4:	4911      	ldr	r1, [pc, #68]	; (800960c <_dtoa_r+0x65c>)
 80095c6:	2000      	movs	r0, #0
 80095c8:	f7f6 fe8e 	bl	80002e8 <__aeabi_dsub>
 80095cc:	4602      	mov	r2, r0
 80095ce:	460b      	mov	r3, r1
 80095d0:	4630      	mov	r0, r6
 80095d2:	4639      	mov	r1, r7
 80095d4:	f7f7 fab2 	bl	8000b3c <__aeabi_dcmplt>
 80095d8:	2800      	cmp	r0, #0
 80095da:	f43f af27 	beq.w	800942c <_dtoa_r+0x47c>
 80095de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095e0:	1e6b      	subs	r3, r5, #1
 80095e2:	930c      	str	r3, [sp, #48]	; 0x30
 80095e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80095e8:	2b30      	cmp	r3, #48	; 0x30
 80095ea:	d0f8      	beq.n	80095de <_dtoa_r+0x62e>
 80095ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80095f0:	e04a      	b.n	8009688 <_dtoa_r+0x6d8>
 80095f2:	bf00      	nop
 80095f4:	0800e2e0 	.word	0x0800e2e0
 80095f8:	0800e2b8 	.word	0x0800e2b8
 80095fc:	3ff00000 	.word	0x3ff00000
 8009600:	40240000 	.word	0x40240000
 8009604:	401c0000 	.word	0x401c0000
 8009608:	40140000 	.word	0x40140000
 800960c:	3fe00000 	.word	0x3fe00000
 8009610:	4baf      	ldr	r3, [pc, #700]	; (80098d0 <_dtoa_r+0x920>)
 8009612:	f7f7 f821 	bl	8000658 <__aeabi_dmul>
 8009616:	4606      	mov	r6, r0
 8009618:	460f      	mov	r7, r1
 800961a:	e7ac      	b.n	8009576 <_dtoa_r+0x5c6>
 800961c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009620:	9d00      	ldr	r5, [sp, #0]
 8009622:	4642      	mov	r2, r8
 8009624:	464b      	mov	r3, r9
 8009626:	4630      	mov	r0, r6
 8009628:	4639      	mov	r1, r7
 800962a:	f7f7 f93f 	bl	80008ac <__aeabi_ddiv>
 800962e:	f7f7 fac3 	bl	8000bb8 <__aeabi_d2iz>
 8009632:	9002      	str	r0, [sp, #8]
 8009634:	f7f6 ffa6 	bl	8000584 <__aeabi_i2d>
 8009638:	4642      	mov	r2, r8
 800963a:	464b      	mov	r3, r9
 800963c:	f7f7 f80c 	bl	8000658 <__aeabi_dmul>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	4630      	mov	r0, r6
 8009646:	4639      	mov	r1, r7
 8009648:	f7f6 fe4e 	bl	80002e8 <__aeabi_dsub>
 800964c:	9e02      	ldr	r6, [sp, #8]
 800964e:	9f01      	ldr	r7, [sp, #4]
 8009650:	3630      	adds	r6, #48	; 0x30
 8009652:	f805 6b01 	strb.w	r6, [r5], #1
 8009656:	9e00      	ldr	r6, [sp, #0]
 8009658:	1bae      	subs	r6, r5, r6
 800965a:	42b7      	cmp	r7, r6
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	d137      	bne.n	80096d2 <_dtoa_r+0x722>
 8009662:	f7f6 fe43 	bl	80002ec <__adddf3>
 8009666:	4642      	mov	r2, r8
 8009668:	464b      	mov	r3, r9
 800966a:	4606      	mov	r6, r0
 800966c:	460f      	mov	r7, r1
 800966e:	f7f7 fa83 	bl	8000b78 <__aeabi_dcmpgt>
 8009672:	b9c8      	cbnz	r0, 80096a8 <_dtoa_r+0x6f8>
 8009674:	4642      	mov	r2, r8
 8009676:	464b      	mov	r3, r9
 8009678:	4630      	mov	r0, r6
 800967a:	4639      	mov	r1, r7
 800967c:	f7f7 fa54 	bl	8000b28 <__aeabi_dcmpeq>
 8009680:	b110      	cbz	r0, 8009688 <_dtoa_r+0x6d8>
 8009682:	9b02      	ldr	r3, [sp, #8]
 8009684:	07d9      	lsls	r1, r3, #31
 8009686:	d40f      	bmi.n	80096a8 <_dtoa_r+0x6f8>
 8009688:	4620      	mov	r0, r4
 800968a:	4659      	mov	r1, fp
 800968c:	f001 f876 	bl	800a77c <_Bfree>
 8009690:	2300      	movs	r3, #0
 8009692:	702b      	strb	r3, [r5, #0]
 8009694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009696:	f10a 0001 	add.w	r0, sl, #1
 800969a:	6018      	str	r0, [r3, #0]
 800969c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f43f acd8 	beq.w	8009054 <_dtoa_r+0xa4>
 80096a4:	601d      	str	r5, [r3, #0]
 80096a6:	e4d5      	b.n	8009054 <_dtoa_r+0xa4>
 80096a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80096ac:	462b      	mov	r3, r5
 80096ae:	461d      	mov	r5, r3
 80096b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096b4:	2a39      	cmp	r2, #57	; 0x39
 80096b6:	d108      	bne.n	80096ca <_dtoa_r+0x71a>
 80096b8:	9a00      	ldr	r2, [sp, #0]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d1f7      	bne.n	80096ae <_dtoa_r+0x6fe>
 80096be:	9a07      	ldr	r2, [sp, #28]
 80096c0:	9900      	ldr	r1, [sp, #0]
 80096c2:	3201      	adds	r2, #1
 80096c4:	9207      	str	r2, [sp, #28]
 80096c6:	2230      	movs	r2, #48	; 0x30
 80096c8:	700a      	strb	r2, [r1, #0]
 80096ca:	781a      	ldrb	r2, [r3, #0]
 80096cc:	3201      	adds	r2, #1
 80096ce:	701a      	strb	r2, [r3, #0]
 80096d0:	e78c      	b.n	80095ec <_dtoa_r+0x63c>
 80096d2:	4b7f      	ldr	r3, [pc, #508]	; (80098d0 <_dtoa_r+0x920>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	f7f6 ffbf 	bl	8000658 <__aeabi_dmul>
 80096da:	2200      	movs	r2, #0
 80096dc:	2300      	movs	r3, #0
 80096de:	4606      	mov	r6, r0
 80096e0:	460f      	mov	r7, r1
 80096e2:	f7f7 fa21 	bl	8000b28 <__aeabi_dcmpeq>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d09b      	beq.n	8009622 <_dtoa_r+0x672>
 80096ea:	e7cd      	b.n	8009688 <_dtoa_r+0x6d8>
 80096ec:	9a08      	ldr	r2, [sp, #32]
 80096ee:	2a00      	cmp	r2, #0
 80096f0:	f000 80c4 	beq.w	800987c <_dtoa_r+0x8cc>
 80096f4:	9a05      	ldr	r2, [sp, #20]
 80096f6:	2a01      	cmp	r2, #1
 80096f8:	f300 80a8 	bgt.w	800984c <_dtoa_r+0x89c>
 80096fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80096fe:	2a00      	cmp	r2, #0
 8009700:	f000 80a0 	beq.w	8009844 <_dtoa_r+0x894>
 8009704:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009708:	9e06      	ldr	r6, [sp, #24]
 800970a:	4645      	mov	r5, r8
 800970c:	9a04      	ldr	r2, [sp, #16]
 800970e:	2101      	movs	r1, #1
 8009710:	441a      	add	r2, r3
 8009712:	4620      	mov	r0, r4
 8009714:	4498      	add	r8, r3
 8009716:	9204      	str	r2, [sp, #16]
 8009718:	f001 f936 	bl	800a988 <__i2b>
 800971c:	4607      	mov	r7, r0
 800971e:	2d00      	cmp	r5, #0
 8009720:	dd0b      	ble.n	800973a <_dtoa_r+0x78a>
 8009722:	9b04      	ldr	r3, [sp, #16]
 8009724:	2b00      	cmp	r3, #0
 8009726:	dd08      	ble.n	800973a <_dtoa_r+0x78a>
 8009728:	42ab      	cmp	r3, r5
 800972a:	9a04      	ldr	r2, [sp, #16]
 800972c:	bfa8      	it	ge
 800972e:	462b      	movge	r3, r5
 8009730:	eba8 0803 	sub.w	r8, r8, r3
 8009734:	1aed      	subs	r5, r5, r3
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	9304      	str	r3, [sp, #16]
 800973a:	9b06      	ldr	r3, [sp, #24]
 800973c:	b1fb      	cbz	r3, 800977e <_dtoa_r+0x7ce>
 800973e:	9b08      	ldr	r3, [sp, #32]
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 809f 	beq.w	8009884 <_dtoa_r+0x8d4>
 8009746:	2e00      	cmp	r6, #0
 8009748:	dd11      	ble.n	800976e <_dtoa_r+0x7be>
 800974a:	4639      	mov	r1, r7
 800974c:	4632      	mov	r2, r6
 800974e:	4620      	mov	r0, r4
 8009750:	f001 f9d6 	bl	800ab00 <__pow5mult>
 8009754:	465a      	mov	r2, fp
 8009756:	4601      	mov	r1, r0
 8009758:	4607      	mov	r7, r0
 800975a:	4620      	mov	r0, r4
 800975c:	f001 f92a 	bl	800a9b4 <__multiply>
 8009760:	4659      	mov	r1, fp
 8009762:	9007      	str	r0, [sp, #28]
 8009764:	4620      	mov	r0, r4
 8009766:	f001 f809 	bl	800a77c <_Bfree>
 800976a:	9b07      	ldr	r3, [sp, #28]
 800976c:	469b      	mov	fp, r3
 800976e:	9b06      	ldr	r3, [sp, #24]
 8009770:	1b9a      	subs	r2, r3, r6
 8009772:	d004      	beq.n	800977e <_dtoa_r+0x7ce>
 8009774:	4659      	mov	r1, fp
 8009776:	4620      	mov	r0, r4
 8009778:	f001 f9c2 	bl	800ab00 <__pow5mult>
 800977c:	4683      	mov	fp, r0
 800977e:	2101      	movs	r1, #1
 8009780:	4620      	mov	r0, r4
 8009782:	f001 f901 	bl	800a988 <__i2b>
 8009786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009788:	2b00      	cmp	r3, #0
 800978a:	4606      	mov	r6, r0
 800978c:	dd7c      	ble.n	8009888 <_dtoa_r+0x8d8>
 800978e:	461a      	mov	r2, r3
 8009790:	4601      	mov	r1, r0
 8009792:	4620      	mov	r0, r4
 8009794:	f001 f9b4 	bl	800ab00 <__pow5mult>
 8009798:	9b05      	ldr	r3, [sp, #20]
 800979a:	2b01      	cmp	r3, #1
 800979c:	4606      	mov	r6, r0
 800979e:	dd76      	ble.n	800988e <_dtoa_r+0x8de>
 80097a0:	2300      	movs	r3, #0
 80097a2:	9306      	str	r3, [sp, #24]
 80097a4:	6933      	ldr	r3, [r6, #16]
 80097a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80097aa:	6918      	ldr	r0, [r3, #16]
 80097ac:	f001 f89c 	bl	800a8e8 <__hi0bits>
 80097b0:	f1c0 0020 	rsb	r0, r0, #32
 80097b4:	9b04      	ldr	r3, [sp, #16]
 80097b6:	4418      	add	r0, r3
 80097b8:	f010 001f 	ands.w	r0, r0, #31
 80097bc:	f000 8086 	beq.w	80098cc <_dtoa_r+0x91c>
 80097c0:	f1c0 0320 	rsb	r3, r0, #32
 80097c4:	2b04      	cmp	r3, #4
 80097c6:	dd7f      	ble.n	80098c8 <_dtoa_r+0x918>
 80097c8:	f1c0 001c 	rsb	r0, r0, #28
 80097cc:	9b04      	ldr	r3, [sp, #16]
 80097ce:	4403      	add	r3, r0
 80097d0:	4480      	add	r8, r0
 80097d2:	4405      	add	r5, r0
 80097d4:	9304      	str	r3, [sp, #16]
 80097d6:	f1b8 0f00 	cmp.w	r8, #0
 80097da:	dd05      	ble.n	80097e8 <_dtoa_r+0x838>
 80097dc:	4659      	mov	r1, fp
 80097de:	4642      	mov	r2, r8
 80097e0:	4620      	mov	r0, r4
 80097e2:	f001 f9e7 	bl	800abb4 <__lshift>
 80097e6:	4683      	mov	fp, r0
 80097e8:	9b04      	ldr	r3, [sp, #16]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	dd05      	ble.n	80097fa <_dtoa_r+0x84a>
 80097ee:	4631      	mov	r1, r6
 80097f0:	461a      	mov	r2, r3
 80097f2:	4620      	mov	r0, r4
 80097f4:	f001 f9de 	bl	800abb4 <__lshift>
 80097f8:	4606      	mov	r6, r0
 80097fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d069      	beq.n	80098d4 <_dtoa_r+0x924>
 8009800:	4631      	mov	r1, r6
 8009802:	4658      	mov	r0, fp
 8009804:	f001 fa42 	bl	800ac8c <__mcmp>
 8009808:	2800      	cmp	r0, #0
 800980a:	da63      	bge.n	80098d4 <_dtoa_r+0x924>
 800980c:	2300      	movs	r3, #0
 800980e:	4659      	mov	r1, fp
 8009810:	220a      	movs	r2, #10
 8009812:	4620      	mov	r0, r4
 8009814:	f000 ffd4 	bl	800a7c0 <__multadd>
 8009818:	9b08      	ldr	r3, [sp, #32]
 800981a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800981e:	4683      	mov	fp, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	f000 818f 	beq.w	8009b44 <_dtoa_r+0xb94>
 8009826:	4639      	mov	r1, r7
 8009828:	2300      	movs	r3, #0
 800982a:	220a      	movs	r2, #10
 800982c:	4620      	mov	r0, r4
 800982e:	f000 ffc7 	bl	800a7c0 <__multadd>
 8009832:	f1b9 0f00 	cmp.w	r9, #0
 8009836:	4607      	mov	r7, r0
 8009838:	f300 808e 	bgt.w	8009958 <_dtoa_r+0x9a8>
 800983c:	9b05      	ldr	r3, [sp, #20]
 800983e:	2b02      	cmp	r3, #2
 8009840:	dc50      	bgt.n	80098e4 <_dtoa_r+0x934>
 8009842:	e089      	b.n	8009958 <_dtoa_r+0x9a8>
 8009844:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009846:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800984a:	e75d      	b.n	8009708 <_dtoa_r+0x758>
 800984c:	9b01      	ldr	r3, [sp, #4]
 800984e:	1e5e      	subs	r6, r3, #1
 8009850:	9b06      	ldr	r3, [sp, #24]
 8009852:	42b3      	cmp	r3, r6
 8009854:	bfbf      	itttt	lt
 8009856:	9b06      	ldrlt	r3, [sp, #24]
 8009858:	9606      	strlt	r6, [sp, #24]
 800985a:	1af2      	sublt	r2, r6, r3
 800985c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800985e:	bfb6      	itet	lt
 8009860:	189b      	addlt	r3, r3, r2
 8009862:	1b9e      	subge	r6, r3, r6
 8009864:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009866:	9b01      	ldr	r3, [sp, #4]
 8009868:	bfb8      	it	lt
 800986a:	2600      	movlt	r6, #0
 800986c:	2b00      	cmp	r3, #0
 800986e:	bfb5      	itete	lt
 8009870:	eba8 0503 	sublt.w	r5, r8, r3
 8009874:	9b01      	ldrge	r3, [sp, #4]
 8009876:	2300      	movlt	r3, #0
 8009878:	4645      	movge	r5, r8
 800987a:	e747      	b.n	800970c <_dtoa_r+0x75c>
 800987c:	9e06      	ldr	r6, [sp, #24]
 800987e:	9f08      	ldr	r7, [sp, #32]
 8009880:	4645      	mov	r5, r8
 8009882:	e74c      	b.n	800971e <_dtoa_r+0x76e>
 8009884:	9a06      	ldr	r2, [sp, #24]
 8009886:	e775      	b.n	8009774 <_dtoa_r+0x7c4>
 8009888:	9b05      	ldr	r3, [sp, #20]
 800988a:	2b01      	cmp	r3, #1
 800988c:	dc18      	bgt.n	80098c0 <_dtoa_r+0x910>
 800988e:	9b02      	ldr	r3, [sp, #8]
 8009890:	b9b3      	cbnz	r3, 80098c0 <_dtoa_r+0x910>
 8009892:	9b03      	ldr	r3, [sp, #12]
 8009894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009898:	b9a3      	cbnz	r3, 80098c4 <_dtoa_r+0x914>
 800989a:	9b03      	ldr	r3, [sp, #12]
 800989c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098a0:	0d1b      	lsrs	r3, r3, #20
 80098a2:	051b      	lsls	r3, r3, #20
 80098a4:	b12b      	cbz	r3, 80098b2 <_dtoa_r+0x902>
 80098a6:	9b04      	ldr	r3, [sp, #16]
 80098a8:	3301      	adds	r3, #1
 80098aa:	9304      	str	r3, [sp, #16]
 80098ac:	f108 0801 	add.w	r8, r8, #1
 80098b0:	2301      	movs	r3, #1
 80098b2:	9306      	str	r3, [sp, #24]
 80098b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f47f af74 	bne.w	80097a4 <_dtoa_r+0x7f4>
 80098bc:	2001      	movs	r0, #1
 80098be:	e779      	b.n	80097b4 <_dtoa_r+0x804>
 80098c0:	2300      	movs	r3, #0
 80098c2:	e7f6      	b.n	80098b2 <_dtoa_r+0x902>
 80098c4:	9b02      	ldr	r3, [sp, #8]
 80098c6:	e7f4      	b.n	80098b2 <_dtoa_r+0x902>
 80098c8:	d085      	beq.n	80097d6 <_dtoa_r+0x826>
 80098ca:	4618      	mov	r0, r3
 80098cc:	301c      	adds	r0, #28
 80098ce:	e77d      	b.n	80097cc <_dtoa_r+0x81c>
 80098d0:	40240000 	.word	0x40240000
 80098d4:	9b01      	ldr	r3, [sp, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	dc38      	bgt.n	800994c <_dtoa_r+0x99c>
 80098da:	9b05      	ldr	r3, [sp, #20]
 80098dc:	2b02      	cmp	r3, #2
 80098de:	dd35      	ble.n	800994c <_dtoa_r+0x99c>
 80098e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80098e4:	f1b9 0f00 	cmp.w	r9, #0
 80098e8:	d10d      	bne.n	8009906 <_dtoa_r+0x956>
 80098ea:	4631      	mov	r1, r6
 80098ec:	464b      	mov	r3, r9
 80098ee:	2205      	movs	r2, #5
 80098f0:	4620      	mov	r0, r4
 80098f2:	f000 ff65 	bl	800a7c0 <__multadd>
 80098f6:	4601      	mov	r1, r0
 80098f8:	4606      	mov	r6, r0
 80098fa:	4658      	mov	r0, fp
 80098fc:	f001 f9c6 	bl	800ac8c <__mcmp>
 8009900:	2800      	cmp	r0, #0
 8009902:	f73f adbd 	bgt.w	8009480 <_dtoa_r+0x4d0>
 8009906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009908:	9d00      	ldr	r5, [sp, #0]
 800990a:	ea6f 0a03 	mvn.w	sl, r3
 800990e:	f04f 0800 	mov.w	r8, #0
 8009912:	4631      	mov	r1, r6
 8009914:	4620      	mov	r0, r4
 8009916:	f000 ff31 	bl	800a77c <_Bfree>
 800991a:	2f00      	cmp	r7, #0
 800991c:	f43f aeb4 	beq.w	8009688 <_dtoa_r+0x6d8>
 8009920:	f1b8 0f00 	cmp.w	r8, #0
 8009924:	d005      	beq.n	8009932 <_dtoa_r+0x982>
 8009926:	45b8      	cmp	r8, r7
 8009928:	d003      	beq.n	8009932 <_dtoa_r+0x982>
 800992a:	4641      	mov	r1, r8
 800992c:	4620      	mov	r0, r4
 800992e:	f000 ff25 	bl	800a77c <_Bfree>
 8009932:	4639      	mov	r1, r7
 8009934:	4620      	mov	r0, r4
 8009936:	f000 ff21 	bl	800a77c <_Bfree>
 800993a:	e6a5      	b.n	8009688 <_dtoa_r+0x6d8>
 800993c:	2600      	movs	r6, #0
 800993e:	4637      	mov	r7, r6
 8009940:	e7e1      	b.n	8009906 <_dtoa_r+0x956>
 8009942:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009944:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009948:	4637      	mov	r7, r6
 800994a:	e599      	b.n	8009480 <_dtoa_r+0x4d0>
 800994c:	9b08      	ldr	r3, [sp, #32]
 800994e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 80fd 	beq.w	8009b52 <_dtoa_r+0xba2>
 8009958:	2d00      	cmp	r5, #0
 800995a:	dd05      	ble.n	8009968 <_dtoa_r+0x9b8>
 800995c:	4639      	mov	r1, r7
 800995e:	462a      	mov	r2, r5
 8009960:	4620      	mov	r0, r4
 8009962:	f001 f927 	bl	800abb4 <__lshift>
 8009966:	4607      	mov	r7, r0
 8009968:	9b06      	ldr	r3, [sp, #24]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d05c      	beq.n	8009a28 <_dtoa_r+0xa78>
 800996e:	6879      	ldr	r1, [r7, #4]
 8009970:	4620      	mov	r0, r4
 8009972:	f000 fec3 	bl	800a6fc <_Balloc>
 8009976:	4605      	mov	r5, r0
 8009978:	b928      	cbnz	r0, 8009986 <_dtoa_r+0x9d6>
 800997a:	4b80      	ldr	r3, [pc, #512]	; (8009b7c <_dtoa_r+0xbcc>)
 800997c:	4602      	mov	r2, r0
 800997e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009982:	f7ff bb2e 	b.w	8008fe2 <_dtoa_r+0x32>
 8009986:	693a      	ldr	r2, [r7, #16]
 8009988:	3202      	adds	r2, #2
 800998a:	0092      	lsls	r2, r2, #2
 800998c:	f107 010c 	add.w	r1, r7, #12
 8009990:	300c      	adds	r0, #12
 8009992:	f000 fea5 	bl	800a6e0 <memcpy>
 8009996:	2201      	movs	r2, #1
 8009998:	4629      	mov	r1, r5
 800999a:	4620      	mov	r0, r4
 800999c:	f001 f90a 	bl	800abb4 <__lshift>
 80099a0:	9b00      	ldr	r3, [sp, #0]
 80099a2:	3301      	adds	r3, #1
 80099a4:	9301      	str	r3, [sp, #4]
 80099a6:	9b00      	ldr	r3, [sp, #0]
 80099a8:	444b      	add	r3, r9
 80099aa:	9307      	str	r3, [sp, #28]
 80099ac:	9b02      	ldr	r3, [sp, #8]
 80099ae:	f003 0301 	and.w	r3, r3, #1
 80099b2:	46b8      	mov	r8, r7
 80099b4:	9306      	str	r3, [sp, #24]
 80099b6:	4607      	mov	r7, r0
 80099b8:	9b01      	ldr	r3, [sp, #4]
 80099ba:	4631      	mov	r1, r6
 80099bc:	3b01      	subs	r3, #1
 80099be:	4658      	mov	r0, fp
 80099c0:	9302      	str	r3, [sp, #8]
 80099c2:	f7ff fa67 	bl	8008e94 <quorem>
 80099c6:	4603      	mov	r3, r0
 80099c8:	3330      	adds	r3, #48	; 0x30
 80099ca:	9004      	str	r0, [sp, #16]
 80099cc:	4641      	mov	r1, r8
 80099ce:	4658      	mov	r0, fp
 80099d0:	9308      	str	r3, [sp, #32]
 80099d2:	f001 f95b 	bl	800ac8c <__mcmp>
 80099d6:	463a      	mov	r2, r7
 80099d8:	4681      	mov	r9, r0
 80099da:	4631      	mov	r1, r6
 80099dc:	4620      	mov	r0, r4
 80099de:	f001 f971 	bl	800acc4 <__mdiff>
 80099e2:	68c2      	ldr	r2, [r0, #12]
 80099e4:	9b08      	ldr	r3, [sp, #32]
 80099e6:	4605      	mov	r5, r0
 80099e8:	bb02      	cbnz	r2, 8009a2c <_dtoa_r+0xa7c>
 80099ea:	4601      	mov	r1, r0
 80099ec:	4658      	mov	r0, fp
 80099ee:	f001 f94d 	bl	800ac8c <__mcmp>
 80099f2:	9b08      	ldr	r3, [sp, #32]
 80099f4:	4602      	mov	r2, r0
 80099f6:	4629      	mov	r1, r5
 80099f8:	4620      	mov	r0, r4
 80099fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80099fe:	f000 febd 	bl	800a77c <_Bfree>
 8009a02:	9b05      	ldr	r3, [sp, #20]
 8009a04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a06:	9d01      	ldr	r5, [sp, #4]
 8009a08:	ea43 0102 	orr.w	r1, r3, r2
 8009a0c:	9b06      	ldr	r3, [sp, #24]
 8009a0e:	430b      	orrs	r3, r1
 8009a10:	9b08      	ldr	r3, [sp, #32]
 8009a12:	d10d      	bne.n	8009a30 <_dtoa_r+0xa80>
 8009a14:	2b39      	cmp	r3, #57	; 0x39
 8009a16:	d029      	beq.n	8009a6c <_dtoa_r+0xabc>
 8009a18:	f1b9 0f00 	cmp.w	r9, #0
 8009a1c:	dd01      	ble.n	8009a22 <_dtoa_r+0xa72>
 8009a1e:	9b04      	ldr	r3, [sp, #16]
 8009a20:	3331      	adds	r3, #49	; 0x31
 8009a22:	9a02      	ldr	r2, [sp, #8]
 8009a24:	7013      	strb	r3, [r2, #0]
 8009a26:	e774      	b.n	8009912 <_dtoa_r+0x962>
 8009a28:	4638      	mov	r0, r7
 8009a2a:	e7b9      	b.n	80099a0 <_dtoa_r+0x9f0>
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	e7e2      	b.n	80099f6 <_dtoa_r+0xa46>
 8009a30:	f1b9 0f00 	cmp.w	r9, #0
 8009a34:	db06      	blt.n	8009a44 <_dtoa_r+0xa94>
 8009a36:	9905      	ldr	r1, [sp, #20]
 8009a38:	ea41 0909 	orr.w	r9, r1, r9
 8009a3c:	9906      	ldr	r1, [sp, #24]
 8009a3e:	ea59 0101 	orrs.w	r1, r9, r1
 8009a42:	d120      	bne.n	8009a86 <_dtoa_r+0xad6>
 8009a44:	2a00      	cmp	r2, #0
 8009a46:	ddec      	ble.n	8009a22 <_dtoa_r+0xa72>
 8009a48:	4659      	mov	r1, fp
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	9301      	str	r3, [sp, #4]
 8009a50:	f001 f8b0 	bl	800abb4 <__lshift>
 8009a54:	4631      	mov	r1, r6
 8009a56:	4683      	mov	fp, r0
 8009a58:	f001 f918 	bl	800ac8c <__mcmp>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	9b01      	ldr	r3, [sp, #4]
 8009a60:	dc02      	bgt.n	8009a68 <_dtoa_r+0xab8>
 8009a62:	d1de      	bne.n	8009a22 <_dtoa_r+0xa72>
 8009a64:	07da      	lsls	r2, r3, #31
 8009a66:	d5dc      	bpl.n	8009a22 <_dtoa_r+0xa72>
 8009a68:	2b39      	cmp	r3, #57	; 0x39
 8009a6a:	d1d8      	bne.n	8009a1e <_dtoa_r+0xa6e>
 8009a6c:	9a02      	ldr	r2, [sp, #8]
 8009a6e:	2339      	movs	r3, #57	; 0x39
 8009a70:	7013      	strb	r3, [r2, #0]
 8009a72:	462b      	mov	r3, r5
 8009a74:	461d      	mov	r5, r3
 8009a76:	3b01      	subs	r3, #1
 8009a78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a7c:	2a39      	cmp	r2, #57	; 0x39
 8009a7e:	d050      	beq.n	8009b22 <_dtoa_r+0xb72>
 8009a80:	3201      	adds	r2, #1
 8009a82:	701a      	strb	r2, [r3, #0]
 8009a84:	e745      	b.n	8009912 <_dtoa_r+0x962>
 8009a86:	2a00      	cmp	r2, #0
 8009a88:	dd03      	ble.n	8009a92 <_dtoa_r+0xae2>
 8009a8a:	2b39      	cmp	r3, #57	; 0x39
 8009a8c:	d0ee      	beq.n	8009a6c <_dtoa_r+0xabc>
 8009a8e:	3301      	adds	r3, #1
 8009a90:	e7c7      	b.n	8009a22 <_dtoa_r+0xa72>
 8009a92:	9a01      	ldr	r2, [sp, #4]
 8009a94:	9907      	ldr	r1, [sp, #28]
 8009a96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009a9a:	428a      	cmp	r2, r1
 8009a9c:	d02a      	beq.n	8009af4 <_dtoa_r+0xb44>
 8009a9e:	4659      	mov	r1, fp
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	220a      	movs	r2, #10
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f000 fe8b 	bl	800a7c0 <__multadd>
 8009aaa:	45b8      	cmp	r8, r7
 8009aac:	4683      	mov	fp, r0
 8009aae:	f04f 0300 	mov.w	r3, #0
 8009ab2:	f04f 020a 	mov.w	r2, #10
 8009ab6:	4641      	mov	r1, r8
 8009ab8:	4620      	mov	r0, r4
 8009aba:	d107      	bne.n	8009acc <_dtoa_r+0xb1c>
 8009abc:	f000 fe80 	bl	800a7c0 <__multadd>
 8009ac0:	4680      	mov	r8, r0
 8009ac2:	4607      	mov	r7, r0
 8009ac4:	9b01      	ldr	r3, [sp, #4]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	9301      	str	r3, [sp, #4]
 8009aca:	e775      	b.n	80099b8 <_dtoa_r+0xa08>
 8009acc:	f000 fe78 	bl	800a7c0 <__multadd>
 8009ad0:	4639      	mov	r1, r7
 8009ad2:	4680      	mov	r8, r0
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	220a      	movs	r2, #10
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f000 fe71 	bl	800a7c0 <__multadd>
 8009ade:	4607      	mov	r7, r0
 8009ae0:	e7f0      	b.n	8009ac4 <_dtoa_r+0xb14>
 8009ae2:	f1b9 0f00 	cmp.w	r9, #0
 8009ae6:	9a00      	ldr	r2, [sp, #0]
 8009ae8:	bfcc      	ite	gt
 8009aea:	464d      	movgt	r5, r9
 8009aec:	2501      	movle	r5, #1
 8009aee:	4415      	add	r5, r2
 8009af0:	f04f 0800 	mov.w	r8, #0
 8009af4:	4659      	mov	r1, fp
 8009af6:	2201      	movs	r2, #1
 8009af8:	4620      	mov	r0, r4
 8009afa:	9301      	str	r3, [sp, #4]
 8009afc:	f001 f85a 	bl	800abb4 <__lshift>
 8009b00:	4631      	mov	r1, r6
 8009b02:	4683      	mov	fp, r0
 8009b04:	f001 f8c2 	bl	800ac8c <__mcmp>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	dcb2      	bgt.n	8009a72 <_dtoa_r+0xac2>
 8009b0c:	d102      	bne.n	8009b14 <_dtoa_r+0xb64>
 8009b0e:	9b01      	ldr	r3, [sp, #4]
 8009b10:	07db      	lsls	r3, r3, #31
 8009b12:	d4ae      	bmi.n	8009a72 <_dtoa_r+0xac2>
 8009b14:	462b      	mov	r3, r5
 8009b16:	461d      	mov	r5, r3
 8009b18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b1c:	2a30      	cmp	r2, #48	; 0x30
 8009b1e:	d0fa      	beq.n	8009b16 <_dtoa_r+0xb66>
 8009b20:	e6f7      	b.n	8009912 <_dtoa_r+0x962>
 8009b22:	9a00      	ldr	r2, [sp, #0]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d1a5      	bne.n	8009a74 <_dtoa_r+0xac4>
 8009b28:	f10a 0a01 	add.w	sl, sl, #1
 8009b2c:	2331      	movs	r3, #49	; 0x31
 8009b2e:	e779      	b.n	8009a24 <_dtoa_r+0xa74>
 8009b30:	4b13      	ldr	r3, [pc, #76]	; (8009b80 <_dtoa_r+0xbd0>)
 8009b32:	f7ff baaf 	b.w	8009094 <_dtoa_r+0xe4>
 8009b36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f47f aa86 	bne.w	800904a <_dtoa_r+0x9a>
 8009b3e:	4b11      	ldr	r3, [pc, #68]	; (8009b84 <_dtoa_r+0xbd4>)
 8009b40:	f7ff baa8 	b.w	8009094 <_dtoa_r+0xe4>
 8009b44:	f1b9 0f00 	cmp.w	r9, #0
 8009b48:	dc03      	bgt.n	8009b52 <_dtoa_r+0xba2>
 8009b4a:	9b05      	ldr	r3, [sp, #20]
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	f73f aec9 	bgt.w	80098e4 <_dtoa_r+0x934>
 8009b52:	9d00      	ldr	r5, [sp, #0]
 8009b54:	4631      	mov	r1, r6
 8009b56:	4658      	mov	r0, fp
 8009b58:	f7ff f99c 	bl	8008e94 <quorem>
 8009b5c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009b60:	f805 3b01 	strb.w	r3, [r5], #1
 8009b64:	9a00      	ldr	r2, [sp, #0]
 8009b66:	1aaa      	subs	r2, r5, r2
 8009b68:	4591      	cmp	r9, r2
 8009b6a:	ddba      	ble.n	8009ae2 <_dtoa_r+0xb32>
 8009b6c:	4659      	mov	r1, fp
 8009b6e:	2300      	movs	r3, #0
 8009b70:	220a      	movs	r2, #10
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 fe24 	bl	800a7c0 <__multadd>
 8009b78:	4683      	mov	fp, r0
 8009b7a:	e7eb      	b.n	8009b54 <_dtoa_r+0xba4>
 8009b7c:	0800e163 	.word	0x0800e163
 8009b80:	0800e068 	.word	0x0800e068
 8009b84:	0800e0e0 	.word	0x0800e0e0

08009b88 <__sflush_r>:
 8009b88:	898a      	ldrh	r2, [r1, #12]
 8009b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b8e:	4605      	mov	r5, r0
 8009b90:	0710      	lsls	r0, r2, #28
 8009b92:	460c      	mov	r4, r1
 8009b94:	d458      	bmi.n	8009c48 <__sflush_r+0xc0>
 8009b96:	684b      	ldr	r3, [r1, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	dc05      	bgt.n	8009ba8 <__sflush_r+0x20>
 8009b9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	dc02      	bgt.n	8009ba8 <__sflush_r+0x20>
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ba8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009baa:	2e00      	cmp	r6, #0
 8009bac:	d0f9      	beq.n	8009ba2 <__sflush_r+0x1a>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009bb4:	682f      	ldr	r7, [r5, #0]
 8009bb6:	602b      	str	r3, [r5, #0]
 8009bb8:	d032      	beq.n	8009c20 <__sflush_r+0x98>
 8009bba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	075a      	lsls	r2, r3, #29
 8009bc0:	d505      	bpl.n	8009bce <__sflush_r+0x46>
 8009bc2:	6863      	ldr	r3, [r4, #4]
 8009bc4:	1ac0      	subs	r0, r0, r3
 8009bc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bc8:	b10b      	cbz	r3, 8009bce <__sflush_r+0x46>
 8009bca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bcc:	1ac0      	subs	r0, r0, r3
 8009bce:	2300      	movs	r3, #0
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bd4:	6a21      	ldr	r1, [r4, #32]
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	47b0      	blx	r6
 8009bda:	1c43      	adds	r3, r0, #1
 8009bdc:	89a3      	ldrh	r3, [r4, #12]
 8009bde:	d106      	bne.n	8009bee <__sflush_r+0x66>
 8009be0:	6829      	ldr	r1, [r5, #0]
 8009be2:	291d      	cmp	r1, #29
 8009be4:	d82c      	bhi.n	8009c40 <__sflush_r+0xb8>
 8009be6:	4a2a      	ldr	r2, [pc, #168]	; (8009c90 <__sflush_r+0x108>)
 8009be8:	40ca      	lsrs	r2, r1
 8009bea:	07d6      	lsls	r6, r2, #31
 8009bec:	d528      	bpl.n	8009c40 <__sflush_r+0xb8>
 8009bee:	2200      	movs	r2, #0
 8009bf0:	6062      	str	r2, [r4, #4]
 8009bf2:	04d9      	lsls	r1, r3, #19
 8009bf4:	6922      	ldr	r2, [r4, #16]
 8009bf6:	6022      	str	r2, [r4, #0]
 8009bf8:	d504      	bpl.n	8009c04 <__sflush_r+0x7c>
 8009bfa:	1c42      	adds	r2, r0, #1
 8009bfc:	d101      	bne.n	8009c02 <__sflush_r+0x7a>
 8009bfe:	682b      	ldr	r3, [r5, #0]
 8009c00:	b903      	cbnz	r3, 8009c04 <__sflush_r+0x7c>
 8009c02:	6560      	str	r0, [r4, #84]	; 0x54
 8009c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c06:	602f      	str	r7, [r5, #0]
 8009c08:	2900      	cmp	r1, #0
 8009c0a:	d0ca      	beq.n	8009ba2 <__sflush_r+0x1a>
 8009c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c10:	4299      	cmp	r1, r3
 8009c12:	d002      	beq.n	8009c1a <__sflush_r+0x92>
 8009c14:	4628      	mov	r0, r5
 8009c16:	f001 fa3b 	bl	800b090 <_free_r>
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	6360      	str	r0, [r4, #52]	; 0x34
 8009c1e:	e7c1      	b.n	8009ba4 <__sflush_r+0x1c>
 8009c20:	6a21      	ldr	r1, [r4, #32]
 8009c22:	2301      	movs	r3, #1
 8009c24:	4628      	mov	r0, r5
 8009c26:	47b0      	blx	r6
 8009c28:	1c41      	adds	r1, r0, #1
 8009c2a:	d1c7      	bne.n	8009bbc <__sflush_r+0x34>
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d0c4      	beq.n	8009bbc <__sflush_r+0x34>
 8009c32:	2b1d      	cmp	r3, #29
 8009c34:	d001      	beq.n	8009c3a <__sflush_r+0xb2>
 8009c36:	2b16      	cmp	r3, #22
 8009c38:	d101      	bne.n	8009c3e <__sflush_r+0xb6>
 8009c3a:	602f      	str	r7, [r5, #0]
 8009c3c:	e7b1      	b.n	8009ba2 <__sflush_r+0x1a>
 8009c3e:	89a3      	ldrh	r3, [r4, #12]
 8009c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c44:	81a3      	strh	r3, [r4, #12]
 8009c46:	e7ad      	b.n	8009ba4 <__sflush_r+0x1c>
 8009c48:	690f      	ldr	r7, [r1, #16]
 8009c4a:	2f00      	cmp	r7, #0
 8009c4c:	d0a9      	beq.n	8009ba2 <__sflush_r+0x1a>
 8009c4e:	0793      	lsls	r3, r2, #30
 8009c50:	680e      	ldr	r6, [r1, #0]
 8009c52:	bf08      	it	eq
 8009c54:	694b      	ldreq	r3, [r1, #20]
 8009c56:	600f      	str	r7, [r1, #0]
 8009c58:	bf18      	it	ne
 8009c5a:	2300      	movne	r3, #0
 8009c5c:	eba6 0807 	sub.w	r8, r6, r7
 8009c60:	608b      	str	r3, [r1, #8]
 8009c62:	f1b8 0f00 	cmp.w	r8, #0
 8009c66:	dd9c      	ble.n	8009ba2 <__sflush_r+0x1a>
 8009c68:	6a21      	ldr	r1, [r4, #32]
 8009c6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c6c:	4643      	mov	r3, r8
 8009c6e:	463a      	mov	r2, r7
 8009c70:	4628      	mov	r0, r5
 8009c72:	47b0      	blx	r6
 8009c74:	2800      	cmp	r0, #0
 8009c76:	dc06      	bgt.n	8009c86 <__sflush_r+0xfe>
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c7e:	81a3      	strh	r3, [r4, #12]
 8009c80:	f04f 30ff 	mov.w	r0, #4294967295
 8009c84:	e78e      	b.n	8009ba4 <__sflush_r+0x1c>
 8009c86:	4407      	add	r7, r0
 8009c88:	eba8 0800 	sub.w	r8, r8, r0
 8009c8c:	e7e9      	b.n	8009c62 <__sflush_r+0xda>
 8009c8e:	bf00      	nop
 8009c90:	20400001 	.word	0x20400001

08009c94 <_fflush_r>:
 8009c94:	b538      	push	{r3, r4, r5, lr}
 8009c96:	690b      	ldr	r3, [r1, #16]
 8009c98:	4605      	mov	r5, r0
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	b913      	cbnz	r3, 8009ca4 <_fflush_r+0x10>
 8009c9e:	2500      	movs	r5, #0
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	bd38      	pop	{r3, r4, r5, pc}
 8009ca4:	b118      	cbz	r0, 8009cae <_fflush_r+0x1a>
 8009ca6:	6983      	ldr	r3, [r0, #24]
 8009ca8:	b90b      	cbnz	r3, 8009cae <_fflush_r+0x1a>
 8009caa:	f000 f887 	bl	8009dbc <__sinit>
 8009cae:	4b14      	ldr	r3, [pc, #80]	; (8009d00 <_fflush_r+0x6c>)
 8009cb0:	429c      	cmp	r4, r3
 8009cb2:	d11b      	bne.n	8009cec <_fflush_r+0x58>
 8009cb4:	686c      	ldr	r4, [r5, #4]
 8009cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d0ef      	beq.n	8009c9e <_fflush_r+0xa>
 8009cbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009cc0:	07d0      	lsls	r0, r2, #31
 8009cc2:	d404      	bmi.n	8009cce <_fflush_r+0x3a>
 8009cc4:	0599      	lsls	r1, r3, #22
 8009cc6:	d402      	bmi.n	8009cce <_fflush_r+0x3a>
 8009cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cca:	f000 fc88 	bl	800a5de <__retarget_lock_acquire_recursive>
 8009cce:	4628      	mov	r0, r5
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	f7ff ff59 	bl	8009b88 <__sflush_r>
 8009cd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cd8:	07da      	lsls	r2, r3, #31
 8009cda:	4605      	mov	r5, r0
 8009cdc:	d4e0      	bmi.n	8009ca0 <_fflush_r+0xc>
 8009cde:	89a3      	ldrh	r3, [r4, #12]
 8009ce0:	059b      	lsls	r3, r3, #22
 8009ce2:	d4dd      	bmi.n	8009ca0 <_fflush_r+0xc>
 8009ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ce6:	f000 fc7b 	bl	800a5e0 <__retarget_lock_release_recursive>
 8009cea:	e7d9      	b.n	8009ca0 <_fflush_r+0xc>
 8009cec:	4b05      	ldr	r3, [pc, #20]	; (8009d04 <_fflush_r+0x70>)
 8009cee:	429c      	cmp	r4, r3
 8009cf0:	d101      	bne.n	8009cf6 <_fflush_r+0x62>
 8009cf2:	68ac      	ldr	r4, [r5, #8]
 8009cf4:	e7df      	b.n	8009cb6 <_fflush_r+0x22>
 8009cf6:	4b04      	ldr	r3, [pc, #16]	; (8009d08 <_fflush_r+0x74>)
 8009cf8:	429c      	cmp	r4, r3
 8009cfa:	bf08      	it	eq
 8009cfc:	68ec      	ldreq	r4, [r5, #12]
 8009cfe:	e7da      	b.n	8009cb6 <_fflush_r+0x22>
 8009d00:	0800e194 	.word	0x0800e194
 8009d04:	0800e1b4 	.word	0x0800e1b4
 8009d08:	0800e174 	.word	0x0800e174

08009d0c <std>:
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	b510      	push	{r4, lr}
 8009d10:	4604      	mov	r4, r0
 8009d12:	e9c0 3300 	strd	r3, r3, [r0]
 8009d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d1a:	6083      	str	r3, [r0, #8]
 8009d1c:	8181      	strh	r1, [r0, #12]
 8009d1e:	6643      	str	r3, [r0, #100]	; 0x64
 8009d20:	81c2      	strh	r2, [r0, #14]
 8009d22:	6183      	str	r3, [r0, #24]
 8009d24:	4619      	mov	r1, r3
 8009d26:	2208      	movs	r2, #8
 8009d28:	305c      	adds	r0, #92	; 0x5c
 8009d2a:	f7fd fcbf 	bl	80076ac <memset>
 8009d2e:	4b05      	ldr	r3, [pc, #20]	; (8009d44 <std+0x38>)
 8009d30:	6263      	str	r3, [r4, #36]	; 0x24
 8009d32:	4b05      	ldr	r3, [pc, #20]	; (8009d48 <std+0x3c>)
 8009d34:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d36:	4b05      	ldr	r3, [pc, #20]	; (8009d4c <std+0x40>)
 8009d38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d3a:	4b05      	ldr	r3, [pc, #20]	; (8009d50 <std+0x44>)
 8009d3c:	6224      	str	r4, [r4, #32]
 8009d3e:	6323      	str	r3, [r4, #48]	; 0x30
 8009d40:	bd10      	pop	{r4, pc}
 8009d42:	bf00      	nop
 8009d44:	0800b4c9 	.word	0x0800b4c9
 8009d48:	0800b4eb 	.word	0x0800b4eb
 8009d4c:	0800b523 	.word	0x0800b523
 8009d50:	0800b547 	.word	0x0800b547

08009d54 <_cleanup_r>:
 8009d54:	4901      	ldr	r1, [pc, #4]	; (8009d5c <_cleanup_r+0x8>)
 8009d56:	f000 b8af 	b.w	8009eb8 <_fwalk_reent>
 8009d5a:	bf00      	nop
 8009d5c:	08009c95 	.word	0x08009c95

08009d60 <__sfmoreglue>:
 8009d60:	b570      	push	{r4, r5, r6, lr}
 8009d62:	1e4a      	subs	r2, r1, #1
 8009d64:	2568      	movs	r5, #104	; 0x68
 8009d66:	4355      	muls	r5, r2
 8009d68:	460e      	mov	r6, r1
 8009d6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d6e:	f001 f9df 	bl	800b130 <_malloc_r>
 8009d72:	4604      	mov	r4, r0
 8009d74:	b140      	cbz	r0, 8009d88 <__sfmoreglue+0x28>
 8009d76:	2100      	movs	r1, #0
 8009d78:	e9c0 1600 	strd	r1, r6, [r0]
 8009d7c:	300c      	adds	r0, #12
 8009d7e:	60a0      	str	r0, [r4, #8]
 8009d80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d84:	f7fd fc92 	bl	80076ac <memset>
 8009d88:	4620      	mov	r0, r4
 8009d8a:	bd70      	pop	{r4, r5, r6, pc}

08009d8c <__sfp_lock_acquire>:
 8009d8c:	4801      	ldr	r0, [pc, #4]	; (8009d94 <__sfp_lock_acquire+0x8>)
 8009d8e:	f000 bc26 	b.w	800a5de <__retarget_lock_acquire_recursive>
 8009d92:	bf00      	nop
 8009d94:	20000668 	.word	0x20000668

08009d98 <__sfp_lock_release>:
 8009d98:	4801      	ldr	r0, [pc, #4]	; (8009da0 <__sfp_lock_release+0x8>)
 8009d9a:	f000 bc21 	b.w	800a5e0 <__retarget_lock_release_recursive>
 8009d9e:	bf00      	nop
 8009da0:	20000668 	.word	0x20000668

08009da4 <__sinit_lock_acquire>:
 8009da4:	4801      	ldr	r0, [pc, #4]	; (8009dac <__sinit_lock_acquire+0x8>)
 8009da6:	f000 bc1a 	b.w	800a5de <__retarget_lock_acquire_recursive>
 8009daa:	bf00      	nop
 8009dac:	20000663 	.word	0x20000663

08009db0 <__sinit_lock_release>:
 8009db0:	4801      	ldr	r0, [pc, #4]	; (8009db8 <__sinit_lock_release+0x8>)
 8009db2:	f000 bc15 	b.w	800a5e0 <__retarget_lock_release_recursive>
 8009db6:	bf00      	nop
 8009db8:	20000663 	.word	0x20000663

08009dbc <__sinit>:
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	f7ff fff0 	bl	8009da4 <__sinit_lock_acquire>
 8009dc4:	69a3      	ldr	r3, [r4, #24]
 8009dc6:	b11b      	cbz	r3, 8009dd0 <__sinit+0x14>
 8009dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dcc:	f7ff bff0 	b.w	8009db0 <__sinit_lock_release>
 8009dd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009dd4:	6523      	str	r3, [r4, #80]	; 0x50
 8009dd6:	4b13      	ldr	r3, [pc, #76]	; (8009e24 <__sinit+0x68>)
 8009dd8:	4a13      	ldr	r2, [pc, #76]	; (8009e28 <__sinit+0x6c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009dde:	42a3      	cmp	r3, r4
 8009de0:	bf04      	itt	eq
 8009de2:	2301      	moveq	r3, #1
 8009de4:	61a3      	streq	r3, [r4, #24]
 8009de6:	4620      	mov	r0, r4
 8009de8:	f000 f820 	bl	8009e2c <__sfp>
 8009dec:	6060      	str	r0, [r4, #4]
 8009dee:	4620      	mov	r0, r4
 8009df0:	f000 f81c 	bl	8009e2c <__sfp>
 8009df4:	60a0      	str	r0, [r4, #8]
 8009df6:	4620      	mov	r0, r4
 8009df8:	f000 f818 	bl	8009e2c <__sfp>
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	60e0      	str	r0, [r4, #12]
 8009e00:	2104      	movs	r1, #4
 8009e02:	6860      	ldr	r0, [r4, #4]
 8009e04:	f7ff ff82 	bl	8009d0c <std>
 8009e08:	68a0      	ldr	r0, [r4, #8]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	2109      	movs	r1, #9
 8009e0e:	f7ff ff7d 	bl	8009d0c <std>
 8009e12:	68e0      	ldr	r0, [r4, #12]
 8009e14:	2202      	movs	r2, #2
 8009e16:	2112      	movs	r1, #18
 8009e18:	f7ff ff78 	bl	8009d0c <std>
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	61a3      	str	r3, [r4, #24]
 8009e20:	e7d2      	b.n	8009dc8 <__sinit+0xc>
 8009e22:	bf00      	nop
 8009e24:	0800e054 	.word	0x0800e054
 8009e28:	08009d55 	.word	0x08009d55

08009e2c <__sfp>:
 8009e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2e:	4607      	mov	r7, r0
 8009e30:	f7ff ffac 	bl	8009d8c <__sfp_lock_acquire>
 8009e34:	4b1e      	ldr	r3, [pc, #120]	; (8009eb0 <__sfp+0x84>)
 8009e36:	681e      	ldr	r6, [r3, #0]
 8009e38:	69b3      	ldr	r3, [r6, #24]
 8009e3a:	b913      	cbnz	r3, 8009e42 <__sfp+0x16>
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	f7ff ffbd 	bl	8009dbc <__sinit>
 8009e42:	3648      	adds	r6, #72	; 0x48
 8009e44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	d503      	bpl.n	8009e54 <__sfp+0x28>
 8009e4c:	6833      	ldr	r3, [r6, #0]
 8009e4e:	b30b      	cbz	r3, 8009e94 <__sfp+0x68>
 8009e50:	6836      	ldr	r6, [r6, #0]
 8009e52:	e7f7      	b.n	8009e44 <__sfp+0x18>
 8009e54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e58:	b9d5      	cbnz	r5, 8009e90 <__sfp+0x64>
 8009e5a:	4b16      	ldr	r3, [pc, #88]	; (8009eb4 <__sfp+0x88>)
 8009e5c:	60e3      	str	r3, [r4, #12]
 8009e5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e62:	6665      	str	r5, [r4, #100]	; 0x64
 8009e64:	f000 fbba 	bl	800a5dc <__retarget_lock_init_recursive>
 8009e68:	f7ff ff96 	bl	8009d98 <__sfp_lock_release>
 8009e6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e74:	6025      	str	r5, [r4, #0]
 8009e76:	61a5      	str	r5, [r4, #24]
 8009e78:	2208      	movs	r2, #8
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e80:	f7fd fc14 	bl	80076ac <memset>
 8009e84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e90:	3468      	adds	r4, #104	; 0x68
 8009e92:	e7d9      	b.n	8009e48 <__sfp+0x1c>
 8009e94:	2104      	movs	r1, #4
 8009e96:	4638      	mov	r0, r7
 8009e98:	f7ff ff62 	bl	8009d60 <__sfmoreglue>
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	6030      	str	r0, [r6, #0]
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d1d5      	bne.n	8009e50 <__sfp+0x24>
 8009ea4:	f7ff ff78 	bl	8009d98 <__sfp_lock_release>
 8009ea8:	230c      	movs	r3, #12
 8009eaa:	603b      	str	r3, [r7, #0]
 8009eac:	e7ee      	b.n	8009e8c <__sfp+0x60>
 8009eae:	bf00      	nop
 8009eb0:	0800e054 	.word	0x0800e054
 8009eb4:	ffff0001 	.word	0xffff0001

08009eb8 <_fwalk_reent>:
 8009eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	4688      	mov	r8, r1
 8009ec0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ec4:	2700      	movs	r7, #0
 8009ec6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009eca:	f1b9 0901 	subs.w	r9, r9, #1
 8009ece:	d505      	bpl.n	8009edc <_fwalk_reent+0x24>
 8009ed0:	6824      	ldr	r4, [r4, #0]
 8009ed2:	2c00      	cmp	r4, #0
 8009ed4:	d1f7      	bne.n	8009ec6 <_fwalk_reent+0xe>
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009edc:	89ab      	ldrh	r3, [r5, #12]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d907      	bls.n	8009ef2 <_fwalk_reent+0x3a>
 8009ee2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	d003      	beq.n	8009ef2 <_fwalk_reent+0x3a>
 8009eea:	4629      	mov	r1, r5
 8009eec:	4630      	mov	r0, r6
 8009eee:	47c0      	blx	r8
 8009ef0:	4307      	orrs	r7, r0
 8009ef2:	3568      	adds	r5, #104	; 0x68
 8009ef4:	e7e9      	b.n	8009eca <_fwalk_reent+0x12>

08009ef6 <rshift>:
 8009ef6:	6903      	ldr	r3, [r0, #16]
 8009ef8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f00:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009f04:	f100 0414 	add.w	r4, r0, #20
 8009f08:	dd45      	ble.n	8009f96 <rshift+0xa0>
 8009f0a:	f011 011f 	ands.w	r1, r1, #31
 8009f0e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009f12:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009f16:	d10c      	bne.n	8009f32 <rshift+0x3c>
 8009f18:	f100 0710 	add.w	r7, r0, #16
 8009f1c:	4629      	mov	r1, r5
 8009f1e:	42b1      	cmp	r1, r6
 8009f20:	d334      	bcc.n	8009f8c <rshift+0x96>
 8009f22:	1a9b      	subs	r3, r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	1eea      	subs	r2, r5, #3
 8009f28:	4296      	cmp	r6, r2
 8009f2a:	bf38      	it	cc
 8009f2c:	2300      	movcc	r3, #0
 8009f2e:	4423      	add	r3, r4
 8009f30:	e015      	b.n	8009f5e <rshift+0x68>
 8009f32:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f36:	f1c1 0820 	rsb	r8, r1, #32
 8009f3a:	40cf      	lsrs	r7, r1
 8009f3c:	f105 0e04 	add.w	lr, r5, #4
 8009f40:	46a1      	mov	r9, r4
 8009f42:	4576      	cmp	r6, lr
 8009f44:	46f4      	mov	ip, lr
 8009f46:	d815      	bhi.n	8009f74 <rshift+0x7e>
 8009f48:	1a9b      	subs	r3, r3, r2
 8009f4a:	009a      	lsls	r2, r3, #2
 8009f4c:	3a04      	subs	r2, #4
 8009f4e:	3501      	adds	r5, #1
 8009f50:	42ae      	cmp	r6, r5
 8009f52:	bf38      	it	cc
 8009f54:	2200      	movcc	r2, #0
 8009f56:	18a3      	adds	r3, r4, r2
 8009f58:	50a7      	str	r7, [r4, r2]
 8009f5a:	b107      	cbz	r7, 8009f5e <rshift+0x68>
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	1b1a      	subs	r2, r3, r4
 8009f60:	42a3      	cmp	r3, r4
 8009f62:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f66:	bf08      	it	eq
 8009f68:	2300      	moveq	r3, #0
 8009f6a:	6102      	str	r2, [r0, #16]
 8009f6c:	bf08      	it	eq
 8009f6e:	6143      	streq	r3, [r0, #20]
 8009f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f74:	f8dc c000 	ldr.w	ip, [ip]
 8009f78:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f7c:	ea4c 0707 	orr.w	r7, ip, r7
 8009f80:	f849 7b04 	str.w	r7, [r9], #4
 8009f84:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f88:	40cf      	lsrs	r7, r1
 8009f8a:	e7da      	b.n	8009f42 <rshift+0x4c>
 8009f8c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f90:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f94:	e7c3      	b.n	8009f1e <rshift+0x28>
 8009f96:	4623      	mov	r3, r4
 8009f98:	e7e1      	b.n	8009f5e <rshift+0x68>

08009f9a <__hexdig_fun>:
 8009f9a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009f9e:	2b09      	cmp	r3, #9
 8009fa0:	d802      	bhi.n	8009fa8 <__hexdig_fun+0xe>
 8009fa2:	3820      	subs	r0, #32
 8009fa4:	b2c0      	uxtb	r0, r0
 8009fa6:	4770      	bx	lr
 8009fa8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009fac:	2b05      	cmp	r3, #5
 8009fae:	d801      	bhi.n	8009fb4 <__hexdig_fun+0x1a>
 8009fb0:	3847      	subs	r0, #71	; 0x47
 8009fb2:	e7f7      	b.n	8009fa4 <__hexdig_fun+0xa>
 8009fb4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009fb8:	2b05      	cmp	r3, #5
 8009fba:	d801      	bhi.n	8009fc0 <__hexdig_fun+0x26>
 8009fbc:	3827      	subs	r0, #39	; 0x27
 8009fbe:	e7f1      	b.n	8009fa4 <__hexdig_fun+0xa>
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	4770      	bx	lr

08009fc4 <__gethex>:
 8009fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc8:	ed2d 8b02 	vpush	{d8}
 8009fcc:	b089      	sub	sp, #36	; 0x24
 8009fce:	ee08 0a10 	vmov	s16, r0
 8009fd2:	9304      	str	r3, [sp, #16]
 8009fd4:	4bbc      	ldr	r3, [pc, #752]	; (800a2c8 <__gethex+0x304>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	9301      	str	r3, [sp, #4]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	468b      	mov	fp, r1
 8009fde:	4690      	mov	r8, r2
 8009fe0:	f7f6 f920 	bl	8000224 <strlen>
 8009fe4:	9b01      	ldr	r3, [sp, #4]
 8009fe6:	f8db 2000 	ldr.w	r2, [fp]
 8009fea:	4403      	add	r3, r0
 8009fec:	4682      	mov	sl, r0
 8009fee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009ff2:	9305      	str	r3, [sp, #20]
 8009ff4:	1c93      	adds	r3, r2, #2
 8009ff6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009ffa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009ffe:	32fe      	adds	r2, #254	; 0xfe
 800a000:	18d1      	adds	r1, r2, r3
 800a002:	461f      	mov	r7, r3
 800a004:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a008:	9100      	str	r1, [sp, #0]
 800a00a:	2830      	cmp	r0, #48	; 0x30
 800a00c:	d0f8      	beq.n	800a000 <__gethex+0x3c>
 800a00e:	f7ff ffc4 	bl	8009f9a <__hexdig_fun>
 800a012:	4604      	mov	r4, r0
 800a014:	2800      	cmp	r0, #0
 800a016:	d13a      	bne.n	800a08e <__gethex+0xca>
 800a018:	9901      	ldr	r1, [sp, #4]
 800a01a:	4652      	mov	r2, sl
 800a01c:	4638      	mov	r0, r7
 800a01e:	f001 fa96 	bl	800b54e <strncmp>
 800a022:	4605      	mov	r5, r0
 800a024:	2800      	cmp	r0, #0
 800a026:	d168      	bne.n	800a0fa <__gethex+0x136>
 800a028:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a02c:	eb07 060a 	add.w	r6, r7, sl
 800a030:	f7ff ffb3 	bl	8009f9a <__hexdig_fun>
 800a034:	2800      	cmp	r0, #0
 800a036:	d062      	beq.n	800a0fe <__gethex+0x13a>
 800a038:	4633      	mov	r3, r6
 800a03a:	7818      	ldrb	r0, [r3, #0]
 800a03c:	2830      	cmp	r0, #48	; 0x30
 800a03e:	461f      	mov	r7, r3
 800a040:	f103 0301 	add.w	r3, r3, #1
 800a044:	d0f9      	beq.n	800a03a <__gethex+0x76>
 800a046:	f7ff ffa8 	bl	8009f9a <__hexdig_fun>
 800a04a:	2301      	movs	r3, #1
 800a04c:	fab0 f480 	clz	r4, r0
 800a050:	0964      	lsrs	r4, r4, #5
 800a052:	4635      	mov	r5, r6
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	463a      	mov	r2, r7
 800a058:	4616      	mov	r6, r2
 800a05a:	3201      	adds	r2, #1
 800a05c:	7830      	ldrb	r0, [r6, #0]
 800a05e:	f7ff ff9c 	bl	8009f9a <__hexdig_fun>
 800a062:	2800      	cmp	r0, #0
 800a064:	d1f8      	bne.n	800a058 <__gethex+0x94>
 800a066:	9901      	ldr	r1, [sp, #4]
 800a068:	4652      	mov	r2, sl
 800a06a:	4630      	mov	r0, r6
 800a06c:	f001 fa6f 	bl	800b54e <strncmp>
 800a070:	b980      	cbnz	r0, 800a094 <__gethex+0xd0>
 800a072:	b94d      	cbnz	r5, 800a088 <__gethex+0xc4>
 800a074:	eb06 050a 	add.w	r5, r6, sl
 800a078:	462a      	mov	r2, r5
 800a07a:	4616      	mov	r6, r2
 800a07c:	3201      	adds	r2, #1
 800a07e:	7830      	ldrb	r0, [r6, #0]
 800a080:	f7ff ff8b 	bl	8009f9a <__hexdig_fun>
 800a084:	2800      	cmp	r0, #0
 800a086:	d1f8      	bne.n	800a07a <__gethex+0xb6>
 800a088:	1bad      	subs	r5, r5, r6
 800a08a:	00ad      	lsls	r5, r5, #2
 800a08c:	e004      	b.n	800a098 <__gethex+0xd4>
 800a08e:	2400      	movs	r4, #0
 800a090:	4625      	mov	r5, r4
 800a092:	e7e0      	b.n	800a056 <__gethex+0x92>
 800a094:	2d00      	cmp	r5, #0
 800a096:	d1f7      	bne.n	800a088 <__gethex+0xc4>
 800a098:	7833      	ldrb	r3, [r6, #0]
 800a09a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a09e:	2b50      	cmp	r3, #80	; 0x50
 800a0a0:	d13b      	bne.n	800a11a <__gethex+0x156>
 800a0a2:	7873      	ldrb	r3, [r6, #1]
 800a0a4:	2b2b      	cmp	r3, #43	; 0x2b
 800a0a6:	d02c      	beq.n	800a102 <__gethex+0x13e>
 800a0a8:	2b2d      	cmp	r3, #45	; 0x2d
 800a0aa:	d02e      	beq.n	800a10a <__gethex+0x146>
 800a0ac:	1c71      	adds	r1, r6, #1
 800a0ae:	f04f 0900 	mov.w	r9, #0
 800a0b2:	7808      	ldrb	r0, [r1, #0]
 800a0b4:	f7ff ff71 	bl	8009f9a <__hexdig_fun>
 800a0b8:	1e43      	subs	r3, r0, #1
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b18      	cmp	r3, #24
 800a0be:	d82c      	bhi.n	800a11a <__gethex+0x156>
 800a0c0:	f1a0 0210 	sub.w	r2, r0, #16
 800a0c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a0c8:	f7ff ff67 	bl	8009f9a <__hexdig_fun>
 800a0cc:	1e43      	subs	r3, r0, #1
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	2b18      	cmp	r3, #24
 800a0d2:	d91d      	bls.n	800a110 <__gethex+0x14c>
 800a0d4:	f1b9 0f00 	cmp.w	r9, #0
 800a0d8:	d000      	beq.n	800a0dc <__gethex+0x118>
 800a0da:	4252      	negs	r2, r2
 800a0dc:	4415      	add	r5, r2
 800a0de:	f8cb 1000 	str.w	r1, [fp]
 800a0e2:	b1e4      	cbz	r4, 800a11e <__gethex+0x15a>
 800a0e4:	9b00      	ldr	r3, [sp, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	bf14      	ite	ne
 800a0ea:	2700      	movne	r7, #0
 800a0ec:	2706      	moveq	r7, #6
 800a0ee:	4638      	mov	r0, r7
 800a0f0:	b009      	add	sp, #36	; 0x24
 800a0f2:	ecbd 8b02 	vpop	{d8}
 800a0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fa:	463e      	mov	r6, r7
 800a0fc:	4625      	mov	r5, r4
 800a0fe:	2401      	movs	r4, #1
 800a100:	e7ca      	b.n	800a098 <__gethex+0xd4>
 800a102:	f04f 0900 	mov.w	r9, #0
 800a106:	1cb1      	adds	r1, r6, #2
 800a108:	e7d3      	b.n	800a0b2 <__gethex+0xee>
 800a10a:	f04f 0901 	mov.w	r9, #1
 800a10e:	e7fa      	b.n	800a106 <__gethex+0x142>
 800a110:	230a      	movs	r3, #10
 800a112:	fb03 0202 	mla	r2, r3, r2, r0
 800a116:	3a10      	subs	r2, #16
 800a118:	e7d4      	b.n	800a0c4 <__gethex+0x100>
 800a11a:	4631      	mov	r1, r6
 800a11c:	e7df      	b.n	800a0de <__gethex+0x11a>
 800a11e:	1bf3      	subs	r3, r6, r7
 800a120:	3b01      	subs	r3, #1
 800a122:	4621      	mov	r1, r4
 800a124:	2b07      	cmp	r3, #7
 800a126:	dc0b      	bgt.n	800a140 <__gethex+0x17c>
 800a128:	ee18 0a10 	vmov	r0, s16
 800a12c:	f000 fae6 	bl	800a6fc <_Balloc>
 800a130:	4604      	mov	r4, r0
 800a132:	b940      	cbnz	r0, 800a146 <__gethex+0x182>
 800a134:	4b65      	ldr	r3, [pc, #404]	; (800a2cc <__gethex+0x308>)
 800a136:	4602      	mov	r2, r0
 800a138:	21de      	movs	r1, #222	; 0xde
 800a13a:	4865      	ldr	r0, [pc, #404]	; (800a2d0 <__gethex+0x30c>)
 800a13c:	f001 fa38 	bl	800b5b0 <__assert_func>
 800a140:	3101      	adds	r1, #1
 800a142:	105b      	asrs	r3, r3, #1
 800a144:	e7ee      	b.n	800a124 <__gethex+0x160>
 800a146:	f100 0914 	add.w	r9, r0, #20
 800a14a:	f04f 0b00 	mov.w	fp, #0
 800a14e:	f1ca 0301 	rsb	r3, sl, #1
 800a152:	f8cd 9008 	str.w	r9, [sp, #8]
 800a156:	f8cd b000 	str.w	fp, [sp]
 800a15a:	9306      	str	r3, [sp, #24]
 800a15c:	42b7      	cmp	r7, r6
 800a15e:	d340      	bcc.n	800a1e2 <__gethex+0x21e>
 800a160:	9802      	ldr	r0, [sp, #8]
 800a162:	9b00      	ldr	r3, [sp, #0]
 800a164:	f840 3b04 	str.w	r3, [r0], #4
 800a168:	eba0 0009 	sub.w	r0, r0, r9
 800a16c:	1080      	asrs	r0, r0, #2
 800a16e:	0146      	lsls	r6, r0, #5
 800a170:	6120      	str	r0, [r4, #16]
 800a172:	4618      	mov	r0, r3
 800a174:	f000 fbb8 	bl	800a8e8 <__hi0bits>
 800a178:	1a30      	subs	r0, r6, r0
 800a17a:	f8d8 6000 	ldr.w	r6, [r8]
 800a17e:	42b0      	cmp	r0, r6
 800a180:	dd63      	ble.n	800a24a <__gethex+0x286>
 800a182:	1b87      	subs	r7, r0, r6
 800a184:	4639      	mov	r1, r7
 800a186:	4620      	mov	r0, r4
 800a188:	f000 ff52 	bl	800b030 <__any_on>
 800a18c:	4682      	mov	sl, r0
 800a18e:	b1a8      	cbz	r0, 800a1bc <__gethex+0x1f8>
 800a190:	1e7b      	subs	r3, r7, #1
 800a192:	1159      	asrs	r1, r3, #5
 800a194:	f003 021f 	and.w	r2, r3, #31
 800a198:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a19c:	f04f 0a01 	mov.w	sl, #1
 800a1a0:	fa0a f202 	lsl.w	r2, sl, r2
 800a1a4:	420a      	tst	r2, r1
 800a1a6:	d009      	beq.n	800a1bc <__gethex+0x1f8>
 800a1a8:	4553      	cmp	r3, sl
 800a1aa:	dd05      	ble.n	800a1b8 <__gethex+0x1f4>
 800a1ac:	1eb9      	subs	r1, r7, #2
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f000 ff3e 	bl	800b030 <__any_on>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	d145      	bne.n	800a244 <__gethex+0x280>
 800a1b8:	f04f 0a02 	mov.w	sl, #2
 800a1bc:	4639      	mov	r1, r7
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f7ff fe99 	bl	8009ef6 <rshift>
 800a1c4:	443d      	add	r5, r7
 800a1c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1ca:	42ab      	cmp	r3, r5
 800a1cc:	da4c      	bge.n	800a268 <__gethex+0x2a4>
 800a1ce:	ee18 0a10 	vmov	r0, s16
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	f000 fad2 	bl	800a77c <_Bfree>
 800a1d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a1da:	2300      	movs	r3, #0
 800a1dc:	6013      	str	r3, [r2, #0]
 800a1de:	27a3      	movs	r7, #163	; 0xa3
 800a1e0:	e785      	b.n	800a0ee <__gethex+0x12a>
 800a1e2:	1e73      	subs	r3, r6, #1
 800a1e4:	9a05      	ldr	r2, [sp, #20]
 800a1e6:	9303      	str	r3, [sp, #12]
 800a1e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d019      	beq.n	800a224 <__gethex+0x260>
 800a1f0:	f1bb 0f20 	cmp.w	fp, #32
 800a1f4:	d107      	bne.n	800a206 <__gethex+0x242>
 800a1f6:	9b02      	ldr	r3, [sp, #8]
 800a1f8:	9a00      	ldr	r2, [sp, #0]
 800a1fa:	f843 2b04 	str.w	r2, [r3], #4
 800a1fe:	9302      	str	r3, [sp, #8]
 800a200:	2300      	movs	r3, #0
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	469b      	mov	fp, r3
 800a206:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a20a:	f7ff fec6 	bl	8009f9a <__hexdig_fun>
 800a20e:	9b00      	ldr	r3, [sp, #0]
 800a210:	f000 000f 	and.w	r0, r0, #15
 800a214:	fa00 f00b 	lsl.w	r0, r0, fp
 800a218:	4303      	orrs	r3, r0
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	f10b 0b04 	add.w	fp, fp, #4
 800a220:	9b03      	ldr	r3, [sp, #12]
 800a222:	e00d      	b.n	800a240 <__gethex+0x27c>
 800a224:	9b03      	ldr	r3, [sp, #12]
 800a226:	9a06      	ldr	r2, [sp, #24]
 800a228:	4413      	add	r3, r2
 800a22a:	42bb      	cmp	r3, r7
 800a22c:	d3e0      	bcc.n	800a1f0 <__gethex+0x22c>
 800a22e:	4618      	mov	r0, r3
 800a230:	9901      	ldr	r1, [sp, #4]
 800a232:	9307      	str	r3, [sp, #28]
 800a234:	4652      	mov	r2, sl
 800a236:	f001 f98a 	bl	800b54e <strncmp>
 800a23a:	9b07      	ldr	r3, [sp, #28]
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d1d7      	bne.n	800a1f0 <__gethex+0x22c>
 800a240:	461e      	mov	r6, r3
 800a242:	e78b      	b.n	800a15c <__gethex+0x198>
 800a244:	f04f 0a03 	mov.w	sl, #3
 800a248:	e7b8      	b.n	800a1bc <__gethex+0x1f8>
 800a24a:	da0a      	bge.n	800a262 <__gethex+0x29e>
 800a24c:	1a37      	subs	r7, r6, r0
 800a24e:	4621      	mov	r1, r4
 800a250:	ee18 0a10 	vmov	r0, s16
 800a254:	463a      	mov	r2, r7
 800a256:	f000 fcad 	bl	800abb4 <__lshift>
 800a25a:	1bed      	subs	r5, r5, r7
 800a25c:	4604      	mov	r4, r0
 800a25e:	f100 0914 	add.w	r9, r0, #20
 800a262:	f04f 0a00 	mov.w	sl, #0
 800a266:	e7ae      	b.n	800a1c6 <__gethex+0x202>
 800a268:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a26c:	42a8      	cmp	r0, r5
 800a26e:	dd72      	ble.n	800a356 <__gethex+0x392>
 800a270:	1b45      	subs	r5, r0, r5
 800a272:	42ae      	cmp	r6, r5
 800a274:	dc36      	bgt.n	800a2e4 <__gethex+0x320>
 800a276:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	d02a      	beq.n	800a2d4 <__gethex+0x310>
 800a27e:	2b03      	cmp	r3, #3
 800a280:	d02c      	beq.n	800a2dc <__gethex+0x318>
 800a282:	2b01      	cmp	r3, #1
 800a284:	d115      	bne.n	800a2b2 <__gethex+0x2ee>
 800a286:	42ae      	cmp	r6, r5
 800a288:	d113      	bne.n	800a2b2 <__gethex+0x2ee>
 800a28a:	2e01      	cmp	r6, #1
 800a28c:	d10b      	bne.n	800a2a6 <__gethex+0x2e2>
 800a28e:	9a04      	ldr	r2, [sp, #16]
 800a290:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a294:	6013      	str	r3, [r2, #0]
 800a296:	2301      	movs	r3, #1
 800a298:	6123      	str	r3, [r4, #16]
 800a29a:	f8c9 3000 	str.w	r3, [r9]
 800a29e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2a0:	2762      	movs	r7, #98	; 0x62
 800a2a2:	601c      	str	r4, [r3, #0]
 800a2a4:	e723      	b.n	800a0ee <__gethex+0x12a>
 800a2a6:	1e71      	subs	r1, r6, #1
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f000 fec1 	bl	800b030 <__any_on>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d1ed      	bne.n	800a28e <__gethex+0x2ca>
 800a2b2:	ee18 0a10 	vmov	r0, s16
 800a2b6:	4621      	mov	r1, r4
 800a2b8:	f000 fa60 	bl	800a77c <_Bfree>
 800a2bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a2be:	2300      	movs	r3, #0
 800a2c0:	6013      	str	r3, [r2, #0]
 800a2c2:	2750      	movs	r7, #80	; 0x50
 800a2c4:	e713      	b.n	800a0ee <__gethex+0x12a>
 800a2c6:	bf00      	nop
 800a2c8:	0800e240 	.word	0x0800e240
 800a2cc:	0800e163 	.word	0x0800e163
 800a2d0:	0800e1d4 	.word	0x0800e1d4
 800a2d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1eb      	bne.n	800a2b2 <__gethex+0x2ee>
 800a2da:	e7d8      	b.n	800a28e <__gethex+0x2ca>
 800a2dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1d5      	bne.n	800a28e <__gethex+0x2ca>
 800a2e2:	e7e6      	b.n	800a2b2 <__gethex+0x2ee>
 800a2e4:	1e6f      	subs	r7, r5, #1
 800a2e6:	f1ba 0f00 	cmp.w	sl, #0
 800a2ea:	d131      	bne.n	800a350 <__gethex+0x38c>
 800a2ec:	b127      	cbz	r7, 800a2f8 <__gethex+0x334>
 800a2ee:	4639      	mov	r1, r7
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f000 fe9d 	bl	800b030 <__any_on>
 800a2f6:	4682      	mov	sl, r0
 800a2f8:	117b      	asrs	r3, r7, #5
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a300:	f007 071f 	and.w	r7, r7, #31
 800a304:	fa01 f707 	lsl.w	r7, r1, r7
 800a308:	421f      	tst	r7, r3
 800a30a:	4629      	mov	r1, r5
 800a30c:	4620      	mov	r0, r4
 800a30e:	bf18      	it	ne
 800a310:	f04a 0a02 	orrne.w	sl, sl, #2
 800a314:	1b76      	subs	r6, r6, r5
 800a316:	f7ff fdee 	bl	8009ef6 <rshift>
 800a31a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a31e:	2702      	movs	r7, #2
 800a320:	f1ba 0f00 	cmp.w	sl, #0
 800a324:	d048      	beq.n	800a3b8 <__gethex+0x3f4>
 800a326:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d015      	beq.n	800a35a <__gethex+0x396>
 800a32e:	2b03      	cmp	r3, #3
 800a330:	d017      	beq.n	800a362 <__gethex+0x39e>
 800a332:	2b01      	cmp	r3, #1
 800a334:	d109      	bne.n	800a34a <__gethex+0x386>
 800a336:	f01a 0f02 	tst.w	sl, #2
 800a33a:	d006      	beq.n	800a34a <__gethex+0x386>
 800a33c:	f8d9 0000 	ldr.w	r0, [r9]
 800a340:	ea4a 0a00 	orr.w	sl, sl, r0
 800a344:	f01a 0f01 	tst.w	sl, #1
 800a348:	d10e      	bne.n	800a368 <__gethex+0x3a4>
 800a34a:	f047 0710 	orr.w	r7, r7, #16
 800a34e:	e033      	b.n	800a3b8 <__gethex+0x3f4>
 800a350:	f04f 0a01 	mov.w	sl, #1
 800a354:	e7d0      	b.n	800a2f8 <__gethex+0x334>
 800a356:	2701      	movs	r7, #1
 800a358:	e7e2      	b.n	800a320 <__gethex+0x35c>
 800a35a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a35c:	f1c3 0301 	rsb	r3, r3, #1
 800a360:	9315      	str	r3, [sp, #84]	; 0x54
 800a362:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a364:	2b00      	cmp	r3, #0
 800a366:	d0f0      	beq.n	800a34a <__gethex+0x386>
 800a368:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a36c:	f104 0314 	add.w	r3, r4, #20
 800a370:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a374:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a378:	f04f 0c00 	mov.w	ip, #0
 800a37c:	4618      	mov	r0, r3
 800a37e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a382:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a386:	d01c      	beq.n	800a3c2 <__gethex+0x3fe>
 800a388:	3201      	adds	r2, #1
 800a38a:	6002      	str	r2, [r0, #0]
 800a38c:	2f02      	cmp	r7, #2
 800a38e:	f104 0314 	add.w	r3, r4, #20
 800a392:	d13f      	bne.n	800a414 <__gethex+0x450>
 800a394:	f8d8 2000 	ldr.w	r2, [r8]
 800a398:	3a01      	subs	r2, #1
 800a39a:	42b2      	cmp	r2, r6
 800a39c:	d10a      	bne.n	800a3b4 <__gethex+0x3f0>
 800a39e:	1171      	asrs	r1, r6, #5
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a3a6:	f006 061f 	and.w	r6, r6, #31
 800a3aa:	fa02 f606 	lsl.w	r6, r2, r6
 800a3ae:	421e      	tst	r6, r3
 800a3b0:	bf18      	it	ne
 800a3b2:	4617      	movne	r7, r2
 800a3b4:	f047 0720 	orr.w	r7, r7, #32
 800a3b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3ba:	601c      	str	r4, [r3, #0]
 800a3bc:	9b04      	ldr	r3, [sp, #16]
 800a3be:	601d      	str	r5, [r3, #0]
 800a3c0:	e695      	b.n	800a0ee <__gethex+0x12a>
 800a3c2:	4299      	cmp	r1, r3
 800a3c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a3c8:	d8d8      	bhi.n	800a37c <__gethex+0x3b8>
 800a3ca:	68a3      	ldr	r3, [r4, #8]
 800a3cc:	459b      	cmp	fp, r3
 800a3ce:	db19      	blt.n	800a404 <__gethex+0x440>
 800a3d0:	6861      	ldr	r1, [r4, #4]
 800a3d2:	ee18 0a10 	vmov	r0, s16
 800a3d6:	3101      	adds	r1, #1
 800a3d8:	f000 f990 	bl	800a6fc <_Balloc>
 800a3dc:	4681      	mov	r9, r0
 800a3de:	b918      	cbnz	r0, 800a3e8 <__gethex+0x424>
 800a3e0:	4b1a      	ldr	r3, [pc, #104]	; (800a44c <__gethex+0x488>)
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	2184      	movs	r1, #132	; 0x84
 800a3e6:	e6a8      	b.n	800a13a <__gethex+0x176>
 800a3e8:	6922      	ldr	r2, [r4, #16]
 800a3ea:	3202      	adds	r2, #2
 800a3ec:	f104 010c 	add.w	r1, r4, #12
 800a3f0:	0092      	lsls	r2, r2, #2
 800a3f2:	300c      	adds	r0, #12
 800a3f4:	f000 f974 	bl	800a6e0 <memcpy>
 800a3f8:	4621      	mov	r1, r4
 800a3fa:	ee18 0a10 	vmov	r0, s16
 800a3fe:	f000 f9bd 	bl	800a77c <_Bfree>
 800a402:	464c      	mov	r4, r9
 800a404:	6923      	ldr	r3, [r4, #16]
 800a406:	1c5a      	adds	r2, r3, #1
 800a408:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a40c:	6122      	str	r2, [r4, #16]
 800a40e:	2201      	movs	r2, #1
 800a410:	615a      	str	r2, [r3, #20]
 800a412:	e7bb      	b.n	800a38c <__gethex+0x3c8>
 800a414:	6922      	ldr	r2, [r4, #16]
 800a416:	455a      	cmp	r2, fp
 800a418:	dd0b      	ble.n	800a432 <__gethex+0x46e>
 800a41a:	2101      	movs	r1, #1
 800a41c:	4620      	mov	r0, r4
 800a41e:	f7ff fd6a 	bl	8009ef6 <rshift>
 800a422:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a426:	3501      	adds	r5, #1
 800a428:	42ab      	cmp	r3, r5
 800a42a:	f6ff aed0 	blt.w	800a1ce <__gethex+0x20a>
 800a42e:	2701      	movs	r7, #1
 800a430:	e7c0      	b.n	800a3b4 <__gethex+0x3f0>
 800a432:	f016 061f 	ands.w	r6, r6, #31
 800a436:	d0fa      	beq.n	800a42e <__gethex+0x46a>
 800a438:	449a      	add	sl, r3
 800a43a:	f1c6 0620 	rsb	r6, r6, #32
 800a43e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a442:	f000 fa51 	bl	800a8e8 <__hi0bits>
 800a446:	42b0      	cmp	r0, r6
 800a448:	dbe7      	blt.n	800a41a <__gethex+0x456>
 800a44a:	e7f0      	b.n	800a42e <__gethex+0x46a>
 800a44c:	0800e163 	.word	0x0800e163

0800a450 <L_shift>:
 800a450:	f1c2 0208 	rsb	r2, r2, #8
 800a454:	0092      	lsls	r2, r2, #2
 800a456:	b570      	push	{r4, r5, r6, lr}
 800a458:	f1c2 0620 	rsb	r6, r2, #32
 800a45c:	6843      	ldr	r3, [r0, #4]
 800a45e:	6804      	ldr	r4, [r0, #0]
 800a460:	fa03 f506 	lsl.w	r5, r3, r6
 800a464:	432c      	orrs	r4, r5
 800a466:	40d3      	lsrs	r3, r2
 800a468:	6004      	str	r4, [r0, #0]
 800a46a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a46e:	4288      	cmp	r0, r1
 800a470:	d3f4      	bcc.n	800a45c <L_shift+0xc>
 800a472:	bd70      	pop	{r4, r5, r6, pc}

0800a474 <__match>:
 800a474:	b530      	push	{r4, r5, lr}
 800a476:	6803      	ldr	r3, [r0, #0]
 800a478:	3301      	adds	r3, #1
 800a47a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a47e:	b914      	cbnz	r4, 800a486 <__match+0x12>
 800a480:	6003      	str	r3, [r0, #0]
 800a482:	2001      	movs	r0, #1
 800a484:	bd30      	pop	{r4, r5, pc}
 800a486:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a48a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a48e:	2d19      	cmp	r5, #25
 800a490:	bf98      	it	ls
 800a492:	3220      	addls	r2, #32
 800a494:	42a2      	cmp	r2, r4
 800a496:	d0f0      	beq.n	800a47a <__match+0x6>
 800a498:	2000      	movs	r0, #0
 800a49a:	e7f3      	b.n	800a484 <__match+0x10>

0800a49c <__hexnan>:
 800a49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a0:	680b      	ldr	r3, [r1, #0]
 800a4a2:	6801      	ldr	r1, [r0, #0]
 800a4a4:	115e      	asrs	r6, r3, #5
 800a4a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a4aa:	f013 031f 	ands.w	r3, r3, #31
 800a4ae:	b087      	sub	sp, #28
 800a4b0:	bf18      	it	ne
 800a4b2:	3604      	addne	r6, #4
 800a4b4:	2500      	movs	r5, #0
 800a4b6:	1f37      	subs	r7, r6, #4
 800a4b8:	4682      	mov	sl, r0
 800a4ba:	4690      	mov	r8, r2
 800a4bc:	9301      	str	r3, [sp, #4]
 800a4be:	f846 5c04 	str.w	r5, [r6, #-4]
 800a4c2:	46b9      	mov	r9, r7
 800a4c4:	463c      	mov	r4, r7
 800a4c6:	9502      	str	r5, [sp, #8]
 800a4c8:	46ab      	mov	fp, r5
 800a4ca:	784a      	ldrb	r2, [r1, #1]
 800a4cc:	1c4b      	adds	r3, r1, #1
 800a4ce:	9303      	str	r3, [sp, #12]
 800a4d0:	b342      	cbz	r2, 800a524 <__hexnan+0x88>
 800a4d2:	4610      	mov	r0, r2
 800a4d4:	9105      	str	r1, [sp, #20]
 800a4d6:	9204      	str	r2, [sp, #16]
 800a4d8:	f7ff fd5f 	bl	8009f9a <__hexdig_fun>
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	d14f      	bne.n	800a580 <__hexnan+0xe4>
 800a4e0:	9a04      	ldr	r2, [sp, #16]
 800a4e2:	9905      	ldr	r1, [sp, #20]
 800a4e4:	2a20      	cmp	r2, #32
 800a4e6:	d818      	bhi.n	800a51a <__hexnan+0x7e>
 800a4e8:	9b02      	ldr	r3, [sp, #8]
 800a4ea:	459b      	cmp	fp, r3
 800a4ec:	dd13      	ble.n	800a516 <__hexnan+0x7a>
 800a4ee:	454c      	cmp	r4, r9
 800a4f0:	d206      	bcs.n	800a500 <__hexnan+0x64>
 800a4f2:	2d07      	cmp	r5, #7
 800a4f4:	dc04      	bgt.n	800a500 <__hexnan+0x64>
 800a4f6:	462a      	mov	r2, r5
 800a4f8:	4649      	mov	r1, r9
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f7ff ffa8 	bl	800a450 <L_shift>
 800a500:	4544      	cmp	r4, r8
 800a502:	d950      	bls.n	800a5a6 <__hexnan+0x10a>
 800a504:	2300      	movs	r3, #0
 800a506:	f1a4 0904 	sub.w	r9, r4, #4
 800a50a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a50e:	f8cd b008 	str.w	fp, [sp, #8]
 800a512:	464c      	mov	r4, r9
 800a514:	461d      	mov	r5, r3
 800a516:	9903      	ldr	r1, [sp, #12]
 800a518:	e7d7      	b.n	800a4ca <__hexnan+0x2e>
 800a51a:	2a29      	cmp	r2, #41	; 0x29
 800a51c:	d156      	bne.n	800a5cc <__hexnan+0x130>
 800a51e:	3102      	adds	r1, #2
 800a520:	f8ca 1000 	str.w	r1, [sl]
 800a524:	f1bb 0f00 	cmp.w	fp, #0
 800a528:	d050      	beq.n	800a5cc <__hexnan+0x130>
 800a52a:	454c      	cmp	r4, r9
 800a52c:	d206      	bcs.n	800a53c <__hexnan+0xa0>
 800a52e:	2d07      	cmp	r5, #7
 800a530:	dc04      	bgt.n	800a53c <__hexnan+0xa0>
 800a532:	462a      	mov	r2, r5
 800a534:	4649      	mov	r1, r9
 800a536:	4620      	mov	r0, r4
 800a538:	f7ff ff8a 	bl	800a450 <L_shift>
 800a53c:	4544      	cmp	r4, r8
 800a53e:	d934      	bls.n	800a5aa <__hexnan+0x10e>
 800a540:	f1a8 0204 	sub.w	r2, r8, #4
 800a544:	4623      	mov	r3, r4
 800a546:	f853 1b04 	ldr.w	r1, [r3], #4
 800a54a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a54e:	429f      	cmp	r7, r3
 800a550:	d2f9      	bcs.n	800a546 <__hexnan+0xaa>
 800a552:	1b3b      	subs	r3, r7, r4
 800a554:	f023 0303 	bic.w	r3, r3, #3
 800a558:	3304      	adds	r3, #4
 800a55a:	3401      	adds	r4, #1
 800a55c:	3e03      	subs	r6, #3
 800a55e:	42b4      	cmp	r4, r6
 800a560:	bf88      	it	hi
 800a562:	2304      	movhi	r3, #4
 800a564:	4443      	add	r3, r8
 800a566:	2200      	movs	r2, #0
 800a568:	f843 2b04 	str.w	r2, [r3], #4
 800a56c:	429f      	cmp	r7, r3
 800a56e:	d2fb      	bcs.n	800a568 <__hexnan+0xcc>
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	b91b      	cbnz	r3, 800a57c <__hexnan+0xe0>
 800a574:	4547      	cmp	r7, r8
 800a576:	d127      	bne.n	800a5c8 <__hexnan+0x12c>
 800a578:	2301      	movs	r3, #1
 800a57a:	603b      	str	r3, [r7, #0]
 800a57c:	2005      	movs	r0, #5
 800a57e:	e026      	b.n	800a5ce <__hexnan+0x132>
 800a580:	3501      	adds	r5, #1
 800a582:	2d08      	cmp	r5, #8
 800a584:	f10b 0b01 	add.w	fp, fp, #1
 800a588:	dd06      	ble.n	800a598 <__hexnan+0xfc>
 800a58a:	4544      	cmp	r4, r8
 800a58c:	d9c3      	bls.n	800a516 <__hexnan+0x7a>
 800a58e:	2300      	movs	r3, #0
 800a590:	f844 3c04 	str.w	r3, [r4, #-4]
 800a594:	2501      	movs	r5, #1
 800a596:	3c04      	subs	r4, #4
 800a598:	6822      	ldr	r2, [r4, #0]
 800a59a:	f000 000f 	and.w	r0, r0, #15
 800a59e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a5a2:	6022      	str	r2, [r4, #0]
 800a5a4:	e7b7      	b.n	800a516 <__hexnan+0x7a>
 800a5a6:	2508      	movs	r5, #8
 800a5a8:	e7b5      	b.n	800a516 <__hexnan+0x7a>
 800a5aa:	9b01      	ldr	r3, [sp, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d0df      	beq.n	800a570 <__hexnan+0xd4>
 800a5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5b4:	f1c3 0320 	rsb	r3, r3, #32
 800a5b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a5c0:	401a      	ands	r2, r3
 800a5c2:	f846 2c04 	str.w	r2, [r6, #-4]
 800a5c6:	e7d3      	b.n	800a570 <__hexnan+0xd4>
 800a5c8:	3f04      	subs	r7, #4
 800a5ca:	e7d1      	b.n	800a570 <__hexnan+0xd4>
 800a5cc:	2004      	movs	r0, #4
 800a5ce:	b007      	add	sp, #28
 800a5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a5d4 <_localeconv_r>:
 800a5d4:	4800      	ldr	r0, [pc, #0]	; (800a5d8 <_localeconv_r+0x4>)
 800a5d6:	4770      	bx	lr
 800a5d8:	20000198 	.word	0x20000198

0800a5dc <__retarget_lock_init_recursive>:
 800a5dc:	4770      	bx	lr

0800a5de <__retarget_lock_acquire_recursive>:
 800a5de:	4770      	bx	lr

0800a5e0 <__retarget_lock_release_recursive>:
 800a5e0:	4770      	bx	lr

0800a5e2 <__swhatbuf_r>:
 800a5e2:	b570      	push	{r4, r5, r6, lr}
 800a5e4:	460e      	mov	r6, r1
 800a5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ea:	2900      	cmp	r1, #0
 800a5ec:	b096      	sub	sp, #88	; 0x58
 800a5ee:	4614      	mov	r4, r2
 800a5f0:	461d      	mov	r5, r3
 800a5f2:	da07      	bge.n	800a604 <__swhatbuf_r+0x22>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	602b      	str	r3, [r5, #0]
 800a5f8:	89b3      	ldrh	r3, [r6, #12]
 800a5fa:	061a      	lsls	r2, r3, #24
 800a5fc:	d410      	bmi.n	800a620 <__swhatbuf_r+0x3e>
 800a5fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a602:	e00e      	b.n	800a622 <__swhatbuf_r+0x40>
 800a604:	466a      	mov	r2, sp
 800a606:	f001 f813 	bl	800b630 <_fstat_r>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	dbf2      	blt.n	800a5f4 <__swhatbuf_r+0x12>
 800a60e:	9a01      	ldr	r2, [sp, #4]
 800a610:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a614:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a618:	425a      	negs	r2, r3
 800a61a:	415a      	adcs	r2, r3
 800a61c:	602a      	str	r2, [r5, #0]
 800a61e:	e7ee      	b.n	800a5fe <__swhatbuf_r+0x1c>
 800a620:	2340      	movs	r3, #64	; 0x40
 800a622:	2000      	movs	r0, #0
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	b016      	add	sp, #88	; 0x58
 800a628:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a62c <__smakebuf_r>:
 800a62c:	898b      	ldrh	r3, [r1, #12]
 800a62e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a630:	079d      	lsls	r5, r3, #30
 800a632:	4606      	mov	r6, r0
 800a634:	460c      	mov	r4, r1
 800a636:	d507      	bpl.n	800a648 <__smakebuf_r+0x1c>
 800a638:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a63c:	6023      	str	r3, [r4, #0]
 800a63e:	6123      	str	r3, [r4, #16]
 800a640:	2301      	movs	r3, #1
 800a642:	6163      	str	r3, [r4, #20]
 800a644:	b002      	add	sp, #8
 800a646:	bd70      	pop	{r4, r5, r6, pc}
 800a648:	ab01      	add	r3, sp, #4
 800a64a:	466a      	mov	r2, sp
 800a64c:	f7ff ffc9 	bl	800a5e2 <__swhatbuf_r>
 800a650:	9900      	ldr	r1, [sp, #0]
 800a652:	4605      	mov	r5, r0
 800a654:	4630      	mov	r0, r6
 800a656:	f000 fd6b 	bl	800b130 <_malloc_r>
 800a65a:	b948      	cbnz	r0, 800a670 <__smakebuf_r+0x44>
 800a65c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a660:	059a      	lsls	r2, r3, #22
 800a662:	d4ef      	bmi.n	800a644 <__smakebuf_r+0x18>
 800a664:	f023 0303 	bic.w	r3, r3, #3
 800a668:	f043 0302 	orr.w	r3, r3, #2
 800a66c:	81a3      	strh	r3, [r4, #12]
 800a66e:	e7e3      	b.n	800a638 <__smakebuf_r+0xc>
 800a670:	4b0d      	ldr	r3, [pc, #52]	; (800a6a8 <__smakebuf_r+0x7c>)
 800a672:	62b3      	str	r3, [r6, #40]	; 0x28
 800a674:	89a3      	ldrh	r3, [r4, #12]
 800a676:	6020      	str	r0, [r4, #0]
 800a678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a67c:	81a3      	strh	r3, [r4, #12]
 800a67e:	9b00      	ldr	r3, [sp, #0]
 800a680:	6163      	str	r3, [r4, #20]
 800a682:	9b01      	ldr	r3, [sp, #4]
 800a684:	6120      	str	r0, [r4, #16]
 800a686:	b15b      	cbz	r3, 800a6a0 <__smakebuf_r+0x74>
 800a688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a68c:	4630      	mov	r0, r6
 800a68e:	f000 ffe1 	bl	800b654 <_isatty_r>
 800a692:	b128      	cbz	r0, 800a6a0 <__smakebuf_r+0x74>
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	f023 0303 	bic.w	r3, r3, #3
 800a69a:	f043 0301 	orr.w	r3, r3, #1
 800a69e:	81a3      	strh	r3, [r4, #12]
 800a6a0:	89a0      	ldrh	r0, [r4, #12]
 800a6a2:	4305      	orrs	r5, r0
 800a6a4:	81a5      	strh	r5, [r4, #12]
 800a6a6:	e7cd      	b.n	800a644 <__smakebuf_r+0x18>
 800a6a8:	08009d55 	.word	0x08009d55

0800a6ac <malloc>:
 800a6ac:	4b02      	ldr	r3, [pc, #8]	; (800a6b8 <malloc+0xc>)
 800a6ae:	4601      	mov	r1, r0
 800a6b0:	6818      	ldr	r0, [r3, #0]
 800a6b2:	f000 bd3d 	b.w	800b130 <_malloc_r>
 800a6b6:	bf00      	nop
 800a6b8:	20000040 	.word	0x20000040

0800a6bc <__ascii_mbtowc>:
 800a6bc:	b082      	sub	sp, #8
 800a6be:	b901      	cbnz	r1, 800a6c2 <__ascii_mbtowc+0x6>
 800a6c0:	a901      	add	r1, sp, #4
 800a6c2:	b142      	cbz	r2, 800a6d6 <__ascii_mbtowc+0x1a>
 800a6c4:	b14b      	cbz	r3, 800a6da <__ascii_mbtowc+0x1e>
 800a6c6:	7813      	ldrb	r3, [r2, #0]
 800a6c8:	600b      	str	r3, [r1, #0]
 800a6ca:	7812      	ldrb	r2, [r2, #0]
 800a6cc:	1e10      	subs	r0, r2, #0
 800a6ce:	bf18      	it	ne
 800a6d0:	2001      	movne	r0, #1
 800a6d2:	b002      	add	sp, #8
 800a6d4:	4770      	bx	lr
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	e7fb      	b.n	800a6d2 <__ascii_mbtowc+0x16>
 800a6da:	f06f 0001 	mvn.w	r0, #1
 800a6de:	e7f8      	b.n	800a6d2 <__ascii_mbtowc+0x16>

0800a6e0 <memcpy>:
 800a6e0:	440a      	add	r2, r1
 800a6e2:	4291      	cmp	r1, r2
 800a6e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6e8:	d100      	bne.n	800a6ec <memcpy+0xc>
 800a6ea:	4770      	bx	lr
 800a6ec:	b510      	push	{r4, lr}
 800a6ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6f6:	4291      	cmp	r1, r2
 800a6f8:	d1f9      	bne.n	800a6ee <memcpy+0xe>
 800a6fa:	bd10      	pop	{r4, pc}

0800a6fc <_Balloc>:
 800a6fc:	b570      	push	{r4, r5, r6, lr}
 800a6fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a700:	4604      	mov	r4, r0
 800a702:	460d      	mov	r5, r1
 800a704:	b976      	cbnz	r6, 800a724 <_Balloc+0x28>
 800a706:	2010      	movs	r0, #16
 800a708:	f7ff ffd0 	bl	800a6ac <malloc>
 800a70c:	4602      	mov	r2, r0
 800a70e:	6260      	str	r0, [r4, #36]	; 0x24
 800a710:	b920      	cbnz	r0, 800a71c <_Balloc+0x20>
 800a712:	4b18      	ldr	r3, [pc, #96]	; (800a774 <_Balloc+0x78>)
 800a714:	4818      	ldr	r0, [pc, #96]	; (800a778 <_Balloc+0x7c>)
 800a716:	2166      	movs	r1, #102	; 0x66
 800a718:	f000 ff4a 	bl	800b5b0 <__assert_func>
 800a71c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a720:	6006      	str	r6, [r0, #0]
 800a722:	60c6      	str	r6, [r0, #12]
 800a724:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a726:	68f3      	ldr	r3, [r6, #12]
 800a728:	b183      	cbz	r3, 800a74c <_Balloc+0x50>
 800a72a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a732:	b9b8      	cbnz	r0, 800a764 <_Balloc+0x68>
 800a734:	2101      	movs	r1, #1
 800a736:	fa01 f605 	lsl.w	r6, r1, r5
 800a73a:	1d72      	adds	r2, r6, #5
 800a73c:	0092      	lsls	r2, r2, #2
 800a73e:	4620      	mov	r0, r4
 800a740:	f000 fc97 	bl	800b072 <_calloc_r>
 800a744:	b160      	cbz	r0, 800a760 <_Balloc+0x64>
 800a746:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a74a:	e00e      	b.n	800a76a <_Balloc+0x6e>
 800a74c:	2221      	movs	r2, #33	; 0x21
 800a74e:	2104      	movs	r1, #4
 800a750:	4620      	mov	r0, r4
 800a752:	f000 fc8e 	bl	800b072 <_calloc_r>
 800a756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a758:	60f0      	str	r0, [r6, #12]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1e4      	bne.n	800a72a <_Balloc+0x2e>
 800a760:	2000      	movs	r0, #0
 800a762:	bd70      	pop	{r4, r5, r6, pc}
 800a764:	6802      	ldr	r2, [r0, #0]
 800a766:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a76a:	2300      	movs	r3, #0
 800a76c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a770:	e7f7      	b.n	800a762 <_Balloc+0x66>
 800a772:	bf00      	nop
 800a774:	0800e0ed 	.word	0x0800e0ed
 800a778:	0800e254 	.word	0x0800e254

0800a77c <_Bfree>:
 800a77c:	b570      	push	{r4, r5, r6, lr}
 800a77e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a780:	4605      	mov	r5, r0
 800a782:	460c      	mov	r4, r1
 800a784:	b976      	cbnz	r6, 800a7a4 <_Bfree+0x28>
 800a786:	2010      	movs	r0, #16
 800a788:	f7ff ff90 	bl	800a6ac <malloc>
 800a78c:	4602      	mov	r2, r0
 800a78e:	6268      	str	r0, [r5, #36]	; 0x24
 800a790:	b920      	cbnz	r0, 800a79c <_Bfree+0x20>
 800a792:	4b09      	ldr	r3, [pc, #36]	; (800a7b8 <_Bfree+0x3c>)
 800a794:	4809      	ldr	r0, [pc, #36]	; (800a7bc <_Bfree+0x40>)
 800a796:	218a      	movs	r1, #138	; 0x8a
 800a798:	f000 ff0a 	bl	800b5b0 <__assert_func>
 800a79c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7a0:	6006      	str	r6, [r0, #0]
 800a7a2:	60c6      	str	r6, [r0, #12]
 800a7a4:	b13c      	cbz	r4, 800a7b6 <_Bfree+0x3a>
 800a7a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a7a8:	6862      	ldr	r2, [r4, #4]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7b0:	6021      	str	r1, [r4, #0]
 800a7b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a7b6:	bd70      	pop	{r4, r5, r6, pc}
 800a7b8:	0800e0ed 	.word	0x0800e0ed
 800a7bc:	0800e254 	.word	0x0800e254

0800a7c0 <__multadd>:
 800a7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7c4:	690e      	ldr	r6, [r1, #16]
 800a7c6:	4607      	mov	r7, r0
 800a7c8:	4698      	mov	r8, r3
 800a7ca:	460c      	mov	r4, r1
 800a7cc:	f101 0014 	add.w	r0, r1, #20
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	6805      	ldr	r5, [r0, #0]
 800a7d4:	b2a9      	uxth	r1, r5
 800a7d6:	fb02 8101 	mla	r1, r2, r1, r8
 800a7da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a7de:	0c2d      	lsrs	r5, r5, #16
 800a7e0:	fb02 c505 	mla	r5, r2, r5, ip
 800a7e4:	b289      	uxth	r1, r1
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a7ec:	429e      	cmp	r6, r3
 800a7ee:	f840 1b04 	str.w	r1, [r0], #4
 800a7f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a7f6:	dcec      	bgt.n	800a7d2 <__multadd+0x12>
 800a7f8:	f1b8 0f00 	cmp.w	r8, #0
 800a7fc:	d022      	beq.n	800a844 <__multadd+0x84>
 800a7fe:	68a3      	ldr	r3, [r4, #8]
 800a800:	42b3      	cmp	r3, r6
 800a802:	dc19      	bgt.n	800a838 <__multadd+0x78>
 800a804:	6861      	ldr	r1, [r4, #4]
 800a806:	4638      	mov	r0, r7
 800a808:	3101      	adds	r1, #1
 800a80a:	f7ff ff77 	bl	800a6fc <_Balloc>
 800a80e:	4605      	mov	r5, r0
 800a810:	b928      	cbnz	r0, 800a81e <__multadd+0x5e>
 800a812:	4602      	mov	r2, r0
 800a814:	4b0d      	ldr	r3, [pc, #52]	; (800a84c <__multadd+0x8c>)
 800a816:	480e      	ldr	r0, [pc, #56]	; (800a850 <__multadd+0x90>)
 800a818:	21b5      	movs	r1, #181	; 0xb5
 800a81a:	f000 fec9 	bl	800b5b0 <__assert_func>
 800a81e:	6922      	ldr	r2, [r4, #16]
 800a820:	3202      	adds	r2, #2
 800a822:	f104 010c 	add.w	r1, r4, #12
 800a826:	0092      	lsls	r2, r2, #2
 800a828:	300c      	adds	r0, #12
 800a82a:	f7ff ff59 	bl	800a6e0 <memcpy>
 800a82e:	4621      	mov	r1, r4
 800a830:	4638      	mov	r0, r7
 800a832:	f7ff ffa3 	bl	800a77c <_Bfree>
 800a836:	462c      	mov	r4, r5
 800a838:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a83c:	3601      	adds	r6, #1
 800a83e:	f8c3 8014 	str.w	r8, [r3, #20]
 800a842:	6126      	str	r6, [r4, #16]
 800a844:	4620      	mov	r0, r4
 800a846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a84a:	bf00      	nop
 800a84c:	0800e163 	.word	0x0800e163
 800a850:	0800e254 	.word	0x0800e254

0800a854 <__s2b>:
 800a854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a858:	460c      	mov	r4, r1
 800a85a:	4615      	mov	r5, r2
 800a85c:	461f      	mov	r7, r3
 800a85e:	2209      	movs	r2, #9
 800a860:	3308      	adds	r3, #8
 800a862:	4606      	mov	r6, r0
 800a864:	fb93 f3f2 	sdiv	r3, r3, r2
 800a868:	2100      	movs	r1, #0
 800a86a:	2201      	movs	r2, #1
 800a86c:	429a      	cmp	r2, r3
 800a86e:	db09      	blt.n	800a884 <__s2b+0x30>
 800a870:	4630      	mov	r0, r6
 800a872:	f7ff ff43 	bl	800a6fc <_Balloc>
 800a876:	b940      	cbnz	r0, 800a88a <__s2b+0x36>
 800a878:	4602      	mov	r2, r0
 800a87a:	4b19      	ldr	r3, [pc, #100]	; (800a8e0 <__s2b+0x8c>)
 800a87c:	4819      	ldr	r0, [pc, #100]	; (800a8e4 <__s2b+0x90>)
 800a87e:	21ce      	movs	r1, #206	; 0xce
 800a880:	f000 fe96 	bl	800b5b0 <__assert_func>
 800a884:	0052      	lsls	r2, r2, #1
 800a886:	3101      	adds	r1, #1
 800a888:	e7f0      	b.n	800a86c <__s2b+0x18>
 800a88a:	9b08      	ldr	r3, [sp, #32]
 800a88c:	6143      	str	r3, [r0, #20]
 800a88e:	2d09      	cmp	r5, #9
 800a890:	f04f 0301 	mov.w	r3, #1
 800a894:	6103      	str	r3, [r0, #16]
 800a896:	dd16      	ble.n	800a8c6 <__s2b+0x72>
 800a898:	f104 0909 	add.w	r9, r4, #9
 800a89c:	46c8      	mov	r8, r9
 800a89e:	442c      	add	r4, r5
 800a8a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a8a4:	4601      	mov	r1, r0
 800a8a6:	3b30      	subs	r3, #48	; 0x30
 800a8a8:	220a      	movs	r2, #10
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	f7ff ff88 	bl	800a7c0 <__multadd>
 800a8b0:	45a0      	cmp	r8, r4
 800a8b2:	d1f5      	bne.n	800a8a0 <__s2b+0x4c>
 800a8b4:	f1a5 0408 	sub.w	r4, r5, #8
 800a8b8:	444c      	add	r4, r9
 800a8ba:	1b2d      	subs	r5, r5, r4
 800a8bc:	1963      	adds	r3, r4, r5
 800a8be:	42bb      	cmp	r3, r7
 800a8c0:	db04      	blt.n	800a8cc <__s2b+0x78>
 800a8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8c6:	340a      	adds	r4, #10
 800a8c8:	2509      	movs	r5, #9
 800a8ca:	e7f6      	b.n	800a8ba <__s2b+0x66>
 800a8cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a8d0:	4601      	mov	r1, r0
 800a8d2:	3b30      	subs	r3, #48	; 0x30
 800a8d4:	220a      	movs	r2, #10
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	f7ff ff72 	bl	800a7c0 <__multadd>
 800a8dc:	e7ee      	b.n	800a8bc <__s2b+0x68>
 800a8de:	bf00      	nop
 800a8e0:	0800e163 	.word	0x0800e163
 800a8e4:	0800e254 	.word	0x0800e254

0800a8e8 <__hi0bits>:
 800a8e8:	0c03      	lsrs	r3, r0, #16
 800a8ea:	041b      	lsls	r3, r3, #16
 800a8ec:	b9d3      	cbnz	r3, 800a924 <__hi0bits+0x3c>
 800a8ee:	0400      	lsls	r0, r0, #16
 800a8f0:	2310      	movs	r3, #16
 800a8f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a8f6:	bf04      	itt	eq
 800a8f8:	0200      	lsleq	r0, r0, #8
 800a8fa:	3308      	addeq	r3, #8
 800a8fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a900:	bf04      	itt	eq
 800a902:	0100      	lsleq	r0, r0, #4
 800a904:	3304      	addeq	r3, #4
 800a906:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a90a:	bf04      	itt	eq
 800a90c:	0080      	lsleq	r0, r0, #2
 800a90e:	3302      	addeq	r3, #2
 800a910:	2800      	cmp	r0, #0
 800a912:	db05      	blt.n	800a920 <__hi0bits+0x38>
 800a914:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a918:	f103 0301 	add.w	r3, r3, #1
 800a91c:	bf08      	it	eq
 800a91e:	2320      	moveq	r3, #32
 800a920:	4618      	mov	r0, r3
 800a922:	4770      	bx	lr
 800a924:	2300      	movs	r3, #0
 800a926:	e7e4      	b.n	800a8f2 <__hi0bits+0xa>

0800a928 <__lo0bits>:
 800a928:	6803      	ldr	r3, [r0, #0]
 800a92a:	f013 0207 	ands.w	r2, r3, #7
 800a92e:	4601      	mov	r1, r0
 800a930:	d00b      	beq.n	800a94a <__lo0bits+0x22>
 800a932:	07da      	lsls	r2, r3, #31
 800a934:	d424      	bmi.n	800a980 <__lo0bits+0x58>
 800a936:	0798      	lsls	r0, r3, #30
 800a938:	bf49      	itett	mi
 800a93a:	085b      	lsrmi	r3, r3, #1
 800a93c:	089b      	lsrpl	r3, r3, #2
 800a93e:	2001      	movmi	r0, #1
 800a940:	600b      	strmi	r3, [r1, #0]
 800a942:	bf5c      	itt	pl
 800a944:	600b      	strpl	r3, [r1, #0]
 800a946:	2002      	movpl	r0, #2
 800a948:	4770      	bx	lr
 800a94a:	b298      	uxth	r0, r3
 800a94c:	b9b0      	cbnz	r0, 800a97c <__lo0bits+0x54>
 800a94e:	0c1b      	lsrs	r3, r3, #16
 800a950:	2010      	movs	r0, #16
 800a952:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a956:	bf04      	itt	eq
 800a958:	0a1b      	lsreq	r3, r3, #8
 800a95a:	3008      	addeq	r0, #8
 800a95c:	071a      	lsls	r2, r3, #28
 800a95e:	bf04      	itt	eq
 800a960:	091b      	lsreq	r3, r3, #4
 800a962:	3004      	addeq	r0, #4
 800a964:	079a      	lsls	r2, r3, #30
 800a966:	bf04      	itt	eq
 800a968:	089b      	lsreq	r3, r3, #2
 800a96a:	3002      	addeq	r0, #2
 800a96c:	07da      	lsls	r2, r3, #31
 800a96e:	d403      	bmi.n	800a978 <__lo0bits+0x50>
 800a970:	085b      	lsrs	r3, r3, #1
 800a972:	f100 0001 	add.w	r0, r0, #1
 800a976:	d005      	beq.n	800a984 <__lo0bits+0x5c>
 800a978:	600b      	str	r3, [r1, #0]
 800a97a:	4770      	bx	lr
 800a97c:	4610      	mov	r0, r2
 800a97e:	e7e8      	b.n	800a952 <__lo0bits+0x2a>
 800a980:	2000      	movs	r0, #0
 800a982:	4770      	bx	lr
 800a984:	2020      	movs	r0, #32
 800a986:	4770      	bx	lr

0800a988 <__i2b>:
 800a988:	b510      	push	{r4, lr}
 800a98a:	460c      	mov	r4, r1
 800a98c:	2101      	movs	r1, #1
 800a98e:	f7ff feb5 	bl	800a6fc <_Balloc>
 800a992:	4602      	mov	r2, r0
 800a994:	b928      	cbnz	r0, 800a9a2 <__i2b+0x1a>
 800a996:	4b05      	ldr	r3, [pc, #20]	; (800a9ac <__i2b+0x24>)
 800a998:	4805      	ldr	r0, [pc, #20]	; (800a9b0 <__i2b+0x28>)
 800a99a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a99e:	f000 fe07 	bl	800b5b0 <__assert_func>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	6144      	str	r4, [r0, #20]
 800a9a6:	6103      	str	r3, [r0, #16]
 800a9a8:	bd10      	pop	{r4, pc}
 800a9aa:	bf00      	nop
 800a9ac:	0800e163 	.word	0x0800e163
 800a9b0:	0800e254 	.word	0x0800e254

0800a9b4 <__multiply>:
 800a9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b8:	4614      	mov	r4, r2
 800a9ba:	690a      	ldr	r2, [r1, #16]
 800a9bc:	6923      	ldr	r3, [r4, #16]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	bfb8      	it	lt
 800a9c2:	460b      	movlt	r3, r1
 800a9c4:	460d      	mov	r5, r1
 800a9c6:	bfbc      	itt	lt
 800a9c8:	4625      	movlt	r5, r4
 800a9ca:	461c      	movlt	r4, r3
 800a9cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a9d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a9d4:	68ab      	ldr	r3, [r5, #8]
 800a9d6:	6869      	ldr	r1, [r5, #4]
 800a9d8:	eb0a 0709 	add.w	r7, sl, r9
 800a9dc:	42bb      	cmp	r3, r7
 800a9de:	b085      	sub	sp, #20
 800a9e0:	bfb8      	it	lt
 800a9e2:	3101      	addlt	r1, #1
 800a9e4:	f7ff fe8a 	bl	800a6fc <_Balloc>
 800a9e8:	b930      	cbnz	r0, 800a9f8 <__multiply+0x44>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	4b42      	ldr	r3, [pc, #264]	; (800aaf8 <__multiply+0x144>)
 800a9ee:	4843      	ldr	r0, [pc, #268]	; (800aafc <__multiply+0x148>)
 800a9f0:	f240 115d 	movw	r1, #349	; 0x15d
 800a9f4:	f000 fddc 	bl	800b5b0 <__assert_func>
 800a9f8:	f100 0614 	add.w	r6, r0, #20
 800a9fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800aa00:	4633      	mov	r3, r6
 800aa02:	2200      	movs	r2, #0
 800aa04:	4543      	cmp	r3, r8
 800aa06:	d31e      	bcc.n	800aa46 <__multiply+0x92>
 800aa08:	f105 0c14 	add.w	ip, r5, #20
 800aa0c:	f104 0314 	add.w	r3, r4, #20
 800aa10:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800aa14:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800aa18:	9202      	str	r2, [sp, #8]
 800aa1a:	ebac 0205 	sub.w	r2, ip, r5
 800aa1e:	3a15      	subs	r2, #21
 800aa20:	f022 0203 	bic.w	r2, r2, #3
 800aa24:	3204      	adds	r2, #4
 800aa26:	f105 0115 	add.w	r1, r5, #21
 800aa2a:	458c      	cmp	ip, r1
 800aa2c:	bf38      	it	cc
 800aa2e:	2204      	movcc	r2, #4
 800aa30:	9201      	str	r2, [sp, #4]
 800aa32:	9a02      	ldr	r2, [sp, #8]
 800aa34:	9303      	str	r3, [sp, #12]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d808      	bhi.n	800aa4c <__multiply+0x98>
 800aa3a:	2f00      	cmp	r7, #0
 800aa3c:	dc55      	bgt.n	800aaea <__multiply+0x136>
 800aa3e:	6107      	str	r7, [r0, #16]
 800aa40:	b005      	add	sp, #20
 800aa42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa46:	f843 2b04 	str.w	r2, [r3], #4
 800aa4a:	e7db      	b.n	800aa04 <__multiply+0x50>
 800aa4c:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa50:	f1ba 0f00 	cmp.w	sl, #0
 800aa54:	d020      	beq.n	800aa98 <__multiply+0xe4>
 800aa56:	f105 0e14 	add.w	lr, r5, #20
 800aa5a:	46b1      	mov	r9, r6
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800aa62:	f8d9 b000 	ldr.w	fp, [r9]
 800aa66:	b2a1      	uxth	r1, r4
 800aa68:	fa1f fb8b 	uxth.w	fp, fp
 800aa6c:	fb0a b101 	mla	r1, sl, r1, fp
 800aa70:	4411      	add	r1, r2
 800aa72:	f8d9 2000 	ldr.w	r2, [r9]
 800aa76:	0c24      	lsrs	r4, r4, #16
 800aa78:	0c12      	lsrs	r2, r2, #16
 800aa7a:	fb0a 2404 	mla	r4, sl, r4, r2
 800aa7e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aa82:	b289      	uxth	r1, r1
 800aa84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aa88:	45f4      	cmp	ip, lr
 800aa8a:	f849 1b04 	str.w	r1, [r9], #4
 800aa8e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aa92:	d8e4      	bhi.n	800aa5e <__multiply+0xaa>
 800aa94:	9901      	ldr	r1, [sp, #4]
 800aa96:	5072      	str	r2, [r6, r1]
 800aa98:	9a03      	ldr	r2, [sp, #12]
 800aa9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	f1b9 0f00 	cmp.w	r9, #0
 800aaa4:	d01f      	beq.n	800aae6 <__multiply+0x132>
 800aaa6:	6834      	ldr	r4, [r6, #0]
 800aaa8:	f105 0114 	add.w	r1, r5, #20
 800aaac:	46b6      	mov	lr, r6
 800aaae:	f04f 0a00 	mov.w	sl, #0
 800aab2:	880a      	ldrh	r2, [r1, #0]
 800aab4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800aab8:	fb09 b202 	mla	r2, r9, r2, fp
 800aabc:	4492      	add	sl, r2
 800aabe:	b2a4      	uxth	r4, r4
 800aac0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800aac4:	f84e 4b04 	str.w	r4, [lr], #4
 800aac8:	f851 4b04 	ldr.w	r4, [r1], #4
 800aacc:	f8be 2000 	ldrh.w	r2, [lr]
 800aad0:	0c24      	lsrs	r4, r4, #16
 800aad2:	fb09 2404 	mla	r4, r9, r4, r2
 800aad6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800aada:	458c      	cmp	ip, r1
 800aadc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aae0:	d8e7      	bhi.n	800aab2 <__multiply+0xfe>
 800aae2:	9a01      	ldr	r2, [sp, #4]
 800aae4:	50b4      	str	r4, [r6, r2]
 800aae6:	3604      	adds	r6, #4
 800aae8:	e7a3      	b.n	800aa32 <__multiply+0x7e>
 800aaea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1a5      	bne.n	800aa3e <__multiply+0x8a>
 800aaf2:	3f01      	subs	r7, #1
 800aaf4:	e7a1      	b.n	800aa3a <__multiply+0x86>
 800aaf6:	bf00      	nop
 800aaf8:	0800e163 	.word	0x0800e163
 800aafc:	0800e254 	.word	0x0800e254

0800ab00 <__pow5mult>:
 800ab00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab04:	4615      	mov	r5, r2
 800ab06:	f012 0203 	ands.w	r2, r2, #3
 800ab0a:	4606      	mov	r6, r0
 800ab0c:	460f      	mov	r7, r1
 800ab0e:	d007      	beq.n	800ab20 <__pow5mult+0x20>
 800ab10:	4c25      	ldr	r4, [pc, #148]	; (800aba8 <__pow5mult+0xa8>)
 800ab12:	3a01      	subs	r2, #1
 800ab14:	2300      	movs	r3, #0
 800ab16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab1a:	f7ff fe51 	bl	800a7c0 <__multadd>
 800ab1e:	4607      	mov	r7, r0
 800ab20:	10ad      	asrs	r5, r5, #2
 800ab22:	d03d      	beq.n	800aba0 <__pow5mult+0xa0>
 800ab24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab26:	b97c      	cbnz	r4, 800ab48 <__pow5mult+0x48>
 800ab28:	2010      	movs	r0, #16
 800ab2a:	f7ff fdbf 	bl	800a6ac <malloc>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	6270      	str	r0, [r6, #36]	; 0x24
 800ab32:	b928      	cbnz	r0, 800ab40 <__pow5mult+0x40>
 800ab34:	4b1d      	ldr	r3, [pc, #116]	; (800abac <__pow5mult+0xac>)
 800ab36:	481e      	ldr	r0, [pc, #120]	; (800abb0 <__pow5mult+0xb0>)
 800ab38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ab3c:	f000 fd38 	bl	800b5b0 <__assert_func>
 800ab40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab44:	6004      	str	r4, [r0, #0]
 800ab46:	60c4      	str	r4, [r0, #12]
 800ab48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab50:	b94c      	cbnz	r4, 800ab66 <__pow5mult+0x66>
 800ab52:	f240 2171 	movw	r1, #625	; 0x271
 800ab56:	4630      	mov	r0, r6
 800ab58:	f7ff ff16 	bl	800a988 <__i2b>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab62:	4604      	mov	r4, r0
 800ab64:	6003      	str	r3, [r0, #0]
 800ab66:	f04f 0900 	mov.w	r9, #0
 800ab6a:	07eb      	lsls	r3, r5, #31
 800ab6c:	d50a      	bpl.n	800ab84 <__pow5mult+0x84>
 800ab6e:	4639      	mov	r1, r7
 800ab70:	4622      	mov	r2, r4
 800ab72:	4630      	mov	r0, r6
 800ab74:	f7ff ff1e 	bl	800a9b4 <__multiply>
 800ab78:	4639      	mov	r1, r7
 800ab7a:	4680      	mov	r8, r0
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	f7ff fdfd 	bl	800a77c <_Bfree>
 800ab82:	4647      	mov	r7, r8
 800ab84:	106d      	asrs	r5, r5, #1
 800ab86:	d00b      	beq.n	800aba0 <__pow5mult+0xa0>
 800ab88:	6820      	ldr	r0, [r4, #0]
 800ab8a:	b938      	cbnz	r0, 800ab9c <__pow5mult+0x9c>
 800ab8c:	4622      	mov	r2, r4
 800ab8e:	4621      	mov	r1, r4
 800ab90:	4630      	mov	r0, r6
 800ab92:	f7ff ff0f 	bl	800a9b4 <__multiply>
 800ab96:	6020      	str	r0, [r4, #0]
 800ab98:	f8c0 9000 	str.w	r9, [r0]
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	e7e4      	b.n	800ab6a <__pow5mult+0x6a>
 800aba0:	4638      	mov	r0, r7
 800aba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aba6:	bf00      	nop
 800aba8:	0800e3a8 	.word	0x0800e3a8
 800abac:	0800e0ed 	.word	0x0800e0ed
 800abb0:	0800e254 	.word	0x0800e254

0800abb4 <__lshift>:
 800abb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb8:	460c      	mov	r4, r1
 800abba:	6849      	ldr	r1, [r1, #4]
 800abbc:	6923      	ldr	r3, [r4, #16]
 800abbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abc2:	68a3      	ldr	r3, [r4, #8]
 800abc4:	4607      	mov	r7, r0
 800abc6:	4691      	mov	r9, r2
 800abc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abcc:	f108 0601 	add.w	r6, r8, #1
 800abd0:	42b3      	cmp	r3, r6
 800abd2:	db0b      	blt.n	800abec <__lshift+0x38>
 800abd4:	4638      	mov	r0, r7
 800abd6:	f7ff fd91 	bl	800a6fc <_Balloc>
 800abda:	4605      	mov	r5, r0
 800abdc:	b948      	cbnz	r0, 800abf2 <__lshift+0x3e>
 800abde:	4602      	mov	r2, r0
 800abe0:	4b28      	ldr	r3, [pc, #160]	; (800ac84 <__lshift+0xd0>)
 800abe2:	4829      	ldr	r0, [pc, #164]	; (800ac88 <__lshift+0xd4>)
 800abe4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800abe8:	f000 fce2 	bl	800b5b0 <__assert_func>
 800abec:	3101      	adds	r1, #1
 800abee:	005b      	lsls	r3, r3, #1
 800abf0:	e7ee      	b.n	800abd0 <__lshift+0x1c>
 800abf2:	2300      	movs	r3, #0
 800abf4:	f100 0114 	add.w	r1, r0, #20
 800abf8:	f100 0210 	add.w	r2, r0, #16
 800abfc:	4618      	mov	r0, r3
 800abfe:	4553      	cmp	r3, sl
 800ac00:	db33      	blt.n	800ac6a <__lshift+0xb6>
 800ac02:	6920      	ldr	r0, [r4, #16]
 800ac04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac08:	f104 0314 	add.w	r3, r4, #20
 800ac0c:	f019 091f 	ands.w	r9, r9, #31
 800ac10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac18:	d02b      	beq.n	800ac72 <__lshift+0xbe>
 800ac1a:	f1c9 0e20 	rsb	lr, r9, #32
 800ac1e:	468a      	mov	sl, r1
 800ac20:	2200      	movs	r2, #0
 800ac22:	6818      	ldr	r0, [r3, #0]
 800ac24:	fa00 f009 	lsl.w	r0, r0, r9
 800ac28:	4302      	orrs	r2, r0
 800ac2a:	f84a 2b04 	str.w	r2, [sl], #4
 800ac2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac32:	459c      	cmp	ip, r3
 800ac34:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac38:	d8f3      	bhi.n	800ac22 <__lshift+0x6e>
 800ac3a:	ebac 0304 	sub.w	r3, ip, r4
 800ac3e:	3b15      	subs	r3, #21
 800ac40:	f023 0303 	bic.w	r3, r3, #3
 800ac44:	3304      	adds	r3, #4
 800ac46:	f104 0015 	add.w	r0, r4, #21
 800ac4a:	4584      	cmp	ip, r0
 800ac4c:	bf38      	it	cc
 800ac4e:	2304      	movcc	r3, #4
 800ac50:	50ca      	str	r2, [r1, r3]
 800ac52:	b10a      	cbz	r2, 800ac58 <__lshift+0xa4>
 800ac54:	f108 0602 	add.w	r6, r8, #2
 800ac58:	3e01      	subs	r6, #1
 800ac5a:	4638      	mov	r0, r7
 800ac5c:	612e      	str	r6, [r5, #16]
 800ac5e:	4621      	mov	r1, r4
 800ac60:	f7ff fd8c 	bl	800a77c <_Bfree>
 800ac64:	4628      	mov	r0, r5
 800ac66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac6e:	3301      	adds	r3, #1
 800ac70:	e7c5      	b.n	800abfe <__lshift+0x4a>
 800ac72:	3904      	subs	r1, #4
 800ac74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac78:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac7c:	459c      	cmp	ip, r3
 800ac7e:	d8f9      	bhi.n	800ac74 <__lshift+0xc0>
 800ac80:	e7ea      	b.n	800ac58 <__lshift+0xa4>
 800ac82:	bf00      	nop
 800ac84:	0800e163 	.word	0x0800e163
 800ac88:	0800e254 	.word	0x0800e254

0800ac8c <__mcmp>:
 800ac8c:	b530      	push	{r4, r5, lr}
 800ac8e:	6902      	ldr	r2, [r0, #16]
 800ac90:	690c      	ldr	r4, [r1, #16]
 800ac92:	1b12      	subs	r2, r2, r4
 800ac94:	d10e      	bne.n	800acb4 <__mcmp+0x28>
 800ac96:	f100 0314 	add.w	r3, r0, #20
 800ac9a:	3114      	adds	r1, #20
 800ac9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aca0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aca4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aca8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800acac:	42a5      	cmp	r5, r4
 800acae:	d003      	beq.n	800acb8 <__mcmp+0x2c>
 800acb0:	d305      	bcc.n	800acbe <__mcmp+0x32>
 800acb2:	2201      	movs	r2, #1
 800acb4:	4610      	mov	r0, r2
 800acb6:	bd30      	pop	{r4, r5, pc}
 800acb8:	4283      	cmp	r3, r0
 800acba:	d3f3      	bcc.n	800aca4 <__mcmp+0x18>
 800acbc:	e7fa      	b.n	800acb4 <__mcmp+0x28>
 800acbe:	f04f 32ff 	mov.w	r2, #4294967295
 800acc2:	e7f7      	b.n	800acb4 <__mcmp+0x28>

0800acc4 <__mdiff>:
 800acc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc8:	460c      	mov	r4, r1
 800acca:	4606      	mov	r6, r0
 800accc:	4611      	mov	r1, r2
 800acce:	4620      	mov	r0, r4
 800acd0:	4617      	mov	r7, r2
 800acd2:	f7ff ffdb 	bl	800ac8c <__mcmp>
 800acd6:	1e05      	subs	r5, r0, #0
 800acd8:	d110      	bne.n	800acfc <__mdiff+0x38>
 800acda:	4629      	mov	r1, r5
 800acdc:	4630      	mov	r0, r6
 800acde:	f7ff fd0d 	bl	800a6fc <_Balloc>
 800ace2:	b930      	cbnz	r0, 800acf2 <__mdiff+0x2e>
 800ace4:	4b39      	ldr	r3, [pc, #228]	; (800adcc <__mdiff+0x108>)
 800ace6:	4602      	mov	r2, r0
 800ace8:	f240 2132 	movw	r1, #562	; 0x232
 800acec:	4838      	ldr	r0, [pc, #224]	; (800add0 <__mdiff+0x10c>)
 800acee:	f000 fc5f 	bl	800b5b0 <__assert_func>
 800acf2:	2301      	movs	r3, #1
 800acf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800acf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acfc:	bfa4      	itt	ge
 800acfe:	463b      	movge	r3, r7
 800ad00:	4627      	movge	r7, r4
 800ad02:	4630      	mov	r0, r6
 800ad04:	6879      	ldr	r1, [r7, #4]
 800ad06:	bfa6      	itte	ge
 800ad08:	461c      	movge	r4, r3
 800ad0a:	2500      	movge	r5, #0
 800ad0c:	2501      	movlt	r5, #1
 800ad0e:	f7ff fcf5 	bl	800a6fc <_Balloc>
 800ad12:	b920      	cbnz	r0, 800ad1e <__mdiff+0x5a>
 800ad14:	4b2d      	ldr	r3, [pc, #180]	; (800adcc <__mdiff+0x108>)
 800ad16:	4602      	mov	r2, r0
 800ad18:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ad1c:	e7e6      	b.n	800acec <__mdiff+0x28>
 800ad1e:	693e      	ldr	r6, [r7, #16]
 800ad20:	60c5      	str	r5, [r0, #12]
 800ad22:	6925      	ldr	r5, [r4, #16]
 800ad24:	f107 0114 	add.w	r1, r7, #20
 800ad28:	f104 0914 	add.w	r9, r4, #20
 800ad2c:	f100 0e14 	add.w	lr, r0, #20
 800ad30:	f107 0210 	add.w	r2, r7, #16
 800ad34:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ad38:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ad3c:	46f2      	mov	sl, lr
 800ad3e:	2700      	movs	r7, #0
 800ad40:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad48:	fa1f f883 	uxth.w	r8, r3
 800ad4c:	fa17 f78b 	uxtah	r7, r7, fp
 800ad50:	0c1b      	lsrs	r3, r3, #16
 800ad52:	eba7 0808 	sub.w	r8, r7, r8
 800ad56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad5e:	fa1f f888 	uxth.w	r8, r8
 800ad62:	141f      	asrs	r7, r3, #16
 800ad64:	454d      	cmp	r5, r9
 800ad66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad6a:	f84a 3b04 	str.w	r3, [sl], #4
 800ad6e:	d8e7      	bhi.n	800ad40 <__mdiff+0x7c>
 800ad70:	1b2b      	subs	r3, r5, r4
 800ad72:	3b15      	subs	r3, #21
 800ad74:	f023 0303 	bic.w	r3, r3, #3
 800ad78:	3304      	adds	r3, #4
 800ad7a:	3415      	adds	r4, #21
 800ad7c:	42a5      	cmp	r5, r4
 800ad7e:	bf38      	it	cc
 800ad80:	2304      	movcc	r3, #4
 800ad82:	4419      	add	r1, r3
 800ad84:	4473      	add	r3, lr
 800ad86:	469e      	mov	lr, r3
 800ad88:	460d      	mov	r5, r1
 800ad8a:	4565      	cmp	r5, ip
 800ad8c:	d30e      	bcc.n	800adac <__mdiff+0xe8>
 800ad8e:	f10c 0203 	add.w	r2, ip, #3
 800ad92:	1a52      	subs	r2, r2, r1
 800ad94:	f022 0203 	bic.w	r2, r2, #3
 800ad98:	3903      	subs	r1, #3
 800ad9a:	458c      	cmp	ip, r1
 800ad9c:	bf38      	it	cc
 800ad9e:	2200      	movcc	r2, #0
 800ada0:	441a      	add	r2, r3
 800ada2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ada6:	b17b      	cbz	r3, 800adc8 <__mdiff+0x104>
 800ada8:	6106      	str	r6, [r0, #16]
 800adaa:	e7a5      	b.n	800acf8 <__mdiff+0x34>
 800adac:	f855 8b04 	ldr.w	r8, [r5], #4
 800adb0:	fa17 f488 	uxtah	r4, r7, r8
 800adb4:	1422      	asrs	r2, r4, #16
 800adb6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800adba:	b2a4      	uxth	r4, r4
 800adbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800adc0:	f84e 4b04 	str.w	r4, [lr], #4
 800adc4:	1417      	asrs	r7, r2, #16
 800adc6:	e7e0      	b.n	800ad8a <__mdiff+0xc6>
 800adc8:	3e01      	subs	r6, #1
 800adca:	e7ea      	b.n	800ada2 <__mdiff+0xde>
 800adcc:	0800e163 	.word	0x0800e163
 800add0:	0800e254 	.word	0x0800e254

0800add4 <__ulp>:
 800add4:	b082      	sub	sp, #8
 800add6:	ed8d 0b00 	vstr	d0, [sp]
 800adda:	9b01      	ldr	r3, [sp, #4]
 800addc:	4912      	ldr	r1, [pc, #72]	; (800ae28 <__ulp+0x54>)
 800adde:	4019      	ands	r1, r3
 800ade0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ade4:	2900      	cmp	r1, #0
 800ade6:	dd05      	ble.n	800adf4 <__ulp+0x20>
 800ade8:	2200      	movs	r2, #0
 800adea:	460b      	mov	r3, r1
 800adec:	ec43 2b10 	vmov	d0, r2, r3
 800adf0:	b002      	add	sp, #8
 800adf2:	4770      	bx	lr
 800adf4:	4249      	negs	r1, r1
 800adf6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800adfa:	ea4f 5021 	mov.w	r0, r1, asr #20
 800adfe:	f04f 0200 	mov.w	r2, #0
 800ae02:	f04f 0300 	mov.w	r3, #0
 800ae06:	da04      	bge.n	800ae12 <__ulp+0x3e>
 800ae08:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ae0c:	fa41 f300 	asr.w	r3, r1, r0
 800ae10:	e7ec      	b.n	800adec <__ulp+0x18>
 800ae12:	f1a0 0114 	sub.w	r1, r0, #20
 800ae16:	291e      	cmp	r1, #30
 800ae18:	bfda      	itte	le
 800ae1a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ae1e:	fa20 f101 	lsrle.w	r1, r0, r1
 800ae22:	2101      	movgt	r1, #1
 800ae24:	460a      	mov	r2, r1
 800ae26:	e7e1      	b.n	800adec <__ulp+0x18>
 800ae28:	7ff00000 	.word	0x7ff00000

0800ae2c <__b2d>:
 800ae2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2e:	6905      	ldr	r5, [r0, #16]
 800ae30:	f100 0714 	add.w	r7, r0, #20
 800ae34:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ae38:	1f2e      	subs	r6, r5, #4
 800ae3a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f7ff fd52 	bl	800a8e8 <__hi0bits>
 800ae44:	f1c0 0320 	rsb	r3, r0, #32
 800ae48:	280a      	cmp	r0, #10
 800ae4a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aec8 <__b2d+0x9c>
 800ae4e:	600b      	str	r3, [r1, #0]
 800ae50:	dc14      	bgt.n	800ae7c <__b2d+0x50>
 800ae52:	f1c0 0e0b 	rsb	lr, r0, #11
 800ae56:	fa24 f10e 	lsr.w	r1, r4, lr
 800ae5a:	42b7      	cmp	r7, r6
 800ae5c:	ea41 030c 	orr.w	r3, r1, ip
 800ae60:	bf34      	ite	cc
 800ae62:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ae66:	2100      	movcs	r1, #0
 800ae68:	3015      	adds	r0, #21
 800ae6a:	fa04 f000 	lsl.w	r0, r4, r0
 800ae6e:	fa21 f10e 	lsr.w	r1, r1, lr
 800ae72:	ea40 0201 	orr.w	r2, r0, r1
 800ae76:	ec43 2b10 	vmov	d0, r2, r3
 800ae7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae7c:	42b7      	cmp	r7, r6
 800ae7e:	bf3a      	itte	cc
 800ae80:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ae84:	f1a5 0608 	subcc.w	r6, r5, #8
 800ae88:	2100      	movcs	r1, #0
 800ae8a:	380b      	subs	r0, #11
 800ae8c:	d017      	beq.n	800aebe <__b2d+0x92>
 800ae8e:	f1c0 0c20 	rsb	ip, r0, #32
 800ae92:	fa04 f500 	lsl.w	r5, r4, r0
 800ae96:	42be      	cmp	r6, r7
 800ae98:	fa21 f40c 	lsr.w	r4, r1, ip
 800ae9c:	ea45 0504 	orr.w	r5, r5, r4
 800aea0:	bf8c      	ite	hi
 800aea2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aea6:	2400      	movls	r4, #0
 800aea8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800aeac:	fa01 f000 	lsl.w	r0, r1, r0
 800aeb0:	fa24 f40c 	lsr.w	r4, r4, ip
 800aeb4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aeb8:	ea40 0204 	orr.w	r2, r0, r4
 800aebc:	e7db      	b.n	800ae76 <__b2d+0x4a>
 800aebe:	ea44 030c 	orr.w	r3, r4, ip
 800aec2:	460a      	mov	r2, r1
 800aec4:	e7d7      	b.n	800ae76 <__b2d+0x4a>
 800aec6:	bf00      	nop
 800aec8:	3ff00000 	.word	0x3ff00000

0800aecc <__d2b>:
 800aecc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aed0:	4689      	mov	r9, r1
 800aed2:	2101      	movs	r1, #1
 800aed4:	ec57 6b10 	vmov	r6, r7, d0
 800aed8:	4690      	mov	r8, r2
 800aeda:	f7ff fc0f 	bl	800a6fc <_Balloc>
 800aede:	4604      	mov	r4, r0
 800aee0:	b930      	cbnz	r0, 800aef0 <__d2b+0x24>
 800aee2:	4602      	mov	r2, r0
 800aee4:	4b25      	ldr	r3, [pc, #148]	; (800af7c <__d2b+0xb0>)
 800aee6:	4826      	ldr	r0, [pc, #152]	; (800af80 <__d2b+0xb4>)
 800aee8:	f240 310a 	movw	r1, #778	; 0x30a
 800aeec:	f000 fb60 	bl	800b5b0 <__assert_func>
 800aef0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aef4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aef8:	bb35      	cbnz	r5, 800af48 <__d2b+0x7c>
 800aefa:	2e00      	cmp	r6, #0
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	d028      	beq.n	800af52 <__d2b+0x86>
 800af00:	4668      	mov	r0, sp
 800af02:	9600      	str	r6, [sp, #0]
 800af04:	f7ff fd10 	bl	800a928 <__lo0bits>
 800af08:	9900      	ldr	r1, [sp, #0]
 800af0a:	b300      	cbz	r0, 800af4e <__d2b+0x82>
 800af0c:	9a01      	ldr	r2, [sp, #4]
 800af0e:	f1c0 0320 	rsb	r3, r0, #32
 800af12:	fa02 f303 	lsl.w	r3, r2, r3
 800af16:	430b      	orrs	r3, r1
 800af18:	40c2      	lsrs	r2, r0
 800af1a:	6163      	str	r3, [r4, #20]
 800af1c:	9201      	str	r2, [sp, #4]
 800af1e:	9b01      	ldr	r3, [sp, #4]
 800af20:	61a3      	str	r3, [r4, #24]
 800af22:	2b00      	cmp	r3, #0
 800af24:	bf14      	ite	ne
 800af26:	2202      	movne	r2, #2
 800af28:	2201      	moveq	r2, #1
 800af2a:	6122      	str	r2, [r4, #16]
 800af2c:	b1d5      	cbz	r5, 800af64 <__d2b+0x98>
 800af2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800af32:	4405      	add	r5, r0
 800af34:	f8c9 5000 	str.w	r5, [r9]
 800af38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af3c:	f8c8 0000 	str.w	r0, [r8]
 800af40:	4620      	mov	r0, r4
 800af42:	b003      	add	sp, #12
 800af44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af4c:	e7d5      	b.n	800aefa <__d2b+0x2e>
 800af4e:	6161      	str	r1, [r4, #20]
 800af50:	e7e5      	b.n	800af1e <__d2b+0x52>
 800af52:	a801      	add	r0, sp, #4
 800af54:	f7ff fce8 	bl	800a928 <__lo0bits>
 800af58:	9b01      	ldr	r3, [sp, #4]
 800af5a:	6163      	str	r3, [r4, #20]
 800af5c:	2201      	movs	r2, #1
 800af5e:	6122      	str	r2, [r4, #16]
 800af60:	3020      	adds	r0, #32
 800af62:	e7e3      	b.n	800af2c <__d2b+0x60>
 800af64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af6c:	f8c9 0000 	str.w	r0, [r9]
 800af70:	6918      	ldr	r0, [r3, #16]
 800af72:	f7ff fcb9 	bl	800a8e8 <__hi0bits>
 800af76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af7a:	e7df      	b.n	800af3c <__d2b+0x70>
 800af7c:	0800e163 	.word	0x0800e163
 800af80:	0800e254 	.word	0x0800e254

0800af84 <__ratio>:
 800af84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af88:	4688      	mov	r8, r1
 800af8a:	4669      	mov	r1, sp
 800af8c:	4681      	mov	r9, r0
 800af8e:	f7ff ff4d 	bl	800ae2c <__b2d>
 800af92:	a901      	add	r1, sp, #4
 800af94:	4640      	mov	r0, r8
 800af96:	ec55 4b10 	vmov	r4, r5, d0
 800af9a:	f7ff ff47 	bl	800ae2c <__b2d>
 800af9e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800afa2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800afa6:	eba3 0c02 	sub.w	ip, r3, r2
 800afaa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800afae:	1a9b      	subs	r3, r3, r2
 800afb0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800afb4:	ec51 0b10 	vmov	r0, r1, d0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	bfd6      	itet	le
 800afbc:	460a      	movle	r2, r1
 800afbe:	462a      	movgt	r2, r5
 800afc0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800afc4:	468b      	mov	fp, r1
 800afc6:	462f      	mov	r7, r5
 800afc8:	bfd4      	ite	le
 800afca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800afce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800afd2:	4620      	mov	r0, r4
 800afd4:	ee10 2a10 	vmov	r2, s0
 800afd8:	465b      	mov	r3, fp
 800afda:	4639      	mov	r1, r7
 800afdc:	f7f5 fc66 	bl	80008ac <__aeabi_ddiv>
 800afe0:	ec41 0b10 	vmov	d0, r0, r1
 800afe4:	b003      	add	sp, #12
 800afe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800afea <__copybits>:
 800afea:	3901      	subs	r1, #1
 800afec:	b570      	push	{r4, r5, r6, lr}
 800afee:	1149      	asrs	r1, r1, #5
 800aff0:	6914      	ldr	r4, [r2, #16]
 800aff2:	3101      	adds	r1, #1
 800aff4:	f102 0314 	add.w	r3, r2, #20
 800aff8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800affc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b000:	1f05      	subs	r5, r0, #4
 800b002:	42a3      	cmp	r3, r4
 800b004:	d30c      	bcc.n	800b020 <__copybits+0x36>
 800b006:	1aa3      	subs	r3, r4, r2
 800b008:	3b11      	subs	r3, #17
 800b00a:	f023 0303 	bic.w	r3, r3, #3
 800b00e:	3211      	adds	r2, #17
 800b010:	42a2      	cmp	r2, r4
 800b012:	bf88      	it	hi
 800b014:	2300      	movhi	r3, #0
 800b016:	4418      	add	r0, r3
 800b018:	2300      	movs	r3, #0
 800b01a:	4288      	cmp	r0, r1
 800b01c:	d305      	bcc.n	800b02a <__copybits+0x40>
 800b01e:	bd70      	pop	{r4, r5, r6, pc}
 800b020:	f853 6b04 	ldr.w	r6, [r3], #4
 800b024:	f845 6f04 	str.w	r6, [r5, #4]!
 800b028:	e7eb      	b.n	800b002 <__copybits+0x18>
 800b02a:	f840 3b04 	str.w	r3, [r0], #4
 800b02e:	e7f4      	b.n	800b01a <__copybits+0x30>

0800b030 <__any_on>:
 800b030:	f100 0214 	add.w	r2, r0, #20
 800b034:	6900      	ldr	r0, [r0, #16]
 800b036:	114b      	asrs	r3, r1, #5
 800b038:	4298      	cmp	r0, r3
 800b03a:	b510      	push	{r4, lr}
 800b03c:	db11      	blt.n	800b062 <__any_on+0x32>
 800b03e:	dd0a      	ble.n	800b056 <__any_on+0x26>
 800b040:	f011 011f 	ands.w	r1, r1, #31
 800b044:	d007      	beq.n	800b056 <__any_on+0x26>
 800b046:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b04a:	fa24 f001 	lsr.w	r0, r4, r1
 800b04e:	fa00 f101 	lsl.w	r1, r0, r1
 800b052:	428c      	cmp	r4, r1
 800b054:	d10b      	bne.n	800b06e <__any_on+0x3e>
 800b056:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d803      	bhi.n	800b066 <__any_on+0x36>
 800b05e:	2000      	movs	r0, #0
 800b060:	bd10      	pop	{r4, pc}
 800b062:	4603      	mov	r3, r0
 800b064:	e7f7      	b.n	800b056 <__any_on+0x26>
 800b066:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b06a:	2900      	cmp	r1, #0
 800b06c:	d0f5      	beq.n	800b05a <__any_on+0x2a>
 800b06e:	2001      	movs	r0, #1
 800b070:	e7f6      	b.n	800b060 <__any_on+0x30>

0800b072 <_calloc_r>:
 800b072:	b513      	push	{r0, r1, r4, lr}
 800b074:	434a      	muls	r2, r1
 800b076:	4611      	mov	r1, r2
 800b078:	9201      	str	r2, [sp, #4]
 800b07a:	f000 f859 	bl	800b130 <_malloc_r>
 800b07e:	4604      	mov	r4, r0
 800b080:	b118      	cbz	r0, 800b08a <_calloc_r+0x18>
 800b082:	9a01      	ldr	r2, [sp, #4]
 800b084:	2100      	movs	r1, #0
 800b086:	f7fc fb11 	bl	80076ac <memset>
 800b08a:	4620      	mov	r0, r4
 800b08c:	b002      	add	sp, #8
 800b08e:	bd10      	pop	{r4, pc}

0800b090 <_free_r>:
 800b090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b092:	2900      	cmp	r1, #0
 800b094:	d048      	beq.n	800b128 <_free_r+0x98>
 800b096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b09a:	9001      	str	r0, [sp, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f1a1 0404 	sub.w	r4, r1, #4
 800b0a2:	bfb8      	it	lt
 800b0a4:	18e4      	addlt	r4, r4, r3
 800b0a6:	f000 faf7 	bl	800b698 <__malloc_lock>
 800b0aa:	4a20      	ldr	r2, [pc, #128]	; (800b12c <_free_r+0x9c>)
 800b0ac:	9801      	ldr	r0, [sp, #4]
 800b0ae:	6813      	ldr	r3, [r2, #0]
 800b0b0:	4615      	mov	r5, r2
 800b0b2:	b933      	cbnz	r3, 800b0c2 <_free_r+0x32>
 800b0b4:	6063      	str	r3, [r4, #4]
 800b0b6:	6014      	str	r4, [r2, #0]
 800b0b8:	b003      	add	sp, #12
 800b0ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0be:	f000 baf1 	b.w	800b6a4 <__malloc_unlock>
 800b0c2:	42a3      	cmp	r3, r4
 800b0c4:	d90b      	bls.n	800b0de <_free_r+0x4e>
 800b0c6:	6821      	ldr	r1, [r4, #0]
 800b0c8:	1862      	adds	r2, r4, r1
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	bf04      	itt	eq
 800b0ce:	681a      	ldreq	r2, [r3, #0]
 800b0d0:	685b      	ldreq	r3, [r3, #4]
 800b0d2:	6063      	str	r3, [r4, #4]
 800b0d4:	bf04      	itt	eq
 800b0d6:	1852      	addeq	r2, r2, r1
 800b0d8:	6022      	streq	r2, [r4, #0]
 800b0da:	602c      	str	r4, [r5, #0]
 800b0dc:	e7ec      	b.n	800b0b8 <_free_r+0x28>
 800b0de:	461a      	mov	r2, r3
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	b10b      	cbz	r3, 800b0e8 <_free_r+0x58>
 800b0e4:	42a3      	cmp	r3, r4
 800b0e6:	d9fa      	bls.n	800b0de <_free_r+0x4e>
 800b0e8:	6811      	ldr	r1, [r2, #0]
 800b0ea:	1855      	adds	r5, r2, r1
 800b0ec:	42a5      	cmp	r5, r4
 800b0ee:	d10b      	bne.n	800b108 <_free_r+0x78>
 800b0f0:	6824      	ldr	r4, [r4, #0]
 800b0f2:	4421      	add	r1, r4
 800b0f4:	1854      	adds	r4, r2, r1
 800b0f6:	42a3      	cmp	r3, r4
 800b0f8:	6011      	str	r1, [r2, #0]
 800b0fa:	d1dd      	bne.n	800b0b8 <_free_r+0x28>
 800b0fc:	681c      	ldr	r4, [r3, #0]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	6053      	str	r3, [r2, #4]
 800b102:	4421      	add	r1, r4
 800b104:	6011      	str	r1, [r2, #0]
 800b106:	e7d7      	b.n	800b0b8 <_free_r+0x28>
 800b108:	d902      	bls.n	800b110 <_free_r+0x80>
 800b10a:	230c      	movs	r3, #12
 800b10c:	6003      	str	r3, [r0, #0]
 800b10e:	e7d3      	b.n	800b0b8 <_free_r+0x28>
 800b110:	6825      	ldr	r5, [r4, #0]
 800b112:	1961      	adds	r1, r4, r5
 800b114:	428b      	cmp	r3, r1
 800b116:	bf04      	itt	eq
 800b118:	6819      	ldreq	r1, [r3, #0]
 800b11a:	685b      	ldreq	r3, [r3, #4]
 800b11c:	6063      	str	r3, [r4, #4]
 800b11e:	bf04      	itt	eq
 800b120:	1949      	addeq	r1, r1, r5
 800b122:	6021      	streq	r1, [r4, #0]
 800b124:	6054      	str	r4, [r2, #4]
 800b126:	e7c7      	b.n	800b0b8 <_free_r+0x28>
 800b128:	b003      	add	sp, #12
 800b12a:	bd30      	pop	{r4, r5, pc}
 800b12c:	2000037c 	.word	0x2000037c

0800b130 <_malloc_r>:
 800b130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b132:	1ccd      	adds	r5, r1, #3
 800b134:	f025 0503 	bic.w	r5, r5, #3
 800b138:	3508      	adds	r5, #8
 800b13a:	2d0c      	cmp	r5, #12
 800b13c:	bf38      	it	cc
 800b13e:	250c      	movcc	r5, #12
 800b140:	2d00      	cmp	r5, #0
 800b142:	4606      	mov	r6, r0
 800b144:	db01      	blt.n	800b14a <_malloc_r+0x1a>
 800b146:	42a9      	cmp	r1, r5
 800b148:	d903      	bls.n	800b152 <_malloc_r+0x22>
 800b14a:	230c      	movs	r3, #12
 800b14c:	6033      	str	r3, [r6, #0]
 800b14e:	2000      	movs	r0, #0
 800b150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b152:	f000 faa1 	bl	800b698 <__malloc_lock>
 800b156:	4921      	ldr	r1, [pc, #132]	; (800b1dc <_malloc_r+0xac>)
 800b158:	680a      	ldr	r2, [r1, #0]
 800b15a:	4614      	mov	r4, r2
 800b15c:	b99c      	cbnz	r4, 800b186 <_malloc_r+0x56>
 800b15e:	4f20      	ldr	r7, [pc, #128]	; (800b1e0 <_malloc_r+0xb0>)
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	b923      	cbnz	r3, 800b16e <_malloc_r+0x3e>
 800b164:	4621      	mov	r1, r4
 800b166:	4630      	mov	r0, r6
 800b168:	f000 f99e 	bl	800b4a8 <_sbrk_r>
 800b16c:	6038      	str	r0, [r7, #0]
 800b16e:	4629      	mov	r1, r5
 800b170:	4630      	mov	r0, r6
 800b172:	f000 f999 	bl	800b4a8 <_sbrk_r>
 800b176:	1c43      	adds	r3, r0, #1
 800b178:	d123      	bne.n	800b1c2 <_malloc_r+0x92>
 800b17a:	230c      	movs	r3, #12
 800b17c:	6033      	str	r3, [r6, #0]
 800b17e:	4630      	mov	r0, r6
 800b180:	f000 fa90 	bl	800b6a4 <__malloc_unlock>
 800b184:	e7e3      	b.n	800b14e <_malloc_r+0x1e>
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	1b5b      	subs	r3, r3, r5
 800b18a:	d417      	bmi.n	800b1bc <_malloc_r+0x8c>
 800b18c:	2b0b      	cmp	r3, #11
 800b18e:	d903      	bls.n	800b198 <_malloc_r+0x68>
 800b190:	6023      	str	r3, [r4, #0]
 800b192:	441c      	add	r4, r3
 800b194:	6025      	str	r5, [r4, #0]
 800b196:	e004      	b.n	800b1a2 <_malloc_r+0x72>
 800b198:	6863      	ldr	r3, [r4, #4]
 800b19a:	42a2      	cmp	r2, r4
 800b19c:	bf0c      	ite	eq
 800b19e:	600b      	streq	r3, [r1, #0]
 800b1a0:	6053      	strne	r3, [r2, #4]
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	f000 fa7e 	bl	800b6a4 <__malloc_unlock>
 800b1a8:	f104 000b 	add.w	r0, r4, #11
 800b1ac:	1d23      	adds	r3, r4, #4
 800b1ae:	f020 0007 	bic.w	r0, r0, #7
 800b1b2:	1ac2      	subs	r2, r0, r3
 800b1b4:	d0cc      	beq.n	800b150 <_malloc_r+0x20>
 800b1b6:	1a1b      	subs	r3, r3, r0
 800b1b8:	50a3      	str	r3, [r4, r2]
 800b1ba:	e7c9      	b.n	800b150 <_malloc_r+0x20>
 800b1bc:	4622      	mov	r2, r4
 800b1be:	6864      	ldr	r4, [r4, #4]
 800b1c0:	e7cc      	b.n	800b15c <_malloc_r+0x2c>
 800b1c2:	1cc4      	adds	r4, r0, #3
 800b1c4:	f024 0403 	bic.w	r4, r4, #3
 800b1c8:	42a0      	cmp	r0, r4
 800b1ca:	d0e3      	beq.n	800b194 <_malloc_r+0x64>
 800b1cc:	1a21      	subs	r1, r4, r0
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	f000 f96a 	bl	800b4a8 <_sbrk_r>
 800b1d4:	3001      	adds	r0, #1
 800b1d6:	d1dd      	bne.n	800b194 <_malloc_r+0x64>
 800b1d8:	e7cf      	b.n	800b17a <_malloc_r+0x4a>
 800b1da:	bf00      	nop
 800b1dc:	2000037c 	.word	0x2000037c
 800b1e0:	20000380 	.word	0x20000380

0800b1e4 <__sfputc_r>:
 800b1e4:	6893      	ldr	r3, [r2, #8]
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	b410      	push	{r4}
 800b1ec:	6093      	str	r3, [r2, #8]
 800b1ee:	da08      	bge.n	800b202 <__sfputc_r+0x1e>
 800b1f0:	6994      	ldr	r4, [r2, #24]
 800b1f2:	42a3      	cmp	r3, r4
 800b1f4:	db01      	blt.n	800b1fa <__sfputc_r+0x16>
 800b1f6:	290a      	cmp	r1, #10
 800b1f8:	d103      	bne.n	800b202 <__sfputc_r+0x1e>
 800b1fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1fe:	f7fd bd89 	b.w	8008d14 <__swbuf_r>
 800b202:	6813      	ldr	r3, [r2, #0]
 800b204:	1c58      	adds	r0, r3, #1
 800b206:	6010      	str	r0, [r2, #0]
 800b208:	7019      	strb	r1, [r3, #0]
 800b20a:	4608      	mov	r0, r1
 800b20c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b210:	4770      	bx	lr

0800b212 <__sfputs_r>:
 800b212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b214:	4606      	mov	r6, r0
 800b216:	460f      	mov	r7, r1
 800b218:	4614      	mov	r4, r2
 800b21a:	18d5      	adds	r5, r2, r3
 800b21c:	42ac      	cmp	r4, r5
 800b21e:	d101      	bne.n	800b224 <__sfputs_r+0x12>
 800b220:	2000      	movs	r0, #0
 800b222:	e007      	b.n	800b234 <__sfputs_r+0x22>
 800b224:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b228:	463a      	mov	r2, r7
 800b22a:	4630      	mov	r0, r6
 800b22c:	f7ff ffda 	bl	800b1e4 <__sfputc_r>
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	d1f3      	bne.n	800b21c <__sfputs_r+0xa>
 800b234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b238 <_vfiprintf_r>:
 800b238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23c:	460d      	mov	r5, r1
 800b23e:	b09d      	sub	sp, #116	; 0x74
 800b240:	4614      	mov	r4, r2
 800b242:	4698      	mov	r8, r3
 800b244:	4606      	mov	r6, r0
 800b246:	b118      	cbz	r0, 800b250 <_vfiprintf_r+0x18>
 800b248:	6983      	ldr	r3, [r0, #24]
 800b24a:	b90b      	cbnz	r3, 800b250 <_vfiprintf_r+0x18>
 800b24c:	f7fe fdb6 	bl	8009dbc <__sinit>
 800b250:	4b89      	ldr	r3, [pc, #548]	; (800b478 <_vfiprintf_r+0x240>)
 800b252:	429d      	cmp	r5, r3
 800b254:	d11b      	bne.n	800b28e <_vfiprintf_r+0x56>
 800b256:	6875      	ldr	r5, [r6, #4]
 800b258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b25a:	07d9      	lsls	r1, r3, #31
 800b25c:	d405      	bmi.n	800b26a <_vfiprintf_r+0x32>
 800b25e:	89ab      	ldrh	r3, [r5, #12]
 800b260:	059a      	lsls	r2, r3, #22
 800b262:	d402      	bmi.n	800b26a <_vfiprintf_r+0x32>
 800b264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b266:	f7ff f9ba 	bl	800a5de <__retarget_lock_acquire_recursive>
 800b26a:	89ab      	ldrh	r3, [r5, #12]
 800b26c:	071b      	lsls	r3, r3, #28
 800b26e:	d501      	bpl.n	800b274 <_vfiprintf_r+0x3c>
 800b270:	692b      	ldr	r3, [r5, #16]
 800b272:	b9eb      	cbnz	r3, 800b2b0 <_vfiprintf_r+0x78>
 800b274:	4629      	mov	r1, r5
 800b276:	4630      	mov	r0, r6
 800b278:	f7fd fd9e 	bl	8008db8 <__swsetup_r>
 800b27c:	b1c0      	cbz	r0, 800b2b0 <_vfiprintf_r+0x78>
 800b27e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b280:	07dc      	lsls	r4, r3, #31
 800b282:	d50e      	bpl.n	800b2a2 <_vfiprintf_r+0x6a>
 800b284:	f04f 30ff 	mov.w	r0, #4294967295
 800b288:	b01d      	add	sp, #116	; 0x74
 800b28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b28e:	4b7b      	ldr	r3, [pc, #492]	; (800b47c <_vfiprintf_r+0x244>)
 800b290:	429d      	cmp	r5, r3
 800b292:	d101      	bne.n	800b298 <_vfiprintf_r+0x60>
 800b294:	68b5      	ldr	r5, [r6, #8]
 800b296:	e7df      	b.n	800b258 <_vfiprintf_r+0x20>
 800b298:	4b79      	ldr	r3, [pc, #484]	; (800b480 <_vfiprintf_r+0x248>)
 800b29a:	429d      	cmp	r5, r3
 800b29c:	bf08      	it	eq
 800b29e:	68f5      	ldreq	r5, [r6, #12]
 800b2a0:	e7da      	b.n	800b258 <_vfiprintf_r+0x20>
 800b2a2:	89ab      	ldrh	r3, [r5, #12]
 800b2a4:	0598      	lsls	r0, r3, #22
 800b2a6:	d4ed      	bmi.n	800b284 <_vfiprintf_r+0x4c>
 800b2a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2aa:	f7ff f999 	bl	800a5e0 <__retarget_lock_release_recursive>
 800b2ae:	e7e9      	b.n	800b284 <_vfiprintf_r+0x4c>
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b4:	2320      	movs	r3, #32
 800b2b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2be:	2330      	movs	r3, #48	; 0x30
 800b2c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b484 <_vfiprintf_r+0x24c>
 800b2c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2c8:	f04f 0901 	mov.w	r9, #1
 800b2cc:	4623      	mov	r3, r4
 800b2ce:	469a      	mov	sl, r3
 800b2d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2d4:	b10a      	cbz	r2, 800b2da <_vfiprintf_r+0xa2>
 800b2d6:	2a25      	cmp	r2, #37	; 0x25
 800b2d8:	d1f9      	bne.n	800b2ce <_vfiprintf_r+0x96>
 800b2da:	ebba 0b04 	subs.w	fp, sl, r4
 800b2de:	d00b      	beq.n	800b2f8 <_vfiprintf_r+0xc0>
 800b2e0:	465b      	mov	r3, fp
 800b2e2:	4622      	mov	r2, r4
 800b2e4:	4629      	mov	r1, r5
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	f7ff ff93 	bl	800b212 <__sfputs_r>
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	f000 80aa 	beq.w	800b446 <_vfiprintf_r+0x20e>
 800b2f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2f4:	445a      	add	r2, fp
 800b2f6:	9209      	str	r2, [sp, #36]	; 0x24
 800b2f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f000 80a2 	beq.w	800b446 <_vfiprintf_r+0x20e>
 800b302:	2300      	movs	r3, #0
 800b304:	f04f 32ff 	mov.w	r2, #4294967295
 800b308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b30c:	f10a 0a01 	add.w	sl, sl, #1
 800b310:	9304      	str	r3, [sp, #16]
 800b312:	9307      	str	r3, [sp, #28]
 800b314:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b318:	931a      	str	r3, [sp, #104]	; 0x68
 800b31a:	4654      	mov	r4, sl
 800b31c:	2205      	movs	r2, #5
 800b31e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b322:	4858      	ldr	r0, [pc, #352]	; (800b484 <_vfiprintf_r+0x24c>)
 800b324:	f7f4 ff8c 	bl	8000240 <memchr>
 800b328:	9a04      	ldr	r2, [sp, #16]
 800b32a:	b9d8      	cbnz	r0, 800b364 <_vfiprintf_r+0x12c>
 800b32c:	06d1      	lsls	r1, r2, #27
 800b32e:	bf44      	itt	mi
 800b330:	2320      	movmi	r3, #32
 800b332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b336:	0713      	lsls	r3, r2, #28
 800b338:	bf44      	itt	mi
 800b33a:	232b      	movmi	r3, #43	; 0x2b
 800b33c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b340:	f89a 3000 	ldrb.w	r3, [sl]
 800b344:	2b2a      	cmp	r3, #42	; 0x2a
 800b346:	d015      	beq.n	800b374 <_vfiprintf_r+0x13c>
 800b348:	9a07      	ldr	r2, [sp, #28]
 800b34a:	4654      	mov	r4, sl
 800b34c:	2000      	movs	r0, #0
 800b34e:	f04f 0c0a 	mov.w	ip, #10
 800b352:	4621      	mov	r1, r4
 800b354:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b358:	3b30      	subs	r3, #48	; 0x30
 800b35a:	2b09      	cmp	r3, #9
 800b35c:	d94e      	bls.n	800b3fc <_vfiprintf_r+0x1c4>
 800b35e:	b1b0      	cbz	r0, 800b38e <_vfiprintf_r+0x156>
 800b360:	9207      	str	r2, [sp, #28]
 800b362:	e014      	b.n	800b38e <_vfiprintf_r+0x156>
 800b364:	eba0 0308 	sub.w	r3, r0, r8
 800b368:	fa09 f303 	lsl.w	r3, r9, r3
 800b36c:	4313      	orrs	r3, r2
 800b36e:	9304      	str	r3, [sp, #16]
 800b370:	46a2      	mov	sl, r4
 800b372:	e7d2      	b.n	800b31a <_vfiprintf_r+0xe2>
 800b374:	9b03      	ldr	r3, [sp, #12]
 800b376:	1d19      	adds	r1, r3, #4
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	9103      	str	r1, [sp, #12]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	bfbb      	ittet	lt
 800b380:	425b      	neglt	r3, r3
 800b382:	f042 0202 	orrlt.w	r2, r2, #2
 800b386:	9307      	strge	r3, [sp, #28]
 800b388:	9307      	strlt	r3, [sp, #28]
 800b38a:	bfb8      	it	lt
 800b38c:	9204      	strlt	r2, [sp, #16]
 800b38e:	7823      	ldrb	r3, [r4, #0]
 800b390:	2b2e      	cmp	r3, #46	; 0x2e
 800b392:	d10c      	bne.n	800b3ae <_vfiprintf_r+0x176>
 800b394:	7863      	ldrb	r3, [r4, #1]
 800b396:	2b2a      	cmp	r3, #42	; 0x2a
 800b398:	d135      	bne.n	800b406 <_vfiprintf_r+0x1ce>
 800b39a:	9b03      	ldr	r3, [sp, #12]
 800b39c:	1d1a      	adds	r2, r3, #4
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	9203      	str	r2, [sp, #12]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	bfb8      	it	lt
 800b3a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3aa:	3402      	adds	r4, #2
 800b3ac:	9305      	str	r3, [sp, #20]
 800b3ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b494 <_vfiprintf_r+0x25c>
 800b3b2:	7821      	ldrb	r1, [r4, #0]
 800b3b4:	2203      	movs	r2, #3
 800b3b6:	4650      	mov	r0, sl
 800b3b8:	f7f4 ff42 	bl	8000240 <memchr>
 800b3bc:	b140      	cbz	r0, 800b3d0 <_vfiprintf_r+0x198>
 800b3be:	2340      	movs	r3, #64	; 0x40
 800b3c0:	eba0 000a 	sub.w	r0, r0, sl
 800b3c4:	fa03 f000 	lsl.w	r0, r3, r0
 800b3c8:	9b04      	ldr	r3, [sp, #16]
 800b3ca:	4303      	orrs	r3, r0
 800b3cc:	3401      	adds	r4, #1
 800b3ce:	9304      	str	r3, [sp, #16]
 800b3d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d4:	482c      	ldr	r0, [pc, #176]	; (800b488 <_vfiprintf_r+0x250>)
 800b3d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3da:	2206      	movs	r2, #6
 800b3dc:	f7f4 ff30 	bl	8000240 <memchr>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	d03f      	beq.n	800b464 <_vfiprintf_r+0x22c>
 800b3e4:	4b29      	ldr	r3, [pc, #164]	; (800b48c <_vfiprintf_r+0x254>)
 800b3e6:	bb1b      	cbnz	r3, 800b430 <_vfiprintf_r+0x1f8>
 800b3e8:	9b03      	ldr	r3, [sp, #12]
 800b3ea:	3307      	adds	r3, #7
 800b3ec:	f023 0307 	bic.w	r3, r3, #7
 800b3f0:	3308      	adds	r3, #8
 800b3f2:	9303      	str	r3, [sp, #12]
 800b3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f6:	443b      	add	r3, r7
 800b3f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b3fa:	e767      	b.n	800b2cc <_vfiprintf_r+0x94>
 800b3fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b400:	460c      	mov	r4, r1
 800b402:	2001      	movs	r0, #1
 800b404:	e7a5      	b.n	800b352 <_vfiprintf_r+0x11a>
 800b406:	2300      	movs	r3, #0
 800b408:	3401      	adds	r4, #1
 800b40a:	9305      	str	r3, [sp, #20]
 800b40c:	4619      	mov	r1, r3
 800b40e:	f04f 0c0a 	mov.w	ip, #10
 800b412:	4620      	mov	r0, r4
 800b414:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b418:	3a30      	subs	r2, #48	; 0x30
 800b41a:	2a09      	cmp	r2, #9
 800b41c:	d903      	bls.n	800b426 <_vfiprintf_r+0x1ee>
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d0c5      	beq.n	800b3ae <_vfiprintf_r+0x176>
 800b422:	9105      	str	r1, [sp, #20]
 800b424:	e7c3      	b.n	800b3ae <_vfiprintf_r+0x176>
 800b426:	fb0c 2101 	mla	r1, ip, r1, r2
 800b42a:	4604      	mov	r4, r0
 800b42c:	2301      	movs	r3, #1
 800b42e:	e7f0      	b.n	800b412 <_vfiprintf_r+0x1da>
 800b430:	ab03      	add	r3, sp, #12
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	462a      	mov	r2, r5
 800b436:	4b16      	ldr	r3, [pc, #88]	; (800b490 <_vfiprintf_r+0x258>)
 800b438:	a904      	add	r1, sp, #16
 800b43a:	4630      	mov	r0, r6
 800b43c:	f7fc f9de 	bl	80077fc <_printf_float>
 800b440:	4607      	mov	r7, r0
 800b442:	1c78      	adds	r0, r7, #1
 800b444:	d1d6      	bne.n	800b3f4 <_vfiprintf_r+0x1bc>
 800b446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b448:	07d9      	lsls	r1, r3, #31
 800b44a:	d405      	bmi.n	800b458 <_vfiprintf_r+0x220>
 800b44c:	89ab      	ldrh	r3, [r5, #12]
 800b44e:	059a      	lsls	r2, r3, #22
 800b450:	d402      	bmi.n	800b458 <_vfiprintf_r+0x220>
 800b452:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b454:	f7ff f8c4 	bl	800a5e0 <__retarget_lock_release_recursive>
 800b458:	89ab      	ldrh	r3, [r5, #12]
 800b45a:	065b      	lsls	r3, r3, #25
 800b45c:	f53f af12 	bmi.w	800b284 <_vfiprintf_r+0x4c>
 800b460:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b462:	e711      	b.n	800b288 <_vfiprintf_r+0x50>
 800b464:	ab03      	add	r3, sp, #12
 800b466:	9300      	str	r3, [sp, #0]
 800b468:	462a      	mov	r2, r5
 800b46a:	4b09      	ldr	r3, [pc, #36]	; (800b490 <_vfiprintf_r+0x258>)
 800b46c:	a904      	add	r1, sp, #16
 800b46e:	4630      	mov	r0, r6
 800b470:	f7fc fc68 	bl	8007d44 <_printf_i>
 800b474:	e7e4      	b.n	800b440 <_vfiprintf_r+0x208>
 800b476:	bf00      	nop
 800b478:	0800e194 	.word	0x0800e194
 800b47c:	0800e1b4 	.word	0x0800e1b4
 800b480:	0800e174 	.word	0x0800e174
 800b484:	0800e3b4 	.word	0x0800e3b4
 800b488:	0800e3be 	.word	0x0800e3be
 800b48c:	080077fd 	.word	0x080077fd
 800b490:	0800b213 	.word	0x0800b213
 800b494:	0800e3ba 	.word	0x0800e3ba

0800b498 <nan>:
 800b498:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b4a0 <nan+0x8>
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	00000000 	.word	0x00000000
 800b4a4:	7ff80000 	.word	0x7ff80000

0800b4a8 <_sbrk_r>:
 800b4a8:	b538      	push	{r3, r4, r5, lr}
 800b4aa:	4d06      	ldr	r5, [pc, #24]	; (800b4c4 <_sbrk_r+0x1c>)
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	4608      	mov	r0, r1
 800b4b2:	602b      	str	r3, [r5, #0]
 800b4b4:	f7f7 fec4 	bl	8003240 <_sbrk>
 800b4b8:	1c43      	adds	r3, r0, #1
 800b4ba:	d102      	bne.n	800b4c2 <_sbrk_r+0x1a>
 800b4bc:	682b      	ldr	r3, [r5, #0]
 800b4be:	b103      	cbz	r3, 800b4c2 <_sbrk_r+0x1a>
 800b4c0:	6023      	str	r3, [r4, #0]
 800b4c2:	bd38      	pop	{r3, r4, r5, pc}
 800b4c4:	2000066c 	.word	0x2000066c

0800b4c8 <__sread>:
 800b4c8:	b510      	push	{r4, lr}
 800b4ca:	460c      	mov	r4, r1
 800b4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d0:	f000 f8ee 	bl	800b6b0 <_read_r>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	bfab      	itete	ge
 800b4d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b4da:	89a3      	ldrhlt	r3, [r4, #12]
 800b4dc:	181b      	addge	r3, r3, r0
 800b4de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4e2:	bfac      	ite	ge
 800b4e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4e6:	81a3      	strhlt	r3, [r4, #12]
 800b4e8:	bd10      	pop	{r4, pc}

0800b4ea <__swrite>:
 800b4ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ee:	461f      	mov	r7, r3
 800b4f0:	898b      	ldrh	r3, [r1, #12]
 800b4f2:	05db      	lsls	r3, r3, #23
 800b4f4:	4605      	mov	r5, r0
 800b4f6:	460c      	mov	r4, r1
 800b4f8:	4616      	mov	r6, r2
 800b4fa:	d505      	bpl.n	800b508 <__swrite+0x1e>
 800b4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b500:	2302      	movs	r3, #2
 800b502:	2200      	movs	r2, #0
 800b504:	f000 f8b6 	bl	800b674 <_lseek_r>
 800b508:	89a3      	ldrh	r3, [r4, #12]
 800b50a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b50e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b512:	81a3      	strh	r3, [r4, #12]
 800b514:	4632      	mov	r2, r6
 800b516:	463b      	mov	r3, r7
 800b518:	4628      	mov	r0, r5
 800b51a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b51e:	f000 b835 	b.w	800b58c <_write_r>

0800b522 <__sseek>:
 800b522:	b510      	push	{r4, lr}
 800b524:	460c      	mov	r4, r1
 800b526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b52a:	f000 f8a3 	bl	800b674 <_lseek_r>
 800b52e:	1c43      	adds	r3, r0, #1
 800b530:	89a3      	ldrh	r3, [r4, #12]
 800b532:	bf15      	itete	ne
 800b534:	6560      	strne	r0, [r4, #84]	; 0x54
 800b536:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b53a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b53e:	81a3      	strheq	r3, [r4, #12]
 800b540:	bf18      	it	ne
 800b542:	81a3      	strhne	r3, [r4, #12]
 800b544:	bd10      	pop	{r4, pc}

0800b546 <__sclose>:
 800b546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b54a:	f000 b84f 	b.w	800b5ec <_close_r>

0800b54e <strncmp>:
 800b54e:	b510      	push	{r4, lr}
 800b550:	b16a      	cbz	r2, 800b56e <strncmp+0x20>
 800b552:	3901      	subs	r1, #1
 800b554:	1884      	adds	r4, r0, r2
 800b556:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b55a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b55e:	4293      	cmp	r3, r2
 800b560:	d103      	bne.n	800b56a <strncmp+0x1c>
 800b562:	42a0      	cmp	r0, r4
 800b564:	d001      	beq.n	800b56a <strncmp+0x1c>
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1f5      	bne.n	800b556 <strncmp+0x8>
 800b56a:	1a98      	subs	r0, r3, r2
 800b56c:	bd10      	pop	{r4, pc}
 800b56e:	4610      	mov	r0, r2
 800b570:	e7fc      	b.n	800b56c <strncmp+0x1e>

0800b572 <__ascii_wctomb>:
 800b572:	b149      	cbz	r1, 800b588 <__ascii_wctomb+0x16>
 800b574:	2aff      	cmp	r2, #255	; 0xff
 800b576:	bf85      	ittet	hi
 800b578:	238a      	movhi	r3, #138	; 0x8a
 800b57a:	6003      	strhi	r3, [r0, #0]
 800b57c:	700a      	strbls	r2, [r1, #0]
 800b57e:	f04f 30ff 	movhi.w	r0, #4294967295
 800b582:	bf98      	it	ls
 800b584:	2001      	movls	r0, #1
 800b586:	4770      	bx	lr
 800b588:	4608      	mov	r0, r1
 800b58a:	4770      	bx	lr

0800b58c <_write_r>:
 800b58c:	b538      	push	{r3, r4, r5, lr}
 800b58e:	4d07      	ldr	r5, [pc, #28]	; (800b5ac <_write_r+0x20>)
 800b590:	4604      	mov	r4, r0
 800b592:	4608      	mov	r0, r1
 800b594:	4611      	mov	r1, r2
 800b596:	2200      	movs	r2, #0
 800b598:	602a      	str	r2, [r5, #0]
 800b59a:	461a      	mov	r2, r3
 800b59c:	f7f7 fdff 	bl	800319e <_write>
 800b5a0:	1c43      	adds	r3, r0, #1
 800b5a2:	d102      	bne.n	800b5aa <_write_r+0x1e>
 800b5a4:	682b      	ldr	r3, [r5, #0]
 800b5a6:	b103      	cbz	r3, 800b5aa <_write_r+0x1e>
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	bd38      	pop	{r3, r4, r5, pc}
 800b5ac:	2000066c 	.word	0x2000066c

0800b5b0 <__assert_func>:
 800b5b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5b2:	4614      	mov	r4, r2
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	4b09      	ldr	r3, [pc, #36]	; (800b5dc <__assert_func+0x2c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4605      	mov	r5, r0
 800b5bc:	68d8      	ldr	r0, [r3, #12]
 800b5be:	b14c      	cbz	r4, 800b5d4 <__assert_func+0x24>
 800b5c0:	4b07      	ldr	r3, [pc, #28]	; (800b5e0 <__assert_func+0x30>)
 800b5c2:	9100      	str	r1, [sp, #0]
 800b5c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5c8:	4906      	ldr	r1, [pc, #24]	; (800b5e4 <__assert_func+0x34>)
 800b5ca:	462b      	mov	r3, r5
 800b5cc:	f000 f81e 	bl	800b60c <fiprintf>
 800b5d0:	f000 f880 	bl	800b6d4 <abort>
 800b5d4:	4b04      	ldr	r3, [pc, #16]	; (800b5e8 <__assert_func+0x38>)
 800b5d6:	461c      	mov	r4, r3
 800b5d8:	e7f3      	b.n	800b5c2 <__assert_func+0x12>
 800b5da:	bf00      	nop
 800b5dc:	20000040 	.word	0x20000040
 800b5e0:	0800e3c5 	.word	0x0800e3c5
 800b5e4:	0800e3d2 	.word	0x0800e3d2
 800b5e8:	0800e400 	.word	0x0800e400

0800b5ec <_close_r>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	4d06      	ldr	r5, [pc, #24]	; (800b608 <_close_r+0x1c>)
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	4608      	mov	r0, r1
 800b5f6:	602b      	str	r3, [r5, #0]
 800b5f8:	f7f7 fded 	bl	80031d6 <_close>
 800b5fc:	1c43      	adds	r3, r0, #1
 800b5fe:	d102      	bne.n	800b606 <_close_r+0x1a>
 800b600:	682b      	ldr	r3, [r5, #0]
 800b602:	b103      	cbz	r3, 800b606 <_close_r+0x1a>
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	bd38      	pop	{r3, r4, r5, pc}
 800b608:	2000066c 	.word	0x2000066c

0800b60c <fiprintf>:
 800b60c:	b40e      	push	{r1, r2, r3}
 800b60e:	b503      	push	{r0, r1, lr}
 800b610:	4601      	mov	r1, r0
 800b612:	ab03      	add	r3, sp, #12
 800b614:	4805      	ldr	r0, [pc, #20]	; (800b62c <fiprintf+0x20>)
 800b616:	f853 2b04 	ldr.w	r2, [r3], #4
 800b61a:	6800      	ldr	r0, [r0, #0]
 800b61c:	9301      	str	r3, [sp, #4]
 800b61e:	f7ff fe0b 	bl	800b238 <_vfiprintf_r>
 800b622:	b002      	add	sp, #8
 800b624:	f85d eb04 	ldr.w	lr, [sp], #4
 800b628:	b003      	add	sp, #12
 800b62a:	4770      	bx	lr
 800b62c:	20000040 	.word	0x20000040

0800b630 <_fstat_r>:
 800b630:	b538      	push	{r3, r4, r5, lr}
 800b632:	4d07      	ldr	r5, [pc, #28]	; (800b650 <_fstat_r+0x20>)
 800b634:	2300      	movs	r3, #0
 800b636:	4604      	mov	r4, r0
 800b638:	4608      	mov	r0, r1
 800b63a:	4611      	mov	r1, r2
 800b63c:	602b      	str	r3, [r5, #0]
 800b63e:	f7f7 fdd6 	bl	80031ee <_fstat>
 800b642:	1c43      	adds	r3, r0, #1
 800b644:	d102      	bne.n	800b64c <_fstat_r+0x1c>
 800b646:	682b      	ldr	r3, [r5, #0]
 800b648:	b103      	cbz	r3, 800b64c <_fstat_r+0x1c>
 800b64a:	6023      	str	r3, [r4, #0]
 800b64c:	bd38      	pop	{r3, r4, r5, pc}
 800b64e:	bf00      	nop
 800b650:	2000066c 	.word	0x2000066c

0800b654 <_isatty_r>:
 800b654:	b538      	push	{r3, r4, r5, lr}
 800b656:	4d06      	ldr	r5, [pc, #24]	; (800b670 <_isatty_r+0x1c>)
 800b658:	2300      	movs	r3, #0
 800b65a:	4604      	mov	r4, r0
 800b65c:	4608      	mov	r0, r1
 800b65e:	602b      	str	r3, [r5, #0]
 800b660:	f7f7 fdd5 	bl	800320e <_isatty>
 800b664:	1c43      	adds	r3, r0, #1
 800b666:	d102      	bne.n	800b66e <_isatty_r+0x1a>
 800b668:	682b      	ldr	r3, [r5, #0]
 800b66a:	b103      	cbz	r3, 800b66e <_isatty_r+0x1a>
 800b66c:	6023      	str	r3, [r4, #0]
 800b66e:	bd38      	pop	{r3, r4, r5, pc}
 800b670:	2000066c 	.word	0x2000066c

0800b674 <_lseek_r>:
 800b674:	b538      	push	{r3, r4, r5, lr}
 800b676:	4d07      	ldr	r5, [pc, #28]	; (800b694 <_lseek_r+0x20>)
 800b678:	4604      	mov	r4, r0
 800b67a:	4608      	mov	r0, r1
 800b67c:	4611      	mov	r1, r2
 800b67e:	2200      	movs	r2, #0
 800b680:	602a      	str	r2, [r5, #0]
 800b682:	461a      	mov	r2, r3
 800b684:	f7f7 fdce 	bl	8003224 <_lseek>
 800b688:	1c43      	adds	r3, r0, #1
 800b68a:	d102      	bne.n	800b692 <_lseek_r+0x1e>
 800b68c:	682b      	ldr	r3, [r5, #0]
 800b68e:	b103      	cbz	r3, 800b692 <_lseek_r+0x1e>
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	bd38      	pop	{r3, r4, r5, pc}
 800b694:	2000066c 	.word	0x2000066c

0800b698 <__malloc_lock>:
 800b698:	4801      	ldr	r0, [pc, #4]	; (800b6a0 <__malloc_lock+0x8>)
 800b69a:	f7fe bfa0 	b.w	800a5de <__retarget_lock_acquire_recursive>
 800b69e:	bf00      	nop
 800b6a0:	20000664 	.word	0x20000664

0800b6a4 <__malloc_unlock>:
 800b6a4:	4801      	ldr	r0, [pc, #4]	; (800b6ac <__malloc_unlock+0x8>)
 800b6a6:	f7fe bf9b 	b.w	800a5e0 <__retarget_lock_release_recursive>
 800b6aa:	bf00      	nop
 800b6ac:	20000664 	.word	0x20000664

0800b6b0 <_read_r>:
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	4d07      	ldr	r5, [pc, #28]	; (800b6d0 <_read_r+0x20>)
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	4608      	mov	r0, r1
 800b6b8:	4611      	mov	r1, r2
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	602a      	str	r2, [r5, #0]
 800b6be:	461a      	mov	r2, r3
 800b6c0:	f7f7 fd50 	bl	8003164 <_read>
 800b6c4:	1c43      	adds	r3, r0, #1
 800b6c6:	d102      	bne.n	800b6ce <_read_r+0x1e>
 800b6c8:	682b      	ldr	r3, [r5, #0]
 800b6ca:	b103      	cbz	r3, 800b6ce <_read_r+0x1e>
 800b6cc:	6023      	str	r3, [r4, #0]
 800b6ce:	bd38      	pop	{r3, r4, r5, pc}
 800b6d0:	2000066c 	.word	0x2000066c

0800b6d4 <abort>:
 800b6d4:	b508      	push	{r3, lr}
 800b6d6:	2006      	movs	r0, #6
 800b6d8:	f000 f82c 	bl	800b734 <raise>
 800b6dc:	2001      	movs	r0, #1
 800b6de:	f7f7 fd37 	bl	8003150 <_exit>

0800b6e2 <_raise_r>:
 800b6e2:	291f      	cmp	r1, #31
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	460d      	mov	r5, r1
 800b6ea:	d904      	bls.n	800b6f6 <_raise_r+0x14>
 800b6ec:	2316      	movs	r3, #22
 800b6ee:	6003      	str	r3, [r0, #0]
 800b6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f4:	bd38      	pop	{r3, r4, r5, pc}
 800b6f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b6f8:	b112      	cbz	r2, 800b700 <_raise_r+0x1e>
 800b6fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6fe:	b94b      	cbnz	r3, 800b714 <_raise_r+0x32>
 800b700:	4620      	mov	r0, r4
 800b702:	f000 f831 	bl	800b768 <_getpid_r>
 800b706:	462a      	mov	r2, r5
 800b708:	4601      	mov	r1, r0
 800b70a:	4620      	mov	r0, r4
 800b70c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b710:	f000 b818 	b.w	800b744 <_kill_r>
 800b714:	2b01      	cmp	r3, #1
 800b716:	d00a      	beq.n	800b72e <_raise_r+0x4c>
 800b718:	1c59      	adds	r1, r3, #1
 800b71a:	d103      	bne.n	800b724 <_raise_r+0x42>
 800b71c:	2316      	movs	r3, #22
 800b71e:	6003      	str	r3, [r0, #0]
 800b720:	2001      	movs	r0, #1
 800b722:	e7e7      	b.n	800b6f4 <_raise_r+0x12>
 800b724:	2400      	movs	r4, #0
 800b726:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b72a:	4628      	mov	r0, r5
 800b72c:	4798      	blx	r3
 800b72e:	2000      	movs	r0, #0
 800b730:	e7e0      	b.n	800b6f4 <_raise_r+0x12>
	...

0800b734 <raise>:
 800b734:	4b02      	ldr	r3, [pc, #8]	; (800b740 <raise+0xc>)
 800b736:	4601      	mov	r1, r0
 800b738:	6818      	ldr	r0, [r3, #0]
 800b73a:	f7ff bfd2 	b.w	800b6e2 <_raise_r>
 800b73e:	bf00      	nop
 800b740:	20000040 	.word	0x20000040

0800b744 <_kill_r>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	4d07      	ldr	r5, [pc, #28]	; (800b764 <_kill_r+0x20>)
 800b748:	2300      	movs	r3, #0
 800b74a:	4604      	mov	r4, r0
 800b74c:	4608      	mov	r0, r1
 800b74e:	4611      	mov	r1, r2
 800b750:	602b      	str	r3, [r5, #0]
 800b752:	f7f7 fced 	bl	8003130 <_kill>
 800b756:	1c43      	adds	r3, r0, #1
 800b758:	d102      	bne.n	800b760 <_kill_r+0x1c>
 800b75a:	682b      	ldr	r3, [r5, #0]
 800b75c:	b103      	cbz	r3, 800b760 <_kill_r+0x1c>
 800b75e:	6023      	str	r3, [r4, #0]
 800b760:	bd38      	pop	{r3, r4, r5, pc}
 800b762:	bf00      	nop
 800b764:	2000066c 	.word	0x2000066c

0800b768 <_getpid_r>:
 800b768:	f7f7 bcda 	b.w	8003120 <_getpid>
 800b76c:	0000      	movs	r0, r0
	...

0800b770 <atan>:
 800b770:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b774:	ec55 4b10 	vmov	r4, r5, d0
 800b778:	4bc3      	ldr	r3, [pc, #780]	; (800ba88 <atan+0x318>)
 800b77a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b77e:	429e      	cmp	r6, r3
 800b780:	46ab      	mov	fp, r5
 800b782:	dd18      	ble.n	800b7b6 <atan+0x46>
 800b784:	4bc1      	ldr	r3, [pc, #772]	; (800ba8c <atan+0x31c>)
 800b786:	429e      	cmp	r6, r3
 800b788:	dc01      	bgt.n	800b78e <atan+0x1e>
 800b78a:	d109      	bne.n	800b7a0 <atan+0x30>
 800b78c:	b144      	cbz	r4, 800b7a0 <atan+0x30>
 800b78e:	4622      	mov	r2, r4
 800b790:	462b      	mov	r3, r5
 800b792:	4620      	mov	r0, r4
 800b794:	4629      	mov	r1, r5
 800b796:	f7f4 fda9 	bl	80002ec <__adddf3>
 800b79a:	4604      	mov	r4, r0
 800b79c:	460d      	mov	r5, r1
 800b79e:	e006      	b.n	800b7ae <atan+0x3e>
 800b7a0:	f1bb 0f00 	cmp.w	fp, #0
 800b7a4:	f300 8131 	bgt.w	800ba0a <atan+0x29a>
 800b7a8:	a59b      	add	r5, pc, #620	; (adr r5, 800ba18 <atan+0x2a8>)
 800b7aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b7ae:	ec45 4b10 	vmov	d0, r4, r5
 800b7b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b6:	4bb6      	ldr	r3, [pc, #728]	; (800ba90 <atan+0x320>)
 800b7b8:	429e      	cmp	r6, r3
 800b7ba:	dc14      	bgt.n	800b7e6 <atan+0x76>
 800b7bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b7c0:	429e      	cmp	r6, r3
 800b7c2:	dc0d      	bgt.n	800b7e0 <atan+0x70>
 800b7c4:	a396      	add	r3, pc, #600	; (adr r3, 800ba20 <atan+0x2b0>)
 800b7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ca:	ee10 0a10 	vmov	r0, s0
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	f7f4 fd8c 	bl	80002ec <__adddf3>
 800b7d4:	4baf      	ldr	r3, [pc, #700]	; (800ba94 <atan+0x324>)
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f7f5 f9ce 	bl	8000b78 <__aeabi_dcmpgt>
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	d1e6      	bne.n	800b7ae <atan+0x3e>
 800b7e0:	f04f 3aff 	mov.w	sl, #4294967295
 800b7e4:	e02b      	b.n	800b83e <atan+0xce>
 800b7e6:	f000 f9b3 	bl	800bb50 <fabs>
 800b7ea:	4bab      	ldr	r3, [pc, #684]	; (800ba98 <atan+0x328>)
 800b7ec:	429e      	cmp	r6, r3
 800b7ee:	ec55 4b10 	vmov	r4, r5, d0
 800b7f2:	f300 80bf 	bgt.w	800b974 <atan+0x204>
 800b7f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b7fa:	429e      	cmp	r6, r3
 800b7fc:	f300 80a0 	bgt.w	800b940 <atan+0x1d0>
 800b800:	ee10 2a10 	vmov	r2, s0
 800b804:	ee10 0a10 	vmov	r0, s0
 800b808:	462b      	mov	r3, r5
 800b80a:	4629      	mov	r1, r5
 800b80c:	f7f4 fd6e 	bl	80002ec <__adddf3>
 800b810:	4ba0      	ldr	r3, [pc, #640]	; (800ba94 <atan+0x324>)
 800b812:	2200      	movs	r2, #0
 800b814:	f7f4 fd68 	bl	80002e8 <__aeabi_dsub>
 800b818:	2200      	movs	r2, #0
 800b81a:	4606      	mov	r6, r0
 800b81c:	460f      	mov	r7, r1
 800b81e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b822:	4620      	mov	r0, r4
 800b824:	4629      	mov	r1, r5
 800b826:	f7f4 fd61 	bl	80002ec <__adddf3>
 800b82a:	4602      	mov	r2, r0
 800b82c:	460b      	mov	r3, r1
 800b82e:	4630      	mov	r0, r6
 800b830:	4639      	mov	r1, r7
 800b832:	f7f5 f83b 	bl	80008ac <__aeabi_ddiv>
 800b836:	f04f 0a00 	mov.w	sl, #0
 800b83a:	4604      	mov	r4, r0
 800b83c:	460d      	mov	r5, r1
 800b83e:	4622      	mov	r2, r4
 800b840:	462b      	mov	r3, r5
 800b842:	4620      	mov	r0, r4
 800b844:	4629      	mov	r1, r5
 800b846:	f7f4 ff07 	bl	8000658 <__aeabi_dmul>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	4680      	mov	r8, r0
 800b850:	4689      	mov	r9, r1
 800b852:	f7f4 ff01 	bl	8000658 <__aeabi_dmul>
 800b856:	a374      	add	r3, pc, #464	; (adr r3, 800ba28 <atan+0x2b8>)
 800b858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85c:	4606      	mov	r6, r0
 800b85e:	460f      	mov	r7, r1
 800b860:	f7f4 fefa 	bl	8000658 <__aeabi_dmul>
 800b864:	a372      	add	r3, pc, #456	; (adr r3, 800ba30 <atan+0x2c0>)
 800b866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86a:	f7f4 fd3f 	bl	80002ec <__adddf3>
 800b86e:	4632      	mov	r2, r6
 800b870:	463b      	mov	r3, r7
 800b872:	f7f4 fef1 	bl	8000658 <__aeabi_dmul>
 800b876:	a370      	add	r3, pc, #448	; (adr r3, 800ba38 <atan+0x2c8>)
 800b878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87c:	f7f4 fd36 	bl	80002ec <__adddf3>
 800b880:	4632      	mov	r2, r6
 800b882:	463b      	mov	r3, r7
 800b884:	f7f4 fee8 	bl	8000658 <__aeabi_dmul>
 800b888:	a36d      	add	r3, pc, #436	; (adr r3, 800ba40 <atan+0x2d0>)
 800b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88e:	f7f4 fd2d 	bl	80002ec <__adddf3>
 800b892:	4632      	mov	r2, r6
 800b894:	463b      	mov	r3, r7
 800b896:	f7f4 fedf 	bl	8000658 <__aeabi_dmul>
 800b89a:	a36b      	add	r3, pc, #428	; (adr r3, 800ba48 <atan+0x2d8>)
 800b89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a0:	f7f4 fd24 	bl	80002ec <__adddf3>
 800b8a4:	4632      	mov	r2, r6
 800b8a6:	463b      	mov	r3, r7
 800b8a8:	f7f4 fed6 	bl	8000658 <__aeabi_dmul>
 800b8ac:	a368      	add	r3, pc, #416	; (adr r3, 800ba50 <atan+0x2e0>)
 800b8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b2:	f7f4 fd1b 	bl	80002ec <__adddf3>
 800b8b6:	4642      	mov	r2, r8
 800b8b8:	464b      	mov	r3, r9
 800b8ba:	f7f4 fecd 	bl	8000658 <__aeabi_dmul>
 800b8be:	a366      	add	r3, pc, #408	; (adr r3, 800ba58 <atan+0x2e8>)
 800b8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c4:	4680      	mov	r8, r0
 800b8c6:	4689      	mov	r9, r1
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	4639      	mov	r1, r7
 800b8cc:	f7f4 fec4 	bl	8000658 <__aeabi_dmul>
 800b8d0:	a363      	add	r3, pc, #396	; (adr r3, 800ba60 <atan+0x2f0>)
 800b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d6:	f7f4 fd07 	bl	80002e8 <__aeabi_dsub>
 800b8da:	4632      	mov	r2, r6
 800b8dc:	463b      	mov	r3, r7
 800b8de:	f7f4 febb 	bl	8000658 <__aeabi_dmul>
 800b8e2:	a361      	add	r3, pc, #388	; (adr r3, 800ba68 <atan+0x2f8>)
 800b8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e8:	f7f4 fcfe 	bl	80002e8 <__aeabi_dsub>
 800b8ec:	4632      	mov	r2, r6
 800b8ee:	463b      	mov	r3, r7
 800b8f0:	f7f4 feb2 	bl	8000658 <__aeabi_dmul>
 800b8f4:	a35e      	add	r3, pc, #376	; (adr r3, 800ba70 <atan+0x300>)
 800b8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fa:	f7f4 fcf5 	bl	80002e8 <__aeabi_dsub>
 800b8fe:	4632      	mov	r2, r6
 800b900:	463b      	mov	r3, r7
 800b902:	f7f4 fea9 	bl	8000658 <__aeabi_dmul>
 800b906:	a35c      	add	r3, pc, #368	; (adr r3, 800ba78 <atan+0x308>)
 800b908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90c:	f7f4 fcec 	bl	80002e8 <__aeabi_dsub>
 800b910:	4632      	mov	r2, r6
 800b912:	463b      	mov	r3, r7
 800b914:	f7f4 fea0 	bl	8000658 <__aeabi_dmul>
 800b918:	4602      	mov	r2, r0
 800b91a:	460b      	mov	r3, r1
 800b91c:	4640      	mov	r0, r8
 800b91e:	4649      	mov	r1, r9
 800b920:	f7f4 fce4 	bl	80002ec <__adddf3>
 800b924:	4622      	mov	r2, r4
 800b926:	462b      	mov	r3, r5
 800b928:	f7f4 fe96 	bl	8000658 <__aeabi_dmul>
 800b92c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b930:	4602      	mov	r2, r0
 800b932:	460b      	mov	r3, r1
 800b934:	d14b      	bne.n	800b9ce <atan+0x25e>
 800b936:	4620      	mov	r0, r4
 800b938:	4629      	mov	r1, r5
 800b93a:	f7f4 fcd5 	bl	80002e8 <__aeabi_dsub>
 800b93e:	e72c      	b.n	800b79a <atan+0x2a>
 800b940:	ee10 0a10 	vmov	r0, s0
 800b944:	4b53      	ldr	r3, [pc, #332]	; (800ba94 <atan+0x324>)
 800b946:	2200      	movs	r2, #0
 800b948:	4629      	mov	r1, r5
 800b94a:	f7f4 fccd 	bl	80002e8 <__aeabi_dsub>
 800b94e:	4b51      	ldr	r3, [pc, #324]	; (800ba94 <atan+0x324>)
 800b950:	4606      	mov	r6, r0
 800b952:	460f      	mov	r7, r1
 800b954:	2200      	movs	r2, #0
 800b956:	4620      	mov	r0, r4
 800b958:	4629      	mov	r1, r5
 800b95a:	f7f4 fcc7 	bl	80002ec <__adddf3>
 800b95e:	4602      	mov	r2, r0
 800b960:	460b      	mov	r3, r1
 800b962:	4630      	mov	r0, r6
 800b964:	4639      	mov	r1, r7
 800b966:	f7f4 ffa1 	bl	80008ac <__aeabi_ddiv>
 800b96a:	f04f 0a01 	mov.w	sl, #1
 800b96e:	4604      	mov	r4, r0
 800b970:	460d      	mov	r5, r1
 800b972:	e764      	b.n	800b83e <atan+0xce>
 800b974:	4b49      	ldr	r3, [pc, #292]	; (800ba9c <atan+0x32c>)
 800b976:	429e      	cmp	r6, r3
 800b978:	da1d      	bge.n	800b9b6 <atan+0x246>
 800b97a:	ee10 0a10 	vmov	r0, s0
 800b97e:	4b48      	ldr	r3, [pc, #288]	; (800baa0 <atan+0x330>)
 800b980:	2200      	movs	r2, #0
 800b982:	4629      	mov	r1, r5
 800b984:	f7f4 fcb0 	bl	80002e8 <__aeabi_dsub>
 800b988:	4b45      	ldr	r3, [pc, #276]	; (800baa0 <atan+0x330>)
 800b98a:	4606      	mov	r6, r0
 800b98c:	460f      	mov	r7, r1
 800b98e:	2200      	movs	r2, #0
 800b990:	4620      	mov	r0, r4
 800b992:	4629      	mov	r1, r5
 800b994:	f7f4 fe60 	bl	8000658 <__aeabi_dmul>
 800b998:	4b3e      	ldr	r3, [pc, #248]	; (800ba94 <atan+0x324>)
 800b99a:	2200      	movs	r2, #0
 800b99c:	f7f4 fca6 	bl	80002ec <__adddf3>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	4639      	mov	r1, r7
 800b9a8:	f7f4 ff80 	bl	80008ac <__aeabi_ddiv>
 800b9ac:	f04f 0a02 	mov.w	sl, #2
 800b9b0:	4604      	mov	r4, r0
 800b9b2:	460d      	mov	r5, r1
 800b9b4:	e743      	b.n	800b83e <atan+0xce>
 800b9b6:	462b      	mov	r3, r5
 800b9b8:	ee10 2a10 	vmov	r2, s0
 800b9bc:	4939      	ldr	r1, [pc, #228]	; (800baa4 <atan+0x334>)
 800b9be:	2000      	movs	r0, #0
 800b9c0:	f7f4 ff74 	bl	80008ac <__aeabi_ddiv>
 800b9c4:	f04f 0a03 	mov.w	sl, #3
 800b9c8:	4604      	mov	r4, r0
 800b9ca:	460d      	mov	r5, r1
 800b9cc:	e737      	b.n	800b83e <atan+0xce>
 800b9ce:	4b36      	ldr	r3, [pc, #216]	; (800baa8 <atan+0x338>)
 800b9d0:	4e36      	ldr	r6, [pc, #216]	; (800baac <atan+0x33c>)
 800b9d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b9d6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b9da:	e9da 2300 	ldrd	r2, r3, [sl]
 800b9de:	f7f4 fc83 	bl	80002e8 <__aeabi_dsub>
 800b9e2:	4622      	mov	r2, r4
 800b9e4:	462b      	mov	r3, r5
 800b9e6:	f7f4 fc7f 	bl	80002e8 <__aeabi_dsub>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b9f2:	f7f4 fc79 	bl	80002e8 <__aeabi_dsub>
 800b9f6:	f1bb 0f00 	cmp.w	fp, #0
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	460d      	mov	r5, r1
 800b9fe:	f6bf aed6 	bge.w	800b7ae <atan+0x3e>
 800ba02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba06:	461d      	mov	r5, r3
 800ba08:	e6d1      	b.n	800b7ae <atan+0x3e>
 800ba0a:	a51d      	add	r5, pc, #116	; (adr r5, 800ba80 <atan+0x310>)
 800ba0c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba10:	e6cd      	b.n	800b7ae <atan+0x3e>
 800ba12:	bf00      	nop
 800ba14:	f3af 8000 	nop.w
 800ba18:	54442d18 	.word	0x54442d18
 800ba1c:	bff921fb 	.word	0xbff921fb
 800ba20:	8800759c 	.word	0x8800759c
 800ba24:	7e37e43c 	.word	0x7e37e43c
 800ba28:	e322da11 	.word	0xe322da11
 800ba2c:	3f90ad3a 	.word	0x3f90ad3a
 800ba30:	24760deb 	.word	0x24760deb
 800ba34:	3fa97b4b 	.word	0x3fa97b4b
 800ba38:	a0d03d51 	.word	0xa0d03d51
 800ba3c:	3fb10d66 	.word	0x3fb10d66
 800ba40:	c54c206e 	.word	0xc54c206e
 800ba44:	3fb745cd 	.word	0x3fb745cd
 800ba48:	920083ff 	.word	0x920083ff
 800ba4c:	3fc24924 	.word	0x3fc24924
 800ba50:	5555550d 	.word	0x5555550d
 800ba54:	3fd55555 	.word	0x3fd55555
 800ba58:	2c6a6c2f 	.word	0x2c6a6c2f
 800ba5c:	bfa2b444 	.word	0xbfa2b444
 800ba60:	52defd9a 	.word	0x52defd9a
 800ba64:	3fadde2d 	.word	0x3fadde2d
 800ba68:	af749a6d 	.word	0xaf749a6d
 800ba6c:	3fb3b0f2 	.word	0x3fb3b0f2
 800ba70:	fe231671 	.word	0xfe231671
 800ba74:	3fbc71c6 	.word	0x3fbc71c6
 800ba78:	9998ebc4 	.word	0x9998ebc4
 800ba7c:	3fc99999 	.word	0x3fc99999
 800ba80:	54442d18 	.word	0x54442d18
 800ba84:	3ff921fb 	.word	0x3ff921fb
 800ba88:	440fffff 	.word	0x440fffff
 800ba8c:	7ff00000 	.word	0x7ff00000
 800ba90:	3fdbffff 	.word	0x3fdbffff
 800ba94:	3ff00000 	.word	0x3ff00000
 800ba98:	3ff2ffff 	.word	0x3ff2ffff
 800ba9c:	40038000 	.word	0x40038000
 800baa0:	3ff80000 	.word	0x3ff80000
 800baa4:	bff00000 	.word	0xbff00000
 800baa8:	0800e528 	.word	0x0800e528
 800baac:	0800e508 	.word	0x0800e508

0800bab0 <cos>:
 800bab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bab2:	ec53 2b10 	vmov	r2, r3, d0
 800bab6:	4824      	ldr	r0, [pc, #144]	; (800bb48 <cos+0x98>)
 800bab8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800babc:	4281      	cmp	r1, r0
 800babe:	dc06      	bgt.n	800bace <cos+0x1e>
 800bac0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800bb40 <cos+0x90>
 800bac4:	f001 fb84 	bl	800d1d0 <__kernel_cos>
 800bac8:	ec51 0b10 	vmov	r0, r1, d0
 800bacc:	e007      	b.n	800bade <cos+0x2e>
 800bace:	481f      	ldr	r0, [pc, #124]	; (800bb4c <cos+0x9c>)
 800bad0:	4281      	cmp	r1, r0
 800bad2:	dd09      	ble.n	800bae8 <cos+0x38>
 800bad4:	ee10 0a10 	vmov	r0, s0
 800bad8:	4619      	mov	r1, r3
 800bada:	f7f4 fc05 	bl	80002e8 <__aeabi_dsub>
 800bade:	ec41 0b10 	vmov	d0, r0, r1
 800bae2:	b005      	add	sp, #20
 800bae4:	f85d fb04 	ldr.w	pc, [sp], #4
 800bae8:	4668      	mov	r0, sp
 800baea:	f001 f8b1 	bl	800cc50 <__ieee754_rem_pio2>
 800baee:	f000 0003 	and.w	r0, r0, #3
 800baf2:	2801      	cmp	r0, #1
 800baf4:	d007      	beq.n	800bb06 <cos+0x56>
 800baf6:	2802      	cmp	r0, #2
 800baf8:	d012      	beq.n	800bb20 <cos+0x70>
 800bafa:	b9c0      	cbnz	r0, 800bb2e <cos+0x7e>
 800bafc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb00:	ed9d 0b00 	vldr	d0, [sp]
 800bb04:	e7de      	b.n	800bac4 <cos+0x14>
 800bb06:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb0a:	ed9d 0b00 	vldr	d0, [sp]
 800bb0e:	f001 ff67 	bl	800d9e0 <__kernel_sin>
 800bb12:	ec53 2b10 	vmov	r2, r3, d0
 800bb16:	ee10 0a10 	vmov	r0, s0
 800bb1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bb1e:	e7de      	b.n	800bade <cos+0x2e>
 800bb20:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb24:	ed9d 0b00 	vldr	d0, [sp]
 800bb28:	f001 fb52 	bl	800d1d0 <__kernel_cos>
 800bb2c:	e7f1      	b.n	800bb12 <cos+0x62>
 800bb2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb32:	ed9d 0b00 	vldr	d0, [sp]
 800bb36:	2001      	movs	r0, #1
 800bb38:	f001 ff52 	bl	800d9e0 <__kernel_sin>
 800bb3c:	e7c4      	b.n	800bac8 <cos+0x18>
 800bb3e:	bf00      	nop
	...
 800bb48:	3fe921fb 	.word	0x3fe921fb
 800bb4c:	7fefffff 	.word	0x7fefffff

0800bb50 <fabs>:
 800bb50:	ec51 0b10 	vmov	r0, r1, d0
 800bb54:	ee10 2a10 	vmov	r2, s0
 800bb58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb5c:	ec43 2b10 	vmov	d0, r2, r3
 800bb60:	4770      	bx	lr
 800bb62:	0000      	movs	r0, r0
 800bb64:	0000      	movs	r0, r0
	...

0800bb68 <sin>:
 800bb68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb6a:	ec53 2b10 	vmov	r2, r3, d0
 800bb6e:	4826      	ldr	r0, [pc, #152]	; (800bc08 <sin+0xa0>)
 800bb70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bb74:	4281      	cmp	r1, r0
 800bb76:	dc07      	bgt.n	800bb88 <sin+0x20>
 800bb78:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800bc00 <sin+0x98>
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	f001 ff2f 	bl	800d9e0 <__kernel_sin>
 800bb82:	ec51 0b10 	vmov	r0, r1, d0
 800bb86:	e007      	b.n	800bb98 <sin+0x30>
 800bb88:	4820      	ldr	r0, [pc, #128]	; (800bc0c <sin+0xa4>)
 800bb8a:	4281      	cmp	r1, r0
 800bb8c:	dd09      	ble.n	800bba2 <sin+0x3a>
 800bb8e:	ee10 0a10 	vmov	r0, s0
 800bb92:	4619      	mov	r1, r3
 800bb94:	f7f4 fba8 	bl	80002e8 <__aeabi_dsub>
 800bb98:	ec41 0b10 	vmov	d0, r0, r1
 800bb9c:	b005      	add	sp, #20
 800bb9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800bba2:	4668      	mov	r0, sp
 800bba4:	f001 f854 	bl	800cc50 <__ieee754_rem_pio2>
 800bba8:	f000 0003 	and.w	r0, r0, #3
 800bbac:	2801      	cmp	r0, #1
 800bbae:	d008      	beq.n	800bbc2 <sin+0x5a>
 800bbb0:	2802      	cmp	r0, #2
 800bbb2:	d00d      	beq.n	800bbd0 <sin+0x68>
 800bbb4:	b9d0      	cbnz	r0, 800bbec <sin+0x84>
 800bbb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bbba:	ed9d 0b00 	vldr	d0, [sp]
 800bbbe:	2001      	movs	r0, #1
 800bbc0:	e7dd      	b.n	800bb7e <sin+0x16>
 800bbc2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bbc6:	ed9d 0b00 	vldr	d0, [sp]
 800bbca:	f001 fb01 	bl	800d1d0 <__kernel_cos>
 800bbce:	e7d8      	b.n	800bb82 <sin+0x1a>
 800bbd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bbd4:	ed9d 0b00 	vldr	d0, [sp]
 800bbd8:	2001      	movs	r0, #1
 800bbda:	f001 ff01 	bl	800d9e0 <__kernel_sin>
 800bbde:	ec53 2b10 	vmov	r2, r3, d0
 800bbe2:	ee10 0a10 	vmov	r0, s0
 800bbe6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bbea:	e7d5      	b.n	800bb98 <sin+0x30>
 800bbec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bbf0:	ed9d 0b00 	vldr	d0, [sp]
 800bbf4:	f001 faec 	bl	800d1d0 <__kernel_cos>
 800bbf8:	e7f1      	b.n	800bbde <sin+0x76>
 800bbfa:	bf00      	nop
 800bbfc:	f3af 8000 	nop.w
	...
 800bc08:	3fe921fb 	.word	0x3fe921fb
 800bc0c:	7fefffff 	.word	0x7fefffff

0800bc10 <atan2>:
 800bc10:	f000 b91e 	b.w	800be50 <__ieee754_atan2>

0800bc14 <fmod>:
 800bc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc16:	ed2d 8b02 	vpush	{d8}
 800bc1a:	ec57 6b10 	vmov	r6, r7, d0
 800bc1e:	ec55 4b11 	vmov	r4, r5, d1
 800bc22:	f000 f9df 	bl	800bfe4 <__ieee754_fmod>
 800bc26:	4b18      	ldr	r3, [pc, #96]	; (800bc88 <fmod+0x74>)
 800bc28:	eeb0 8a40 	vmov.f32	s16, s0
 800bc2c:	eef0 8a60 	vmov.f32	s17, s1
 800bc30:	f993 3000 	ldrsb.w	r3, [r3]
 800bc34:	3301      	adds	r3, #1
 800bc36:	d020      	beq.n	800bc7a <fmod+0x66>
 800bc38:	4622      	mov	r2, r4
 800bc3a:	462b      	mov	r3, r5
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	4629      	mov	r1, r5
 800bc40:	f7f4 ffa4 	bl	8000b8c <__aeabi_dcmpun>
 800bc44:	b9c8      	cbnz	r0, 800bc7a <fmod+0x66>
 800bc46:	4632      	mov	r2, r6
 800bc48:	463b      	mov	r3, r7
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	4639      	mov	r1, r7
 800bc4e:	f7f4 ff9d 	bl	8000b8c <__aeabi_dcmpun>
 800bc52:	b990      	cbnz	r0, 800bc7a <fmod+0x66>
 800bc54:	2200      	movs	r2, #0
 800bc56:	2300      	movs	r3, #0
 800bc58:	4620      	mov	r0, r4
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	f7f4 ff64 	bl	8000b28 <__aeabi_dcmpeq>
 800bc60:	b158      	cbz	r0, 800bc7a <fmod+0x66>
 800bc62:	f7fb fcf9 	bl	8007658 <__errno>
 800bc66:	2321      	movs	r3, #33	; 0x21
 800bc68:	6003      	str	r3, [r0, #0]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	4610      	mov	r0, r2
 800bc70:	4619      	mov	r1, r3
 800bc72:	f7f4 fe1b 	bl	80008ac <__aeabi_ddiv>
 800bc76:	ec41 0b18 	vmov	d8, r0, r1
 800bc7a:	eeb0 0a48 	vmov.f32	s0, s16
 800bc7e:	eef0 0a68 	vmov.f32	s1, s17
 800bc82:	ecbd 8b02 	vpop	{d8}
 800bc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc88:	20000214 	.word	0x20000214

0800bc8c <pow>:
 800bc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc90:	ec59 8b10 	vmov	r8, r9, d0
 800bc94:	ec57 6b11 	vmov	r6, r7, d1
 800bc98:	f000 fab6 	bl	800c208 <__ieee754_pow>
 800bc9c:	4b4e      	ldr	r3, [pc, #312]	; (800bdd8 <pow+0x14c>)
 800bc9e:	f993 3000 	ldrsb.w	r3, [r3]
 800bca2:	3301      	adds	r3, #1
 800bca4:	ec55 4b10 	vmov	r4, r5, d0
 800bca8:	d015      	beq.n	800bcd6 <pow+0x4a>
 800bcaa:	4632      	mov	r2, r6
 800bcac:	463b      	mov	r3, r7
 800bcae:	4630      	mov	r0, r6
 800bcb0:	4639      	mov	r1, r7
 800bcb2:	f7f4 ff6b 	bl	8000b8c <__aeabi_dcmpun>
 800bcb6:	b970      	cbnz	r0, 800bcd6 <pow+0x4a>
 800bcb8:	4642      	mov	r2, r8
 800bcba:	464b      	mov	r3, r9
 800bcbc:	4640      	mov	r0, r8
 800bcbe:	4649      	mov	r1, r9
 800bcc0:	f7f4 ff64 	bl	8000b8c <__aeabi_dcmpun>
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	b148      	cbz	r0, 800bcde <pow+0x52>
 800bcca:	4630      	mov	r0, r6
 800bccc:	4639      	mov	r1, r7
 800bcce:	f7f4 ff2b 	bl	8000b28 <__aeabi_dcmpeq>
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d17d      	bne.n	800bdd2 <pow+0x146>
 800bcd6:	ec45 4b10 	vmov	d0, r4, r5
 800bcda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcde:	4640      	mov	r0, r8
 800bce0:	4649      	mov	r1, r9
 800bce2:	f7f4 ff21 	bl	8000b28 <__aeabi_dcmpeq>
 800bce6:	b1e0      	cbz	r0, 800bd22 <pow+0x96>
 800bce8:	2200      	movs	r2, #0
 800bcea:	2300      	movs	r3, #0
 800bcec:	4630      	mov	r0, r6
 800bcee:	4639      	mov	r1, r7
 800bcf0:	f7f4 ff1a 	bl	8000b28 <__aeabi_dcmpeq>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	d16c      	bne.n	800bdd2 <pow+0x146>
 800bcf8:	ec47 6b10 	vmov	d0, r6, r7
 800bcfc:	f001 ff2e 	bl	800db5c <finite>
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d0e8      	beq.n	800bcd6 <pow+0x4a>
 800bd04:	2200      	movs	r2, #0
 800bd06:	2300      	movs	r3, #0
 800bd08:	4630      	mov	r0, r6
 800bd0a:	4639      	mov	r1, r7
 800bd0c:	f7f4 ff16 	bl	8000b3c <__aeabi_dcmplt>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	d0e0      	beq.n	800bcd6 <pow+0x4a>
 800bd14:	f7fb fca0 	bl	8007658 <__errno>
 800bd18:	2321      	movs	r3, #33	; 0x21
 800bd1a:	6003      	str	r3, [r0, #0]
 800bd1c:	2400      	movs	r4, #0
 800bd1e:	4d2f      	ldr	r5, [pc, #188]	; (800bddc <pow+0x150>)
 800bd20:	e7d9      	b.n	800bcd6 <pow+0x4a>
 800bd22:	ec45 4b10 	vmov	d0, r4, r5
 800bd26:	f001 ff19 	bl	800db5c <finite>
 800bd2a:	bbb8      	cbnz	r0, 800bd9c <pow+0x110>
 800bd2c:	ec49 8b10 	vmov	d0, r8, r9
 800bd30:	f001 ff14 	bl	800db5c <finite>
 800bd34:	b390      	cbz	r0, 800bd9c <pow+0x110>
 800bd36:	ec47 6b10 	vmov	d0, r6, r7
 800bd3a:	f001 ff0f 	bl	800db5c <finite>
 800bd3e:	b368      	cbz	r0, 800bd9c <pow+0x110>
 800bd40:	4622      	mov	r2, r4
 800bd42:	462b      	mov	r3, r5
 800bd44:	4620      	mov	r0, r4
 800bd46:	4629      	mov	r1, r5
 800bd48:	f7f4 ff20 	bl	8000b8c <__aeabi_dcmpun>
 800bd4c:	b160      	cbz	r0, 800bd68 <pow+0xdc>
 800bd4e:	f7fb fc83 	bl	8007658 <__errno>
 800bd52:	2321      	movs	r3, #33	; 0x21
 800bd54:	6003      	str	r3, [r0, #0]
 800bd56:	2200      	movs	r2, #0
 800bd58:	2300      	movs	r3, #0
 800bd5a:	4610      	mov	r0, r2
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	f7f4 fda5 	bl	80008ac <__aeabi_ddiv>
 800bd62:	4604      	mov	r4, r0
 800bd64:	460d      	mov	r5, r1
 800bd66:	e7b6      	b.n	800bcd6 <pow+0x4a>
 800bd68:	f7fb fc76 	bl	8007658 <__errno>
 800bd6c:	2322      	movs	r3, #34	; 0x22
 800bd6e:	6003      	str	r3, [r0, #0]
 800bd70:	2200      	movs	r2, #0
 800bd72:	2300      	movs	r3, #0
 800bd74:	4640      	mov	r0, r8
 800bd76:	4649      	mov	r1, r9
 800bd78:	f7f4 fee0 	bl	8000b3c <__aeabi_dcmplt>
 800bd7c:	2400      	movs	r4, #0
 800bd7e:	b158      	cbz	r0, 800bd98 <pow+0x10c>
 800bd80:	ec47 6b10 	vmov	d0, r6, r7
 800bd84:	f001 ff78 	bl	800dc78 <rint>
 800bd88:	4632      	mov	r2, r6
 800bd8a:	ec51 0b10 	vmov	r0, r1, d0
 800bd8e:	463b      	mov	r3, r7
 800bd90:	f7f4 feca 	bl	8000b28 <__aeabi_dcmpeq>
 800bd94:	2800      	cmp	r0, #0
 800bd96:	d0c2      	beq.n	800bd1e <pow+0x92>
 800bd98:	4d11      	ldr	r5, [pc, #68]	; (800bde0 <pow+0x154>)
 800bd9a:	e79c      	b.n	800bcd6 <pow+0x4a>
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	2300      	movs	r3, #0
 800bda0:	4620      	mov	r0, r4
 800bda2:	4629      	mov	r1, r5
 800bda4:	f7f4 fec0 	bl	8000b28 <__aeabi_dcmpeq>
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	d094      	beq.n	800bcd6 <pow+0x4a>
 800bdac:	ec49 8b10 	vmov	d0, r8, r9
 800bdb0:	f001 fed4 	bl	800db5c <finite>
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	d08e      	beq.n	800bcd6 <pow+0x4a>
 800bdb8:	ec47 6b10 	vmov	d0, r6, r7
 800bdbc:	f001 fece 	bl	800db5c <finite>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d088      	beq.n	800bcd6 <pow+0x4a>
 800bdc4:	f7fb fc48 	bl	8007658 <__errno>
 800bdc8:	2322      	movs	r3, #34	; 0x22
 800bdca:	6003      	str	r3, [r0, #0]
 800bdcc:	2400      	movs	r4, #0
 800bdce:	2500      	movs	r5, #0
 800bdd0:	e781      	b.n	800bcd6 <pow+0x4a>
 800bdd2:	4d04      	ldr	r5, [pc, #16]	; (800bde4 <pow+0x158>)
 800bdd4:	2400      	movs	r4, #0
 800bdd6:	e77e      	b.n	800bcd6 <pow+0x4a>
 800bdd8:	20000214 	.word	0x20000214
 800bddc:	fff00000 	.word	0xfff00000
 800bde0:	7ff00000 	.word	0x7ff00000
 800bde4:	3ff00000 	.word	0x3ff00000

0800bde8 <sqrt>:
 800bde8:	b538      	push	{r3, r4, r5, lr}
 800bdea:	ed2d 8b02 	vpush	{d8}
 800bdee:	ec55 4b10 	vmov	r4, r5, d0
 800bdf2:	f001 f937 	bl	800d064 <__ieee754_sqrt>
 800bdf6:	4b15      	ldr	r3, [pc, #84]	; (800be4c <sqrt+0x64>)
 800bdf8:	eeb0 8a40 	vmov.f32	s16, s0
 800bdfc:	eef0 8a60 	vmov.f32	s17, s1
 800be00:	f993 3000 	ldrsb.w	r3, [r3]
 800be04:	3301      	adds	r3, #1
 800be06:	d019      	beq.n	800be3c <sqrt+0x54>
 800be08:	4622      	mov	r2, r4
 800be0a:	462b      	mov	r3, r5
 800be0c:	4620      	mov	r0, r4
 800be0e:	4629      	mov	r1, r5
 800be10:	f7f4 febc 	bl	8000b8c <__aeabi_dcmpun>
 800be14:	b990      	cbnz	r0, 800be3c <sqrt+0x54>
 800be16:	2200      	movs	r2, #0
 800be18:	2300      	movs	r3, #0
 800be1a:	4620      	mov	r0, r4
 800be1c:	4629      	mov	r1, r5
 800be1e:	f7f4 fe8d 	bl	8000b3c <__aeabi_dcmplt>
 800be22:	b158      	cbz	r0, 800be3c <sqrt+0x54>
 800be24:	f7fb fc18 	bl	8007658 <__errno>
 800be28:	2321      	movs	r3, #33	; 0x21
 800be2a:	6003      	str	r3, [r0, #0]
 800be2c:	2200      	movs	r2, #0
 800be2e:	2300      	movs	r3, #0
 800be30:	4610      	mov	r0, r2
 800be32:	4619      	mov	r1, r3
 800be34:	f7f4 fd3a 	bl	80008ac <__aeabi_ddiv>
 800be38:	ec41 0b18 	vmov	d8, r0, r1
 800be3c:	eeb0 0a48 	vmov.f32	s0, s16
 800be40:	eef0 0a68 	vmov.f32	s1, s17
 800be44:	ecbd 8b02 	vpop	{d8}
 800be48:	bd38      	pop	{r3, r4, r5, pc}
 800be4a:	bf00      	nop
 800be4c:	20000214 	.word	0x20000214

0800be50 <__ieee754_atan2>:
 800be50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be54:	ec57 6b11 	vmov	r6, r7, d1
 800be58:	4273      	negs	r3, r6
 800be5a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800bfe0 <__ieee754_atan2+0x190>
 800be5e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800be62:	4333      	orrs	r3, r6
 800be64:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800be68:	4573      	cmp	r3, lr
 800be6a:	ec51 0b10 	vmov	r0, r1, d0
 800be6e:	ee11 8a10 	vmov	r8, s2
 800be72:	d80a      	bhi.n	800be8a <__ieee754_atan2+0x3a>
 800be74:	4244      	negs	r4, r0
 800be76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be7a:	4304      	orrs	r4, r0
 800be7c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800be80:	4574      	cmp	r4, lr
 800be82:	ee10 9a10 	vmov	r9, s0
 800be86:	468c      	mov	ip, r1
 800be88:	d907      	bls.n	800be9a <__ieee754_atan2+0x4a>
 800be8a:	4632      	mov	r2, r6
 800be8c:	463b      	mov	r3, r7
 800be8e:	f7f4 fa2d 	bl	80002ec <__adddf3>
 800be92:	ec41 0b10 	vmov	d0, r0, r1
 800be96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be9a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800be9e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bea2:	4334      	orrs	r4, r6
 800bea4:	d103      	bne.n	800beae <__ieee754_atan2+0x5e>
 800bea6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800beaa:	f7ff bc61 	b.w	800b770 <atan>
 800beae:	17bc      	asrs	r4, r7, #30
 800beb0:	f004 0402 	and.w	r4, r4, #2
 800beb4:	ea53 0909 	orrs.w	r9, r3, r9
 800beb8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bebc:	d107      	bne.n	800bece <__ieee754_atan2+0x7e>
 800bebe:	2c02      	cmp	r4, #2
 800bec0:	d060      	beq.n	800bf84 <__ieee754_atan2+0x134>
 800bec2:	2c03      	cmp	r4, #3
 800bec4:	d1e5      	bne.n	800be92 <__ieee754_atan2+0x42>
 800bec6:	a142      	add	r1, pc, #264	; (adr r1, 800bfd0 <__ieee754_atan2+0x180>)
 800bec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800becc:	e7e1      	b.n	800be92 <__ieee754_atan2+0x42>
 800bece:	ea52 0808 	orrs.w	r8, r2, r8
 800bed2:	d106      	bne.n	800bee2 <__ieee754_atan2+0x92>
 800bed4:	f1bc 0f00 	cmp.w	ip, #0
 800bed8:	da5f      	bge.n	800bf9a <__ieee754_atan2+0x14a>
 800beda:	a13f      	add	r1, pc, #252	; (adr r1, 800bfd8 <__ieee754_atan2+0x188>)
 800bedc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bee0:	e7d7      	b.n	800be92 <__ieee754_atan2+0x42>
 800bee2:	4572      	cmp	r2, lr
 800bee4:	d10f      	bne.n	800bf06 <__ieee754_atan2+0xb6>
 800bee6:	4293      	cmp	r3, r2
 800bee8:	f104 34ff 	add.w	r4, r4, #4294967295
 800beec:	d107      	bne.n	800befe <__ieee754_atan2+0xae>
 800beee:	2c02      	cmp	r4, #2
 800bef0:	d84c      	bhi.n	800bf8c <__ieee754_atan2+0x13c>
 800bef2:	4b35      	ldr	r3, [pc, #212]	; (800bfc8 <__ieee754_atan2+0x178>)
 800bef4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bef8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800befc:	e7c9      	b.n	800be92 <__ieee754_atan2+0x42>
 800befe:	2c02      	cmp	r4, #2
 800bf00:	d848      	bhi.n	800bf94 <__ieee754_atan2+0x144>
 800bf02:	4b32      	ldr	r3, [pc, #200]	; (800bfcc <__ieee754_atan2+0x17c>)
 800bf04:	e7f6      	b.n	800bef4 <__ieee754_atan2+0xa4>
 800bf06:	4573      	cmp	r3, lr
 800bf08:	d0e4      	beq.n	800bed4 <__ieee754_atan2+0x84>
 800bf0a:	1a9b      	subs	r3, r3, r2
 800bf0c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bf10:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bf14:	da1e      	bge.n	800bf54 <__ieee754_atan2+0x104>
 800bf16:	2f00      	cmp	r7, #0
 800bf18:	da01      	bge.n	800bf1e <__ieee754_atan2+0xce>
 800bf1a:	323c      	adds	r2, #60	; 0x3c
 800bf1c:	db1e      	blt.n	800bf5c <__ieee754_atan2+0x10c>
 800bf1e:	4632      	mov	r2, r6
 800bf20:	463b      	mov	r3, r7
 800bf22:	f7f4 fcc3 	bl	80008ac <__aeabi_ddiv>
 800bf26:	ec41 0b10 	vmov	d0, r0, r1
 800bf2a:	f7ff fe11 	bl	800bb50 <fabs>
 800bf2e:	f7ff fc1f 	bl	800b770 <atan>
 800bf32:	ec51 0b10 	vmov	r0, r1, d0
 800bf36:	2c01      	cmp	r4, #1
 800bf38:	d013      	beq.n	800bf62 <__ieee754_atan2+0x112>
 800bf3a:	2c02      	cmp	r4, #2
 800bf3c:	d015      	beq.n	800bf6a <__ieee754_atan2+0x11a>
 800bf3e:	2c00      	cmp	r4, #0
 800bf40:	d0a7      	beq.n	800be92 <__ieee754_atan2+0x42>
 800bf42:	a319      	add	r3, pc, #100	; (adr r3, 800bfa8 <__ieee754_atan2+0x158>)
 800bf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf48:	f7f4 f9ce 	bl	80002e8 <__aeabi_dsub>
 800bf4c:	a318      	add	r3, pc, #96	; (adr r3, 800bfb0 <__ieee754_atan2+0x160>)
 800bf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf52:	e014      	b.n	800bf7e <__ieee754_atan2+0x12e>
 800bf54:	a118      	add	r1, pc, #96	; (adr r1, 800bfb8 <__ieee754_atan2+0x168>)
 800bf56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf5a:	e7ec      	b.n	800bf36 <__ieee754_atan2+0xe6>
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	2100      	movs	r1, #0
 800bf60:	e7e9      	b.n	800bf36 <__ieee754_atan2+0xe6>
 800bf62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf66:	4619      	mov	r1, r3
 800bf68:	e793      	b.n	800be92 <__ieee754_atan2+0x42>
 800bf6a:	a30f      	add	r3, pc, #60	; (adr r3, 800bfa8 <__ieee754_atan2+0x158>)
 800bf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf70:	f7f4 f9ba 	bl	80002e8 <__aeabi_dsub>
 800bf74:	4602      	mov	r2, r0
 800bf76:	460b      	mov	r3, r1
 800bf78:	a10d      	add	r1, pc, #52	; (adr r1, 800bfb0 <__ieee754_atan2+0x160>)
 800bf7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf7e:	f7f4 f9b3 	bl	80002e8 <__aeabi_dsub>
 800bf82:	e786      	b.n	800be92 <__ieee754_atan2+0x42>
 800bf84:	a10a      	add	r1, pc, #40	; (adr r1, 800bfb0 <__ieee754_atan2+0x160>)
 800bf86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf8a:	e782      	b.n	800be92 <__ieee754_atan2+0x42>
 800bf8c:	a10c      	add	r1, pc, #48	; (adr r1, 800bfc0 <__ieee754_atan2+0x170>)
 800bf8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf92:	e77e      	b.n	800be92 <__ieee754_atan2+0x42>
 800bf94:	2000      	movs	r0, #0
 800bf96:	2100      	movs	r1, #0
 800bf98:	e77b      	b.n	800be92 <__ieee754_atan2+0x42>
 800bf9a:	a107      	add	r1, pc, #28	; (adr r1, 800bfb8 <__ieee754_atan2+0x168>)
 800bf9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfa0:	e777      	b.n	800be92 <__ieee754_atan2+0x42>
 800bfa2:	bf00      	nop
 800bfa4:	f3af 8000 	nop.w
 800bfa8:	33145c07 	.word	0x33145c07
 800bfac:	3ca1a626 	.word	0x3ca1a626
 800bfb0:	54442d18 	.word	0x54442d18
 800bfb4:	400921fb 	.word	0x400921fb
 800bfb8:	54442d18 	.word	0x54442d18
 800bfbc:	3ff921fb 	.word	0x3ff921fb
 800bfc0:	54442d18 	.word	0x54442d18
 800bfc4:	3fe921fb 	.word	0x3fe921fb
 800bfc8:	0800e548 	.word	0x0800e548
 800bfcc:	0800e560 	.word	0x0800e560
 800bfd0:	54442d18 	.word	0x54442d18
 800bfd4:	c00921fb 	.word	0xc00921fb
 800bfd8:	54442d18 	.word	0x54442d18
 800bfdc:	bff921fb 	.word	0xbff921fb
 800bfe0:	7ff00000 	.word	0x7ff00000

0800bfe4 <__ieee754_fmod>:
 800bfe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe8:	ec53 2b11 	vmov	r2, r3, d1
 800bfec:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800bff0:	ea5e 0402 	orrs.w	r4, lr, r2
 800bff4:	ec51 0b10 	vmov	r0, r1, d0
 800bff8:	ee11 7a10 	vmov	r7, s2
 800bffc:	ee11 ca10 	vmov	ip, s2
 800c000:	461e      	mov	r6, r3
 800c002:	d00d      	beq.n	800c020 <__ieee754_fmod+0x3c>
 800c004:	4c7a      	ldr	r4, [pc, #488]	; (800c1f0 <__ieee754_fmod+0x20c>)
 800c006:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800c00a:	45a0      	cmp	r8, r4
 800c00c:	4689      	mov	r9, r1
 800c00e:	dc07      	bgt.n	800c020 <__ieee754_fmod+0x3c>
 800c010:	4254      	negs	r4, r2
 800c012:	4d78      	ldr	r5, [pc, #480]	; (800c1f4 <__ieee754_fmod+0x210>)
 800c014:	4314      	orrs	r4, r2
 800c016:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800c01a:	42ac      	cmp	r4, r5
 800c01c:	46ab      	mov	fp, r5
 800c01e:	d909      	bls.n	800c034 <__ieee754_fmod+0x50>
 800c020:	f7f4 fb1a 	bl	8000658 <__aeabi_dmul>
 800c024:	4602      	mov	r2, r0
 800c026:	460b      	mov	r3, r1
 800c028:	f7f4 fc40 	bl	80008ac <__aeabi_ddiv>
 800c02c:	ec41 0b10 	vmov	d0, r0, r1
 800c030:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c034:	45f0      	cmp	r8, lr
 800c036:	ee10 aa10 	vmov	sl, s0
 800c03a:	ee10 4a10 	vmov	r4, s0
 800c03e:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c042:	dc0a      	bgt.n	800c05a <__ieee754_fmod+0x76>
 800c044:	dbf2      	blt.n	800c02c <__ieee754_fmod+0x48>
 800c046:	4290      	cmp	r0, r2
 800c048:	d3f0      	bcc.n	800c02c <__ieee754_fmod+0x48>
 800c04a:	d106      	bne.n	800c05a <__ieee754_fmod+0x76>
 800c04c:	4a6a      	ldr	r2, [pc, #424]	; (800c1f8 <__ieee754_fmod+0x214>)
 800c04e:	0fed      	lsrs	r5, r5, #31
 800c050:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c054:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c058:	e7e8      	b.n	800c02c <__ieee754_fmod+0x48>
 800c05a:	ea19 0f0b 	tst.w	r9, fp
 800c05e:	d14a      	bne.n	800c0f6 <__ieee754_fmod+0x112>
 800c060:	f1b8 0f00 	cmp.w	r8, #0
 800c064:	d13f      	bne.n	800c0e6 <__ieee754_fmod+0x102>
 800c066:	4965      	ldr	r1, [pc, #404]	; (800c1fc <__ieee754_fmod+0x218>)
 800c068:	4653      	mov	r3, sl
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	dc38      	bgt.n	800c0e0 <__ieee754_fmod+0xfc>
 800c06e:	4b61      	ldr	r3, [pc, #388]	; (800c1f4 <__ieee754_fmod+0x210>)
 800c070:	4033      	ands	r3, r6
 800c072:	2b00      	cmp	r3, #0
 800c074:	d14f      	bne.n	800c116 <__ieee754_fmod+0x132>
 800c076:	f1be 0f00 	cmp.w	lr, #0
 800c07a:	d144      	bne.n	800c106 <__ieee754_fmod+0x122>
 800c07c:	4a5f      	ldr	r2, [pc, #380]	; (800c1fc <__ieee754_fmod+0x218>)
 800c07e:	463b      	mov	r3, r7
 800c080:	2b00      	cmp	r3, #0
 800c082:	dc3d      	bgt.n	800c100 <__ieee754_fmod+0x11c>
 800c084:	4b5e      	ldr	r3, [pc, #376]	; (800c200 <__ieee754_fmod+0x21c>)
 800c086:	4299      	cmp	r1, r3
 800c088:	db4a      	blt.n	800c120 <__ieee754_fmod+0x13c>
 800c08a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c08e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c092:	485b      	ldr	r0, [pc, #364]	; (800c200 <__ieee754_fmod+0x21c>)
 800c094:	4282      	cmp	r2, r0
 800c096:	db57      	blt.n	800c148 <__ieee754_fmod+0x164>
 800c098:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800c09c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800c0a0:	1a89      	subs	r1, r1, r2
 800c0a2:	1b98      	subs	r0, r3, r6
 800c0a4:	eba4 070c 	sub.w	r7, r4, ip
 800c0a8:	2900      	cmp	r1, #0
 800c0aa:	d164      	bne.n	800c176 <__ieee754_fmod+0x192>
 800c0ac:	4564      	cmp	r4, ip
 800c0ae:	bf38      	it	cc
 800c0b0:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	bfa4      	itt	ge
 800c0b8:	463c      	movge	r4, r7
 800c0ba:	4603      	movge	r3, r0
 800c0bc:	ea53 0104 	orrs.w	r1, r3, r4
 800c0c0:	d0c4      	beq.n	800c04c <__ieee754_fmod+0x68>
 800c0c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0c6:	db6b      	blt.n	800c1a0 <__ieee754_fmod+0x1bc>
 800c0c8:	494d      	ldr	r1, [pc, #308]	; (800c200 <__ieee754_fmod+0x21c>)
 800c0ca:	428a      	cmp	r2, r1
 800c0cc:	db6e      	blt.n	800c1ac <__ieee754_fmod+0x1c8>
 800c0ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c0d2:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800c0d6:	431d      	orrs	r5, r3
 800c0d8:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800c0dc:	4620      	mov	r0, r4
 800c0de:	e7a5      	b.n	800c02c <__ieee754_fmod+0x48>
 800c0e0:	3901      	subs	r1, #1
 800c0e2:	005b      	lsls	r3, r3, #1
 800c0e4:	e7c1      	b.n	800c06a <__ieee754_fmod+0x86>
 800c0e6:	4946      	ldr	r1, [pc, #280]	; (800c200 <__ieee754_fmod+0x21c>)
 800c0e8:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	ddbe      	ble.n	800c06e <__ieee754_fmod+0x8a>
 800c0f0:	3901      	subs	r1, #1
 800c0f2:	005b      	lsls	r3, r3, #1
 800c0f4:	e7fa      	b.n	800c0ec <__ieee754_fmod+0x108>
 800c0f6:	ea4f 5128 	mov.w	r1, r8, asr #20
 800c0fa:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c0fe:	e7b6      	b.n	800c06e <__ieee754_fmod+0x8a>
 800c100:	3a01      	subs	r2, #1
 800c102:	005b      	lsls	r3, r3, #1
 800c104:	e7bc      	b.n	800c080 <__ieee754_fmod+0x9c>
 800c106:	4a3e      	ldr	r2, [pc, #248]	; (800c200 <__ieee754_fmod+0x21c>)
 800c108:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	ddb9      	ble.n	800c084 <__ieee754_fmod+0xa0>
 800c110:	3a01      	subs	r2, #1
 800c112:	005b      	lsls	r3, r3, #1
 800c114:	e7fa      	b.n	800c10c <__ieee754_fmod+0x128>
 800c116:	ea4f 522e 	mov.w	r2, lr, asr #20
 800c11a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c11e:	e7b1      	b.n	800c084 <__ieee754_fmod+0xa0>
 800c120:	1a5c      	subs	r4, r3, r1
 800c122:	2c1f      	cmp	r4, #31
 800c124:	dc0a      	bgt.n	800c13c <__ieee754_fmod+0x158>
 800c126:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800c12a:	fa08 f804 	lsl.w	r8, r8, r4
 800c12e:	fa2a f303 	lsr.w	r3, sl, r3
 800c132:	ea43 0308 	orr.w	r3, r3, r8
 800c136:	fa0a f404 	lsl.w	r4, sl, r4
 800c13a:	e7aa      	b.n	800c092 <__ieee754_fmod+0xae>
 800c13c:	4b31      	ldr	r3, [pc, #196]	; (800c204 <__ieee754_fmod+0x220>)
 800c13e:	1a5b      	subs	r3, r3, r1
 800c140:	fa0a f303 	lsl.w	r3, sl, r3
 800c144:	2400      	movs	r4, #0
 800c146:	e7a4      	b.n	800c092 <__ieee754_fmod+0xae>
 800c148:	eba0 0c02 	sub.w	ip, r0, r2
 800c14c:	f1bc 0f1f 	cmp.w	ip, #31
 800c150:	dc0a      	bgt.n	800c168 <__ieee754_fmod+0x184>
 800c152:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800c156:	fa0e fe0c 	lsl.w	lr, lr, ip
 800c15a:	fa27 f606 	lsr.w	r6, r7, r6
 800c15e:	ea46 060e 	orr.w	r6, r6, lr
 800c162:	fa07 fc0c 	lsl.w	ip, r7, ip
 800c166:	e79b      	b.n	800c0a0 <__ieee754_fmod+0xbc>
 800c168:	4e26      	ldr	r6, [pc, #152]	; (800c204 <__ieee754_fmod+0x220>)
 800c16a:	1ab6      	subs	r6, r6, r2
 800c16c:	fa07 f606 	lsl.w	r6, r7, r6
 800c170:	f04f 0c00 	mov.w	ip, #0
 800c174:	e794      	b.n	800c0a0 <__ieee754_fmod+0xbc>
 800c176:	4564      	cmp	r4, ip
 800c178:	bf38      	it	cc
 800c17a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800c17e:	2800      	cmp	r0, #0
 800c180:	da05      	bge.n	800c18e <__ieee754_fmod+0x1aa>
 800c182:	0fe0      	lsrs	r0, r4, #31
 800c184:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c188:	0064      	lsls	r4, r4, #1
 800c18a:	3901      	subs	r1, #1
 800c18c:	e789      	b.n	800c0a2 <__ieee754_fmod+0xbe>
 800c18e:	ea50 0307 	orrs.w	r3, r0, r7
 800c192:	f43f af5b 	beq.w	800c04c <__ieee754_fmod+0x68>
 800c196:	0ffb      	lsrs	r3, r7, #31
 800c198:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800c19c:	007c      	lsls	r4, r7, #1
 800c19e:	e7f4      	b.n	800c18a <__ieee754_fmod+0x1a6>
 800c1a0:	0fe1      	lsrs	r1, r4, #31
 800c1a2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c1a6:	0064      	lsls	r4, r4, #1
 800c1a8:	3a01      	subs	r2, #1
 800c1aa:	e78a      	b.n	800c0c2 <__ieee754_fmod+0xde>
 800c1ac:	1a89      	subs	r1, r1, r2
 800c1ae:	2914      	cmp	r1, #20
 800c1b0:	dc0a      	bgt.n	800c1c8 <__ieee754_fmod+0x1e4>
 800c1b2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800c1b6:	fa03 f202 	lsl.w	r2, r3, r2
 800c1ba:	40cc      	lsrs	r4, r1
 800c1bc:	4322      	orrs	r2, r4
 800c1be:	410b      	asrs	r3, r1
 800c1c0:	ea43 0105 	orr.w	r1, r3, r5
 800c1c4:	4610      	mov	r0, r2
 800c1c6:	e731      	b.n	800c02c <__ieee754_fmod+0x48>
 800c1c8:	291f      	cmp	r1, #31
 800c1ca:	dc07      	bgt.n	800c1dc <__ieee754_fmod+0x1f8>
 800c1cc:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800c1d0:	40cc      	lsrs	r4, r1
 800c1d2:	fa03 f202 	lsl.w	r2, r3, r2
 800c1d6:	4322      	orrs	r2, r4
 800c1d8:	462b      	mov	r3, r5
 800c1da:	e7f1      	b.n	800c1c0 <__ieee754_fmod+0x1dc>
 800c1dc:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800c1e0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c1e4:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800c1e8:	32e2      	adds	r2, #226	; 0xe2
 800c1ea:	fa43 f202 	asr.w	r2, r3, r2
 800c1ee:	e7f3      	b.n	800c1d8 <__ieee754_fmod+0x1f4>
 800c1f0:	7fefffff 	.word	0x7fefffff
 800c1f4:	7ff00000 	.word	0x7ff00000
 800c1f8:	0800e578 	.word	0x0800e578
 800c1fc:	fffffbed 	.word	0xfffffbed
 800c200:	fffffc02 	.word	0xfffffc02
 800c204:	fffffbe2 	.word	0xfffffbe2

0800c208 <__ieee754_pow>:
 800c208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c20c:	ed2d 8b06 	vpush	{d8-d10}
 800c210:	b08d      	sub	sp, #52	; 0x34
 800c212:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c216:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800c21a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800c21e:	ea56 0100 	orrs.w	r1, r6, r0
 800c222:	ec53 2b10 	vmov	r2, r3, d0
 800c226:	f000 84d1 	beq.w	800cbcc <__ieee754_pow+0x9c4>
 800c22a:	497f      	ldr	r1, [pc, #508]	; (800c428 <__ieee754_pow+0x220>)
 800c22c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c230:	428c      	cmp	r4, r1
 800c232:	ee10 8a10 	vmov	r8, s0
 800c236:	4699      	mov	r9, r3
 800c238:	dc09      	bgt.n	800c24e <__ieee754_pow+0x46>
 800c23a:	d103      	bne.n	800c244 <__ieee754_pow+0x3c>
 800c23c:	b97a      	cbnz	r2, 800c25e <__ieee754_pow+0x56>
 800c23e:	42a6      	cmp	r6, r4
 800c240:	dd02      	ble.n	800c248 <__ieee754_pow+0x40>
 800c242:	e00c      	b.n	800c25e <__ieee754_pow+0x56>
 800c244:	428e      	cmp	r6, r1
 800c246:	dc02      	bgt.n	800c24e <__ieee754_pow+0x46>
 800c248:	428e      	cmp	r6, r1
 800c24a:	d110      	bne.n	800c26e <__ieee754_pow+0x66>
 800c24c:	b178      	cbz	r0, 800c26e <__ieee754_pow+0x66>
 800c24e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c252:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c256:	ea54 0308 	orrs.w	r3, r4, r8
 800c25a:	f000 84b7 	beq.w	800cbcc <__ieee754_pow+0x9c4>
 800c25e:	4873      	ldr	r0, [pc, #460]	; (800c42c <__ieee754_pow+0x224>)
 800c260:	b00d      	add	sp, #52	; 0x34
 800c262:	ecbd 8b06 	vpop	{d8-d10}
 800c266:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c26a:	f7ff b915 	b.w	800b498 <nan>
 800c26e:	f1b9 0f00 	cmp.w	r9, #0
 800c272:	da36      	bge.n	800c2e2 <__ieee754_pow+0xda>
 800c274:	496e      	ldr	r1, [pc, #440]	; (800c430 <__ieee754_pow+0x228>)
 800c276:	428e      	cmp	r6, r1
 800c278:	dc51      	bgt.n	800c31e <__ieee754_pow+0x116>
 800c27a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800c27e:	428e      	cmp	r6, r1
 800c280:	f340 84af 	ble.w	800cbe2 <__ieee754_pow+0x9da>
 800c284:	1531      	asrs	r1, r6, #20
 800c286:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c28a:	2914      	cmp	r1, #20
 800c28c:	dd0f      	ble.n	800c2ae <__ieee754_pow+0xa6>
 800c28e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800c292:	fa20 fc01 	lsr.w	ip, r0, r1
 800c296:	fa0c f101 	lsl.w	r1, ip, r1
 800c29a:	4281      	cmp	r1, r0
 800c29c:	f040 84a1 	bne.w	800cbe2 <__ieee754_pow+0x9da>
 800c2a0:	f00c 0c01 	and.w	ip, ip, #1
 800c2a4:	f1cc 0102 	rsb	r1, ip, #2
 800c2a8:	9100      	str	r1, [sp, #0]
 800c2aa:	b180      	cbz	r0, 800c2ce <__ieee754_pow+0xc6>
 800c2ac:	e059      	b.n	800c362 <__ieee754_pow+0x15a>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	d155      	bne.n	800c35e <__ieee754_pow+0x156>
 800c2b2:	f1c1 0114 	rsb	r1, r1, #20
 800c2b6:	fa46 fc01 	asr.w	ip, r6, r1
 800c2ba:	fa0c f101 	lsl.w	r1, ip, r1
 800c2be:	42b1      	cmp	r1, r6
 800c2c0:	f040 848c 	bne.w	800cbdc <__ieee754_pow+0x9d4>
 800c2c4:	f00c 0c01 	and.w	ip, ip, #1
 800c2c8:	f1cc 0102 	rsb	r1, ip, #2
 800c2cc:	9100      	str	r1, [sp, #0]
 800c2ce:	4959      	ldr	r1, [pc, #356]	; (800c434 <__ieee754_pow+0x22c>)
 800c2d0:	428e      	cmp	r6, r1
 800c2d2:	d12d      	bne.n	800c330 <__ieee754_pow+0x128>
 800c2d4:	2f00      	cmp	r7, #0
 800c2d6:	da79      	bge.n	800c3cc <__ieee754_pow+0x1c4>
 800c2d8:	4956      	ldr	r1, [pc, #344]	; (800c434 <__ieee754_pow+0x22c>)
 800c2da:	2000      	movs	r0, #0
 800c2dc:	f7f4 fae6 	bl	80008ac <__aeabi_ddiv>
 800c2e0:	e016      	b.n	800c310 <__ieee754_pow+0x108>
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	9100      	str	r1, [sp, #0]
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	d13b      	bne.n	800c362 <__ieee754_pow+0x15a>
 800c2ea:	494f      	ldr	r1, [pc, #316]	; (800c428 <__ieee754_pow+0x220>)
 800c2ec:	428e      	cmp	r6, r1
 800c2ee:	d1ee      	bne.n	800c2ce <__ieee754_pow+0xc6>
 800c2f0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c2f4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c2f8:	ea53 0308 	orrs.w	r3, r3, r8
 800c2fc:	f000 8466 	beq.w	800cbcc <__ieee754_pow+0x9c4>
 800c300:	4b4d      	ldr	r3, [pc, #308]	; (800c438 <__ieee754_pow+0x230>)
 800c302:	429c      	cmp	r4, r3
 800c304:	dd0d      	ble.n	800c322 <__ieee754_pow+0x11a>
 800c306:	2f00      	cmp	r7, #0
 800c308:	f280 8464 	bge.w	800cbd4 <__ieee754_pow+0x9cc>
 800c30c:	2000      	movs	r0, #0
 800c30e:	2100      	movs	r1, #0
 800c310:	ec41 0b10 	vmov	d0, r0, r1
 800c314:	b00d      	add	sp, #52	; 0x34
 800c316:	ecbd 8b06 	vpop	{d8-d10}
 800c31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c31e:	2102      	movs	r1, #2
 800c320:	e7e0      	b.n	800c2e4 <__ieee754_pow+0xdc>
 800c322:	2f00      	cmp	r7, #0
 800c324:	daf2      	bge.n	800c30c <__ieee754_pow+0x104>
 800c326:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800c32a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c32e:	e7ef      	b.n	800c310 <__ieee754_pow+0x108>
 800c330:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c334:	d104      	bne.n	800c340 <__ieee754_pow+0x138>
 800c336:	4610      	mov	r0, r2
 800c338:	4619      	mov	r1, r3
 800c33a:	f7f4 f98d 	bl	8000658 <__aeabi_dmul>
 800c33e:	e7e7      	b.n	800c310 <__ieee754_pow+0x108>
 800c340:	493e      	ldr	r1, [pc, #248]	; (800c43c <__ieee754_pow+0x234>)
 800c342:	428f      	cmp	r7, r1
 800c344:	d10d      	bne.n	800c362 <__ieee754_pow+0x15a>
 800c346:	f1b9 0f00 	cmp.w	r9, #0
 800c34a:	db0a      	blt.n	800c362 <__ieee754_pow+0x15a>
 800c34c:	ec43 2b10 	vmov	d0, r2, r3
 800c350:	b00d      	add	sp, #52	; 0x34
 800c352:	ecbd 8b06 	vpop	{d8-d10}
 800c356:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c35a:	f000 be83 	b.w	800d064 <__ieee754_sqrt>
 800c35e:	2100      	movs	r1, #0
 800c360:	9100      	str	r1, [sp, #0]
 800c362:	ec43 2b10 	vmov	d0, r2, r3
 800c366:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c36a:	f7ff fbf1 	bl	800bb50 <fabs>
 800c36e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c372:	ec51 0b10 	vmov	r0, r1, d0
 800c376:	f1b8 0f00 	cmp.w	r8, #0
 800c37a:	d12a      	bne.n	800c3d2 <__ieee754_pow+0x1ca>
 800c37c:	b12c      	cbz	r4, 800c38a <__ieee754_pow+0x182>
 800c37e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800c434 <__ieee754_pow+0x22c>
 800c382:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800c386:	45e6      	cmp	lr, ip
 800c388:	d123      	bne.n	800c3d2 <__ieee754_pow+0x1ca>
 800c38a:	2f00      	cmp	r7, #0
 800c38c:	da05      	bge.n	800c39a <__ieee754_pow+0x192>
 800c38e:	4602      	mov	r2, r0
 800c390:	460b      	mov	r3, r1
 800c392:	2000      	movs	r0, #0
 800c394:	4927      	ldr	r1, [pc, #156]	; (800c434 <__ieee754_pow+0x22c>)
 800c396:	f7f4 fa89 	bl	80008ac <__aeabi_ddiv>
 800c39a:	f1b9 0f00 	cmp.w	r9, #0
 800c39e:	dab7      	bge.n	800c310 <__ieee754_pow+0x108>
 800c3a0:	9b00      	ldr	r3, [sp, #0]
 800c3a2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c3a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c3aa:	4323      	orrs	r3, r4
 800c3ac:	d108      	bne.n	800c3c0 <__ieee754_pow+0x1b8>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	4610      	mov	r0, r2
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	f7f3 ff97 	bl	80002e8 <__aeabi_dsub>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	460b      	mov	r3, r1
 800c3be:	e78d      	b.n	800c2dc <__ieee754_pow+0xd4>
 800c3c0:	9b00      	ldr	r3, [sp, #0]
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d1a4      	bne.n	800c310 <__ieee754_pow+0x108>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3cc:	4610      	mov	r0, r2
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	e79e      	b.n	800c310 <__ieee754_pow+0x108>
 800c3d2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800c3d6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800c3da:	950a      	str	r5, [sp, #40]	; 0x28
 800c3dc:	9d00      	ldr	r5, [sp, #0]
 800c3de:	46ac      	mov	ip, r5
 800c3e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c3e2:	ea5c 0505 	orrs.w	r5, ip, r5
 800c3e6:	d0e4      	beq.n	800c3b2 <__ieee754_pow+0x1aa>
 800c3e8:	4b15      	ldr	r3, [pc, #84]	; (800c440 <__ieee754_pow+0x238>)
 800c3ea:	429e      	cmp	r6, r3
 800c3ec:	f340 80fc 	ble.w	800c5e8 <__ieee754_pow+0x3e0>
 800c3f0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c3f4:	429e      	cmp	r6, r3
 800c3f6:	4b10      	ldr	r3, [pc, #64]	; (800c438 <__ieee754_pow+0x230>)
 800c3f8:	dd07      	ble.n	800c40a <__ieee754_pow+0x202>
 800c3fa:	429c      	cmp	r4, r3
 800c3fc:	dc0a      	bgt.n	800c414 <__ieee754_pow+0x20c>
 800c3fe:	2f00      	cmp	r7, #0
 800c400:	da84      	bge.n	800c30c <__ieee754_pow+0x104>
 800c402:	a307      	add	r3, pc, #28	; (adr r3, 800c420 <__ieee754_pow+0x218>)
 800c404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c408:	e795      	b.n	800c336 <__ieee754_pow+0x12e>
 800c40a:	429c      	cmp	r4, r3
 800c40c:	dbf7      	blt.n	800c3fe <__ieee754_pow+0x1f6>
 800c40e:	4b09      	ldr	r3, [pc, #36]	; (800c434 <__ieee754_pow+0x22c>)
 800c410:	429c      	cmp	r4, r3
 800c412:	dd17      	ble.n	800c444 <__ieee754_pow+0x23c>
 800c414:	2f00      	cmp	r7, #0
 800c416:	dcf4      	bgt.n	800c402 <__ieee754_pow+0x1fa>
 800c418:	e778      	b.n	800c30c <__ieee754_pow+0x104>
 800c41a:	bf00      	nop
 800c41c:	f3af 8000 	nop.w
 800c420:	8800759c 	.word	0x8800759c
 800c424:	7e37e43c 	.word	0x7e37e43c
 800c428:	7ff00000 	.word	0x7ff00000
 800c42c:	0800e400 	.word	0x0800e400
 800c430:	433fffff 	.word	0x433fffff
 800c434:	3ff00000 	.word	0x3ff00000
 800c438:	3fefffff 	.word	0x3fefffff
 800c43c:	3fe00000 	.word	0x3fe00000
 800c440:	41e00000 	.word	0x41e00000
 800c444:	4b64      	ldr	r3, [pc, #400]	; (800c5d8 <__ieee754_pow+0x3d0>)
 800c446:	2200      	movs	r2, #0
 800c448:	f7f3 ff4e 	bl	80002e8 <__aeabi_dsub>
 800c44c:	a356      	add	r3, pc, #344	; (adr r3, 800c5a8 <__ieee754_pow+0x3a0>)
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	4604      	mov	r4, r0
 800c454:	460d      	mov	r5, r1
 800c456:	f7f4 f8ff 	bl	8000658 <__aeabi_dmul>
 800c45a:	a355      	add	r3, pc, #340	; (adr r3, 800c5b0 <__ieee754_pow+0x3a8>)
 800c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c460:	4606      	mov	r6, r0
 800c462:	460f      	mov	r7, r1
 800c464:	4620      	mov	r0, r4
 800c466:	4629      	mov	r1, r5
 800c468:	f7f4 f8f6 	bl	8000658 <__aeabi_dmul>
 800c46c:	4b5b      	ldr	r3, [pc, #364]	; (800c5dc <__ieee754_pow+0x3d4>)
 800c46e:	4682      	mov	sl, r0
 800c470:	468b      	mov	fp, r1
 800c472:	2200      	movs	r2, #0
 800c474:	4620      	mov	r0, r4
 800c476:	4629      	mov	r1, r5
 800c478:	f7f4 f8ee 	bl	8000658 <__aeabi_dmul>
 800c47c:	4602      	mov	r2, r0
 800c47e:	460b      	mov	r3, r1
 800c480:	a14d      	add	r1, pc, #308	; (adr r1, 800c5b8 <__ieee754_pow+0x3b0>)
 800c482:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c486:	f7f3 ff2f 	bl	80002e8 <__aeabi_dsub>
 800c48a:	4622      	mov	r2, r4
 800c48c:	462b      	mov	r3, r5
 800c48e:	f7f4 f8e3 	bl	8000658 <__aeabi_dmul>
 800c492:	4602      	mov	r2, r0
 800c494:	460b      	mov	r3, r1
 800c496:	2000      	movs	r0, #0
 800c498:	4951      	ldr	r1, [pc, #324]	; (800c5e0 <__ieee754_pow+0x3d8>)
 800c49a:	f7f3 ff25 	bl	80002e8 <__aeabi_dsub>
 800c49e:	4622      	mov	r2, r4
 800c4a0:	4680      	mov	r8, r0
 800c4a2:	4689      	mov	r9, r1
 800c4a4:	462b      	mov	r3, r5
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	4629      	mov	r1, r5
 800c4aa:	f7f4 f8d5 	bl	8000658 <__aeabi_dmul>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	4640      	mov	r0, r8
 800c4b4:	4649      	mov	r1, r9
 800c4b6:	f7f4 f8cf 	bl	8000658 <__aeabi_dmul>
 800c4ba:	a341      	add	r3, pc, #260	; (adr r3, 800c5c0 <__ieee754_pow+0x3b8>)
 800c4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c0:	f7f4 f8ca 	bl	8000658 <__aeabi_dmul>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	460b      	mov	r3, r1
 800c4c8:	4650      	mov	r0, sl
 800c4ca:	4659      	mov	r1, fp
 800c4cc:	f7f3 ff0c 	bl	80002e8 <__aeabi_dsub>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	4680      	mov	r8, r0
 800c4d6:	4689      	mov	r9, r1
 800c4d8:	4630      	mov	r0, r6
 800c4da:	4639      	mov	r1, r7
 800c4dc:	f7f3 ff06 	bl	80002ec <__adddf3>
 800c4e0:	2400      	movs	r4, #0
 800c4e2:	4632      	mov	r2, r6
 800c4e4:	463b      	mov	r3, r7
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	460d      	mov	r5, r1
 800c4ea:	f7f3 fefd 	bl	80002e8 <__aeabi_dsub>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	4640      	mov	r0, r8
 800c4f4:	4649      	mov	r1, r9
 800c4f6:	f7f3 fef7 	bl	80002e8 <__aeabi_dsub>
 800c4fa:	9b00      	ldr	r3, [sp, #0]
 800c4fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4fe:	3b01      	subs	r3, #1
 800c500:	4313      	orrs	r3, r2
 800c502:	4682      	mov	sl, r0
 800c504:	468b      	mov	fp, r1
 800c506:	f040 81f1 	bne.w	800c8ec <__ieee754_pow+0x6e4>
 800c50a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c5c8 <__ieee754_pow+0x3c0>
 800c50e:	eeb0 8a47 	vmov.f32	s16, s14
 800c512:	eef0 8a67 	vmov.f32	s17, s15
 800c516:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c51a:	2600      	movs	r6, #0
 800c51c:	4632      	mov	r2, r6
 800c51e:	463b      	mov	r3, r7
 800c520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c524:	f7f3 fee0 	bl	80002e8 <__aeabi_dsub>
 800c528:	4622      	mov	r2, r4
 800c52a:	462b      	mov	r3, r5
 800c52c:	f7f4 f894 	bl	8000658 <__aeabi_dmul>
 800c530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c534:	4680      	mov	r8, r0
 800c536:	4689      	mov	r9, r1
 800c538:	4650      	mov	r0, sl
 800c53a:	4659      	mov	r1, fp
 800c53c:	f7f4 f88c 	bl	8000658 <__aeabi_dmul>
 800c540:	4602      	mov	r2, r0
 800c542:	460b      	mov	r3, r1
 800c544:	4640      	mov	r0, r8
 800c546:	4649      	mov	r1, r9
 800c548:	f7f3 fed0 	bl	80002ec <__adddf3>
 800c54c:	4632      	mov	r2, r6
 800c54e:	463b      	mov	r3, r7
 800c550:	4680      	mov	r8, r0
 800c552:	4689      	mov	r9, r1
 800c554:	4620      	mov	r0, r4
 800c556:	4629      	mov	r1, r5
 800c558:	f7f4 f87e 	bl	8000658 <__aeabi_dmul>
 800c55c:	460b      	mov	r3, r1
 800c55e:	4604      	mov	r4, r0
 800c560:	460d      	mov	r5, r1
 800c562:	4602      	mov	r2, r0
 800c564:	4649      	mov	r1, r9
 800c566:	4640      	mov	r0, r8
 800c568:	f7f3 fec0 	bl	80002ec <__adddf3>
 800c56c:	4b1d      	ldr	r3, [pc, #116]	; (800c5e4 <__ieee754_pow+0x3dc>)
 800c56e:	4299      	cmp	r1, r3
 800c570:	ec45 4b19 	vmov	d9, r4, r5
 800c574:	4606      	mov	r6, r0
 800c576:	460f      	mov	r7, r1
 800c578:	468b      	mov	fp, r1
 800c57a:	f340 82fe 	ble.w	800cb7a <__ieee754_pow+0x972>
 800c57e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c582:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c586:	4303      	orrs	r3, r0
 800c588:	f000 81f0 	beq.w	800c96c <__ieee754_pow+0x764>
 800c58c:	a310      	add	r3, pc, #64	; (adr r3, 800c5d0 <__ieee754_pow+0x3c8>)
 800c58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c592:	ec51 0b18 	vmov	r0, r1, d8
 800c596:	f7f4 f85f 	bl	8000658 <__aeabi_dmul>
 800c59a:	a30d      	add	r3, pc, #52	; (adr r3, 800c5d0 <__ieee754_pow+0x3c8>)
 800c59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a0:	e6cb      	b.n	800c33a <__ieee754_pow+0x132>
 800c5a2:	bf00      	nop
 800c5a4:	f3af 8000 	nop.w
 800c5a8:	60000000 	.word	0x60000000
 800c5ac:	3ff71547 	.word	0x3ff71547
 800c5b0:	f85ddf44 	.word	0xf85ddf44
 800c5b4:	3e54ae0b 	.word	0x3e54ae0b
 800c5b8:	55555555 	.word	0x55555555
 800c5bc:	3fd55555 	.word	0x3fd55555
 800c5c0:	652b82fe 	.word	0x652b82fe
 800c5c4:	3ff71547 	.word	0x3ff71547
 800c5c8:	00000000 	.word	0x00000000
 800c5cc:	bff00000 	.word	0xbff00000
 800c5d0:	8800759c 	.word	0x8800759c
 800c5d4:	7e37e43c 	.word	0x7e37e43c
 800c5d8:	3ff00000 	.word	0x3ff00000
 800c5dc:	3fd00000 	.word	0x3fd00000
 800c5e0:	3fe00000 	.word	0x3fe00000
 800c5e4:	408fffff 	.word	0x408fffff
 800c5e8:	4bd7      	ldr	r3, [pc, #860]	; (800c948 <__ieee754_pow+0x740>)
 800c5ea:	ea03 0309 	and.w	r3, r3, r9
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	b92b      	cbnz	r3, 800c5fe <__ieee754_pow+0x3f6>
 800c5f2:	4bd6      	ldr	r3, [pc, #856]	; (800c94c <__ieee754_pow+0x744>)
 800c5f4:	f7f4 f830 	bl	8000658 <__aeabi_dmul>
 800c5f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c5fc:	460c      	mov	r4, r1
 800c5fe:	1523      	asrs	r3, r4, #20
 800c600:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c604:	4413      	add	r3, r2
 800c606:	9309      	str	r3, [sp, #36]	; 0x24
 800c608:	4bd1      	ldr	r3, [pc, #836]	; (800c950 <__ieee754_pow+0x748>)
 800c60a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c60e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c612:	429c      	cmp	r4, r3
 800c614:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c618:	dd08      	ble.n	800c62c <__ieee754_pow+0x424>
 800c61a:	4bce      	ldr	r3, [pc, #824]	; (800c954 <__ieee754_pow+0x74c>)
 800c61c:	429c      	cmp	r4, r3
 800c61e:	f340 8163 	ble.w	800c8e8 <__ieee754_pow+0x6e0>
 800c622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c624:	3301      	adds	r3, #1
 800c626:	9309      	str	r3, [sp, #36]	; 0x24
 800c628:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c62c:	2400      	movs	r4, #0
 800c62e:	00e3      	lsls	r3, r4, #3
 800c630:	930b      	str	r3, [sp, #44]	; 0x2c
 800c632:	4bc9      	ldr	r3, [pc, #804]	; (800c958 <__ieee754_pow+0x750>)
 800c634:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c638:	ed93 7b00 	vldr	d7, [r3]
 800c63c:	4629      	mov	r1, r5
 800c63e:	ec53 2b17 	vmov	r2, r3, d7
 800c642:	eeb0 8a47 	vmov.f32	s16, s14
 800c646:	eef0 8a67 	vmov.f32	s17, s15
 800c64a:	4682      	mov	sl, r0
 800c64c:	f7f3 fe4c 	bl	80002e8 <__aeabi_dsub>
 800c650:	4652      	mov	r2, sl
 800c652:	4606      	mov	r6, r0
 800c654:	460f      	mov	r7, r1
 800c656:	462b      	mov	r3, r5
 800c658:	ec51 0b18 	vmov	r0, r1, d8
 800c65c:	f7f3 fe46 	bl	80002ec <__adddf3>
 800c660:	4602      	mov	r2, r0
 800c662:	460b      	mov	r3, r1
 800c664:	2000      	movs	r0, #0
 800c666:	49bd      	ldr	r1, [pc, #756]	; (800c95c <__ieee754_pow+0x754>)
 800c668:	f7f4 f920 	bl	80008ac <__aeabi_ddiv>
 800c66c:	ec41 0b19 	vmov	d9, r0, r1
 800c670:	4602      	mov	r2, r0
 800c672:	460b      	mov	r3, r1
 800c674:	4630      	mov	r0, r6
 800c676:	4639      	mov	r1, r7
 800c678:	f7f3 ffee 	bl	8000658 <__aeabi_dmul>
 800c67c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c680:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c684:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c688:	2300      	movs	r3, #0
 800c68a:	9304      	str	r3, [sp, #16]
 800c68c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c690:	46ab      	mov	fp, r5
 800c692:	106d      	asrs	r5, r5, #1
 800c694:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c698:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c69c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	4640      	mov	r0, r8
 800c6a4:	4649      	mov	r1, r9
 800c6a6:	4614      	mov	r4, r2
 800c6a8:	461d      	mov	r5, r3
 800c6aa:	f7f3 ffd5 	bl	8000658 <__aeabi_dmul>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	4630      	mov	r0, r6
 800c6b4:	4639      	mov	r1, r7
 800c6b6:	f7f3 fe17 	bl	80002e8 <__aeabi_dsub>
 800c6ba:	ec53 2b18 	vmov	r2, r3, d8
 800c6be:	4606      	mov	r6, r0
 800c6c0:	460f      	mov	r7, r1
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	4629      	mov	r1, r5
 800c6c6:	f7f3 fe0f 	bl	80002e8 <__aeabi_dsub>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	4650      	mov	r0, sl
 800c6d0:	4659      	mov	r1, fp
 800c6d2:	f7f3 fe09 	bl	80002e8 <__aeabi_dsub>
 800c6d6:	4642      	mov	r2, r8
 800c6d8:	464b      	mov	r3, r9
 800c6da:	f7f3 ffbd 	bl	8000658 <__aeabi_dmul>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	4630      	mov	r0, r6
 800c6e4:	4639      	mov	r1, r7
 800c6e6:	f7f3 fdff 	bl	80002e8 <__aeabi_dsub>
 800c6ea:	ec53 2b19 	vmov	r2, r3, d9
 800c6ee:	f7f3 ffb3 	bl	8000658 <__aeabi_dmul>
 800c6f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6f6:	ec41 0b18 	vmov	d8, r0, r1
 800c6fa:	4610      	mov	r0, r2
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	f7f3 ffab 	bl	8000658 <__aeabi_dmul>
 800c702:	a37d      	add	r3, pc, #500	; (adr r3, 800c8f8 <__ieee754_pow+0x6f0>)
 800c704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c708:	4604      	mov	r4, r0
 800c70a:	460d      	mov	r5, r1
 800c70c:	f7f3 ffa4 	bl	8000658 <__aeabi_dmul>
 800c710:	a37b      	add	r3, pc, #492	; (adr r3, 800c900 <__ieee754_pow+0x6f8>)
 800c712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c716:	f7f3 fde9 	bl	80002ec <__adddf3>
 800c71a:	4622      	mov	r2, r4
 800c71c:	462b      	mov	r3, r5
 800c71e:	f7f3 ff9b 	bl	8000658 <__aeabi_dmul>
 800c722:	a379      	add	r3, pc, #484	; (adr r3, 800c908 <__ieee754_pow+0x700>)
 800c724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c728:	f7f3 fde0 	bl	80002ec <__adddf3>
 800c72c:	4622      	mov	r2, r4
 800c72e:	462b      	mov	r3, r5
 800c730:	f7f3 ff92 	bl	8000658 <__aeabi_dmul>
 800c734:	a376      	add	r3, pc, #472	; (adr r3, 800c910 <__ieee754_pow+0x708>)
 800c736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73a:	f7f3 fdd7 	bl	80002ec <__adddf3>
 800c73e:	4622      	mov	r2, r4
 800c740:	462b      	mov	r3, r5
 800c742:	f7f3 ff89 	bl	8000658 <__aeabi_dmul>
 800c746:	a374      	add	r3, pc, #464	; (adr r3, 800c918 <__ieee754_pow+0x710>)
 800c748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74c:	f7f3 fdce 	bl	80002ec <__adddf3>
 800c750:	4622      	mov	r2, r4
 800c752:	462b      	mov	r3, r5
 800c754:	f7f3 ff80 	bl	8000658 <__aeabi_dmul>
 800c758:	a371      	add	r3, pc, #452	; (adr r3, 800c920 <__ieee754_pow+0x718>)
 800c75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75e:	f7f3 fdc5 	bl	80002ec <__adddf3>
 800c762:	4622      	mov	r2, r4
 800c764:	4606      	mov	r6, r0
 800c766:	460f      	mov	r7, r1
 800c768:	462b      	mov	r3, r5
 800c76a:	4620      	mov	r0, r4
 800c76c:	4629      	mov	r1, r5
 800c76e:	f7f3 ff73 	bl	8000658 <__aeabi_dmul>
 800c772:	4602      	mov	r2, r0
 800c774:	460b      	mov	r3, r1
 800c776:	4630      	mov	r0, r6
 800c778:	4639      	mov	r1, r7
 800c77a:	f7f3 ff6d 	bl	8000658 <__aeabi_dmul>
 800c77e:	4642      	mov	r2, r8
 800c780:	4604      	mov	r4, r0
 800c782:	460d      	mov	r5, r1
 800c784:	464b      	mov	r3, r9
 800c786:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c78a:	f7f3 fdaf 	bl	80002ec <__adddf3>
 800c78e:	ec53 2b18 	vmov	r2, r3, d8
 800c792:	f7f3 ff61 	bl	8000658 <__aeabi_dmul>
 800c796:	4622      	mov	r2, r4
 800c798:	462b      	mov	r3, r5
 800c79a:	f7f3 fda7 	bl	80002ec <__adddf3>
 800c79e:	4642      	mov	r2, r8
 800c7a0:	4682      	mov	sl, r0
 800c7a2:	468b      	mov	fp, r1
 800c7a4:	464b      	mov	r3, r9
 800c7a6:	4640      	mov	r0, r8
 800c7a8:	4649      	mov	r1, r9
 800c7aa:	f7f3 ff55 	bl	8000658 <__aeabi_dmul>
 800c7ae:	4b6c      	ldr	r3, [pc, #432]	; (800c960 <__ieee754_pow+0x758>)
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	4606      	mov	r6, r0
 800c7b4:	460f      	mov	r7, r1
 800c7b6:	f7f3 fd99 	bl	80002ec <__adddf3>
 800c7ba:	4652      	mov	r2, sl
 800c7bc:	465b      	mov	r3, fp
 800c7be:	f7f3 fd95 	bl	80002ec <__adddf3>
 800c7c2:	9c04      	ldr	r4, [sp, #16]
 800c7c4:	460d      	mov	r5, r1
 800c7c6:	4622      	mov	r2, r4
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	4640      	mov	r0, r8
 800c7cc:	4649      	mov	r1, r9
 800c7ce:	f7f3 ff43 	bl	8000658 <__aeabi_dmul>
 800c7d2:	4b63      	ldr	r3, [pc, #396]	; (800c960 <__ieee754_pow+0x758>)
 800c7d4:	4680      	mov	r8, r0
 800c7d6:	4689      	mov	r9, r1
 800c7d8:	2200      	movs	r2, #0
 800c7da:	4620      	mov	r0, r4
 800c7dc:	4629      	mov	r1, r5
 800c7de:	f7f3 fd83 	bl	80002e8 <__aeabi_dsub>
 800c7e2:	4632      	mov	r2, r6
 800c7e4:	463b      	mov	r3, r7
 800c7e6:	f7f3 fd7f 	bl	80002e8 <__aeabi_dsub>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	4650      	mov	r0, sl
 800c7f0:	4659      	mov	r1, fp
 800c7f2:	f7f3 fd79 	bl	80002e8 <__aeabi_dsub>
 800c7f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c7fa:	f7f3 ff2d 	bl	8000658 <__aeabi_dmul>
 800c7fe:	4622      	mov	r2, r4
 800c800:	4606      	mov	r6, r0
 800c802:	460f      	mov	r7, r1
 800c804:	462b      	mov	r3, r5
 800c806:	ec51 0b18 	vmov	r0, r1, d8
 800c80a:	f7f3 ff25 	bl	8000658 <__aeabi_dmul>
 800c80e:	4602      	mov	r2, r0
 800c810:	460b      	mov	r3, r1
 800c812:	4630      	mov	r0, r6
 800c814:	4639      	mov	r1, r7
 800c816:	f7f3 fd69 	bl	80002ec <__adddf3>
 800c81a:	4606      	mov	r6, r0
 800c81c:	460f      	mov	r7, r1
 800c81e:	4602      	mov	r2, r0
 800c820:	460b      	mov	r3, r1
 800c822:	4640      	mov	r0, r8
 800c824:	4649      	mov	r1, r9
 800c826:	f7f3 fd61 	bl	80002ec <__adddf3>
 800c82a:	9c04      	ldr	r4, [sp, #16]
 800c82c:	a33e      	add	r3, pc, #248	; (adr r3, 800c928 <__ieee754_pow+0x720>)
 800c82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c832:	4620      	mov	r0, r4
 800c834:	460d      	mov	r5, r1
 800c836:	f7f3 ff0f 	bl	8000658 <__aeabi_dmul>
 800c83a:	4642      	mov	r2, r8
 800c83c:	ec41 0b18 	vmov	d8, r0, r1
 800c840:	464b      	mov	r3, r9
 800c842:	4620      	mov	r0, r4
 800c844:	4629      	mov	r1, r5
 800c846:	f7f3 fd4f 	bl	80002e8 <__aeabi_dsub>
 800c84a:	4602      	mov	r2, r0
 800c84c:	460b      	mov	r3, r1
 800c84e:	4630      	mov	r0, r6
 800c850:	4639      	mov	r1, r7
 800c852:	f7f3 fd49 	bl	80002e8 <__aeabi_dsub>
 800c856:	a336      	add	r3, pc, #216	; (adr r3, 800c930 <__ieee754_pow+0x728>)
 800c858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85c:	f7f3 fefc 	bl	8000658 <__aeabi_dmul>
 800c860:	a335      	add	r3, pc, #212	; (adr r3, 800c938 <__ieee754_pow+0x730>)
 800c862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c866:	4606      	mov	r6, r0
 800c868:	460f      	mov	r7, r1
 800c86a:	4620      	mov	r0, r4
 800c86c:	4629      	mov	r1, r5
 800c86e:	f7f3 fef3 	bl	8000658 <__aeabi_dmul>
 800c872:	4602      	mov	r2, r0
 800c874:	460b      	mov	r3, r1
 800c876:	4630      	mov	r0, r6
 800c878:	4639      	mov	r1, r7
 800c87a:	f7f3 fd37 	bl	80002ec <__adddf3>
 800c87e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c880:	4b38      	ldr	r3, [pc, #224]	; (800c964 <__ieee754_pow+0x75c>)
 800c882:	4413      	add	r3, r2
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	f7f3 fd30 	bl	80002ec <__adddf3>
 800c88c:	4682      	mov	sl, r0
 800c88e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c890:	468b      	mov	fp, r1
 800c892:	f7f3 fe77 	bl	8000584 <__aeabi_i2d>
 800c896:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c898:	4b33      	ldr	r3, [pc, #204]	; (800c968 <__ieee754_pow+0x760>)
 800c89a:	4413      	add	r3, r2
 800c89c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c8a0:	4606      	mov	r6, r0
 800c8a2:	460f      	mov	r7, r1
 800c8a4:	4652      	mov	r2, sl
 800c8a6:	465b      	mov	r3, fp
 800c8a8:	ec51 0b18 	vmov	r0, r1, d8
 800c8ac:	f7f3 fd1e 	bl	80002ec <__adddf3>
 800c8b0:	4642      	mov	r2, r8
 800c8b2:	464b      	mov	r3, r9
 800c8b4:	f7f3 fd1a 	bl	80002ec <__adddf3>
 800c8b8:	4632      	mov	r2, r6
 800c8ba:	463b      	mov	r3, r7
 800c8bc:	f7f3 fd16 	bl	80002ec <__adddf3>
 800c8c0:	9c04      	ldr	r4, [sp, #16]
 800c8c2:	4632      	mov	r2, r6
 800c8c4:	463b      	mov	r3, r7
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	460d      	mov	r5, r1
 800c8ca:	f7f3 fd0d 	bl	80002e8 <__aeabi_dsub>
 800c8ce:	4642      	mov	r2, r8
 800c8d0:	464b      	mov	r3, r9
 800c8d2:	f7f3 fd09 	bl	80002e8 <__aeabi_dsub>
 800c8d6:	ec53 2b18 	vmov	r2, r3, d8
 800c8da:	f7f3 fd05 	bl	80002e8 <__aeabi_dsub>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	4650      	mov	r0, sl
 800c8e4:	4659      	mov	r1, fp
 800c8e6:	e606      	b.n	800c4f6 <__ieee754_pow+0x2ee>
 800c8e8:	2401      	movs	r4, #1
 800c8ea:	e6a0      	b.n	800c62e <__ieee754_pow+0x426>
 800c8ec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c940 <__ieee754_pow+0x738>
 800c8f0:	e60d      	b.n	800c50e <__ieee754_pow+0x306>
 800c8f2:	bf00      	nop
 800c8f4:	f3af 8000 	nop.w
 800c8f8:	4a454eef 	.word	0x4a454eef
 800c8fc:	3fca7e28 	.word	0x3fca7e28
 800c900:	93c9db65 	.word	0x93c9db65
 800c904:	3fcd864a 	.word	0x3fcd864a
 800c908:	a91d4101 	.word	0xa91d4101
 800c90c:	3fd17460 	.word	0x3fd17460
 800c910:	518f264d 	.word	0x518f264d
 800c914:	3fd55555 	.word	0x3fd55555
 800c918:	db6fabff 	.word	0xdb6fabff
 800c91c:	3fdb6db6 	.word	0x3fdb6db6
 800c920:	33333303 	.word	0x33333303
 800c924:	3fe33333 	.word	0x3fe33333
 800c928:	e0000000 	.word	0xe0000000
 800c92c:	3feec709 	.word	0x3feec709
 800c930:	dc3a03fd 	.word	0xdc3a03fd
 800c934:	3feec709 	.word	0x3feec709
 800c938:	145b01f5 	.word	0x145b01f5
 800c93c:	be3e2fe0 	.word	0xbe3e2fe0
 800c940:	00000000 	.word	0x00000000
 800c944:	3ff00000 	.word	0x3ff00000
 800c948:	7ff00000 	.word	0x7ff00000
 800c94c:	43400000 	.word	0x43400000
 800c950:	0003988e 	.word	0x0003988e
 800c954:	000bb679 	.word	0x000bb679
 800c958:	0800e588 	.word	0x0800e588
 800c95c:	3ff00000 	.word	0x3ff00000
 800c960:	40080000 	.word	0x40080000
 800c964:	0800e5a8 	.word	0x0800e5a8
 800c968:	0800e598 	.word	0x0800e598
 800c96c:	a3b5      	add	r3, pc, #724	; (adr r3, 800cc44 <__ieee754_pow+0xa3c>)
 800c96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c972:	4640      	mov	r0, r8
 800c974:	4649      	mov	r1, r9
 800c976:	f7f3 fcb9 	bl	80002ec <__adddf3>
 800c97a:	4622      	mov	r2, r4
 800c97c:	ec41 0b1a 	vmov	d10, r0, r1
 800c980:	462b      	mov	r3, r5
 800c982:	4630      	mov	r0, r6
 800c984:	4639      	mov	r1, r7
 800c986:	f7f3 fcaf 	bl	80002e8 <__aeabi_dsub>
 800c98a:	4602      	mov	r2, r0
 800c98c:	460b      	mov	r3, r1
 800c98e:	ec51 0b1a 	vmov	r0, r1, d10
 800c992:	f7f4 f8f1 	bl	8000b78 <__aeabi_dcmpgt>
 800c996:	2800      	cmp	r0, #0
 800c998:	f47f adf8 	bne.w	800c58c <__ieee754_pow+0x384>
 800c99c:	4aa4      	ldr	r2, [pc, #656]	; (800cc30 <__ieee754_pow+0xa28>)
 800c99e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	f340 810b 	ble.w	800cbbe <__ieee754_pow+0x9b6>
 800c9a8:	151b      	asrs	r3, r3, #20
 800c9aa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c9ae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c9b2:	fa4a f303 	asr.w	r3, sl, r3
 800c9b6:	445b      	add	r3, fp
 800c9b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c9bc:	4e9d      	ldr	r6, [pc, #628]	; (800cc34 <__ieee754_pow+0xa2c>)
 800c9be:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c9c2:	4116      	asrs	r6, r2
 800c9c4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	ea23 0106 	bic.w	r1, r3, r6
 800c9ce:	f1c2 0214 	rsb	r2, r2, #20
 800c9d2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c9d6:	fa4a fa02 	asr.w	sl, sl, r2
 800c9da:	f1bb 0f00 	cmp.w	fp, #0
 800c9de:	4602      	mov	r2, r0
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	4629      	mov	r1, r5
 800c9e6:	bfb8      	it	lt
 800c9e8:	f1ca 0a00 	rsblt	sl, sl, #0
 800c9ec:	f7f3 fc7c 	bl	80002e8 <__aeabi_dsub>
 800c9f0:	ec41 0b19 	vmov	d9, r0, r1
 800c9f4:	4642      	mov	r2, r8
 800c9f6:	464b      	mov	r3, r9
 800c9f8:	ec51 0b19 	vmov	r0, r1, d9
 800c9fc:	f7f3 fc76 	bl	80002ec <__adddf3>
 800ca00:	2400      	movs	r4, #0
 800ca02:	a379      	add	r3, pc, #484	; (adr r3, 800cbe8 <__ieee754_pow+0x9e0>)
 800ca04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca08:	4620      	mov	r0, r4
 800ca0a:	460d      	mov	r5, r1
 800ca0c:	f7f3 fe24 	bl	8000658 <__aeabi_dmul>
 800ca10:	ec53 2b19 	vmov	r2, r3, d9
 800ca14:	4606      	mov	r6, r0
 800ca16:	460f      	mov	r7, r1
 800ca18:	4620      	mov	r0, r4
 800ca1a:	4629      	mov	r1, r5
 800ca1c:	f7f3 fc64 	bl	80002e8 <__aeabi_dsub>
 800ca20:	4602      	mov	r2, r0
 800ca22:	460b      	mov	r3, r1
 800ca24:	4640      	mov	r0, r8
 800ca26:	4649      	mov	r1, r9
 800ca28:	f7f3 fc5e 	bl	80002e8 <__aeabi_dsub>
 800ca2c:	a370      	add	r3, pc, #448	; (adr r3, 800cbf0 <__ieee754_pow+0x9e8>)
 800ca2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca32:	f7f3 fe11 	bl	8000658 <__aeabi_dmul>
 800ca36:	a370      	add	r3, pc, #448	; (adr r3, 800cbf8 <__ieee754_pow+0x9f0>)
 800ca38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3c:	4680      	mov	r8, r0
 800ca3e:	4689      	mov	r9, r1
 800ca40:	4620      	mov	r0, r4
 800ca42:	4629      	mov	r1, r5
 800ca44:	f7f3 fe08 	bl	8000658 <__aeabi_dmul>
 800ca48:	4602      	mov	r2, r0
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	4640      	mov	r0, r8
 800ca4e:	4649      	mov	r1, r9
 800ca50:	f7f3 fc4c 	bl	80002ec <__adddf3>
 800ca54:	4604      	mov	r4, r0
 800ca56:	460d      	mov	r5, r1
 800ca58:	4602      	mov	r2, r0
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	4639      	mov	r1, r7
 800ca60:	f7f3 fc44 	bl	80002ec <__adddf3>
 800ca64:	4632      	mov	r2, r6
 800ca66:	463b      	mov	r3, r7
 800ca68:	4680      	mov	r8, r0
 800ca6a:	4689      	mov	r9, r1
 800ca6c:	f7f3 fc3c 	bl	80002e8 <__aeabi_dsub>
 800ca70:	4602      	mov	r2, r0
 800ca72:	460b      	mov	r3, r1
 800ca74:	4620      	mov	r0, r4
 800ca76:	4629      	mov	r1, r5
 800ca78:	f7f3 fc36 	bl	80002e8 <__aeabi_dsub>
 800ca7c:	4642      	mov	r2, r8
 800ca7e:	4606      	mov	r6, r0
 800ca80:	460f      	mov	r7, r1
 800ca82:	464b      	mov	r3, r9
 800ca84:	4640      	mov	r0, r8
 800ca86:	4649      	mov	r1, r9
 800ca88:	f7f3 fde6 	bl	8000658 <__aeabi_dmul>
 800ca8c:	a35c      	add	r3, pc, #368	; (adr r3, 800cc00 <__ieee754_pow+0x9f8>)
 800ca8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca92:	4604      	mov	r4, r0
 800ca94:	460d      	mov	r5, r1
 800ca96:	f7f3 fddf 	bl	8000658 <__aeabi_dmul>
 800ca9a:	a35b      	add	r3, pc, #364	; (adr r3, 800cc08 <__ieee754_pow+0xa00>)
 800ca9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa0:	f7f3 fc22 	bl	80002e8 <__aeabi_dsub>
 800caa4:	4622      	mov	r2, r4
 800caa6:	462b      	mov	r3, r5
 800caa8:	f7f3 fdd6 	bl	8000658 <__aeabi_dmul>
 800caac:	a358      	add	r3, pc, #352	; (adr r3, 800cc10 <__ieee754_pow+0xa08>)
 800caae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab2:	f7f3 fc1b 	bl	80002ec <__adddf3>
 800cab6:	4622      	mov	r2, r4
 800cab8:	462b      	mov	r3, r5
 800caba:	f7f3 fdcd 	bl	8000658 <__aeabi_dmul>
 800cabe:	a356      	add	r3, pc, #344	; (adr r3, 800cc18 <__ieee754_pow+0xa10>)
 800cac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac4:	f7f3 fc10 	bl	80002e8 <__aeabi_dsub>
 800cac8:	4622      	mov	r2, r4
 800caca:	462b      	mov	r3, r5
 800cacc:	f7f3 fdc4 	bl	8000658 <__aeabi_dmul>
 800cad0:	a353      	add	r3, pc, #332	; (adr r3, 800cc20 <__ieee754_pow+0xa18>)
 800cad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad6:	f7f3 fc09 	bl	80002ec <__adddf3>
 800cada:	4622      	mov	r2, r4
 800cadc:	462b      	mov	r3, r5
 800cade:	f7f3 fdbb 	bl	8000658 <__aeabi_dmul>
 800cae2:	4602      	mov	r2, r0
 800cae4:	460b      	mov	r3, r1
 800cae6:	4640      	mov	r0, r8
 800cae8:	4649      	mov	r1, r9
 800caea:	f7f3 fbfd 	bl	80002e8 <__aeabi_dsub>
 800caee:	4604      	mov	r4, r0
 800caf0:	460d      	mov	r5, r1
 800caf2:	4602      	mov	r2, r0
 800caf4:	460b      	mov	r3, r1
 800caf6:	4640      	mov	r0, r8
 800caf8:	4649      	mov	r1, r9
 800cafa:	f7f3 fdad 	bl	8000658 <__aeabi_dmul>
 800cafe:	2200      	movs	r2, #0
 800cb00:	ec41 0b19 	vmov	d9, r0, r1
 800cb04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb08:	4620      	mov	r0, r4
 800cb0a:	4629      	mov	r1, r5
 800cb0c:	f7f3 fbec 	bl	80002e8 <__aeabi_dsub>
 800cb10:	4602      	mov	r2, r0
 800cb12:	460b      	mov	r3, r1
 800cb14:	ec51 0b19 	vmov	r0, r1, d9
 800cb18:	f7f3 fec8 	bl	80008ac <__aeabi_ddiv>
 800cb1c:	4632      	mov	r2, r6
 800cb1e:	4604      	mov	r4, r0
 800cb20:	460d      	mov	r5, r1
 800cb22:	463b      	mov	r3, r7
 800cb24:	4640      	mov	r0, r8
 800cb26:	4649      	mov	r1, r9
 800cb28:	f7f3 fd96 	bl	8000658 <__aeabi_dmul>
 800cb2c:	4632      	mov	r2, r6
 800cb2e:	463b      	mov	r3, r7
 800cb30:	f7f3 fbdc 	bl	80002ec <__adddf3>
 800cb34:	4602      	mov	r2, r0
 800cb36:	460b      	mov	r3, r1
 800cb38:	4620      	mov	r0, r4
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	f7f3 fbd4 	bl	80002e8 <__aeabi_dsub>
 800cb40:	4642      	mov	r2, r8
 800cb42:	464b      	mov	r3, r9
 800cb44:	f7f3 fbd0 	bl	80002e8 <__aeabi_dsub>
 800cb48:	460b      	mov	r3, r1
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	493a      	ldr	r1, [pc, #232]	; (800cc38 <__ieee754_pow+0xa30>)
 800cb4e:	2000      	movs	r0, #0
 800cb50:	f7f3 fbca 	bl	80002e8 <__aeabi_dsub>
 800cb54:	e9cd 0100 	strd	r0, r1, [sp]
 800cb58:	9b01      	ldr	r3, [sp, #4]
 800cb5a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cb5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb62:	da2f      	bge.n	800cbc4 <__ieee754_pow+0x9bc>
 800cb64:	4650      	mov	r0, sl
 800cb66:	ed9d 0b00 	vldr	d0, [sp]
 800cb6a:	f001 f911 	bl	800dd90 <scalbn>
 800cb6e:	ec51 0b10 	vmov	r0, r1, d0
 800cb72:	ec53 2b18 	vmov	r2, r3, d8
 800cb76:	f7ff bbe0 	b.w	800c33a <__ieee754_pow+0x132>
 800cb7a:	4b30      	ldr	r3, [pc, #192]	; (800cc3c <__ieee754_pow+0xa34>)
 800cb7c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cb80:	429e      	cmp	r6, r3
 800cb82:	f77f af0b 	ble.w	800c99c <__ieee754_pow+0x794>
 800cb86:	4b2e      	ldr	r3, [pc, #184]	; (800cc40 <__ieee754_pow+0xa38>)
 800cb88:	440b      	add	r3, r1
 800cb8a:	4303      	orrs	r3, r0
 800cb8c:	d00b      	beq.n	800cba6 <__ieee754_pow+0x99e>
 800cb8e:	a326      	add	r3, pc, #152	; (adr r3, 800cc28 <__ieee754_pow+0xa20>)
 800cb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb94:	ec51 0b18 	vmov	r0, r1, d8
 800cb98:	f7f3 fd5e 	bl	8000658 <__aeabi_dmul>
 800cb9c:	a322      	add	r3, pc, #136	; (adr r3, 800cc28 <__ieee754_pow+0xa20>)
 800cb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba2:	f7ff bbca 	b.w	800c33a <__ieee754_pow+0x132>
 800cba6:	4622      	mov	r2, r4
 800cba8:	462b      	mov	r3, r5
 800cbaa:	f7f3 fb9d 	bl	80002e8 <__aeabi_dsub>
 800cbae:	4642      	mov	r2, r8
 800cbb0:	464b      	mov	r3, r9
 800cbb2:	f7f3 ffd7 	bl	8000b64 <__aeabi_dcmpge>
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	f43f aef0 	beq.w	800c99c <__ieee754_pow+0x794>
 800cbbc:	e7e7      	b.n	800cb8e <__ieee754_pow+0x986>
 800cbbe:	f04f 0a00 	mov.w	sl, #0
 800cbc2:	e717      	b.n	800c9f4 <__ieee754_pow+0x7ec>
 800cbc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbc8:	4619      	mov	r1, r3
 800cbca:	e7d2      	b.n	800cb72 <__ieee754_pow+0x96a>
 800cbcc:	491a      	ldr	r1, [pc, #104]	; (800cc38 <__ieee754_pow+0xa30>)
 800cbce:	2000      	movs	r0, #0
 800cbd0:	f7ff bb9e 	b.w	800c310 <__ieee754_pow+0x108>
 800cbd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbd8:	f7ff bb9a 	b.w	800c310 <__ieee754_pow+0x108>
 800cbdc:	9000      	str	r0, [sp, #0]
 800cbde:	f7ff bb76 	b.w	800c2ce <__ieee754_pow+0xc6>
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	f7ff bb60 	b.w	800c2a8 <__ieee754_pow+0xa0>
 800cbe8:	00000000 	.word	0x00000000
 800cbec:	3fe62e43 	.word	0x3fe62e43
 800cbf0:	fefa39ef 	.word	0xfefa39ef
 800cbf4:	3fe62e42 	.word	0x3fe62e42
 800cbf8:	0ca86c39 	.word	0x0ca86c39
 800cbfc:	be205c61 	.word	0xbe205c61
 800cc00:	72bea4d0 	.word	0x72bea4d0
 800cc04:	3e663769 	.word	0x3e663769
 800cc08:	c5d26bf1 	.word	0xc5d26bf1
 800cc0c:	3ebbbd41 	.word	0x3ebbbd41
 800cc10:	af25de2c 	.word	0xaf25de2c
 800cc14:	3f11566a 	.word	0x3f11566a
 800cc18:	16bebd93 	.word	0x16bebd93
 800cc1c:	3f66c16c 	.word	0x3f66c16c
 800cc20:	5555553e 	.word	0x5555553e
 800cc24:	3fc55555 	.word	0x3fc55555
 800cc28:	c2f8f359 	.word	0xc2f8f359
 800cc2c:	01a56e1f 	.word	0x01a56e1f
 800cc30:	3fe00000 	.word	0x3fe00000
 800cc34:	000fffff 	.word	0x000fffff
 800cc38:	3ff00000 	.word	0x3ff00000
 800cc3c:	4090cbff 	.word	0x4090cbff
 800cc40:	3f6f3400 	.word	0x3f6f3400
 800cc44:	652b82fe 	.word	0x652b82fe
 800cc48:	3c971547 	.word	0x3c971547
 800cc4c:	00000000 	.word	0x00000000

0800cc50 <__ieee754_rem_pio2>:
 800cc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc54:	ed2d 8b02 	vpush	{d8}
 800cc58:	ec55 4b10 	vmov	r4, r5, d0
 800cc5c:	4bca      	ldr	r3, [pc, #808]	; (800cf88 <__ieee754_rem_pio2+0x338>)
 800cc5e:	b08b      	sub	sp, #44	; 0x2c
 800cc60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cc64:	4598      	cmp	r8, r3
 800cc66:	4682      	mov	sl, r0
 800cc68:	9502      	str	r5, [sp, #8]
 800cc6a:	dc08      	bgt.n	800cc7e <__ieee754_rem_pio2+0x2e>
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	2300      	movs	r3, #0
 800cc70:	ed80 0b00 	vstr	d0, [r0]
 800cc74:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cc78:	f04f 0b00 	mov.w	fp, #0
 800cc7c:	e028      	b.n	800ccd0 <__ieee754_rem_pio2+0x80>
 800cc7e:	4bc3      	ldr	r3, [pc, #780]	; (800cf8c <__ieee754_rem_pio2+0x33c>)
 800cc80:	4598      	cmp	r8, r3
 800cc82:	dc78      	bgt.n	800cd76 <__ieee754_rem_pio2+0x126>
 800cc84:	9b02      	ldr	r3, [sp, #8]
 800cc86:	4ec2      	ldr	r6, [pc, #776]	; (800cf90 <__ieee754_rem_pio2+0x340>)
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	ee10 0a10 	vmov	r0, s0
 800cc8e:	a3b0      	add	r3, pc, #704	; (adr r3, 800cf50 <__ieee754_rem_pio2+0x300>)
 800cc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc94:	4629      	mov	r1, r5
 800cc96:	dd39      	ble.n	800cd0c <__ieee754_rem_pio2+0xbc>
 800cc98:	f7f3 fb26 	bl	80002e8 <__aeabi_dsub>
 800cc9c:	45b0      	cmp	r8, r6
 800cc9e:	4604      	mov	r4, r0
 800cca0:	460d      	mov	r5, r1
 800cca2:	d01b      	beq.n	800ccdc <__ieee754_rem_pio2+0x8c>
 800cca4:	a3ac      	add	r3, pc, #688	; (adr r3, 800cf58 <__ieee754_rem_pio2+0x308>)
 800cca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccaa:	f7f3 fb1d 	bl	80002e8 <__aeabi_dsub>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	e9ca 2300 	strd	r2, r3, [sl]
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	4629      	mov	r1, r5
 800ccba:	f7f3 fb15 	bl	80002e8 <__aeabi_dsub>
 800ccbe:	a3a6      	add	r3, pc, #664	; (adr r3, 800cf58 <__ieee754_rem_pio2+0x308>)
 800ccc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc4:	f7f3 fb10 	bl	80002e8 <__aeabi_dsub>
 800ccc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cccc:	f04f 0b01 	mov.w	fp, #1
 800ccd0:	4658      	mov	r0, fp
 800ccd2:	b00b      	add	sp, #44	; 0x2c
 800ccd4:	ecbd 8b02 	vpop	{d8}
 800ccd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccdc:	a3a0      	add	r3, pc, #640	; (adr r3, 800cf60 <__ieee754_rem_pio2+0x310>)
 800ccde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce2:	f7f3 fb01 	bl	80002e8 <__aeabi_dsub>
 800cce6:	a3a0      	add	r3, pc, #640	; (adr r3, 800cf68 <__ieee754_rem_pio2+0x318>)
 800cce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccec:	4604      	mov	r4, r0
 800ccee:	460d      	mov	r5, r1
 800ccf0:	f7f3 fafa 	bl	80002e8 <__aeabi_dsub>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	e9ca 2300 	strd	r2, r3, [sl]
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	4629      	mov	r1, r5
 800cd00:	f7f3 faf2 	bl	80002e8 <__aeabi_dsub>
 800cd04:	a398      	add	r3, pc, #608	; (adr r3, 800cf68 <__ieee754_rem_pio2+0x318>)
 800cd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0a:	e7db      	b.n	800ccc4 <__ieee754_rem_pio2+0x74>
 800cd0c:	f7f3 faee 	bl	80002ec <__adddf3>
 800cd10:	45b0      	cmp	r8, r6
 800cd12:	4604      	mov	r4, r0
 800cd14:	460d      	mov	r5, r1
 800cd16:	d016      	beq.n	800cd46 <__ieee754_rem_pio2+0xf6>
 800cd18:	a38f      	add	r3, pc, #572	; (adr r3, 800cf58 <__ieee754_rem_pio2+0x308>)
 800cd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1e:	f7f3 fae5 	bl	80002ec <__adddf3>
 800cd22:	4602      	mov	r2, r0
 800cd24:	460b      	mov	r3, r1
 800cd26:	e9ca 2300 	strd	r2, r3, [sl]
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	f7f3 fadb 	bl	80002e8 <__aeabi_dsub>
 800cd32:	a389      	add	r3, pc, #548	; (adr r3, 800cf58 <__ieee754_rem_pio2+0x308>)
 800cd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd38:	f7f3 fad8 	bl	80002ec <__adddf3>
 800cd3c:	f04f 3bff 	mov.w	fp, #4294967295
 800cd40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cd44:	e7c4      	b.n	800ccd0 <__ieee754_rem_pio2+0x80>
 800cd46:	a386      	add	r3, pc, #536	; (adr r3, 800cf60 <__ieee754_rem_pio2+0x310>)
 800cd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4c:	f7f3 face 	bl	80002ec <__adddf3>
 800cd50:	a385      	add	r3, pc, #532	; (adr r3, 800cf68 <__ieee754_rem_pio2+0x318>)
 800cd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd56:	4604      	mov	r4, r0
 800cd58:	460d      	mov	r5, r1
 800cd5a:	f7f3 fac7 	bl	80002ec <__adddf3>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	460b      	mov	r3, r1
 800cd62:	e9ca 2300 	strd	r2, r3, [sl]
 800cd66:	4620      	mov	r0, r4
 800cd68:	4629      	mov	r1, r5
 800cd6a:	f7f3 fabd 	bl	80002e8 <__aeabi_dsub>
 800cd6e:	a37e      	add	r3, pc, #504	; (adr r3, 800cf68 <__ieee754_rem_pio2+0x318>)
 800cd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd74:	e7e0      	b.n	800cd38 <__ieee754_rem_pio2+0xe8>
 800cd76:	4b87      	ldr	r3, [pc, #540]	; (800cf94 <__ieee754_rem_pio2+0x344>)
 800cd78:	4598      	cmp	r8, r3
 800cd7a:	f300 80d9 	bgt.w	800cf30 <__ieee754_rem_pio2+0x2e0>
 800cd7e:	f7fe fee7 	bl	800bb50 <fabs>
 800cd82:	ec55 4b10 	vmov	r4, r5, d0
 800cd86:	ee10 0a10 	vmov	r0, s0
 800cd8a:	a379      	add	r3, pc, #484	; (adr r3, 800cf70 <__ieee754_rem_pio2+0x320>)
 800cd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd90:	4629      	mov	r1, r5
 800cd92:	f7f3 fc61 	bl	8000658 <__aeabi_dmul>
 800cd96:	4b80      	ldr	r3, [pc, #512]	; (800cf98 <__ieee754_rem_pio2+0x348>)
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f7f3 faa7 	bl	80002ec <__adddf3>
 800cd9e:	f7f3 ff0b 	bl	8000bb8 <__aeabi_d2iz>
 800cda2:	4683      	mov	fp, r0
 800cda4:	f7f3 fbee 	bl	8000584 <__aeabi_i2d>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	460b      	mov	r3, r1
 800cdac:	ec43 2b18 	vmov	d8, r2, r3
 800cdb0:	a367      	add	r3, pc, #412	; (adr r3, 800cf50 <__ieee754_rem_pio2+0x300>)
 800cdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb6:	f7f3 fc4f 	bl	8000658 <__aeabi_dmul>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	460b      	mov	r3, r1
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	4629      	mov	r1, r5
 800cdc2:	f7f3 fa91 	bl	80002e8 <__aeabi_dsub>
 800cdc6:	a364      	add	r3, pc, #400	; (adr r3, 800cf58 <__ieee754_rem_pio2+0x308>)
 800cdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdcc:	4606      	mov	r6, r0
 800cdce:	460f      	mov	r7, r1
 800cdd0:	ec51 0b18 	vmov	r0, r1, d8
 800cdd4:	f7f3 fc40 	bl	8000658 <__aeabi_dmul>
 800cdd8:	f1bb 0f1f 	cmp.w	fp, #31
 800cddc:	4604      	mov	r4, r0
 800cdde:	460d      	mov	r5, r1
 800cde0:	dc0d      	bgt.n	800cdfe <__ieee754_rem_pio2+0x1ae>
 800cde2:	4b6e      	ldr	r3, [pc, #440]	; (800cf9c <__ieee754_rem_pio2+0x34c>)
 800cde4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800cde8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdec:	4543      	cmp	r3, r8
 800cdee:	d006      	beq.n	800cdfe <__ieee754_rem_pio2+0x1ae>
 800cdf0:	4622      	mov	r2, r4
 800cdf2:	462b      	mov	r3, r5
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	4639      	mov	r1, r7
 800cdf8:	f7f3 fa76 	bl	80002e8 <__aeabi_dsub>
 800cdfc:	e00f      	b.n	800ce1e <__ieee754_rem_pio2+0x1ce>
 800cdfe:	462b      	mov	r3, r5
 800ce00:	4622      	mov	r2, r4
 800ce02:	4630      	mov	r0, r6
 800ce04:	4639      	mov	r1, r7
 800ce06:	f7f3 fa6f 	bl	80002e8 <__aeabi_dsub>
 800ce0a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ce0e:	9303      	str	r3, [sp, #12]
 800ce10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ce14:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ce18:	f1b8 0f10 	cmp.w	r8, #16
 800ce1c:	dc02      	bgt.n	800ce24 <__ieee754_rem_pio2+0x1d4>
 800ce1e:	e9ca 0100 	strd	r0, r1, [sl]
 800ce22:	e039      	b.n	800ce98 <__ieee754_rem_pio2+0x248>
 800ce24:	a34e      	add	r3, pc, #312	; (adr r3, 800cf60 <__ieee754_rem_pio2+0x310>)
 800ce26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2a:	ec51 0b18 	vmov	r0, r1, d8
 800ce2e:	f7f3 fc13 	bl	8000658 <__aeabi_dmul>
 800ce32:	4604      	mov	r4, r0
 800ce34:	460d      	mov	r5, r1
 800ce36:	4602      	mov	r2, r0
 800ce38:	460b      	mov	r3, r1
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	4639      	mov	r1, r7
 800ce3e:	f7f3 fa53 	bl	80002e8 <__aeabi_dsub>
 800ce42:	4602      	mov	r2, r0
 800ce44:	460b      	mov	r3, r1
 800ce46:	4680      	mov	r8, r0
 800ce48:	4689      	mov	r9, r1
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	4639      	mov	r1, r7
 800ce4e:	f7f3 fa4b 	bl	80002e8 <__aeabi_dsub>
 800ce52:	4622      	mov	r2, r4
 800ce54:	462b      	mov	r3, r5
 800ce56:	f7f3 fa47 	bl	80002e8 <__aeabi_dsub>
 800ce5a:	a343      	add	r3, pc, #268	; (adr r3, 800cf68 <__ieee754_rem_pio2+0x318>)
 800ce5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce60:	4604      	mov	r4, r0
 800ce62:	460d      	mov	r5, r1
 800ce64:	ec51 0b18 	vmov	r0, r1, d8
 800ce68:	f7f3 fbf6 	bl	8000658 <__aeabi_dmul>
 800ce6c:	4622      	mov	r2, r4
 800ce6e:	462b      	mov	r3, r5
 800ce70:	f7f3 fa3a 	bl	80002e8 <__aeabi_dsub>
 800ce74:	4602      	mov	r2, r0
 800ce76:	460b      	mov	r3, r1
 800ce78:	4604      	mov	r4, r0
 800ce7a:	460d      	mov	r5, r1
 800ce7c:	4640      	mov	r0, r8
 800ce7e:	4649      	mov	r1, r9
 800ce80:	f7f3 fa32 	bl	80002e8 <__aeabi_dsub>
 800ce84:	9a03      	ldr	r2, [sp, #12]
 800ce86:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ce8a:	1ad3      	subs	r3, r2, r3
 800ce8c:	2b31      	cmp	r3, #49	; 0x31
 800ce8e:	dc24      	bgt.n	800ceda <__ieee754_rem_pio2+0x28a>
 800ce90:	e9ca 0100 	strd	r0, r1, [sl]
 800ce94:	4646      	mov	r6, r8
 800ce96:	464f      	mov	r7, r9
 800ce98:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	4642      	mov	r2, r8
 800cea0:	464b      	mov	r3, r9
 800cea2:	4639      	mov	r1, r7
 800cea4:	f7f3 fa20 	bl	80002e8 <__aeabi_dsub>
 800cea8:	462b      	mov	r3, r5
 800ceaa:	4622      	mov	r2, r4
 800ceac:	f7f3 fa1c 	bl	80002e8 <__aeabi_dsub>
 800ceb0:	9b02      	ldr	r3, [sp, #8]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ceb8:	f6bf af0a 	bge.w	800ccd0 <__ieee754_rem_pio2+0x80>
 800cebc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cec0:	f8ca 3004 	str.w	r3, [sl, #4]
 800cec4:	f8ca 8000 	str.w	r8, [sl]
 800cec8:	f8ca 0008 	str.w	r0, [sl, #8]
 800cecc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ced0:	f8ca 300c 	str.w	r3, [sl, #12]
 800ced4:	f1cb 0b00 	rsb	fp, fp, #0
 800ced8:	e6fa      	b.n	800ccd0 <__ieee754_rem_pio2+0x80>
 800ceda:	a327      	add	r3, pc, #156	; (adr r3, 800cf78 <__ieee754_rem_pio2+0x328>)
 800cedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee0:	ec51 0b18 	vmov	r0, r1, d8
 800cee4:	f7f3 fbb8 	bl	8000658 <__aeabi_dmul>
 800cee8:	4604      	mov	r4, r0
 800ceea:	460d      	mov	r5, r1
 800ceec:	4602      	mov	r2, r0
 800ceee:	460b      	mov	r3, r1
 800cef0:	4640      	mov	r0, r8
 800cef2:	4649      	mov	r1, r9
 800cef4:	f7f3 f9f8 	bl	80002e8 <__aeabi_dsub>
 800cef8:	4602      	mov	r2, r0
 800cefa:	460b      	mov	r3, r1
 800cefc:	4606      	mov	r6, r0
 800cefe:	460f      	mov	r7, r1
 800cf00:	4640      	mov	r0, r8
 800cf02:	4649      	mov	r1, r9
 800cf04:	f7f3 f9f0 	bl	80002e8 <__aeabi_dsub>
 800cf08:	4622      	mov	r2, r4
 800cf0a:	462b      	mov	r3, r5
 800cf0c:	f7f3 f9ec 	bl	80002e8 <__aeabi_dsub>
 800cf10:	a31b      	add	r3, pc, #108	; (adr r3, 800cf80 <__ieee754_rem_pio2+0x330>)
 800cf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf16:	4604      	mov	r4, r0
 800cf18:	460d      	mov	r5, r1
 800cf1a:	ec51 0b18 	vmov	r0, r1, d8
 800cf1e:	f7f3 fb9b 	bl	8000658 <__aeabi_dmul>
 800cf22:	4622      	mov	r2, r4
 800cf24:	462b      	mov	r3, r5
 800cf26:	f7f3 f9df 	bl	80002e8 <__aeabi_dsub>
 800cf2a:	4604      	mov	r4, r0
 800cf2c:	460d      	mov	r5, r1
 800cf2e:	e75f      	b.n	800cdf0 <__ieee754_rem_pio2+0x1a0>
 800cf30:	4b1b      	ldr	r3, [pc, #108]	; (800cfa0 <__ieee754_rem_pio2+0x350>)
 800cf32:	4598      	cmp	r8, r3
 800cf34:	dd36      	ble.n	800cfa4 <__ieee754_rem_pio2+0x354>
 800cf36:	ee10 2a10 	vmov	r2, s0
 800cf3a:	462b      	mov	r3, r5
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	4629      	mov	r1, r5
 800cf40:	f7f3 f9d2 	bl	80002e8 <__aeabi_dsub>
 800cf44:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cf48:	e9ca 0100 	strd	r0, r1, [sl]
 800cf4c:	e694      	b.n	800cc78 <__ieee754_rem_pio2+0x28>
 800cf4e:	bf00      	nop
 800cf50:	54400000 	.word	0x54400000
 800cf54:	3ff921fb 	.word	0x3ff921fb
 800cf58:	1a626331 	.word	0x1a626331
 800cf5c:	3dd0b461 	.word	0x3dd0b461
 800cf60:	1a600000 	.word	0x1a600000
 800cf64:	3dd0b461 	.word	0x3dd0b461
 800cf68:	2e037073 	.word	0x2e037073
 800cf6c:	3ba3198a 	.word	0x3ba3198a
 800cf70:	6dc9c883 	.word	0x6dc9c883
 800cf74:	3fe45f30 	.word	0x3fe45f30
 800cf78:	2e000000 	.word	0x2e000000
 800cf7c:	3ba3198a 	.word	0x3ba3198a
 800cf80:	252049c1 	.word	0x252049c1
 800cf84:	397b839a 	.word	0x397b839a
 800cf88:	3fe921fb 	.word	0x3fe921fb
 800cf8c:	4002d97b 	.word	0x4002d97b
 800cf90:	3ff921fb 	.word	0x3ff921fb
 800cf94:	413921fb 	.word	0x413921fb
 800cf98:	3fe00000 	.word	0x3fe00000
 800cf9c:	0800e5b8 	.word	0x0800e5b8
 800cfa0:	7fefffff 	.word	0x7fefffff
 800cfa4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800cfa8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800cfac:	ee10 0a10 	vmov	r0, s0
 800cfb0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800cfb4:	ee10 6a10 	vmov	r6, s0
 800cfb8:	460f      	mov	r7, r1
 800cfba:	f7f3 fdfd 	bl	8000bb8 <__aeabi_d2iz>
 800cfbe:	f7f3 fae1 	bl	8000584 <__aeabi_i2d>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	4639      	mov	r1, r7
 800cfca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cfce:	f7f3 f98b 	bl	80002e8 <__aeabi_dsub>
 800cfd2:	4b22      	ldr	r3, [pc, #136]	; (800d05c <__ieee754_rem_pio2+0x40c>)
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f7f3 fb3f 	bl	8000658 <__aeabi_dmul>
 800cfda:	460f      	mov	r7, r1
 800cfdc:	4606      	mov	r6, r0
 800cfde:	f7f3 fdeb 	bl	8000bb8 <__aeabi_d2iz>
 800cfe2:	f7f3 facf 	bl	8000584 <__aeabi_i2d>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	460b      	mov	r3, r1
 800cfea:	4630      	mov	r0, r6
 800cfec:	4639      	mov	r1, r7
 800cfee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cff2:	f7f3 f979 	bl	80002e8 <__aeabi_dsub>
 800cff6:	4b19      	ldr	r3, [pc, #100]	; (800d05c <__ieee754_rem_pio2+0x40c>)
 800cff8:	2200      	movs	r2, #0
 800cffa:	f7f3 fb2d 	bl	8000658 <__aeabi_dmul>
 800cffe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d002:	ad04      	add	r5, sp, #16
 800d004:	f04f 0803 	mov.w	r8, #3
 800d008:	46a9      	mov	r9, r5
 800d00a:	2600      	movs	r6, #0
 800d00c:	2700      	movs	r7, #0
 800d00e:	4632      	mov	r2, r6
 800d010:	463b      	mov	r3, r7
 800d012:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d016:	46c3      	mov	fp, r8
 800d018:	3d08      	subs	r5, #8
 800d01a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d01e:	f7f3 fd83 	bl	8000b28 <__aeabi_dcmpeq>
 800d022:	2800      	cmp	r0, #0
 800d024:	d1f3      	bne.n	800d00e <__ieee754_rem_pio2+0x3be>
 800d026:	4b0e      	ldr	r3, [pc, #56]	; (800d060 <__ieee754_rem_pio2+0x410>)
 800d028:	9301      	str	r3, [sp, #4]
 800d02a:	2302      	movs	r3, #2
 800d02c:	9300      	str	r3, [sp, #0]
 800d02e:	4622      	mov	r2, r4
 800d030:	465b      	mov	r3, fp
 800d032:	4651      	mov	r1, sl
 800d034:	4648      	mov	r0, r9
 800d036:	f000 f993 	bl	800d360 <__kernel_rem_pio2>
 800d03a:	9b02      	ldr	r3, [sp, #8]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	4683      	mov	fp, r0
 800d040:	f6bf ae46 	bge.w	800ccd0 <__ieee754_rem_pio2+0x80>
 800d044:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d048:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d04c:	f8ca 3004 	str.w	r3, [sl, #4]
 800d050:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d054:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d058:	e73a      	b.n	800ced0 <__ieee754_rem_pio2+0x280>
 800d05a:	bf00      	nop
 800d05c:	41700000 	.word	0x41700000
 800d060:	0800e638 	.word	0x0800e638

0800d064 <__ieee754_sqrt>:
 800d064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d068:	ec55 4b10 	vmov	r4, r5, d0
 800d06c:	4e56      	ldr	r6, [pc, #344]	; (800d1c8 <__ieee754_sqrt+0x164>)
 800d06e:	43ae      	bics	r6, r5
 800d070:	ee10 0a10 	vmov	r0, s0
 800d074:	ee10 3a10 	vmov	r3, s0
 800d078:	4629      	mov	r1, r5
 800d07a:	462a      	mov	r2, r5
 800d07c:	d110      	bne.n	800d0a0 <__ieee754_sqrt+0x3c>
 800d07e:	ee10 2a10 	vmov	r2, s0
 800d082:	462b      	mov	r3, r5
 800d084:	f7f3 fae8 	bl	8000658 <__aeabi_dmul>
 800d088:	4602      	mov	r2, r0
 800d08a:	460b      	mov	r3, r1
 800d08c:	4620      	mov	r0, r4
 800d08e:	4629      	mov	r1, r5
 800d090:	f7f3 f92c 	bl	80002ec <__adddf3>
 800d094:	4604      	mov	r4, r0
 800d096:	460d      	mov	r5, r1
 800d098:	ec45 4b10 	vmov	d0, r4, r5
 800d09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0a0:	2d00      	cmp	r5, #0
 800d0a2:	dc10      	bgt.n	800d0c6 <__ieee754_sqrt+0x62>
 800d0a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d0a8:	4330      	orrs	r0, r6
 800d0aa:	d0f5      	beq.n	800d098 <__ieee754_sqrt+0x34>
 800d0ac:	b15d      	cbz	r5, 800d0c6 <__ieee754_sqrt+0x62>
 800d0ae:	ee10 2a10 	vmov	r2, s0
 800d0b2:	462b      	mov	r3, r5
 800d0b4:	ee10 0a10 	vmov	r0, s0
 800d0b8:	f7f3 f916 	bl	80002e8 <__aeabi_dsub>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	460b      	mov	r3, r1
 800d0c0:	f7f3 fbf4 	bl	80008ac <__aeabi_ddiv>
 800d0c4:	e7e6      	b.n	800d094 <__ieee754_sqrt+0x30>
 800d0c6:	1509      	asrs	r1, r1, #20
 800d0c8:	d076      	beq.n	800d1b8 <__ieee754_sqrt+0x154>
 800d0ca:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d0ce:	07ce      	lsls	r6, r1, #31
 800d0d0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800d0d4:	bf5e      	ittt	pl
 800d0d6:	0fda      	lsrpl	r2, r3, #31
 800d0d8:	005b      	lslpl	r3, r3, #1
 800d0da:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800d0de:	0fda      	lsrs	r2, r3, #31
 800d0e0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800d0e4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800d0e8:	2000      	movs	r0, #0
 800d0ea:	106d      	asrs	r5, r5, #1
 800d0ec:	005b      	lsls	r3, r3, #1
 800d0ee:	f04f 0e16 	mov.w	lr, #22
 800d0f2:	4684      	mov	ip, r0
 800d0f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d0f8:	eb0c 0401 	add.w	r4, ip, r1
 800d0fc:	4294      	cmp	r4, r2
 800d0fe:	bfde      	ittt	le
 800d100:	1b12      	suble	r2, r2, r4
 800d102:	eb04 0c01 	addle.w	ip, r4, r1
 800d106:	1840      	addle	r0, r0, r1
 800d108:	0052      	lsls	r2, r2, #1
 800d10a:	f1be 0e01 	subs.w	lr, lr, #1
 800d10e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d112:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d116:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d11a:	d1ed      	bne.n	800d0f8 <__ieee754_sqrt+0x94>
 800d11c:	4671      	mov	r1, lr
 800d11e:	2720      	movs	r7, #32
 800d120:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d124:	4562      	cmp	r2, ip
 800d126:	eb04 060e 	add.w	r6, r4, lr
 800d12a:	dc02      	bgt.n	800d132 <__ieee754_sqrt+0xce>
 800d12c:	d113      	bne.n	800d156 <__ieee754_sqrt+0xf2>
 800d12e:	429e      	cmp	r6, r3
 800d130:	d811      	bhi.n	800d156 <__ieee754_sqrt+0xf2>
 800d132:	2e00      	cmp	r6, #0
 800d134:	eb06 0e04 	add.w	lr, r6, r4
 800d138:	da43      	bge.n	800d1c2 <__ieee754_sqrt+0x15e>
 800d13a:	f1be 0f00 	cmp.w	lr, #0
 800d13e:	db40      	blt.n	800d1c2 <__ieee754_sqrt+0x15e>
 800d140:	f10c 0801 	add.w	r8, ip, #1
 800d144:	eba2 020c 	sub.w	r2, r2, ip
 800d148:	429e      	cmp	r6, r3
 800d14a:	bf88      	it	hi
 800d14c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d150:	1b9b      	subs	r3, r3, r6
 800d152:	4421      	add	r1, r4
 800d154:	46c4      	mov	ip, r8
 800d156:	0052      	lsls	r2, r2, #1
 800d158:	3f01      	subs	r7, #1
 800d15a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d15e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d162:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d166:	d1dd      	bne.n	800d124 <__ieee754_sqrt+0xc0>
 800d168:	4313      	orrs	r3, r2
 800d16a:	d006      	beq.n	800d17a <__ieee754_sqrt+0x116>
 800d16c:	1c4c      	adds	r4, r1, #1
 800d16e:	bf13      	iteet	ne
 800d170:	3101      	addne	r1, #1
 800d172:	3001      	addeq	r0, #1
 800d174:	4639      	moveq	r1, r7
 800d176:	f021 0101 	bicne.w	r1, r1, #1
 800d17a:	1043      	asrs	r3, r0, #1
 800d17c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d180:	0849      	lsrs	r1, r1, #1
 800d182:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d186:	07c2      	lsls	r2, r0, #31
 800d188:	bf48      	it	mi
 800d18a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800d18e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800d192:	460c      	mov	r4, r1
 800d194:	463d      	mov	r5, r7
 800d196:	e77f      	b.n	800d098 <__ieee754_sqrt+0x34>
 800d198:	0ada      	lsrs	r2, r3, #11
 800d19a:	3815      	subs	r0, #21
 800d19c:	055b      	lsls	r3, r3, #21
 800d19e:	2a00      	cmp	r2, #0
 800d1a0:	d0fa      	beq.n	800d198 <__ieee754_sqrt+0x134>
 800d1a2:	02d7      	lsls	r7, r2, #11
 800d1a4:	d50a      	bpl.n	800d1bc <__ieee754_sqrt+0x158>
 800d1a6:	f1c1 0420 	rsb	r4, r1, #32
 800d1aa:	fa23 f404 	lsr.w	r4, r3, r4
 800d1ae:	1e4d      	subs	r5, r1, #1
 800d1b0:	408b      	lsls	r3, r1
 800d1b2:	4322      	orrs	r2, r4
 800d1b4:	1b41      	subs	r1, r0, r5
 800d1b6:	e788      	b.n	800d0ca <__ieee754_sqrt+0x66>
 800d1b8:	4608      	mov	r0, r1
 800d1ba:	e7f0      	b.n	800d19e <__ieee754_sqrt+0x13a>
 800d1bc:	0052      	lsls	r2, r2, #1
 800d1be:	3101      	adds	r1, #1
 800d1c0:	e7ef      	b.n	800d1a2 <__ieee754_sqrt+0x13e>
 800d1c2:	46e0      	mov	r8, ip
 800d1c4:	e7be      	b.n	800d144 <__ieee754_sqrt+0xe0>
 800d1c6:	bf00      	nop
 800d1c8:	7ff00000 	.word	0x7ff00000
 800d1cc:	00000000 	.word	0x00000000

0800d1d0 <__kernel_cos>:
 800d1d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d4:	ec57 6b10 	vmov	r6, r7, d0
 800d1d8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d1dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d1e0:	ed8d 1b00 	vstr	d1, [sp]
 800d1e4:	da07      	bge.n	800d1f6 <__kernel_cos+0x26>
 800d1e6:	ee10 0a10 	vmov	r0, s0
 800d1ea:	4639      	mov	r1, r7
 800d1ec:	f7f3 fce4 	bl	8000bb8 <__aeabi_d2iz>
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	f000 8088 	beq.w	800d306 <__kernel_cos+0x136>
 800d1f6:	4632      	mov	r2, r6
 800d1f8:	463b      	mov	r3, r7
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	4639      	mov	r1, r7
 800d1fe:	f7f3 fa2b 	bl	8000658 <__aeabi_dmul>
 800d202:	4b51      	ldr	r3, [pc, #324]	; (800d348 <__kernel_cos+0x178>)
 800d204:	2200      	movs	r2, #0
 800d206:	4604      	mov	r4, r0
 800d208:	460d      	mov	r5, r1
 800d20a:	f7f3 fa25 	bl	8000658 <__aeabi_dmul>
 800d20e:	a340      	add	r3, pc, #256	; (adr r3, 800d310 <__kernel_cos+0x140>)
 800d210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d214:	4682      	mov	sl, r0
 800d216:	468b      	mov	fp, r1
 800d218:	4620      	mov	r0, r4
 800d21a:	4629      	mov	r1, r5
 800d21c:	f7f3 fa1c 	bl	8000658 <__aeabi_dmul>
 800d220:	a33d      	add	r3, pc, #244	; (adr r3, 800d318 <__kernel_cos+0x148>)
 800d222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d226:	f7f3 f861 	bl	80002ec <__adddf3>
 800d22a:	4622      	mov	r2, r4
 800d22c:	462b      	mov	r3, r5
 800d22e:	f7f3 fa13 	bl	8000658 <__aeabi_dmul>
 800d232:	a33b      	add	r3, pc, #236	; (adr r3, 800d320 <__kernel_cos+0x150>)
 800d234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d238:	f7f3 f856 	bl	80002e8 <__aeabi_dsub>
 800d23c:	4622      	mov	r2, r4
 800d23e:	462b      	mov	r3, r5
 800d240:	f7f3 fa0a 	bl	8000658 <__aeabi_dmul>
 800d244:	a338      	add	r3, pc, #224	; (adr r3, 800d328 <__kernel_cos+0x158>)
 800d246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24a:	f7f3 f84f 	bl	80002ec <__adddf3>
 800d24e:	4622      	mov	r2, r4
 800d250:	462b      	mov	r3, r5
 800d252:	f7f3 fa01 	bl	8000658 <__aeabi_dmul>
 800d256:	a336      	add	r3, pc, #216	; (adr r3, 800d330 <__kernel_cos+0x160>)
 800d258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25c:	f7f3 f844 	bl	80002e8 <__aeabi_dsub>
 800d260:	4622      	mov	r2, r4
 800d262:	462b      	mov	r3, r5
 800d264:	f7f3 f9f8 	bl	8000658 <__aeabi_dmul>
 800d268:	a333      	add	r3, pc, #204	; (adr r3, 800d338 <__kernel_cos+0x168>)
 800d26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26e:	f7f3 f83d 	bl	80002ec <__adddf3>
 800d272:	4622      	mov	r2, r4
 800d274:	462b      	mov	r3, r5
 800d276:	f7f3 f9ef 	bl	8000658 <__aeabi_dmul>
 800d27a:	4622      	mov	r2, r4
 800d27c:	462b      	mov	r3, r5
 800d27e:	f7f3 f9eb 	bl	8000658 <__aeabi_dmul>
 800d282:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d286:	4604      	mov	r4, r0
 800d288:	460d      	mov	r5, r1
 800d28a:	4630      	mov	r0, r6
 800d28c:	4639      	mov	r1, r7
 800d28e:	f7f3 f9e3 	bl	8000658 <__aeabi_dmul>
 800d292:	460b      	mov	r3, r1
 800d294:	4602      	mov	r2, r0
 800d296:	4629      	mov	r1, r5
 800d298:	4620      	mov	r0, r4
 800d29a:	f7f3 f825 	bl	80002e8 <__aeabi_dsub>
 800d29e:	4b2b      	ldr	r3, [pc, #172]	; (800d34c <__kernel_cos+0x17c>)
 800d2a0:	4598      	cmp	r8, r3
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	460f      	mov	r7, r1
 800d2a6:	dc10      	bgt.n	800d2ca <__kernel_cos+0xfa>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	4650      	mov	r0, sl
 800d2ae:	4659      	mov	r1, fp
 800d2b0:	f7f3 f81a 	bl	80002e8 <__aeabi_dsub>
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	4926      	ldr	r1, [pc, #152]	; (800d350 <__kernel_cos+0x180>)
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	2000      	movs	r0, #0
 800d2bc:	f7f3 f814 	bl	80002e8 <__aeabi_dsub>
 800d2c0:	ec41 0b10 	vmov	d0, r0, r1
 800d2c4:	b003      	add	sp, #12
 800d2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ca:	4b22      	ldr	r3, [pc, #136]	; (800d354 <__kernel_cos+0x184>)
 800d2cc:	4920      	ldr	r1, [pc, #128]	; (800d350 <__kernel_cos+0x180>)
 800d2ce:	4598      	cmp	r8, r3
 800d2d0:	bfcc      	ite	gt
 800d2d2:	4d21      	ldrgt	r5, [pc, #132]	; (800d358 <__kernel_cos+0x188>)
 800d2d4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d2d8:	2400      	movs	r4, #0
 800d2da:	4622      	mov	r2, r4
 800d2dc:	462b      	mov	r3, r5
 800d2de:	2000      	movs	r0, #0
 800d2e0:	f7f3 f802 	bl	80002e8 <__aeabi_dsub>
 800d2e4:	4622      	mov	r2, r4
 800d2e6:	4680      	mov	r8, r0
 800d2e8:	4689      	mov	r9, r1
 800d2ea:	462b      	mov	r3, r5
 800d2ec:	4650      	mov	r0, sl
 800d2ee:	4659      	mov	r1, fp
 800d2f0:	f7f2 fffa 	bl	80002e8 <__aeabi_dsub>
 800d2f4:	4632      	mov	r2, r6
 800d2f6:	463b      	mov	r3, r7
 800d2f8:	f7f2 fff6 	bl	80002e8 <__aeabi_dsub>
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	460b      	mov	r3, r1
 800d300:	4640      	mov	r0, r8
 800d302:	4649      	mov	r1, r9
 800d304:	e7da      	b.n	800d2bc <__kernel_cos+0xec>
 800d306:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d340 <__kernel_cos+0x170>
 800d30a:	e7db      	b.n	800d2c4 <__kernel_cos+0xf4>
 800d30c:	f3af 8000 	nop.w
 800d310:	be8838d4 	.word	0xbe8838d4
 800d314:	bda8fae9 	.word	0xbda8fae9
 800d318:	bdb4b1c4 	.word	0xbdb4b1c4
 800d31c:	3e21ee9e 	.word	0x3e21ee9e
 800d320:	809c52ad 	.word	0x809c52ad
 800d324:	3e927e4f 	.word	0x3e927e4f
 800d328:	19cb1590 	.word	0x19cb1590
 800d32c:	3efa01a0 	.word	0x3efa01a0
 800d330:	16c15177 	.word	0x16c15177
 800d334:	3f56c16c 	.word	0x3f56c16c
 800d338:	5555554c 	.word	0x5555554c
 800d33c:	3fa55555 	.word	0x3fa55555
 800d340:	00000000 	.word	0x00000000
 800d344:	3ff00000 	.word	0x3ff00000
 800d348:	3fe00000 	.word	0x3fe00000
 800d34c:	3fd33332 	.word	0x3fd33332
 800d350:	3ff00000 	.word	0x3ff00000
 800d354:	3fe90000 	.word	0x3fe90000
 800d358:	3fd20000 	.word	0x3fd20000
 800d35c:	00000000 	.word	0x00000000

0800d360 <__kernel_rem_pio2>:
 800d360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d364:	ed2d 8b02 	vpush	{d8}
 800d368:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d36c:	f112 0f14 	cmn.w	r2, #20
 800d370:	9308      	str	r3, [sp, #32]
 800d372:	9101      	str	r1, [sp, #4]
 800d374:	4bc6      	ldr	r3, [pc, #792]	; (800d690 <__kernel_rem_pio2+0x330>)
 800d376:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800d378:	9009      	str	r0, [sp, #36]	; 0x24
 800d37a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d37e:	9304      	str	r3, [sp, #16]
 800d380:	9b08      	ldr	r3, [sp, #32]
 800d382:	f103 33ff 	add.w	r3, r3, #4294967295
 800d386:	bfa8      	it	ge
 800d388:	1ed4      	subge	r4, r2, #3
 800d38a:	9306      	str	r3, [sp, #24]
 800d38c:	bfb2      	itee	lt
 800d38e:	2400      	movlt	r4, #0
 800d390:	2318      	movge	r3, #24
 800d392:	fb94 f4f3 	sdivge	r4, r4, r3
 800d396:	f06f 0317 	mvn.w	r3, #23
 800d39a:	fb04 3303 	mla	r3, r4, r3, r3
 800d39e:	eb03 0a02 	add.w	sl, r3, r2
 800d3a2:	9b04      	ldr	r3, [sp, #16]
 800d3a4:	9a06      	ldr	r2, [sp, #24]
 800d3a6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800d680 <__kernel_rem_pio2+0x320>
 800d3aa:	eb03 0802 	add.w	r8, r3, r2
 800d3ae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d3b0:	1aa7      	subs	r7, r4, r2
 800d3b2:	ae20      	add	r6, sp, #128	; 0x80
 800d3b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d3b8:	2500      	movs	r5, #0
 800d3ba:	4545      	cmp	r5, r8
 800d3bc:	dd18      	ble.n	800d3f0 <__kernel_rem_pio2+0x90>
 800d3be:	9b08      	ldr	r3, [sp, #32]
 800d3c0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d3c4:	aa20      	add	r2, sp, #128	; 0x80
 800d3c6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800d680 <__kernel_rem_pio2+0x320>
 800d3ca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d3ce:	f1c3 0301 	rsb	r3, r3, #1
 800d3d2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d3d6:	9307      	str	r3, [sp, #28]
 800d3d8:	9b07      	ldr	r3, [sp, #28]
 800d3da:	9a04      	ldr	r2, [sp, #16]
 800d3dc:	4443      	add	r3, r8
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	db2f      	blt.n	800d442 <__kernel_rem_pio2+0xe2>
 800d3e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d3e6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d3ea:	462f      	mov	r7, r5
 800d3ec:	2600      	movs	r6, #0
 800d3ee:	e01b      	b.n	800d428 <__kernel_rem_pio2+0xc8>
 800d3f0:	42ef      	cmn	r7, r5
 800d3f2:	d407      	bmi.n	800d404 <__kernel_rem_pio2+0xa4>
 800d3f4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d3f8:	f7f3 f8c4 	bl	8000584 <__aeabi_i2d>
 800d3fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d400:	3501      	adds	r5, #1
 800d402:	e7da      	b.n	800d3ba <__kernel_rem_pio2+0x5a>
 800d404:	ec51 0b18 	vmov	r0, r1, d8
 800d408:	e7f8      	b.n	800d3fc <__kernel_rem_pio2+0x9c>
 800d40a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d40e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d412:	f7f3 f921 	bl	8000658 <__aeabi_dmul>
 800d416:	4602      	mov	r2, r0
 800d418:	460b      	mov	r3, r1
 800d41a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d41e:	f7f2 ff65 	bl	80002ec <__adddf3>
 800d422:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d426:	3601      	adds	r6, #1
 800d428:	9b06      	ldr	r3, [sp, #24]
 800d42a:	429e      	cmp	r6, r3
 800d42c:	f1a7 0708 	sub.w	r7, r7, #8
 800d430:	ddeb      	ble.n	800d40a <__kernel_rem_pio2+0xaa>
 800d432:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d436:	3508      	adds	r5, #8
 800d438:	ecab 7b02 	vstmia	fp!, {d7}
 800d43c:	f108 0801 	add.w	r8, r8, #1
 800d440:	e7ca      	b.n	800d3d8 <__kernel_rem_pio2+0x78>
 800d442:	9b04      	ldr	r3, [sp, #16]
 800d444:	aa0c      	add	r2, sp, #48	; 0x30
 800d446:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d44a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d44c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d44e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d452:	9c04      	ldr	r4, [sp, #16]
 800d454:	930a      	str	r3, [sp, #40]	; 0x28
 800d456:	ab98      	add	r3, sp, #608	; 0x260
 800d458:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d45c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d460:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800d464:	f8cd b008 	str.w	fp, [sp, #8]
 800d468:	4625      	mov	r5, r4
 800d46a:	2d00      	cmp	r5, #0
 800d46c:	dc78      	bgt.n	800d560 <__kernel_rem_pio2+0x200>
 800d46e:	ec47 6b10 	vmov	d0, r6, r7
 800d472:	4650      	mov	r0, sl
 800d474:	f000 fc8c 	bl	800dd90 <scalbn>
 800d478:	ec57 6b10 	vmov	r6, r7, d0
 800d47c:	2200      	movs	r2, #0
 800d47e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d482:	ee10 0a10 	vmov	r0, s0
 800d486:	4639      	mov	r1, r7
 800d488:	f7f3 f8e6 	bl	8000658 <__aeabi_dmul>
 800d48c:	ec41 0b10 	vmov	d0, r0, r1
 800d490:	f000 fb72 	bl	800db78 <floor>
 800d494:	4b7f      	ldr	r3, [pc, #508]	; (800d694 <__kernel_rem_pio2+0x334>)
 800d496:	ec51 0b10 	vmov	r0, r1, d0
 800d49a:	2200      	movs	r2, #0
 800d49c:	f7f3 f8dc 	bl	8000658 <__aeabi_dmul>
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	460b      	mov	r3, r1
 800d4a4:	4630      	mov	r0, r6
 800d4a6:	4639      	mov	r1, r7
 800d4a8:	f7f2 ff1e 	bl	80002e8 <__aeabi_dsub>
 800d4ac:	460f      	mov	r7, r1
 800d4ae:	4606      	mov	r6, r0
 800d4b0:	f7f3 fb82 	bl	8000bb8 <__aeabi_d2iz>
 800d4b4:	9007      	str	r0, [sp, #28]
 800d4b6:	f7f3 f865 	bl	8000584 <__aeabi_i2d>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	460b      	mov	r3, r1
 800d4be:	4630      	mov	r0, r6
 800d4c0:	4639      	mov	r1, r7
 800d4c2:	f7f2 ff11 	bl	80002e8 <__aeabi_dsub>
 800d4c6:	f1ba 0f00 	cmp.w	sl, #0
 800d4ca:	4606      	mov	r6, r0
 800d4cc:	460f      	mov	r7, r1
 800d4ce:	dd70      	ble.n	800d5b2 <__kernel_rem_pio2+0x252>
 800d4d0:	1e62      	subs	r2, r4, #1
 800d4d2:	ab0c      	add	r3, sp, #48	; 0x30
 800d4d4:	9d07      	ldr	r5, [sp, #28]
 800d4d6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d4da:	f1ca 0118 	rsb	r1, sl, #24
 800d4de:	fa40 f301 	asr.w	r3, r0, r1
 800d4e2:	441d      	add	r5, r3
 800d4e4:	408b      	lsls	r3, r1
 800d4e6:	1ac0      	subs	r0, r0, r3
 800d4e8:	ab0c      	add	r3, sp, #48	; 0x30
 800d4ea:	9507      	str	r5, [sp, #28]
 800d4ec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d4f0:	f1ca 0317 	rsb	r3, sl, #23
 800d4f4:	fa40 f303 	asr.w	r3, r0, r3
 800d4f8:	9302      	str	r3, [sp, #8]
 800d4fa:	9b02      	ldr	r3, [sp, #8]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	dd66      	ble.n	800d5ce <__kernel_rem_pio2+0x26e>
 800d500:	9b07      	ldr	r3, [sp, #28]
 800d502:	2200      	movs	r2, #0
 800d504:	3301      	adds	r3, #1
 800d506:	9307      	str	r3, [sp, #28]
 800d508:	4615      	mov	r5, r2
 800d50a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d50e:	4294      	cmp	r4, r2
 800d510:	f300 8099 	bgt.w	800d646 <__kernel_rem_pio2+0x2e6>
 800d514:	f1ba 0f00 	cmp.w	sl, #0
 800d518:	dd07      	ble.n	800d52a <__kernel_rem_pio2+0x1ca>
 800d51a:	f1ba 0f01 	cmp.w	sl, #1
 800d51e:	f000 80a5 	beq.w	800d66c <__kernel_rem_pio2+0x30c>
 800d522:	f1ba 0f02 	cmp.w	sl, #2
 800d526:	f000 80c1 	beq.w	800d6ac <__kernel_rem_pio2+0x34c>
 800d52a:	9b02      	ldr	r3, [sp, #8]
 800d52c:	2b02      	cmp	r3, #2
 800d52e:	d14e      	bne.n	800d5ce <__kernel_rem_pio2+0x26e>
 800d530:	4632      	mov	r2, r6
 800d532:	463b      	mov	r3, r7
 800d534:	4958      	ldr	r1, [pc, #352]	; (800d698 <__kernel_rem_pio2+0x338>)
 800d536:	2000      	movs	r0, #0
 800d538:	f7f2 fed6 	bl	80002e8 <__aeabi_dsub>
 800d53c:	4606      	mov	r6, r0
 800d53e:	460f      	mov	r7, r1
 800d540:	2d00      	cmp	r5, #0
 800d542:	d044      	beq.n	800d5ce <__kernel_rem_pio2+0x26e>
 800d544:	4650      	mov	r0, sl
 800d546:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800d688 <__kernel_rem_pio2+0x328>
 800d54a:	f000 fc21 	bl	800dd90 <scalbn>
 800d54e:	4630      	mov	r0, r6
 800d550:	4639      	mov	r1, r7
 800d552:	ec53 2b10 	vmov	r2, r3, d0
 800d556:	f7f2 fec7 	bl	80002e8 <__aeabi_dsub>
 800d55a:	4606      	mov	r6, r0
 800d55c:	460f      	mov	r7, r1
 800d55e:	e036      	b.n	800d5ce <__kernel_rem_pio2+0x26e>
 800d560:	4b4e      	ldr	r3, [pc, #312]	; (800d69c <__kernel_rem_pio2+0x33c>)
 800d562:	2200      	movs	r2, #0
 800d564:	4630      	mov	r0, r6
 800d566:	4639      	mov	r1, r7
 800d568:	f7f3 f876 	bl	8000658 <__aeabi_dmul>
 800d56c:	f7f3 fb24 	bl	8000bb8 <__aeabi_d2iz>
 800d570:	f7f3 f808 	bl	8000584 <__aeabi_i2d>
 800d574:	4b4a      	ldr	r3, [pc, #296]	; (800d6a0 <__kernel_rem_pio2+0x340>)
 800d576:	2200      	movs	r2, #0
 800d578:	4680      	mov	r8, r0
 800d57a:	4689      	mov	r9, r1
 800d57c:	f7f3 f86c 	bl	8000658 <__aeabi_dmul>
 800d580:	4602      	mov	r2, r0
 800d582:	460b      	mov	r3, r1
 800d584:	4630      	mov	r0, r6
 800d586:	4639      	mov	r1, r7
 800d588:	f7f2 feae 	bl	80002e8 <__aeabi_dsub>
 800d58c:	f7f3 fb14 	bl	8000bb8 <__aeabi_d2iz>
 800d590:	9b02      	ldr	r3, [sp, #8]
 800d592:	f843 0b04 	str.w	r0, [r3], #4
 800d596:	3d01      	subs	r5, #1
 800d598:	9302      	str	r3, [sp, #8]
 800d59a:	ab70      	add	r3, sp, #448	; 0x1c0
 800d59c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a4:	4640      	mov	r0, r8
 800d5a6:	4649      	mov	r1, r9
 800d5a8:	f7f2 fea0 	bl	80002ec <__adddf3>
 800d5ac:	4606      	mov	r6, r0
 800d5ae:	460f      	mov	r7, r1
 800d5b0:	e75b      	b.n	800d46a <__kernel_rem_pio2+0x10a>
 800d5b2:	d105      	bne.n	800d5c0 <__kernel_rem_pio2+0x260>
 800d5b4:	1e63      	subs	r3, r4, #1
 800d5b6:	aa0c      	add	r2, sp, #48	; 0x30
 800d5b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d5bc:	15c3      	asrs	r3, r0, #23
 800d5be:	e79b      	b.n	800d4f8 <__kernel_rem_pio2+0x198>
 800d5c0:	4b38      	ldr	r3, [pc, #224]	; (800d6a4 <__kernel_rem_pio2+0x344>)
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f7f3 face 	bl	8000b64 <__aeabi_dcmpge>
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	d139      	bne.n	800d640 <__kernel_rem_pio2+0x2e0>
 800d5cc:	9002      	str	r0, [sp, #8]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	4630      	mov	r0, r6
 800d5d4:	4639      	mov	r1, r7
 800d5d6:	f7f3 faa7 	bl	8000b28 <__aeabi_dcmpeq>
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	f000 80b4 	beq.w	800d748 <__kernel_rem_pio2+0x3e8>
 800d5e0:	f104 3bff 	add.w	fp, r4, #4294967295
 800d5e4:	465b      	mov	r3, fp
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	9904      	ldr	r1, [sp, #16]
 800d5ea:	428b      	cmp	r3, r1
 800d5ec:	da65      	bge.n	800d6ba <__kernel_rem_pio2+0x35a>
 800d5ee:	2a00      	cmp	r2, #0
 800d5f0:	d07b      	beq.n	800d6ea <__kernel_rem_pio2+0x38a>
 800d5f2:	ab0c      	add	r3, sp, #48	; 0x30
 800d5f4:	f1aa 0a18 	sub.w	sl, sl, #24
 800d5f8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f000 80a0 	beq.w	800d742 <__kernel_rem_pio2+0x3e2>
 800d602:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800d688 <__kernel_rem_pio2+0x328>
 800d606:	4650      	mov	r0, sl
 800d608:	f000 fbc2 	bl	800dd90 <scalbn>
 800d60c:	4f23      	ldr	r7, [pc, #140]	; (800d69c <__kernel_rem_pio2+0x33c>)
 800d60e:	ec55 4b10 	vmov	r4, r5, d0
 800d612:	46d8      	mov	r8, fp
 800d614:	2600      	movs	r6, #0
 800d616:	f1b8 0f00 	cmp.w	r8, #0
 800d61a:	f280 80cf 	bge.w	800d7bc <__kernel_rem_pio2+0x45c>
 800d61e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800d680 <__kernel_rem_pio2+0x320>
 800d622:	465f      	mov	r7, fp
 800d624:	f04f 0800 	mov.w	r8, #0
 800d628:	2f00      	cmp	r7, #0
 800d62a:	f2c0 80fd 	blt.w	800d828 <__kernel_rem_pio2+0x4c8>
 800d62e:	ab70      	add	r3, sp, #448	; 0x1c0
 800d630:	f8df a074 	ldr.w	sl, [pc, #116]	; 800d6a8 <__kernel_rem_pio2+0x348>
 800d634:	ec55 4b18 	vmov	r4, r5, d8
 800d638:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800d63c:	2600      	movs	r6, #0
 800d63e:	e0e5      	b.n	800d80c <__kernel_rem_pio2+0x4ac>
 800d640:	2302      	movs	r3, #2
 800d642:	9302      	str	r3, [sp, #8]
 800d644:	e75c      	b.n	800d500 <__kernel_rem_pio2+0x1a0>
 800d646:	f8db 3000 	ldr.w	r3, [fp]
 800d64a:	b955      	cbnz	r5, 800d662 <__kernel_rem_pio2+0x302>
 800d64c:	b123      	cbz	r3, 800d658 <__kernel_rem_pio2+0x2f8>
 800d64e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d652:	f8cb 3000 	str.w	r3, [fp]
 800d656:	2301      	movs	r3, #1
 800d658:	3201      	adds	r2, #1
 800d65a:	f10b 0b04 	add.w	fp, fp, #4
 800d65e:	461d      	mov	r5, r3
 800d660:	e755      	b.n	800d50e <__kernel_rem_pio2+0x1ae>
 800d662:	1acb      	subs	r3, r1, r3
 800d664:	f8cb 3000 	str.w	r3, [fp]
 800d668:	462b      	mov	r3, r5
 800d66a:	e7f5      	b.n	800d658 <__kernel_rem_pio2+0x2f8>
 800d66c:	1e62      	subs	r2, r4, #1
 800d66e:	ab0c      	add	r3, sp, #48	; 0x30
 800d670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d674:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d678:	a90c      	add	r1, sp, #48	; 0x30
 800d67a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d67e:	e754      	b.n	800d52a <__kernel_rem_pio2+0x1ca>
	...
 800d68c:	3ff00000 	.word	0x3ff00000
 800d690:	0800e780 	.word	0x0800e780
 800d694:	40200000 	.word	0x40200000
 800d698:	3ff00000 	.word	0x3ff00000
 800d69c:	3e700000 	.word	0x3e700000
 800d6a0:	41700000 	.word	0x41700000
 800d6a4:	3fe00000 	.word	0x3fe00000
 800d6a8:	0800e740 	.word	0x0800e740
 800d6ac:	1e62      	subs	r2, r4, #1
 800d6ae:	ab0c      	add	r3, sp, #48	; 0x30
 800d6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d6b8:	e7de      	b.n	800d678 <__kernel_rem_pio2+0x318>
 800d6ba:	a90c      	add	r1, sp, #48	; 0x30
 800d6bc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d6c0:	3b01      	subs	r3, #1
 800d6c2:	430a      	orrs	r2, r1
 800d6c4:	e790      	b.n	800d5e8 <__kernel_rem_pio2+0x288>
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d6cc:	2900      	cmp	r1, #0
 800d6ce:	d0fa      	beq.n	800d6c6 <__kernel_rem_pio2+0x366>
 800d6d0:	9a08      	ldr	r2, [sp, #32]
 800d6d2:	18e3      	adds	r3, r4, r3
 800d6d4:	18a6      	adds	r6, r4, r2
 800d6d6:	aa20      	add	r2, sp, #128	; 0x80
 800d6d8:	1c65      	adds	r5, r4, #1
 800d6da:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d6de:	9302      	str	r3, [sp, #8]
 800d6e0:	9b02      	ldr	r3, [sp, #8]
 800d6e2:	42ab      	cmp	r3, r5
 800d6e4:	da04      	bge.n	800d6f0 <__kernel_rem_pio2+0x390>
 800d6e6:	461c      	mov	r4, r3
 800d6e8:	e6b5      	b.n	800d456 <__kernel_rem_pio2+0xf6>
 800d6ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e7eb      	b.n	800d6c8 <__kernel_rem_pio2+0x368>
 800d6f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6f6:	f7f2 ff45 	bl	8000584 <__aeabi_i2d>
 800d6fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d700:	46b3      	mov	fp, r6
 800d702:	461c      	mov	r4, r3
 800d704:	2700      	movs	r7, #0
 800d706:	f04f 0800 	mov.w	r8, #0
 800d70a:	f04f 0900 	mov.w	r9, #0
 800d70e:	9b06      	ldr	r3, [sp, #24]
 800d710:	429f      	cmp	r7, r3
 800d712:	dd06      	ble.n	800d722 <__kernel_rem_pio2+0x3c2>
 800d714:	ab70      	add	r3, sp, #448	; 0x1c0
 800d716:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d71a:	e9c3 8900 	strd	r8, r9, [r3]
 800d71e:	3501      	adds	r5, #1
 800d720:	e7de      	b.n	800d6e0 <__kernel_rem_pio2+0x380>
 800d722:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d726:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d72a:	f7f2 ff95 	bl	8000658 <__aeabi_dmul>
 800d72e:	4602      	mov	r2, r0
 800d730:	460b      	mov	r3, r1
 800d732:	4640      	mov	r0, r8
 800d734:	4649      	mov	r1, r9
 800d736:	f7f2 fdd9 	bl	80002ec <__adddf3>
 800d73a:	3701      	adds	r7, #1
 800d73c:	4680      	mov	r8, r0
 800d73e:	4689      	mov	r9, r1
 800d740:	e7e5      	b.n	800d70e <__kernel_rem_pio2+0x3ae>
 800d742:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d746:	e754      	b.n	800d5f2 <__kernel_rem_pio2+0x292>
 800d748:	ec47 6b10 	vmov	d0, r6, r7
 800d74c:	f1ca 0000 	rsb	r0, sl, #0
 800d750:	f000 fb1e 	bl	800dd90 <scalbn>
 800d754:	ec57 6b10 	vmov	r6, r7, d0
 800d758:	4b9f      	ldr	r3, [pc, #636]	; (800d9d8 <__kernel_rem_pio2+0x678>)
 800d75a:	ee10 0a10 	vmov	r0, s0
 800d75e:	2200      	movs	r2, #0
 800d760:	4639      	mov	r1, r7
 800d762:	f7f3 f9ff 	bl	8000b64 <__aeabi_dcmpge>
 800d766:	b300      	cbz	r0, 800d7aa <__kernel_rem_pio2+0x44a>
 800d768:	4b9c      	ldr	r3, [pc, #624]	; (800d9dc <__kernel_rem_pio2+0x67c>)
 800d76a:	2200      	movs	r2, #0
 800d76c:	4630      	mov	r0, r6
 800d76e:	4639      	mov	r1, r7
 800d770:	f7f2 ff72 	bl	8000658 <__aeabi_dmul>
 800d774:	f7f3 fa20 	bl	8000bb8 <__aeabi_d2iz>
 800d778:	4605      	mov	r5, r0
 800d77a:	f7f2 ff03 	bl	8000584 <__aeabi_i2d>
 800d77e:	4b96      	ldr	r3, [pc, #600]	; (800d9d8 <__kernel_rem_pio2+0x678>)
 800d780:	2200      	movs	r2, #0
 800d782:	f7f2 ff69 	bl	8000658 <__aeabi_dmul>
 800d786:	460b      	mov	r3, r1
 800d788:	4602      	mov	r2, r0
 800d78a:	4639      	mov	r1, r7
 800d78c:	4630      	mov	r0, r6
 800d78e:	f7f2 fdab 	bl	80002e8 <__aeabi_dsub>
 800d792:	f7f3 fa11 	bl	8000bb8 <__aeabi_d2iz>
 800d796:	f104 0b01 	add.w	fp, r4, #1
 800d79a:	ab0c      	add	r3, sp, #48	; 0x30
 800d79c:	f10a 0a18 	add.w	sl, sl, #24
 800d7a0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d7a4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800d7a8:	e72b      	b.n	800d602 <__kernel_rem_pio2+0x2a2>
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	4639      	mov	r1, r7
 800d7ae:	f7f3 fa03 	bl	8000bb8 <__aeabi_d2iz>
 800d7b2:	ab0c      	add	r3, sp, #48	; 0x30
 800d7b4:	46a3      	mov	fp, r4
 800d7b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d7ba:	e722      	b.n	800d602 <__kernel_rem_pio2+0x2a2>
 800d7bc:	ab70      	add	r3, sp, #448	; 0x1c0
 800d7be:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800d7c2:	ab0c      	add	r3, sp, #48	; 0x30
 800d7c4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d7c8:	f7f2 fedc 	bl	8000584 <__aeabi_i2d>
 800d7cc:	4622      	mov	r2, r4
 800d7ce:	462b      	mov	r3, r5
 800d7d0:	f7f2 ff42 	bl	8000658 <__aeabi_dmul>
 800d7d4:	4632      	mov	r2, r6
 800d7d6:	e9c9 0100 	strd	r0, r1, [r9]
 800d7da:	463b      	mov	r3, r7
 800d7dc:	4620      	mov	r0, r4
 800d7de:	4629      	mov	r1, r5
 800d7e0:	f7f2 ff3a 	bl	8000658 <__aeabi_dmul>
 800d7e4:	f108 38ff 	add.w	r8, r8, #4294967295
 800d7e8:	4604      	mov	r4, r0
 800d7ea:	460d      	mov	r5, r1
 800d7ec:	e713      	b.n	800d616 <__kernel_rem_pio2+0x2b6>
 800d7ee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d7f2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d7f6:	f7f2 ff2f 	bl	8000658 <__aeabi_dmul>
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	4620      	mov	r0, r4
 800d800:	4629      	mov	r1, r5
 800d802:	f7f2 fd73 	bl	80002ec <__adddf3>
 800d806:	3601      	adds	r6, #1
 800d808:	4604      	mov	r4, r0
 800d80a:	460d      	mov	r5, r1
 800d80c:	9b04      	ldr	r3, [sp, #16]
 800d80e:	429e      	cmp	r6, r3
 800d810:	dc01      	bgt.n	800d816 <__kernel_rem_pio2+0x4b6>
 800d812:	45b0      	cmp	r8, r6
 800d814:	daeb      	bge.n	800d7ee <__kernel_rem_pio2+0x48e>
 800d816:	ab48      	add	r3, sp, #288	; 0x120
 800d818:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d81c:	e9c3 4500 	strd	r4, r5, [r3]
 800d820:	3f01      	subs	r7, #1
 800d822:	f108 0801 	add.w	r8, r8, #1
 800d826:	e6ff      	b.n	800d628 <__kernel_rem_pio2+0x2c8>
 800d828:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d82a:	2b02      	cmp	r3, #2
 800d82c:	dc0b      	bgt.n	800d846 <__kernel_rem_pio2+0x4e6>
 800d82e:	2b00      	cmp	r3, #0
 800d830:	dc6e      	bgt.n	800d910 <__kernel_rem_pio2+0x5b0>
 800d832:	d045      	beq.n	800d8c0 <__kernel_rem_pio2+0x560>
 800d834:	9b07      	ldr	r3, [sp, #28]
 800d836:	f003 0007 	and.w	r0, r3, #7
 800d83a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d83e:	ecbd 8b02 	vpop	{d8}
 800d842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d846:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d848:	2b03      	cmp	r3, #3
 800d84a:	d1f3      	bne.n	800d834 <__kernel_rem_pio2+0x4d4>
 800d84c:	ab48      	add	r3, sp, #288	; 0x120
 800d84e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800d852:	46d0      	mov	r8, sl
 800d854:	46d9      	mov	r9, fp
 800d856:	f1b9 0f00 	cmp.w	r9, #0
 800d85a:	f1a8 0808 	sub.w	r8, r8, #8
 800d85e:	dc64      	bgt.n	800d92a <__kernel_rem_pio2+0x5ca>
 800d860:	465c      	mov	r4, fp
 800d862:	2c01      	cmp	r4, #1
 800d864:	f1aa 0a08 	sub.w	sl, sl, #8
 800d868:	dc7e      	bgt.n	800d968 <__kernel_rem_pio2+0x608>
 800d86a:	2000      	movs	r0, #0
 800d86c:	2100      	movs	r1, #0
 800d86e:	f1bb 0f01 	cmp.w	fp, #1
 800d872:	f300 8097 	bgt.w	800d9a4 <__kernel_rem_pio2+0x644>
 800d876:	9b02      	ldr	r3, [sp, #8]
 800d878:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800d87c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800d880:	2b00      	cmp	r3, #0
 800d882:	f040 8099 	bne.w	800d9b8 <__kernel_rem_pio2+0x658>
 800d886:	9b01      	ldr	r3, [sp, #4]
 800d888:	e9c3 5600 	strd	r5, r6, [r3]
 800d88c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d890:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d894:	e7ce      	b.n	800d834 <__kernel_rem_pio2+0x4d4>
 800d896:	ab48      	add	r3, sp, #288	; 0x120
 800d898:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a0:	f7f2 fd24 	bl	80002ec <__adddf3>
 800d8a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d8a8:	f1bb 0f00 	cmp.w	fp, #0
 800d8ac:	daf3      	bge.n	800d896 <__kernel_rem_pio2+0x536>
 800d8ae:	9b02      	ldr	r3, [sp, #8]
 800d8b0:	b113      	cbz	r3, 800d8b8 <__kernel_rem_pio2+0x558>
 800d8b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	9b01      	ldr	r3, [sp, #4]
 800d8ba:	e9c3 0100 	strd	r0, r1, [r3]
 800d8be:	e7b9      	b.n	800d834 <__kernel_rem_pio2+0x4d4>
 800d8c0:	2000      	movs	r0, #0
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	e7f0      	b.n	800d8a8 <__kernel_rem_pio2+0x548>
 800d8c6:	ab48      	add	r3, sp, #288	; 0x120
 800d8c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d0:	f7f2 fd0c 	bl	80002ec <__adddf3>
 800d8d4:	3c01      	subs	r4, #1
 800d8d6:	2c00      	cmp	r4, #0
 800d8d8:	daf5      	bge.n	800d8c6 <__kernel_rem_pio2+0x566>
 800d8da:	9b02      	ldr	r3, [sp, #8]
 800d8dc:	b1e3      	cbz	r3, 800d918 <__kernel_rem_pio2+0x5b8>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8e4:	9c01      	ldr	r4, [sp, #4]
 800d8e6:	e9c4 2300 	strd	r2, r3, [r4]
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d8f2:	f7f2 fcf9 	bl	80002e8 <__aeabi_dsub>
 800d8f6:	ad4a      	add	r5, sp, #296	; 0x128
 800d8f8:	2401      	movs	r4, #1
 800d8fa:	45a3      	cmp	fp, r4
 800d8fc:	da0f      	bge.n	800d91e <__kernel_rem_pio2+0x5be>
 800d8fe:	9b02      	ldr	r3, [sp, #8]
 800d900:	b113      	cbz	r3, 800d908 <__kernel_rem_pio2+0x5a8>
 800d902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d906:	4619      	mov	r1, r3
 800d908:	9b01      	ldr	r3, [sp, #4]
 800d90a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d90e:	e791      	b.n	800d834 <__kernel_rem_pio2+0x4d4>
 800d910:	465c      	mov	r4, fp
 800d912:	2000      	movs	r0, #0
 800d914:	2100      	movs	r1, #0
 800d916:	e7de      	b.n	800d8d6 <__kernel_rem_pio2+0x576>
 800d918:	4602      	mov	r2, r0
 800d91a:	460b      	mov	r3, r1
 800d91c:	e7e2      	b.n	800d8e4 <__kernel_rem_pio2+0x584>
 800d91e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d922:	f7f2 fce3 	bl	80002ec <__adddf3>
 800d926:	3401      	adds	r4, #1
 800d928:	e7e7      	b.n	800d8fa <__kernel_rem_pio2+0x59a>
 800d92a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800d92e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800d932:	4620      	mov	r0, r4
 800d934:	4632      	mov	r2, r6
 800d936:	463b      	mov	r3, r7
 800d938:	4629      	mov	r1, r5
 800d93a:	f7f2 fcd7 	bl	80002ec <__adddf3>
 800d93e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d942:	4602      	mov	r2, r0
 800d944:	460b      	mov	r3, r1
 800d946:	4620      	mov	r0, r4
 800d948:	4629      	mov	r1, r5
 800d94a:	f7f2 fccd 	bl	80002e8 <__aeabi_dsub>
 800d94e:	4632      	mov	r2, r6
 800d950:	463b      	mov	r3, r7
 800d952:	f7f2 fccb 	bl	80002ec <__adddf3>
 800d956:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d95a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800d95e:	ed88 7b00 	vstr	d7, [r8]
 800d962:	f109 39ff 	add.w	r9, r9, #4294967295
 800d966:	e776      	b.n	800d856 <__kernel_rem_pio2+0x4f6>
 800d968:	e9da 8900 	ldrd	r8, r9, [sl]
 800d96c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d970:	4640      	mov	r0, r8
 800d972:	4632      	mov	r2, r6
 800d974:	463b      	mov	r3, r7
 800d976:	4649      	mov	r1, r9
 800d978:	f7f2 fcb8 	bl	80002ec <__adddf3>
 800d97c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d980:	4602      	mov	r2, r0
 800d982:	460b      	mov	r3, r1
 800d984:	4640      	mov	r0, r8
 800d986:	4649      	mov	r1, r9
 800d988:	f7f2 fcae 	bl	80002e8 <__aeabi_dsub>
 800d98c:	4632      	mov	r2, r6
 800d98e:	463b      	mov	r3, r7
 800d990:	f7f2 fcac 	bl	80002ec <__adddf3>
 800d994:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d998:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d99c:	ed8a 7b00 	vstr	d7, [sl]
 800d9a0:	3c01      	subs	r4, #1
 800d9a2:	e75e      	b.n	800d862 <__kernel_rem_pio2+0x502>
 800d9a4:	ab48      	add	r3, sp, #288	; 0x120
 800d9a6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ae:	f7f2 fc9d 	bl	80002ec <__adddf3>
 800d9b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d9b6:	e75a      	b.n	800d86e <__kernel_rem_pio2+0x50e>
 800d9b8:	9b01      	ldr	r3, [sp, #4]
 800d9ba:	9a01      	ldr	r2, [sp, #4]
 800d9bc:	601d      	str	r5, [r3, #0]
 800d9be:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d9c2:	605c      	str	r4, [r3, #4]
 800d9c4:	609f      	str	r7, [r3, #8]
 800d9c6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d9ca:	60d3      	str	r3, [r2, #12]
 800d9cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9d0:	6110      	str	r0, [r2, #16]
 800d9d2:	6153      	str	r3, [r2, #20]
 800d9d4:	e72e      	b.n	800d834 <__kernel_rem_pio2+0x4d4>
 800d9d6:	bf00      	nop
 800d9d8:	41700000 	.word	0x41700000
 800d9dc:	3e700000 	.word	0x3e700000

0800d9e0 <__kernel_sin>:
 800d9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9e4:	ed2d 8b04 	vpush	{d8-d9}
 800d9e8:	eeb0 8a41 	vmov.f32	s16, s2
 800d9ec:	eef0 8a61 	vmov.f32	s17, s3
 800d9f0:	ec55 4b10 	vmov	r4, r5, d0
 800d9f4:	b083      	sub	sp, #12
 800d9f6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d9fa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d9fe:	9001      	str	r0, [sp, #4]
 800da00:	da06      	bge.n	800da10 <__kernel_sin+0x30>
 800da02:	ee10 0a10 	vmov	r0, s0
 800da06:	4629      	mov	r1, r5
 800da08:	f7f3 f8d6 	bl	8000bb8 <__aeabi_d2iz>
 800da0c:	2800      	cmp	r0, #0
 800da0e:	d051      	beq.n	800dab4 <__kernel_sin+0xd4>
 800da10:	4622      	mov	r2, r4
 800da12:	462b      	mov	r3, r5
 800da14:	4620      	mov	r0, r4
 800da16:	4629      	mov	r1, r5
 800da18:	f7f2 fe1e 	bl	8000658 <__aeabi_dmul>
 800da1c:	4682      	mov	sl, r0
 800da1e:	468b      	mov	fp, r1
 800da20:	4602      	mov	r2, r0
 800da22:	460b      	mov	r3, r1
 800da24:	4620      	mov	r0, r4
 800da26:	4629      	mov	r1, r5
 800da28:	f7f2 fe16 	bl	8000658 <__aeabi_dmul>
 800da2c:	a341      	add	r3, pc, #260	; (adr r3, 800db34 <__kernel_sin+0x154>)
 800da2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da32:	4680      	mov	r8, r0
 800da34:	4689      	mov	r9, r1
 800da36:	4650      	mov	r0, sl
 800da38:	4659      	mov	r1, fp
 800da3a:	f7f2 fe0d 	bl	8000658 <__aeabi_dmul>
 800da3e:	a33f      	add	r3, pc, #252	; (adr r3, 800db3c <__kernel_sin+0x15c>)
 800da40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da44:	f7f2 fc50 	bl	80002e8 <__aeabi_dsub>
 800da48:	4652      	mov	r2, sl
 800da4a:	465b      	mov	r3, fp
 800da4c:	f7f2 fe04 	bl	8000658 <__aeabi_dmul>
 800da50:	a33c      	add	r3, pc, #240	; (adr r3, 800db44 <__kernel_sin+0x164>)
 800da52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da56:	f7f2 fc49 	bl	80002ec <__adddf3>
 800da5a:	4652      	mov	r2, sl
 800da5c:	465b      	mov	r3, fp
 800da5e:	f7f2 fdfb 	bl	8000658 <__aeabi_dmul>
 800da62:	a33a      	add	r3, pc, #232	; (adr r3, 800db4c <__kernel_sin+0x16c>)
 800da64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da68:	f7f2 fc3e 	bl	80002e8 <__aeabi_dsub>
 800da6c:	4652      	mov	r2, sl
 800da6e:	465b      	mov	r3, fp
 800da70:	f7f2 fdf2 	bl	8000658 <__aeabi_dmul>
 800da74:	a337      	add	r3, pc, #220	; (adr r3, 800db54 <__kernel_sin+0x174>)
 800da76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7a:	f7f2 fc37 	bl	80002ec <__adddf3>
 800da7e:	9b01      	ldr	r3, [sp, #4]
 800da80:	4606      	mov	r6, r0
 800da82:	460f      	mov	r7, r1
 800da84:	b9eb      	cbnz	r3, 800dac2 <__kernel_sin+0xe2>
 800da86:	4602      	mov	r2, r0
 800da88:	460b      	mov	r3, r1
 800da8a:	4650      	mov	r0, sl
 800da8c:	4659      	mov	r1, fp
 800da8e:	f7f2 fde3 	bl	8000658 <__aeabi_dmul>
 800da92:	a325      	add	r3, pc, #148	; (adr r3, 800db28 <__kernel_sin+0x148>)
 800da94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da98:	f7f2 fc26 	bl	80002e8 <__aeabi_dsub>
 800da9c:	4642      	mov	r2, r8
 800da9e:	464b      	mov	r3, r9
 800daa0:	f7f2 fdda 	bl	8000658 <__aeabi_dmul>
 800daa4:	4602      	mov	r2, r0
 800daa6:	460b      	mov	r3, r1
 800daa8:	4620      	mov	r0, r4
 800daaa:	4629      	mov	r1, r5
 800daac:	f7f2 fc1e 	bl	80002ec <__adddf3>
 800dab0:	4604      	mov	r4, r0
 800dab2:	460d      	mov	r5, r1
 800dab4:	ec45 4b10 	vmov	d0, r4, r5
 800dab8:	b003      	add	sp, #12
 800daba:	ecbd 8b04 	vpop	{d8-d9}
 800dabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac2:	4b1b      	ldr	r3, [pc, #108]	; (800db30 <__kernel_sin+0x150>)
 800dac4:	ec51 0b18 	vmov	r0, r1, d8
 800dac8:	2200      	movs	r2, #0
 800daca:	f7f2 fdc5 	bl	8000658 <__aeabi_dmul>
 800dace:	4632      	mov	r2, r6
 800dad0:	ec41 0b19 	vmov	d9, r0, r1
 800dad4:	463b      	mov	r3, r7
 800dad6:	4640      	mov	r0, r8
 800dad8:	4649      	mov	r1, r9
 800dada:	f7f2 fdbd 	bl	8000658 <__aeabi_dmul>
 800dade:	4602      	mov	r2, r0
 800dae0:	460b      	mov	r3, r1
 800dae2:	ec51 0b19 	vmov	r0, r1, d9
 800dae6:	f7f2 fbff 	bl	80002e8 <__aeabi_dsub>
 800daea:	4652      	mov	r2, sl
 800daec:	465b      	mov	r3, fp
 800daee:	f7f2 fdb3 	bl	8000658 <__aeabi_dmul>
 800daf2:	ec53 2b18 	vmov	r2, r3, d8
 800daf6:	f7f2 fbf7 	bl	80002e8 <__aeabi_dsub>
 800dafa:	a30b      	add	r3, pc, #44	; (adr r3, 800db28 <__kernel_sin+0x148>)
 800dafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db00:	4606      	mov	r6, r0
 800db02:	460f      	mov	r7, r1
 800db04:	4640      	mov	r0, r8
 800db06:	4649      	mov	r1, r9
 800db08:	f7f2 fda6 	bl	8000658 <__aeabi_dmul>
 800db0c:	4602      	mov	r2, r0
 800db0e:	460b      	mov	r3, r1
 800db10:	4630      	mov	r0, r6
 800db12:	4639      	mov	r1, r7
 800db14:	f7f2 fbea 	bl	80002ec <__adddf3>
 800db18:	4602      	mov	r2, r0
 800db1a:	460b      	mov	r3, r1
 800db1c:	4620      	mov	r0, r4
 800db1e:	4629      	mov	r1, r5
 800db20:	f7f2 fbe2 	bl	80002e8 <__aeabi_dsub>
 800db24:	e7c4      	b.n	800dab0 <__kernel_sin+0xd0>
 800db26:	bf00      	nop
 800db28:	55555549 	.word	0x55555549
 800db2c:	3fc55555 	.word	0x3fc55555
 800db30:	3fe00000 	.word	0x3fe00000
 800db34:	5acfd57c 	.word	0x5acfd57c
 800db38:	3de5d93a 	.word	0x3de5d93a
 800db3c:	8a2b9ceb 	.word	0x8a2b9ceb
 800db40:	3e5ae5e6 	.word	0x3e5ae5e6
 800db44:	57b1fe7d 	.word	0x57b1fe7d
 800db48:	3ec71de3 	.word	0x3ec71de3
 800db4c:	19c161d5 	.word	0x19c161d5
 800db50:	3f2a01a0 	.word	0x3f2a01a0
 800db54:	1110f8a6 	.word	0x1110f8a6
 800db58:	3f811111 	.word	0x3f811111

0800db5c <finite>:
 800db5c:	b082      	sub	sp, #8
 800db5e:	ed8d 0b00 	vstr	d0, [sp]
 800db62:	9801      	ldr	r0, [sp, #4]
 800db64:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800db68:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800db6c:	0fc0      	lsrs	r0, r0, #31
 800db6e:	b002      	add	sp, #8
 800db70:	4770      	bx	lr
 800db72:	0000      	movs	r0, r0
 800db74:	0000      	movs	r0, r0
	...

0800db78 <floor>:
 800db78:	ec51 0b10 	vmov	r0, r1, d0
 800db7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800db84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800db88:	2e13      	cmp	r6, #19
 800db8a:	ee10 5a10 	vmov	r5, s0
 800db8e:	ee10 8a10 	vmov	r8, s0
 800db92:	460c      	mov	r4, r1
 800db94:	dc32      	bgt.n	800dbfc <floor+0x84>
 800db96:	2e00      	cmp	r6, #0
 800db98:	da14      	bge.n	800dbc4 <floor+0x4c>
 800db9a:	a333      	add	r3, pc, #204	; (adr r3, 800dc68 <floor+0xf0>)
 800db9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba0:	f7f2 fba4 	bl	80002ec <__adddf3>
 800dba4:	2200      	movs	r2, #0
 800dba6:	2300      	movs	r3, #0
 800dba8:	f7f2 ffe6 	bl	8000b78 <__aeabi_dcmpgt>
 800dbac:	b138      	cbz	r0, 800dbbe <floor+0x46>
 800dbae:	2c00      	cmp	r4, #0
 800dbb0:	da57      	bge.n	800dc62 <floor+0xea>
 800dbb2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800dbb6:	431d      	orrs	r5, r3
 800dbb8:	d001      	beq.n	800dbbe <floor+0x46>
 800dbba:	4c2d      	ldr	r4, [pc, #180]	; (800dc70 <floor+0xf8>)
 800dbbc:	2500      	movs	r5, #0
 800dbbe:	4621      	mov	r1, r4
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	e025      	b.n	800dc10 <floor+0x98>
 800dbc4:	4f2b      	ldr	r7, [pc, #172]	; (800dc74 <floor+0xfc>)
 800dbc6:	4137      	asrs	r7, r6
 800dbc8:	ea01 0307 	and.w	r3, r1, r7
 800dbcc:	4303      	orrs	r3, r0
 800dbce:	d01f      	beq.n	800dc10 <floor+0x98>
 800dbd0:	a325      	add	r3, pc, #148	; (adr r3, 800dc68 <floor+0xf0>)
 800dbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd6:	f7f2 fb89 	bl	80002ec <__adddf3>
 800dbda:	2200      	movs	r2, #0
 800dbdc:	2300      	movs	r3, #0
 800dbde:	f7f2 ffcb 	bl	8000b78 <__aeabi_dcmpgt>
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	d0eb      	beq.n	800dbbe <floor+0x46>
 800dbe6:	2c00      	cmp	r4, #0
 800dbe8:	bfbe      	ittt	lt
 800dbea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dbee:	fa43 f606 	asrlt.w	r6, r3, r6
 800dbf2:	19a4      	addlt	r4, r4, r6
 800dbf4:	ea24 0407 	bic.w	r4, r4, r7
 800dbf8:	2500      	movs	r5, #0
 800dbfa:	e7e0      	b.n	800dbbe <floor+0x46>
 800dbfc:	2e33      	cmp	r6, #51	; 0x33
 800dbfe:	dd0b      	ble.n	800dc18 <floor+0xa0>
 800dc00:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dc04:	d104      	bne.n	800dc10 <floor+0x98>
 800dc06:	ee10 2a10 	vmov	r2, s0
 800dc0a:	460b      	mov	r3, r1
 800dc0c:	f7f2 fb6e 	bl	80002ec <__adddf3>
 800dc10:	ec41 0b10 	vmov	d0, r0, r1
 800dc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc18:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800dc1c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc20:	fa23 f707 	lsr.w	r7, r3, r7
 800dc24:	4207      	tst	r7, r0
 800dc26:	d0f3      	beq.n	800dc10 <floor+0x98>
 800dc28:	a30f      	add	r3, pc, #60	; (adr r3, 800dc68 <floor+0xf0>)
 800dc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2e:	f7f2 fb5d 	bl	80002ec <__adddf3>
 800dc32:	2200      	movs	r2, #0
 800dc34:	2300      	movs	r3, #0
 800dc36:	f7f2 ff9f 	bl	8000b78 <__aeabi_dcmpgt>
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	d0bf      	beq.n	800dbbe <floor+0x46>
 800dc3e:	2c00      	cmp	r4, #0
 800dc40:	da02      	bge.n	800dc48 <floor+0xd0>
 800dc42:	2e14      	cmp	r6, #20
 800dc44:	d103      	bne.n	800dc4e <floor+0xd6>
 800dc46:	3401      	adds	r4, #1
 800dc48:	ea25 0507 	bic.w	r5, r5, r7
 800dc4c:	e7b7      	b.n	800dbbe <floor+0x46>
 800dc4e:	2301      	movs	r3, #1
 800dc50:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800dc54:	fa03 f606 	lsl.w	r6, r3, r6
 800dc58:	4435      	add	r5, r6
 800dc5a:	4545      	cmp	r5, r8
 800dc5c:	bf38      	it	cc
 800dc5e:	18e4      	addcc	r4, r4, r3
 800dc60:	e7f2      	b.n	800dc48 <floor+0xd0>
 800dc62:	2500      	movs	r5, #0
 800dc64:	462c      	mov	r4, r5
 800dc66:	e7aa      	b.n	800dbbe <floor+0x46>
 800dc68:	8800759c 	.word	0x8800759c
 800dc6c:	7e37e43c 	.word	0x7e37e43c
 800dc70:	bff00000 	.word	0xbff00000
 800dc74:	000fffff 	.word	0x000fffff

0800dc78 <rint>:
 800dc78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc7a:	ec51 0b10 	vmov	r0, r1, d0
 800dc7e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dc82:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800dc86:	2e13      	cmp	r6, #19
 800dc88:	ee10 4a10 	vmov	r4, s0
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800dc92:	dc58      	bgt.n	800dd46 <rint+0xce>
 800dc94:	2e00      	cmp	r6, #0
 800dc96:	da2b      	bge.n	800dcf0 <rint+0x78>
 800dc98:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800dc9c:	4302      	orrs	r2, r0
 800dc9e:	d023      	beq.n	800dce8 <rint+0x70>
 800dca0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800dca4:	4302      	orrs	r2, r0
 800dca6:	4254      	negs	r4, r2
 800dca8:	4314      	orrs	r4, r2
 800dcaa:	0c4b      	lsrs	r3, r1, #17
 800dcac:	0b24      	lsrs	r4, r4, #12
 800dcae:	045b      	lsls	r3, r3, #17
 800dcb0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800dcb4:	ea44 0103 	orr.w	r1, r4, r3
 800dcb8:	4b32      	ldr	r3, [pc, #200]	; (800dd84 <rint+0x10c>)
 800dcba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800dcbe:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	4630      	mov	r0, r6
 800dcc8:	4639      	mov	r1, r7
 800dcca:	f7f2 fb0f 	bl	80002ec <__adddf3>
 800dcce:	e9cd 0100 	strd	r0, r1, [sp]
 800dcd2:	463b      	mov	r3, r7
 800dcd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcd8:	4632      	mov	r2, r6
 800dcda:	f7f2 fb05 	bl	80002e8 <__aeabi_dsub>
 800dcde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dce2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800dce6:	4639      	mov	r1, r7
 800dce8:	ec41 0b10 	vmov	d0, r0, r1
 800dcec:	b003      	add	sp, #12
 800dcee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcf0:	4a25      	ldr	r2, [pc, #148]	; (800dd88 <rint+0x110>)
 800dcf2:	4132      	asrs	r2, r6
 800dcf4:	ea01 0702 	and.w	r7, r1, r2
 800dcf8:	4307      	orrs	r7, r0
 800dcfa:	d0f5      	beq.n	800dce8 <rint+0x70>
 800dcfc:	0851      	lsrs	r1, r2, #1
 800dcfe:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800dd02:	4314      	orrs	r4, r2
 800dd04:	d00c      	beq.n	800dd20 <rint+0xa8>
 800dd06:	ea23 0201 	bic.w	r2, r3, r1
 800dd0a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dd0e:	2e13      	cmp	r6, #19
 800dd10:	fa43 f606 	asr.w	r6, r3, r6
 800dd14:	bf0c      	ite	eq
 800dd16:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800dd1a:	2400      	movne	r4, #0
 800dd1c:	ea42 0306 	orr.w	r3, r2, r6
 800dd20:	4918      	ldr	r1, [pc, #96]	; (800dd84 <rint+0x10c>)
 800dd22:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800dd26:	4622      	mov	r2, r4
 800dd28:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	4629      	mov	r1, r5
 800dd30:	f7f2 fadc 	bl	80002ec <__adddf3>
 800dd34:	e9cd 0100 	strd	r0, r1, [sp]
 800dd38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	462b      	mov	r3, r5
 800dd40:	f7f2 fad2 	bl	80002e8 <__aeabi_dsub>
 800dd44:	e7d0      	b.n	800dce8 <rint+0x70>
 800dd46:	2e33      	cmp	r6, #51	; 0x33
 800dd48:	dd07      	ble.n	800dd5a <rint+0xe2>
 800dd4a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dd4e:	d1cb      	bne.n	800dce8 <rint+0x70>
 800dd50:	ee10 2a10 	vmov	r2, s0
 800dd54:	f7f2 faca 	bl	80002ec <__adddf3>
 800dd58:	e7c6      	b.n	800dce8 <rint+0x70>
 800dd5a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800dd5e:	f04f 36ff 	mov.w	r6, #4294967295
 800dd62:	40d6      	lsrs	r6, r2
 800dd64:	4230      	tst	r0, r6
 800dd66:	d0bf      	beq.n	800dce8 <rint+0x70>
 800dd68:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800dd6c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800dd70:	bf1f      	itttt	ne
 800dd72:	ea24 0101 	bicne.w	r1, r4, r1
 800dd76:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800dd7a:	fa44 f202 	asrne.w	r2, r4, r2
 800dd7e:	ea41 0402 	orrne.w	r4, r1, r2
 800dd82:	e7cd      	b.n	800dd20 <rint+0xa8>
 800dd84:	0800e790 	.word	0x0800e790
 800dd88:	000fffff 	.word	0x000fffff
 800dd8c:	00000000 	.word	0x00000000

0800dd90 <scalbn>:
 800dd90:	b570      	push	{r4, r5, r6, lr}
 800dd92:	ec55 4b10 	vmov	r4, r5, d0
 800dd96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800dd9a:	4606      	mov	r6, r0
 800dd9c:	462b      	mov	r3, r5
 800dd9e:	b99a      	cbnz	r2, 800ddc8 <scalbn+0x38>
 800dda0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dda4:	4323      	orrs	r3, r4
 800dda6:	d036      	beq.n	800de16 <scalbn+0x86>
 800dda8:	4b39      	ldr	r3, [pc, #228]	; (800de90 <scalbn+0x100>)
 800ddaa:	4629      	mov	r1, r5
 800ddac:	ee10 0a10 	vmov	r0, s0
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	f7f2 fc51 	bl	8000658 <__aeabi_dmul>
 800ddb6:	4b37      	ldr	r3, [pc, #220]	; (800de94 <scalbn+0x104>)
 800ddb8:	429e      	cmp	r6, r3
 800ddba:	4604      	mov	r4, r0
 800ddbc:	460d      	mov	r5, r1
 800ddbe:	da10      	bge.n	800dde2 <scalbn+0x52>
 800ddc0:	a32b      	add	r3, pc, #172	; (adr r3, 800de70 <scalbn+0xe0>)
 800ddc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc6:	e03a      	b.n	800de3e <scalbn+0xae>
 800ddc8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ddcc:	428a      	cmp	r2, r1
 800ddce:	d10c      	bne.n	800ddea <scalbn+0x5a>
 800ddd0:	ee10 2a10 	vmov	r2, s0
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	4629      	mov	r1, r5
 800ddd8:	f7f2 fa88 	bl	80002ec <__adddf3>
 800dddc:	4604      	mov	r4, r0
 800ddde:	460d      	mov	r5, r1
 800dde0:	e019      	b.n	800de16 <scalbn+0x86>
 800dde2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dde6:	460b      	mov	r3, r1
 800dde8:	3a36      	subs	r2, #54	; 0x36
 800ddea:	4432      	add	r2, r6
 800ddec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ddf0:	428a      	cmp	r2, r1
 800ddf2:	dd08      	ble.n	800de06 <scalbn+0x76>
 800ddf4:	2d00      	cmp	r5, #0
 800ddf6:	a120      	add	r1, pc, #128	; (adr r1, 800de78 <scalbn+0xe8>)
 800ddf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ddfc:	da1c      	bge.n	800de38 <scalbn+0xa8>
 800ddfe:	a120      	add	r1, pc, #128	; (adr r1, 800de80 <scalbn+0xf0>)
 800de00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de04:	e018      	b.n	800de38 <scalbn+0xa8>
 800de06:	2a00      	cmp	r2, #0
 800de08:	dd08      	ble.n	800de1c <scalbn+0x8c>
 800de0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800de0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800de12:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800de16:	ec45 4b10 	vmov	d0, r4, r5
 800de1a:	bd70      	pop	{r4, r5, r6, pc}
 800de1c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800de20:	da19      	bge.n	800de56 <scalbn+0xc6>
 800de22:	f24c 3350 	movw	r3, #50000	; 0xc350
 800de26:	429e      	cmp	r6, r3
 800de28:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800de2c:	dd0a      	ble.n	800de44 <scalbn+0xb4>
 800de2e:	a112      	add	r1, pc, #72	; (adr r1, 800de78 <scalbn+0xe8>)
 800de30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d1e2      	bne.n	800ddfe <scalbn+0x6e>
 800de38:	a30f      	add	r3, pc, #60	; (adr r3, 800de78 <scalbn+0xe8>)
 800de3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3e:	f7f2 fc0b 	bl	8000658 <__aeabi_dmul>
 800de42:	e7cb      	b.n	800dddc <scalbn+0x4c>
 800de44:	a10a      	add	r1, pc, #40	; (adr r1, 800de70 <scalbn+0xe0>)
 800de46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d0b8      	beq.n	800ddc0 <scalbn+0x30>
 800de4e:	a10e      	add	r1, pc, #56	; (adr r1, 800de88 <scalbn+0xf8>)
 800de50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de54:	e7b4      	b.n	800ddc0 <scalbn+0x30>
 800de56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800de5a:	3236      	adds	r2, #54	; 0x36
 800de5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800de60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800de64:	4620      	mov	r0, r4
 800de66:	4b0c      	ldr	r3, [pc, #48]	; (800de98 <scalbn+0x108>)
 800de68:	2200      	movs	r2, #0
 800de6a:	e7e8      	b.n	800de3e <scalbn+0xae>
 800de6c:	f3af 8000 	nop.w
 800de70:	c2f8f359 	.word	0xc2f8f359
 800de74:	01a56e1f 	.word	0x01a56e1f
 800de78:	8800759c 	.word	0x8800759c
 800de7c:	7e37e43c 	.word	0x7e37e43c
 800de80:	8800759c 	.word	0x8800759c
 800de84:	fe37e43c 	.word	0xfe37e43c
 800de88:	c2f8f359 	.word	0xc2f8f359
 800de8c:	81a56e1f 	.word	0x81a56e1f
 800de90:	43500000 	.word	0x43500000
 800de94:	ffff3cb0 	.word	0xffff3cb0
 800de98:	3c900000 	.word	0x3c900000

0800de9c <_init>:
 800de9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de9e:	bf00      	nop
 800dea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dea2:	bc08      	pop	{r3}
 800dea4:	469e      	mov	lr, r3
 800dea6:	4770      	bx	lr

0800dea8 <_fini>:
 800dea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deaa:	bf00      	nop
 800deac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deae:	bc08      	pop	{r3}
 800deb0:	469e      	mov	lr, r3
 800deb2:	4770      	bx	lr
