
BOTterfly_NucleoF446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016714  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c00  080168e8  080168e8  000268e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080174e8  080174e8  000304a0  2**0
                  CONTENTS
  4 .ARM          00000008  080174e8  080174e8  000274e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080174f0  080174f0  000304a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080174f0  080174f0  000274f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080174f4  080174f4  000274f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a0  20000000  080174f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049fc  200004a0  08017998  000304a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004e9c  08017998  00034e9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a4e7  00000000  00000000  000304d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006786  00000000  00000000  0006a9b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002048  00000000  00000000  00071140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001dd8  00000000  00000000  00073188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c086  00000000  00000000  00074f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b2d0  00000000  00000000  000a0fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3cca  00000000  00000000  000cc2b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bff80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d84  00000000  00000000  001bffd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200004a0 	.word	0x200004a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080168cc 	.word	0x080168cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004a4 	.word	0x200004a4
 800020c:	080168cc 	.word	0x080168cc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96e 	b.w	8000fbc <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468c      	mov	ip, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8083 	bne.w	8000e0e <__udivmoddi4+0x116>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d947      	bls.n	8000d9e <__udivmoddi4+0xa6>
 8000d0e:	fab2 f282 	clz	r2, r2
 8000d12:	b142      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	f1c2 0020 	rsb	r0, r2, #32
 8000d18:	fa24 f000 	lsr.w	r0, r4, r0
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4097      	lsls	r7, r2
 8000d20:	ea40 0c01 	orr.w	ip, r0, r1
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d30:	fa1f fe87 	uxth.w	lr, r7
 8000d34:	fb08 c116 	mls	r1, r8, r6, ip
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4a:	f080 8119 	bcs.w	8000f80 <__udivmoddi4+0x288>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8116 	bls.w	8000f80 <__udivmoddi4+0x288>
 8000d54:	3e02      	subs	r6, #2
 8000d56:	443b      	add	r3, r7
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d60:	fb08 3310 	mls	r3, r8, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	193c      	adds	r4, r7, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8105 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f240 8102 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d80:	3802      	subs	r0, #2
 8000d82:	443c      	add	r4, r7
 8000d84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	b11d      	cbz	r5, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c5 4300 	strd	r4, r3, [r5]
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	b902      	cbnz	r2, 8000da2 <__udivmoddi4+0xaa>
 8000da0:	deff      	udf	#255	; 0xff
 8000da2:	fab2 f282 	clz	r2, r2
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d150      	bne.n	8000e4c <__udivmoddi4+0x154>
 8000daa:	1bcb      	subs	r3, r1, r7
 8000dac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db0:	fa1f f887 	uxth.w	r8, r7
 8000db4:	2601      	movs	r6, #1
 8000db6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dba:	0c21      	lsrs	r1, r4, #16
 8000dbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0xe2>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	f200 80e9 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1ac9      	subs	r1, r1, r3
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x10c>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x10a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80d9 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e7bf      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0x12e>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80b1 	beq.w	8000f7a <__udivmoddi4+0x282>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x1cc>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0x140>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80b8 	bhi.w	8000fa8 <__udivmoddi4+0x2b0>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	468c      	mov	ip, r1
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0a8      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000e46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e4a:	e7a5      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f603 	lsr.w	r6, r0, r3
 8000e54:	4097      	lsls	r7, r2
 8000e56:	fa01 f002 	lsl.w	r0, r1, r2
 8000e5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e5e:	40d9      	lsrs	r1, r3
 8000e60:	4330      	orrs	r0, r6
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e68:	fa1f f887 	uxth.w	r8, r7
 8000e6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e74:	fb06 f108 	mul.w	r1, r6, r8
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7e:	d909      	bls.n	8000e94 <__udivmoddi4+0x19c>
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e86:	f080 808d 	bcs.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	f240 808a 	bls.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	443b      	add	r3, r7
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b281      	uxth	r1, r0
 8000e98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ea0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea4:	fb00 f308 	mul.w	r3, r0, r8
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d907      	bls.n	8000ebc <__udivmoddi4+0x1c4>
 8000eac:	1879      	adds	r1, r7, r1
 8000eae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eb2:	d273      	bcs.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d971      	bls.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	4439      	add	r1, r7
 8000ebc:	1acb      	subs	r3, r1, r3
 8000ebe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ec2:	e778      	b.n	8000db6 <__udivmoddi4+0xbe>
 8000ec4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ec8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ecc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ed0:	431c      	orrs	r4, r3
 8000ed2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ede:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ee2:	431f      	orrs	r7, r3
 8000ee4:	0c3b      	lsrs	r3, r7, #16
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fa1f f884 	uxth.w	r8, r4
 8000eee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ef2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ef6:	fb09 fa08 	mul.w	sl, r9, r8
 8000efa:	458a      	cmp	sl, r1
 8000efc:	fa02 f206 	lsl.w	r2, r2, r6
 8000f00:	fa00 f306 	lsl.w	r3, r0, r6
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x220>
 8000f06:	1861      	adds	r1, r4, r1
 8000f08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f0c:	d248      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f0e:	458a      	cmp	sl, r1
 8000f10:	d946      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f12:	f1a9 0902 	sub.w	r9, r9, #2
 8000f16:	4421      	add	r1, r4
 8000f18:	eba1 010a 	sub.w	r1, r1, sl
 8000f1c:	b2bf      	uxth	r7, r7
 8000f1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f2a:	fb00 f808 	mul.w	r8, r0, r8
 8000f2e:	45b8      	cmp	r8, r7
 8000f30:	d907      	bls.n	8000f42 <__udivmoddi4+0x24a>
 8000f32:	19e7      	adds	r7, r4, r7
 8000f34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f38:	d22e      	bcs.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3a:	45b8      	cmp	r8, r7
 8000f3c:	d92c      	bls.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	4427      	add	r7, r4
 8000f42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f46:	eba7 0708 	sub.w	r7, r7, r8
 8000f4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4e:	454f      	cmp	r7, r9
 8000f50:	46c6      	mov	lr, r8
 8000f52:	4649      	mov	r1, r9
 8000f54:	d31a      	bcc.n	8000f8c <__udivmoddi4+0x294>
 8000f56:	d017      	beq.n	8000f88 <__udivmoddi4+0x290>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x27a>
 8000f5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f66:	40f2      	lsrs	r2, r6
 8000f68:	ea4c 0202 	orr.w	r2, ip, r2
 8000f6c:	40f7      	lsrs	r7, r6
 8000f6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f72:	2600      	movs	r6, #0
 8000f74:	4631      	mov	r1, r6
 8000f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e70b      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6fd      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f88:	4543      	cmp	r3, r8
 8000f8a:	d2e5      	bcs.n	8000f58 <__udivmoddi4+0x260>
 8000f8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f90:	eb69 0104 	sbc.w	r1, r9, r4
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7df      	b.n	8000f58 <__udivmoddi4+0x260>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e7d2      	b.n	8000f42 <__udivmoddi4+0x24a>
 8000f9c:	4660      	mov	r0, ip
 8000f9e:	e78d      	b.n	8000ebc <__udivmoddi4+0x1c4>
 8000fa0:	4681      	mov	r9, r0
 8000fa2:	e7b9      	b.n	8000f18 <__udivmoddi4+0x220>
 8000fa4:	4666      	mov	r6, ip
 8000fa6:	e775      	b.n	8000e94 <__udivmoddi4+0x19c>
 8000fa8:	4630      	mov	r0, r6
 8000faa:	e74a      	b.n	8000e42 <__udivmoddi4+0x14a>
 8000fac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb0:	4439      	add	r1, r7
 8000fb2:	e713      	b.n	8000ddc <__udivmoddi4+0xe4>
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	443c      	add	r4, r7
 8000fb8:	e724      	b.n	8000e04 <__udivmoddi4+0x10c>
 8000fba:	bf00      	nop

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <CTRL_Pos1_isArrived>:

/**
 * isArrived : Check if the robot is arrvied to its target
 * @return 1 if BOTterfly arrived to its target
 */
uint8_t CTRL_Pos1_isArrived(){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	if(targetX == 0 && targetY == 0){
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <CTRL_Pos1_isArrived+0x40>)
 8000fc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	f7ff fd99 	bl	8000b08 <__aeabi_dcmpeq>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00d      	beq.n	8000ff8 <CTRL_Pos1_isArrived+0x38>
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <CTRL_Pos1_isArrived+0x44>)
 8000fde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	f7ff fd8d 	bl	8000b08 <__aeabi_dcmpeq>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <CTRL_Pos1_isArrived+0x38>
		return 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <CTRL_Pos1_isArrived+0x3a>
	} else{
		return 0;
 8000ff8:	2300      	movs	r3, #0
	}
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200004c0 	.word	0x200004c0
 8001004:	200004c8 	.word	0x200004c8

08001008 <toZeroOne>:
/**
 * toZeroOne
 * @param x Value needs to be scaled between 0 and 1
 * @return x Corrected value
 */
double toZeroOne(double x) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	ed87 0b00 	vstr	d0, [r7]
	if (x < 0) return 0;
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800101e:	f7ff fd7d 	bl	8000b1c <__aeabi_dcmplt>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d004      	beq.n	8001032 <toZeroOne+0x2a>
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	f04f 0300 	mov.w	r3, #0
 8001030:	e00f      	b.n	8001052 <toZeroOne+0x4a>
	if (x > 1) return 1;
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <toZeroOne+0x5c>)
 8001038:	e9d7 0100 	ldrd	r0, r1, [r7]
 800103c:	f7ff fd8c 	bl	8000b58 <__aeabi_dcmpgt>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <toZeroOne+0x46>
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <toZeroOne+0x5c>)
 800104c:	e001      	b.n	8001052 <toZeroOne+0x4a>
	return x;
 800104e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001052:	ec43 2b17 	vmov	d7, r2, r3
}
 8001056:	eeb0 0a47 	vmov.f32	s0, s14
 800105a:	eef0 0a67 	vmov.f32	s1, s15
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	3ff00000 	.word	0x3ff00000

08001068 <toZeroTwoPi>:
/**
 * toZeroTwoPi
 * @param angle Angle needs to be scaled between 0 and 2*Pi
 * @return Corrected angle
 */
double toZeroTwoPi(double angle) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	ed87 0b00 	vstr	d0, [r7]
	return fmod(fmod(angle, M_TWOPI) + M_TWOPI, M_TWOPI);
 8001072:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80010c0 <toZeroTwoPi+0x58>
 8001076:	ed97 0b00 	vldr	d0, [r7]
 800107a:	f013 f8d3 	bl	8014224 <fmod>
 800107e:	ec51 0b10 	vmov	r0, r1, d0
 8001082:	a30f      	add	r3, pc, #60	; (adr r3, 80010c0 <toZeroTwoPi+0x58>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff f920 	bl	80002cc <__adddf3>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	ec43 2b17 	vmov	d7, r2, r3
 8001094:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 80010c0 <toZeroTwoPi+0x58>
 8001098:	eeb0 0a47 	vmov.f32	s0, s14
 800109c:	eef0 0a67 	vmov.f32	s1, s15
 80010a0:	f013 f8c0 	bl	8014224 <fmod>
 80010a4:	eeb0 7a40 	vmov.f32	s14, s0
 80010a8:	eef0 7a60 	vmov.f32	s15, s1
}
 80010ac:	eeb0 0a47 	vmov.f32	s0, s14
 80010b0:	eef0 0a67 	vmov.f32	s1, s15
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	f3af 8000 	nop.w
 80010c0:	54442d18 	.word	0x54442d18
 80010c4:	401921fb 	.word	0x401921fb

080010c8 <speedCurve>:
 * speedCurve
 * @param x value scaled between 0 and 1
 * @param a curve coefficient, increase this value to up the acceleration
 * @return speed calculated
 */
double speedCurve(double x, double a){
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	ed87 0b02 	vstr	d0, [r7, #8]
 80010d2:	ed87 1b00 	vstr	d1, [r7]
	double speed = atan(-x*(x-1)*a) / atan(0.25*a);
 80010d6:	68bc      	ldr	r4, [r7, #8]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	4b22      	ldr	r3, [pc, #136]	; (800116c <speedCurve+0xa4>)
 80010e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010e8:	f7ff f8ee 	bl	80002c8 <__aeabi_dsub>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4620      	mov	r0, r4
 80010f2:	4629      	mov	r1, r5
 80010f4:	f7ff faa0 	bl	8000638 <__aeabi_dmul>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001104:	f7ff fa98 	bl	8000638 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	ec43 2b17 	vmov	d7, r2, r3
 8001110:	eeb0 0a47 	vmov.f32	s0, s14
 8001114:	eef0 0a67 	vmov.f32	s1, s15
 8001118:	f012 fe32 	bl	8013d80 <atan>
 800111c:	ec55 4b10 	vmov	r4, r5, d0
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <speedCurve+0xa8>)
 8001126:	e9d7 0100 	ldrd	r0, r1, [r7]
 800112a:	f7ff fa85 	bl	8000638 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	ec43 2b17 	vmov	d7, r2, r3
 8001136:	eeb0 0a47 	vmov.f32	s0, s14
 800113a:	eef0 0a67 	vmov.f32	s1, s15
 800113e:	f012 fe1f 	bl	8013d80 <atan>
 8001142:	ec53 2b10 	vmov	r2, r3, d0
 8001146:	4620      	mov	r0, r4
 8001148:	4629      	mov	r1, r5
 800114a:	f7ff fb9f 	bl	800088c <__aeabi_ddiv>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return speed;
 8001156:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800115a:	ec43 2b17 	vmov	d7, r2, r3
}
 800115e:	eeb0 0a47 	vmov.f32	s0, s14
 8001162:	eef0 0a67 	vmov.f32	s1, s15
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bdb0      	pop	{r4, r5, r7, pc}
 800116c:	3ff00000 	.word	0x3ff00000
 8001170:	3fd00000 	.word	0x3fd00000
 8001174:	00000000 	.word	0x00000000

08001178 <CTRL_Pos1_PositionControl>:


/**
 * Pos_ControlLoop_2steps
 */
void CTRL_Pos1_PositionControl(){
 8001178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800117c:	ed2d 8b02 	vpush	{d8}
 8001180:	b094      	sub	sp, #80	; 0x50
 8001182:	af00      	add	r7, sp, #0
	static double spin_previous = 0;

	/* ODOMETRY ------------------------*/
	int32_t ticksLeft = ENC_GetCnt(&CodeurGauche);
 8001184:	48b6      	ldr	r0, [pc, #728]	; (8001460 <CTRL_Pos1_PositionControl+0x2e8>)
 8001186:	f000 fc0e 	bl	80019a6 <ENC_GetCnt>
 800118a:	4603      	mov	r3, r0
 800118c:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t ticksRight = ENC_GetCnt(&CodeurDroite);
 800118e:	48b5      	ldr	r0, [pc, #724]	; (8001464 <CTRL_Pos1_PositionControl+0x2ec>)
 8001190:	f000 fc09 	bl	80019a6 <ENC_GetCnt>
 8001194:	4603      	mov	r3, r0
 8001196:	643b      	str	r3, [r7, #64]	; 0x40
	ODO_OdometryUpdate(ticksLeft, ticksRight);
 8001198:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800119a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800119c:	f000 fd90 	bl	8001cc0 <ODO_OdometryUpdate>

	/* ROTATION ------------------------*/
	double angleToTarget = atan2(targetY - ODO_GetY(), targetX - ODO_GetX());
 80011a0:	4bb1      	ldr	r3, [pc, #708]	; (8001468 <CTRL_Pos1_PositionControl+0x2f0>)
 80011a2:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80011a6:	f000 fd65 	bl	8001c74 <ODO_GetY>
 80011aa:	ec53 2b10 	vmov	r2, r3, d0
 80011ae:	4650      	mov	r0, sl
 80011b0:	4659      	mov	r1, fp
 80011b2:	f7ff f889 	bl	80002c8 <__aeabi_dsub>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	ec43 2b18 	vmov	d8, r2, r3
 80011be:	4bab      	ldr	r3, [pc, #684]	; (800146c <CTRL_Pos1_PositionControl+0x2f4>)
 80011c0:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80011c4:	f000 fd44 	bl	8001c50 <ODO_GetX>
 80011c8:	ec53 2b10 	vmov	r2, r3, d0
 80011cc:	4650      	mov	r0, sl
 80011ce:	4659      	mov	r1, fp
 80011d0:	f7ff f87a 	bl	80002c8 <__aeabi_dsub>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	ec43 2b17 	vmov	d7, r2, r3
 80011dc:	eeb0 1a47 	vmov.f32	s2, s14
 80011e0:	eef0 1a67 	vmov.f32	s3, s15
 80011e4:	eeb0 0a48 	vmov.f32	s0, s16
 80011e8:	eef0 0a68 	vmov.f32	s1, s17
 80011ec:	f013 f818 	bl	8014220 <atan2>
 80011f0:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	// Rotation direction
	double angleRelative = toZeroTwoPi(angleToTarget) - toZeroTwoPi(ODO_GetO());
 80011f4:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80011f8:	f7ff ff36 	bl	8001068 <toZeroTwoPi>
 80011fc:	ec5b ab10 	vmov	sl, fp, d0
 8001200:	f000 fd4a 	bl	8001c98 <ODO_GetO>
 8001204:	eeb0 7a40 	vmov.f32	s14, s0
 8001208:	eef0 7a60 	vmov.f32	s15, s1
 800120c:	eeb0 0a47 	vmov.f32	s0, s14
 8001210:	eef0 0a67 	vmov.f32	s1, s15
 8001214:	f7ff ff28 	bl	8001068 <toZeroTwoPi>
 8001218:	ec53 2b10 	vmov	r2, r3, d0
 800121c:	4650      	mov	r0, sl
 800121e:	4659      	mov	r1, fp
 8001220:	f7ff f852 	bl	80002c8 <__aeabi_dsub>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if(angleRelative > M_PI) angleRelative = angleRelative - M_TWOPI;
 800122c:	a384      	add	r3, pc, #528	; (adr r3, 8001440 <CTRL_Pos1_PositionControl+0x2c8>)
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001236:	f7ff fc8f 	bl	8000b58 <__aeabi_dcmpgt>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00b      	beq.n	8001258 <CTRL_Pos1_PositionControl+0xe0>
 8001240:	a381      	add	r3, pc, #516	; (adr r3, 8001448 <CTRL_Pos1_PositionControl+0x2d0>)
 8001242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001246:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800124a:	f7ff f83d 	bl	80002c8 <__aeabi_dsub>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001256:	e014      	b.n	8001282 <CTRL_Pos1_PositionControl+0x10a>
	else if(angleRelative < (-M_PI)) angleRelative = angleRelative + M_TWOPI;
 8001258:	a37d      	add	r3, pc, #500	; (adr r3, 8001450 <CTRL_Pos1_PositionControl+0x2d8>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001262:	f7ff fc5b 	bl	8000b1c <__aeabi_dcmplt>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00a      	beq.n	8001282 <CTRL_Pos1_PositionControl+0x10a>
 800126c:	a376      	add	r3, pc, #472	; (adr r3, 8001448 <CTRL_Pos1_PositionControl+0x2d0>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001276:	f7ff f829 	bl	80002cc <__adddf3>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if (angleRelativeInitial == 0) angleRelativeInitial = angleRelative;
 8001282:	4b7b      	ldr	r3, [pc, #492]	; (8001470 <CTRL_Pos1_PositionControl+0x2f8>)
 8001284:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	f7ff fc3a 	bl	8000b08 <__aeabi_dcmpeq>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d004      	beq.n	80012a4 <CTRL_Pos1_PositionControl+0x12c>
 800129a:	4975      	ldr	r1, [pc, #468]	; (8001470 <CTRL_Pos1_PositionControl+0x2f8>)
 800129c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80012a0:	e9c1 2300 	strd	r2, r3, [r1]
	// Progression
	double rotationProgress = 1 - (fabs(angleRelative) / fabs(angleRelativeInitial));
 80012a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	4b6f      	ldr	r3, [pc, #444]	; (8001470 <CTRL_Pos1_PositionControl+0x2f8>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	4690      	mov	r8, r2
 80012b8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80012bc:	4642      	mov	r2, r8
 80012be:	464b      	mov	r3, r9
 80012c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012c4:	f7ff fae2 	bl	800088c <__aeabi_ddiv>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	f04f 0000 	mov.w	r0, #0
 80012d0:	4968      	ldr	r1, [pc, #416]	; (8001474 <CTRL_Pos1_PositionControl+0x2fc>)
 80012d2:	f7fe fff9 	bl	80002c8 <__aeabi_dsub>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	rotationProgress = toZeroOne(rotationProgress);
 80012de:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80012e2:	f7ff fe91 	bl	8001008 <toZeroOne>
 80012e6:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

	/* MOVE ----------------------------*/
	double distanceToTarget = sqrt(pow(targetX - ODO_GetX(),2) + pow(targetY - ODO_GetY(),2));
 80012ea:	4b60      	ldr	r3, [pc, #384]	; (800146c <CTRL_Pos1_PositionControl+0x2f4>)
 80012ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80012f0:	f000 fcae 	bl	8001c50 <ODO_GetX>
 80012f4:	ec53 2b10 	vmov	r2, r3, d0
 80012f8:	4640      	mov	r0, r8
 80012fa:	4649      	mov	r1, r9
 80012fc:	f7fe ffe4 	bl	80002c8 <__aeabi_dsub>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	ec43 2b17 	vmov	d7, r2, r3
 8001308:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8001458 <CTRL_Pos1_PositionControl+0x2e0>
 800130c:	eeb0 0a47 	vmov.f32	s0, s14
 8001310:	eef0 0a67 	vmov.f32	s1, s15
 8001314:	f013 f80c 	bl	8014330 <pow>
 8001318:	ec5b ab10 	vmov	sl, fp, d0
 800131c:	4b52      	ldr	r3, [pc, #328]	; (8001468 <CTRL_Pos1_PositionControl+0x2f0>)
 800131e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001322:	f000 fca7 	bl	8001c74 <ODO_GetY>
 8001326:	ec53 2b10 	vmov	r2, r3, d0
 800132a:	4640      	mov	r0, r8
 800132c:	4649      	mov	r1, r9
 800132e:	f7fe ffcb 	bl	80002c8 <__aeabi_dsub>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	ec43 2b17 	vmov	d7, r2, r3
 800133a:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8001458 <CTRL_Pos1_PositionControl+0x2e0>
 800133e:	eeb0 0a47 	vmov.f32	s0, s14
 8001342:	eef0 0a67 	vmov.f32	s1, s15
 8001346:	f012 fff3 	bl	8014330 <pow>
 800134a:	ec53 2b10 	vmov	r2, r3, d0
 800134e:	4650      	mov	r0, sl
 8001350:	4659      	mov	r1, fp
 8001352:	f7fe ffbb 	bl	80002cc <__adddf3>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	ec43 2b17 	vmov	d7, r2, r3
 800135e:	eeb0 0a47 	vmov.f32	s0, s14
 8001362:	eef0 0a67 	vmov.f32	s1, s15
 8001366:	f013 f891 	bl	801448c <sqrt>
 800136a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	if (distanceToTargetInitial == 0) distanceToTargetInitial = distanceToTarget;
 800136e:	4b42      	ldr	r3, [pc, #264]	; (8001478 <CTRL_Pos1_PositionControl+0x300>)
 8001370:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	f7ff fbc4 	bl	8000b08 <__aeabi_dcmpeq>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d004      	beq.n	8001390 <CTRL_Pos1_PositionControl+0x218>
 8001386:	493c      	ldr	r1, [pc, #240]	; (8001478 <CTRL_Pos1_PositionControl+0x300>)
 8001388:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800138c:	e9c1 2300 	strd	r2, r3, [r1]
	// Progression
	double moveProgress = 1 - toZeroOne(distanceToTarget / distanceToTargetInitial);
 8001390:	4b39      	ldr	r3, [pc, #228]	; (8001478 <CTRL_Pos1_PositionControl+0x300>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800139a:	f7ff fa77 	bl	800088c <__aeabi_ddiv>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	ec43 2b17 	vmov	d7, r2, r3
 80013a6:	eeb0 0a47 	vmov.f32	s0, s14
 80013aa:	eef0 0a67 	vmov.f32	s1, s15
 80013ae:	f7ff fe2b 	bl	8001008 <toZeroOne>
 80013b2:	ec53 2b10 	vmov	r2, r3, d0
 80013b6:	f04f 0000 	mov.w	r0, #0
 80013ba:	492e      	ldr	r1, [pc, #184]	; (8001474 <CTRL_Pos1_PositionControl+0x2fc>)
 80013bc:	f7fe ff84 	bl	80002c8 <__aeabi_dsub>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	e9c7 2308 	strd	r2, r3, [r7, #32]

	// Tests
	tckG += ticksLeft;
 80013c8:	4b2c      	ldr	r3, [pc, #176]	; (800147c <CTRL_Pos1_PositionControl+0x304>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ce:	4413      	add	r3, r2
 80013d0:	4a2a      	ldr	r2, [pc, #168]	; (800147c <CTRL_Pos1_PositionControl+0x304>)
 80013d2:	6013      	str	r3, [r2, #0]
	tckD += ticksRight;
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <CTRL_Pos1_PositionControl+0x308>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013da:	4413      	add	r3, r2
 80013dc:	4a28      	ldr	r2, [pc, #160]	; (8001480 <CTRL_Pos1_PositionControl+0x308>)
 80013de:	6013      	str	r3, [r2, #0]

	/* STATE MACHINE -------------------*/
	switch(state){
 80013e0:	4b28      	ldr	r3, [pc, #160]	; (8001484 <CTRL_Pos1_PositionControl+0x30c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	f000 80e5 	beq.w	80015b4 <CTRL_Pos1_PositionControl+0x43c>
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	f300 81ea 	bgt.w	80017c4 <CTRL_Pos1_PositionControl+0x64c>
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d002      	beq.n	80013fa <CTRL_Pos1_PositionControl+0x282>
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d04d      	beq.n	8001494 <CTRL_Pos1_PositionControl+0x31c>
 80013f8:	e1e4      	b.n	80017c4 <CTRL_Pos1_PositionControl+0x64c>

	case POS_STATE_STANDBY:
		MOT_SetDutyCycle(&MoteurGauche, 0);
 80013fa:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001488 <CTRL_Pos1_PositionControl+0x310>
 80013fe:	4823      	ldr	r0, [pc, #140]	; (800148c <CTRL_Pos1_PositionControl+0x314>)
 8001400:	f000 fb96 	bl	8001b30 <MOT_SetDutyCycle>
		MOT_SetDutyCycle(&MoteurDroite, 0);
 8001404:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001488 <CTRL_Pos1_PositionControl+0x310>
 8001408:	4821      	ldr	r0, [pc, #132]	; (8001490 <CTRL_Pos1_PositionControl+0x318>)
 800140a:	f000 fb91 	bl	8001b30 <MOT_SetDutyCycle>

		distanceToTargetInitial = 0;
 800140e:	491a      	ldr	r1, [pc, #104]	; (8001478 <CTRL_Pos1_PositionControl+0x300>)
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	e9c1 2300 	strd	r2, r3, [r1]
		angleRelativeInitial = 0;
 800141c:	4914      	ldr	r1, [pc, #80]	; (8001470 <CTRL_Pos1_PositionControl+0x2f8>)
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	e9c1 2300 	strd	r2, r3, [r1]

		if (!CTRL_Pos1_isArrived()) {
 800142a:	f7ff fdc9 	bl	8000fc0 <CTRL_Pos1_isArrived>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	f040 81cb 	bne.w	80017cc <CTRL_Pos1_PositionControl+0x654>
			state = POS_STATE_ROTATION;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <CTRL_Pos1_PositionControl+0x30c>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800143c:	e1c6      	b.n	80017cc <CTRL_Pos1_PositionControl+0x654>
 800143e:	bf00      	nop
 8001440:	54442d18 	.word	0x54442d18
 8001444:	400921fb 	.word	0x400921fb
 8001448:	54442d18 	.word	0x54442d18
 800144c:	401921fb 	.word	0x401921fb
 8001450:	54442d18 	.word	0x54442d18
 8001454:	c00921fb 	.word	0xc00921fb
 8001458:	00000000 	.word	0x00000000
 800145c:	40000000 	.word	0x40000000
 8001460:	200045a8 	.word	0x200045a8
 8001464:	20004590 	.word	0x20004590
 8001468:	200004c8 	.word	0x200004c8
 800146c:	200004c0 	.word	0x200004c0
 8001470:	200004d8 	.word	0x200004d8
 8001474:	3ff00000 	.word	0x3ff00000
 8001478:	200004d0 	.word	0x200004d0
 800147c:	200004e0 	.word	0x200004e0
 8001480:	200004e4 	.word	0x200004e4
 8001484:	200004bc 	.word	0x200004bc
 8001488:	00000000 	.word	0x00000000
 800148c:	20004530 	.word	0x20004530
 8001490:	20004560 	.word	0x20004560

	case POS_STATE_ROTATION:
		printf("angleRelative = %lf\r\n", angleRelative);
 8001494:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001498:	48bb      	ldr	r0, [pc, #748]	; (8001788 <CTRL_Pos1_PositionControl+0x610>)
 800149a:	f010 faa5 	bl	80119e8 <iprintf>

		// Choix du sens de rotation
		if (angleRelative < M_PI && angleRelative > 0){
 800149e:	a3ac      	add	r3, pc, #688	; (adr r3, 8001750 <CTRL_Pos1_PositionControl+0x5d8>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80014a8:	f7ff fb38 	bl	8000b1c <__aeabi_dcmplt>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d013      	beq.n	80014da <CTRL_Pos1_PositionControl+0x362>
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80014be:	f7ff fb4b 	bl	8000b58 <__aeabi_dcmpgt>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d008      	beq.n	80014da <CTRL_Pos1_PositionControl+0x362>
			MOT_SetDirection(&MoteurGauche, MOT_FUNCTIONS_REVERSE);
 80014c8:	2102      	movs	r1, #2
 80014ca:	48b0      	ldr	r0, [pc, #704]	; (800178c <CTRL_Pos1_PositionControl+0x614>)
 80014cc:	f000 fad8 	bl	8001a80 <MOT_SetDirection>
			MOT_SetDirection(&MoteurDroite, MOT_FUNCTIONS_FORWARD);
 80014d0:	2101      	movs	r1, #1
 80014d2:	48af      	ldr	r0, [pc, #700]	; (8001790 <CTRL_Pos1_PositionControl+0x618>)
 80014d4:	f000 fad4 	bl	8001a80 <MOT_SetDirection>
 80014d8:	e007      	b.n	80014ea <CTRL_Pos1_PositionControl+0x372>
		} else {
			MOT_SetDirection(&MoteurGauche, MOT_FUNCTIONS_FORWARD);
 80014da:	2101      	movs	r1, #1
 80014dc:	48ab      	ldr	r0, [pc, #684]	; (800178c <CTRL_Pos1_PositionControl+0x614>)
 80014de:	f000 facf 	bl	8001a80 <MOT_SetDirection>
			MOT_SetDirection(&MoteurDroite, MOT_FUNCTIONS_REVERSE);
 80014e2:	2102      	movs	r1, #2
 80014e4:	48aa      	ldr	r0, [pc, #680]	; (8001790 <CTRL_Pos1_PositionControl+0x618>)
 80014e6:	f000 facb 	bl	8001a80 <MOT_SetDirection>
		}

		// Contrôle de la vitesse
		double spin = POS_ROT_SMAX * speedCurve(rotationProgress, 1);
 80014ea:	ed9f 1b9b 	vldr	d1, [pc, #620]	; 8001758 <CTRL_Pos1_PositionControl+0x5e0>
 80014ee:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80014f2:	f7ff fde9 	bl	80010c8 <speedCurve>
 80014f6:	ec51 0b10 	vmov	r0, r1, d0
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	4ba5      	ldr	r3, [pc, #660]	; (8001794 <CTRL_Pos1_PositionControl+0x61c>)
 8001500:	f7ff f89a 	bl	8000638 <__aeabi_dmul>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	e9c7 2302 	strd	r2, r3, [r7, #8]
		spin += POS_ROT_SMIN * (1 - rotationProgress);
 800150c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001510:	f04f 0000 	mov.w	r0, #0
 8001514:	49a0      	ldr	r1, [pc, #640]	; (8001798 <CTRL_Pos1_PositionControl+0x620>)
 8001516:	f7fe fed7 	bl	80002c8 <__aeabi_dsub>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	4b9d      	ldr	r3, [pc, #628]	; (800179c <CTRL_Pos1_PositionControl+0x624>)
 8001528:	f7ff f886 	bl	8000638 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001534:	f7fe feca 	bl	80002cc <__adddf3>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		CTRL_SpeedControl(&MoteurGauche, &CodeurGauche, ticksLeft, spin);
 8001540:	ed97 0b02 	vldr	d0, [r7, #8]
 8001544:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001546:	4996      	ldr	r1, [pc, #600]	; (80017a0 <CTRL_Pos1_PositionControl+0x628>)
 8001548:	4890      	ldr	r0, [pc, #576]	; (800178c <CTRL_Pos1_PositionControl+0x614>)
 800154a:	f000 f949 	bl	80017e0 <CTRL_SpeedControl>
		CTRL_SpeedControl(&MoteurDroite, &CodeurDroite, ticksRight, spin);
 800154e:	ed97 0b02 	vldr	d0, [r7, #8]
 8001552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001554:	4993      	ldr	r1, [pc, #588]	; (80017a4 <CTRL_Pos1_PositionControl+0x62c>)
 8001556:	488e      	ldr	r0, [pc, #568]	; (8001790 <CTRL_Pos1_PositionControl+0x618>)
 8001558:	f000 f942 	bl	80017e0 <CTRL_SpeedControl>

		// Stop conditions
		printf("spin = %lf\r\n", spin);
 800155c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001560:	4891      	ldr	r0, [pc, #580]	; (80017a8 <CTRL_Pos1_PositionControl+0x630>)
 8001562:	f010 fa41 	bl	80119e8 <iprintf>
		if(spin == spin_previous && (angleRelative <= 0.1 && angleRelative >= -0.1)){
 8001566:	4b91      	ldr	r3, [pc, #580]	; (80017ac <CTRL_Pos1_PositionControl+0x634>)
 8001568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001570:	f7ff faca 	bl	8000b08 <__aeabi_dcmpeq>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d016      	beq.n	80015a8 <CTRL_Pos1_PositionControl+0x430>
 800157a:	a379      	add	r3, pc, #484	; (adr r3, 8001760 <CTRL_Pos1_PositionControl+0x5e8>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001584:	f7ff fad4 	bl	8000b30 <__aeabi_dcmple>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00c      	beq.n	80015a8 <CTRL_Pos1_PositionControl+0x430>
 800158e:	a376      	add	r3, pc, #472	; (adr r3, 8001768 <CTRL_Pos1_PositionControl+0x5f0>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001598:	f7ff fad4 	bl	8000b44 <__aeabi_dcmpge>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <CTRL_Pos1_PositionControl+0x430>
			state = POS_STATE_MOVE;
 80015a2:	4b83      	ldr	r3, [pc, #524]	; (80017b0 <CTRL_Pos1_PositionControl+0x638>)
 80015a4:	2202      	movs	r2, #2
 80015a6:	701a      	strb	r2, [r3, #0]
		}

		spin_previous = spin;
 80015a8:	4980      	ldr	r1, [pc, #512]	; (80017ac <CTRL_Pos1_PositionControl+0x634>)
 80015aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015ae:	e9c1 2300 	strd	r2, r3, [r1]

		break;
 80015b2:	e10c      	b.n	80017ce <CTRL_Pos1_PositionControl+0x656>
	case POS_STATE_MOVE:
		//printf("moveProgress = %lf\r\n", moveProgress);
		//printf("angleRelative = %lf\r\n", angleRelative);

		// Choix du sens de rotation
		MOT_SetDirection(&MoteurGauche, MOT_FUNCTIONS_FORWARD);
 80015b4:	2101      	movs	r1, #1
 80015b6:	4875      	ldr	r0, [pc, #468]	; (800178c <CTRL_Pos1_PositionControl+0x614>)
 80015b8:	f000 fa62 	bl	8001a80 <MOT_SetDirection>
		MOT_SetDirection(&MoteurDroite, MOT_FUNCTIONS_FORWARD);
 80015bc:	2101      	movs	r1, #1
 80015be:	4874      	ldr	r0, [pc, #464]	; (8001790 <CTRL_Pos1_PositionControl+0x618>)
 80015c0:	f000 fa5e 	bl	8001a80 <MOT_SetDirection>

		// Contrôle de la vitesse
		double speed = POS_LIN_SMAX * speedCurve(moveProgress, 1);
 80015c4:	ed9f 1b64 	vldr	d1, [pc, #400]	; 8001758 <CTRL_Pos1_PositionControl+0x5e0>
 80015c8:	ed97 0b08 	vldr	d0, [r7, #32]
 80015cc:	f7ff fd7c 	bl	80010c8 <speedCurve>
 80015d0:	ec51 0b10 	vmov	r0, r1, d0
 80015d4:	a366      	add	r3, pc, #408	; (adr r3, 8001770 <CTRL_Pos1_PositionControl+0x5f8>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff f82d 	bl	8000638 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		speed += POS_LIN_SMIN * (1 - moveProgress);
 80015e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015ea:	f04f 0000 	mov.w	r0, #0
 80015ee:	496a      	ldr	r1, [pc, #424]	; (8001798 <CTRL_Pos1_PositionControl+0x620>)
 80015f0:	f7fe fe6a 	bl	80002c8 <__aeabi_dsub>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	4b6c      	ldr	r3, [pc, #432]	; (80017b4 <CTRL_Pos1_PositionControl+0x63c>)
 8001602:	f7ff f819 	bl	8000638 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800160e:	f7fe fe5d 	bl	80002cc <__adddf3>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double spCorrection = 1 - fabs(angleRelative);
 800161a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800161c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800161e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001622:	4622      	mov	r2, r4
 8001624:	462b      	mov	r3, r5
 8001626:	f04f 0000 	mov.w	r0, #0
 800162a:	495b      	ldr	r1, [pc, #364]	; (8001798 <CTRL_Pos1_PositionControl+0x620>)
 800162c:	f7fe fe4c 	bl	80002c8 <__aeabi_dsub>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	e9c7 2304 	strd	r2, r3, [r7, #16]

		if(distanceToTarget < 50){
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	4b5d      	ldr	r3, [pc, #372]	; (80017b4 <CTRL_Pos1_PositionControl+0x63c>)
 800163e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001642:	f7ff fa6b 	bl	8000b1c <__aeabi_dcmplt>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00e      	beq.n	800166a <CTRL_Pos1_PositionControl+0x4f2>
			CTRL_SpeedControl(&MoteurGauche, &CodeurGauche, ticksLeft, speed);
 800164c:	ed97 0b06 	vldr	d0, [r7, #24]
 8001650:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001652:	4953      	ldr	r1, [pc, #332]	; (80017a0 <CTRL_Pos1_PositionControl+0x628>)
 8001654:	484d      	ldr	r0, [pc, #308]	; (800178c <CTRL_Pos1_PositionControl+0x614>)
 8001656:	f000 f8c3 	bl	80017e0 <CTRL_SpeedControl>
			CTRL_SpeedControl(&MoteurDroite, &CodeurDroite, ticksRight, speed);
 800165a:	ed97 0b06 	vldr	d0, [r7, #24]
 800165e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001660:	4950      	ldr	r1, [pc, #320]	; (80017a4 <CTRL_Pos1_PositionControl+0x62c>)
 8001662:	484b      	ldr	r0, [pc, #300]	; (8001790 <CTRL_Pos1_PositionControl+0x618>)
 8001664:	f000 f8bc 	bl	80017e0 <CTRL_SpeedControl>
 8001668:	e03f      	b.n	80016ea <CTRL_Pos1_PositionControl+0x572>
		}
		else{
			if(angleRelative < 0){
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001676:	f7ff fa51 	bl	8000b1c <__aeabi_dcmplt>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d01a      	beq.n	80016b6 <CTRL_Pos1_PositionControl+0x53e>
				CTRL_SpeedControl(&MoteurGauche, &CodeurGauche, ticksLeft, speed);
 8001680:	ed97 0b06 	vldr	d0, [r7, #24]
 8001684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001686:	4946      	ldr	r1, [pc, #280]	; (80017a0 <CTRL_Pos1_PositionControl+0x628>)
 8001688:	4840      	ldr	r0, [pc, #256]	; (800178c <CTRL_Pos1_PositionControl+0x614>)
 800168a:	f000 f8a9 	bl	80017e0 <CTRL_SpeedControl>
				CTRL_SpeedControl(&MoteurDroite, &CodeurDroite, ticksRight, speed * spCorrection);
 800168e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001692:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001696:	f7fe ffcf 	bl	8000638 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	ec43 2b17 	vmov	d7, r2, r3
 80016a2:	eeb0 0a47 	vmov.f32	s0, s14
 80016a6:	eef0 0a67 	vmov.f32	s1, s15
 80016aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016ac:	493d      	ldr	r1, [pc, #244]	; (80017a4 <CTRL_Pos1_PositionControl+0x62c>)
 80016ae:	4838      	ldr	r0, [pc, #224]	; (8001790 <CTRL_Pos1_PositionControl+0x618>)
 80016b0:	f000 f896 	bl	80017e0 <CTRL_SpeedControl>
 80016b4:	e019      	b.n	80016ea <CTRL_Pos1_PositionControl+0x572>
			} else{
				CTRL_SpeedControl(&MoteurGauche, &CodeurGauche, ticksLeft, speed * spCorrection);
 80016b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016be:	f7fe ffbb 	bl	8000638 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	ec43 2b17 	vmov	d7, r2, r3
 80016ca:	eeb0 0a47 	vmov.f32	s0, s14
 80016ce:	eef0 0a67 	vmov.f32	s1, s15
 80016d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016d4:	4932      	ldr	r1, [pc, #200]	; (80017a0 <CTRL_Pos1_PositionControl+0x628>)
 80016d6:	482d      	ldr	r0, [pc, #180]	; (800178c <CTRL_Pos1_PositionControl+0x614>)
 80016d8:	f000 f882 	bl	80017e0 <CTRL_SpeedControl>
				CTRL_SpeedControl(&MoteurDroite, &CodeurDroite, ticksRight, speed);
 80016dc:	ed97 0b06 	vldr	d0, [r7, #24]
 80016e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016e2:	4930      	ldr	r1, [pc, #192]	; (80017a4 <CTRL_Pos1_PositionControl+0x62c>)
 80016e4:	482a      	ldr	r0, [pc, #168]	; (8001790 <CTRL_Pos1_PositionControl+0x618>)
 80016e6:	f000 f87b 	bl	80017e0 <CTRL_SpeedControl>
			}
		}

		// Stop conditions
		//printf("speed = %lf\r\n", speed);
		if(angleRelative < (M_PI/2) && angleRelative > (-M_PI/2) && distanceToTarget < 10){
 80016ea:	a323      	add	r3, pc, #140	; (adr r3, 8001778 <CTRL_Pos1_PositionControl+0x600>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80016f4:	f7ff fa12 	bl	8000b1c <__aeabi_dcmplt>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d100      	bne.n	8001700 <CTRL_Pos1_PositionControl+0x588>
			state = POS_STATE_STANDBY;
			targetX = 0;
			targetY = 0;
		}
		break;
 80016fe:	e066      	b.n	80017ce <CTRL_Pos1_PositionControl+0x656>
		if(angleRelative < (M_PI/2) && angleRelative > (-M_PI/2) && distanceToTarget < 10){
 8001700:	a31f      	add	r3, pc, #124	; (adr r3, 8001780 <CTRL_Pos1_PositionControl+0x608>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800170a:	f7ff fa25 	bl	8000b58 <__aeabi_dcmpgt>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d100      	bne.n	8001716 <CTRL_Pos1_PositionControl+0x59e>
		break;
 8001714:	e05b      	b.n	80017ce <CTRL_Pos1_PositionControl+0x656>
		if(angleRelative < (M_PI/2) && angleRelative > (-M_PI/2) && distanceToTarget < 10){
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <CTRL_Pos1_PositionControl+0x640>)
 800171c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001720:	f7ff f9fc 	bl	8000b1c <__aeabi_dcmplt>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d100      	bne.n	800172c <CTRL_Pos1_PositionControl+0x5b4>
		break;
 800172a:	e050      	b.n	80017ce <CTRL_Pos1_PositionControl+0x656>
			state = POS_STATE_STANDBY;
 800172c:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <CTRL_Pos1_PositionControl+0x638>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
			targetX = 0;
 8001732:	4922      	ldr	r1, [pc, #136]	; (80017bc <CTRL_Pos1_PositionControl+0x644>)
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	e9c1 2300 	strd	r2, r3, [r1]
			targetY = 0;
 8001740:	491f      	ldr	r1, [pc, #124]	; (80017c0 <CTRL_Pos1_PositionControl+0x648>)
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 800174e:	e03e      	b.n	80017ce <CTRL_Pos1_PositionControl+0x656>
 8001750:	54442d18 	.word	0x54442d18
 8001754:	400921fb 	.word	0x400921fb
 8001758:	00000000 	.word	0x00000000
 800175c:	3ff00000 	.word	0x3ff00000
 8001760:	9999999a 	.word	0x9999999a
 8001764:	3fb99999 	.word	0x3fb99999
 8001768:	9999999a 	.word	0x9999999a
 800176c:	bfb99999 	.word	0xbfb99999
 8001770:	00000000 	.word	0x00000000
 8001774:	4062c000 	.word	0x4062c000
 8001778:	54442d18 	.word	0x54442d18
 800177c:	3ff921fb 	.word	0x3ff921fb
 8001780:	54442d18 	.word	0x54442d18
 8001784:	bff921fb 	.word	0xbff921fb
 8001788:	08016920 	.word	0x08016920
 800178c:	20004530 	.word	0x20004530
 8001790:	20004560 	.word	0x20004560
 8001794:	405e0000 	.word	0x405e0000
 8001798:	3ff00000 	.word	0x3ff00000
 800179c:	40540000 	.word	0x40540000
 80017a0:	200045a8 	.word	0x200045a8
 80017a4:	20004590 	.word	0x20004590
 80017a8:	08016938 	.word	0x08016938
 80017ac:	200004e8 	.word	0x200004e8
 80017b0:	200004bc 	.word	0x200004bc
 80017b4:	40490000 	.word	0x40490000
 80017b8:	40240000 	.word	0x40240000
 80017bc:	200004c0 	.word	0x200004c0
 80017c0:	200004c8 	.word	0x200004c8

	default:
		state = POS_STATE_STANDBY;
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <CTRL_Pos1_PositionControl+0x664>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
		break;
 80017ca:	e000      	b.n	80017ce <CTRL_Pos1_PositionControl+0x656>
		break;
 80017cc:	bf00      	nop
	}
}
 80017ce:	bf00      	nop
 80017d0:	3750      	adds	r7, #80	; 0x50
 80017d2:	46bd      	mov	sp, r7
 80017d4:	ecbd 8b02 	vpop	{d8}
 80017d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017dc:	200004bc 	.word	0x200004bc

080017e0 <CTRL_SpeedControl>:
 * @param Motor Motor HandleTypeDef
 * @param Encoder Encoder HandleTypeDef
 * @return TBD
 */
int32_t CTRL_SpeedControl(MOT_HandleTypeDef* Motor, ENC_HandleTypeDef* Encoder,
		int32_t ticks, double consigne){
 80017e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017e4:	b08a      	sub	sp, #40	; 0x28
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6178      	str	r0, [r7, #20]
 80017ea:	6139      	str	r1, [r7, #16]
 80017ec:	60fa      	str	r2, [r7, #12]
 80017ee:	ed87 0b00 	vstr	d0, [r7]

	// Force tick to positive value
	if(ticks < 0) ticks = ticks * (-1);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	da02      	bge.n	80017fe <CTRL_SpeedControl+0x1e>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	425b      	negs	r3, r3
 80017fc:	60fb      	str	r3, [r7, #12]

	// Speed calculation
	int freq_codeuse = SPEED_CONTROL_FREQUENCY * ticks;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2232      	movs	r2, #50	; 0x32
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	623b      	str	r3, [r7, #32]
	//float speed = ((float)freq_codeuse * ((float)WHEEL_PERIMETER/Encoder->TicksPerRev));
	float speed = ((float)freq_codeuse * Encoder->TicksCoeff); // mm/s
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001812:	ee17 0a90 	vmov	r0, s15
 8001816:	f7fe feb7 	bl	8000588 <__aeabi_f2d>
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001820:	f7fe ff0a 	bl	8000638 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff f9fc 	bl	8000c28 <__aeabi_d2f>
 8001830:	4603      	mov	r3, r0
 8001832:	61fb      	str	r3, [r7, #28]

	float erreur = consigne - speed;
 8001834:	69f8      	ldr	r0, [r7, #28]
 8001836:	f7fe fea7 	bl	8000588 <__aeabi_f2d>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001842:	f7fe fd41 	bl	80002c8 <__aeabi_dsub>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f9eb 	bl	8000c28 <__aeabi_d2f>
 8001852:	4603      	mov	r3, r0
 8001854:	61bb      	str	r3, [r7, #24]
	float s = 60; // Command offset
 8001856:	4b36      	ldr	r3, [pc, #216]	; (8001930 <CTRL_SpeedControl+0x150>)
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
	s = s + Motor->Kp * erreur;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001860:	edd7 7a06 	vldr	s15, [r7, #24]
 8001864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001868:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800186c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001870:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	s = s + Motor->Ki * (erreur + Motor->err_previous);
 8001874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001876:	f7fe fe87 	bl	8000588 <__aeabi_f2d>
 800187a:	4604      	mov	r4, r0
 800187c:	460d      	mov	r5, r1
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe80 	bl	8000588 <__aeabi_f2d>
 8001888:	4680      	mov	r8, r0
 800188a:	4689      	mov	r9, r1
 800188c:	69b8      	ldr	r0, [r7, #24]
 800188e:	f7fe fe7b 	bl	8000588 <__aeabi_f2d>
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001898:	f7fe fd18 	bl	80002cc <__adddf3>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4640      	mov	r0, r8
 80018a2:	4649      	mov	r1, r9
 80018a4:	f7fe fec8 	bl	8000638 <__aeabi_dmul>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4620      	mov	r0, r4
 80018ae:	4629      	mov	r1, r5
 80018b0:	f7fe fd0c 	bl	80002cc <__adddf3>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	f7ff f9b4 	bl	8000c28 <__aeabi_d2f>
 80018c0:	4603      	mov	r3, r0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
	//s = s + Motor->s_previous + Motor->Ki * (erreur + Motor->err_previous) * (SPEED_CONTROL_PERIOD/2);

	if(s >= 80) 	s = 80;
 80018c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018c8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001934 <CTRL_SpeedControl+0x154>
 80018cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d4:	db02      	blt.n	80018dc <CTRL_SpeedControl+0xfc>
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <CTRL_SpeedControl+0x158>)
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
 80018da:	e009      	b.n	80018f0 <CTRL_SpeedControl+0x110>
	else if(s < 0) 	s = 0;
 80018dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e8:	d502      	bpl.n	80018f0 <CTRL_SpeedControl+0x110>
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24

	Motor->s_previous = s;
 80018f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018f2:	f7fe fe49 	bl	8000588 <__aeabi_f2d>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	6979      	ldr	r1, [r7, #20]
 80018fc:	e9c1 2308 	strd	r2, r3, [r1, #32]
	Motor->err_previous = erreur;
 8001900:	69b8      	ldr	r0, [r7, #24]
 8001902:	f7fe fe41 	bl	8000588 <__aeabi_f2d>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	6979      	ldr	r1, [r7, #20]
 800190c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	MOT_SetDutyCycle(Motor,s);
 8001910:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001914:	6978      	ldr	r0, [r7, #20]
 8001916:	f000 f90b 	bl	8001b30 <MOT_SetDutyCycle>

	return speed;
 800191a:	edd7 7a07 	vldr	s15, [r7, #28]
 800191e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001922:	ee17 3a90 	vmov	r3, s15
}
 8001926:	4618      	mov	r0, r3
 8001928:	3728      	adds	r7, #40	; 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001930:	42700000 	.word	0x42700000
 8001934:	42a00000 	.word	0x42a00000
 8001938:	42a00000 	.word	0x42a00000

0800193c <ENC_InitTimer>:
 * @param htim TIM_HandleTypeDef
 * @param Channel_A TIM Channel used
 * @param Channel_B TIM Channel used
 * @return HAL_Status
 */
uint8_t ENC_InitTimer(ENC_HandleTypeDef* Encoder, TIM_HandleTypeDef *htim, uint32_t Channel_A, uint32_t Channel_B){
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	603b      	str	r3, [r7, #0]
	Encoder->Timer = htim;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	601a      	str	r2, [r3, #0]
	Encoder->Timer_Channel_A = Channel_A;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	605a      	str	r2, [r3, #4]
	Encoder->Timer_Channel_B = Channel_B;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	609a      	str	r2, [r3, #8]

	if(HAL_OK != HAL_TIM_Encoder_Start(Encoder->Timer, Encoder->Timer_Channel_A & Encoder->Timer_Channel_B))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4013      	ands	r3, r2
 800196a:	4619      	mov	r1, r3
 800196c:	f006 fac6 	bl	8007efc <HAL_TIM_Encoder_Start>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <ENC_InitTimer+0x3e>
		return 1;
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <ENC_InitTimer+0x40>

	return 0;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <ENC_SetMillimeterPerTick>:
/**
 * ENC_SetMillimeterPerTick : Set MillimeterPerTick coefficient
 * @param Encoder ENC_HandleTypeDef
 * @param millimeterPerTick
 */
void ENC_SetMillimeterPerTick(ENC_HandleTypeDef* Encoder, double millimeterPerTick){
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	ed87 0b00 	vstr	d0, [r7]
	Encoder->TicksCoeff = millimeterPerTick;
 8001990:	68f9      	ldr	r1, [r7, #12]
 8001992:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001996:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <ENC_GetCnt>:
/**
 * ENC_GetCnt : Get CNT value of the timer counter
 * @param Encoder ENC_HandleTypeDef
 * @return ticks CNT value
 */
int16_t ENC_GetCnt(ENC_HandleTypeDef* Encoder){
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	int32_t ticks = __HAL_TIM_GET_COUNTER(Encoder->Timer);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	60fb      	str	r3, [r7, #12]
	//int32_t ticks = Encoder->Timer->Instance->CNT;
	ENC_ResetCnt(Encoder);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f806 	bl	80019ca <ENC_ResetCnt>

	return ticks;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	b21b      	sxth	r3, r3
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <ENC_ResetCnt>:

/**
 * ENC_ResetCnt : Reset CNT register of the timer counter
 * @param Encoder ENC_HandleTypeDef
 */
void ENC_ResetCnt(ENC_HandleTypeDef* Encoder){
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
	Encoder->Timer->Instance->CNT = 0;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2200      	movs	r2, #0
 80019da:	625a      	str	r2, [r3, #36]	; 0x24
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <MOT_InitTimer>:
 *	@param	Motor MOT_HandleTypeDef
 *	@param 	htim TIM_HandleTypeDef
 *  @param  Channel TIM Channel used
 *	@retval HAL status
 */
uint8_t MOT_InitTimer(MOT_HandleTypeDef* Motor, TIM_HandleTypeDef *htim, uint32_t Channel){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
	Motor->Timer_Handle = htim;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	601a      	str	r2, [r3, #0]
	Motor->Timer_Channel = Channel;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	605a      	str	r2, [r3, #4]

	if(HAL_OK != HAL_TIM_PWM_Start(Motor->Timer_Handle, Motor->Timer_Channel))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f005 ff90 	bl	8007930 <HAL_TIM_PWM_Start>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MOT_InitTimer+0x32>
		return 1;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <MOT_InitTimer+0x34>

	return 0;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <MOT_InitGPIOs>:
 *  @param  IN1_GPIO_Pin GPIO pin
 *	@param 	IN2_GPIOx GPIO port
 *  @param  IN2_GPIO_Pin GPIO pin
 */
void MOT_InitGPIOs(MOT_HandleTypeDef* Motor, GPIO_TypeDef* IN1_GPIOx, uint16_t IN1_GPIO_Pin,
		GPIO_TypeDef* IN2_GPIOx, uint16_t IN2_GPIO_Pin){
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	4613      	mov	r3, r2
 8001a32:	80fb      	strh	r3, [r7, #6]
	Motor->IN1_GPIOx = IN1_GPIOx;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	609a      	str	r2, [r3, #8]
	Motor->IN1_GPIO_Pin = IN1_GPIO_Pin;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	88fa      	ldrh	r2, [r7, #6]
 8001a3e:	819a      	strh	r2, [r3, #12]
	Motor->IN2_GPIOx = IN2_GPIOx;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	611a      	str	r2, [r3, #16]
	Motor->IN2_GPIO_Pin = IN2_GPIO_Pin;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8b3a      	ldrh	r2, [r7, #24]
 8001a4a:	829a      	strh	r2, [r3, #20]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <MOT_SetCoeff>:
/**	MOT_SetCoeff : Set coefficient for the error correction of the motor
 *	@param	Motor MOT_HandleTypeDef
 *	@param 	Kp coefficient
 *	@param 	Ki coefficient
 */
void MOT_SetCoeff(MOT_HandleTypeDef* Motor, float Kp, float Ki){
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a64:	edc7 0a01 	vstr	s1, [r7, #4]
	Motor->Kp = Kp;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	619a      	str	r2, [r3, #24]
	Motor->Ki = Ki;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	61da      	str	r2, [r3, #28]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <MOT_SetDirection>:
/**
 * MOT_SetDirection : Set the direction of the motor
 * @param Motor MOT_HandleTypeDef
 * @param direction
 */
void MOT_SetDirection(MOT_HandleTypeDef* Motor, uint8_t direction){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	70fb      	strb	r3, [r7, #3]
	switch(direction){
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d017      	beq.n	8001ac2 <MOT_SetDirection+0x42>
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	dc37      	bgt.n	8001b06 <MOT_SetDirection+0x86>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <MOT_SetDirection+0x20>
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d022      	beq.n	8001ae4 <MOT_SetDirection+0x64>
 8001a9e:	e032      	b.n	8001b06 <MOT_SetDirection+0x86>

	case MOT_FUNCTIONS_STOP:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6898      	ldr	r0, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	899b      	ldrh	r3, [r3, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f004 f8c2 	bl	8005c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6918      	ldr	r0, [r3, #16]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	8a9b      	ldrh	r3, [r3, #20]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	4619      	mov	r1, r3
 8001abc:	f004 f8ba 	bl	8005c34 <HAL_GPIO_WritePin>
		break;
 8001ac0:	e032      	b.n	8001b28 <MOT_SetDirection+0xa8>

	case MOT_FUNCTIONS_REVERSE:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6898      	ldr	r0, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	899b      	ldrh	r3, [r3, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	4619      	mov	r1, r3
 8001ace:	f004 f8b1 	bl	8005c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_SET);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6918      	ldr	r0, [r3, #16]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	8a9b      	ldrh	r3, [r3, #20]
 8001ada:	2201      	movs	r2, #1
 8001adc:	4619      	mov	r1, r3
 8001ade:	f004 f8a9 	bl	8005c34 <HAL_GPIO_WritePin>
		break;
 8001ae2:	e021      	b.n	8001b28 <MOT_SetDirection+0xa8>

	case MOT_FUNCTIONS_FORWARD:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_SET);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6898      	ldr	r0, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	899b      	ldrh	r3, [r3, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	4619      	mov	r1, r3
 8001af0:	f004 f8a0 	bl	8005c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6918      	ldr	r0, [r3, #16]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	8a9b      	ldrh	r3, [r3, #20]
 8001afc:	2200      	movs	r2, #0
 8001afe:	4619      	mov	r1, r3
 8001b00:	f004 f898 	bl	8005c34 <HAL_GPIO_WritePin>
		break;
 8001b04:	e010      	b.n	8001b28 <MOT_SetDirection+0xa8>

	default:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6898      	ldr	r0, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	899b      	ldrh	r3, [r3, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	4619      	mov	r1, r3
 8001b12:	f004 f88f 	bl	8005c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6918      	ldr	r0, [r3, #16]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	8a9b      	ldrh	r3, [r3, #20]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4619      	mov	r1, r3
 8001b22:	f004 f887 	bl	8005c34 <HAL_GPIO_WritePin>
	}
}
 8001b26:	bf00      	nop
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <MOT_SetDutyCycle>:
/**
 * MOT_SetDutyCycle : Set the duty cycle of the PWM signal
 * @param Motor MOT_HandleTypeDef
 * @param duty_cycle Value between 0 and 100
 */
void MOT_SetDutyCycle(MOT_HandleTypeDef* Motor, float duty_cycle){
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	ed87 0a00 	vstr	s0, [r7]
	if(duty_cycle > 80) duty_cycle = 80;
 8001b3c:	edd7 7a00 	vldr	s15, [r7]
 8001b40:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001bfc <MOT_SetDutyCycle+0xcc>
 8001b44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4c:	dd02      	ble.n	8001b54 <MOT_SetDutyCycle+0x24>
 8001b4e:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <MOT_SetDutyCycle+0xd0>)
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	e009      	b.n	8001b68 <MOT_SetDutyCycle+0x38>
	else if(duty_cycle < 0) duty_cycle = 0;
 8001b54:	edd7 7a00 	vldr	s15, [r7]
 8001b58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b60:	d502      	bpl.n	8001b68 <MOT_SetDutyCycle+0x38>
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	603b      	str	r3, [r7, #0]

	float pulse = (duty_cycle / 100) * (float)MOT_TIM_PERIOD;
 8001b68:	ed97 7a00 	vldr	s14, [r7]
 8001b6c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001c04 <MOT_SetDutyCycle+0xd4>
 8001b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b74:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001c08 <MOT_SetDutyCycle+0xd8>
 8001b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b7c:	edc7 7a03 	vstr	s15, [r7, #12]

	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10a      	bne.n	8001b9e <MOT_SetDutyCycle+0x6e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b96:	ee17 2a90 	vmov	r2, s15
 8001b9a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b9c:	e027      	b.n	8001bee <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d10a      	bne.n	8001bbc <MOT_SetDutyCycle+0x8c>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bb4:	ee17 3a90 	vmov	r3, s15
 8001bb8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001bba:	e018      	b.n	8001bee <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d10a      	bne.n	8001bda <MOT_SetDutyCycle+0xaa>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bd2:	ee17 3a90 	vmov	r3, s15
 8001bd6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001bd8:	e009      	b.n	8001bee <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	42a00000 	.word	0x42a00000
 8001c00:	42a00000 	.word	0x42a00000
 8001c04:	42c80000 	.word	0x42c80000
 8001c08:	45520000 	.word	0x45520000

08001c0c <ODO_Init>:
/* Functions -----------------------------------------------------------------*/

/**
 * ODO_Init : Initialization of odometry module
 */
void ODO_Init(){
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
	x = 0;
 8001c10:	490c      	ldr	r1, [pc, #48]	; (8001c44 <ODO_Init+0x38>)
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	e9c1 2300 	strd	r2, r3, [r1]
	y = 0;
 8001c1e:	490a      	ldr	r1, [pc, #40]	; (8001c48 <ODO_Init+0x3c>)
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	e9c1 2300 	strd	r2, r3, [r1]
	o = 0;
 8001c2c:	4907      	ldr	r1, [pc, #28]	; (8001c4c <ODO_Init+0x40>)
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	200004f0 	.word	0x200004f0
 8001c48:	200004f8 	.word	0x200004f8
 8001c4c:	20000500 	.word	0x20000500

08001c50 <ODO_GetX>:

/**
 * ODO_GetX : Get x coordinate of the robot
 * @return x
 */
double ODO_GetX(){
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
	return x;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <ODO_GetX+0x20>)
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c5e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c62:	eef0 0a67 	vmov.f32	s1, s15
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	200004f0 	.word	0x200004f0

08001c74 <ODO_GetY>:

/**
 * ODO_GetY : Get y coordinate of the robot
 * @return y
 */
double ODO_GetY(){
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
	return y;
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <ODO_GetY+0x20>)
 8001c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c82:	eeb0 0a47 	vmov.f32	s0, s14
 8001c86:	eef0 0a67 	vmov.f32	s1, s15
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	200004f8 	.word	0x200004f8

08001c98 <ODO_GetO>:

/**
 * ODO_GetO : Get o angle of the robot
 * @return o
 */
double ODO_GetO(){
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
	return o;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <ODO_GetO+0x20>)
 8001c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca2:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ca6:	eeb0 0a47 	vmov.f32	s0, s14
 8001caa:	eef0 0a67 	vmov.f32	s1, s15
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000500 	.word	0x20000500
 8001cbc:	00000000 	.word	0x00000000

08001cc0 <ODO_OdometryUpdate>:
/**
 * ODO_OdometryUpdate : Update of robot's coordinate
 * @param leftTicks	Ticks from left encoder
 * @param rightTicks Ticks from right encoder
 */
void ODO_OdometryUpdate(int32_t leftTicks, int32_t rightTicks){
 8001cc0:	b5b0      	push	{r4, r5, r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]

	leftTicks = leftTicks * (-1);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	425b      	negs	r3, r3
 8001cce:	607b      	str	r3, [r7, #4]

	float dDistance = ((float)leftTicks * CodeurGauche.TicksCoeff
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cda:	ee17 0a90 	vmov	r0, s15
 8001cde:	f7fe fc53 	bl	8000588 <__aeabi_f2d>
 8001ce2:	4b8d      	ldr	r3, [pc, #564]	; (8001f18 <ODO_OdometryUpdate+0x258>)
 8001ce4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ce8:	f7fe fca6 	bl	8000638 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4614      	mov	r4, r2
 8001cf2:	461d      	mov	r5, r3
			+ (float)rightTicks * CodeurDroite.TicksCoeff) / 2;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfe:	ee17 0a90 	vmov	r0, s15
 8001d02:	f7fe fc41 	bl	8000588 <__aeabi_f2d>
 8001d06:	4b85      	ldr	r3, [pc, #532]	; (8001f1c <ODO_OdometryUpdate+0x25c>)
 8001d08:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d0c:	f7fe fc94 	bl	8000638 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4620      	mov	r0, r4
 8001d16:	4629      	mov	r1, r5
 8001d18:	f7fe fad8 	bl	80002cc <__adddf3>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d2c:	f7fe fdae 	bl	800088c <__aeabi_ddiv>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
	float dDistance = ((float)leftTicks * CodeurGauche.TicksCoeff
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	f7fe ff76 	bl	8000c28 <__aeabi_d2f>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60fb      	str	r3, [r7, #12]
	float dAngle = ((float)rightTicks * CodeurDroite.TicksCoeff
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4a:	ee17 0a90 	vmov	r0, s15
 8001d4e:	f7fe fc1b 	bl	8000588 <__aeabi_f2d>
 8001d52:	4b72      	ldr	r3, [pc, #456]	; (8001f1c <ODO_OdometryUpdate+0x25c>)
 8001d54:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d58:	f7fe fc6e 	bl	8000638 <__aeabi_dmul>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4614      	mov	r4, r2
 8001d62:	461d      	mov	r5, r3
			- (float)leftTicks * CodeurGauche.TicksCoeff)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d6e:	ee17 0a90 	vmov	r0, s15
 8001d72:	f7fe fc09 	bl	8000588 <__aeabi_f2d>
 8001d76:	4b68      	ldr	r3, [pc, #416]	; (8001f18 <ODO_OdometryUpdate+0x258>)
 8001d78:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d7c:	f7fe fc5c 	bl	8000638 <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4620      	mov	r0, r4
 8001d86:	4629      	mov	r1, r5
 8001d88:	f7fe fa9e 	bl	80002c8 <__aeabi_dsub>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
			/ (float)ENTRAXE;
 8001d94:	a358      	add	r3, pc, #352	; (adr r3, 8001ef8 <ODO_OdometryUpdate+0x238>)
 8001d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9a:	f7fe fd77 	bl	800088c <__aeabi_ddiv>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
	float dAngle = ((float)rightTicks * CodeurDroite.TicksCoeff
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f7fe ff3f 	bl	8000c28 <__aeabi_d2f>
 8001daa:	4603      	mov	r3, r0
 8001dac:	60bb      	str	r3, [r7, #8]

	x += dDistance * cos(o);
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f7fe fbea 	bl	8000588 <__aeabi_f2d>
 8001db4:	4604      	mov	r4, r0
 8001db6:	460d      	mov	r5, r1
 8001db8:	4b59      	ldr	r3, [pc, #356]	; (8001f20 <ODO_OdometryUpdate+0x260>)
 8001dba:	ed93 7b00 	vldr	d7, [r3]
 8001dbe:	eeb0 0a47 	vmov.f32	s0, s14
 8001dc2:	eef0 0a67 	vmov.f32	s1, s15
 8001dc6:	f012 f97b 	bl	80140c0 <cos>
 8001dca:	ec53 2b10 	vmov	r2, r3, d0
 8001dce:	4620      	mov	r0, r4
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	f7fe fc31 	bl	8000638 <__aeabi_dmul>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4b51      	ldr	r3, [pc, #324]	; (8001f24 <ODO_OdometryUpdate+0x264>)
 8001de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de4:	f7fe fa72 	bl	80002cc <__adddf3>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	494d      	ldr	r1, [pc, #308]	; (8001f24 <ODO_OdometryUpdate+0x264>)
 8001dee:	e9c1 2300 	strd	r2, r3, [r1]
	y += dDistance * sin(o);
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f7fe fbc8 	bl	8000588 <__aeabi_f2d>
 8001df8:	4604      	mov	r4, r0
 8001dfa:	460d      	mov	r5, r1
 8001dfc:	4b48      	ldr	r3, [pc, #288]	; (8001f20 <ODO_OdometryUpdate+0x260>)
 8001dfe:	ed93 7b00 	vldr	d7, [r3]
 8001e02:	eeb0 0a47 	vmov.f32	s0, s14
 8001e06:	eef0 0a67 	vmov.f32	s1, s15
 8001e0a:	f012 f9b5 	bl	8014178 <sin>
 8001e0e:	ec53 2b10 	vmov	r2, r3, d0
 8001e12:	4620      	mov	r0, r4
 8001e14:	4629      	mov	r1, r5
 8001e16:	f7fe fc0f 	bl	8000638 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	4b41      	ldr	r3, [pc, #260]	; (8001f28 <ODO_OdometryUpdate+0x268>)
 8001e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e28:	f7fe fa50 	bl	80002cc <__adddf3>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	493d      	ldr	r1, [pc, #244]	; (8001f28 <ODO_OdometryUpdate+0x268>)
 8001e32:	e9c1 2300 	strd	r2, r3, [r1]
	o += dAngle;
 8001e36:	68b8      	ldr	r0, [r7, #8]
 8001e38:	f7fe fba6 	bl	8000588 <__aeabi_f2d>
 8001e3c:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <ODO_OdometryUpdate+0x260>)
 8001e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e42:	f7fe fa43 	bl	80002cc <__adddf3>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4935      	ldr	r1, [pc, #212]	; (8001f20 <ODO_OdometryUpdate+0x260>)
 8001e4c:	e9c1 2300 	strd	r2, r3, [r1]

	if(o > M_PI)
 8001e50:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <ODO_OdometryUpdate+0x260>)
 8001e52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e56:	a32a      	add	r3, pc, #168	; (adr r3, 8001f00 <ODO_OdometryUpdate+0x240>)
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	f7fe fe7c 	bl	8000b58 <__aeabi_dcmpgt>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00c      	beq.n	8001e80 <ODO_OdometryUpdate+0x1c0>
		o -= M_PI * 2.0f;
 8001e66:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <ODO_OdometryUpdate+0x260>)
 8001e68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e6c:	a326      	add	r3, pc, #152	; (adr r3, 8001f08 <ODO_OdometryUpdate+0x248>)
 8001e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e72:	f7fe fa29 	bl	80002c8 <__aeabi_dsub>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4929      	ldr	r1, [pc, #164]	; (8001f20 <ODO_OdometryUpdate+0x260>)
 8001e7c:	e9c1 2300 	strd	r2, r3, [r1]

	if(o < (-1) * M_PI)
 8001e80:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <ODO_OdometryUpdate+0x260>)
 8001e82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e86:	a322      	add	r3, pc, #136	; (adr r3, 8001f10 <ODO_OdometryUpdate+0x250>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fe46 	bl	8000b1c <__aeabi_dcmplt>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00c      	beq.n	8001eb0 <ODO_OdometryUpdate+0x1f0>
		o += M_PI * 2.0f;
 8001e96:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <ODO_OdometryUpdate+0x260>)
 8001e98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e9c:	a31a      	add	r3, pc, #104	; (adr r3, 8001f08 <ODO_OdometryUpdate+0x248>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fa13 	bl	80002cc <__adddf3>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	491d      	ldr	r1, [pc, #116]	; (8001f20 <ODO_OdometryUpdate+0x260>)
 8001eac:	e9c1 2300 	strd	r2, r3, [r1]

	printf("%d %d %d\r\n", (int)x, (int)y, (int)o);
 8001eb0:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <ODO_OdometryUpdate+0x264>)
 8001eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7fe fe6d 	bl	8000b98 <__aeabi_d2iz>
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <ODO_OdometryUpdate+0x268>)
 8001ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f7fe fe65 	bl	8000b98 <__aeabi_d2iz>
 8001ece:	4605      	mov	r5, r0
 8001ed0:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <ODO_OdometryUpdate+0x260>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f7fe fe5d 	bl	8000b98 <__aeabi_d2iz>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	462a      	mov	r2, r5
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	4811      	ldr	r0, [pc, #68]	; (8001f2c <ODO_OdometryUpdate+0x26c>)
 8001ee6:	f00f fd7f 	bl	80119e8 <iprintf>
}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	f3af 8000 	nop.w
 8001ef8:	00000000 	.word	0x00000000
 8001efc:	40672000 	.word	0x40672000
 8001f00:	54442d18 	.word	0x54442d18
 8001f04:	400921fb 	.word	0x400921fb
 8001f08:	54442d18 	.word	0x54442d18
 8001f0c:	401921fb 	.word	0x401921fb
 8001f10:	54442d18 	.word	0x54442d18
 8001f14:	c00921fb 	.word	0xc00921fb
 8001f18:	200045a8 	.word	0x200045a8
 8001f1c:	20004590 	.word	0x20004590
 8001f20:	20000500 	.word	0x20000500
 8001f24:	200004f0 	.word	0x200004f0
 8001f28:	200004f8 	.word	0x200004f8
 8001f2c:	08016948 	.word	0x08016948

08001f30 <Dir_Init>:
#include "BOTterfly-H/config.h"

#include <unistd.h>

uint8_t Dir_Init()
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
	Dir_Ph_X = 0;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <Dir_Init+0x4c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
	Dir_Ph_Y = 0;
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <Dir_Init+0x50>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
	Dir_X = 0;
 8001f40:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <Dir_Init+0x54>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
	Dir_Y = 0;
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <Dir_Init+0x58>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
	Dir_Red = 0;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <Dir_Init+0x5c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
	Dir_PhasePrec = 0;
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <Dir_Init+0x60>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
	Dir_Phase = 0;
 8001f58:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <Dir_Init+0x64>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
	Dir_nbPhases = 6;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <Dir_Init+0x68>)
 8001f60:	2206      	movs	r2, #6
 8001f62:	701a      	strb	r2, [r3, #0]
	Dir_nbSL = 3;
 8001f64:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <Dir_Init+0x6c>)
 8001f66:	2203      	movs	r2, #3
 8001f68:	701a      	strb	r2, [r3, #0]
	Dir_nbSLValidees = 0;
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <Dir_Init+0x70>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
	return 0;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	20004b34 	.word	0x20004b34
 8001f80:	2000466c 	.word	0x2000466c
 8001f84:	20004b38 	.word	0x20004b38
 8001f88:	20004b50 	.word	0x20004b50
 8001f8c:	20004b4c 	.word	0x20004b4c
 8001f90:	20004b54 	.word	0x20004b54
 8001f94:	20004b68 	.word	0x20004b68
 8001f98:	2000466a 	.word	0x2000466a
 8001f9c:	200045d0 	.word	0x200045d0
 8001fa0:	2000466b 	.word	0x2000466b

08001fa4 <Ph_Init>:
////	HAL_ADC_Stop(&hadc1);
//	return uiAnalogData;
//}

uint8_t Ph_Init()
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af02      	add	r7, sp, #8
	//Ph_GetAverageN(Ph_Data, N_NOISE);
	Ph_GetMeasure(Ph_Data);
 8001faa:	4817      	ldr	r0, [pc, #92]	; (8002008 <Ph_Init+0x64>)
 8001fac:	f000 f836 	bl	800201c <Ph_GetMeasure>
	Ph_GetMeasure(Ph_Data);
 8001fb0:	4815      	ldr	r0, [pc, #84]	; (8002008 <Ph_Init+0x64>)
 8001fb2:	f000 f833 	bl	800201c <Ph_GetMeasure>
	Ph_Angle = 0;
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <Ph_Init+0x68>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
	Ph_Norma = 0;
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <Ph_Init+0x6c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < 4 ; i++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	e00a      	b.n	8001fde <Ph_Init+0x3a>
	{
		Ph_DataNoise[i] = Ph_Data[i];
 8001fc8:	4a0f      	ldr	r2, [pc, #60]	; (8002008 <Ph_Init+0x64>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fd0:	4910      	ldr	r1, [pc, #64]	; (8002014 <Ph_Init+0x70>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0 ; i < 4 ; i++)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	ddf1      	ble.n	8001fc8 <Ph_Init+0x24>
	}
	printf("INITFIN PH_DataNoise : %04lu, %04lu, %04lu, %04lu\r\n", Ph_DataNoise[0], Ph_DataNoise[1], Ph_DataNoise[2], Ph_DataNoise[3]);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <Ph_Init+0x70>)
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <Ph_Init+0x70>)
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <Ph_Init+0x70>)
 8001fee:	6898      	ldr	r0, [r3, #8]
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <Ph_Init+0x70>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4807      	ldr	r0, [pc, #28]	; (8002018 <Ph_Init+0x74>)
 8001ffa:	f00f fcf5 	bl	80119e8 <iprintf>
	return 0;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200045c0 	.word	0x200045c0
 800200c:	20004b70 	.word	0x20004b70
 8002010:	20004b6c 	.word	0x20004b6c
 8002014:	20004b3c 	.word	0x20004b3c
 8002018:	08016954 	.word	0x08016954

0800201c <Ph_GetMeasure>:
	//printf("PH_Data : %04lu, %04lu, %04lu, %04lu\r\n", value[0], value[1], value[2], value[3]);
	return 0;
}

uint8_t Ph_GetMeasure(uint32_t value[])
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	Ph_GetAverageN(value, N_MEASURE);
 8002024:	2101      	movs	r1, #1
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f83a 	bl	80020a0 <Ph_GetAverageN>
	Ph_Treatment(value);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f895 	bl	800215c <Ph_Treatment>
	//printf("PH_Data : %04lu, %04lu, %04lu, %04lu\r\n", value[0], value[1], value[2], value[3]);
	return 0;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <Ph_GetValues>:

uint8_t Ph_GetValues(uint32_t value[])
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, Ph_DataDMA, 4);// A APPELLER POUR CHAQUE MESURE
 8002044:	2204      	movs	r2, #4
 8002046:	4914      	ldr	r1, [pc, #80]	; (8002098 <Ph_GetValues+0x5c>)
 8002048:	4814      	ldr	r0, [pc, #80]	; (800209c <Ph_GetValues+0x60>)
 800204a:	f002 fb11 	bl	8004670 <HAL_ADC_Start_DMA>
	for (int i = 0 ; i < 4 ; i++)
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	e00b      	b.n	800206c <Ph_GetValues+0x30>
	{
		value[i] = Ph_DataDMA[i];
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	490e      	ldr	r1, [pc, #56]	; (8002098 <Ph_GetValues+0x5c>)
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002064:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < 4 ; i++)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3301      	adds	r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b03      	cmp	r3, #3
 8002070:	ddf0      	ble.n	8002054 <Ph_GetValues+0x18>
	}
	// Inversion valeurs 0 et 3 :
	uint32_t Ph_Datatempo = value[0];
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60bb      	str	r3, [r7, #8]
	value[0] = value[3];
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	601a      	str	r2, [r3, #0]
	value[3] = Ph_Datatempo;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	330c      	adds	r3, #12
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	601a      	str	r2, [r3, #0]

	HAL_ADC_Stop_DMA(&hadc1);
 8002088:	4804      	ldr	r0, [pc, #16]	; (800209c <Ph_GetValues+0x60>)
 800208a:	f002 fc01 	bl	8004890 <HAL_ADC_Stop_DMA>
	//return uiAnalogData;
	return 0;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20004b58 	.word	0x20004b58
 800209c:	20004b78 	.word	0x20004b78

080020a0 <Ph_GetAverageN>:

uint8_t Ph_GetAverageN(uint32_t value[], int n)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
	uint32_t Ph_DataTemp[4];
	for (int i = 0 ; i < 4 ; i++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
 80020ae:	e00a      	b.n	80020c6 <Ph_GetAverageN+0x26>
	{
		Ph_DataTemp[i] = 0;
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020b8:	4413      	add	r3, r2
 80020ba:	2200      	movs	r2, #0
 80020bc:	f843 2c20 	str.w	r2, [r3, #-32]
	for (int i = 0 ; i < 4 ; i++)
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	3301      	adds	r3, #1
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	ddf1      	ble.n	80020b0 <Ph_GetAverageN+0x10>
	}

	for (int i = 0 ; i < n ; i++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	623b      	str	r3, [r7, #32]
 80020d0:	e022      	b.n	8002118 <Ph_GetAverageN+0x78>
	{
		Ph_GetValues(value);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ffb2 	bl	800203c <Ph_GetValues>
		for (int j = 0 ; j < 4 ; j++)
 80020d8:	2300      	movs	r3, #0
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	e016      	b.n	800210c <Ph_GetAverageN+0x6c>
		{
			Ph_DataTemp[j] += value[j];
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020e6:	4413      	add	r3, r2
 80020e8:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	440b      	add	r3, r1
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	441a      	add	r2, r3
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002100:	440b      	add	r3, r1
 8002102:	f843 2c20 	str.w	r2, [r3, #-32]
		for (int j = 0 ; j < 4 ; j++)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3301      	adds	r3, #1
 800210a:	61fb      	str	r3, [r7, #28]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	2b03      	cmp	r3, #3
 8002110:	dde5      	ble.n	80020de <Ph_GetAverageN+0x3e>
	for (int i = 0 ; i < n ; i++)
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	3301      	adds	r3, #1
 8002116:	623b      	str	r3, [r7, #32]
 8002118:	6a3a      	ldr	r2, [r7, #32]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	dbd8      	blt.n	80020d2 <Ph_GetAverageN+0x32>
		}
	}

	for (int i = 0 ; i < 4 ; i++)
 8002120:	2300      	movs	r3, #0
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	e011      	b.n	800214a <Ph_GetAverageN+0xaa>
	{
		value[i] = Ph_DataTemp[i] / n;
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800212e:	4413      	add	r3, r2
 8002130:	f853 1c20 	ldr.w	r1, [r3, #-32]
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	4403      	add	r3, r0
 800213e:	fbb1 f2f2 	udiv	r2, r1, r2
 8002142:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < 4 ; i++)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	3301      	adds	r3, #1
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b03      	cmp	r3, #3
 800214e:	ddea      	ble.n	8002126 <Ph_GetAverageN+0x86>
	}
	//printf("GetAverageN : PH_Data : %lu, %lu, %lu, %lu - /%d\r\n", value[0], value[1], value[2], value[3], n);
	//return uiAnalogData;
	return 0;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3728      	adds	r7, #40	; 0x28
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <Ph_Treatment>:

uint8_t Ph_Treatment(uint32_t value[])
{
 800215c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215e:	b095      	sub	sp, #84	; 0x54
 8002160:	af0a      	add	r7, sp, #40	; 0x28
 8002162:	6178      	str	r0, [r7, #20]
	//char * PrPrintf[50];
	uint32_t Ph_PourPrintf[4] = {value[0], value[1], value[2], value[3]};
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	623b      	str	r3, [r7, #32]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
			{
				value[i] = 0;
			}
		}
	}
	sprintf(Ph_toprint, "S : %04lu %04lu %04lu %04lu V : %04lu %04lu %04lu %04lu E : %04lu %04lu %04lu %04lu ", value[0], value[1], value[2], value[3], Ph_PourPrintf[0], Ph_PourPrintf[1], Ph_PourPrintf[2], Ph_PourPrintf[3], Ph_DataNoise[0], Ph_DataNoise[1], Ph_DataNoise[2], Ph_DataNoise[3]);
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	3304      	adds	r3, #4
 8002186:	6819      	ldr	r1, [r3, #0]
 8002188:	60f9      	str	r1, [r7, #12]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3308      	adds	r3, #8
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	320c      	adds	r2, #12
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	69b9      	ldr	r1, [r7, #24]
 8002198:	69f8      	ldr	r0, [r7, #28]
 800219a:	60b8      	str	r0, [r7, #8]
 800219c:	6a3c      	ldr	r4, [r7, #32]
 800219e:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 80021a0:	4e10      	ldr	r6, [pc, #64]	; (80021e4 <Ph_Treatment+0x88>)
 80021a2:	6836      	ldr	r6, [r6, #0]
 80021a4:	480f      	ldr	r0, [pc, #60]	; (80021e4 <Ph_Treatment+0x88>)
 80021a6:	6840      	ldr	r0, [r0, #4]
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	480e      	ldr	r0, [pc, #56]	; (80021e4 <Ph_Treatment+0x88>)
 80021ac:	6880      	ldr	r0, [r0, #8]
 80021ae:	6038      	str	r0, [r7, #0]
 80021b0:	480c      	ldr	r0, [pc, #48]	; (80021e4 <Ph_Treatment+0x88>)
 80021b2:	68c0      	ldr	r0, [r0, #12]
 80021b4:	9009      	str	r0, [sp, #36]	; 0x24
 80021b6:	6838      	ldr	r0, [r7, #0]
 80021b8:	9008      	str	r0, [sp, #32]
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	9007      	str	r0, [sp, #28]
 80021be:	9606      	str	r6, [sp, #24]
 80021c0:	9505      	str	r5, [sp, #20]
 80021c2:	9404      	str	r4, [sp, #16]
 80021c4:	68b8      	ldr	r0, [r7, #8]
 80021c6:	9003      	str	r0, [sp, #12]
 80021c8:	9102      	str	r1, [sp, #8]
 80021ca:	9201      	str	r2, [sp, #4]
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4905      	ldr	r1, [pc, #20]	; (80021e8 <Ph_Treatment+0x8c>)
 80021d4:	4805      	ldr	r0, [pc, #20]	; (80021ec <Ph_Treatment+0x90>)
 80021d6:	f00f fd0f 	bl	8011bf8 <siprintf>
	//return uiAnalogData;
	return 0;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	372c      	adds	r7, #44	; 0x2c
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021e4:	20004b3c 	.word	0x20004b3c
 80021e8:	08016988 	.word	0x08016988
 80021ec:	200045d4 	.word	0x200045d4

080021f0 <Ph_GetBestAngle>:
	indice++;
	return indice;
}

int Ph_GetBestAngle(uint32_t value[])
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	 Photodiode 3 : 100
	 Entre... entre...
	 *
	 */

	int angle = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61fb      	str	r3, [r7, #28]

	// Ranger par max :
	//uint32_t DataPerMAX[3];
	int iMax = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61bb      	str	r3, [r7, #24]
	for (int i = 1 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes moins la première
 8002200:	2301      	movs	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	e010      	b.n	8002228 <Ph_GetBestAngle+0x38>
	{
		if (value[i] > value[iMax])
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	440b      	add	r3, r1
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d901      	bls.n	8002222 <Ph_GetBestAngle+0x32>
		{
			iMax = i;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	61bb      	str	r3, [r7, #24]
	for (int i = 1 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes moins la première
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	3301      	adds	r3, #1
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b02      	cmp	r3, #2
 800222c:	ddeb      	ble.n	8002206 <Ph_GetBestAngle+0x16>
		}
	}

	if (iMax == 1) // Si le max est en face :
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d125      	bne.n	8002280 <Ph_GetBestAngle+0x90>
	{
		int dif1 = value[1] - value[0];
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3304      	adds	r3, #4
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	613b      	str	r3, [r7, #16]
		int dif2 = value[1] - value[2];
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3304      	adds	r3, #4
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3308      	adds	r3, #8
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	60fb      	str	r3, [r7, #12]
		int dif = dif1 - dif2;
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	60bb      	str	r3, [r7, #8]
		angle = (int)(100 * (float)((float)dif / 4095));
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	ee07 3a90 	vmov	s15, r3
 8002260:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002264:	eddf 6a12 	vldr	s13, [pc, #72]	; 80022b0 <Ph_GetBestAngle+0xc0>
 8002268:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800226c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80022b4 <Ph_GetBestAngle+0xc4>
 8002270:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002278:	ee17 3a90 	vmov	r3, s15
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	e003      	b.n	8002288 <Ph_GetBestAngle+0x98>
	}
	else
	{
		angle = Ph_GetBestAngleAncien(value);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f81d 	bl	80022c0 <Ph_GetBestAngleAncien>
 8002286:	61f8      	str	r0, [r7, #28]
	}

	angle = 40 * angle / 100;
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <Ph_GetBestAngle+0xc8>)
 8002294:	fb82 1203 	smull	r1, r2, r2, r3
 8002298:	1152      	asrs	r2, r2, #5
 800229a:	17db      	asrs	r3, r3, #31
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	61fb      	str	r3, [r7, #28]

	Ph_Angle = angle;
 80022a0:	4a06      	ldr	r2, [pc, #24]	; (80022bc <Ph_GetBestAngle+0xcc>)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	6013      	str	r3, [r2, #0]
	return angle;
 80022a6:	69fb      	ldr	r3, [r7, #28]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3720      	adds	r7, #32
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	457ff000 	.word	0x457ff000
 80022b4:	42c80000 	.word	0x42c80000
 80022b8:	51eb851f 	.word	0x51eb851f
 80022bc:	20004b70 	.word	0x20004b70

080022c0 <Ph_GetBestAngleAncien>:

int Ph_GetBestAngleAncien(uint32_t value[])
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	 Photodiode 3 : 100
	 Entre... entre...
	 *
	 */

	int angle = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]

	//GetValues(value);

	// RECHERCHE DES 2 PREMIERS MAXIMUMS :

	int imax1 = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61bb      	str	r3, [r7, #24]
	int imax2 = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
	int maxtemp = 0;//////////////////////////////////////////////////////////////////////////PB
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
	for (int i = 0 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	e012      	b.n	8002304 <Ph_GetBestAngleAncien+0x44>
	{
		if (value[i] > maxtemp)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d907      	bls.n	80022fe <Ph_GetBestAngleAncien+0x3e>
		{
			maxtemp = value[i];
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	613b      	str	r3, [r7, #16]
			imax1 = i;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	61bb      	str	r3, [r7, #24]
	for (int i = 0 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3301      	adds	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b02      	cmp	r3, #2
 8002308:	dde9      	ble.n	80022de <Ph_GetBestAngleAncien+0x1e>
		}
	}
	maxtemp = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
	for (int i = 0 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	e016      	b.n	8002342 <Ph_GetBestAngleAncien+0x82>
	{
		if (i != imax1)
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	429a      	cmp	r2, r3
 800231a:	d00f      	beq.n	800233c <Ph_GetBestAngleAncien+0x7c>
		{
			if (value[i] > maxtemp)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	4413      	add	r3, r2
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	429a      	cmp	r2, r3
 800232a:	d907      	bls.n	800233c <Ph_GetBestAngleAncien+0x7c>
			{
				maxtemp = value[i];
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	613b      	str	r3, [r7, #16]
				imax2 = i;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	617b      	str	r3, [r7, #20]
	for (int i = 0 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	3301      	adds	r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b02      	cmp	r3, #2
 8002346:	dde5      	ble.n	8002314 <Ph_GetBestAngleAncien+0x54>
		}
	}

	// ASSIGNATION DE L'ANGLE :

	if (imax1 + imax2 == 2) // 0 et 2 --> Deux sources lumineuses : gauche et droite
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	4413      	add	r3, r2
 800234e:	2b02      	cmp	r3, #2
 8002350:	d10a      	bne.n	8002368 <Ph_GetBestAngleAncien+0xa8>
	{
		if (imax1 > imax2)
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	429a      	cmp	r2, r3
 8002358:	dd02      	ble.n	8002360 <Ph_GetBestAngleAncien+0xa0>
		{
			angle = 100;
 800235a:	2364      	movs	r3, #100	; 0x64
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	e059      	b.n	8002414 <Ph_GetBestAngleAncien+0x154>
		}
		else
		{
			angle = -100;
 8002360:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	e055      	b.n	8002414 <Ph_GetBestAngleAncien+0x154>
		}
	}
	else // Milieu avec côté (On considère qu'on a le max1 à gauche et le max2 au milieu)
	{
		if (value[imax1] <= value[imax2] + DELTA_A) // Très proches (à 100 points près)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	4413      	add	r3, r2
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	440b      	add	r3, r1
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	3364      	adds	r3, #100	; 0x64
 800237e:	429a      	cmp	r2, r3
 8002380:	d803      	bhi.n	800238a <Ph_GetBestAngleAncien+0xca>
		{//A
			angle = -50;
 8002382:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8002386:	61fb      	str	r3, [r7, #28]
 8002388:	e02b      	b.n	80023e2 <Ph_GetBestAngleAncien+0x122>
		}
		else
		{
			if (((4095 - DELTA_B) <= value[imax1]) && (value[imax1] <= 4095))
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f640 7236 	movw	r2, #3894	; 0xf36
 8002398:	4293      	cmp	r3, r2
 800239a:	d90b      	bls.n	80023b4 <Ph_GetBestAngleAncien+0xf4>
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023aa:	d203      	bcs.n	80023b4 <Ph_GetBestAngleAncien+0xf4>
			{//B
				angle = -100;
 80023ac:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	e016      	b.n	80023e2 <Ph_GetBestAngleAncien+0x122>
			}
			else
			{//C
				angle = -(int)(100 * (value[imax1] - value[imax2]) / value[imax1]);
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	440b      	add	r3, r1
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2264      	movs	r2, #100	; 0x64
 80023cc:	fb02 f203 	mul.w	r2, r2, r3
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	440b      	add	r3, r1
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	fbb2 f3f3 	udiv	r3, r2, r3
 80023de:	425b      	negs	r3, r3
 80023e0:	61fb      	str	r3, [r7, #28]
			}
		}

		// TRANSPOSITION DE L'ANGLE EN FONCTION DES POSITION DES MAX :
		if ((imax1 == 0) || (imax2 == 0)) // Sur la gauche
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <Ph_GetBestAngleAncien+0x12e>
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d108      	bne.n	8002400 <Ph_GetBestAngleAncien+0x140>
		{
			if (imax1 == 1) // Max au milieu
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d10f      	bne.n	8002414 <Ph_GetBestAngleAncien+0x154>
			{
				angle = -100 - angle;
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	61fb      	str	r3, [r7, #28]
			if (imax1 == 1) // Max au milieu
 80023fe:	e009      	b.n	8002414 <Ph_GetBestAngleAncien+0x154>
				// On est bon
			}
		}
		else // Sur la droite
		{
			if (imax1 == 1) // Max au  milieu
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d103      	bne.n	800240e <Ph_GetBestAngleAncien+0x14e>
			{
				angle = 100 + angle;
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3364      	adds	r3, #100	; 0x64
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	e002      	b.n	8002414 <Ph_GetBestAngleAncien+0x154>
			}
			else // Max à droite
			{
				angle = -angle;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	425b      	negs	r3, r3
 8002412:	61fb      	str	r3, [r7, #28]
	//	strcat(toprint, "\r\n");
	//	char tprnt[50];
	//	sprintf(tprnt, " Angle : %d", angle);
	//	strcat(toprint, tprnt);

	return angle;
 8002414:	69fb      	ldr	r3, [r7, #28]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	0000      	movs	r0, r0
 8002424:	0000      	movs	r0, r0
	...

08002428 <Ph_GetNorma>:

int Ph_GetNorma(uint32_t value[])
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	/*uint32_t Ph_DataTemp[3];
	for (int i = 0 ; i < 3 ; i++)
	{
		Ph_DataTemp[i] = value[i] - Ph_DataNoise[i];
	}*/
	int max = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
	for (int i = 1 ; i < 3 ; i++)
 8002434:	2301      	movs	r3, #1
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	e010      	b.n	800245c <Ph_GetNorma+0x34>
	{
		if (/*Ph_DataTemp*/value[i] > /*Ph_DataTemp*/value[max])
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	440b      	add	r3, r1
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d901      	bls.n	8002456 <Ph_GetNorma+0x2e>
		{
			max = i;
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	60fb      	str	r3, [r7, #12]
	for (int i = 1 ; i < 3 ; i++)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	3301      	adds	r3, #1
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b02      	cmp	r3, #2
 8002460:	ddeb      	ble.n	800243a <Ph_GetNorma+0x12>
		}
	}
	Ph_Max_Tr = /*Ph_DataTemp*/value[max];
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1a      	ldr	r2, [pc, #104]	; (80024d8 <Ph_GetNorma+0xb0>)
 800246e:	6013      	str	r3, [r2, #0]
	//Ph_Norma = (uint32_t)(4791.6*exp(-0.001*value[max]));
	Ph_Norma = -134.5 * log(Ph_Max_Tr) + 1135.5;
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <Ph_GetNorma+0xb0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe f865 	bl	8000544 <__aeabi_ui2d>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	ec43 2b10 	vmov	d0, r2, r3
 8002482:	f011 ff0d 	bl	80142a0 <log>
 8002486:	ec51 0b10 	vmov	r0, r1, d0
 800248a:	a30f      	add	r3, pc, #60	; (adr r3, 80024c8 <Ph_GetNorma+0xa0>)
 800248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002490:	f7fe f8d2 	bl	8000638 <__aeabi_dmul>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	a30c      	add	r3, pc, #48	; (adr r3, 80024d0 <Ph_GetNorma+0xa8>)
 800249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a2:	f7fd ff13 	bl	80002cc <__adddf3>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	f7fe fb9b 	bl	8000be8 <__aeabi_d2uiz>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4a09      	ldr	r2, [pc, #36]	; (80024dc <Ph_GetNorma+0xb4>)
 80024b6:	6013      	str	r3, [r2, #0]
	return Ph_Norma;
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <Ph_GetNorma+0xb4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	f3af 8000 	nop.w
 80024c8:	00000000 	.word	0x00000000
 80024cc:	c060d000 	.word	0xc060d000
 80024d0:	00000000 	.word	0x00000000
 80024d4:	4091be00 	.word	0x4091be00
 80024d8:	20004b74 	.word	0x20004b74
 80024dc:	20004b6c 	.word	0x20004b6c

080024e0 <RGB_Init_SetTimer>:
 */

#include "BOTterfly-H/rgb_sensor.h"


uint8_t RGB_Init_SetTimer(RGB_struct* rgbSensor, TIM_HandleTypeDef *htim, uint32_t Channel){
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
	rgbSensor->Timer_Handle = htim;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	601a      	str	r2, [r3, #0]
	rgbSensor->Timer_Channel = Channel;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	605a      	str	r2, [r3, #4]

	//HAL_TIM_IC_Start_IT(rgbSensor->Timer_Handle, rgbSensor->Timer_Channel);
	return 0;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <RGB_Init_SetParamGPIOs>:

uint8_t RGB_Init_SetParamGPIOs(RGB_struct* rgbSensor, GPIO_TypeDef* OutputEnable_GPIOx, uint16_t OutputEnable_GPIO_Pin,
		GPIO_TypeDef* LED_GPIOx, uint16_t LED_GPIO_Pin){
 8002506:	b480      	push	{r7}
 8002508:	b085      	sub	sp, #20
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4613      	mov	r3, r2
 8002514:	80fb      	strh	r3, [r7, #6]
	rgbSensor->OutputEnable_GPIOx = OutputEnable_GPIOx;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	609a      	str	r2, [r3, #8]
	rgbSensor->OutputEnable_GPIO_Pin = OutputEnable_GPIO_Pin;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	88fa      	ldrh	r2, [r7, #6]
 8002520:	819a      	strh	r2, [r3, #12]
	rgbSensor->LED_GPIOx = LED_GPIOx;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	611a      	str	r2, [r3, #16]
	rgbSensor->LED_GPIO_Pin = LED_GPIO_Pin;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8b3a      	ldrh	r2, [r7, #24]
 800252c:	829a      	strh	r2, [r3, #20]

	return 0;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <RGB_Init_SetOutFreqGPIOs>:

uint8_t RGB_Init_SetOutFreqGPIOs(RGB_struct* rgbSensor, GPIO_TypeDef* OutFreq1_GPIOx, uint16_t OutFreq1_GPIO_Pin,
		GPIO_TypeDef* OutFreq2_GPIOx, uint16_t OutFreq2_GPIO_Pin){
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	4613      	mov	r3, r2
 800254a:	80fb      	strh	r3, [r7, #6]
	rgbSensor->OutFreq1_GPIOx = OutFreq1_GPIOx;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	619a      	str	r2, [r3, #24]
	rgbSensor->OutFreq1_GPIO_Pin = OutFreq1_GPIO_Pin;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	88fa      	ldrh	r2, [r7, #6]
 8002556:	839a      	strh	r2, [r3, #28]
	rgbSensor->OutFreq2_GPIOx = OutFreq2_GPIOx;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	621a      	str	r2, [r3, #32]
	rgbSensor->OutFreq2_GPIO_Pin = OutFreq2_GPIO_Pin;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8b3a      	ldrh	r2, [r7, #24]
 8002562:	849a      	strh	r2, [r3, #36]	; 0x24

	return 0;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <RGB_Init_SetColorFilterGPIOs>:

uint8_t RGB_Init_SetColorFilterGPIOs(RGB_struct* rgbSensor, GPIO_TypeDef* ColorFilter1_GPIOx, uint16_t ColorFilter1_GPIO_Pin,
		GPIO_TypeDef* ColorFilter2_GPIOx, uint16_t ColorFilter2_GPIO_Pin){
 8002572:	b480      	push	{r7}
 8002574:	b085      	sub	sp, #20
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	603b      	str	r3, [r7, #0]
 800257e:	4613      	mov	r3, r2
 8002580:	80fb      	strh	r3, [r7, #6]
	rgbSensor->ColorFilter1_GPIOx = ColorFilter1_GPIOx;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28
	rgbSensor->ColorFilter1_GPIO_Pin = ColorFilter1_GPIO_Pin;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	88fa      	ldrh	r2, [r7, #6]
 800258c:	859a      	strh	r2, [r3, #44]	; 0x2c
	rgbSensor->ColorFilter2_GPIOx = ColorFilter2_GPIOx;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
	rgbSensor->ColorFilter2_GPIO_Pin = ColorFilter2_GPIO_Pin;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8b3a      	ldrh	r2, [r7, #24]
 8002598:	869a      	strh	r2, [r3, #52]	; 0x34

	return 0;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <RGB_Init>:

uint8_t RGB_Init(RGB_struct* rgbSensor){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

	rgbSensor->it.flag = 0;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	rgbSensor->it.isFirstCaptured = 0;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	rgbSensor->it.icVal1 = 0;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	rgbSensor->it.icVal2 = 0;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	rgbSensor->it.difference = 0;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	rgbSensor->it.frequency = 0;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	64da      	str	r2, [r3, #76]	; 0x4c

	// OE : Output Enable -> DISABLE
	HAL_GPIO_WritePin(rgbSensor->OutputEnable_GPIOx, rgbSensor->OutputEnable_GPIO_Pin, GPIO_PIN_SET);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6898      	ldr	r0, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	899b      	ldrh	r3, [r3, #12]
 80025e8:	2201      	movs	r2, #1
 80025ea:	4619      	mov	r1, r3
 80025ec:	f003 fb22 	bl	8005c34 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80025f0:	20c8      	movs	r0, #200	; 0xc8
 80025f2:	f001 ffd5 	bl	80045a0 <HAL_Delay>

	RGB_SetOFscaling(rgbSensor, RGB_OF_02_RANGE);
 80025f6:	2102      	movs	r1, #2
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f889 	bl	8002710 <RGB_SetOFscaling>
	RGB_SetFilter(rgbSensor, RGB_RED);
 80025fe:	2100      	movs	r1, #0
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f819 	bl	8002638 <RGB_SetFilter>

	// Turn on the LEDs to lights the floor
	HAL_GPIO_WritePin(rgbSensor->LED_GPIOx, rgbSensor->LED_GPIO_Pin, GPIO_PIN_SET);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6918      	ldr	r0, [r3, #16]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	8a9b      	ldrh	r3, [r3, #20]
 800260e:	2201      	movs	r2, #1
 8002610:	4619      	mov	r1, r3
 8002612:	f003 fb0f 	bl	8005c34 <HAL_GPIO_WritePin>

	// OE : Output Enable -> ENABLE
	HAL_Delay(200);
 8002616:	20c8      	movs	r0, #200	; 0xc8
 8002618:	f001 ffc2 	bl	80045a0 <HAL_Delay>
	HAL_GPIO_WritePin(rgbSensor->OutputEnable_GPIOx, rgbSensor->OutputEnable_GPIO_Pin, GPIO_PIN_RESET);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6898      	ldr	r0, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	899b      	ldrh	r3, [r3, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	4619      	mov	r1, r3
 8002628:	f003 fb04 	bl	8005c34 <HAL_GPIO_WritePin>

	return 0;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <RGB_SetFilter>:

uint8_t RGB_SetFilter(RGB_struct* rgbSensor, uint8_t color){
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	70fb      	strb	r3, [r7, #3]
	uint8_t status = RGB_ERROR_NONE;
 8002644:	2300      	movs	r3, #0
 8002646:	73fb      	strb	r3, [r7, #15]

	switch(color)
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	2b03      	cmp	r3, #3
 800264c:	d84e      	bhi.n	80026ec <RGB_SetFilter+0xb4>
 800264e:	a201      	add	r2, pc, #4	; (adr r2, 8002654 <RGB_SetFilter+0x1c>)
 8002650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002654:	08002665 	.word	0x08002665
 8002658:	08002687 	.word	0x08002687
 800265c:	080026a9 	.word	0x080026a9
 8002660:	080026cb 	.word	0x080026cb
	{
	case RGB_RED:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_RESET);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800266c:	2200      	movs	r2, #0
 800266e:	4619      	mov	r1, r3
 8002670:	f003 fae0 	bl	8005c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_RESET);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800267c:	2200      	movs	r2, #0
 800267e:	4619      	mov	r1, r3
 8002680:	f003 fad8 	bl	8005c34 <HAL_GPIO_WritePin>
		break;
 8002684:	e039      	b.n	80026fa <RGB_SetFilter+0xc2>
	case RGB_BLUE:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_RESET);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800268e:	2200      	movs	r2, #0
 8002690:	4619      	mov	r1, r3
 8002692:	f003 facf 	bl	8005c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_SET);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800269e:	2201      	movs	r2, #1
 80026a0:	4619      	mov	r1, r3
 80026a2:	f003 fac7 	bl	8005c34 <HAL_GPIO_WritePin>
		break;
 80026a6:	e028      	b.n	80026fa <RGB_SetFilter+0xc2>
	case RGB_GREEN:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_SET);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026b0:	2201      	movs	r2, #1
 80026b2:	4619      	mov	r1, r3
 80026b4:	f003 fabe 	bl	8005c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_SET);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80026c0:	2201      	movs	r2, #1
 80026c2:	4619      	mov	r1, r3
 80026c4:	f003 fab6 	bl	8005c34 <HAL_GPIO_WritePin>
		break;
 80026c8:	e017      	b.n	80026fa <RGB_SetFilter+0xc2>
	case RGB_CLEAR:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_SET);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026d2:	2201      	movs	r2, #1
 80026d4:	4619      	mov	r1, r3
 80026d6:	f003 faad 	bl	8005c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_RESET);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80026e2:	2200      	movs	r2, #0
 80026e4:	4619      	mov	r1, r3
 80026e6:	f003 faa5 	bl	8005c34 <HAL_GPIO_WritePin>
		break;
 80026ea:	e006      	b.n	80026fa <RGB_SetFilter+0xc2>
	default:
		status = RGB_ERROR_FILTER;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
		printf("RGB - Error setFilter : %d\r\n", status);
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	4619      	mov	r1, r3
 80026f4:	4805      	ldr	r0, [pc, #20]	; (800270c <RGB_SetFilter+0xd4>)
 80026f6:	f00f f977 	bl	80119e8 <iprintf>
	}
	rgbSensor->it.colorFilter = color;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	return status;
 8002702:	7bfb      	ldrb	r3, [r7, #15]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	08016a20 	.word	0x08016a20

08002710 <RGB_SetOFscaling>:

uint8_t RGB_SetOFscaling(RGB_struct* rgbSensor, uint8_t scale){
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = RGB_ERROR_NONE;
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]

	switch(scale)
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d03d      	beq.n	80027a2 <RGB_SetOFscaling+0x92>
 8002726:	2b64      	cmp	r3, #100	; 0x64
 8002728:	dc4c      	bgt.n	80027c4 <RGB_SetOFscaling+0xb4>
 800272a:	2b14      	cmp	r3, #20
 800272c:	d028      	beq.n	8002780 <RGB_SetOFscaling+0x70>
 800272e:	2b14      	cmp	r3, #20
 8002730:	dc48      	bgt.n	80027c4 <RGB_SetOFscaling+0xb4>
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <RGB_SetOFscaling+0x2c>
 8002736:	2b02      	cmp	r3, #2
 8002738:	d011      	beq.n	800275e <RGB_SetOFscaling+0x4e>
 800273a:	e043      	b.n	80027c4 <RGB_SetOFscaling+0xb4>
	{
	case 0:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_RESET);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6998      	ldr	r0, [r3, #24]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	8b9b      	ldrh	r3, [r3, #28]
 8002744:	2200      	movs	r2, #0
 8002746:	4619      	mov	r1, r3
 8002748:	f003 fa74 	bl	8005c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_RESET);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a18      	ldr	r0, [r3, #32]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002754:	2200      	movs	r2, #0
 8002756:	4619      	mov	r1, r3
 8002758:	f003 fa6c 	bl	8005c34 <HAL_GPIO_WritePin>
		break;
 800275c:	e039      	b.n	80027d2 <RGB_SetOFscaling+0xc2>
	case 2:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_RESET);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6998      	ldr	r0, [r3, #24]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	8b9b      	ldrh	r3, [r3, #28]
 8002766:	2200      	movs	r2, #0
 8002768:	4619      	mov	r1, r3
 800276a:	f003 fa63 	bl	8005c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_SET);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a18      	ldr	r0, [r3, #32]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002776:	2201      	movs	r2, #1
 8002778:	4619      	mov	r1, r3
 800277a:	f003 fa5b 	bl	8005c34 <HAL_GPIO_WritePin>
		break;
 800277e:	e028      	b.n	80027d2 <RGB_SetOFscaling+0xc2>
	case 20:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_SET);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6998      	ldr	r0, [r3, #24]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	8b9b      	ldrh	r3, [r3, #28]
 8002788:	2201      	movs	r2, #1
 800278a:	4619      	mov	r1, r3
 800278c:	f003 fa52 	bl	8005c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_RESET);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a18      	ldr	r0, [r3, #32]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002798:	2200      	movs	r2, #0
 800279a:	4619      	mov	r1, r3
 800279c:	f003 fa4a 	bl	8005c34 <HAL_GPIO_WritePin>
		break;
 80027a0:	e017      	b.n	80027d2 <RGB_SetOFscaling+0xc2>
	case 100:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_SET);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6998      	ldr	r0, [r3, #24]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	8b9b      	ldrh	r3, [r3, #28]
 80027aa:	2201      	movs	r2, #1
 80027ac:	4619      	mov	r1, r3
 80027ae:	f003 fa41 	bl	8005c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_SET);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a18      	ldr	r0, [r3, #32]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80027ba:	2201      	movs	r2, #1
 80027bc:	4619      	mov	r1, r3
 80027be:	f003 fa39 	bl	8005c34 <HAL_GPIO_WritePin>
		break;
 80027c2:	e006      	b.n	80027d2 <RGB_SetOFscaling+0xc2>
	default:
		status = RGB_ERROR_OF_SCALING;
 80027c4:	2302      	movs	r3, #2
 80027c6:	73fb      	strb	r3, [r7, #15]
		printf("RGB - Error setOFscaling : %d\r\n", status);
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	4619      	mov	r1, r3
 80027cc:	4803      	ldr	r0, [pc, #12]	; (80027dc <RGB_SetOFscaling+0xcc>)
 80027ce:	f00f f90b 	bl	80119e8 <iprintf>
	}

	return status;
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	08016a40 	.word	0x08016a40

080027e0 <RGB_IsTheFloorRed>:


uint8_t RGB_IsTheFloorRed(RGB_struct* rgbSensor){
 80027e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
	uint8_t status = RGB_ERROR_NONE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	73fb      	strb	r3, [r7, #15]

	rgbSensor->it.difference = rgbSensor->it.icVal2 - rgbSensor->it.icVal1;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	float refClock = RGB_APBCLOCK/(RGB_PRESCALER);
 8002804:	4b59      	ldr	r3, [pc, #356]	; (800296c <RGB_IsTheFloorRed+0x18c>)
 8002806:	60bb      	str	r3, [r7, #8]
	rgbSensor->it.frequency = refClock/rgbSensor->it.difference;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002816:	edd7 6a02 	vldr	s13, [r7, #8]
 800281a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	switch(rgbSensor->it.colorFilter)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800282a:	2b02      	cmp	r3, #2
 800282c:	d01c      	beq.n	8002868 <RGB_IsTheFloorRed+0x88>
 800282e:	2b02      	cmp	r3, #2
 8002830:	dc46      	bgt.n	80028c0 <RGB_IsTheFloorRed+0xe0>
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <RGB_IsTheFloorRed+0x5c>
 8002836:	2b01      	cmp	r3, #1
 8002838:	d02c      	beq.n	8002894 <RGB_IsTheFloorRed+0xb4>
 800283a:	e041      	b.n	80028c0 <RGB_IsTheFloorRed+0xe0>
	{
	case RGB_RED:
		rgbSensor->red = (uint16_t)rgbSensor->it.frequency;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002846:	ee17 3a90 	vmov	r3, s15
 800284a:	b29a      	uxth	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	86da      	strh	r2, [r3, #54]	; 0x36
		rgbSensor->it.colorFilter = RGB_GREEN;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		RGB_SetFilter(rgbSensor, rgbSensor->it.colorFilter);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800285e:	4619      	mov	r1, r3
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff fee9 	bl	8002638 <RGB_SetFilter>
		break;
 8002866:	e02e      	b.n	80028c6 <RGB_IsTheFloorRed+0xe6>
	case RGB_GREEN:
		rgbSensor->green = (uint16_t)rgbSensor->it.frequency;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800286e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002872:	ee17 3a90 	vmov	r3, s15
 8002876:	b29a      	uxth	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	871a      	strh	r2, [r3, #56]	; 0x38
		rgbSensor->it.colorFilter = RGB_BLUE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		RGB_SetFilter(rgbSensor, rgbSensor->it.colorFilter);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800288a:	4619      	mov	r1, r3
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff fed3 	bl	8002638 <RGB_SetFilter>
		break;
 8002892:	e018      	b.n	80028c6 <RGB_IsTheFloorRed+0xe6>
	case RGB_BLUE:
		rgbSensor->blue = (uint16_t)rgbSensor->it.frequency;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800289a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800289e:	ee17 3a90 	vmov	r3, s15
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	875a      	strh	r2, [r3, #58]	; 0x3a
		rgbSensor->it.colorFilter = RGB_RED;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		RGB_SetFilter(rgbSensor, rgbSensor->it.colorFilter);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b6:	4619      	mov	r1, r3
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff febd 	bl	8002638 <RGB_SetFilter>
		break;
 80028be:	e002      	b.n	80028c6 <RGB_IsTheFloorRed+0xe6>
	default:
		printf("RGB - Error setFilter\r\n");
 80028c0:	482b      	ldr	r0, [pc, #172]	; (8002970 <RGB_IsTheFloorRed+0x190>)
 80028c2:	f00f f917 	bl	8011af4 <puts>
	}
	if((rgbSensor->red >= (1.5*rgbSensor->green)) & (rgbSensor->red >= (1.5*rgbSensor->blue))){
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fe4a 	bl	8000564 <__aeabi_i2d>
 80028d0:	4604      	mov	r4, r0
 80028d2:	460d      	mov	r5, r1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd fe43 	bl	8000564 <__aeabi_i2d>
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	4b24      	ldr	r3, [pc, #144]	; (8002974 <RGB_IsTheFloorRed+0x194>)
 80028e4:	f7fd fea8 	bl	8000638 <__aeabi_dmul>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	2101      	movs	r1, #1
 80028ee:	460e      	mov	r6, r1
 80028f0:	4620      	mov	r0, r4
 80028f2:	4629      	mov	r1, r5
 80028f4:	f7fe f926 	bl	8000b44 <__aeabi_dcmpge>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <RGB_IsTheFloorRed+0x122>
 80028fe:	2300      	movs	r3, #0
 8002900:	461e      	mov	r6, r3
 8002902:	b2f6      	uxtb	r6, r6
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fe2b 	bl	8000564 <__aeabi_i2d>
 800290e:	4604      	mov	r4, r0
 8002910:	460d      	mov	r5, r1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002916:	4618      	mov	r0, r3
 8002918:	f7fd fe24 	bl	8000564 <__aeabi_i2d>
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	4b14      	ldr	r3, [pc, #80]	; (8002974 <RGB_IsTheFloorRed+0x194>)
 8002922:	f7fd fe89 	bl	8000638 <__aeabi_dmul>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	2101      	movs	r1, #1
 800292c:	4688      	mov	r8, r1
 800292e:	4620      	mov	r0, r4
 8002930:	4629      	mov	r1, r5
 8002932:	f7fe f907 	bl	8000b44 <__aeabi_dcmpge>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <RGB_IsTheFloorRed+0x160>
 800293c:	2300      	movs	r3, #0
 800293e:	4698      	mov	r8, r3
 8002940:	fa5f f388 	uxtb.w	r3, r8
 8002944:	4033      	ands	r3, r6
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <RGB_IsTheFloorRed+0x176>
		rgbSensor->isFloorRed = 1;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002954:	e003      	b.n	800295e <RGB_IsTheFloorRed+0x17e>
	}else{
		rgbSensor->isFloorRed = 0;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	}

	return status;
 800295e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800296a:	bf00      	nop
 800296c:	49742400 	.word	0x49742400
 8002970:	08016a60 	.word	0x08016a60
 8002974:	3ff80000 	.word	0x3ff80000

08002978 <TOF_Init_SetI2C>:
 *      Author: jerem
 */

#include "BOTterfly-H/tof_sensor.h"

uint8_t TOF_Init_SetI2C(VL53L0X_Dev_t* device, I2C_HandleTypeDef *hi2c, uint8_t I2cAddr){
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	4613      	mov	r3, r2
 8002984:	71fb      	strb	r3, [r7, #7]
	device->I2cHandle = hi2c;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	device->I2cAddr = I2cAddr;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	79fa      	ldrb	r2, [r7, #7]
 8002992:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173

	return 0;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <TOF_Init_SetGPIOs>:

uint8_t TOF_Init_SetGPIOs(VL53L0X_Dev_t* device, GPIO_TypeDef* XSHUT_GPIOx, uint16_t XSHUT_GPIO_Pin,
		GPIO_TypeDef* EXTI_GPIOx, uint16_t EXTI_GPIO_Pin){
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	80fb      	strh	r3, [r7, #6]
	device->XSHUT_GPIOx = XSHUT_GPIOx;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	device->XSHUT_GPIO_Pin = XSHUT_GPIO_Pin;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	88fa      	ldrh	r2, [r7, #6]
 80029c0:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
	device->EXTI_GPIOx = EXTI_GPIOx;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	device->EXTI_GPIO_Pin = EXTI_GPIO_Pin;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8b3a      	ldrh	r2, [r7, #24]
 80029d0:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170

	return 0;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <TOF_Init_SetEXTI>:

uint8_t TOF_Init_SetEXTI(VL53L0X_Dev_t* device, IRQn_Type EXTIx_IRQn){
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	460b      	mov	r3, r1
 80029ec:	70fb      	strb	r3, [r7, #3]
	device->EXTI_IRQn = EXTIx_IRQn;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172

	return 0;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <TOF_Init>:

uint8_t TOF_Init(VL53L0X_Dev_t* device){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	for(int i=0; i<TOF_nbOfSensor; i++){
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	e021      	b.n	8002a56 <TOF_Init+0x52>
		device[i].I2cDevAddr = 0x52;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002a18:	fb02 f303 	mul.w	r3, r2, r3
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	4413      	add	r3, r2
 8002a20:	2252      	movs	r2, #82	; 0x52
 8002a22:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
		device[i].comms_speed_khz = 400;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	4413      	add	r3, r2
 8002a34:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002a38:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
		device[i].comms_type = 1;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
	for(int i=0; i<TOF_nbOfSensor; i++){
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	3301      	adds	r3, #1
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	ddda      	ble.n	8002a12 <TOF_Init+0xe>
	}

	// Disable the interruptions
	// Useful for the INITIALIZATION FLOW before changing the address of each device
	for(int i=0; i<TOF_nbOfSensor; i++){
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	e024      	b.n	8002aac <TOF_Init+0xa8>
		HAL_GPIO_WritePin(device[i].XSHUT_GPIOx, device[i].XSHUT_GPIO_Pin, GPIO_PIN_RESET);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002a68:	fb02 f303 	mul.w	r3, r2, r3
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002a7a:	fb02 f303 	mul.w	r3, r2, r3
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 8002a86:	2200      	movs	r2, #0
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f003 f8d3 	bl	8005c34 <HAL_GPIO_WritePin>
		HAL_NVIC_DisableIRQ(device[i].EXTI_IRQn);
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002a94:	fb02 f303 	mul.w	r3, r2, r3
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f993 3172 	ldrsb.w	r3, [r3, #370]	; 0x172
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f002 fb23 	bl	80050ec <HAL_NVIC_DisableIRQ>
	for(int i=0; i<TOF_nbOfSensor; i++){
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	ddd7      	ble.n	8002a62 <TOF_Init+0x5e>
	}
	HAL_Delay(100);
 8002ab2:	2064      	movs	r0, #100	; 0x64
 8002ab4:	f001 fd74 	bl	80045a0 <HAL_Delay>

	// INITIALIZATION FLOW
	for(int i=0; i<TOF_nbOfSensor; i++){
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	e046      	b.n	8002b4c <TOF_Init+0x148>
		HAL_GPIO_WritePin(device[i].XSHUT_GPIOx, device[i].XSHUT_GPIO_Pin, GPIO_PIN_SET);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002ac4:	fb02 f303 	mul.w	r3, r2, r3
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	4413      	add	r3, r2
 8002acc:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f003 f8a5 	bl	8005c34 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8002aea:	2064      	movs	r0, #100	; 0x64
 8002aec:	f001 fd58 	bl	80045a0 <HAL_Delay>
		TOF_InitializationFlow(&device[i], (uint8_t)device[i].EXTI_GPIOx->ODR);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	18d0      	adds	r0, r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	4619      	mov	r1, r3
 8002b16:	f000 f824 	bl	8002b62 <TOF_InitializationFlow>
		TOF_SetDeviceAddr(&device[i], device[i].I2cAddr);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002b20:	fb02 f303 	mul.w	r3, r2, r3
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	18d0      	adds	r0, r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002b2e:	fb02 f303 	mul.w	r3, r2, r3
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	f893 3173 	ldrb.w	r3, [r3, #371]	; 0x173
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f000 f8d8 	bl	8002cf0 <TOF_SetDeviceAddr>
		HAL_Delay(100);
 8002b40:	2064      	movs	r0, #100	; 0x64
 8002b42:	f001 fd2d 	bl	80045a0 <HAL_Delay>
	for(int i=0; i<TOF_nbOfSensor; i++){
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	ddb5      	ble.n	8002abe <TOF_Init+0xba>

	// Enable the Interruptions
//	for(int i=0; i<TOF_nbOfSensor; i++){
//		HAL_NVIC_EnableIRQ(device[i].EXTI_IRQn);
//	}
	HAL_Delay(100);
 8002b52:	2064      	movs	r0, #100	; 0x64
 8002b54:	f001 fd24 	bl	80045a0 <HAL_Delay>

	return 0;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <TOF_InitializationFlow>:

uint8_t TOF_InitializationFlow(VL53L0X_Dev_t* device, uint8_t interruptPin){
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	70fb      	strb	r3, [r7, #3]
	// Device initialization (~ 40ms)
	TOF_Initialization(device);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f81a 	bl	8002ba8 <TOF_Initialization>
	HAL_Delay(50);
 8002b74:	2032      	movs	r0, #50	; 0x32
 8002b76:	f001 fd13 	bl	80045a0 <HAL_Delay>

	// Calibration data loading (~ 1ms)
	TOF_Calibration(device);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f842 	bl	8002c04 <TOF_Calibration>
	HAL_Delay(5);
 8002b80:	2005      	movs	r0, #5
 8002b82:	f001 fd0d 	bl	80045a0 <HAL_Delay>

	// System settings (~ 1ms)
	TOF_Settings(device, interruptPin);
 8002b86:	78fb      	ldrb	r3, [r7, #3]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f87a 	bl	8002c84 <TOF_Settings>
	HAL_Delay(5);
 8002b90:	2005      	movs	r0, #5
 8002b92:	f001 fd05 	bl	80045a0 <HAL_Delay>

	VL53L0X_StartMeasurement(device);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f008 fada 	bl	800b150 <VL53L0X_StartMeasurement>

	return 0;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <TOF_Initialization>:

uint8_t TOF_Initialization(VL53L0X_Dev_t* device){
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	73fb      	strb	r3, [r7, #15]

	// DataInit
	if((status = VL53L0X_DataInit(device)) != VL53L0X_ERROR_NONE){
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f007 fa6f 	bl	800a098 <VL53L0X_DataInit>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	73fb      	strb	r3, [r7, #15]
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d006      	beq.n	8002bd2 <TOF_Initialization+0x2a>
		printf("ToF - Error DataInit : %d\r\n", status);
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	480c      	ldr	r0, [pc, #48]	; (8002bfc <TOF_Initialization+0x54>)
 8002bca:	f00e ff0d 	bl	80119e8 <iprintf>
		return 1;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e00f      	b.n	8002bf2 <TOF_Initialization+0x4a>
	}

	// StaticInit
	if((status = VL53L0X_StaticInit(device)) != VL53L0X_ERROR_NONE){
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f007 fbc4 	bl	800a360 <VL53L0X_StaticInit>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	73fb      	strb	r3, [r7, #15]
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d006      	beq.n	8002bf0 <TOF_Initialization+0x48>
		printf("ToF - Error StaticInit : %d\r\n", status);
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	4619      	mov	r1, r3
 8002be6:	4806      	ldr	r0, [pc, #24]	; (8002c00 <TOF_Initialization+0x58>)
 8002be8:	f00e fefe 	bl	80119e8 <iprintf>
		return 1;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <TOF_Initialization+0x4a>
	}

	return 0;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	08016a78 	.word	0x08016a78
 8002c00:	08016a94 	.word	0x08016a94

08002c04 <TOF_Calibration>:
// SPADs calibration
static uint32_t *refSpadCount; static uint8_t *isApertureSpads;
// Temperature calibration
static uint8_t *pVhvSettings; static uint8_t *pPhaseCal;

uint8_t TOF_Calibration(VL53L0X_Dev_t* device){
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	73fb      	strb	r3, [r7, #15]

	// SPADs calibration (~ 10ms)
	if((status = VL53L0X_PerformRefSpadManagement(device, refSpadCount, isApertureSpads)) != VL53L0X_ERROR_NONE){
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <TOF_Calibration+0x68>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a16      	ldr	r2, [pc, #88]	; (8002c70 <TOF_Calibration+0x6c>)
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f008 feaa 	bl	800b974 <VL53L0X_PerformRefSpadManagement>
 8002c20:	4603      	mov	r3, r0
 8002c22:	73fb      	strb	r3, [r7, #15]
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d006      	beq.n	8002c38 <TOF_Calibration+0x34>
		printf("ToF - Error SPADs calibration : %d\r\n", status);
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4811      	ldr	r0, [pc, #68]	; (8002c74 <TOF_Calibration+0x70>)
 8002c30:	f00e feda 	bl	80119e8 <iprintf>
		return 1;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e014      	b.n	8002c62 <TOF_Calibration+0x5e>
	}

	// Temperature calibration (~ 40ms)
	if((status = VL53L0X_PerformRefCalibration(device, pVhvSettings, pPhaseCal)) != VL53L0X_ERROR_NONE){
 8002c38:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <TOF_Calibration+0x74>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0f      	ldr	r2, [pc, #60]	; (8002c7c <TOF_Calibration+0x78>)
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	4619      	mov	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f008 fa08 	bl	800b058 <VL53L0X_PerformRefCalibration>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	73fb      	strb	r3, [r7, #15]
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d006      	beq.n	8002c60 <TOF_Calibration+0x5c>
		printf("ToF - Error Temperature calibration : %d\r\n", status);
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	4619      	mov	r1, r3
 8002c56:	480a      	ldr	r0, [pc, #40]	; (8002c80 <TOF_Calibration+0x7c>)
 8002c58:	f00e fec6 	bl	80119e8 <iprintf>
		return 1;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <TOF_Calibration+0x5e>
	}

	return 0;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000508 	.word	0x20000508
 8002c70:	2000050c 	.word	0x2000050c
 8002c74:	08016ab4 	.word	0x08016ab4
 8002c78:	20000510 	.word	0x20000510
 8002c7c:	20000514 	.word	0x20000514
 8002c80:	08016adc 	.word	0x08016adc

08002c84 <TOF_Settings>:

uint8_t TOF_Settings(VL53L0X_Dev_t* device, uint8_t interruptPin){
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L0X_ERROR_NONE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]

	// Device mode
	if((status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING)) != VL53L0X_ERROR_NONE){
 8002c94:	2101      	movs	r1, #1
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f007 fd74 	bl	800a784 <VL53L0X_SetDeviceMode>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	73fb      	strb	r3, [r7, #15]
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d006      	beq.n	8002cb4 <TOF_Settings+0x30>
		printf("ToF - Error SetDeviceMode : %d\r\n", status);
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	480f      	ldr	r0, [pc, #60]	; (8002ce8 <TOF_Settings+0x64>)
 8002cac:	f00e fe9c 	bl	80119e8 <iprintf>
		return 1;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e015      	b.n	8002ce0 <TOF_Settings+0x5c>
	}

	// Set GPIO : Pour interruptions
	status = VL53L0X_SetGpioConfig(device, interruptPin, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING, VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY, VL53L0X_INTERRUPTPOLARITY_HIGH);
 8002cb4:	78f9      	ldrb	r1, [r7, #3]
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2304      	movs	r3, #4
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f008 fc9c 	bl	800b5fc <VL53L0X_SetGpioConfig>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	73fb      	strb	r3, [r7, #15]
	if(status != VL53L0X_ERROR_NONE){
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d007      	beq.n	8002cde <TOF_Settings+0x5a>
		printf("ToF - Error SetGPIO : %d %d\r\n",status,interruptPin);
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4805      	ldr	r0, [pc, #20]	; (8002cec <TOF_Settings+0x68>)
 8002cd6:	f00e fe87 	bl	80119e8 <iprintf>
		return 1;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <TOF_Settings+0x5c>
	}

	//VL53L0X_SetInterMeasurementPeriodMilliSeconds(Dev, InterMeasurementPeriodMilliSeconds)

	return 0;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	08016b08 	.word	0x08016b08
 8002cec:	08016b2c 	.word	0x08016b2c

08002cf0 <TOF_SetDeviceAddr>:

uint8_t TOF_SetDeviceAddr(VL53L0X_Dev_t* device, uint8_t new_addr){
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L0X_ERROR_NONE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	73fb      	strb	r3, [r7, #15]

	if((status = VL53L0X_SetDeviceAddress(device, new_addr)) != VL53L0X_ERROR_NONE){
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	4619      	mov	r1, r3
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f007 f9ae 	bl	800a066 <VL53L0X_SetDeviceAddress>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	73fb      	strb	r3, [r7, #15]
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d006      	beq.n	8002d22 <TOF_SetDeviceAddr+0x32>
		printf("ToF - Error SetDeviceAddress : %d\r\n", status);
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	4619      	mov	r1, r3
 8002d18:	4806      	ldr	r0, [pc, #24]	; (8002d34 <TOF_SetDeviceAddr+0x44>)
 8002d1a:	f00e fe65 	bl	80119e8 <iprintf>
		return 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e004      	b.n	8002d2c <TOF_SetDeviceAddr+0x3c>
	}
	device->I2cDevAddr = new_addr;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174

	return 0;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	08016b4c 	.word	0x08016b4c

08002d38 <TOF_SetDistance_mm>:
	printf("ProductRevisionMinor : %d\r\n", deviceInfo->ProductRevisionMinor);

	return 0;
}

uint8_t TOF_SetDistance_mm(VL53L0X_Dev_t* device){
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	VL53L0X_RangingMeasurementData_t VL53L0X_RangingMeasurementData;

	VL53L0X_GetRangingMeasurementData(device, &VL53L0X_RangingMeasurementData); // ~ 460us
 8002d40:	f107 030c 	add.w	r3, r7, #12
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f008 fb04 	bl	800b354 <VL53L0X_GetRangingMeasurementData>
	device->rangeMillimeter = VL53L0X_RangingMeasurementData.RangeMilliMeter; // ~ 0.25us
 8002d4c:	8aba      	ldrh	r2, [r7, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	VL53L0X_ClearInterruptMask(device, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY); // ~ 295us
 8002d54:	2104      	movs	r1, #4
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f008 fdaa 	bl	800b8b0 <VL53L0X_ClearInterruptMask>

	return 0;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3728      	adds	r7, #40	; 0x28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d6e:	463b      	mov	r3, r7
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002d7a:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <MX_ADC1_Init+0xec>)
 8002d7c:	4a36      	ldr	r2, [pc, #216]	; (8002e58 <MX_ADC1_Init+0xf0>)
 8002d7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d80:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <MX_ADC1_Init+0xec>)
 8002d82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d88:	4b32      	ldr	r3, [pc, #200]	; (8002e54 <MX_ADC1_Init+0xec>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002d8e:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <MX_ADC1_Init+0xec>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002d94:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <MX_ADC1_Init+0xec>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d9a:	4b2e      	ldr	r3, [pc, #184]	; (8002e54 <MX_ADC1_Init+0xec>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002da2:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <MX_ADC1_Init+0xec>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002da8:	4b2a      	ldr	r3, [pc, #168]	; (8002e54 <MX_ADC1_Init+0xec>)
 8002daa:	4a2c      	ldr	r2, [pc, #176]	; (8002e5c <MX_ADC1_Init+0xf4>)
 8002dac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002dae:	4b29      	ldr	r3, [pc, #164]	; (8002e54 <MX_ADC1_Init+0xec>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002db4:	4b27      	ldr	r3, [pc, #156]	; (8002e54 <MX_ADC1_Init+0xec>)
 8002db6:	2204      	movs	r2, #4
 8002db8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002dba:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <MX_ADC1_Init+0xec>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002dc2:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <MX_ADC1_Init+0xec>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002dc8:	4822      	ldr	r0, [pc, #136]	; (8002e54 <MX_ADC1_Init+0xec>)
 8002dca:	f001 fc0d 	bl	80045e8 <HAL_ADC_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002dd4:	f000 fe72 	bl	8003abc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002dd8:	2304      	movs	r3, #4
 8002dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002de4:	463b      	mov	r3, r7
 8002de6:	4619      	mov	r1, r3
 8002de8:	481a      	ldr	r0, [pc, #104]	; (8002e54 <MX_ADC1_Init+0xec>)
 8002dea:	f001 fdc9 	bl	8004980 <HAL_ADC_ConfigChannel>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002df4:	f000 fe62 	bl	8003abc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002df8:	2305      	movs	r3, #5
 8002dfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e00:	463b      	mov	r3, r7
 8002e02:	4619      	mov	r1, r3
 8002e04:	4813      	ldr	r0, [pc, #76]	; (8002e54 <MX_ADC1_Init+0xec>)
 8002e06:	f001 fdbb 	bl	8004980 <HAL_ADC_ConfigChannel>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002e10:	f000 fe54 	bl	8003abc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002e14:	230e      	movs	r3, #14
 8002e16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e1c:	463b      	mov	r3, r7
 8002e1e:	4619      	mov	r1, r3
 8002e20:	480c      	ldr	r0, [pc, #48]	; (8002e54 <MX_ADC1_Init+0xec>)
 8002e22:	f001 fdad 	bl	8004980 <HAL_ADC_ConfigChannel>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002e2c:	f000 fe46 	bl	8003abc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002e30:	230f      	movs	r3, #15
 8002e32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002e34:	2304      	movs	r3, #4
 8002e36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e38:	463b      	mov	r3, r7
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4805      	ldr	r0, [pc, #20]	; (8002e54 <MX_ADC1_Init+0xec>)
 8002e3e:	f001 fd9f 	bl	8004980 <HAL_ADC_ConfigChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002e48:	f000 fe38 	bl	8003abc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20004b78 	.word	0x20004b78
 8002e58:	40012000 	.word	0x40012000
 8002e5c:	0f000001 	.word	0x0f000001

08002e60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	; 0x28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 0314 	add.w	r3, r7, #20
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a3c      	ldr	r2, [pc, #240]	; (8002f70 <HAL_ADC_MspInit+0x110>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d171      	bne.n	8002f66 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	4b3b      	ldr	r3, [pc, #236]	; (8002f74 <HAL_ADC_MspInit+0x114>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	4a3a      	ldr	r2, [pc, #232]	; (8002f74 <HAL_ADC_MspInit+0x114>)
 8002e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e90:	6453      	str	r3, [r2, #68]	; 0x44
 8002e92:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <HAL_ADC_MspInit+0x114>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	613b      	str	r3, [r7, #16]
 8002e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	4b34      	ldr	r3, [pc, #208]	; (8002f74 <HAL_ADC_MspInit+0x114>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a33      	ldr	r2, [pc, #204]	; (8002f74 <HAL_ADC_MspInit+0x114>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <HAL_ADC_MspInit+0x114>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	4b2d      	ldr	r3, [pc, #180]	; (8002f74 <HAL_ADC_MspInit+0x114>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	4a2c      	ldr	r2, [pc, #176]	; (8002f74 <HAL_ADC_MspInit+0x114>)
 8002ec4:	f043 0304 	orr.w	r3, r3, #4
 8002ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eca:	4b2a      	ldr	r3, [pc, #168]	; (8002f74 <HAL_ADC_MspInit+0x114>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = PH_ADC0_Pin|PH_ADC1_Pin;
 8002ed6:	2330      	movs	r3, #48	; 0x30
 8002ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eda:	2303      	movs	r3, #3
 8002edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee2:	f107 0314 	add.w	r3, r7, #20
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4823      	ldr	r0, [pc, #140]	; (8002f78 <HAL_ADC_MspInit+0x118>)
 8002eea:	f002 fd0f 	bl	800590c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PH_ADC2_Pin|PH_ADC3_Pin;
 8002eee:	2330      	movs	r3, #48	; 0x30
 8002ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002efa:	f107 0314 	add.w	r3, r7, #20
 8002efe:	4619      	mov	r1, r3
 8002f00:	481e      	ldr	r0, [pc, #120]	; (8002f7c <HAL_ADC_MspInit+0x11c>)
 8002f02:	f002 fd03 	bl	800590c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002f06:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <HAL_ADC_MspInit+0x120>)
 8002f08:	4a1e      	ldr	r2, [pc, #120]	; (8002f84 <HAL_ADC_MspInit+0x124>)
 8002f0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002f0c:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <HAL_ADC_MspInit+0x120>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f12:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <HAL_ADC_MspInit+0x120>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f18:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <HAL_ADC_MspInit+0x120>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f1e:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <HAL_ADC_MspInit+0x120>)
 8002f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f24:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f26:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <HAL_ADC_MspInit+0x120>)
 8002f28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f2c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f2e:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <HAL_ADC_MspInit+0x120>)
 8002f30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_ADC_MspInit+0x120>)
 8002f38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f3c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f3e:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <HAL_ADC_MspInit+0x120>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f44:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <HAL_ADC_MspInit+0x120>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f4a:	480d      	ldr	r0, [pc, #52]	; (8002f80 <HAL_ADC_MspInit+0x120>)
 8002f4c:	f002 f8dc 	bl	8005108 <HAL_DMA_Init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002f56:	f000 fdb1 	bl	8003abc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a08      	ldr	r2, [pc, #32]	; (8002f80 <HAL_ADC_MspInit+0x120>)
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38
 8002f60:	4a07      	ldr	r2, [pc, #28]	; (8002f80 <HAL_ADC_MspInit+0x120>)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002f66:	bf00      	nop
 8002f68:	3728      	adds	r7, #40	; 0x28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40012000 	.word	0x40012000
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40020000 	.word	0x40020000
 8002f7c:	40020800 	.word	0x40020800
 8002f80:	20004bc0 	.word	0x20004bc0
 8002f84:	40026410 	.word	0x40026410

08002f88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <MX_DMA_Init+0x3c>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	4a0b      	ldr	r2, [pc, #44]	; (8002fc4 <MX_DMA_Init+0x3c>)
 8002f98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <MX_DMA_Init+0x3c>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa6:	607b      	str	r3, [r7, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002faa:	2200      	movs	r2, #0
 8002fac:	2105      	movs	r1, #5
 8002fae:	2038      	movs	r0, #56	; 0x38
 8002fb0:	f002 f872 	bl	8005098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002fb4:	2038      	movs	r0, #56	; 0x38
 8002fb6:	f002 f88b 	bl	80050d0 <HAL_NVIC_EnableIRQ>

}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800

08002fc8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4a07      	ldr	r2, [pc, #28]	; (8002ff4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002fd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	4a06      	ldr	r2, [pc, #24]	; (8002ff8 <vApplicationGetIdleTaskMemory+0x30>)
 8002fde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2280      	movs	r2, #128	; 0x80
 8002fe4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20000518 	.word	0x20000518
 8002ff8:	200005cc 	.word	0x200005cc

08002ffc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002ffc:	b5b0      	push	{r4, r5, r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003002:	4b0a      	ldr	r3, [pc, #40]	; (800302c <MX_FREERTOS_Init+0x30>)
 8003004:	1d3c      	adds	r4, r7, #4
 8003006:	461d      	mov	r5, r3
 8003008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800300a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800300c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003010:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003014:	1d3b      	adds	r3, r7, #4
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f00b fd85 	bl	800eb28 <osThreadCreate>
 800301e:	4603      	mov	r3, r0
 8003020:	4a03      	ldr	r2, [pc, #12]	; (8003030 <MX_FREERTOS_Init+0x34>)
 8003022:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003024:	bf00      	nop
 8003026:	3720      	adds	r7, #32
 8003028:	46bd      	mov	sp, r7
 800302a:	bdb0      	pop	{r4, r5, r7, pc}
 800302c:	08016c2c 	.word	0x08016c2c
 8003030:	20004c20 	.word	0x20004c20

08003034 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800303c:	2001      	movs	r0, #1
 800303e:	f00b fdbf 	bl	800ebc0 <osDelay>
 8003042:	e7fb      	b.n	800303c <StartDefaultTask+0x8>

08003044 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	; 0x28
 8003048:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304a:	f107 0314 	add.w	r3, r7, #20
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	60da      	str	r2, [r3, #12]
 8003058:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	4b5d      	ldr	r3, [pc, #372]	; (80031d4 <MX_GPIO_Init+0x190>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a5c      	ldr	r2, [pc, #368]	; (80031d4 <MX_GPIO_Init+0x190>)
 8003064:	f043 0304 	orr.w	r3, r3, #4
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b5a      	ldr	r3, [pc, #360]	; (80031d4 <MX_GPIO_Init+0x190>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	4b56      	ldr	r3, [pc, #344]	; (80031d4 <MX_GPIO_Init+0x190>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	4a55      	ldr	r2, [pc, #340]	; (80031d4 <MX_GPIO_Init+0x190>)
 8003080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003084:	6313      	str	r3, [r2, #48]	; 0x30
 8003086:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <MX_GPIO_Init+0x190>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	4b4f      	ldr	r3, [pc, #316]	; (80031d4 <MX_GPIO_Init+0x190>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4a4e      	ldr	r2, [pc, #312]	; (80031d4 <MX_GPIO_Init+0x190>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	4b4c      	ldr	r3, [pc, #304]	; (80031d4 <MX_GPIO_Init+0x190>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	4b48      	ldr	r3, [pc, #288]	; (80031d4 <MX_GPIO_Init+0x190>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a47      	ldr	r2, [pc, #284]	; (80031d4 <MX_GPIO_Init+0x190>)
 80030b8:	f043 0302 	orr.w	r3, r3, #2
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b45      	ldr	r3, [pc, #276]	; (80031d4 <MX_GPIO_Init+0x190>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	607b      	str	r3, [r7, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTG_IN1_Pin|MOTG_IN2_Pin|TOF_XSHUT2_Pin|TOF_XSHUT1_Pin
 80030ca:	2200      	movs	r2, #0
 80030cc:	f240 11c3 	movw	r1, #451	; 0x1c3
 80030d0:	4841      	ldr	r0, [pc, #260]	; (80031d8 <MX_GPIO_Init+0x194>)
 80030d2:	f002 fdaf 	bl	8005c34 <HAL_GPIO_WritePin>
                          |TOF_XSHUT0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGB_S3_Pin|RGB_S2_Pin|RGB_S1_Pin|RGB_S0_Pin
 80030d6:	2200      	movs	r2, #0
 80030d8:	f44f 4173 	mov.w	r1, #62208	; 0xf300
 80030dc:	483f      	ldr	r0, [pc, #252]	; (80031dc <MX_GPIO_Init+0x198>)
 80030de:	f002 fda9 	bl	8005c34 <HAL_GPIO_WritePin>
                          |MOTD_IN3_Pin|MOTD_IN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RGB_LED_Pin|RGB_OE_Pin, GPIO_PIN_RESET);
 80030e2:	2200      	movs	r2, #0
 80030e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80030e8:	483d      	ldr	r0, [pc, #244]	; (80031e0 <MX_GPIO_Init+0x19c>)
 80030ea:	f002 fda3 	bl	8005c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80030ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80030f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80030fe:	f107 0314 	add.w	r3, r7, #20
 8003102:	4619      	mov	r1, r3
 8003104:	4834      	ldr	r0, [pc, #208]	; (80031d8 <MX_GPIO_Init+0x194>)
 8003106:	f002 fc01 	bl	800590c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTG_IN1_Pin|MOTG_IN2_Pin|TOF_XSHUT2_Pin|TOF_XSHUT1_Pin
 800310a:	f240 13c3 	movw	r3, #451	; 0x1c3
 800310e:	617b      	str	r3, [r7, #20]
                          |TOF_XSHUT0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003110:	2301      	movs	r3, #1
 8003112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003118:	2300      	movs	r3, #0
 800311a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4619      	mov	r1, r3
 8003122:	482d      	ldr	r0, [pc, #180]	; (80031d8 <MX_GPIO_Init+0x194>)
 8003124:	f002 fbf2 	bl	800590c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOF_GPIOI1_Pin|TOF_GPIOI2_Pin;
 8003128:	2303      	movs	r3, #3
 800312a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800312c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003136:	f107 0314 	add.w	r3, r7, #20
 800313a:	4619      	mov	r1, r3
 800313c:	4827      	ldr	r0, [pc, #156]	; (80031dc <MX_GPIO_Init+0x198>)
 800313e:	f002 fbe5 	bl	800590c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = RGB_S3_Pin|RGB_S2_Pin|RGB_S1_Pin|RGB_S0_Pin
 8003142:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 8003146:	617b      	str	r3, [r7, #20]
                          |MOTD_IN3_Pin|MOTD_IN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003148:	2301      	movs	r3, #1
 800314a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	2300      	movs	r3, #0
 800314e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003150:	2300      	movs	r3, #0
 8003152:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4619      	mov	r1, r3
 800315a:	4820      	ldr	r0, [pc, #128]	; (80031dc <MX_GPIO_Init+0x198>)
 800315c:	f002 fbd6 	bl	800590c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RGB_LED_Pin|RGB_OE_Pin;
 8003160:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003166:	2301      	movs	r3, #1
 8003168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316e:	2300      	movs	r3, #0
 8003170:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003172:	f107 0314 	add.w	r3, r7, #20
 8003176:	4619      	mov	r1, r3
 8003178:	4819      	ldr	r0, [pc, #100]	; (80031e0 <MX_GPIO_Init+0x19c>)
 800317a:	f002 fbc7 	bl	800590c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_GPIOI0_Pin;
 800317e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003184:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOF_GPIOI0_GPIO_Port, &GPIO_InitStruct);
 800318e:	f107 0314 	add.w	r3, r7, #20
 8003192:	4619      	mov	r1, r3
 8003194:	4812      	ldr	r0, [pc, #72]	; (80031e0 <MX_GPIO_Init+0x19c>)
 8003196:	f002 fbb9 	bl	800590c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2105      	movs	r1, #5
 800319e:	2006      	movs	r0, #6
 80031a0:	f001 ff7a 	bl	8005098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80031a4:	2006      	movs	r0, #6
 80031a6:	f001 ff93 	bl	80050d0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80031aa:	2200      	movs	r2, #0
 80031ac:	2105      	movs	r1, #5
 80031ae:	2007      	movs	r0, #7
 80031b0:	f001 ff72 	bl	8005098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80031b4:	2007      	movs	r0, #7
 80031b6:	f001 ff8b 	bl	80050d0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2105      	movs	r1, #5
 80031be:	2028      	movs	r0, #40	; 0x28
 80031c0:	f001 ff6a 	bl	8005098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031c4:	2028      	movs	r0, #40	; 0x28
 80031c6:	f001 ff83 	bl	80050d0 <HAL_NVIC_EnableIRQ>

}
 80031ca:	bf00      	nop
 80031cc:	3728      	adds	r7, #40	; 0x28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40020800 	.word	0x40020800
 80031dc:	40020400 	.word	0x40020400
 80031e0:	40020000 	.word	0x40020000

080031e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031e8:	4b12      	ldr	r3, [pc, #72]	; (8003234 <MX_I2C1_Init+0x50>)
 80031ea:	4a13      	ldr	r2, [pc, #76]	; (8003238 <MX_I2C1_Init+0x54>)
 80031ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80031ee:	4b11      	ldr	r3, [pc, #68]	; (8003234 <MX_I2C1_Init+0x50>)
 80031f0:	4a12      	ldr	r2, [pc, #72]	; (800323c <MX_I2C1_Init+0x58>)
 80031f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031f4:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <MX_I2C1_Init+0x50>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80031fa:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <MX_I2C1_Init+0x50>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <MX_I2C1_Init+0x50>)
 8003202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003206:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <MX_I2C1_Init+0x50>)
 800320a:	2200      	movs	r2, #0
 800320c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <MX_I2C1_Init+0x50>)
 8003210:	2200      	movs	r2, #0
 8003212:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003214:	4b07      	ldr	r3, [pc, #28]	; (8003234 <MX_I2C1_Init+0x50>)
 8003216:	2200      	movs	r2, #0
 8003218:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <MX_I2C1_Init+0x50>)
 800321c:	2200      	movs	r2, #0
 800321e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003220:	4804      	ldr	r0, [pc, #16]	; (8003234 <MX_I2C1_Init+0x50>)
 8003222:	f002 fd39 	bl	8005c98 <HAL_I2C_Init>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800322c:	f000 fc46 	bl	8003abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20004c24 	.word	0x20004c24
 8003238:	40005400 	.word	0x40005400
 800323c:	00061a80 	.word	0x00061a80

08003240 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a19      	ldr	r2, [pc, #100]	; (80032c4 <HAL_I2C_MspInit+0x84>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d12b      	bne.n	80032ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	4b18      	ldr	r3, [pc, #96]	; (80032c8 <HAL_I2C_MspInit+0x88>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a17      	ldr	r2, [pc, #92]	; (80032c8 <HAL_I2C_MspInit+0x88>)
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <HAL_I2C_MspInit+0x88>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800327e:	23c0      	movs	r3, #192	; 0xc0
 8003280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003282:	2312      	movs	r3, #18
 8003284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800328a:	2303      	movs	r3, #3
 800328c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800328e:	2304      	movs	r3, #4
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003292:	f107 0314 	add.w	r3, r7, #20
 8003296:	4619      	mov	r1, r3
 8003298:	480c      	ldr	r0, [pc, #48]	; (80032cc <HAL_I2C_MspInit+0x8c>)
 800329a:	f002 fb37 	bl	800590c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <HAL_I2C_MspInit+0x88>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	4a08      	ldr	r2, [pc, #32]	; (80032c8 <HAL_I2C_MspInit+0x88>)
 80032a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032ac:	6413      	str	r3, [r2, #64]	; 0x40
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <HAL_I2C_MspInit+0x88>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80032ba:	bf00      	nop
 80032bc:	3728      	adds	r7, #40	; 0x28
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40005400 	.word	0x40005400
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40020400 	.word	0x40020400

080032d0 <vTaskSync>:

/*
 * Gère la commande des moteurs en fonction des données des capteurs
 */
void vTaskSync(void* p)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
	int i =0;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]

	printf("Wait BTN \r\n");
 80032dc:	4834      	ldr	r0, [pc, #208]	; (80033b0 <vTaskSync+0xe0>)
 80032de:	f00e fc09 	bl	8011af4 <puts>
	while(BTN == 0){
 80032e2:	bf00      	nop
 80032e4:	4b33      	ldr	r3, [pc, #204]	; (80033b4 <vTaskSync+0xe4>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0fb      	beq.n	80032e4 <vTaskSync+0x14>
		// Ne rien faire
	}
	printf("Start ! \r\n");
 80032ec:	4832      	ldr	r0, [pc, #200]	; (80033b8 <vTaskSync+0xe8>)
 80032ee:	f00e fc01 	bl	8011af4 <puts>

	while(1){

		//printf("TOF=%04d %04d %04d PH=%04ld %04ld %04ld NOISE=%04ld %04ld %04ld NORME=%04lu ANGLE=%03ld RED=%d XY=(%05d;%05d) MOY=%04ld\r\n",TOF_Sensor[0].rangeMillimeter,TOF_Sensor[1].rangeMillimeter,TOF_Sensor[2].rangeMillimeter, Ph_Data[0], Ph_Data[1], Ph_Data[2], Ph_DataNoise[0], Ph_DataNoise[1], Ph_DataNoise[2], Ph_Norma, Ph_Angle, Dir_Red, Dir_X, Dir_Y, Ph_Max_Tr);

		if(i%20 == 0){
 80032f2:	68f9      	ldr	r1, [r7, #12]
 80032f4:	4b31      	ldr	r3, [pc, #196]	; (80033bc <vTaskSync+0xec>)
 80032f6:	fb83 2301 	smull	r2, r3, r3, r1
 80032fa:	10da      	asrs	r2, r3, #3
 80032fc:	17cb      	asrs	r3, r1, #31
 80032fe:	1ad2      	subs	r2, r2, r3
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	1aca      	subs	r2, r1, r3
 800330a:	2a00      	cmp	r2, #0
 800330c:	d107      	bne.n	800331e <vTaskSync+0x4e>
			xSemaphoreGive(semBinary_CMD);
 800330e:	4b2c      	ldr	r3, [pc, #176]	; (80033c0 <vTaskSync+0xf0>)
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	2300      	movs	r3, #0
 8003314:	2200      	movs	r2, #0
 8003316:	2100      	movs	r1, #0
 8003318:	f00b fe0e 	bl	800ef38 <xQueueGenericSend>
 800331c:	e040      	b.n	80033a0 <vTaskSync+0xd0>
		}else if(i%20 == 12){
 800331e:	68f9      	ldr	r1, [r7, #12]
 8003320:	4b26      	ldr	r3, [pc, #152]	; (80033bc <vTaskSync+0xec>)
 8003322:	fb83 2301 	smull	r2, r3, r3, r1
 8003326:	10da      	asrs	r2, r3, #3
 8003328:	17cb      	asrs	r3, r1, #31
 800332a:	1ad2      	subs	r2, r2, r3
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	1aca      	subs	r2, r1, r3
 8003336:	2a0c      	cmp	r2, #12
 8003338:	d107      	bne.n	800334a <vTaskSync+0x7a>
			xSemaphoreGive(semBinary_TOF);
 800333a:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <vTaskSync+0xf4>)
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	2300      	movs	r3, #0
 8003340:	2200      	movs	r2, #0
 8003342:	2100      	movs	r1, #0
 8003344:	f00b fdf8 	bl	800ef38 <xQueueGenericSend>
 8003348:	e02a      	b.n	80033a0 <vTaskSync+0xd0>
		}else if(i%20 == 4){
 800334a:	68f9      	ldr	r1, [r7, #12]
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <vTaskSync+0xec>)
 800334e:	fb83 2301 	smull	r2, r3, r3, r1
 8003352:	10da      	asrs	r2, r3, #3
 8003354:	17cb      	asrs	r3, r1, #31
 8003356:	1ad2      	subs	r2, r2, r3
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	1aca      	subs	r2, r1, r3
 8003362:	2a04      	cmp	r2, #4
 8003364:	d107      	bne.n	8003376 <vTaskSync+0xa6>
			xSemaphoreGive(semBinary_Ph);
 8003366:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <vTaskSync+0xf8>)
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	2300      	movs	r3, #0
 800336c:	2200      	movs	r2, #0
 800336e:	2100      	movs	r1, #0
 8003370:	f00b fde2 	bl	800ef38 <xQueueGenericSend>
 8003374:	e014      	b.n	80033a0 <vTaskSync+0xd0>
		}else if(i%20 == 8){
 8003376:	68f9      	ldr	r1, [r7, #12]
 8003378:	4b10      	ldr	r3, [pc, #64]	; (80033bc <vTaskSync+0xec>)
 800337a:	fb83 2301 	smull	r2, r3, r3, r1
 800337e:	10da      	asrs	r2, r3, #3
 8003380:	17cb      	asrs	r3, r1, #31
 8003382:	1ad2      	subs	r2, r2, r3
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	1aca      	subs	r2, r1, r3
 800338e:	2a08      	cmp	r2, #8
 8003390:	d106      	bne.n	80033a0 <vTaskSync+0xd0>
			xSemaphoreGive(semBinary_RGB);
 8003392:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <vTaskSync+0xfc>)
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	2300      	movs	r3, #0
 8003398:	2200      	movs	r2, #0
 800339a:	2100      	movs	r1, #0
 800339c:	f00b fdcc 	bl	800ef38 <xQueueGenericSend>
		}

		i++;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3301      	adds	r3, #1
 80033a4:	60fb      	str	r3, [r7, #12]

		vTaskDelay(1);
 80033a6:	2001      	movs	r0, #1
 80033a8:	f00c fa84 	bl	800f8b4 <vTaskDelay>
		if(i%20 == 0){
 80033ac:	e7a1      	b.n	80032f2 <vTaskSync+0x22>
 80033ae:	bf00      	nop
 80033b0:	08016c48 	.word	0x08016c48
 80033b4:	200007cc 	.word	0x200007cc
 80033b8:	08016c54 	.word	0x08016c54
 80033bc:	66666667 	.word	0x66666667
 80033c0:	20004c78 	.word	0x20004c78
 80033c4:	20004c98 	.word	0x20004c98
 80033c8:	20004c90 	.word	0x20004c90
 80033cc:	20004c7c 	.word	0x20004c7c

080033d0 <vTaskControl>:
	}
}


void vTaskControl(void * p)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	6078      	str	r0, [r7, #4]
	/* Initialisation Moteur Gauche ---------------------*/
	MOT_InitTimer(&MoteurGauche, &htim1, TIM_CHANNEL_1);
 80033d8:	2200      	movs	r2, #0
 80033da:	4935      	ldr	r1, [pc, #212]	; (80034b0 <vTaskControl+0xe0>)
 80033dc:	4835      	ldr	r0, [pc, #212]	; (80034b4 <vTaskControl+0xe4>)
 80033de:	f7fe fb03 	bl	80019e8 <MOT_InitTimer>
	MOT_InitGPIOs(&MoteurGauche,
 80033e2:	2302      	movs	r3, #2
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	4b34      	ldr	r3, [pc, #208]	; (80034b8 <vTaskControl+0xe8>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	4933      	ldr	r1, [pc, #204]	; (80034b8 <vTaskControl+0xe8>)
 80033ec:	4831      	ldr	r0, [pc, #196]	; (80034b4 <vTaskControl+0xe4>)
 80033ee:	f7fe fb19 	bl	8001a24 <MOT_InitGPIOs>
			MOTG_IN1_GPIO_Port, MOTG_IN1_Pin,
			MOTG_IN2_GPIO_Port, MOTG_IN2_Pin);
	MOT_SetCoeff(&MoteurGauche, 1.2, 0.1);
 80033f2:	eddf 0a32 	vldr	s1, [pc, #200]	; 80034bc <vTaskControl+0xec>
 80033f6:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80034c0 <vTaskControl+0xf0>
 80033fa:	482e      	ldr	r0, [pc, #184]	; (80034b4 <vTaskControl+0xe4>)
 80033fc:	f7fe fb2c 	bl	8001a58 <MOT_SetCoeff>
	MOT_SetDirection(&MoteurGauche, MOT_FUNCTIONS_FORWARD);
 8003400:	2101      	movs	r1, #1
 8003402:	482c      	ldr	r0, [pc, #176]	; (80034b4 <vTaskControl+0xe4>)
 8003404:	f7fe fb3c 	bl	8001a80 <MOT_SetDirection>
	MOT_SetDutyCycle(&MoteurGauche, 0);
 8003408:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80034c4 <vTaskControl+0xf4>
 800340c:	4829      	ldr	r0, [pc, #164]	; (80034b4 <vTaskControl+0xe4>)
 800340e:	f7fe fb8f 	bl	8001b30 <MOT_SetDutyCycle>

	/* Initialisation Moteur Droite ---------------------*/
	MOT_InitTimer(&MoteurDroite, &htim1, TIM_CHANNEL_2);
 8003412:	2204      	movs	r2, #4
 8003414:	4926      	ldr	r1, [pc, #152]	; (80034b0 <vTaskControl+0xe0>)
 8003416:	482c      	ldr	r0, [pc, #176]	; (80034c8 <vTaskControl+0xf8>)
 8003418:	f7fe fae6 	bl	80019e8 <MOT_InitTimer>
	MOT_InitGPIOs(&MoteurDroite,
 800341c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	4b2a      	ldr	r3, [pc, #168]	; (80034cc <vTaskControl+0xfc>)
 8003424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003428:	4928      	ldr	r1, [pc, #160]	; (80034cc <vTaskControl+0xfc>)
 800342a:	4827      	ldr	r0, [pc, #156]	; (80034c8 <vTaskControl+0xf8>)
 800342c:	f7fe fafa 	bl	8001a24 <MOT_InitGPIOs>
			MOTD_IN3_GPIO_Port, MOTD_IN3_Pin,
			MOTD_IN4_GPIO_Port, MOTD_IN4_Pin);
	MOT_SetCoeff(&MoteurDroite, 1.2, 0.1);
 8003430:	eddf 0a22 	vldr	s1, [pc, #136]	; 80034bc <vTaskControl+0xec>
 8003434:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80034c0 <vTaskControl+0xf0>
 8003438:	4823      	ldr	r0, [pc, #140]	; (80034c8 <vTaskControl+0xf8>)
 800343a:	f7fe fb0d 	bl	8001a58 <MOT_SetCoeff>
	MOT_SetDirection(&MoteurDroite, MOT_FUNCTIONS_FORWARD);
 800343e:	2101      	movs	r1, #1
 8003440:	4821      	ldr	r0, [pc, #132]	; (80034c8 <vTaskControl+0xf8>)
 8003442:	f7fe fb1d 	bl	8001a80 <MOT_SetDirection>
	MOT_SetDutyCycle(&MoteurDroite, 0);
 8003446:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80034c4 <vTaskControl+0xf4>
 800344a:	481f      	ldr	r0, [pc, #124]	; (80034c8 <vTaskControl+0xf8>)
 800344c:	f7fe fb70 	bl	8001b30 <MOT_SetDutyCycle>

	/* Initialisation Encodeur Gauche -------------------*/
	ENC_InitTimer(&CodeurGauche, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8003450:	2304      	movs	r3, #4
 8003452:	2200      	movs	r2, #0
 8003454:	491e      	ldr	r1, [pc, #120]	; (80034d0 <vTaskControl+0x100>)
 8003456:	481f      	ldr	r0, [pc, #124]	; (80034d4 <vTaskControl+0x104>)
 8003458:	f7fe fa70 	bl	800193c <ENC_InitTimer>
	ENC_SetMillimeterPerTick(&CodeurGauche, 0.08200);
 800345c:	ed9f 0b10 	vldr	d0, [pc, #64]	; 80034a0 <vTaskControl+0xd0>
 8003460:	481c      	ldr	r0, [pc, #112]	; (80034d4 <vTaskControl+0x104>)
 8003462:	f7fe fa8f 	bl	8001984 <ENC_SetMillimeterPerTick>

	/* Initialisation Encodeur Droite -------------------*/
	ENC_InitTimer(&CodeurDroite, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8003466:	2304      	movs	r3, #4
 8003468:	2200      	movs	r2, #0
 800346a:	491b      	ldr	r1, [pc, #108]	; (80034d8 <vTaskControl+0x108>)
 800346c:	481b      	ldr	r0, [pc, #108]	; (80034dc <vTaskControl+0x10c>)
 800346e:	f7fe fa65 	bl	800193c <ENC_InitTimer>
	ENC_SetMillimeterPerTick(&CodeurDroite, 0.08125);
 8003472:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80034a8 <vTaskControl+0xd8>
 8003476:	4819      	ldr	r0, [pc, #100]	; (80034dc <vTaskControl+0x10c>)
 8003478:	f7fe fa84 	bl	8001984 <ENC_SetMillimeterPerTick>

	/* Initialisation Odometrie -------------------------*/
	ODO_Init();
 800347c:	f7fe fbc6 	bl	8001c0c <ODO_Init>

	//CTRL_Pos1_SetTargetX(100);
	//CTRL_Pos1_SetTargetY(100);

	while(1){
		xSemaphoreTake(semBinary_CMD,portMAX_DELAY);
 8003480:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <vTaskControl+0x110>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f04f 31ff 	mov.w	r1, #4294967295
 8003488:	4618      	mov	r0, r3
 800348a:	f00b fe53 	bl	800f134 <xQueueSemaphoreTake>

		// Calcul Direction à l'aide des fonctions de direction
		if(BTN){
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <vTaskControl+0x114>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f4      	beq.n	8003480 <vTaskControl+0xb0>
			CTRL_Pos1_PositionControl();
 8003496:	f7fd fe6f 	bl	8001178 <CTRL_Pos1_PositionControl>
		xSemaphoreTake(semBinary_CMD,portMAX_DELAY);
 800349a:	e7f1      	b.n	8003480 <vTaskControl+0xb0>
 800349c:	f3af 8000 	nop.w
 80034a0:	b645a1cb 	.word	0xb645a1cb
 80034a4:	3fb4fdf3 	.word	0x3fb4fdf3
 80034a8:	cccccccd 	.word	0xcccccccd
 80034ac:	3fb4cccc 	.word	0x3fb4cccc
 80034b0:	20004d74 	.word	0x20004d74
 80034b4:	20004530 	.word	0x20004530
 80034b8:	40020800 	.word	0x40020800
 80034bc:	3dcccccd 	.word	0x3dcccccd
 80034c0:	3f99999a 	.word	0x3f99999a
 80034c4:	00000000 	.word	0x00000000
 80034c8:	20004560 	.word	0x20004560
 80034cc:	40020400 	.word	0x40020400
 80034d0:	20004dbc 	.word	0x20004dbc
 80034d4:	200045a8 	.word	0x200045a8
 80034d8:	20004d2c 	.word	0x20004d2c
 80034dc:	20004590 	.word	0x20004590
 80034e0:	20004c78 	.word	0x20004c78
 80034e4:	200007cc 	.word	0x200007cc

080034e8 <vTaskToF>:
 * TOF_Sensor[0].rangeMillimeter
 * TOF_Sensor[1].rangeMillimeter
 * TOF_Sensor[2].rangeMillimeter
 */
void vTaskToF(void * p)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	uxHighWaterMark_TOF_1 = uxTaskGetStackHighWaterMark(NULL);
 80034f0:	2000      	movs	r0, #0
 80034f2:	f00c fded 	bl	80100d0 <uxTaskGetStackHighWaterMark>
 80034f6:	4603      	mov	r3, r0
 80034f8:	4a13      	ldr	r2, [pc, #76]	; (8003548 <vTaskToF+0x60>)
 80034fa:	6013      	str	r3, [r2, #0]

	for(int i=0; i<TOF_nbOfSensor; i++){
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	e010      	b.n	8003524 <vTaskToF+0x3c>
		HAL_NVIC_EnableIRQ(TOF_Sensor[i].EXTI_IRQn);
 8003502:	4a12      	ldr	r2, [pc, #72]	; (800354c <vTaskToF+0x64>)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800350a:	fb01 f303 	mul.w	r3, r1, r3
 800350e:	4413      	add	r3, r2
 8003510:	f503 73b9 	add.w	r3, r3, #370	; 0x172
 8003514:	f993 3000 	ldrsb.w	r3, [r3]
 8003518:	4618      	mov	r0, r3
 800351a:	f001 fdd9 	bl	80050d0 <HAL_NVIC_EnableIRQ>
	for(int i=0; i<TOF_nbOfSensor; i++){
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3301      	adds	r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b02      	cmp	r3, #2
 8003528:	ddeb      	ble.n	8003502 <vTaskToF+0x1a>
	}

	while(1){
		xSemaphoreTake(semBinary_TOF,portMAX_DELAY);
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <vTaskToF+0x68>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f04f 31ff 	mov.w	r1, #4294967295
 8003532:	4618      	mov	r0, r3
 8003534:	f00b fdfe 	bl	800f134 <xQueueSemaphoreTake>
		//			if(TOF_Sensor[i].it.flag){
		//				TOF_SetDistance_mm(&TOF_Sensor[i]);
		//				TOF_Sensor[i].it.flag = 0;
		//			}
		//		}
		uxHighWaterMark_TOF_2 = uxTaskGetStackHighWaterMark(NULL);
 8003538:	2000      	movs	r0, #0
 800353a:	f00c fdc9 	bl	80100d0 <uxTaskGetStackHighWaterMark>
 800353e:	4603      	mov	r3, r0
 8003540:	4a04      	ldr	r2, [pc, #16]	; (8003554 <vTaskToF+0x6c>)
 8003542:	6013      	str	r3, [r2, #0]
		xSemaphoreTake(semBinary_TOF,portMAX_DELAY);
 8003544:	e7f1      	b.n	800352a <vTaskToF+0x42>
 8003546:	bf00      	nop
 8003548:	20004c80 	.word	0x20004c80
 800354c:	200046c0 	.word	0x200046c0
 8003550:	20004c98 	.word	0x20004c98
 8003554:	20004c8c 	.word	0x20004c8c

08003558 <vTaskPhotodiodes>:
	}
}


void vTaskPhotodiodes(void * p)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
	// Orientation
	//vTaskDelay(5);
	//Ph_Init();

	while(1){
		xSemaphoreTake(semBinary_Ph,portMAX_DELAY);
 8003560:	4b08      	ldr	r3, [pc, #32]	; (8003584 <vTaskPhotodiodes+0x2c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f04f 31ff 	mov.w	r1, #4294967295
 8003568:	4618      	mov	r0, r3
 800356a:	f00b fde3 	bl	800f134 <xQueueSemaphoreTake>

		Ph_GetMeasure(Ph_Data);
 800356e:	4806      	ldr	r0, [pc, #24]	; (8003588 <vTaskPhotodiodes+0x30>)
 8003570:	f7fe fd54 	bl	800201c <Ph_GetMeasure>
		//printf("--PH_DataNoise : %04lu, %04lu, %04lu\r\n", Ph_Data[0], Ph_Data[1], Ph_Data[2]);
		Ph_GetBestAngle(Ph_Data);
 8003574:	4804      	ldr	r0, [pc, #16]	; (8003588 <vTaskPhotodiodes+0x30>)
 8003576:	f7fe fe3b 	bl	80021f0 <Ph_GetBestAngle>
		Ph_GetNorma(Ph_Data);
 800357a:	4803      	ldr	r0, [pc, #12]	; (8003588 <vTaskPhotodiodes+0x30>)
 800357c:	f7fe ff54 	bl	8002428 <Ph_GetNorma>
		xSemaphoreTake(semBinary_Ph,portMAX_DELAY);
 8003580:	e7ee      	b.n	8003560 <vTaskPhotodiodes+0x8>
 8003582:	bf00      	nop
 8003584:	20004c90 	.word	0x20004c90
 8003588:	200045c0 	.word	0x200045c0

0800358c <vTaskCouleur>:
 * Réalise les mesures de couleur
 * Indique si le sol est rouge avec la variable globale :
 * RGB_Sensor.isFloorRed
 */
void vTaskCouleur(void * p)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	uxHighWaterMark_RGB_1 = uxTaskGetStackHighWaterMark(NULL);
 8003594:	2000      	movs	r0, #0
 8003596:	f00c fd9b 	bl	80100d0 <uxTaskGetStackHighWaterMark>
 800359a:	4603      	mov	r3, r0
 800359c:	4a11      	ldr	r2, [pc, #68]	; (80035e4 <vTaskCouleur+0x58>)
 800359e:	6013      	str	r3, [r2, #0]
	HAL_TIM_IC_Start_IT(RGB_Sensor.Timer_Handle, RGB_Sensor.Timer_Channel);
 80035a0:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <vTaskCouleur+0x5c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a10      	ldr	r2, [pc, #64]	; (80035e8 <vTaskCouleur+0x5c>)
 80035a6:	6852      	ldr	r2, [r2, #4]
 80035a8:	4611      	mov	r1, r2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f004 fad8 	bl	8007b60 <HAL_TIM_IC_Start_IT>

	//HAL_GPIO_WritePin(RGB_Sensor.LED_GPIOx, RGB_Sensor.LED_GPIO_Pin, RESET);

	while(1){
		xSemaphoreTake(semBinary_RGB,portMAX_DELAY);
 80035b0:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <vTaskCouleur+0x60>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f04f 31ff 	mov.w	r1, #4294967295
 80035b8:	4618      	mov	r0, r3
 80035ba:	f00b fdbb 	bl	800f134 <xQueueSemaphoreTake>

		//printf("vTask_RGB \r\n");

		if(RGB_Sensor.it.flag){
 80035be:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <vTaskCouleur+0x5c>)
 80035c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d006      	beq.n	80035d6 <vTaskCouleur+0x4a>
			// Bloc traitement IT : 10.15 us
			RGB_IsTheFloorRed(&RGB_Sensor);
 80035c8:	4807      	ldr	r0, [pc, #28]	; (80035e8 <vTaskCouleur+0x5c>)
 80035ca:	f7ff f909 	bl	80027e0 <RGB_IsTheFloorRed>
			RGB_Sensor.it.flag = 0;
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <vTaskCouleur+0x5c>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			//
		}
		uxHighWaterMark_RGB_2 = uxTaskGetStackHighWaterMark(NULL);
 80035d6:	2000      	movs	r0, #0
 80035d8:	f00c fd7a 	bl	80100d0 <uxTaskGetStackHighWaterMark>
 80035dc:	4603      	mov	r3, r0
 80035de:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <vTaskCouleur+0x64>)
 80035e0:	6013      	str	r3, [r2, #0]
		xSemaphoreTake(semBinary_RGB,portMAX_DELAY);
 80035e2:	e7e5      	b.n	80035b0 <vTaskCouleur+0x24>
 80035e4:	20004c84 	.word	0x20004c84
 80035e8:	20004670 	.word	0x20004670
 80035ec:	20004c7c 	.word	0x20004c7c
 80035f0:	20004c94 	.word	0x20004c94

080035f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	TaskHandle_t xHandle = NULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035fe:	f000 ff8d 	bl	800451c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003602:	f000 f945 	bl	8003890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003606:	f7ff fd1d 	bl	8003044 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800360a:	f000 fee3 	bl	80043d4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800360e:	f000 fc11 	bl	8003e34 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003612:	f000 fcbb 	bl	8003f8c <MX_TIM2_Init>
  MX_DMA_Init();
 8003616:	f7ff fcb7 	bl	8002f88 <MX_DMA_Init>
  MX_ADC1_Init();
 800361a:	f7ff fba5 	bl	8002d68 <MX_ADC1_Init>
  MX_TIM3_Init();
 800361e:	f000 fd09 	bl	8004034 <MX_TIM3_Init>
  MX_I2C1_Init();
 8003622:	f7ff fddf 	bl	80031e4 <MX_I2C1_Init>
  MX_TIM8_Init();
 8003626:	f000 fd59 	bl	80040dc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

	printf("\r\n --------------- BOTterfly --------------- \r\n");
 800362a:	4878      	ldr	r0, [pc, #480]	; (800380c <main+0x218>)
 800362c:	f00e fa62 	bl	8011af4 <puts>

	// INITIALISATION DES CAPTEURS ET DU MOTEUR :
	printf("Initialization \r\n");
 8003630:	4877      	ldr	r0, [pc, #476]	; (8003810 <main+0x21c>)
 8003632:	f00e fa5f 	bl	8011af4 <puts>

	// Bloc TOF_Init : 1735.410150 ms
	TOF_Init_SetI2C(&TOF_Sensor[0], &hi2c1, 0x55);
 8003636:	2255      	movs	r2, #85	; 0x55
 8003638:	4976      	ldr	r1, [pc, #472]	; (8003814 <main+0x220>)
 800363a:	4877      	ldr	r0, [pc, #476]	; (8003818 <main+0x224>)
 800363c:	f7ff f99c 	bl	8002978 <TOF_Init_SetI2C>
	TOF_Init_SetGPIOs(&TOF_Sensor[0], TOF_XSHUT0_GPIO_Port, TOF_XSHUT0_Pin, TOF_GPIOI0_GPIO_Port, TOF_GPIOI0_Pin);
 8003640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	4b75      	ldr	r3, [pc, #468]	; (800381c <main+0x228>)
 8003648:	f44f 7280 	mov.w	r2, #256	; 0x100
 800364c:	4974      	ldr	r1, [pc, #464]	; (8003820 <main+0x22c>)
 800364e:	4872      	ldr	r0, [pc, #456]	; (8003818 <main+0x224>)
 8003650:	f7ff f9a8 	bl	80029a4 <TOF_Init_SetGPIOs>
	TOF_Init_SetEXTI(&TOF_Sensor[0], TOF_GPIOI0_EXTI_IRQn);
 8003654:	2128      	movs	r1, #40	; 0x28
 8003656:	4870      	ldr	r0, [pc, #448]	; (8003818 <main+0x224>)
 8003658:	f7ff f9c3 	bl	80029e2 <TOF_Init_SetEXTI>

	TOF_Init_SetI2C(&TOF_Sensor[1], &hi2c1, 0x58);
 800365c:	2258      	movs	r2, #88	; 0x58
 800365e:	496d      	ldr	r1, [pc, #436]	; (8003814 <main+0x220>)
 8003660:	4870      	ldr	r0, [pc, #448]	; (8003824 <main+0x230>)
 8003662:	f7ff f989 	bl	8002978 <TOF_Init_SetI2C>
	TOF_Init_SetGPIOs(&TOF_Sensor[1], TOF_XSHUT1_GPIO_Port, TOF_XSHUT1_Pin, TOF_GPIOI1_GPIO_Port, TOF_GPIOI1_Pin);
 8003666:	2301      	movs	r3, #1
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	4b6f      	ldr	r3, [pc, #444]	; (8003828 <main+0x234>)
 800366c:	2280      	movs	r2, #128	; 0x80
 800366e:	496c      	ldr	r1, [pc, #432]	; (8003820 <main+0x22c>)
 8003670:	486c      	ldr	r0, [pc, #432]	; (8003824 <main+0x230>)
 8003672:	f7ff f997 	bl	80029a4 <TOF_Init_SetGPIOs>
	TOF_Init_SetEXTI(&TOF_Sensor[1], TOF_GPIOI1_EXTI_IRQn);
 8003676:	2106      	movs	r1, #6
 8003678:	486a      	ldr	r0, [pc, #424]	; (8003824 <main+0x230>)
 800367a:	f7ff f9b2 	bl	80029e2 <TOF_Init_SetEXTI>

	TOF_Init_SetI2C(&TOF_Sensor[2], &hi2c1, 0x5b);
 800367e:	225b      	movs	r2, #91	; 0x5b
 8003680:	4964      	ldr	r1, [pc, #400]	; (8003814 <main+0x220>)
 8003682:	486a      	ldr	r0, [pc, #424]	; (800382c <main+0x238>)
 8003684:	f7ff f978 	bl	8002978 <TOF_Init_SetI2C>
	TOF_Init_SetGPIOs(&TOF_Sensor[2], TOF_XSHUT2_GPIO_Port, TOF_XSHUT2_Pin, TOF_GPIOI2_GPIO_Port, TOF_GPIOI2_Pin);
 8003688:	2302      	movs	r3, #2
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	4b66      	ldr	r3, [pc, #408]	; (8003828 <main+0x234>)
 800368e:	2240      	movs	r2, #64	; 0x40
 8003690:	4963      	ldr	r1, [pc, #396]	; (8003820 <main+0x22c>)
 8003692:	4866      	ldr	r0, [pc, #408]	; (800382c <main+0x238>)
 8003694:	f7ff f986 	bl	80029a4 <TOF_Init_SetGPIOs>
	TOF_Init_SetEXTI(&TOF_Sensor[2], TOF_GPIOI2_EXTI_IRQn);
 8003698:	2107      	movs	r1, #7
 800369a:	4864      	ldr	r0, [pc, #400]	; (800382c <main+0x238>)
 800369c:	f7ff f9a1 	bl	80029e2 <TOF_Init_SetEXTI>

	TOF_Init(TOF_Sensor);
 80036a0:	485d      	ldr	r0, [pc, #372]	; (8003818 <main+0x224>)
 80036a2:	f7ff f9af 	bl	8002a04 <TOF_Init>
	//

	// Bloc RGB_Init : 401.954350 ms
	RGB_Init_SetTimer(&RGB_Sensor, &htim3, TIM_CHANNEL_1);
 80036a6:	2200      	movs	r2, #0
 80036a8:	4961      	ldr	r1, [pc, #388]	; (8003830 <main+0x23c>)
 80036aa:	4862      	ldr	r0, [pc, #392]	; (8003834 <main+0x240>)
 80036ac:	f7fe ff18 	bl	80024e0 <RGB_Init_SetTimer>

	RGB_Init_SetParamGPIOs(&RGB_Sensor, RGB_OE_GPIO_Port, RGB_OE_Pin, RGB_LED_GPIO_Port, RGB_LED_Pin);
 80036b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	4b59      	ldr	r3, [pc, #356]	; (800381c <main+0x228>)
 80036b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036bc:	4957      	ldr	r1, [pc, #348]	; (800381c <main+0x228>)
 80036be:	485d      	ldr	r0, [pc, #372]	; (8003834 <main+0x240>)
 80036c0:	f7fe ff21 	bl	8002506 <RGB_Init_SetParamGPIOs>
	RGB_Init_SetOutFreqGPIOs(&RGB_Sensor, RGB_S0_GPIO_Port, RGB_S0_Pin, RGB_S1_GPIO_Port, RGB_S1_Pin);
 80036c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	4b57      	ldr	r3, [pc, #348]	; (8003828 <main+0x234>)
 80036cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036d0:	4955      	ldr	r1, [pc, #340]	; (8003828 <main+0x234>)
 80036d2:	4858      	ldr	r0, [pc, #352]	; (8003834 <main+0x240>)
 80036d4:	f7fe ff32 	bl	800253c <RGB_Init_SetOutFreqGPIOs>
	RGB_Init_SetColorFilterGPIOs(&RGB_Sensor, RGB_S2_GPIO_Port, RGB_S2_Pin, RGB_S3_GPIO_Port, RGB_S3_Pin);
 80036d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	4b52      	ldr	r3, [pc, #328]	; (8003828 <main+0x234>)
 80036e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036e4:	4950      	ldr	r1, [pc, #320]	; (8003828 <main+0x234>)
 80036e6:	4853      	ldr	r0, [pc, #332]	; (8003834 <main+0x240>)
 80036e8:	f7fe ff43 	bl	8002572 <RGB_Init_SetColorFilterGPIOs>

	RGB_Init(&RGB_Sensor);
 80036ec:	4851      	ldr	r0, [pc, #324]	; (8003834 <main+0x240>)
 80036ee:	f7fe ff5b 	bl	80025a8 <RGB_Init>

	Ph_Init();
 80036f2:	f7fe fc57 	bl	8001fa4 <Ph_Init>

	Dir_Init();
 80036f6:	f7fe fc1b 	bl	8001f30 <Dir_Init>

	// Init Motor

	// CRÉATION DES SÉMAPHORES :
	printf("Creation Semaphore \r\n");
 80036fa:	484f      	ldr	r0, [pc, #316]	; (8003838 <main+0x244>)
 80036fc:	f00e f9fa 	bl	8011af4 <puts>

	semBinary_CMD = xSemaphoreCreateBinary();
 8003700:	2203      	movs	r2, #3
 8003702:	2100      	movs	r1, #0
 8003704:	2001      	movs	r0, #1
 8003706:	f00b fb8b 	bl	800ee20 <xQueueGenericCreate>
 800370a:	4603      	mov	r3, r0
 800370c:	4a4b      	ldr	r2, [pc, #300]	; (800383c <main+0x248>)
 800370e:	6013      	str	r3, [r2, #0]
	semBinary_TOF = xSemaphoreCreateBinary();
 8003710:	2203      	movs	r2, #3
 8003712:	2100      	movs	r1, #0
 8003714:	2001      	movs	r0, #1
 8003716:	f00b fb83 	bl	800ee20 <xQueueGenericCreate>
 800371a:	4603      	mov	r3, r0
 800371c:	4a48      	ldr	r2, [pc, #288]	; (8003840 <main+0x24c>)
 800371e:	6013      	str	r3, [r2, #0]
	semBinary_Ph = xSemaphoreCreateBinary();
 8003720:	2203      	movs	r2, #3
 8003722:	2100      	movs	r1, #0
 8003724:	2001      	movs	r0, #1
 8003726:	f00b fb7b 	bl	800ee20 <xQueueGenericCreate>
 800372a:	4603      	mov	r3, r0
 800372c:	4a45      	ldr	r2, [pc, #276]	; (8003844 <main+0x250>)
 800372e:	6013      	str	r3, [r2, #0]
	semBinary_RGB = xSemaphoreCreateBinary();
 8003730:	2203      	movs	r2, #3
 8003732:	2100      	movs	r1, #0
 8003734:	2001      	movs	r0, #1
 8003736:	f00b fb73 	bl	800ee20 <xQueueGenericCreate>
 800373a:	4603      	mov	r3, r0
 800373c:	4a42      	ldr	r2, [pc, #264]	; (8003848 <main+0x254>)
 800373e:	6013      	str	r3, [r2, #0]

	semMutex = xSemaphoreCreateMutex();
 8003740:	2001      	movs	r0, #1
 8003742:	f00b fbe0 	bl	800ef06 <xQueueCreateMutex>
 8003746:	4603      	mov	r3, r0
 8003748:	4a40      	ldr	r2, [pc, #256]	; (800384c <main+0x258>)
 800374a:	6013      	str	r3, [r2, #0]

	// CRÉATION DES BOÎTES AUX LETTRES :


	// CRÉATION DES TÂCHES :
	printf("Creation Task \r\n");
 800374c:	4840      	ldr	r0, [pc, #256]	; (8003850 <main+0x25c>)
 800374e:	f00e f9d1 	bl	8011af4 <puts>

	if (xTaskCreate(vTaskSync, "Sync", SYNC_STACK_SIZE, (void *)NULL, 100, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 8003752:	1d3b      	adds	r3, r7, #4
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	2364      	movs	r3, #100	; 0x64
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	2300      	movs	r3, #0
 800375c:	22fa      	movs	r2, #250	; 0xfa
 800375e:	493d      	ldr	r1, [pc, #244]	; (8003854 <main+0x260>)
 8003760:	483d      	ldr	r0, [pc, #244]	; (8003858 <main+0x264>)
 8003762:	f00b ff52 	bl	800f60a <xTaskCreate>
 8003766:	4603      	mov	r3, r0
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d102      	bne.n	8003774 <main+0x180>
	{
		printf("Task Sync Creation error : Could not allocate required memory\r\n");
 800376e:	483b      	ldr	r0, [pc, #236]	; (800385c <main+0x268>)
 8003770:	f00e f9c0 	bl	8011af4 <puts>
	}
	if (xTaskCreate(vTaskControl, "Control", CMD_STACK_SIZE, (void *)NULL, 80, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 8003774:	1d3b      	adds	r3, r7, #4
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	2350      	movs	r3, #80	; 0x50
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2300      	movs	r3, #0
 800377e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003782:	4937      	ldr	r1, [pc, #220]	; (8003860 <main+0x26c>)
 8003784:	4837      	ldr	r0, [pc, #220]	; (8003864 <main+0x270>)
 8003786:	f00b ff40 	bl	800f60a <xTaskCreate>
 800378a:	4603      	mov	r3, r0
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d102      	bne.n	8003798 <main+0x1a4>
	{
		printf("Task Control Creation error : Could not allocate required memory\r\n");
 8003792:	4835      	ldr	r0, [pc, #212]	; (8003868 <main+0x274>)
 8003794:	f00e f9ae 	bl	8011af4 <puts>
	}
	if (xTaskCreate(vTaskToF, "ToF", TOF_STACK_SIZE, (void *)NULL, 60, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 8003798:	1d3b      	adds	r3, r7, #4
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	233c      	movs	r3, #60	; 0x3c
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	2300      	movs	r3, #0
 80037a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037a6:	4931      	ldr	r1, [pc, #196]	; (800386c <main+0x278>)
 80037a8:	4831      	ldr	r0, [pc, #196]	; (8003870 <main+0x27c>)
 80037aa:	f00b ff2e 	bl	800f60a <xTaskCreate>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d102      	bne.n	80037bc <main+0x1c8>
	{
		printf("Task ToF Creation error : Could not allocate required memory\r\n");
 80037b6:	482f      	ldr	r0, [pc, #188]	; (8003874 <main+0x280>)
 80037b8:	f00e f99c 	bl	8011af4 <puts>
	}
	if (xTaskCreate(vTaskPhotodiodes, "Photodiodes", Ph_STACK_SIZE, (void *)NULL, 40, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 80037bc:	1d3b      	adds	r3, r7, #4
 80037be:	9301      	str	r3, [sp, #4]
 80037c0:	2328      	movs	r3, #40	; 0x28
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	2300      	movs	r3, #0
 80037c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037ca:	492b      	ldr	r1, [pc, #172]	; (8003878 <main+0x284>)
 80037cc:	482b      	ldr	r0, [pc, #172]	; (800387c <main+0x288>)
 80037ce:	f00b ff1c 	bl	800f60a <xTaskCreate>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d8:	d102      	bne.n	80037e0 <main+0x1ec>
	{
		printf("Task Photodiode Creation error : Could not allocate required memory\r\n");
 80037da:	4829      	ldr	r0, [pc, #164]	; (8003880 <main+0x28c>)
 80037dc:	f00e f98a 	bl	8011af4 <puts>
	}
	if (xTaskCreate(vTaskCouleur, "Couleur", RGB_STACK_SIZE, (void *)NULL, 20, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 80037e0:	1d3b      	adds	r3, r7, #4
 80037e2:	9301      	str	r3, [sp, #4]
 80037e4:	2314      	movs	r3, #20
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	2300      	movs	r3, #0
 80037ea:	2250      	movs	r2, #80	; 0x50
 80037ec:	4925      	ldr	r1, [pc, #148]	; (8003884 <main+0x290>)
 80037ee:	4826      	ldr	r0, [pc, #152]	; (8003888 <main+0x294>)
 80037f0:	f00b ff0b 	bl	800f60a <xTaskCreate>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fa:	d102      	bne.n	8003802 <main+0x20e>
	{
		printf("Task Couleur Creation error : Could not allocate required memory\r\n");
 80037fc:	4823      	ldr	r0, [pc, #140]	; (800388c <main+0x298>)
 80037fe:	f00e f979 	bl	8011af4 <puts>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003802:	f7ff fbfb 	bl	8002ffc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003806:	f00b f988 	bl	800eb1a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800380a:	e7fe      	b.n	800380a <main+0x216>
 800380c:	08016c60 	.word	0x08016c60
 8003810:	08016c90 	.word	0x08016c90
 8003814:	20004c24 	.word	0x20004c24
 8003818:	200046c0 	.word	0x200046c0
 800381c:	40020000 	.word	0x40020000
 8003820:	40020800 	.word	0x40020800
 8003824:	2000483c 	.word	0x2000483c
 8003828:	40020400 	.word	0x40020400
 800382c:	200049b8 	.word	0x200049b8
 8003830:	20004d2c 	.word	0x20004d2c
 8003834:	20004670 	.word	0x20004670
 8003838:	08016ca4 	.word	0x08016ca4
 800383c:	20004c78 	.word	0x20004c78
 8003840:	20004c98 	.word	0x20004c98
 8003844:	20004c90 	.word	0x20004c90
 8003848:	20004c7c 	.word	0x20004c7c
 800384c:	20004c88 	.word	0x20004c88
 8003850:	08016cbc 	.word	0x08016cbc
 8003854:	08016ccc 	.word	0x08016ccc
 8003858:	080032d1 	.word	0x080032d1
 800385c:	08016cd4 	.word	0x08016cd4
 8003860:	08016d14 	.word	0x08016d14
 8003864:	080033d1 	.word	0x080033d1
 8003868:	08016d1c 	.word	0x08016d1c
 800386c:	08016d60 	.word	0x08016d60
 8003870:	080034e9 	.word	0x080034e9
 8003874:	08016d64 	.word	0x08016d64
 8003878:	08016da4 	.word	0x08016da4
 800387c:	08003559 	.word	0x08003559
 8003880:	08016db0 	.word	0x08016db0
 8003884:	08016df8 	.word	0x08016df8
 8003888:	0800358d 	.word	0x0800358d
 800388c:	08016e00 	.word	0x08016e00

08003890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b094      	sub	sp, #80	; 0x50
 8003894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003896:	f107 031c 	add.w	r3, r7, #28
 800389a:	2234      	movs	r2, #52	; 0x34
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f00d fbd5 	bl	801104e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038a4:	f107 0308 	add.w	r3, r7, #8
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	60da      	str	r2, [r3, #12]
 80038b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038b4:	2300      	movs	r3, #0
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	4b29      	ldr	r3, [pc, #164]	; (8003960 <SystemClock_Config+0xd0>)
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	4a28      	ldr	r2, [pc, #160]	; (8003960 <SystemClock_Config+0xd0>)
 80038be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c2:	6413      	str	r3, [r2, #64]	; 0x40
 80038c4:	4b26      	ldr	r3, [pc, #152]	; (8003960 <SystemClock_Config+0xd0>)
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038cc:	607b      	str	r3, [r7, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80038d0:	2300      	movs	r3, #0
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	4b23      	ldr	r3, [pc, #140]	; (8003964 <SystemClock_Config+0xd4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80038dc:	4a21      	ldr	r2, [pc, #132]	; (8003964 <SystemClock_Config+0xd4>)
 80038de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	4b1f      	ldr	r3, [pc, #124]	; (8003964 <SystemClock_Config+0xd4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038f0:	2302      	movs	r3, #2
 80038f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038f4:	2301      	movs	r3, #1
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038f8:	2310      	movs	r3, #16
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038fc:	2302      	movs	r3, #2
 80038fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003900:	2300      	movs	r3, #0
 8003902:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003904:	2308      	movs	r3, #8
 8003906:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003908:	2350      	movs	r3, #80	; 0x50
 800390a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800390c:	2302      	movs	r3, #2
 800390e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003910:	2302      	movs	r3, #2
 8003912:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003914:	2302      	movs	r3, #2
 8003916:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003918:	f107 031c 	add.w	r3, r7, #28
 800391c:	4618      	mov	r0, r3
 800391e:	f003 fc4f 	bl	80071c0 <HAL_RCC_OscConfig>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003928:	f000 f8c8 	bl	8003abc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800392c:	230f      	movs	r3, #15
 800392e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003930:	2302      	movs	r3, #2
 8003932:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003934:	2300      	movs	r3, #0
 8003936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800393c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003942:	f107 0308 	add.w	r3, r7, #8
 8003946:	2102      	movs	r1, #2
 8003948:	4618      	mov	r0, r3
 800394a:	f003 f93b 	bl	8006bc4 <HAL_RCC_ClockConfig>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003954:	f000 f8b2 	bl	8003abc <Error_Handler>
  }
}
 8003958:	bf00      	nop
 800395a:	3750      	adds	r7, #80	; 0x50
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	40007000 	.word	0x40007000

08003968 <HAL_TIM_IC_CaptureCallback>:

uint8_t countTime = 0;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	// Durée de l'IT : 1.550000us ou 1.325000us
	if(htim->Instance == RGB_Sensor.Timer_Handle->Instance)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d12f      	bne.n	80039de <HAL_TIM_IC_CaptureCallback+0x76>
	{
		if(RGB_Sensor.it.isFirstCaptured == 0){
 800397e:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8003980:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10e      	bne.n	80039a6 <HAL_TIM_IC_CaptureCallback+0x3e>
			icVal01 = HAL_TIM_ReadCapturedValue(htim, RGB_Sensor.Timer_Channel);
 8003988:	4b17      	ldr	r3, [pc, #92]	; (80039e8 <HAL_TIM_IC_CaptureCallback+0x80>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	4619      	mov	r1, r3
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f004 fe70 	bl	8008674 <HAL_TIM_ReadCapturedValue>
 8003994:	4603      	mov	r3, r0
 8003996:	b29a      	uxth	r2, r3
 8003998:	4b14      	ldr	r3, [pc, #80]	; (80039ec <HAL_TIM_IC_CaptureCallback+0x84>)
 800399a:	801a      	strh	r2, [r3, #0]
			RGB_Sensor.it.isFirstCaptured = 1;
 800399c:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <HAL_TIM_IC_CaptureCallback+0x80>)
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			__HAL_TIM_SET_COUNTER(htim, 0);

			RGB_Sensor.it.flag = 1;
		}
	}
}
 80039a4:	e01b      	b.n	80039de <HAL_TIM_IC_CaptureCallback+0x76>
			RGB_Sensor.it.icVal1 = icVal01;
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <HAL_TIM_IC_CaptureCallback+0x84>)
 80039a8:	881a      	ldrh	r2, [r3, #0]
 80039aa:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <HAL_TIM_IC_CaptureCallback+0x80>)
 80039ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			RGB_Sensor.it.icVal2 = HAL_TIM_ReadCapturedValue(htim, RGB_Sensor.Timer_Channel);
 80039b0:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <HAL_TIM_IC_CaptureCallback+0x80>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4619      	mov	r1, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f004 fe5c 	bl	8008674 <HAL_TIM_ReadCapturedValue>
 80039bc:	4603      	mov	r3, r0
 80039be:	b29a      	uxth	r2, r3
 80039c0:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <HAL_TIM_IC_CaptureCallback+0x80>)
 80039c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			RGB_Sensor.it.isFirstCaptured = 0;
 80039c6:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <HAL_TIM_IC_CaptureCallback+0x80>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			__HAL_TIM_SET_COUNTER(htim, 0);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2200      	movs	r2, #0
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24
			RGB_Sensor.it.flag = 1;
 80039d6:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <HAL_TIM_IC_CaptureCallback+0x80>)
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20004670 	.word	0x20004670
 80039ec:	200007ce 	.word	0x200007ce

080039f0 <HAL_GPIO_EXTI_Callback>:


// VL53L0X_RangingMeasurementData_t VL53L0X_RangingMeasurementData;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	80fb      	strh	r3, [r7, #6]
	// Durée de l'IT : 0.500000us
	if(GPIO_Pin == TOF_Sensor[0].EXTI_GPIO_Pin){
 80039fa:	4b1a      	ldr	r3, [pc, #104]	; (8003a64 <HAL_GPIO_EXTI_Callback+0x74>)
 80039fc:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8003a00:	88fa      	ldrh	r2, [r7, #6]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d107      	bne.n	8003a16 <HAL_GPIO_EXTI_Callback+0x26>
		// IT toutes les 33ms
		TOF_Sensor[0].it.flag = 1;
 8003a06:	4b17      	ldr	r3, [pc, #92]	; (8003a64 <HAL_GPIO_EXTI_Callback+0x74>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
		TOF_SetDistance_mm(&TOF_Sensor[0]);
 8003a0e:	4815      	ldr	r0, [pc, #84]	; (8003a64 <HAL_GPIO_EXTI_Callback+0x74>)
 8003a10:	f7ff f992 	bl	8002d38 <TOF_SetDistance_mm>
	}

	else if(GPIO_Pin == BTN_Pin){
		BTN = 1;
	}
}
 8003a14:	e022      	b.n	8003a5c <HAL_GPIO_EXTI_Callback+0x6c>
	else if(GPIO_Pin == TOF_Sensor[1].EXTI_GPIO_Pin){
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <HAL_GPIO_EXTI_Callback+0x74>)
 8003a18:	f8b3 32ec 	ldrh.w	r3, [r3, #748]	; 0x2ec
 8003a1c:	88fa      	ldrh	r2, [r7, #6]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d107      	bne.n	8003a32 <HAL_GPIO_EXTI_Callback+0x42>
		TOF_Sensor[1].it.flag = 1;
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <HAL_GPIO_EXTI_Callback+0x74>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
		TOF_SetDistance_mm(&TOF_Sensor[1]);
 8003a2a:	480f      	ldr	r0, [pc, #60]	; (8003a68 <HAL_GPIO_EXTI_Callback+0x78>)
 8003a2c:	f7ff f984 	bl	8002d38 <TOF_SetDistance_mm>
}
 8003a30:	e014      	b.n	8003a5c <HAL_GPIO_EXTI_Callback+0x6c>
	else if(GPIO_Pin == TOF_Sensor[2].EXTI_GPIO_Pin){
 8003a32:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <HAL_GPIO_EXTI_Callback+0x74>)
 8003a34:	f8b3 3468 	ldrh.w	r3, [r3, #1128]	; 0x468
 8003a38:	88fa      	ldrh	r2, [r7, #6]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d107      	bne.n	8003a4e <HAL_GPIO_EXTI_Callback+0x5e>
		TOF_Sensor[2].it.flag = 1;
 8003a3e:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_GPIO_EXTI_Callback+0x74>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
		TOF_SetDistance_mm(&TOF_Sensor[2]);
 8003a46:	4809      	ldr	r0, [pc, #36]	; (8003a6c <HAL_GPIO_EXTI_Callback+0x7c>)
 8003a48:	f7ff f976 	bl	8002d38 <TOF_SetDistance_mm>
}
 8003a4c:	e006      	b.n	8003a5c <HAL_GPIO_EXTI_Callback+0x6c>
	else if(GPIO_Pin == BTN_Pin){
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a54:	d102      	bne.n	8003a5c <HAL_GPIO_EXTI_Callback+0x6c>
		BTN = 1;
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_GPIO_EXTI_Callback+0x80>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	701a      	strb	r2, [r3, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	200046c0 	.word	0x200046c0
 8003a68:	2000483c 	.word	0x2000483c
 8003a6c:	200049b8 	.word	0x200049b8
 8003a70:	200007cc 	.word	0x200007cc

08003a74 <__io_putchar>:


int __io_putchar(int ch)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003a7c:	1d39      	adds	r1, r7, #4
 8003a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a82:	2201      	movs	r2, #1
 8003a84:	4803      	ldr	r0, [pc, #12]	; (8003a94 <__io_putchar+0x20>)
 8003a86:	f005 fbc0 	bl	800920a <HAL_UART_Transmit>
	return ch;
 8003a8a:	687b      	ldr	r3, [r7, #4]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	20004e04 	.word	0x20004e04

08003a98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d101      	bne.n	8003aae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003aaa:	f000 fd59 	bl	8004560 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40001000 	.word	0x40001000

08003abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ac0:	b672      	cpsid	i
}
 8003ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003ac4:	e7fe      	b.n	8003ac4 <Error_Handler+0x8>
	...

08003ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	607b      	str	r3, [r7, #4]
 8003ad2:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <HAL_MspInit+0x54>)
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad6:	4a11      	ldr	r2, [pc, #68]	; (8003b1c <HAL_MspInit+0x54>)
 8003ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003adc:	6453      	str	r3, [r2, #68]	; 0x44
 8003ade:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <HAL_MspInit+0x54>)
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	603b      	str	r3, [r7, #0]
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <HAL_MspInit+0x54>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <HAL_MspInit+0x54>)
 8003af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af8:	6413      	str	r3, [r2, #64]	; 0x40
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <HAL_MspInit+0x54>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b06:	2200      	movs	r2, #0
 8003b08:	210f      	movs	r1, #15
 8003b0a:	f06f 0001 	mvn.w	r0, #1
 8003b0e:	f001 fac3 	bl	8005098 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40023800 	.word	0x40023800

08003b20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08c      	sub	sp, #48	; 0x30
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003b30:	2200      	movs	r2, #0
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	2036      	movs	r0, #54	; 0x36
 8003b36:	f001 faaf 	bl	8005098 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b3a:	2036      	movs	r0, #54	; 0x36
 8003b3c:	f001 fac8 	bl	80050d0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	4b1f      	ldr	r3, [pc, #124]	; (8003bc4 <HAL_InitTick+0xa4>)
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	4a1e      	ldr	r2, [pc, #120]	; (8003bc4 <HAL_InitTick+0xa4>)
 8003b4a:	f043 0310 	orr.w	r3, r3, #16
 8003b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b50:	4b1c      	ldr	r3, [pc, #112]	; (8003bc4 <HAL_InitTick+0xa4>)
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b5c:	f107 0210 	add.w	r2, r7, #16
 8003b60:	f107 0314 	add.w	r3, r7, #20
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f003 f946 	bl	8006df8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003b6c:	f003 f91c 	bl	8006da8 <HAL_RCC_GetPCLK1Freq>
 8003b70:	4603      	mov	r3, r0
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b78:	4a13      	ldr	r2, [pc, #76]	; (8003bc8 <HAL_InitTick+0xa8>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	0c9b      	lsrs	r3, r3, #18
 8003b80:	3b01      	subs	r3, #1
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003b84:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <HAL_InitTick+0xac>)
 8003b86:	4a12      	ldr	r2, [pc, #72]	; (8003bd0 <HAL_InitTick+0xb0>)
 8003b88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <HAL_InitTick+0xac>)
 8003b8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b90:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b92:	4a0e      	ldr	r2, [pc, #56]	; (8003bcc <HAL_InitTick+0xac>)
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <HAL_InitTick+0xac>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_InitTick+0xac>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003ba4:	4809      	ldr	r0, [pc, #36]	; (8003bcc <HAL_InitTick+0xac>)
 8003ba6:	f003 fda9 	bl	80076fc <HAL_TIM_Base_Init>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d104      	bne.n	8003bba <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003bb0:	4806      	ldr	r0, [pc, #24]	; (8003bcc <HAL_InitTick+0xac>)
 8003bb2:	f003 fdf3 	bl	800779c <HAL_TIM_Base_Start_IT>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	e000      	b.n	8003bbc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3730      	adds	r7, #48	; 0x30
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	431bde83 	.word	0x431bde83
 8003bcc:	20004c9c 	.word	0x20004c9c
 8003bd0:	40001000 	.word	0x40001000

08003bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bd8:	e7fe      	b.n	8003bd8 <NMI_Handler+0x4>

08003bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bde:	e7fe      	b.n	8003bde <HardFault_Handler+0x4>

08003be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003be4:	e7fe      	b.n	8003be4 <MemManage_Handler+0x4>

08003be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003be6:	b480      	push	{r7}
 8003be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bea:	e7fe      	b.n	8003bea <BusFault_Handler+0x4>

08003bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bf0:	e7fe      	b.n	8003bf0 <UsageFault_Handler+0x4>

08003bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bf6:	bf00      	nop
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003c04:	2001      	movs	r0, #1
 8003c06:	f002 f82f 	bl	8005c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003c0a:	bf00      	nop
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003c12:	2002      	movs	r0, #2
 8003c14:	f002 f828 	bl	8005c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003c18:	bf00      	nop
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c20:	4802      	ldr	r0, [pc, #8]	; (8003c2c <USART2_IRQHandler+0x10>)
 8003c22:	f005 fb85 	bl	8009330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20004e04 	.word	0x20004e04

08003c30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003c34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003c38:	f002 f816 	bl	8005c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003c3c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003c40:	f002 f812 	bl	8005c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c44:	bf00      	nop
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003c4c:	4802      	ldr	r0, [pc, #8]	; (8003c58 <TIM8_CC_IRQHandler+0x10>)
 8003c4e:	f004 f9e3 	bl	8008018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20004ce4 	.word	0x20004ce4

08003c5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c60:	4802      	ldr	r0, [pc, #8]	; (8003c6c <TIM6_DAC_IRQHandler+0x10>)
 8003c62:	f004 f9d9 	bl	8008018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20004c9c 	.word	0x20004c9c

08003c70 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c74:	4802      	ldr	r0, [pc, #8]	; (8003c80 <DMA2_Stream0_IRQHandler+0x10>)
 8003c76:	f001 fbdf 	bl	8005438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20004bc0 	.word	0x20004bc0

08003c84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
	return 1;
 8003c88:	2301      	movs	r3, #1
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <_kill>:

int _kill(int pid, int sig)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c9e:	f00d f8a5 	bl	8010dec <__errno>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2216      	movs	r2, #22
 8003ca6:	601a      	str	r2, [r3, #0]
	return -1;
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <_exit>:

void _exit (int status)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ffe7 	bl	8003c94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003cc6:	e7fe      	b.n	8003cc6 <_exit+0x12>

08003cc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	e00a      	b.n	8003cf0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003cda:	f3af 8000 	nop.w
 8003cde:	4601      	mov	r1, r0
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	60ba      	str	r2, [r7, #8]
 8003ce6:	b2ca      	uxtb	r2, r1
 8003ce8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	3301      	adds	r3, #1
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	dbf0      	blt.n	8003cda <_read+0x12>
	}

return len;
 8003cf8:	687b      	ldr	r3, [r7, #4]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b086      	sub	sp, #24
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	e009      	b.n	8003d28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	60ba      	str	r2, [r7, #8]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fea9 	bl	8003a74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	3301      	adds	r3, #1
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	dbf1      	blt.n	8003d14 <_write+0x12>
	}
	return len;
 8003d30:	687b      	ldr	r3, [r7, #4]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <_close>:

int _close(int file)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
	return -1;
 8003d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d62:	605a      	str	r2, [r3, #4]
	return 0;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <_isatty>:

int _isatty(int file)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
	return 1;
 8003d7a:	2301      	movs	r3, #1
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
	return 0;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dac:	4a14      	ldr	r2, [pc, #80]	; (8003e00 <_sbrk+0x5c>)
 8003dae:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <_sbrk+0x60>)
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003db8:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <_sbrk+0x64>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d102      	bne.n	8003dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dc0:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <_sbrk+0x64>)
 8003dc2:	4a12      	ldr	r2, [pc, #72]	; (8003e0c <_sbrk+0x68>)
 8003dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dc6:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <_sbrk+0x64>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4413      	add	r3, r2
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d207      	bcs.n	8003de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dd4:	f00d f80a 	bl	8010dec <__errno>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	220c      	movs	r2, #12
 8003ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dde:	f04f 33ff 	mov.w	r3, #4294967295
 8003de2:	e009      	b.n	8003df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003de4:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <_sbrk+0x64>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dea:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <_sbrk+0x64>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4413      	add	r3, r2
 8003df2:	4a05      	ldr	r2, [pc, #20]	; (8003e08 <_sbrk+0x64>)
 8003df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003df6:	68fb      	ldr	r3, [r7, #12]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20020000 	.word	0x20020000
 8003e04:	00000400 	.word	0x00000400
 8003e08:	200007d0 	.word	0x200007d0
 8003e0c:	20004ea0 	.word	0x20004ea0

08003e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e14:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <SystemInit+0x20>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1a:	4a05      	ldr	r2, [pc, #20]	; (8003e30 <SystemInit+0x20>)
 8003e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	e000ed00 	.word	0xe000ed00

08003e34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b096      	sub	sp, #88	; 0x58
 8003e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	605a      	str	r2, [r3, #4]
 8003e44:	609a      	str	r2, [r3, #8]
 8003e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	605a      	str	r2, [r3, #4]
 8003e5c:	609a      	str	r2, [r3, #8]
 8003e5e:	60da      	str	r2, [r3, #12]
 8003e60:	611a      	str	r2, [r3, #16]
 8003e62:	615a      	str	r2, [r3, #20]
 8003e64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e66:	1d3b      	adds	r3, r7, #4
 8003e68:	2220      	movs	r2, #32
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f00d f8ee 	bl	801104e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e72:	4b44      	ldr	r3, [pc, #272]	; (8003f84 <MX_TIM1_Init+0x150>)
 8003e74:	4a44      	ldr	r2, [pc, #272]	; (8003f88 <MX_TIM1_Init+0x154>)
 8003e76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003e78:	4b42      	ldr	r3, [pc, #264]	; (8003f84 <MX_TIM1_Init+0x150>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e7e:	4b41      	ldr	r3, [pc, #260]	; (8003f84 <MX_TIM1_Init+0x150>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3360-1;
 8003e84:	4b3f      	ldr	r3, [pc, #252]	; (8003f84 <MX_TIM1_Init+0x150>)
 8003e86:	f640 521f 	movw	r2, #3359	; 0xd1f
 8003e8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e8c:	4b3d      	ldr	r3, [pc, #244]	; (8003f84 <MX_TIM1_Init+0x150>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e92:	4b3c      	ldr	r3, [pc, #240]	; (8003f84 <MX_TIM1_Init+0x150>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e98:	4b3a      	ldr	r3, [pc, #232]	; (8003f84 <MX_TIM1_Init+0x150>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e9e:	4839      	ldr	r0, [pc, #228]	; (8003f84 <MX_TIM1_Init+0x150>)
 8003ea0:	f003 fc2c 	bl	80076fc <HAL_TIM_Base_Init>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003eaa:	f7ff fe07 	bl	8003abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eb2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003eb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4832      	ldr	r0, [pc, #200]	; (8003f84 <MX_TIM1_Init+0x150>)
 8003ebc:	f004 fb12 	bl	80084e4 <HAL_TIM_ConfigClockSource>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003ec6:	f7ff fdf9 	bl	8003abc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003eca:	482e      	ldr	r0, [pc, #184]	; (8003f84 <MX_TIM1_Init+0x150>)
 8003ecc:	f003 fcd6 	bl	800787c <HAL_TIM_PWM_Init>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003ed6:	f7ff fdf1 	bl	8003abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eda:	2300      	movs	r3, #0
 8003edc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ee2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4826      	ldr	r0, [pc, #152]	; (8003f84 <MX_TIM1_Init+0x150>)
 8003eea:	f005 f85f 	bl	8008fac <HAL_TIMEx_MasterConfigSynchronization>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003ef4:	f7ff fde2 	bl	8003abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ef8:	2360      	movs	r3, #96	; 0x60
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f00:	2300      	movs	r3, #0
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f04:	2300      	movs	r3, #0
 8003f06:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f10:	2300      	movs	r3, #0
 8003f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f18:	2200      	movs	r2, #0
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4819      	ldr	r0, [pc, #100]	; (8003f84 <MX_TIM1_Init+0x150>)
 8003f1e:	f004 fa1f 	bl	8008360 <HAL_TIM_PWM_ConfigChannel>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003f28:	f7ff fdc8 	bl	8003abc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f30:	2204      	movs	r2, #4
 8003f32:	4619      	mov	r1, r3
 8003f34:	4813      	ldr	r0, [pc, #76]	; (8003f84 <MX_TIM1_Init+0x150>)
 8003f36:	f004 fa13 	bl	8008360 <HAL_TIM_PWM_ConfigChannel>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003f40:	f7ff fdbc 	bl	8003abc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f44:	2300      	movs	r3, #0
 8003f46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f62:	1d3b      	adds	r3, r7, #4
 8003f64:	4619      	mov	r1, r3
 8003f66:	4807      	ldr	r0, [pc, #28]	; (8003f84 <MX_TIM1_Init+0x150>)
 8003f68:	f005 f89c 	bl	80090a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8003f72:	f7ff fda3 	bl	8003abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f76:	4803      	ldr	r0, [pc, #12]	; (8003f84 <MX_TIM1_Init+0x150>)
 8003f78:	f000 f9f2 	bl	8004360 <HAL_TIM_MspPostInit>

}
 8003f7c:	bf00      	nop
 8003f7e:	3758      	adds	r7, #88	; 0x58
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20004d74 	.word	0x20004d74
 8003f88:	40010000 	.word	0x40010000

08003f8c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08c      	sub	sp, #48	; 0x30
 8003f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f92:	f107 030c 	add.w	r3, r7, #12
 8003f96:	2224      	movs	r2, #36	; 0x24
 8003f98:	2100      	movs	r1, #0
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f00d f857 	bl	801104e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fa0:	1d3b      	adds	r3, r7, #4
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003fa8:	4b21      	ldr	r3, [pc, #132]	; (8004030 <MX_TIM2_Init+0xa4>)
 8003faa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003fb0:	4b1f      	ldr	r3, [pc, #124]	; (8004030 <MX_TIM2_Init+0xa4>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fb6:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <MX_TIM2_Init+0xa4>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003fbc:	4b1c      	ldr	r3, [pc, #112]	; (8004030 <MX_TIM2_Init+0xa4>)
 8003fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fc4:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <MX_TIM2_Init+0xa4>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fca:	4b19      	ldr	r3, [pc, #100]	; (8004030 <MX_TIM2_Init+0xa4>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003fec:	2300      	movs	r3, #0
 8003fee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003ff4:	f107 030c 	add.w	r3, r7, #12
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	480d      	ldr	r0, [pc, #52]	; (8004030 <MX_TIM2_Init+0xa4>)
 8003ffc:	f003 fed8 	bl	8007db0 <HAL_TIM_Encoder_Init>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004006:	f7ff fd59 	bl	8003abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4806      	ldr	r0, [pc, #24]	; (8004030 <MX_TIM2_Init+0xa4>)
 8004018:	f004 ffc8 	bl	8008fac <HAL_TIMEx_MasterConfigSynchronization>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004022:	f7ff fd4b 	bl	8003abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004026:	bf00      	nop
 8004028:	3730      	adds	r7, #48	; 0x30
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20004dbc 	.word	0x20004dbc

08004034 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08c      	sub	sp, #48	; 0x30
 8004038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800403a:	f107 030c 	add.w	r3, r7, #12
 800403e:	2224      	movs	r2, #36	; 0x24
 8004040:	2100      	movs	r1, #0
 8004042:	4618      	mov	r0, r3
 8004044:	f00d f803 	bl	801104e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004048:	1d3b      	adds	r3, r7, #4
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004050:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <MX_TIM3_Init+0xa0>)
 8004052:	4a21      	ldr	r2, [pc, #132]	; (80040d8 <MX_TIM3_Init+0xa4>)
 8004054:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004056:	4b1f      	ldr	r3, [pc, #124]	; (80040d4 <MX_TIM3_Init+0xa0>)
 8004058:	2200      	movs	r2, #0
 800405a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800405c:	4b1d      	ldr	r3, [pc, #116]	; (80040d4 <MX_TIM3_Init+0xa0>)
 800405e:	2200      	movs	r2, #0
 8004060:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004062:	4b1c      	ldr	r3, [pc, #112]	; (80040d4 <MX_TIM3_Init+0xa0>)
 8004064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004068:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800406a:	4b1a      	ldr	r3, [pc, #104]	; (80040d4 <MX_TIM3_Init+0xa0>)
 800406c:	2200      	movs	r2, #0
 800406e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004070:	4b18      	ldr	r3, [pc, #96]	; (80040d4 <MX_TIM3_Init+0xa0>)
 8004072:	2200      	movs	r2, #0
 8004074:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004076:	2303      	movs	r3, #3
 8004078:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800407e:	2301      	movs	r3, #1
 8004080:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004082:	2300      	movs	r3, #0
 8004084:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800408a:	2300      	movs	r3, #0
 800408c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800408e:	2301      	movs	r3, #1
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004092:	2300      	movs	r3, #0
 8004094:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004096:	2300      	movs	r3, #0
 8004098:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800409a:	f107 030c 	add.w	r3, r7, #12
 800409e:	4619      	mov	r1, r3
 80040a0:	480c      	ldr	r0, [pc, #48]	; (80040d4 <MX_TIM3_Init+0xa0>)
 80040a2:	f003 fe85 	bl	8007db0 <HAL_TIM_Encoder_Init>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80040ac:	f7ff fd06 	bl	8003abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040b0:	2300      	movs	r3, #0
 80040b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040b8:	1d3b      	adds	r3, r7, #4
 80040ba:	4619      	mov	r1, r3
 80040bc:	4805      	ldr	r0, [pc, #20]	; (80040d4 <MX_TIM3_Init+0xa0>)
 80040be:	f004 ff75 	bl	8008fac <HAL_TIMEx_MasterConfigSynchronization>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80040c8:	f7ff fcf8 	bl	8003abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80040cc:	bf00      	nop
 80040ce:	3730      	adds	r7, #48	; 0x30
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20004d2c 	.word	0x20004d2c
 80040d8:	40000400 	.word	0x40000400

080040dc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040e2:	f107 0310 	add.w	r3, r7, #16
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80040ec:	463b      	mov	r3, r7
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	605a      	str	r2, [r3, #4]
 80040f4:	609a      	str	r2, [r3, #8]
 80040f6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80040f8:	4b21      	ldr	r3, [pc, #132]	; (8004180 <MX_TIM8_Init+0xa4>)
 80040fa:	4a22      	ldr	r2, [pc, #136]	; (8004184 <MX_TIM8_Init+0xa8>)
 80040fc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 80-1;
 80040fe:	4b20      	ldr	r3, [pc, #128]	; (8004180 <MX_TIM8_Init+0xa4>)
 8004100:	224f      	movs	r2, #79	; 0x4f
 8004102:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004104:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <MX_TIM8_Init+0xa4>)
 8004106:	2200      	movs	r2, #0
 8004108:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800410a:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <MX_TIM8_Init+0xa4>)
 800410c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004110:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004112:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <MX_TIM8_Init+0xa4>)
 8004114:	2200      	movs	r2, #0
 8004116:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004118:	4b19      	ldr	r3, [pc, #100]	; (8004180 <MX_TIM8_Init+0xa4>)
 800411a:	2200      	movs	r2, #0
 800411c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800411e:	4b18      	ldr	r3, [pc, #96]	; (8004180 <MX_TIM8_Init+0xa4>)
 8004120:	2200      	movs	r2, #0
 8004122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8004124:	4816      	ldr	r0, [pc, #88]	; (8004180 <MX_TIM8_Init+0xa4>)
 8004126:	f003 fccb 	bl	8007ac0 <HAL_TIM_IC_Init>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8004130:	f7ff fcc4 	bl	8003abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004134:	2300      	movs	r3, #0
 8004136:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800413c:	f107 0310 	add.w	r3, r7, #16
 8004140:	4619      	mov	r1, r3
 8004142:	480f      	ldr	r0, [pc, #60]	; (8004180 <MX_TIM8_Init+0xa4>)
 8004144:	f004 ff32 	bl	8008fac <HAL_TIMEx_MasterConfigSynchronization>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800414e:	f7ff fcb5 	bl	8003abc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004152:	2300      	movs	r3, #0
 8004154:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004156:	2301      	movs	r3, #1
 8004158:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004162:	463b      	mov	r3, r7
 8004164:	220c      	movs	r2, #12
 8004166:	4619      	mov	r1, r3
 8004168:	4805      	ldr	r0, [pc, #20]	; (8004180 <MX_TIM8_Init+0xa4>)
 800416a:	f004 f85d 	bl	8008228 <HAL_TIM_IC_ConfigChannel>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 8004174:	f7ff fca2 	bl	8003abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004178:	bf00      	nop
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20004ce4 	.word	0x20004ce4
 8004184:	40010400 	.word	0x40010400

08004188 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a0b      	ldr	r2, [pc, #44]	; (80041c4 <HAL_TIM_Base_MspInit+0x3c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d10d      	bne.n	80041b6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <HAL_TIM_Base_MspInit+0x40>)
 80041a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a2:	4a09      	ldr	r2, [pc, #36]	; (80041c8 <HAL_TIM_Base_MspInit+0x40>)
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	6453      	str	r3, [r2, #68]	; 0x44
 80041aa:	4b07      	ldr	r3, [pc, #28]	; (80041c8 <HAL_TIM_Base_MspInit+0x40>)
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80041b6:	bf00      	nop
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40010000 	.word	0x40010000
 80041c8:	40023800 	.word	0x40023800

080041cc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08c      	sub	sp, #48	; 0x30
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041d4:	f107 031c 	add.w	r3, r7, #28
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	605a      	str	r2, [r3, #4]
 80041de:	609a      	str	r2, [r3, #8]
 80041e0:	60da      	str	r2, [r3, #12]
 80041e2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ec:	d12c      	bne.n	8004248 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041ee:	2300      	movs	r3, #0
 80041f0:	61bb      	str	r3, [r7, #24]
 80041f2:	4b30      	ldr	r3, [pc, #192]	; (80042b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	4a2f      	ldr	r2, [pc, #188]	; (80042b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80041f8:	f043 0301 	orr.w	r3, r3, #1
 80041fc:	6413      	str	r3, [r2, #64]	; 0x40
 80041fe:	4b2d      	ldr	r3, [pc, #180]	; (80042b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	61bb      	str	r3, [r7, #24]
 8004208:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	4b29      	ldr	r3, [pc, #164]	; (80042b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	4a28      	ldr	r2, [pc, #160]	; (80042b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	6313      	str	r3, [r2, #48]	; 0x30
 800421a:	4b26      	ldr	r3, [pc, #152]	; (80042b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCG_A_Pin|ENCG_B_Pin;
 8004226:	2303      	movs	r3, #3
 8004228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800422a:	2302      	movs	r3, #2
 800422c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422e:	2300      	movs	r3, #0
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004232:	2300      	movs	r3, #0
 8004234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004236:	2301      	movs	r3, #1
 8004238:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800423a:	f107 031c 	add.w	r3, r7, #28
 800423e:	4619      	mov	r1, r3
 8004240:	481d      	ldr	r0, [pc, #116]	; (80042b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004242:	f001 fb63 	bl	800590c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004246:	e030      	b.n	80042aa <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1b      	ldr	r2, [pc, #108]	; (80042bc <HAL_TIM_Encoder_MspInit+0xf0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d12b      	bne.n	80042aa <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	4a16      	ldr	r2, [pc, #88]	; (80042b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800425c:	f043 0302 	orr.w	r3, r3, #2
 8004260:	6413      	str	r3, [r2, #64]	; 0x40
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	4a0f      	ldr	r2, [pc, #60]	; (80042b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	6313      	str	r3, [r2, #48]	; 0x30
 800427e:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCD_A_Pin|ENCD_B_Pin;
 800428a:	23c0      	movs	r3, #192	; 0xc0
 800428c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800428e:	2302      	movs	r3, #2
 8004290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004292:	2300      	movs	r3, #0
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004296:	2300      	movs	r3, #0
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800429a:	2302      	movs	r3, #2
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800429e:	f107 031c 	add.w	r3, r7, #28
 80042a2:	4619      	mov	r1, r3
 80042a4:	4804      	ldr	r0, [pc, #16]	; (80042b8 <HAL_TIM_Encoder_MspInit+0xec>)
 80042a6:	f001 fb31 	bl	800590c <HAL_GPIO_Init>
}
 80042aa:	bf00      	nop
 80042ac:	3730      	adds	r7, #48	; 0x30
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40023800 	.word	0x40023800
 80042b8:	40020000 	.word	0x40020000
 80042bc:	40000400 	.word	0x40000400

080042c0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08a      	sub	sp, #40	; 0x28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c8:	f107 0314 	add.w	r3, r7, #20
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	605a      	str	r2, [r3, #4]
 80042d2:	609a      	str	r2, [r3, #8]
 80042d4:	60da      	str	r2, [r3, #12]
 80042d6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM8)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <HAL_TIM_IC_MspInit+0x94>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d134      	bne.n	800434c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	4b1c      	ldr	r3, [pc, #112]	; (8004358 <HAL_TIM_IC_MspInit+0x98>)
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	4a1b      	ldr	r2, [pc, #108]	; (8004358 <HAL_TIM_IC_MspInit+0x98>)
 80042ec:	f043 0302 	orr.w	r3, r3, #2
 80042f0:	6453      	str	r3, [r2, #68]	; 0x44
 80042f2:	4b19      	ldr	r3, [pc, #100]	; (8004358 <HAL_TIM_IC_MspInit+0x98>)
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	4b15      	ldr	r3, [pc, #84]	; (8004358 <HAL_TIM_IC_MspInit+0x98>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	4a14      	ldr	r2, [pc, #80]	; (8004358 <HAL_TIM_IC_MspInit+0x98>)
 8004308:	f043 0304 	orr.w	r3, r3, #4
 800430c:	6313      	str	r3, [r2, #48]	; 0x30
 800430e:	4b12      	ldr	r3, [pc, #72]	; (8004358 <HAL_TIM_IC_MspInit+0x98>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = RGB_TIM_Pin;
 800431a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800431e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004320:	2302      	movs	r3, #2
 8004322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004328:	2300      	movs	r3, #0
 800432a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800432c:	2303      	movs	r3, #3
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RGB_TIM_GPIO_Port, &GPIO_InitStruct);
 8004330:	f107 0314 	add.w	r3, r7, #20
 8004334:	4619      	mov	r1, r3
 8004336:	4809      	ldr	r0, [pc, #36]	; (800435c <HAL_TIM_IC_MspInit+0x9c>)
 8004338:	f001 fae8 	bl	800590c <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 800433c:	2200      	movs	r2, #0
 800433e:	2105      	movs	r1, #5
 8004340:	202e      	movs	r0, #46	; 0x2e
 8004342:	f000 fea9 	bl	8005098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8004346:	202e      	movs	r0, #46	; 0x2e
 8004348:	f000 fec2 	bl	80050d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800434c:	bf00      	nop
 800434e:	3728      	adds	r7, #40	; 0x28
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40010400 	.word	0x40010400
 8004358:	40023800 	.word	0x40023800
 800435c:	40020800 	.word	0x40020800

08004360 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004368:	f107 030c 	add.w	r3, r7, #12
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	60da      	str	r2, [r3, #12]
 8004376:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a12      	ldr	r2, [pc, #72]	; (80043c8 <HAL_TIM_MspPostInit+0x68>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d11e      	bne.n	80043c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004382:	2300      	movs	r3, #0
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	4b11      	ldr	r3, [pc, #68]	; (80043cc <HAL_TIM_MspPostInit+0x6c>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	4a10      	ldr	r2, [pc, #64]	; (80043cc <HAL_TIM_MspPostInit+0x6c>)
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	6313      	str	r3, [r2, #48]	; 0x30
 8004392:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <HAL_TIM_MspPostInit+0x6c>)
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTG_PWM_Pin|MOTD_PWM_Pin;
 800439e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a4:	2302      	movs	r3, #2
 80043a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80043b0:	2301      	movs	r3, #1
 80043b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043b4:	f107 030c 	add.w	r3, r7, #12
 80043b8:	4619      	mov	r1, r3
 80043ba:	4805      	ldr	r0, [pc, #20]	; (80043d0 <HAL_TIM_MspPostInit+0x70>)
 80043bc:	f001 faa6 	bl	800590c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80043c0:	bf00      	nop
 80043c2:	3720      	adds	r7, #32
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40010000 	.word	0x40010000
 80043cc:	40023800 	.word	0x40023800
 80043d0:	40020000 	.word	0x40020000

080043d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80043d8:	4b11      	ldr	r3, [pc, #68]	; (8004420 <MX_USART2_UART_Init+0x4c>)
 80043da:	4a12      	ldr	r2, [pc, #72]	; (8004424 <MX_USART2_UART_Init+0x50>)
 80043dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80043de:	4b10      	ldr	r3, [pc, #64]	; (8004420 <MX_USART2_UART_Init+0x4c>)
 80043e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80043e6:	4b0e      	ldr	r3, [pc, #56]	; (8004420 <MX_USART2_UART_Init+0x4c>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80043ec:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <MX_USART2_UART_Init+0x4c>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80043f2:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <MX_USART2_UART_Init+0x4c>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80043f8:	4b09      	ldr	r3, [pc, #36]	; (8004420 <MX_USART2_UART_Init+0x4c>)
 80043fa:	220c      	movs	r2, #12
 80043fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043fe:	4b08      	ldr	r3, [pc, #32]	; (8004420 <MX_USART2_UART_Init+0x4c>)
 8004400:	2200      	movs	r2, #0
 8004402:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <MX_USART2_UART_Init+0x4c>)
 8004406:	2200      	movs	r2, #0
 8004408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800440a:	4805      	ldr	r0, [pc, #20]	; (8004420 <MX_USART2_UART_Init+0x4c>)
 800440c:	f004 feb0 	bl	8009170 <HAL_UART_Init>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004416:	f7ff fb51 	bl	8003abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800441a:	bf00      	nop
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20004e04 	.word	0x20004e04
 8004424:	40004400 	.word	0x40004400

08004428 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08a      	sub	sp, #40	; 0x28
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004430:	f107 0314 	add.w	r3, r7, #20
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1d      	ldr	r2, [pc, #116]	; (80044bc <HAL_UART_MspInit+0x94>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d133      	bne.n	80044b2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800444a:	2300      	movs	r3, #0
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	4b1c      	ldr	r3, [pc, #112]	; (80044c0 <HAL_UART_MspInit+0x98>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	4a1b      	ldr	r2, [pc, #108]	; (80044c0 <HAL_UART_MspInit+0x98>)
 8004454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004458:	6413      	str	r3, [r2, #64]	; 0x40
 800445a:	4b19      	ldr	r3, [pc, #100]	; (80044c0 <HAL_UART_MspInit+0x98>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <HAL_UART_MspInit+0x98>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <HAL_UART_MspInit+0x98>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	6313      	str	r3, [r2, #48]	; 0x30
 8004476:	4b12      	ldr	r3, [pc, #72]	; (80044c0 <HAL_UART_MspInit+0x98>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004482:	230c      	movs	r3, #12
 8004484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004486:	2302      	movs	r3, #2
 8004488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800448e:	2303      	movs	r3, #3
 8004490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004492:	2307      	movs	r3, #7
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004496:	f107 0314 	add.w	r3, r7, #20
 800449a:	4619      	mov	r1, r3
 800449c:	4809      	ldr	r0, [pc, #36]	; (80044c4 <HAL_UART_MspInit+0x9c>)
 800449e:	f001 fa35 	bl	800590c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80044a2:	2200      	movs	r2, #0
 80044a4:	2105      	movs	r1, #5
 80044a6:	2026      	movs	r0, #38	; 0x26
 80044a8:	f000 fdf6 	bl	8005098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80044ac:	2026      	movs	r0, #38	; 0x26
 80044ae:	f000 fe0f 	bl	80050d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80044b2:	bf00      	nop
 80044b4:	3728      	adds	r7, #40	; 0x28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40004400 	.word	0x40004400
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40020000 	.word	0x40020000

080044c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80044c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004500 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044cc:	480d      	ldr	r0, [pc, #52]	; (8004504 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044ce:	490e      	ldr	r1, [pc, #56]	; (8004508 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044d0:	4a0e      	ldr	r2, [pc, #56]	; (800450c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044d4:	e002      	b.n	80044dc <LoopCopyDataInit>

080044d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044da:	3304      	adds	r3, #4

080044dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044e0:	d3f9      	bcc.n	80044d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044e2:	4a0b      	ldr	r2, [pc, #44]	; (8004510 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044e4:	4c0b      	ldr	r4, [pc, #44]	; (8004514 <LoopFillZerobss+0x26>)
  movs r3, #0
 80044e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044e8:	e001      	b.n	80044ee <LoopFillZerobss>

080044ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044ec:	3204      	adds	r2, #4

080044ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044f0:	d3fb      	bcc.n	80044ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80044f2:	f7ff fc8d 	bl	8003e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044f6:	f00c fd75 	bl	8010fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044fa:	f7ff f87b 	bl	80035f4 <main>
  bx  lr    
 80044fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004500:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004508:	200004a0 	.word	0x200004a0
  ldr r2, =_sidata
 800450c:	080174f8 	.word	0x080174f8
  ldr r2, =_sbss
 8004510:	200004a0 	.word	0x200004a0
  ldr r4, =_ebss
 8004514:	20004e9c 	.word	0x20004e9c

08004518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004518:	e7fe      	b.n	8004518 <ADC_IRQHandler>
	...

0800451c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004520:	4b0e      	ldr	r3, [pc, #56]	; (800455c <HAL_Init+0x40>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a0d      	ldr	r2, [pc, #52]	; (800455c <HAL_Init+0x40>)
 8004526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800452a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_Init+0x40>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a0a      	ldr	r2, [pc, #40]	; (800455c <HAL_Init+0x40>)
 8004532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004536:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004538:	4b08      	ldr	r3, [pc, #32]	; (800455c <HAL_Init+0x40>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a07      	ldr	r2, [pc, #28]	; (800455c <HAL_Init+0x40>)
 800453e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004544:	2003      	movs	r0, #3
 8004546:	f000 fd9c 	bl	8005082 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800454a:	200f      	movs	r0, #15
 800454c:	f7ff fae8 	bl	8003b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004550:	f7ff faba 	bl	8003ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40023c00 	.word	0x40023c00

08004560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004564:	4b06      	ldr	r3, [pc, #24]	; (8004580 <HAL_IncTick+0x20>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	4b06      	ldr	r3, [pc, #24]	; (8004584 <HAL_IncTick+0x24>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4413      	add	r3, r2
 8004570:	4a04      	ldr	r2, [pc, #16]	; (8004584 <HAL_IncTick+0x24>)
 8004572:	6013      	str	r3, [r2, #0]
}
 8004574:	bf00      	nop
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	20000008 	.word	0x20000008
 8004584:	20004e48 	.word	0x20004e48

08004588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  return uwTick;
 800458c:	4b03      	ldr	r3, [pc, #12]	; (800459c <HAL_GetTick+0x14>)
 800458e:	681b      	ldr	r3, [r3, #0]
}
 8004590:	4618      	mov	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	20004e48 	.word	0x20004e48

080045a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045a8:	f7ff ffee 	bl	8004588 <HAL_GetTick>
 80045ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d005      	beq.n	80045c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045ba:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <HAL_Delay+0x44>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4413      	add	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045c6:	bf00      	nop
 80045c8:	f7ff ffde 	bl	8004588 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d8f7      	bhi.n	80045c8 <HAL_Delay+0x28>
  {
  }
}
 80045d8:	bf00      	nop
 80045da:	bf00      	nop
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20000008 	.word	0x20000008

080045e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e033      	b.n	8004666 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fe fc2a 	bl	8002e60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f003 0310 	and.w	r3, r3, #16
 8004622:	2b00      	cmp	r3, #0
 8004624:	d118      	bne.n	8004658 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800462e:	f023 0302 	bic.w	r3, r3, #2
 8004632:	f043 0202 	orr.w	r2, r3, #2
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fad2 	bl	8004be4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f023 0303 	bic.w	r3, r3, #3
 800464e:	f043 0201 	orr.w	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	641a      	str	r2, [r3, #64]	; 0x40
 8004656:	e001      	b.n	800465c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004664:	7bfb      	ldrb	r3, [r7, #15]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_ADC_Start_DMA+0x1e>
 800468a:	2302      	movs	r3, #2
 800468c:	e0e9      	b.n	8004862 <HAL_ADC_Start_DMA+0x1f2>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d018      	beq.n	80046d6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80046b4:	4b6d      	ldr	r3, [pc, #436]	; (800486c <HAL_ADC_Start_DMA+0x1fc>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a6d      	ldr	r2, [pc, #436]	; (8004870 <HAL_ADC_Start_DMA+0x200>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	0c9a      	lsrs	r2, r3, #18
 80046c0:	4613      	mov	r3, r2
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	4413      	add	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80046c8:	e002      	b.n	80046d0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f9      	bne.n	80046ca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e4:	d107      	bne.n	80046f6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b01      	cmp	r3, #1
 8004702:	f040 80a1 	bne.w	8004848 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800470e:	f023 0301 	bic.w	r3, r3, #1
 8004712:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	2b00      	cmp	r3, #0
 8004726:	d007      	beq.n	8004738 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004730:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004744:	d106      	bne.n	8004754 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	f023 0206 	bic.w	r2, r3, #6
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	645a      	str	r2, [r3, #68]	; 0x44
 8004752:	e002      	b.n	800475a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004762:	4b44      	ldr	r3, [pc, #272]	; (8004874 <HAL_ADC_Start_DMA+0x204>)
 8004764:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	4a43      	ldr	r2, [pc, #268]	; (8004878 <HAL_ADC_Start_DMA+0x208>)
 800476c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	4a42      	ldr	r2, [pc, #264]	; (800487c <HAL_ADC_Start_DMA+0x20c>)
 8004774:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	4a41      	ldr	r2, [pc, #260]	; (8004880 <HAL_ADC_Start_DMA+0x210>)
 800477c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004786:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004796:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047a6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	334c      	adds	r3, #76	; 0x4c
 80047b2:	4619      	mov	r1, r3
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f000 fd54 	bl	8005264 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d12a      	bne.n	800481e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a2d      	ldr	r2, [pc, #180]	; (8004884 <HAL_ADC_Start_DMA+0x214>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d015      	beq.n	80047fe <HAL_ADC_Start_DMA+0x18e>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a2c      	ldr	r2, [pc, #176]	; (8004888 <HAL_ADC_Start_DMA+0x218>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d105      	bne.n	80047e8 <HAL_ADC_Start_DMA+0x178>
 80047dc:	4b25      	ldr	r3, [pc, #148]	; (8004874 <HAL_ADC_Start_DMA+0x204>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 031f 	and.w	r3, r3, #31
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a27      	ldr	r2, [pc, #156]	; (800488c <HAL_ADC_Start_DMA+0x21c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d136      	bne.n	8004860 <HAL_ADC_Start_DMA+0x1f0>
 80047f2:	4b20      	ldr	r3, [pc, #128]	; (8004874 <HAL_ADC_Start_DMA+0x204>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 0310 	and.w	r3, r3, #16
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d130      	bne.n	8004860 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d129      	bne.n	8004860 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800481a:	609a      	str	r2, [r3, #8]
 800481c:	e020      	b.n	8004860 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a18      	ldr	r2, [pc, #96]	; (8004884 <HAL_ADC_Start_DMA+0x214>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d11b      	bne.n	8004860 <HAL_ADC_Start_DMA+0x1f0>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d114      	bne.n	8004860 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004844:	609a      	str	r2, [r3, #8]
 8004846:	e00b      	b.n	8004860 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	f043 0210 	orr.w	r2, r3, #16
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004858:	f043 0201 	orr.w	r2, r3, #1
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000000 	.word	0x20000000
 8004870:	431bde83 	.word	0x431bde83
 8004874:	40012300 	.word	0x40012300
 8004878:	08004ddd 	.word	0x08004ddd
 800487c:	08004e97 	.word	0x08004e97
 8004880:	08004eb3 	.word	0x08004eb3
 8004884:	40012000 	.word	0x40012000
 8004888:	40012100 	.word	0x40012100
 800488c:	40012200 	.word	0x40012200

08004890 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_ADC_Stop_DMA+0x1a>
 80048a6:	2302      	movs	r3, #2
 80048a8:	e048      	b.n	800493c <HAL_ADC_Stop_DMA+0xac>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0201 	bic.w	r2, r2, #1
 80048c0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d130      	bne.n	8004932 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048de:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d10f      	bne.n	800490e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fd0e 	bl	8005314 <HAL_DMA_Abort>
 80048f8:	4603      	mov	r3, r0
 80048fa:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800491c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	f043 0201 	orr.w	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800493a:	7bfb      	ldrb	r3, [r7, #15]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_ADC_ConfigChannel+0x1c>
 8004998:	2302      	movs	r3, #2
 800499a:	e113      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x244>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b09      	cmp	r3, #9
 80049aa:	d925      	bls.n	80049f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68d9      	ldr	r1, [r3, #12]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	461a      	mov	r2, r3
 80049ba:	4613      	mov	r3, r2
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	4413      	add	r3, r2
 80049c0:	3b1e      	subs	r3, #30
 80049c2:	2207      	movs	r2, #7
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	43da      	mvns	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	400a      	ands	r2, r1
 80049d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68d9      	ldr	r1, [r3, #12]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	4618      	mov	r0, r3
 80049e4:	4603      	mov	r3, r0
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	4403      	add	r3, r0
 80049ea:	3b1e      	subs	r3, #30
 80049ec:	409a      	lsls	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	60da      	str	r2, [r3, #12]
 80049f6:	e022      	b.n	8004a3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6919      	ldr	r1, [r3, #16]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	4613      	mov	r3, r2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	4413      	add	r3, r2
 8004a0c:	2207      	movs	r2, #7
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	43da      	mvns	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	400a      	ands	r2, r1
 8004a1a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6919      	ldr	r1, [r3, #16]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	4603      	mov	r3, r0
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	4403      	add	r3, r0
 8004a34:	409a      	lsls	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b06      	cmp	r3, #6
 8004a44:	d824      	bhi.n	8004a90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	3b05      	subs	r3, #5
 8004a58:	221f      	movs	r2, #31
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	43da      	mvns	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	400a      	ands	r2, r1
 8004a66:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	4618      	mov	r0, r3
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	3b05      	subs	r3, #5
 8004a82:	fa00 f203 	lsl.w	r2, r0, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8004a8e:	e04c      	b.n	8004b2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b0c      	cmp	r3, #12
 8004a96:	d824      	bhi.n	8004ae2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3b23      	subs	r3, #35	; 0x23
 8004aaa:	221f      	movs	r2, #31
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	43da      	mvns	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	400a      	ands	r2, r1
 8004ab8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3b23      	subs	r3, #35	; 0x23
 8004ad4:	fa00 f203 	lsl.w	r2, r0, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	631a      	str	r2, [r3, #48]	; 0x30
 8004ae0:	e023      	b.n	8004b2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	3b41      	subs	r3, #65	; 0x41
 8004af4:	221f      	movs	r2, #31
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43da      	mvns	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	400a      	ands	r2, r1
 8004b02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	4618      	mov	r0, r3
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	3b41      	subs	r3, #65	; 0x41
 8004b1e:	fa00 f203 	lsl.w	r2, r0, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b2a:	4b29      	ldr	r3, [pc, #164]	; (8004bd0 <HAL_ADC_ConfigChannel+0x250>)
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a28      	ldr	r2, [pc, #160]	; (8004bd4 <HAL_ADC_ConfigChannel+0x254>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d10f      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x1d8>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b12      	cmp	r3, #18
 8004b3e:	d10b      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a1d      	ldr	r2, [pc, #116]	; (8004bd4 <HAL_ADC_ConfigChannel+0x254>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d12b      	bne.n	8004bba <HAL_ADC_ConfigChannel+0x23a>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a1c      	ldr	r2, [pc, #112]	; (8004bd8 <HAL_ADC_ConfigChannel+0x258>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <HAL_ADC_ConfigChannel+0x1f4>
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b11      	cmp	r3, #17
 8004b72:	d122      	bne.n	8004bba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a11      	ldr	r2, [pc, #68]	; (8004bd8 <HAL_ADC_ConfigChannel+0x258>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d111      	bne.n	8004bba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b96:	4b11      	ldr	r3, [pc, #68]	; (8004bdc <HAL_ADC_ConfigChannel+0x25c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a11      	ldr	r2, [pc, #68]	; (8004be0 <HAL_ADC_ConfigChannel+0x260>)
 8004b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba0:	0c9a      	lsrs	r2, r3, #18
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004bac:	e002      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f9      	bne.n	8004bae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40012300 	.word	0x40012300
 8004bd4:	40012000 	.word	0x40012000
 8004bd8:	10000012 	.word	0x10000012
 8004bdc:	20000000 	.word	0x20000000
 8004be0:	431bde83 	.word	0x431bde83

08004be4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bec:	4b79      	ldr	r3, [pc, #484]	; (8004dd4 <ADC_Init+0x1f0>)
 8004bee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	431a      	orrs	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6859      	ldr	r1, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	021a      	lsls	r2, r3, #8
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004c3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6859      	ldr	r1, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6899      	ldr	r1, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c76:	4a58      	ldr	r2, [pc, #352]	; (8004dd8 <ADC_Init+0x1f4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d022      	beq.n	8004cc2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6899      	ldr	r1, [r3, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6899      	ldr	r1, [r3, #8]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	609a      	str	r2, [r3, #8]
 8004cc0:	e00f      	b.n	8004ce2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004cd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ce0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0202 	bic.w	r2, r2, #2
 8004cf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6899      	ldr	r1, [r3, #8]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	7e1b      	ldrb	r3, [r3, #24]
 8004cfc:	005a      	lsls	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01b      	beq.n	8004d48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004d2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6859      	ldr	r1, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	035a      	lsls	r2, r3, #13
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
 8004d46:	e007      	b.n	8004d58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	051a      	lsls	r2, r3, #20
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6899      	ldr	r1, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d9a:	025a      	lsls	r2, r3, #9
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6899      	ldr	r1, [r3, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	029a      	lsls	r2, r3, #10
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	609a      	str	r2, [r3, #8]
}
 8004dc8:	bf00      	nop
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	40012300 	.word	0x40012300
 8004dd8:	0f000001 	.word	0x0f000001

08004ddc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d13c      	bne.n	8004e70 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d12b      	bne.n	8004e68 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d127      	bne.n	8004e68 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d006      	beq.n	8004e34 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d119      	bne.n	8004e68 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0220 	bic.w	r2, r2, #32
 8004e42:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d105      	bne.n	8004e68 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	f043 0201 	orr.w	r2, r3, #1
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f7ff fd6b 	bl	8004944 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e6e:	e00e      	b.n	8004e8e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e74:	f003 0310 	and.w	r3, r3, #16
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff fd75 	bl	800496c <HAL_ADC_ErrorCallback>
}
 8004e82:	e004      	b.n	8004e8e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	4798      	blx	r3
}
 8004e8e:	bf00      	nop
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f7ff fd57 	bl	8004958 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004eaa:	bf00      	nop
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2240      	movs	r2, #64	; 0x40
 8004ec4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eca:	f043 0204 	orr.w	r2, r3, #4
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f7ff fd4a 	bl	800496c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ef0:	4b0c      	ldr	r3, [pc, #48]	; (8004f24 <__NVIC_SetPriorityGrouping+0x44>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004efc:	4013      	ands	r3, r2
 8004efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f12:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <__NVIC_SetPriorityGrouping+0x44>)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	60d3      	str	r3, [r2, #12]
}
 8004f18:	bf00      	nop
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	e000ed00 	.word	0xe000ed00

08004f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f2c:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <__NVIC_GetPriorityGrouping+0x18>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	0a1b      	lsrs	r3, r3, #8
 8004f32:	f003 0307 	and.w	r3, r3, #7
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	e000ed00 	.word	0xe000ed00

08004f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	db0b      	blt.n	8004f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f56:	79fb      	ldrb	r3, [r7, #7]
 8004f58:	f003 021f 	and.w	r2, r3, #31
 8004f5c:	4907      	ldr	r1, [pc, #28]	; (8004f7c <__NVIC_EnableIRQ+0x38>)
 8004f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	2001      	movs	r0, #1
 8004f66:	fa00 f202 	lsl.w	r2, r0, r2
 8004f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	e000e100 	.word	0xe000e100

08004f80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	db12      	blt.n	8004fb8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f92:	79fb      	ldrb	r3, [r7, #7]
 8004f94:	f003 021f 	and.w	r2, r3, #31
 8004f98:	490a      	ldr	r1, [pc, #40]	; (8004fc4 <__NVIC_DisableIRQ+0x44>)
 8004f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	2001      	movs	r0, #1
 8004fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8004fa6:	3320      	adds	r3, #32
 8004fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004fac:	f3bf 8f4f 	dsb	sy
}
 8004fb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004fb2:	f3bf 8f6f 	isb	sy
}
 8004fb6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	e000e100 	.word	0xe000e100

08004fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	6039      	str	r1, [r7, #0]
 8004fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	db0a      	blt.n	8004ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	490c      	ldr	r1, [pc, #48]	; (8005014 <__NVIC_SetPriority+0x4c>)
 8004fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe6:	0112      	lsls	r2, r2, #4
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	440b      	add	r3, r1
 8004fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ff0:	e00a      	b.n	8005008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	4908      	ldr	r1, [pc, #32]	; (8005018 <__NVIC_SetPriority+0x50>)
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	3b04      	subs	r3, #4
 8005000:	0112      	lsls	r2, r2, #4
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	440b      	add	r3, r1
 8005006:	761a      	strb	r2, [r3, #24]
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	e000e100 	.word	0xe000e100
 8005018:	e000ed00 	.word	0xe000ed00

0800501c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800501c:	b480      	push	{r7}
 800501e:	b089      	sub	sp, #36	; 0x24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	f1c3 0307 	rsb	r3, r3, #7
 8005036:	2b04      	cmp	r3, #4
 8005038:	bf28      	it	cs
 800503a:	2304      	movcs	r3, #4
 800503c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	3304      	adds	r3, #4
 8005042:	2b06      	cmp	r3, #6
 8005044:	d902      	bls.n	800504c <NVIC_EncodePriority+0x30>
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	3b03      	subs	r3, #3
 800504a:	e000      	b.n	800504e <NVIC_EncodePriority+0x32>
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005050:	f04f 32ff 	mov.w	r2, #4294967295
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	43da      	mvns	r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	401a      	ands	r2, r3
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005064:	f04f 31ff 	mov.w	r1, #4294967295
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	fa01 f303 	lsl.w	r3, r1, r3
 800506e:	43d9      	mvns	r1, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005074:	4313      	orrs	r3, r2
         );
}
 8005076:	4618      	mov	r0, r3
 8005078:	3724      	adds	r7, #36	; 0x24
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b082      	sub	sp, #8
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7ff ff28 	bl	8004ee0 <__NVIC_SetPriorityGrouping>
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050aa:	f7ff ff3d 	bl	8004f28 <__NVIC_GetPriorityGrouping>
 80050ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	6978      	ldr	r0, [r7, #20]
 80050b6:	f7ff ffb1 	bl	800501c <NVIC_EncodePriority>
 80050ba:	4602      	mov	r2, r0
 80050bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050c0:	4611      	mov	r1, r2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff ff80 	bl	8004fc8 <__NVIC_SetPriority>
}
 80050c8:	bf00      	nop
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff ff30 	bl	8004f44 <__NVIC_EnableIRQ>
}
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	4603      	mov	r3, r0
 80050f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80050f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff ff40 	bl	8004f80 <__NVIC_DisableIRQ>
}
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005114:	f7ff fa38 	bl	8004588 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e099      	b.n	8005258 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0201 	bic.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005144:	e00f      	b.n	8005166 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005146:	f7ff fa1f 	bl	8004588 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b05      	cmp	r3, #5
 8005152:	d908      	bls.n	8005166 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2203      	movs	r2, #3
 800515e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e078      	b.n	8005258 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e8      	bne.n	8005146 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4b38      	ldr	r3, [pc, #224]	; (8005260 <HAL_DMA_Init+0x158>)
 8005180:	4013      	ands	r3, r2
 8005182:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005192:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800519e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	2b04      	cmp	r3, #4
 80051be:	d107      	bne.n	80051d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	4313      	orrs	r3, r2
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f023 0307 	bic.w	r3, r3, #7
 80051e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d117      	bne.n	800522a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00e      	beq.n	800522a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fb01 	bl	8005814 <DMA_CheckFifoParam>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d008      	beq.n	800522a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2240      	movs	r2, #64	; 0x40
 800521c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005226:	2301      	movs	r3, #1
 8005228:	e016      	b.n	8005258 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fab8 	bl	80057a8 <DMA_CalcBaseAndBitshift>
 8005238:	4603      	mov	r3, r0
 800523a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005240:	223f      	movs	r2, #63	; 0x3f
 8005242:	409a      	lsls	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	f010803f 	.word	0xf010803f

08005264 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_DMA_Start_IT+0x26>
 8005286:	2302      	movs	r3, #2
 8005288:	e040      	b.n	800530c <HAL_DMA_Start_IT+0xa8>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b01      	cmp	r3, #1
 800529c:	d12f      	bne.n	80052fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2202      	movs	r2, #2
 80052a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 fa4a 	bl	800574c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052bc:	223f      	movs	r2, #63	; 0x3f
 80052be:	409a      	lsls	r2, r3
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0216 	orr.w	r2, r2, #22
 80052d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d007      	beq.n	80052ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0208 	orr.w	r2, r2, #8
 80052ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0201 	orr.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	e005      	b.n	800530a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005306:	2302      	movs	r3, #2
 8005308:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800530a:	7dfb      	ldrb	r3, [r7, #23]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005320:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005322:	f7ff f931 	bl	8004588 <HAL_GetTick>
 8005326:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d008      	beq.n	8005346 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2280      	movs	r2, #128	; 0x80
 8005338:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e052      	b.n	80053ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0216 	bic.w	r2, r2, #22
 8005354:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695a      	ldr	r2, [r3, #20]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005364:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	d103      	bne.n	8005376 <HAL_DMA_Abort+0x62>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0208 	bic.w	r2, r2, #8
 8005384:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0201 	bic.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005396:	e013      	b.n	80053c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005398:	f7ff f8f6 	bl	8004588 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b05      	cmp	r3, #5
 80053a4:	d90c      	bls.n	80053c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2203      	movs	r2, #3
 80053b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e015      	b.n	80053ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e4      	bne.n	8005398 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d2:	223f      	movs	r2, #63	; 0x3f
 80053d4:	409a      	lsls	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d004      	beq.n	8005412 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2280      	movs	r2, #128	; 0x80
 800540c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e00c      	b.n	800542c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2205      	movs	r2, #5
 8005416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0201 	bic.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005444:	4b92      	ldr	r3, [pc, #584]	; (8005690 <HAL_DMA_IRQHandler+0x258>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a92      	ldr	r2, [pc, #584]	; (8005694 <HAL_DMA_IRQHandler+0x25c>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	0a9b      	lsrs	r3, r3, #10
 8005450:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005456:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005462:	2208      	movs	r2, #8
 8005464:	409a      	lsls	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4013      	ands	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d01a      	beq.n	80054a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	d013      	beq.n	80054a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0204 	bic.w	r2, r2, #4
 800548a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005490:	2208      	movs	r2, #8
 8005492:	409a      	lsls	r2, r3
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549c:	f043 0201 	orr.w	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a8:	2201      	movs	r2, #1
 80054aa:	409a      	lsls	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d012      	beq.n	80054da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00b      	beq.n	80054da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c6:	2201      	movs	r2, #1
 80054c8:	409a      	lsls	r2, r3
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d2:	f043 0202 	orr.w	r2, r3, #2
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054de:	2204      	movs	r2, #4
 80054e0:	409a      	lsls	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4013      	ands	r3, r2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d012      	beq.n	8005510 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00b      	beq.n	8005510 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fc:	2204      	movs	r2, #4
 80054fe:	409a      	lsls	r2, r3
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005508:	f043 0204 	orr.w	r2, r3, #4
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005514:	2210      	movs	r2, #16
 8005516:	409a      	lsls	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4013      	ands	r3, r2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d043      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d03c      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005532:	2210      	movs	r2, #16
 8005534:	409a      	lsls	r2, r3
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d018      	beq.n	800557a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d108      	bne.n	8005568 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	2b00      	cmp	r3, #0
 800555c:	d024      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	4798      	blx	r3
 8005566:	e01f      	b.n	80055a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01b      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	4798      	blx	r3
 8005578:	e016      	b.n	80055a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005584:	2b00      	cmp	r3, #0
 8005586:	d107      	bne.n	8005598 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0208 	bic.w	r2, r2, #8
 8005596:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ac:	2220      	movs	r2, #32
 80055ae:	409a      	lsls	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4013      	ands	r3, r2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 808e 	beq.w	80056d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0310 	and.w	r3, r3, #16
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 8086 	beq.w	80056d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ce:	2220      	movs	r2, #32
 80055d0:	409a      	lsls	r2, r3
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b05      	cmp	r3, #5
 80055e0:	d136      	bne.n	8005650 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0216 	bic.w	r2, r2, #22
 80055f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695a      	ldr	r2, [r3, #20]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005600:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d103      	bne.n	8005612 <HAL_DMA_IRQHandler+0x1da>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800560e:	2b00      	cmp	r3, #0
 8005610:	d007      	beq.n	8005622 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0208 	bic.w	r2, r2, #8
 8005620:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005626:	223f      	movs	r2, #63	; 0x3f
 8005628:	409a      	lsls	r2, r3
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005642:	2b00      	cmp	r3, #0
 8005644:	d07d      	beq.n	8005742 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	4798      	blx	r3
        }
        return;
 800564e:	e078      	b.n	8005742 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d01c      	beq.n	8005698 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d108      	bne.n	800567e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005670:	2b00      	cmp	r3, #0
 8005672:	d030      	beq.n	80056d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	4798      	blx	r3
 800567c:	e02b      	b.n	80056d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005682:	2b00      	cmp	r3, #0
 8005684:	d027      	beq.n	80056d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	4798      	blx	r3
 800568e:	e022      	b.n	80056d6 <HAL_DMA_IRQHandler+0x29e>
 8005690:	20000000 	.word	0x20000000
 8005694:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10f      	bne.n	80056c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0210 	bic.w	r2, r2, #16
 80056b4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d032      	beq.n	8005744 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d022      	beq.n	8005730 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2205      	movs	r2, #5
 80056ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0201 	bic.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	3301      	adds	r3, #1
 8005706:	60bb      	str	r3, [r7, #8]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	429a      	cmp	r2, r3
 800570c:	d307      	bcc.n	800571e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1f2      	bne.n	8005702 <HAL_DMA_IRQHandler+0x2ca>
 800571c:	e000      	b.n	8005720 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800571e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	4798      	blx	r3
 8005740:	e000      	b.n	8005744 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005742:	bf00      	nop
    }
  }
}
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop

0800574c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005768:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b40      	cmp	r3, #64	; 0x40
 8005778:	d108      	bne.n	800578c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800578a:	e007      	b.n	800579c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	60da      	str	r2, [r3, #12]
}
 800579c:	bf00      	nop
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	3b10      	subs	r3, #16
 80057b8:	4a14      	ldr	r2, [pc, #80]	; (800580c <DMA_CalcBaseAndBitshift+0x64>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	091b      	lsrs	r3, r3, #4
 80057c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80057c2:	4a13      	ldr	r2, [pc, #76]	; (8005810 <DMA_CalcBaseAndBitshift+0x68>)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d909      	bls.n	80057ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80057de:	f023 0303 	bic.w	r3, r3, #3
 80057e2:	1d1a      	adds	r2, r3, #4
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	659a      	str	r2, [r3, #88]	; 0x58
 80057e8:	e007      	b.n	80057fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	aaaaaaab 	.word	0xaaaaaaab
 8005810:	08016e64 	.word	0x08016e64

08005814 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005824:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d11f      	bne.n	800586e <DMA_CheckFifoParam+0x5a>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b03      	cmp	r3, #3
 8005832:	d856      	bhi.n	80058e2 <DMA_CheckFifoParam+0xce>
 8005834:	a201      	add	r2, pc, #4	; (adr r2, 800583c <DMA_CheckFifoParam+0x28>)
 8005836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583a:	bf00      	nop
 800583c:	0800584d 	.word	0x0800584d
 8005840:	0800585f 	.word	0x0800585f
 8005844:	0800584d 	.word	0x0800584d
 8005848:	080058e3 	.word	0x080058e3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d046      	beq.n	80058e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800585c:	e043      	b.n	80058e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005866:	d140      	bne.n	80058ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800586c:	e03d      	b.n	80058ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005876:	d121      	bne.n	80058bc <DMA_CheckFifoParam+0xa8>
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b03      	cmp	r3, #3
 800587c:	d837      	bhi.n	80058ee <DMA_CheckFifoParam+0xda>
 800587e:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <DMA_CheckFifoParam+0x70>)
 8005880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005884:	08005895 	.word	0x08005895
 8005888:	0800589b 	.word	0x0800589b
 800588c:	08005895 	.word	0x08005895
 8005890:	080058ad 	.word	0x080058ad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	73fb      	strb	r3, [r7, #15]
      break;
 8005898:	e030      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d025      	beq.n	80058f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058aa:	e022      	b.n	80058f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058b4:	d11f      	bne.n	80058f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80058ba:	e01c      	b.n	80058f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d903      	bls.n	80058ca <DMA_CheckFifoParam+0xb6>
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d003      	beq.n	80058d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80058c8:	e018      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
      break;
 80058ce:	e015      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00e      	beq.n	80058fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	73fb      	strb	r3, [r7, #15]
      break;
 80058e0:	e00b      	b.n	80058fa <DMA_CheckFifoParam+0xe6>
      break;
 80058e2:	bf00      	nop
 80058e4:	e00a      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      break;
 80058e6:	bf00      	nop
 80058e8:	e008      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      break;
 80058ea:	bf00      	nop
 80058ec:	e006      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      break;
 80058ee:	bf00      	nop
 80058f0:	e004      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      break;
 80058f2:	bf00      	nop
 80058f4:	e002      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      break;   
 80058f6:	bf00      	nop
 80058f8:	e000      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      break;
 80058fa:	bf00      	nop
    }
  } 
  
  return status; 
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop

0800590c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800590c:	b480      	push	{r7}
 800590e:	b089      	sub	sp, #36	; 0x24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800591a:	2300      	movs	r3, #0
 800591c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800591e:	2300      	movs	r3, #0
 8005920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005922:	2300      	movs	r3, #0
 8005924:	61fb      	str	r3, [r7, #28]
 8005926:	e165      	b.n	8005bf4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005928:	2201      	movs	r2, #1
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	4013      	ands	r3, r2
 800593a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	429a      	cmp	r2, r3
 8005942:	f040 8154 	bne.w	8005bee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	2b01      	cmp	r3, #1
 8005950:	d005      	beq.n	800595e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800595a:	2b02      	cmp	r3, #2
 800595c:	d130      	bne.n	80059c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	2203      	movs	r2, #3
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	43db      	mvns	r3, r3
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	4013      	ands	r3, r2
 8005974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	fa02 f303 	lsl.w	r3, r2, r3
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	4313      	orrs	r3, r2
 8005986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005994:	2201      	movs	r2, #1
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	43db      	mvns	r3, r3
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	4013      	ands	r3, r2
 80059a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	091b      	lsrs	r3, r3, #4
 80059aa:	f003 0201 	and.w	r2, r3, #1
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	fa02 f303 	lsl.w	r3, r2, r3
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d017      	beq.n	80059fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	2203      	movs	r2, #3
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	43db      	mvns	r3, r3
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	4013      	ands	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d123      	bne.n	8005a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	08da      	lsrs	r2, r3, #3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3208      	adds	r2, #8
 8005a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	220f      	movs	r2, #15
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	43db      	mvns	r3, r3
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	08da      	lsrs	r2, r3, #3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3208      	adds	r2, #8
 8005a4a:	69b9      	ldr	r1, [r7, #24]
 8005a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	2203      	movs	r2, #3
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	43db      	mvns	r3, r3
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	4013      	ands	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f003 0203 	and.w	r2, r3, #3
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	fa02 f303 	lsl.w	r3, r2, r3
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 80ae 	beq.w	8005bee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a92:	2300      	movs	r3, #0
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	4b5d      	ldr	r3, [pc, #372]	; (8005c0c <HAL_GPIO_Init+0x300>)
 8005a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a9a:	4a5c      	ldr	r2, [pc, #368]	; (8005c0c <HAL_GPIO_Init+0x300>)
 8005a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8005aa2:	4b5a      	ldr	r3, [pc, #360]	; (8005c0c <HAL_GPIO_Init+0x300>)
 8005aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005aae:	4a58      	ldr	r2, [pc, #352]	; (8005c10 <HAL_GPIO_Init+0x304>)
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	089b      	lsrs	r3, r3, #2
 8005ab4:	3302      	adds	r3, #2
 8005ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	220f      	movs	r2, #15
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	43db      	mvns	r3, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a4f      	ldr	r2, [pc, #316]	; (8005c14 <HAL_GPIO_Init+0x308>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d025      	beq.n	8005b26 <HAL_GPIO_Init+0x21a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a4e      	ldr	r2, [pc, #312]	; (8005c18 <HAL_GPIO_Init+0x30c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d01f      	beq.n	8005b22 <HAL_GPIO_Init+0x216>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a4d      	ldr	r2, [pc, #308]	; (8005c1c <HAL_GPIO_Init+0x310>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d019      	beq.n	8005b1e <HAL_GPIO_Init+0x212>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a4c      	ldr	r2, [pc, #304]	; (8005c20 <HAL_GPIO_Init+0x314>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d013      	beq.n	8005b1a <HAL_GPIO_Init+0x20e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a4b      	ldr	r2, [pc, #300]	; (8005c24 <HAL_GPIO_Init+0x318>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00d      	beq.n	8005b16 <HAL_GPIO_Init+0x20a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a4a      	ldr	r2, [pc, #296]	; (8005c28 <HAL_GPIO_Init+0x31c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d007      	beq.n	8005b12 <HAL_GPIO_Init+0x206>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a49      	ldr	r2, [pc, #292]	; (8005c2c <HAL_GPIO_Init+0x320>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d101      	bne.n	8005b0e <HAL_GPIO_Init+0x202>
 8005b0a:	2306      	movs	r3, #6
 8005b0c:	e00c      	b.n	8005b28 <HAL_GPIO_Init+0x21c>
 8005b0e:	2307      	movs	r3, #7
 8005b10:	e00a      	b.n	8005b28 <HAL_GPIO_Init+0x21c>
 8005b12:	2305      	movs	r3, #5
 8005b14:	e008      	b.n	8005b28 <HAL_GPIO_Init+0x21c>
 8005b16:	2304      	movs	r3, #4
 8005b18:	e006      	b.n	8005b28 <HAL_GPIO_Init+0x21c>
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e004      	b.n	8005b28 <HAL_GPIO_Init+0x21c>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e002      	b.n	8005b28 <HAL_GPIO_Init+0x21c>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e000      	b.n	8005b28 <HAL_GPIO_Init+0x21c>
 8005b26:	2300      	movs	r3, #0
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	f002 0203 	and.w	r2, r2, #3
 8005b2e:	0092      	lsls	r2, r2, #2
 8005b30:	4093      	lsls	r3, r2
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b38:	4935      	ldr	r1, [pc, #212]	; (8005c10 <HAL_GPIO_Init+0x304>)
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	089b      	lsrs	r3, r3, #2
 8005b3e:	3302      	adds	r3, #2
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b46:	4b3a      	ldr	r3, [pc, #232]	; (8005c30 <HAL_GPIO_Init+0x324>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	4013      	ands	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b6a:	4a31      	ldr	r2, [pc, #196]	; (8005c30 <HAL_GPIO_Init+0x324>)
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005b70:	4b2f      	ldr	r3, [pc, #188]	; (8005c30 <HAL_GPIO_Init+0x324>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b94:	4a26      	ldr	r2, [pc, #152]	; (8005c30 <HAL_GPIO_Init+0x324>)
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b9a:	4b25      	ldr	r3, [pc, #148]	; (8005c30 <HAL_GPIO_Init+0x324>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bbe:	4a1c      	ldr	r2, [pc, #112]	; (8005c30 <HAL_GPIO_Init+0x324>)
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bc4:	4b1a      	ldr	r3, [pc, #104]	; (8005c30 <HAL_GPIO_Init+0x324>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005be8:	4a11      	ldr	r2, [pc, #68]	; (8005c30 <HAL_GPIO_Init+0x324>)
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	61fb      	str	r3, [r7, #28]
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	f67f ae96 	bls.w	8005928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005bfc:	bf00      	nop
 8005bfe:	bf00      	nop
 8005c00:	3724      	adds	r7, #36	; 0x24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40023800 	.word	0x40023800
 8005c10:	40013800 	.word	0x40013800
 8005c14:	40020000 	.word	0x40020000
 8005c18:	40020400 	.word	0x40020400
 8005c1c:	40020800 	.word	0x40020800
 8005c20:	40020c00 	.word	0x40020c00
 8005c24:	40021000 	.word	0x40021000
 8005c28:	40021400 	.word	0x40021400
 8005c2c:	40021800 	.word	0x40021800
 8005c30:	40013c00 	.word	0x40013c00

08005c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	807b      	strh	r3, [r7, #2]
 8005c40:	4613      	mov	r3, r2
 8005c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c44:	787b      	ldrb	r3, [r7, #1]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c4a:	887a      	ldrh	r2, [r7, #2]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c50:	e003      	b.n	8005c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c52:	887b      	ldrh	r3, [r7, #2]
 8005c54:	041a      	lsls	r2, r3, #16
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	619a      	str	r2, [r3, #24]
}
 8005c5a:	bf00      	nop
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
	...

08005c68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005c72:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c74:	695a      	ldr	r2, [r3, #20]
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d006      	beq.n	8005c8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c7e:	4a05      	ldr	r2, [pc, #20]	; (8005c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c80:	88fb      	ldrh	r3, [r7, #6]
 8005c82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c84:	88fb      	ldrh	r3, [r7, #6]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fd feb2 	bl	80039f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c8c:	bf00      	nop
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40013c00 	.word	0x40013c00

08005c98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e12b      	b.n	8005f02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fd fabe 	bl	8003240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2224      	movs	r2, #36	; 0x24
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0201 	bic.w	r2, r2, #1
 8005cda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005cfc:	f001 f854 	bl	8006da8 <HAL_RCC_GetPCLK1Freq>
 8005d00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	4a81      	ldr	r2, [pc, #516]	; (8005f0c <HAL_I2C_Init+0x274>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d807      	bhi.n	8005d1c <HAL_I2C_Init+0x84>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4a80      	ldr	r2, [pc, #512]	; (8005f10 <HAL_I2C_Init+0x278>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	bf94      	ite	ls
 8005d14:	2301      	movls	r3, #1
 8005d16:	2300      	movhi	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	e006      	b.n	8005d2a <HAL_I2C_Init+0x92>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4a7d      	ldr	r2, [pc, #500]	; (8005f14 <HAL_I2C_Init+0x27c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	bf94      	ite	ls
 8005d24:	2301      	movls	r3, #1
 8005d26:	2300      	movhi	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e0e7      	b.n	8005f02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4a78      	ldr	r2, [pc, #480]	; (8005f18 <HAL_I2C_Init+0x280>)
 8005d36:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3a:	0c9b      	lsrs	r3, r3, #18
 8005d3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	4a6a      	ldr	r2, [pc, #424]	; (8005f0c <HAL_I2C_Init+0x274>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d802      	bhi.n	8005d6c <HAL_I2C_Init+0xd4>
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	e009      	b.n	8005d80 <HAL_I2C_Init+0xe8>
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d72:	fb02 f303 	mul.w	r3, r2, r3
 8005d76:	4a69      	ldr	r2, [pc, #420]	; (8005f1c <HAL_I2C_Init+0x284>)
 8005d78:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7c:	099b      	lsrs	r3, r3, #6
 8005d7e:	3301      	adds	r3, #1
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	430b      	orrs	r3, r1
 8005d86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	495c      	ldr	r1, [pc, #368]	; (8005f0c <HAL_I2C_Init+0x274>)
 8005d9c:	428b      	cmp	r3, r1
 8005d9e:	d819      	bhi.n	8005dd4 <HAL_I2C_Init+0x13c>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	1e59      	subs	r1, r3, #1
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dae:	1c59      	adds	r1, r3, #1
 8005db0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005db4:	400b      	ands	r3, r1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <HAL_I2C_Init+0x138>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1e59      	subs	r1, r3, #1
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dc8:	3301      	adds	r3, #1
 8005dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dce:	e051      	b.n	8005e74 <HAL_I2C_Init+0x1dc>
 8005dd0:	2304      	movs	r3, #4
 8005dd2:	e04f      	b.n	8005e74 <HAL_I2C_Init+0x1dc>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d111      	bne.n	8005e00 <HAL_I2C_Init+0x168>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	1e58      	subs	r0, r3, #1
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6859      	ldr	r1, [r3, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	005b      	lsls	r3, r3, #1
 8005de8:	440b      	add	r3, r1
 8005dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dee:	3301      	adds	r3, #1
 8005df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	bf0c      	ite	eq
 8005df8:	2301      	moveq	r3, #1
 8005dfa:	2300      	movne	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	e012      	b.n	8005e26 <HAL_I2C_Init+0x18e>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	1e58      	subs	r0, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6859      	ldr	r1, [r3, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	0099      	lsls	r1, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e16:	3301      	adds	r3, #1
 8005e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	bf0c      	ite	eq
 8005e20:	2301      	moveq	r3, #1
 8005e22:	2300      	movne	r3, #0
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <HAL_I2C_Init+0x196>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e022      	b.n	8005e74 <HAL_I2C_Init+0x1dc>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10e      	bne.n	8005e54 <HAL_I2C_Init+0x1bc>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	1e58      	subs	r0, r3, #1
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6859      	ldr	r1, [r3, #4]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	440b      	add	r3, r1
 8005e44:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e48:	3301      	adds	r3, #1
 8005e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e52:	e00f      	b.n	8005e74 <HAL_I2C_Init+0x1dc>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	1e58      	subs	r0, r3, #1
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6859      	ldr	r1, [r3, #4]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	440b      	add	r3, r1
 8005e62:	0099      	lsls	r1, r3, #2
 8005e64:	440b      	add	r3, r1
 8005e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	6809      	ldr	r1, [r1, #0]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69da      	ldr	r2, [r3, #28]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ea2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	6911      	ldr	r1, [r2, #16]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	68d2      	ldr	r2, [r2, #12]
 8005eae:	4311      	orrs	r1, r2
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6812      	ldr	r2, [r2, #0]
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695a      	ldr	r2, [r3, #20]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	000186a0 	.word	0x000186a0
 8005f10:	001e847f 	.word	0x001e847f
 8005f14:	003d08ff 	.word	0x003d08ff
 8005f18:	431bde83 	.word	0x431bde83
 8005f1c:	10624dd3 	.word	0x10624dd3

08005f20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b088      	sub	sp, #32
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	607a      	str	r2, [r7, #4]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	817b      	strh	r3, [r7, #10]
 8005f30:	4613      	mov	r3, r2
 8005f32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f34:	f7fe fb28 	bl	8004588 <HAL_GetTick>
 8005f38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	f040 80e0 	bne.w	8006108 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	2319      	movs	r3, #25
 8005f4e:	2201      	movs	r2, #1
 8005f50:	4970      	ldr	r1, [pc, #448]	; (8006114 <HAL_I2C_Master_Transmit+0x1f4>)
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 fc58 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e0d3      	b.n	800610a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_I2C_Master_Transmit+0x50>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e0cc      	b.n	800610a <HAL_I2C_Master_Transmit+0x1ea>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d007      	beq.n	8005f96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f042 0201 	orr.w	r2, r2, #1
 8005f94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fa4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2221      	movs	r2, #33	; 0x21
 8005faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2210      	movs	r2, #16
 8005fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	893a      	ldrh	r2, [r7, #8]
 8005fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4a50      	ldr	r2, [pc, #320]	; (8006118 <HAL_I2C_Master_Transmit+0x1f8>)
 8005fd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005fd8:	8979      	ldrh	r1, [r7, #10]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	6a3a      	ldr	r2, [r7, #32]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 fac2 	bl	8006568 <I2C_MasterRequestWrite>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e08d      	b.n	800610a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fee:	2300      	movs	r3, #0
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006004:	e066      	b.n	80060d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	6a39      	ldr	r1, [r7, #32]
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 fcd2 	bl	80069b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00d      	beq.n	8006032 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	2b04      	cmp	r3, #4
 800601c:	d107      	bne.n	800602e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800602c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e06b      	b.n	800610a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	781a      	ldrb	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	1c5a      	adds	r2, r3, #1
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604c:	b29b      	uxth	r3, r3
 800604e:	3b01      	subs	r3, #1
 8006050:	b29a      	uxth	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605a:	3b01      	subs	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b04      	cmp	r3, #4
 800606e:	d11b      	bne.n	80060a8 <HAL_I2C_Master_Transmit+0x188>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006074:	2b00      	cmp	r3, #0
 8006076:	d017      	beq.n	80060a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	781a      	ldrb	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	6a39      	ldr	r1, [r7, #32]
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 fcc2 	bl	8006a36 <I2C_WaitOnBTFFlagUntilTimeout>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00d      	beq.n	80060d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	2b04      	cmp	r3, #4
 80060be:	d107      	bne.n	80060d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e01a      	b.n	800610a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d194      	bne.n	8006006 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	e000      	b.n	800610a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006108:	2302      	movs	r3, #2
  }
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	00100002 	.word	0x00100002
 8006118:	ffff0000 	.word	0xffff0000

0800611c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08c      	sub	sp, #48	; 0x30
 8006120:	af02      	add	r7, sp, #8
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	607a      	str	r2, [r7, #4]
 8006126:	461a      	mov	r2, r3
 8006128:	460b      	mov	r3, r1
 800612a:	817b      	strh	r3, [r7, #10]
 800612c:	4613      	mov	r3, r2
 800612e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006130:	f7fe fa2a 	bl	8004588 <HAL_GetTick>
 8006134:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b20      	cmp	r3, #32
 8006140:	f040 820b 	bne.w	800655a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	2319      	movs	r3, #25
 800614a:	2201      	movs	r2, #1
 800614c:	497c      	ldr	r1, [pc, #496]	; (8006340 <HAL_I2C_Master_Receive+0x224>)
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 fb5a 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800615a:	2302      	movs	r3, #2
 800615c:	e1fe      	b.n	800655c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_I2C_Master_Receive+0x50>
 8006168:	2302      	movs	r3, #2
 800616a:	e1f7      	b.n	800655c <HAL_I2C_Master_Receive+0x440>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b01      	cmp	r3, #1
 8006180:	d007      	beq.n	8006192 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 0201 	orr.w	r2, r2, #1
 8006190:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2222      	movs	r2, #34	; 0x22
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2210      	movs	r2, #16
 80061ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	893a      	ldrh	r2, [r7, #8]
 80061c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4a5c      	ldr	r2, [pc, #368]	; (8006344 <HAL_I2C_Master_Receive+0x228>)
 80061d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80061d4:	8979      	ldrh	r1, [r7, #10]
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 fa46 	bl	800666c <I2C_MasterRequestRead>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e1b8      	b.n	800655c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d113      	bne.n	800621a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061f2:	2300      	movs	r3, #0
 80061f4:	623b      	str	r3, [r7, #32]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	623b      	str	r3, [r7, #32]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	623b      	str	r3, [r7, #32]
 8006206:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	e18c      	b.n	8006534 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800621e:	2b01      	cmp	r3, #1
 8006220:	d11b      	bne.n	800625a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006230:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006232:	2300      	movs	r3, #0
 8006234:	61fb      	str	r3, [r7, #28]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	61fb      	str	r3, [r7, #28]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	61fb      	str	r3, [r7, #28]
 8006246:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	e16c      	b.n	8006534 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800625e:	2b02      	cmp	r3, #2
 8006260:	d11b      	bne.n	800629a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006270:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006280:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006282:	2300      	movs	r3, #0
 8006284:	61bb      	str	r3, [r7, #24]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	61bb      	str	r3, [r7, #24]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	61bb      	str	r3, [r7, #24]
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	e14c      	b.n	8006534 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062aa:	2300      	movs	r3, #0
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	617b      	str	r3, [r7, #20]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80062c0:	e138      	b.n	8006534 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	f200 80f1 	bhi.w	80064ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d123      	bne.n	800631c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 fbed 	bl	8006ab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e139      	b.n	800655c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	691a      	ldr	r2, [r3, #16]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	1c5a      	adds	r2, r3, #1
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006304:	3b01      	subs	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006310:	b29b      	uxth	r3, r3
 8006312:	3b01      	subs	r3, #1
 8006314:	b29a      	uxth	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	855a      	strh	r2, [r3, #42]	; 0x2a
 800631a:	e10b      	b.n	8006534 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006320:	2b02      	cmp	r3, #2
 8006322:	d14e      	bne.n	80063c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	2200      	movs	r2, #0
 800632c:	4906      	ldr	r1, [pc, #24]	; (8006348 <HAL_I2C_Master_Receive+0x22c>)
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fa6a 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d008      	beq.n	800634c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e10e      	b.n	800655c <HAL_I2C_Master_Receive+0x440>
 800633e:	bf00      	nop
 8006340:	00100002 	.word	0x00100002
 8006344:	ffff0000 	.word	0xffff0000
 8006348:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800635a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691a      	ldr	r2, [r3, #16]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006384:	b29b      	uxth	r3, r3
 8006386:	3b01      	subs	r3, #1
 8006388:	b29a      	uxth	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063c0:	e0b8      	b.n	8006534 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	2200      	movs	r2, #0
 80063ca:	4966      	ldr	r1, [pc, #408]	; (8006564 <HAL_I2C_Master_Receive+0x448>)
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 fa1b 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e0bf      	b.n	800655c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29a      	uxth	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	2200      	movs	r2, #0
 8006426:	494f      	ldr	r1, [pc, #316]	; (8006564 <HAL_I2C_Master_Receive+0x448>)
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f9ed 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e091      	b.n	800655c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006446:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006464:	3b01      	subs	r3, #1
 8006466:	b29a      	uxth	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	b29a      	uxth	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006496:	3b01      	subs	r3, #1
 8006498:	b29a      	uxth	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064ac:	e042      	b.n	8006534 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 fb00 	bl	8006ab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e04c      	b.n	800655c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	691a      	ldr	r2, [r3, #16]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	f003 0304 	and.w	r3, r3, #4
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d118      	bne.n	8006534 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691a      	ldr	r2, [r3, #16]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652a:	b29b      	uxth	r3, r3
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006538:	2b00      	cmp	r3, #0
 800653a:	f47f aec2 	bne.w	80062c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	e000      	b.n	800655c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800655a:	2302      	movs	r3, #2
  }
}
 800655c:	4618      	mov	r0, r3
 800655e:	3728      	adds	r7, #40	; 0x28
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	00010004 	.word	0x00010004

08006568 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af02      	add	r7, sp, #8
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	607a      	str	r2, [r7, #4]
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	460b      	mov	r3, r1
 8006576:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b08      	cmp	r3, #8
 8006582:	d006      	beq.n	8006592 <I2C_MasterRequestWrite+0x2a>
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d003      	beq.n	8006592 <I2C_MasterRequestWrite+0x2a>
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006590:	d108      	bne.n	80065a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	e00b      	b.n	80065bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a8:	2b12      	cmp	r3, #18
 80065aa:	d107      	bne.n	80065bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 f91d 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00d      	beq.n	80065f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e2:	d103      	bne.n	80065ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e035      	b.n	800665c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065f8:	d108      	bne.n	800660c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065fa:	897b      	ldrh	r3, [r7, #10]
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	461a      	mov	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006608:	611a      	str	r2, [r3, #16]
 800660a:	e01b      	b.n	8006644 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800660c:	897b      	ldrh	r3, [r7, #10]
 800660e:	11db      	asrs	r3, r3, #7
 8006610:	b2db      	uxtb	r3, r3
 8006612:	f003 0306 	and.w	r3, r3, #6
 8006616:	b2db      	uxtb	r3, r3
 8006618:	f063 030f 	orn	r3, r3, #15
 800661c:	b2da      	uxtb	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	490e      	ldr	r1, [pc, #56]	; (8006664 <I2C_MasterRequestWrite+0xfc>)
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 f943 	bl	80068b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e010      	b.n	800665c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800663a:	897b      	ldrh	r3, [r7, #10]
 800663c:	b2da      	uxtb	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	4907      	ldr	r1, [pc, #28]	; (8006668 <I2C_MasterRequestWrite+0x100>)
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 f933 	bl	80068b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e000      	b.n	800665c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	00010008 	.word	0x00010008
 8006668:	00010002 	.word	0x00010002

0800666c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b088      	sub	sp, #32
 8006670:	af02      	add	r7, sp, #8
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	607a      	str	r2, [r7, #4]
 8006676:	603b      	str	r3, [r7, #0]
 8006678:	460b      	mov	r3, r1
 800667a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006680:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006690:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	2b08      	cmp	r3, #8
 8006696:	d006      	beq.n	80066a6 <I2C_MasterRequestRead+0x3a>
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d003      	beq.n	80066a6 <I2C_MasterRequestRead+0x3a>
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066a4:	d108      	bne.n	80066b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	e00b      	b.n	80066d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	2b11      	cmp	r3, #17
 80066be:	d107      	bne.n	80066d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 f893 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00d      	beq.n	8006704 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066f6:	d103      	bne.n	8006700 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e079      	b.n	80067f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800670c:	d108      	bne.n	8006720 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800670e:	897b      	ldrh	r3, [r7, #10]
 8006710:	b2db      	uxtb	r3, r3
 8006712:	f043 0301 	orr.w	r3, r3, #1
 8006716:	b2da      	uxtb	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	611a      	str	r2, [r3, #16]
 800671e:	e05f      	b.n	80067e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006720:	897b      	ldrh	r3, [r7, #10]
 8006722:	11db      	asrs	r3, r3, #7
 8006724:	b2db      	uxtb	r3, r3
 8006726:	f003 0306 	and.w	r3, r3, #6
 800672a:	b2db      	uxtb	r3, r3
 800672c:	f063 030f 	orn	r3, r3, #15
 8006730:	b2da      	uxtb	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	4930      	ldr	r1, [pc, #192]	; (8006800 <I2C_MasterRequestRead+0x194>)
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 f8b9 	bl	80068b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e054      	b.n	80067f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800674e:	897b      	ldrh	r3, [r7, #10]
 8006750:	b2da      	uxtb	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	4929      	ldr	r1, [pc, #164]	; (8006804 <I2C_MasterRequestRead+0x198>)
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 f8a9 	bl	80068b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e044      	b.n	80067f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800676e:	2300      	movs	r3, #0
 8006770:	613b      	str	r3, [r7, #16]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	613b      	str	r3, [r7, #16]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	613b      	str	r3, [r7, #16]
 8006782:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006792:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f831 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00d      	beq.n	80067c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ba:	d103      	bne.n	80067c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e017      	b.n	80067f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80067c8:	897b      	ldrh	r3, [r7, #10]
 80067ca:	11db      	asrs	r3, r3, #7
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	f003 0306 	and.w	r3, r3, #6
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	f063 030e 	orn	r3, r3, #14
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	4907      	ldr	r1, [pc, #28]	; (8006804 <I2C_MasterRequestRead+0x198>)
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f865 	bl	80068b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e000      	b.n	80067f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	00010008 	.word	0x00010008
 8006804:	00010002 	.word	0x00010002

08006808 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	603b      	str	r3, [r7, #0]
 8006814:	4613      	mov	r3, r2
 8006816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006818:	e025      	b.n	8006866 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006820:	d021      	beq.n	8006866 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006822:	f7fd feb1 	bl	8004588 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d302      	bcc.n	8006838 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d116      	bne.n	8006866 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2220      	movs	r2, #32
 8006842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	f043 0220 	orr.w	r2, r3, #32
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e023      	b.n	80068ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	0c1b      	lsrs	r3, r3, #16
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b01      	cmp	r3, #1
 800686e:	d10d      	bne.n	800688c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	43da      	mvns	r2, r3
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	4013      	ands	r3, r2
 800687c:	b29b      	uxth	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	bf0c      	ite	eq
 8006882:	2301      	moveq	r3, #1
 8006884:	2300      	movne	r3, #0
 8006886:	b2db      	uxtb	r3, r3
 8006888:	461a      	mov	r2, r3
 800688a:	e00c      	b.n	80068a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	43da      	mvns	r2, r3
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	4013      	ands	r3, r2
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	bf0c      	ite	eq
 800689e:	2301      	moveq	r3, #1
 80068a0:	2300      	movne	r3, #0
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	79fb      	ldrb	r3, [r7, #7]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d0b6      	beq.n	800681a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
 80068c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068c4:	e051      	b.n	800696a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d4:	d123      	bne.n	800691e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	f043 0204 	orr.w	r2, r3, #4
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e046      	b.n	80069ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006924:	d021      	beq.n	800696a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006926:	f7fd fe2f 	bl	8004588 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	429a      	cmp	r2, r3
 8006934:	d302      	bcc.n	800693c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d116      	bne.n	800696a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2220      	movs	r2, #32
 8006946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	f043 0220 	orr.w	r2, r3, #32
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e020      	b.n	80069ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	0c1b      	lsrs	r3, r3, #16
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b01      	cmp	r3, #1
 8006972:	d10c      	bne.n	800698e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	43da      	mvns	r2, r3
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	4013      	ands	r3, r2
 8006980:	b29b      	uxth	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	bf14      	ite	ne
 8006986:	2301      	movne	r3, #1
 8006988:	2300      	moveq	r3, #0
 800698a:	b2db      	uxtb	r3, r3
 800698c:	e00b      	b.n	80069a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	43da      	mvns	r2, r3
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	4013      	ands	r3, r2
 800699a:	b29b      	uxth	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	bf14      	ite	ne
 80069a0:	2301      	movne	r3, #1
 80069a2:	2300      	moveq	r3, #0
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d18d      	bne.n	80068c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069c0:	e02d      	b.n	8006a1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 f8ce 	bl	8006b64 <I2C_IsAcknowledgeFailed>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e02d      	b.n	8006a2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d8:	d021      	beq.n	8006a1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069da:	f7fd fdd5 	bl	8004588 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d302      	bcc.n	80069f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d116      	bne.n	8006a1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	f043 0220 	orr.w	r2, r3, #32
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e007      	b.n	8006a2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a28:	2b80      	cmp	r3, #128	; 0x80
 8006a2a:	d1ca      	bne.n	80069c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a42:	e02d      	b.n	8006aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f88d 	bl	8006b64 <I2C_IsAcknowledgeFailed>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e02d      	b.n	8006ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5a:	d021      	beq.n	8006aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a5c:	f7fd fd94 	bl	8004588 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d302      	bcc.n	8006a72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d116      	bne.n	8006aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8c:	f043 0220 	orr.w	r2, r3, #32
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e007      	b.n	8006ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	f003 0304 	and.w	r3, r3, #4
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	d1ca      	bne.n	8006a44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ac4:	e042      	b.n	8006b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	f003 0310 	and.w	r3, r3, #16
 8006ad0:	2b10      	cmp	r3, #16
 8006ad2:	d119      	bne.n	8006b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f06f 0210 	mvn.w	r2, #16
 8006adc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e029      	b.n	8006b5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b08:	f7fd fd3e 	bl	8004588 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d302      	bcc.n	8006b1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d116      	bne.n	8006b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b38:	f043 0220 	orr.w	r2, r3, #32
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e007      	b.n	8006b5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b56:	2b40      	cmp	r3, #64	; 0x40
 8006b58:	d1b5      	bne.n	8006ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b7a:	d11b      	bne.n	8006bb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	f043 0204 	orr.w	r2, r3, #4
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e000      	b.n	8006bb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
	...

08006bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e0cc      	b.n	8006d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bd8:	4b68      	ldr	r3, [pc, #416]	; (8006d7c <HAL_RCC_ClockConfig+0x1b8>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 030f 	and.w	r3, r3, #15
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d90c      	bls.n	8006c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006be6:	4b65      	ldr	r3, [pc, #404]	; (8006d7c <HAL_RCC_ClockConfig+0x1b8>)
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bee:	4b63      	ldr	r3, [pc, #396]	; (8006d7c <HAL_RCC_ClockConfig+0x1b8>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d001      	beq.n	8006c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e0b8      	b.n	8006d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d020      	beq.n	8006c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c18:	4b59      	ldr	r3, [pc, #356]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	4a58      	ldr	r2, [pc, #352]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0308 	and.w	r3, r3, #8
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c30:	4b53      	ldr	r3, [pc, #332]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	4a52      	ldr	r2, [pc, #328]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006c36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c3c:	4b50      	ldr	r3, [pc, #320]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	494d      	ldr	r1, [pc, #308]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d044      	beq.n	8006ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d107      	bne.n	8006c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c62:	4b47      	ldr	r3, [pc, #284]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d119      	bne.n	8006ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e07f      	b.n	8006d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d003      	beq.n	8006c82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d107      	bne.n	8006c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c82:	4b3f      	ldr	r3, [pc, #252]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d109      	bne.n	8006ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e06f      	b.n	8006d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c92:	4b3b      	ldr	r3, [pc, #236]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e067      	b.n	8006d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ca2:	4b37      	ldr	r3, [pc, #220]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f023 0203 	bic.w	r2, r3, #3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	4934      	ldr	r1, [pc, #208]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cb4:	f7fd fc68 	bl	8004588 <HAL_GetTick>
 8006cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cba:	e00a      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cbc:	f7fd fc64 	bl	8004588 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e04f      	b.n	8006d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cd2:	4b2b      	ldr	r3, [pc, #172]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f003 020c 	and.w	r2, r3, #12
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d1eb      	bne.n	8006cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ce4:	4b25      	ldr	r3, [pc, #148]	; (8006d7c <HAL_RCC_ClockConfig+0x1b8>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 030f 	and.w	r3, r3, #15
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d20c      	bcs.n	8006d0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cf2:	4b22      	ldr	r3, [pc, #136]	; (8006d7c <HAL_RCC_ClockConfig+0x1b8>)
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cfa:	4b20      	ldr	r3, [pc, #128]	; (8006d7c <HAL_RCC_ClockConfig+0x1b8>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d001      	beq.n	8006d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e032      	b.n	8006d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d008      	beq.n	8006d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d18:	4b19      	ldr	r3, [pc, #100]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	4916      	ldr	r1, [pc, #88]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0308 	and.w	r3, r3, #8
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d009      	beq.n	8006d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d36:	4b12      	ldr	r3, [pc, #72]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	490e      	ldr	r1, [pc, #56]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d4a:	f000 f887 	bl	8006e5c <HAL_RCC_GetSysClockFreq>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	4b0b      	ldr	r3, [pc, #44]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	091b      	lsrs	r3, r3, #4
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	490a      	ldr	r1, [pc, #40]	; (8006d84 <HAL_RCC_ClockConfig+0x1c0>)
 8006d5c:	5ccb      	ldrb	r3, [r1, r3]
 8006d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d62:	4a09      	ldr	r2, [pc, #36]	; (8006d88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d66:	4b09      	ldr	r3, [pc, #36]	; (8006d8c <HAL_RCC_ClockConfig+0x1c8>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fc fed8 	bl	8003b20 <HAL_InitTick>

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	40023c00 	.word	0x40023c00
 8006d80:	40023800 	.word	0x40023800
 8006d84:	08016e4c 	.word	0x08016e4c
 8006d88:	20000000 	.word	0x20000000
 8006d8c:	20000004 	.word	0x20000004

08006d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d94:	4b03      	ldr	r3, [pc, #12]	; (8006da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d96:	681b      	ldr	r3, [r3, #0]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	20000000 	.word	0x20000000

08006da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006dac:	f7ff fff0 	bl	8006d90 <HAL_RCC_GetHCLKFreq>
 8006db0:	4602      	mov	r2, r0
 8006db2:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	0a9b      	lsrs	r3, r3, #10
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	4903      	ldr	r1, [pc, #12]	; (8006dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dbe:	5ccb      	ldrb	r3, [r1, r3]
 8006dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	40023800 	.word	0x40023800
 8006dcc:	08016e5c 	.word	0x08016e5c

08006dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006dd4:	f7ff ffdc 	bl	8006d90 <HAL_RCC_GetHCLKFreq>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	0b5b      	lsrs	r3, r3, #13
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	4903      	ldr	r1, [pc, #12]	; (8006df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006de6:	5ccb      	ldrb	r3, [r1, r3]
 8006de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	40023800 	.word	0x40023800
 8006df4:	08016e5c 	.word	0x08016e5c

08006df8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	220f      	movs	r2, #15
 8006e06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e08:	4b12      	ldr	r3, [pc, #72]	; (8006e54 <HAL_RCC_GetClockConfig+0x5c>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 0203 	and.w	r2, r3, #3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006e14:	4b0f      	ldr	r3, [pc, #60]	; (8006e54 <HAL_RCC_GetClockConfig+0x5c>)
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006e20:	4b0c      	ldr	r3, [pc, #48]	; (8006e54 <HAL_RCC_GetClockConfig+0x5c>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006e2c:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <HAL_RCC_GetClockConfig+0x5c>)
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	08db      	lsrs	r3, r3, #3
 8006e32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e3a:	4b07      	ldr	r3, [pc, #28]	; (8006e58 <HAL_RCC_GetClockConfig+0x60>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 020f 	and.w	r2, r3, #15
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	601a      	str	r2, [r3, #0]
}
 8006e46:	bf00      	nop
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	40023800 	.word	0x40023800
 8006e58:	40023c00 	.word	0x40023c00

08006e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e60:	b088      	sub	sp, #32
 8006e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e78:	4bce      	ldr	r3, [pc, #824]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f003 030c 	and.w	r3, r3, #12
 8006e80:	2b0c      	cmp	r3, #12
 8006e82:	f200 818d 	bhi.w	80071a0 <HAL_RCC_GetSysClockFreq+0x344>
 8006e86:	a201      	add	r2, pc, #4	; (adr r2, 8006e8c <HAL_RCC_GetSysClockFreq+0x30>)
 8006e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8c:	08006ec1 	.word	0x08006ec1
 8006e90:	080071a1 	.word	0x080071a1
 8006e94:	080071a1 	.word	0x080071a1
 8006e98:	080071a1 	.word	0x080071a1
 8006e9c:	08006ec7 	.word	0x08006ec7
 8006ea0:	080071a1 	.word	0x080071a1
 8006ea4:	080071a1 	.word	0x080071a1
 8006ea8:	080071a1 	.word	0x080071a1
 8006eac:	08006ecd 	.word	0x08006ecd
 8006eb0:	080071a1 	.word	0x080071a1
 8006eb4:	080071a1 	.word	0x080071a1
 8006eb8:	080071a1 	.word	0x080071a1
 8006ebc:	08007041 	.word	0x08007041
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ec0:	4bbd      	ldr	r3, [pc, #756]	; (80071b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006ec2:	61bb      	str	r3, [r7, #24]
       break;
 8006ec4:	e16f      	b.n	80071a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ec6:	4bbd      	ldr	r3, [pc, #756]	; (80071bc <HAL_RCC_GetSysClockFreq+0x360>)
 8006ec8:	61bb      	str	r3, [r7, #24]
      break;
 8006eca:	e16c      	b.n	80071a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ecc:	4bb9      	ldr	r3, [pc, #740]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ed4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ed6:	4bb7      	ldr	r3, [pc, #732]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d053      	beq.n	8006f8a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ee2:	4bb4      	ldr	r3, [pc, #720]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	099b      	lsrs	r3, r3, #6
 8006ee8:	461a      	mov	r2, r3
 8006eea:	f04f 0300 	mov.w	r3, #0
 8006eee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ef2:	f04f 0100 	mov.w	r1, #0
 8006ef6:	ea02 0400 	and.w	r4, r2, r0
 8006efa:	603c      	str	r4, [r7, #0]
 8006efc:	400b      	ands	r3, r1
 8006efe:	607b      	str	r3, [r7, #4]
 8006f00:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f04:	4620      	mov	r0, r4
 8006f06:	4629      	mov	r1, r5
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	f04f 0300 	mov.w	r3, #0
 8006f10:	014b      	lsls	r3, r1, #5
 8006f12:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f16:	0142      	lsls	r2, r0, #5
 8006f18:	4610      	mov	r0, r2
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4623      	mov	r3, r4
 8006f1e:	1ac0      	subs	r0, r0, r3
 8006f20:	462b      	mov	r3, r5
 8006f22:	eb61 0103 	sbc.w	r1, r1, r3
 8006f26:	f04f 0200 	mov.w	r2, #0
 8006f2a:	f04f 0300 	mov.w	r3, #0
 8006f2e:	018b      	lsls	r3, r1, #6
 8006f30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f34:	0182      	lsls	r2, r0, #6
 8006f36:	1a12      	subs	r2, r2, r0
 8006f38:	eb63 0301 	sbc.w	r3, r3, r1
 8006f3c:	f04f 0000 	mov.w	r0, #0
 8006f40:	f04f 0100 	mov.w	r1, #0
 8006f44:	00d9      	lsls	r1, r3, #3
 8006f46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f4a:	00d0      	lsls	r0, r2, #3
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4621      	mov	r1, r4
 8006f52:	1852      	adds	r2, r2, r1
 8006f54:	4629      	mov	r1, r5
 8006f56:	eb43 0101 	adc.w	r1, r3, r1
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	f04f 0000 	mov.w	r0, #0
 8006f60:	f04f 0100 	mov.w	r1, #0
 8006f64:	0259      	lsls	r1, r3, #9
 8006f66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006f6a:	0250      	lsls	r0, r2, #9
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4610      	mov	r0, r2
 8006f72:	4619      	mov	r1, r3
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	461a      	mov	r2, r3
 8006f78:	f04f 0300 	mov.w	r3, #0
 8006f7c:	f7f9 fea4 	bl	8000cc8 <__aeabi_uldivmod>
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	4613      	mov	r3, r2
 8006f86:	61fb      	str	r3, [r7, #28]
 8006f88:	e04c      	b.n	8007024 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f8a:	4b8a      	ldr	r3, [pc, #552]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	099b      	lsrs	r3, r3, #6
 8006f90:	461a      	mov	r2, r3
 8006f92:	f04f 0300 	mov.w	r3, #0
 8006f96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f9a:	f04f 0100 	mov.w	r1, #0
 8006f9e:	ea02 0a00 	and.w	sl, r2, r0
 8006fa2:	ea03 0b01 	and.w	fp, r3, r1
 8006fa6:	4650      	mov	r0, sl
 8006fa8:	4659      	mov	r1, fp
 8006faa:	f04f 0200 	mov.w	r2, #0
 8006fae:	f04f 0300 	mov.w	r3, #0
 8006fb2:	014b      	lsls	r3, r1, #5
 8006fb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006fb8:	0142      	lsls	r2, r0, #5
 8006fba:	4610      	mov	r0, r2
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	ebb0 000a 	subs.w	r0, r0, sl
 8006fc2:	eb61 010b 	sbc.w	r1, r1, fp
 8006fc6:	f04f 0200 	mov.w	r2, #0
 8006fca:	f04f 0300 	mov.w	r3, #0
 8006fce:	018b      	lsls	r3, r1, #6
 8006fd0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006fd4:	0182      	lsls	r2, r0, #6
 8006fd6:	1a12      	subs	r2, r2, r0
 8006fd8:	eb63 0301 	sbc.w	r3, r3, r1
 8006fdc:	f04f 0000 	mov.w	r0, #0
 8006fe0:	f04f 0100 	mov.w	r1, #0
 8006fe4:	00d9      	lsls	r1, r3, #3
 8006fe6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fea:	00d0      	lsls	r0, r2, #3
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	eb12 020a 	adds.w	r2, r2, sl
 8006ff4:	eb43 030b 	adc.w	r3, r3, fp
 8006ff8:	f04f 0000 	mov.w	r0, #0
 8006ffc:	f04f 0100 	mov.w	r1, #0
 8007000:	0299      	lsls	r1, r3, #10
 8007002:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007006:	0290      	lsls	r0, r2, #10
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4610      	mov	r0, r2
 800700e:	4619      	mov	r1, r3
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	461a      	mov	r2, r3
 8007014:	f04f 0300 	mov.w	r3, #0
 8007018:	f7f9 fe56 	bl	8000cc8 <__aeabi_uldivmod>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	4613      	mov	r3, r2
 8007022:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007024:	4b63      	ldr	r3, [pc, #396]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	0c1b      	lsrs	r3, r3, #16
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	3301      	adds	r3, #1
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8007034:	69fa      	ldr	r2, [r7, #28]
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	fbb2 f3f3 	udiv	r3, r2, r3
 800703c:	61bb      	str	r3, [r7, #24]
      break;
 800703e:	e0b2      	b.n	80071a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007040:	4b5c      	ldr	r3, [pc, #368]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007048:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800704a:	4b5a      	ldr	r3, [pc, #360]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d04d      	beq.n	80070f2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007056:	4b57      	ldr	r3, [pc, #348]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	099b      	lsrs	r3, r3, #6
 800705c:	461a      	mov	r2, r3
 800705e:	f04f 0300 	mov.w	r3, #0
 8007062:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007066:	f04f 0100 	mov.w	r1, #0
 800706a:	ea02 0800 	and.w	r8, r2, r0
 800706e:	ea03 0901 	and.w	r9, r3, r1
 8007072:	4640      	mov	r0, r8
 8007074:	4649      	mov	r1, r9
 8007076:	f04f 0200 	mov.w	r2, #0
 800707a:	f04f 0300 	mov.w	r3, #0
 800707e:	014b      	lsls	r3, r1, #5
 8007080:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007084:	0142      	lsls	r2, r0, #5
 8007086:	4610      	mov	r0, r2
 8007088:	4619      	mov	r1, r3
 800708a:	ebb0 0008 	subs.w	r0, r0, r8
 800708e:	eb61 0109 	sbc.w	r1, r1, r9
 8007092:	f04f 0200 	mov.w	r2, #0
 8007096:	f04f 0300 	mov.w	r3, #0
 800709a:	018b      	lsls	r3, r1, #6
 800709c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80070a0:	0182      	lsls	r2, r0, #6
 80070a2:	1a12      	subs	r2, r2, r0
 80070a4:	eb63 0301 	sbc.w	r3, r3, r1
 80070a8:	f04f 0000 	mov.w	r0, #0
 80070ac:	f04f 0100 	mov.w	r1, #0
 80070b0:	00d9      	lsls	r1, r3, #3
 80070b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070b6:	00d0      	lsls	r0, r2, #3
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	eb12 0208 	adds.w	r2, r2, r8
 80070c0:	eb43 0309 	adc.w	r3, r3, r9
 80070c4:	f04f 0000 	mov.w	r0, #0
 80070c8:	f04f 0100 	mov.w	r1, #0
 80070cc:	0259      	lsls	r1, r3, #9
 80070ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80070d2:	0250      	lsls	r0, r2, #9
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4610      	mov	r0, r2
 80070da:	4619      	mov	r1, r3
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	461a      	mov	r2, r3
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	f7f9 fdf0 	bl	8000cc8 <__aeabi_uldivmod>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4613      	mov	r3, r2
 80070ee:	61fb      	str	r3, [r7, #28]
 80070f0:	e04a      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070f2:	4b30      	ldr	r3, [pc, #192]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x358>)
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	099b      	lsrs	r3, r3, #6
 80070f8:	461a      	mov	r2, r3
 80070fa:	f04f 0300 	mov.w	r3, #0
 80070fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007102:	f04f 0100 	mov.w	r1, #0
 8007106:	ea02 0400 	and.w	r4, r2, r0
 800710a:	ea03 0501 	and.w	r5, r3, r1
 800710e:	4620      	mov	r0, r4
 8007110:	4629      	mov	r1, r5
 8007112:	f04f 0200 	mov.w	r2, #0
 8007116:	f04f 0300 	mov.w	r3, #0
 800711a:	014b      	lsls	r3, r1, #5
 800711c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007120:	0142      	lsls	r2, r0, #5
 8007122:	4610      	mov	r0, r2
 8007124:	4619      	mov	r1, r3
 8007126:	1b00      	subs	r0, r0, r4
 8007128:	eb61 0105 	sbc.w	r1, r1, r5
 800712c:	f04f 0200 	mov.w	r2, #0
 8007130:	f04f 0300 	mov.w	r3, #0
 8007134:	018b      	lsls	r3, r1, #6
 8007136:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800713a:	0182      	lsls	r2, r0, #6
 800713c:	1a12      	subs	r2, r2, r0
 800713e:	eb63 0301 	sbc.w	r3, r3, r1
 8007142:	f04f 0000 	mov.w	r0, #0
 8007146:	f04f 0100 	mov.w	r1, #0
 800714a:	00d9      	lsls	r1, r3, #3
 800714c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007150:	00d0      	lsls	r0, r2, #3
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	1912      	adds	r2, r2, r4
 8007158:	eb45 0303 	adc.w	r3, r5, r3
 800715c:	f04f 0000 	mov.w	r0, #0
 8007160:	f04f 0100 	mov.w	r1, #0
 8007164:	0299      	lsls	r1, r3, #10
 8007166:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800716a:	0290      	lsls	r0, r2, #10
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4610      	mov	r0, r2
 8007172:	4619      	mov	r1, r3
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	461a      	mov	r2, r3
 8007178:	f04f 0300 	mov.w	r3, #0
 800717c:	f7f9 fda4 	bl	8000cc8 <__aeabi_uldivmod>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4613      	mov	r3, r2
 8007186:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007188:	4b0a      	ldr	r3, [pc, #40]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	0f1b      	lsrs	r3, r3, #28
 800718e:	f003 0307 	and.w	r3, r3, #7
 8007192:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8007194:	69fa      	ldr	r2, [r7, #28]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	fbb2 f3f3 	udiv	r3, r2, r3
 800719c:	61bb      	str	r3, [r7, #24]
      break;
 800719e:	e002      	b.n	80071a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80071a2:	61bb      	str	r3, [r7, #24]
      break;
 80071a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071a6:	69bb      	ldr	r3, [r7, #24]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3720      	adds	r7, #32
 80071ac:	46bd      	mov	sp, r7
 80071ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071b2:	bf00      	nop
 80071b4:	40023800 	.word	0x40023800
 80071b8:	00f42400 	.word	0x00f42400
 80071bc:	007a1200 	.word	0x007a1200

080071c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e28d      	b.n	80076ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 8083 	beq.w	80072e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80071e0:	4b94      	ldr	r3, [pc, #592]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f003 030c 	and.w	r3, r3, #12
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d019      	beq.n	8007220 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80071ec:	4b91      	ldr	r3, [pc, #580]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80071f4:	2b08      	cmp	r3, #8
 80071f6:	d106      	bne.n	8007206 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80071f8:	4b8e      	ldr	r3, [pc, #568]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007204:	d00c      	beq.n	8007220 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007206:	4b8b      	ldr	r3, [pc, #556]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800720e:	2b0c      	cmp	r3, #12
 8007210:	d112      	bne.n	8007238 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007212:	4b88      	ldr	r3, [pc, #544]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800721a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800721e:	d10b      	bne.n	8007238 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007220:	4b84      	ldr	r3, [pc, #528]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d05b      	beq.n	80072e4 <HAL_RCC_OscConfig+0x124>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d157      	bne.n	80072e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e25a      	b.n	80076ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007240:	d106      	bne.n	8007250 <HAL_RCC_OscConfig+0x90>
 8007242:	4b7c      	ldr	r3, [pc, #496]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a7b      	ldr	r2, [pc, #492]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	e01d      	b.n	800728c <HAL_RCC_OscConfig+0xcc>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007258:	d10c      	bne.n	8007274 <HAL_RCC_OscConfig+0xb4>
 800725a:	4b76      	ldr	r3, [pc, #472]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a75      	ldr	r2, [pc, #468]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	4b73      	ldr	r3, [pc, #460]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a72      	ldr	r2, [pc, #456]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 800726c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007270:	6013      	str	r3, [r2, #0]
 8007272:	e00b      	b.n	800728c <HAL_RCC_OscConfig+0xcc>
 8007274:	4b6f      	ldr	r3, [pc, #444]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a6e      	ldr	r2, [pc, #440]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 800727a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800727e:	6013      	str	r3, [r2, #0]
 8007280:	4b6c      	ldr	r3, [pc, #432]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a6b      	ldr	r2, [pc, #428]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800728a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d013      	beq.n	80072bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007294:	f7fd f978 	bl	8004588 <HAL_GetTick>
 8007298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800729a:	e008      	b.n	80072ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800729c:	f7fd f974 	bl	8004588 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	2b64      	cmp	r3, #100	; 0x64
 80072a8:	d901      	bls.n	80072ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e21f      	b.n	80076ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072ae:	4b61      	ldr	r3, [pc, #388]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d0f0      	beq.n	800729c <HAL_RCC_OscConfig+0xdc>
 80072ba:	e014      	b.n	80072e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072bc:	f7fd f964 	bl	8004588 <HAL_GetTick>
 80072c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072c2:	e008      	b.n	80072d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072c4:	f7fd f960 	bl	8004588 <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	2b64      	cmp	r3, #100	; 0x64
 80072d0:	d901      	bls.n	80072d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e20b      	b.n	80076ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072d6:	4b57      	ldr	r3, [pc, #348]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1f0      	bne.n	80072c4 <HAL_RCC_OscConfig+0x104>
 80072e2:	e000      	b.n	80072e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d06f      	beq.n	80073d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80072f2:	4b50      	ldr	r3, [pc, #320]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f003 030c 	and.w	r3, r3, #12
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d017      	beq.n	800732e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072fe:	4b4d      	ldr	r3, [pc, #308]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007306:	2b08      	cmp	r3, #8
 8007308:	d105      	bne.n	8007316 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800730a:	4b4a      	ldr	r3, [pc, #296]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00b      	beq.n	800732e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007316:	4b47      	ldr	r3, [pc, #284]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800731e:	2b0c      	cmp	r3, #12
 8007320:	d11c      	bne.n	800735c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007322:	4b44      	ldr	r3, [pc, #272]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d116      	bne.n	800735c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800732e:	4b41      	ldr	r3, [pc, #260]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d005      	beq.n	8007346 <HAL_RCC_OscConfig+0x186>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d001      	beq.n	8007346 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e1d3      	b.n	80076ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007346:	4b3b      	ldr	r3, [pc, #236]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	4937      	ldr	r1, [pc, #220]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007356:	4313      	orrs	r3, r2
 8007358:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800735a:	e03a      	b.n	80073d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d020      	beq.n	80073a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007364:	4b34      	ldr	r3, [pc, #208]	; (8007438 <HAL_RCC_OscConfig+0x278>)
 8007366:	2201      	movs	r2, #1
 8007368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800736a:	f7fd f90d 	bl	8004588 <HAL_GetTick>
 800736e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007370:	e008      	b.n	8007384 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007372:	f7fd f909 	bl	8004588 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d901      	bls.n	8007384 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e1b4      	b.n	80076ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007384:	4b2b      	ldr	r3, [pc, #172]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0f0      	beq.n	8007372 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007390:	4b28      	ldr	r3, [pc, #160]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	00db      	lsls	r3, r3, #3
 800739e:	4925      	ldr	r1, [pc, #148]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	600b      	str	r3, [r1, #0]
 80073a4:	e015      	b.n	80073d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073a6:	4b24      	ldr	r3, [pc, #144]	; (8007438 <HAL_RCC_OscConfig+0x278>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ac:	f7fd f8ec 	bl	8004588 <HAL_GetTick>
 80073b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073b2:	e008      	b.n	80073c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073b4:	f7fd f8e8 	bl	8004588 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d901      	bls.n	80073c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e193      	b.n	80076ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073c6:	4b1b      	ldr	r3, [pc, #108]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1f0      	bne.n	80073b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d036      	beq.n	800744c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d016      	beq.n	8007414 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073e6:	4b15      	ldr	r3, [pc, #84]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 80073e8:	2201      	movs	r2, #1
 80073ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ec:	f7fd f8cc 	bl	8004588 <HAL_GetTick>
 80073f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073f2:	e008      	b.n	8007406 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073f4:	f7fd f8c8 	bl	8004588 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e173      	b.n	80076ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007406:	4b0b      	ldr	r3, [pc, #44]	; (8007434 <HAL_RCC_OscConfig+0x274>)
 8007408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0f0      	beq.n	80073f4 <HAL_RCC_OscConfig+0x234>
 8007412:	e01b      	b.n	800744c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007414:	4b09      	ldr	r3, [pc, #36]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800741a:	f7fd f8b5 	bl	8004588 <HAL_GetTick>
 800741e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007420:	e00e      	b.n	8007440 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007422:	f7fd f8b1 	bl	8004588 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	2b02      	cmp	r3, #2
 800742e:	d907      	bls.n	8007440 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e15c      	b.n	80076ee <HAL_RCC_OscConfig+0x52e>
 8007434:	40023800 	.word	0x40023800
 8007438:	42470000 	.word	0x42470000
 800743c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007440:	4b8a      	ldr	r3, [pc, #552]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 8007442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1ea      	bne.n	8007422 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0304 	and.w	r3, r3, #4
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 8097 	beq.w	8007588 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800745a:	2300      	movs	r3, #0
 800745c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800745e:	4b83      	ldr	r3, [pc, #524]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10f      	bne.n	800748a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800746a:	2300      	movs	r3, #0
 800746c:	60bb      	str	r3, [r7, #8]
 800746e:	4b7f      	ldr	r3, [pc, #508]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	4a7e      	ldr	r2, [pc, #504]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 8007474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007478:	6413      	str	r3, [r2, #64]	; 0x40
 800747a:	4b7c      	ldr	r3, [pc, #496]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 800747c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007482:	60bb      	str	r3, [r7, #8]
 8007484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007486:	2301      	movs	r3, #1
 8007488:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800748a:	4b79      	ldr	r3, [pc, #484]	; (8007670 <HAL_RCC_OscConfig+0x4b0>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007492:	2b00      	cmp	r3, #0
 8007494:	d118      	bne.n	80074c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007496:	4b76      	ldr	r3, [pc, #472]	; (8007670 <HAL_RCC_OscConfig+0x4b0>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a75      	ldr	r2, [pc, #468]	; (8007670 <HAL_RCC_OscConfig+0x4b0>)
 800749c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074a2:	f7fd f871 	bl	8004588 <HAL_GetTick>
 80074a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074a8:	e008      	b.n	80074bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074aa:	f7fd f86d 	bl	8004588 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d901      	bls.n	80074bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e118      	b.n	80076ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074bc:	4b6c      	ldr	r3, [pc, #432]	; (8007670 <HAL_RCC_OscConfig+0x4b0>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0f0      	beq.n	80074aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d106      	bne.n	80074de <HAL_RCC_OscConfig+0x31e>
 80074d0:	4b66      	ldr	r3, [pc, #408]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 80074d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d4:	4a65      	ldr	r2, [pc, #404]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 80074d6:	f043 0301 	orr.w	r3, r3, #1
 80074da:	6713      	str	r3, [r2, #112]	; 0x70
 80074dc:	e01c      	b.n	8007518 <HAL_RCC_OscConfig+0x358>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	2b05      	cmp	r3, #5
 80074e4:	d10c      	bne.n	8007500 <HAL_RCC_OscConfig+0x340>
 80074e6:	4b61      	ldr	r3, [pc, #388]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 80074e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ea:	4a60      	ldr	r2, [pc, #384]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 80074ec:	f043 0304 	orr.w	r3, r3, #4
 80074f0:	6713      	str	r3, [r2, #112]	; 0x70
 80074f2:	4b5e      	ldr	r3, [pc, #376]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 80074f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f6:	4a5d      	ldr	r2, [pc, #372]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 80074f8:	f043 0301 	orr.w	r3, r3, #1
 80074fc:	6713      	str	r3, [r2, #112]	; 0x70
 80074fe:	e00b      	b.n	8007518 <HAL_RCC_OscConfig+0x358>
 8007500:	4b5a      	ldr	r3, [pc, #360]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 8007502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007504:	4a59      	ldr	r2, [pc, #356]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 8007506:	f023 0301 	bic.w	r3, r3, #1
 800750a:	6713      	str	r3, [r2, #112]	; 0x70
 800750c:	4b57      	ldr	r3, [pc, #348]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 800750e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007510:	4a56      	ldr	r2, [pc, #344]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 8007512:	f023 0304 	bic.w	r3, r3, #4
 8007516:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d015      	beq.n	800754c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007520:	f7fd f832 	bl	8004588 <HAL_GetTick>
 8007524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007526:	e00a      	b.n	800753e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007528:	f7fd f82e 	bl	8004588 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	f241 3288 	movw	r2, #5000	; 0x1388
 8007536:	4293      	cmp	r3, r2
 8007538:	d901      	bls.n	800753e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e0d7      	b.n	80076ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800753e:	4b4b      	ldr	r3, [pc, #300]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 8007540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d0ee      	beq.n	8007528 <HAL_RCC_OscConfig+0x368>
 800754a:	e014      	b.n	8007576 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800754c:	f7fd f81c 	bl	8004588 <HAL_GetTick>
 8007550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007552:	e00a      	b.n	800756a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007554:	f7fd f818 	bl	8004588 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007562:	4293      	cmp	r3, r2
 8007564:	d901      	bls.n	800756a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e0c1      	b.n	80076ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800756a:	4b40      	ldr	r3, [pc, #256]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 800756c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1ee      	bne.n	8007554 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007576:	7dfb      	ldrb	r3, [r7, #23]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d105      	bne.n	8007588 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800757c:	4b3b      	ldr	r3, [pc, #236]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	4a3a      	ldr	r2, [pc, #232]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 8007582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007586:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 80ad 	beq.w	80076ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007592:	4b36      	ldr	r3, [pc, #216]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f003 030c 	and.w	r3, r3, #12
 800759a:	2b08      	cmp	r3, #8
 800759c:	d060      	beq.n	8007660 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d145      	bne.n	8007632 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075a6:	4b33      	ldr	r3, [pc, #204]	; (8007674 <HAL_RCC_OscConfig+0x4b4>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ac:	f7fc ffec 	bl	8004588 <HAL_GetTick>
 80075b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075b2:	e008      	b.n	80075c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075b4:	f7fc ffe8 	bl	8004588 <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d901      	bls.n	80075c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e093      	b.n	80076ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075c6:	4b29      	ldr	r3, [pc, #164]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1f0      	bne.n	80075b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	69da      	ldr	r2, [r3, #28]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	019b      	lsls	r3, r3, #6
 80075e2:	431a      	orrs	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	085b      	lsrs	r3, r3, #1
 80075ea:	3b01      	subs	r3, #1
 80075ec:	041b      	lsls	r3, r3, #16
 80075ee:	431a      	orrs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	061b      	lsls	r3, r3, #24
 80075f6:	431a      	orrs	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fc:	071b      	lsls	r3, r3, #28
 80075fe:	491b      	ldr	r1, [pc, #108]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 8007600:	4313      	orrs	r3, r2
 8007602:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007604:	4b1b      	ldr	r3, [pc, #108]	; (8007674 <HAL_RCC_OscConfig+0x4b4>)
 8007606:	2201      	movs	r2, #1
 8007608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760a:	f7fc ffbd 	bl	8004588 <HAL_GetTick>
 800760e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007610:	e008      	b.n	8007624 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007612:	f7fc ffb9 	bl	8004588 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d901      	bls.n	8007624 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e064      	b.n	80076ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007624:	4b11      	ldr	r3, [pc, #68]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d0f0      	beq.n	8007612 <HAL_RCC_OscConfig+0x452>
 8007630:	e05c      	b.n	80076ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007632:	4b10      	ldr	r3, [pc, #64]	; (8007674 <HAL_RCC_OscConfig+0x4b4>)
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007638:	f7fc ffa6 	bl	8004588 <HAL_GetTick>
 800763c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800763e:	e008      	b.n	8007652 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007640:	f7fc ffa2 	bl	8004588 <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	2b02      	cmp	r3, #2
 800764c:	d901      	bls.n	8007652 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e04d      	b.n	80076ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007652:	4b06      	ldr	r3, [pc, #24]	; (800766c <HAL_RCC_OscConfig+0x4ac>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1f0      	bne.n	8007640 <HAL_RCC_OscConfig+0x480>
 800765e:	e045      	b.n	80076ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d107      	bne.n	8007678 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e040      	b.n	80076ee <HAL_RCC_OscConfig+0x52e>
 800766c:	40023800 	.word	0x40023800
 8007670:	40007000 	.word	0x40007000
 8007674:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007678:	4b1f      	ldr	r3, [pc, #124]	; (80076f8 <HAL_RCC_OscConfig+0x538>)
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d030      	beq.n	80076e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007690:	429a      	cmp	r2, r3
 8007692:	d129      	bne.n	80076e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800769e:	429a      	cmp	r2, r3
 80076a0:	d122      	bne.n	80076e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076a8:	4013      	ands	r3, r2
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80076ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d119      	bne.n	80076e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076be:	085b      	lsrs	r3, r3, #1
 80076c0:	3b01      	subs	r3, #1
 80076c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d10f      	bne.n	80076e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d107      	bne.n	80076e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d001      	beq.n	80076ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e000      	b.n	80076ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	40023800 	.word	0x40023800

080076fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e041      	b.n	8007792 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d106      	bne.n	8007728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7fc fd30 	bl	8004188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2202      	movs	r2, #2
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3304      	adds	r3, #4
 8007738:	4619      	mov	r1, r3
 800773a:	4610      	mov	r0, r2
 800773c:	f000 fffc 	bl	8008738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
	...

0800779c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d001      	beq.n	80077b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e04e      	b.n	8007852 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f042 0201 	orr.w	r2, r2, #1
 80077ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a23      	ldr	r2, [pc, #140]	; (8007860 <HAL_TIM_Base_Start_IT+0xc4>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d022      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077de:	d01d      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a1f      	ldr	r2, [pc, #124]	; (8007864 <HAL_TIM_Base_Start_IT+0xc8>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d018      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a1e      	ldr	r2, [pc, #120]	; (8007868 <HAL_TIM_Base_Start_IT+0xcc>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d013      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a1c      	ldr	r2, [pc, #112]	; (800786c <HAL_TIM_Base_Start_IT+0xd0>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d00e      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a1b      	ldr	r2, [pc, #108]	; (8007870 <HAL_TIM_Base_Start_IT+0xd4>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d009      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a19      	ldr	r2, [pc, #100]	; (8007874 <HAL_TIM_Base_Start_IT+0xd8>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d004      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a18      	ldr	r2, [pc, #96]	; (8007878 <HAL_TIM_Base_Start_IT+0xdc>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d111      	bne.n	8007840 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f003 0307 	and.w	r3, r3, #7
 8007826:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2b06      	cmp	r3, #6
 800782c:	d010      	beq.n	8007850 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f042 0201 	orr.w	r2, r2, #1
 800783c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800783e:	e007      	b.n	8007850 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f042 0201 	orr.w	r2, r2, #1
 800784e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	40010000 	.word	0x40010000
 8007864:	40000400 	.word	0x40000400
 8007868:	40000800 	.word	0x40000800
 800786c:	40000c00 	.word	0x40000c00
 8007870:	40010400 	.word	0x40010400
 8007874:	40014000 	.word	0x40014000
 8007878:	40001800 	.word	0x40001800

0800787c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d101      	bne.n	800788e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e041      	b.n	8007912 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d106      	bne.n	80078a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f839 	bl	800791a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2202      	movs	r2, #2
 80078ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3304      	adds	r3, #4
 80078b8:	4619      	mov	r1, r3
 80078ba:	4610      	mov	r0, r2
 80078bc:	f000 ff3c 	bl	8008738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007922:	bf00      	nop
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
	...

08007930 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d109      	bne.n	8007954 <HAL_TIM_PWM_Start+0x24>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b01      	cmp	r3, #1
 800794a:	bf14      	ite	ne
 800794c:	2301      	movne	r3, #1
 800794e:	2300      	moveq	r3, #0
 8007950:	b2db      	uxtb	r3, r3
 8007952:	e022      	b.n	800799a <HAL_TIM_PWM_Start+0x6a>
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	2b04      	cmp	r3, #4
 8007958:	d109      	bne.n	800796e <HAL_TIM_PWM_Start+0x3e>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b01      	cmp	r3, #1
 8007964:	bf14      	ite	ne
 8007966:	2301      	movne	r3, #1
 8007968:	2300      	moveq	r3, #0
 800796a:	b2db      	uxtb	r3, r3
 800796c:	e015      	b.n	800799a <HAL_TIM_PWM_Start+0x6a>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b08      	cmp	r3, #8
 8007972:	d109      	bne.n	8007988 <HAL_TIM_PWM_Start+0x58>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b01      	cmp	r3, #1
 800797e:	bf14      	ite	ne
 8007980:	2301      	movne	r3, #1
 8007982:	2300      	moveq	r3, #0
 8007984:	b2db      	uxtb	r3, r3
 8007986:	e008      	b.n	800799a <HAL_TIM_PWM_Start+0x6a>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b01      	cmp	r3, #1
 8007992:	bf14      	ite	ne
 8007994:	2301      	movne	r3, #1
 8007996:	2300      	moveq	r3, #0
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e07c      	b.n	8007a9c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d104      	bne.n	80079b2 <HAL_TIM_PWM_Start+0x82>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079b0:	e013      	b.n	80079da <HAL_TIM_PWM_Start+0xaa>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b04      	cmp	r3, #4
 80079b6:	d104      	bne.n	80079c2 <HAL_TIM_PWM_Start+0x92>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079c0:	e00b      	b.n	80079da <HAL_TIM_PWM_Start+0xaa>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b08      	cmp	r3, #8
 80079c6:	d104      	bne.n	80079d2 <HAL_TIM_PWM_Start+0xa2>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079d0:	e003      	b.n	80079da <HAL_TIM_PWM_Start+0xaa>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2202      	movs	r2, #2
 80079d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2201      	movs	r2, #1
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f001 fabc 	bl	8008f60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a2d      	ldr	r2, [pc, #180]	; (8007aa4 <HAL_TIM_PWM_Start+0x174>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d004      	beq.n	80079fc <HAL_TIM_PWM_Start+0xcc>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a2c      	ldr	r2, [pc, #176]	; (8007aa8 <HAL_TIM_PWM_Start+0x178>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d101      	bne.n	8007a00 <HAL_TIM_PWM_Start+0xd0>
 80079fc:	2301      	movs	r3, #1
 80079fe:	e000      	b.n	8007a02 <HAL_TIM_PWM_Start+0xd2>
 8007a00:	2300      	movs	r3, #0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d007      	beq.n	8007a16 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a22      	ldr	r2, [pc, #136]	; (8007aa4 <HAL_TIM_PWM_Start+0x174>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d022      	beq.n	8007a66 <HAL_TIM_PWM_Start+0x136>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a28:	d01d      	beq.n	8007a66 <HAL_TIM_PWM_Start+0x136>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a1f      	ldr	r2, [pc, #124]	; (8007aac <HAL_TIM_PWM_Start+0x17c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d018      	beq.n	8007a66 <HAL_TIM_PWM_Start+0x136>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a1d      	ldr	r2, [pc, #116]	; (8007ab0 <HAL_TIM_PWM_Start+0x180>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d013      	beq.n	8007a66 <HAL_TIM_PWM_Start+0x136>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a1c      	ldr	r2, [pc, #112]	; (8007ab4 <HAL_TIM_PWM_Start+0x184>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d00e      	beq.n	8007a66 <HAL_TIM_PWM_Start+0x136>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a16      	ldr	r2, [pc, #88]	; (8007aa8 <HAL_TIM_PWM_Start+0x178>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d009      	beq.n	8007a66 <HAL_TIM_PWM_Start+0x136>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a18      	ldr	r2, [pc, #96]	; (8007ab8 <HAL_TIM_PWM_Start+0x188>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d004      	beq.n	8007a66 <HAL_TIM_PWM_Start+0x136>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a16      	ldr	r2, [pc, #88]	; (8007abc <HAL_TIM_PWM_Start+0x18c>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d111      	bne.n	8007a8a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f003 0307 	and.w	r3, r3, #7
 8007a70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b06      	cmp	r3, #6
 8007a76:	d010      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f042 0201 	orr.w	r2, r2, #1
 8007a86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a88:	e007      	b.n	8007a9a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f042 0201 	orr.w	r2, r2, #1
 8007a98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	40010000 	.word	0x40010000
 8007aa8:	40010400 	.word	0x40010400
 8007aac:	40000400 	.word	0x40000400
 8007ab0:	40000800 	.word	0x40000800
 8007ab4:	40000c00 	.word	0x40000c00
 8007ab8:	40014000 	.word	0x40014000
 8007abc:	40001800 	.word	0x40001800

08007ac0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e041      	b.n	8007b56 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d106      	bne.n	8007aec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7fc fbea 	bl	80042c0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3304      	adds	r3, #4
 8007afc:	4619      	mov	r1, r3
 8007afe:	4610      	mov	r0, r2
 8007b00:	f000 fe1a 	bl	8008738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
	...

08007b60 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d104      	bne.n	8007b7e <HAL_TIM_IC_Start_IT+0x1e>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	e013      	b.n	8007ba6 <HAL_TIM_IC_Start_IT+0x46>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b04      	cmp	r3, #4
 8007b82:	d104      	bne.n	8007b8e <HAL_TIM_IC_Start_IT+0x2e>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	e00b      	b.n	8007ba6 <HAL_TIM_IC_Start_IT+0x46>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b08      	cmp	r3, #8
 8007b92:	d104      	bne.n	8007b9e <HAL_TIM_IC_Start_IT+0x3e>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	e003      	b.n	8007ba6 <HAL_TIM_IC_Start_IT+0x46>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d104      	bne.n	8007bb8 <HAL_TIM_IC_Start_IT+0x58>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	e013      	b.n	8007be0 <HAL_TIM_IC_Start_IT+0x80>
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	d104      	bne.n	8007bc8 <HAL_TIM_IC_Start_IT+0x68>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	e00b      	b.n	8007be0 <HAL_TIM_IC_Start_IT+0x80>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b08      	cmp	r3, #8
 8007bcc:	d104      	bne.n	8007bd8 <HAL_TIM_IC_Start_IT+0x78>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	e003      	b.n	8007be0 <HAL_TIM_IC_Start_IT+0x80>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d102      	bne.n	8007bee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007be8:	7b7b      	ldrb	r3, [r7, #13]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d001      	beq.n	8007bf2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e0cc      	b.n	8007d8c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d104      	bne.n	8007c02 <HAL_TIM_IC_Start_IT+0xa2>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c00:	e013      	b.n	8007c2a <HAL_TIM_IC_Start_IT+0xca>
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b04      	cmp	r3, #4
 8007c06:	d104      	bne.n	8007c12 <HAL_TIM_IC_Start_IT+0xb2>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c10:	e00b      	b.n	8007c2a <HAL_TIM_IC_Start_IT+0xca>
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d104      	bne.n	8007c22 <HAL_TIM_IC_Start_IT+0xc2>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c20:	e003      	b.n	8007c2a <HAL_TIM_IC_Start_IT+0xca>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2202      	movs	r2, #2
 8007c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d104      	bne.n	8007c3a <HAL_TIM_IC_Start_IT+0xda>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c38:	e013      	b.n	8007c62 <HAL_TIM_IC_Start_IT+0x102>
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d104      	bne.n	8007c4a <HAL_TIM_IC_Start_IT+0xea>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c48:	e00b      	b.n	8007c62 <HAL_TIM_IC_Start_IT+0x102>
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b08      	cmp	r3, #8
 8007c4e:	d104      	bne.n	8007c5a <HAL_TIM_IC_Start_IT+0xfa>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2202      	movs	r2, #2
 8007c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c58:	e003      	b.n	8007c62 <HAL_TIM_IC_Start_IT+0x102>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b0c      	cmp	r3, #12
 8007c66:	d841      	bhi.n	8007cec <HAL_TIM_IC_Start_IT+0x18c>
 8007c68:	a201      	add	r2, pc, #4	; (adr r2, 8007c70 <HAL_TIM_IC_Start_IT+0x110>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007ca5 	.word	0x08007ca5
 8007c74:	08007ced 	.word	0x08007ced
 8007c78:	08007ced 	.word	0x08007ced
 8007c7c:	08007ced 	.word	0x08007ced
 8007c80:	08007cb7 	.word	0x08007cb7
 8007c84:	08007ced 	.word	0x08007ced
 8007c88:	08007ced 	.word	0x08007ced
 8007c8c:	08007ced 	.word	0x08007ced
 8007c90:	08007cc9 	.word	0x08007cc9
 8007c94:	08007ced 	.word	0x08007ced
 8007c98:	08007ced 	.word	0x08007ced
 8007c9c:	08007ced 	.word	0x08007ced
 8007ca0:	08007cdb 	.word	0x08007cdb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f042 0202 	orr.w	r2, r2, #2
 8007cb2:	60da      	str	r2, [r3, #12]
      break;
 8007cb4:	e01d      	b.n	8007cf2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f042 0204 	orr.w	r2, r2, #4
 8007cc4:	60da      	str	r2, [r3, #12]
      break;
 8007cc6:	e014      	b.n	8007cf2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68da      	ldr	r2, [r3, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f042 0208 	orr.w	r2, r2, #8
 8007cd6:	60da      	str	r2, [r3, #12]
      break;
 8007cd8:	e00b      	b.n	8007cf2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f042 0210 	orr.w	r2, r2, #16
 8007ce8:	60da      	str	r2, [r3, #12]
      break;
 8007cea:	e002      	b.n	8007cf2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf0:	bf00      	nop
  }

  if (status == HAL_OK)
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d148      	bne.n	8007d8a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f001 f92d 	bl	8008f60 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a22      	ldr	r2, [pc, #136]	; (8007d94 <HAL_TIM_IC_Start_IT+0x234>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d022      	beq.n	8007d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d18:	d01d      	beq.n	8007d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a1e      	ldr	r2, [pc, #120]	; (8007d98 <HAL_TIM_IC_Start_IT+0x238>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d018      	beq.n	8007d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a1c      	ldr	r2, [pc, #112]	; (8007d9c <HAL_TIM_IC_Start_IT+0x23c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d013      	beq.n	8007d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a1b      	ldr	r2, [pc, #108]	; (8007da0 <HAL_TIM_IC_Start_IT+0x240>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d00e      	beq.n	8007d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a19      	ldr	r2, [pc, #100]	; (8007da4 <HAL_TIM_IC_Start_IT+0x244>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d009      	beq.n	8007d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a18      	ldr	r2, [pc, #96]	; (8007da8 <HAL_TIM_IC_Start_IT+0x248>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d004      	beq.n	8007d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a16      	ldr	r2, [pc, #88]	; (8007dac <HAL_TIM_IC_Start_IT+0x24c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d111      	bne.n	8007d7a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f003 0307 	and.w	r3, r3, #7
 8007d60:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	2b06      	cmp	r3, #6
 8007d66:	d010      	beq.n	8007d8a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0201 	orr.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d78:	e007      	b.n	8007d8a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f042 0201 	orr.w	r2, r2, #1
 8007d88:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	40010000 	.word	0x40010000
 8007d98:	40000400 	.word	0x40000400
 8007d9c:	40000800 	.word	0x40000800
 8007da0:	40000c00 	.word	0x40000c00
 8007da4:	40010400 	.word	0x40010400
 8007da8:	40014000 	.word	0x40014000
 8007dac:	40001800 	.word	0x40001800

08007db0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e097      	b.n	8007ef4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d106      	bne.n	8007dde <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7fc f9f7 	bl	80041cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2202      	movs	r2, #2
 8007de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	6812      	ldr	r2, [r2, #0]
 8007df0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007df4:	f023 0307 	bic.w	r3, r3, #7
 8007df8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3304      	adds	r3, #4
 8007e02:	4619      	mov	r1, r3
 8007e04:	4610      	mov	r0, r2
 8007e06:	f000 fc97 	bl	8008738 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e32:	f023 0303 	bic.w	r3, r3, #3
 8007e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	689a      	ldr	r2, [r3, #8]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	021b      	lsls	r3, r3, #8
 8007e42:	4313      	orrs	r3, r2
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007e50:	f023 030c 	bic.w	r3, r3, #12
 8007e54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	021b      	lsls	r3, r3, #8
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	011a      	lsls	r2, r3, #4
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	031b      	lsls	r3, r3, #12
 8007e80:	4313      	orrs	r3, r2
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007e8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007e96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	011b      	lsls	r3, r3, #4
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3718      	adds	r7, #24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f24:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d110      	bne.n	8007f4e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d102      	bne.n	8007f38 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f32:	7b7b      	ldrb	r3, [r7, #13]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d001      	beq.n	8007f3c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e069      	b.n	8008010 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f4c:	e031      	b.n	8007fb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d110      	bne.n	8007f76 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d102      	bne.n	8007f60 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f5a:	7b3b      	ldrb	r3, [r7, #12]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d001      	beq.n	8007f64 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e055      	b.n	8008010 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f74:	e01d      	b.n	8007fb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d108      	bne.n	8007f8e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d105      	bne.n	8007f8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f82:	7b7b      	ldrb	r3, [r7, #13]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d102      	bne.n	8007f8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f88:	7b3b      	ldrb	r3, [r7, #12]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d001      	beq.n	8007f92 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e03e      	b.n	8008010 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2202      	movs	r2, #2
 8007f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2202      	movs	r2, #2
 8007fae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <HAL_TIM_Encoder_Start+0xc4>
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2b04      	cmp	r3, #4
 8007fbc:	d008      	beq.n	8007fd0 <HAL_TIM_Encoder_Start+0xd4>
 8007fbe:	e00f      	b.n	8007fe0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 ffc9 	bl	8008f60 <TIM_CCxChannelCmd>
      break;
 8007fce:	e016      	b.n	8007ffe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	2104      	movs	r1, #4
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 ffc1 	bl	8008f60 <TIM_CCxChannelCmd>
      break;
 8007fde:	e00e      	b.n	8007ffe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 ffb9 	bl	8008f60 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	2104      	movs	r1, #4
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 ffb2 	bl	8008f60 <TIM_CCxChannelCmd>
      break;
 8007ffc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f042 0201 	orr.w	r2, r2, #1
 800800c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f003 0302 	and.w	r3, r3, #2
 800802a:	2b02      	cmp	r3, #2
 800802c:	d122      	bne.n	8008074 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	f003 0302 	and.w	r3, r3, #2
 8008038:	2b02      	cmp	r3, #2
 800803a:	d11b      	bne.n	8008074 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f06f 0202 	mvn.w	r2, #2
 8008044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	f003 0303 	and.w	r3, r3, #3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7fb fc84 	bl	8003968 <HAL_TIM_IC_CaptureCallback>
 8008060:	e005      	b.n	800806e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fb4a 	bl	80086fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fb51 	bl	8008710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	f003 0304 	and.w	r3, r3, #4
 800807e:	2b04      	cmp	r3, #4
 8008080:	d122      	bne.n	80080c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f003 0304 	and.w	r3, r3, #4
 800808c:	2b04      	cmp	r3, #4
 800808e:	d11b      	bne.n	80080c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f06f 0204 	mvn.w	r2, #4
 8008098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2202      	movs	r2, #2
 800809e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7fb fc5a 	bl	8003968 <HAL_TIM_IC_CaptureCallback>
 80080b4:	e005      	b.n	80080c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fb20 	bl	80086fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fb27 	bl	8008710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	f003 0308 	and.w	r3, r3, #8
 80080d2:	2b08      	cmp	r3, #8
 80080d4:	d122      	bne.n	800811c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	f003 0308 	and.w	r3, r3, #8
 80080e0:	2b08      	cmp	r3, #8
 80080e2:	d11b      	bne.n	800811c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f06f 0208 	mvn.w	r2, #8
 80080ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2204      	movs	r2, #4
 80080f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	f003 0303 	and.w	r3, r3, #3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7fb fc30 	bl	8003968 <HAL_TIM_IC_CaptureCallback>
 8008108:	e005      	b.n	8008116 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 faf6 	bl	80086fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fafd 	bl	8008710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	f003 0310 	and.w	r3, r3, #16
 8008126:	2b10      	cmp	r3, #16
 8008128:	d122      	bne.n	8008170 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	f003 0310 	and.w	r3, r3, #16
 8008134:	2b10      	cmp	r3, #16
 8008136:	d11b      	bne.n	8008170 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f06f 0210 	mvn.w	r2, #16
 8008140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2208      	movs	r2, #8
 8008146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7fb fc06 	bl	8003968 <HAL_TIM_IC_CaptureCallback>
 800815c:	e005      	b.n	800816a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 facc 	bl	80086fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fad3 	bl	8008710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b01      	cmp	r3, #1
 800817c:	d10e      	bne.n	800819c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	2b01      	cmp	r3, #1
 800818a:	d107      	bne.n	800819c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f06f 0201 	mvn.w	r2, #1
 8008194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7fb fc7e 	bl	8003a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a6:	2b80      	cmp	r3, #128	; 0x80
 80081a8:	d10e      	bne.n	80081c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b4:	2b80      	cmp	r3, #128	; 0x80
 80081b6:	d107      	bne.n	80081c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 ffca 	bl	800915c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d2:	2b40      	cmp	r3, #64	; 0x40
 80081d4:	d10e      	bne.n	80081f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e0:	2b40      	cmp	r3, #64	; 0x40
 80081e2:	d107      	bne.n	80081f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fa98 	bl	8008724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	f003 0320 	and.w	r3, r3, #32
 80081fe:	2b20      	cmp	r3, #32
 8008200:	d10e      	bne.n	8008220 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f003 0320 	and.w	r3, r3, #32
 800820c:	2b20      	cmp	r3, #32
 800820e:	d107      	bne.n	8008220 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f06f 0220 	mvn.w	r2, #32
 8008218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 ff94 	bl	8009148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800823e:	2b01      	cmp	r3, #1
 8008240:	d101      	bne.n	8008246 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008242:	2302      	movs	r3, #2
 8008244:	e088      	b.n	8008358 <HAL_TIM_IC_ConfigChannel+0x130>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d11b      	bne.n	800828c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6818      	ldr	r0, [r3, #0]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	6819      	ldr	r1, [r3, #0]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f000 fcb8 	bl	8008bd8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	699a      	ldr	r2, [r3, #24]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f022 020c 	bic.w	r2, r2, #12
 8008276:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6999      	ldr	r1, [r3, #24]
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	689a      	ldr	r2, [r3, #8]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	619a      	str	r2, [r3, #24]
 800828a:	e060      	b.n	800834e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b04      	cmp	r3, #4
 8008290:	d11c      	bne.n	80082cc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6818      	ldr	r0, [r3, #0]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	6819      	ldr	r1, [r3, #0]
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	f000 fd3c 	bl	8008d1e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	699a      	ldr	r2, [r3, #24]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80082b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	6999      	ldr	r1, [r3, #24]
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	021a      	lsls	r2, r3, #8
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	619a      	str	r2, [r3, #24]
 80082ca:	e040      	b.n	800834e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b08      	cmp	r3, #8
 80082d0:	d11b      	bne.n	800830a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6818      	ldr	r0, [r3, #0]
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	6819      	ldr	r1, [r3, #0]
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f000 fd89 	bl	8008df8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69da      	ldr	r2, [r3, #28]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 020c 	bic.w	r2, r2, #12
 80082f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	69d9      	ldr	r1, [r3, #28]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	61da      	str	r2, [r3, #28]
 8008308:	e021      	b.n	800834e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b0c      	cmp	r3, #12
 800830e:	d11c      	bne.n	800834a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6818      	ldr	r0, [r3, #0]
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	6819      	ldr	r1, [r3, #0]
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	f000 fda6 	bl	8008e70 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	69da      	ldr	r2, [r3, #28]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008332:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	69d9      	ldr	r1, [r3, #28]
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	021a      	lsls	r2, r3, #8
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	61da      	str	r2, [r3, #28]
 8008348:	e001      	b.n	800834e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008356:	7dfb      	ldrb	r3, [r7, #23]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008376:	2b01      	cmp	r3, #1
 8008378:	d101      	bne.n	800837e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800837a:	2302      	movs	r3, #2
 800837c:	e0ae      	b.n	80084dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b0c      	cmp	r3, #12
 800838a:	f200 809f 	bhi.w	80084cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800838e:	a201      	add	r2, pc, #4	; (adr r2, 8008394 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008394:	080083c9 	.word	0x080083c9
 8008398:	080084cd 	.word	0x080084cd
 800839c:	080084cd 	.word	0x080084cd
 80083a0:	080084cd 	.word	0x080084cd
 80083a4:	08008409 	.word	0x08008409
 80083a8:	080084cd 	.word	0x080084cd
 80083ac:	080084cd 	.word	0x080084cd
 80083b0:	080084cd 	.word	0x080084cd
 80083b4:	0800844b 	.word	0x0800844b
 80083b8:	080084cd 	.word	0x080084cd
 80083bc:	080084cd 	.word	0x080084cd
 80083c0:	080084cd 	.word	0x080084cd
 80083c4:	0800848b 	.word	0x0800848b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68b9      	ldr	r1, [r7, #8]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 fa52 	bl	8008878 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	699a      	ldr	r2, [r3, #24]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f042 0208 	orr.w	r2, r2, #8
 80083e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	699a      	ldr	r2, [r3, #24]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 0204 	bic.w	r2, r2, #4
 80083f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6999      	ldr	r1, [r3, #24]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	691a      	ldr	r2, [r3, #16]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	430a      	orrs	r2, r1
 8008404:	619a      	str	r2, [r3, #24]
      break;
 8008406:	e064      	b.n	80084d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68b9      	ldr	r1, [r7, #8]
 800840e:	4618      	mov	r0, r3
 8008410:	f000 faa2 	bl	8008958 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	699a      	ldr	r2, [r3, #24]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	699a      	ldr	r2, [r3, #24]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6999      	ldr	r1, [r3, #24]
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	021a      	lsls	r2, r3, #8
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	430a      	orrs	r2, r1
 8008446:	619a      	str	r2, [r3, #24]
      break;
 8008448:	e043      	b.n	80084d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68b9      	ldr	r1, [r7, #8]
 8008450:	4618      	mov	r0, r3
 8008452:	f000 faf7 	bl	8008a44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	69da      	ldr	r2, [r3, #28]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f042 0208 	orr.w	r2, r2, #8
 8008464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	69da      	ldr	r2, [r3, #28]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f022 0204 	bic.w	r2, r2, #4
 8008474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	69d9      	ldr	r1, [r3, #28]
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	691a      	ldr	r2, [r3, #16]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	61da      	str	r2, [r3, #28]
      break;
 8008488:	e023      	b.n	80084d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68b9      	ldr	r1, [r7, #8]
 8008490:	4618      	mov	r0, r3
 8008492:	f000 fb4b 	bl	8008b2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	69da      	ldr	r2, [r3, #28]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	69da      	ldr	r2, [r3, #28]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	69d9      	ldr	r1, [r3, #28]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	021a      	lsls	r2, r3, #8
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	61da      	str	r2, [r3, #28]
      break;
 80084ca:	e002      	b.n	80084d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	75fb      	strb	r3, [r7, #23]
      break;
 80084d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084da:	7dfb      	ldrb	r3, [r7, #23]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d101      	bne.n	8008500 <HAL_TIM_ConfigClockSource+0x1c>
 80084fc:	2302      	movs	r3, #2
 80084fe:	e0b4      	b.n	800866a <HAL_TIM_ConfigClockSource+0x186>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2202      	movs	r2, #2
 800850c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800851e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008526:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008538:	d03e      	beq.n	80085b8 <HAL_TIM_ConfigClockSource+0xd4>
 800853a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800853e:	f200 8087 	bhi.w	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008546:	f000 8086 	beq.w	8008656 <HAL_TIM_ConfigClockSource+0x172>
 800854a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800854e:	d87f      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008550:	2b70      	cmp	r3, #112	; 0x70
 8008552:	d01a      	beq.n	800858a <HAL_TIM_ConfigClockSource+0xa6>
 8008554:	2b70      	cmp	r3, #112	; 0x70
 8008556:	d87b      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008558:	2b60      	cmp	r3, #96	; 0x60
 800855a:	d050      	beq.n	80085fe <HAL_TIM_ConfigClockSource+0x11a>
 800855c:	2b60      	cmp	r3, #96	; 0x60
 800855e:	d877      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008560:	2b50      	cmp	r3, #80	; 0x50
 8008562:	d03c      	beq.n	80085de <HAL_TIM_ConfigClockSource+0xfa>
 8008564:	2b50      	cmp	r3, #80	; 0x50
 8008566:	d873      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008568:	2b40      	cmp	r3, #64	; 0x40
 800856a:	d058      	beq.n	800861e <HAL_TIM_ConfigClockSource+0x13a>
 800856c:	2b40      	cmp	r3, #64	; 0x40
 800856e:	d86f      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008570:	2b30      	cmp	r3, #48	; 0x30
 8008572:	d064      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x15a>
 8008574:	2b30      	cmp	r3, #48	; 0x30
 8008576:	d86b      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008578:	2b20      	cmp	r3, #32
 800857a:	d060      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x15a>
 800857c:	2b20      	cmp	r3, #32
 800857e:	d867      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008580:	2b00      	cmp	r3, #0
 8008582:	d05c      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x15a>
 8008584:	2b10      	cmp	r3, #16
 8008586:	d05a      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x15a>
 8008588:	e062      	b.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6818      	ldr	r0, [r3, #0]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	6899      	ldr	r1, [r3, #8]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	f000 fcc1 	bl	8008f20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	609a      	str	r2, [r3, #8]
      break;
 80085b6:	e04f      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6818      	ldr	r0, [r3, #0]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	6899      	ldr	r1, [r3, #8]
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	f000 fcaa 	bl	8008f20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689a      	ldr	r2, [r3, #8]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085da:	609a      	str	r2, [r3, #8]
      break;
 80085dc:	e03c      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6818      	ldr	r0, [r3, #0]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	6859      	ldr	r1, [r3, #4]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	461a      	mov	r2, r3
 80085ec:	f000 fb68 	bl	8008cc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2150      	movs	r1, #80	; 0x50
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 fc77 	bl	8008eea <TIM_ITRx_SetConfig>
      break;
 80085fc:	e02c      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6818      	ldr	r0, [r3, #0]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	6859      	ldr	r1, [r3, #4]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	461a      	mov	r2, r3
 800860c:	f000 fbc4 	bl	8008d98 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2160      	movs	r1, #96	; 0x60
 8008616:	4618      	mov	r0, r3
 8008618:	f000 fc67 	bl	8008eea <TIM_ITRx_SetConfig>
      break;
 800861c:	e01c      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6818      	ldr	r0, [r3, #0]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	6859      	ldr	r1, [r3, #4]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	461a      	mov	r2, r3
 800862c:	f000 fb48 	bl	8008cc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2140      	movs	r1, #64	; 0x40
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fc57 	bl	8008eea <TIM_ITRx_SetConfig>
      break;
 800863c:	e00c      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4619      	mov	r1, r3
 8008648:	4610      	mov	r0, r2
 800864a:	f000 fc4e 	bl	8008eea <TIM_ITRx_SetConfig>
      break;
 800864e:	e003      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	73fb      	strb	r3, [r7, #15]
      break;
 8008654:	e000      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008656:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008668:	7bfb      	ldrb	r3, [r7, #15]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	60fb      	str	r3, [r7, #12]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	2b0c      	cmp	r3, #12
 8008686:	d831      	bhi.n	80086ec <HAL_TIM_ReadCapturedValue+0x78>
 8008688:	a201      	add	r2, pc, #4	; (adr r2, 8008690 <HAL_TIM_ReadCapturedValue+0x1c>)
 800868a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868e:	bf00      	nop
 8008690:	080086c5 	.word	0x080086c5
 8008694:	080086ed 	.word	0x080086ed
 8008698:	080086ed 	.word	0x080086ed
 800869c:	080086ed 	.word	0x080086ed
 80086a0:	080086cf 	.word	0x080086cf
 80086a4:	080086ed 	.word	0x080086ed
 80086a8:	080086ed 	.word	0x080086ed
 80086ac:	080086ed 	.word	0x080086ed
 80086b0:	080086d9 	.word	0x080086d9
 80086b4:	080086ed 	.word	0x080086ed
 80086b8:	080086ed 	.word	0x080086ed
 80086bc:	080086ed 	.word	0x080086ed
 80086c0:	080086e3 	.word	0x080086e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ca:	60fb      	str	r3, [r7, #12]

      break;
 80086cc:	e00f      	b.n	80086ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d4:	60fb      	str	r3, [r7, #12]

      break;
 80086d6:	e00a      	b.n	80086ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086de:	60fb      	str	r3, [r7, #12]

      break;
 80086e0:	e005      	b.n	80086ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e8:	60fb      	str	r3, [r7, #12]

      break;
 80086ea:	e000      	b.n	80086ee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80086ec:	bf00      	nop
  }

  return tmpreg;
 80086ee:	68fb      	ldr	r3, [r7, #12]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a40      	ldr	r2, [pc, #256]	; (800884c <TIM_Base_SetConfig+0x114>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d013      	beq.n	8008778 <TIM_Base_SetConfig+0x40>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008756:	d00f      	beq.n	8008778 <TIM_Base_SetConfig+0x40>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a3d      	ldr	r2, [pc, #244]	; (8008850 <TIM_Base_SetConfig+0x118>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d00b      	beq.n	8008778 <TIM_Base_SetConfig+0x40>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a3c      	ldr	r2, [pc, #240]	; (8008854 <TIM_Base_SetConfig+0x11c>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d007      	beq.n	8008778 <TIM_Base_SetConfig+0x40>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a3b      	ldr	r2, [pc, #236]	; (8008858 <TIM_Base_SetConfig+0x120>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d003      	beq.n	8008778 <TIM_Base_SetConfig+0x40>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a3a      	ldr	r2, [pc, #232]	; (800885c <TIM_Base_SetConfig+0x124>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d108      	bne.n	800878a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800877e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	4313      	orrs	r3, r2
 8008788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a2f      	ldr	r2, [pc, #188]	; (800884c <TIM_Base_SetConfig+0x114>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d02b      	beq.n	80087ea <TIM_Base_SetConfig+0xb2>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008798:	d027      	beq.n	80087ea <TIM_Base_SetConfig+0xb2>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a2c      	ldr	r2, [pc, #176]	; (8008850 <TIM_Base_SetConfig+0x118>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d023      	beq.n	80087ea <TIM_Base_SetConfig+0xb2>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a2b      	ldr	r2, [pc, #172]	; (8008854 <TIM_Base_SetConfig+0x11c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d01f      	beq.n	80087ea <TIM_Base_SetConfig+0xb2>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a2a      	ldr	r2, [pc, #168]	; (8008858 <TIM_Base_SetConfig+0x120>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d01b      	beq.n	80087ea <TIM_Base_SetConfig+0xb2>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a29      	ldr	r2, [pc, #164]	; (800885c <TIM_Base_SetConfig+0x124>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d017      	beq.n	80087ea <TIM_Base_SetConfig+0xb2>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a28      	ldr	r2, [pc, #160]	; (8008860 <TIM_Base_SetConfig+0x128>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d013      	beq.n	80087ea <TIM_Base_SetConfig+0xb2>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a27      	ldr	r2, [pc, #156]	; (8008864 <TIM_Base_SetConfig+0x12c>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d00f      	beq.n	80087ea <TIM_Base_SetConfig+0xb2>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a26      	ldr	r2, [pc, #152]	; (8008868 <TIM_Base_SetConfig+0x130>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d00b      	beq.n	80087ea <TIM_Base_SetConfig+0xb2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a25      	ldr	r2, [pc, #148]	; (800886c <TIM_Base_SetConfig+0x134>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d007      	beq.n	80087ea <TIM_Base_SetConfig+0xb2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a24      	ldr	r2, [pc, #144]	; (8008870 <TIM_Base_SetConfig+0x138>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d003      	beq.n	80087ea <TIM_Base_SetConfig+0xb2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a23      	ldr	r2, [pc, #140]	; (8008874 <TIM_Base_SetConfig+0x13c>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d108      	bne.n	80087fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	4313      	orrs	r3, r2
 8008808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	689a      	ldr	r2, [r3, #8]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a0a      	ldr	r2, [pc, #40]	; (800884c <TIM_Base_SetConfig+0x114>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d003      	beq.n	8008830 <TIM_Base_SetConfig+0xf8>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a0c      	ldr	r2, [pc, #48]	; (800885c <TIM_Base_SetConfig+0x124>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d103      	bne.n	8008838 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	691a      	ldr	r2, [r3, #16]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	615a      	str	r2, [r3, #20]
}
 800883e:	bf00      	nop
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	40010000 	.word	0x40010000
 8008850:	40000400 	.word	0x40000400
 8008854:	40000800 	.word	0x40000800
 8008858:	40000c00 	.word	0x40000c00
 800885c:	40010400 	.word	0x40010400
 8008860:	40014000 	.word	0x40014000
 8008864:	40014400 	.word	0x40014400
 8008868:	40014800 	.word	0x40014800
 800886c:	40001800 	.word	0x40001800
 8008870:	40001c00 	.word	0x40001c00
 8008874:	40002000 	.word	0x40002000

08008878 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008878:	b480      	push	{r7}
 800887a:	b087      	sub	sp, #28
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	f023 0201 	bic.w	r2, r3, #1
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f023 0303 	bic.w	r3, r3, #3
 80088ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f023 0302 	bic.w	r3, r3, #2
 80088c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a20      	ldr	r2, [pc, #128]	; (8008950 <TIM_OC1_SetConfig+0xd8>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d003      	beq.n	80088dc <TIM_OC1_SetConfig+0x64>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a1f      	ldr	r2, [pc, #124]	; (8008954 <TIM_OC1_SetConfig+0xdc>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d10c      	bne.n	80088f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f023 0308 	bic.w	r3, r3, #8
 80088e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f023 0304 	bic.w	r3, r3, #4
 80088f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a15      	ldr	r2, [pc, #84]	; (8008950 <TIM_OC1_SetConfig+0xd8>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d003      	beq.n	8008906 <TIM_OC1_SetConfig+0x8e>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a14      	ldr	r2, [pc, #80]	; (8008954 <TIM_OC1_SetConfig+0xdc>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d111      	bne.n	800892a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800890c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	4313      	orrs	r3, r2
 800891e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	4313      	orrs	r3, r2
 8008928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	685a      	ldr	r2, [r3, #4]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	621a      	str	r2, [r3, #32]
}
 8008944:	bf00      	nop
 8008946:	371c      	adds	r7, #28
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	40010000 	.word	0x40010000
 8008954:	40010400 	.word	0x40010400

08008958 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008958:	b480      	push	{r7}
 800895a:	b087      	sub	sp, #28
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	f023 0210 	bic.w	r2, r3, #16
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a1b      	ldr	r3, [r3, #32]
 8008972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800898e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	021b      	lsls	r3, r3, #8
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	4313      	orrs	r3, r2
 800899a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f023 0320 	bic.w	r3, r3, #32
 80089a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	011b      	lsls	r3, r3, #4
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a22      	ldr	r2, [pc, #136]	; (8008a3c <TIM_OC2_SetConfig+0xe4>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d003      	beq.n	80089c0 <TIM_OC2_SetConfig+0x68>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a21      	ldr	r2, [pc, #132]	; (8008a40 <TIM_OC2_SetConfig+0xe8>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d10d      	bne.n	80089dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	011b      	lsls	r3, r3, #4
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a17      	ldr	r2, [pc, #92]	; (8008a3c <TIM_OC2_SetConfig+0xe4>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d003      	beq.n	80089ec <TIM_OC2_SetConfig+0x94>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a16      	ldr	r2, [pc, #88]	; (8008a40 <TIM_OC2_SetConfig+0xe8>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d113      	bne.n	8008a14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	685a      	ldr	r2, [r3, #4]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	621a      	str	r2, [r3, #32]
}
 8008a2e:	bf00      	nop
 8008a30:	371c      	adds	r7, #28
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	40010000 	.word	0x40010000
 8008a40:	40010400 	.word	0x40010400

08008a44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	69db      	ldr	r3, [r3, #28]
 8008a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f023 0303 	bic.w	r3, r3, #3
 8008a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	021b      	lsls	r3, r3, #8
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a21      	ldr	r2, [pc, #132]	; (8008b24 <TIM_OC3_SetConfig+0xe0>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d003      	beq.n	8008aaa <TIM_OC3_SetConfig+0x66>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a20      	ldr	r2, [pc, #128]	; (8008b28 <TIM_OC3_SetConfig+0xe4>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d10d      	bne.n	8008ac6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	021b      	lsls	r3, r3, #8
 8008ab8:	697a      	ldr	r2, [r7, #20]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a16      	ldr	r2, [pc, #88]	; (8008b24 <TIM_OC3_SetConfig+0xe0>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d003      	beq.n	8008ad6 <TIM_OC3_SetConfig+0x92>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a15      	ldr	r2, [pc, #84]	; (8008b28 <TIM_OC3_SetConfig+0xe4>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d113      	bne.n	8008afe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	011b      	lsls	r3, r3, #4
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	011b      	lsls	r3, r3, #4
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	685a      	ldr	r2, [r3, #4]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	621a      	str	r2, [r3, #32]
}
 8008b18:	bf00      	nop
 8008b1a:	371c      	adds	r7, #28
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr
 8008b24:	40010000 	.word	0x40010000
 8008b28:	40010400 	.word	0x40010400

08008b2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b087      	sub	sp, #28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	69db      	ldr	r3, [r3, #28]
 8008b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	021b      	lsls	r3, r3, #8
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	031b      	lsls	r3, r3, #12
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a12      	ldr	r2, [pc, #72]	; (8008bd0 <TIM_OC4_SetConfig+0xa4>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d003      	beq.n	8008b94 <TIM_OC4_SetConfig+0x68>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a11      	ldr	r2, [pc, #68]	; (8008bd4 <TIM_OC4_SetConfig+0xa8>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d109      	bne.n	8008ba8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	695b      	ldr	r3, [r3, #20]
 8008ba0:	019b      	lsls	r3, r3, #6
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	685a      	ldr	r2, [r3, #4]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	693a      	ldr	r2, [r7, #16]
 8008bc0:	621a      	str	r2, [r3, #32]
}
 8008bc2:	bf00      	nop
 8008bc4:	371c      	adds	r7, #28
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	40010000 	.word	0x40010000
 8008bd4:	40010400 	.word	0x40010400

08008bd8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b087      	sub	sp, #28
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
 8008be4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	f023 0201 	bic.w	r2, r3, #1
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
 8008bfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	4a28      	ldr	r2, [pc, #160]	; (8008ca4 <TIM_TI1_SetConfig+0xcc>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d01b      	beq.n	8008c3e <TIM_TI1_SetConfig+0x66>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c0c:	d017      	beq.n	8008c3e <TIM_TI1_SetConfig+0x66>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	4a25      	ldr	r2, [pc, #148]	; (8008ca8 <TIM_TI1_SetConfig+0xd0>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d013      	beq.n	8008c3e <TIM_TI1_SetConfig+0x66>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	4a24      	ldr	r2, [pc, #144]	; (8008cac <TIM_TI1_SetConfig+0xd4>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d00f      	beq.n	8008c3e <TIM_TI1_SetConfig+0x66>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	4a23      	ldr	r2, [pc, #140]	; (8008cb0 <TIM_TI1_SetConfig+0xd8>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d00b      	beq.n	8008c3e <TIM_TI1_SetConfig+0x66>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	4a22      	ldr	r2, [pc, #136]	; (8008cb4 <TIM_TI1_SetConfig+0xdc>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d007      	beq.n	8008c3e <TIM_TI1_SetConfig+0x66>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	4a21      	ldr	r2, [pc, #132]	; (8008cb8 <TIM_TI1_SetConfig+0xe0>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d003      	beq.n	8008c3e <TIM_TI1_SetConfig+0x66>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	4a20      	ldr	r2, [pc, #128]	; (8008cbc <TIM_TI1_SetConfig+0xe4>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d101      	bne.n	8008c42 <TIM_TI1_SetConfig+0x6a>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e000      	b.n	8008c44 <TIM_TI1_SetConfig+0x6c>
 8008c42:	2300      	movs	r3, #0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d008      	beq.n	8008c5a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	f023 0303 	bic.w	r3, r3, #3
 8008c4e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	e003      	b.n	8008c62 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f043 0301 	orr.w	r3, r3, #1
 8008c60:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	011b      	lsls	r3, r3, #4
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	f023 030a 	bic.w	r3, r3, #10
 8008c7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	f003 030a 	and.w	r3, r3, #10
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	697a      	ldr	r2, [r7, #20]
 8008c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	621a      	str	r2, [r3, #32]
}
 8008c96:	bf00      	nop
 8008c98:	371c      	adds	r7, #28
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	40010000 	.word	0x40010000
 8008ca8:	40000400 	.word	0x40000400
 8008cac:	40000800 	.word	0x40000800
 8008cb0:	40000c00 	.word	0x40000c00
 8008cb4:	40010400 	.word	0x40010400
 8008cb8:	40014000 	.word	0x40014000
 8008cbc:	40001800 	.word	0x40001800

08008cc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	f023 0201 	bic.w	r2, r3, #1
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	011b      	lsls	r3, r3, #4
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f023 030a 	bic.w	r3, r3, #10
 8008cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	621a      	str	r2, [r3, #32]
}
 8008d12:	bf00      	nop
 8008d14:	371c      	adds	r7, #28
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b087      	sub	sp, #28
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	60f8      	str	r0, [r7, #12]
 8008d26:	60b9      	str	r1, [r7, #8]
 8008d28:	607a      	str	r2, [r7, #4]
 8008d2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6a1b      	ldr	r3, [r3, #32]
 8008d30:	f023 0210 	bic.w	r2, r3, #16
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	021b      	lsls	r3, r3, #8
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	031b      	lsls	r3, r3, #12
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	011b      	lsls	r3, r3, #4
 8008d76:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	621a      	str	r2, [r3, #32]
}
 8008d8c:	bf00      	nop
 8008d8e:	371c      	adds	r7, #28
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b087      	sub	sp, #28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6a1b      	ldr	r3, [r3, #32]
 8008da8:	f023 0210 	bic.w	r2, r3, #16
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008dc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	031b      	lsls	r3, r3, #12
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008dd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	011b      	lsls	r3, r3, #4
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	621a      	str	r2, [r3, #32]
}
 8008dec:	bf00      	nop
 8008dee:	371c      	adds	r7, #28
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
 8008e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	69db      	ldr	r3, [r3, #28]
 8008e16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f023 0303 	bic.w	r3, r3, #3
 8008e24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	011b      	lsls	r3, r3, #4
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008e48:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	021b      	lsls	r3, r3, #8
 8008e4e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008e52:	693a      	ldr	r2, [r7, #16]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	621a      	str	r2, [r3, #32]
}
 8008e64:	bf00      	nop
 8008e66:	371c      	adds	r7, #28
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	697a      	ldr	r2, [r7, #20]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008eae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	031b      	lsls	r3, r3, #12
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008ec2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	031b      	lsls	r3, r3, #12
 8008ec8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	693a      	ldr	r2, [r7, #16]
 8008edc:	621a      	str	r2, [r3, #32]
}
 8008ede:	bf00      	nop
 8008ee0:	371c      	adds	r7, #28
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b085      	sub	sp, #20
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	f043 0307 	orr.w	r3, r3, #7
 8008f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	609a      	str	r2, [r3, #8]
}
 8008f14:	bf00      	nop
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	021a      	lsls	r2, r3, #8
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	431a      	orrs	r2, r3
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	609a      	str	r2, [r3, #8]
}
 8008f54:	bf00      	nop
 8008f56:	371c      	adds	r7, #28
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f003 031f 	and.w	r3, r3, #31
 8008f72:	2201      	movs	r2, #1
 8008f74:	fa02 f303 	lsl.w	r3, r2, r3
 8008f78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6a1a      	ldr	r2, [r3, #32]
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	43db      	mvns	r3, r3
 8008f82:	401a      	ands	r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6a1a      	ldr	r2, [r3, #32]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f003 031f 	and.w	r3, r3, #31
 8008f92:	6879      	ldr	r1, [r7, #4]
 8008f94:	fa01 f303 	lsl.w	r3, r1, r3
 8008f98:	431a      	orrs	r2, r3
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	621a      	str	r2, [r3, #32]
}
 8008f9e:	bf00      	nop
 8008fa0:	371c      	adds	r7, #28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
	...

08008fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d101      	bne.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	e05a      	b.n	800907a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a21      	ldr	r2, [pc, #132]	; (8009088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d022      	beq.n	800904e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009010:	d01d      	beq.n	800904e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a1d      	ldr	r2, [pc, #116]	; (800908c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d018      	beq.n	800904e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a1b      	ldr	r2, [pc, #108]	; (8009090 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d013      	beq.n	800904e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a1a      	ldr	r2, [pc, #104]	; (8009094 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d00e      	beq.n	800904e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a18      	ldr	r2, [pc, #96]	; (8009098 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d009      	beq.n	800904e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a17      	ldr	r2, [pc, #92]	; (800909c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d004      	beq.n	800904e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a15      	ldr	r2, [pc, #84]	; (80090a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d10c      	bne.n	8009068 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009054:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	4313      	orrs	r3, r2
 800905e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	40010000 	.word	0x40010000
 800908c:	40000400 	.word	0x40000400
 8009090:	40000800 	.word	0x40000800
 8009094:	40000c00 	.word	0x40000c00
 8009098:	40010400 	.word	0x40010400
 800909c:	40014000 	.word	0x40014000
 80090a0:	40001800 	.word	0x40001800

080090a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090ae:	2300      	movs	r3, #0
 80090b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d101      	bne.n	80090c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090bc:	2302      	movs	r3, #2
 80090be:	e03d      	b.n	800913c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	4313      	orrs	r3, r2
 800910c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	4313      	orrs	r3, r2
 800911a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	4313      	orrs	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e03f      	b.n	8009202 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d106      	bne.n	800919c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f7fb f946 	bl	8004428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2224      	movs	r2, #36	; 0x24
 80091a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68da      	ldr	r2, [r3, #12]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fd7b 	bl	8009cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	691a      	ldr	r2, [r3, #16]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	695a      	ldr	r2, [r3, #20]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68da      	ldr	r2, [r3, #12]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2220      	movs	r2, #32
 80091f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2220      	movs	r2, #32
 80091fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b08a      	sub	sp, #40	; 0x28
 800920e:	af02      	add	r7, sp, #8
 8009210:	60f8      	str	r0, [r7, #12]
 8009212:	60b9      	str	r1, [r7, #8]
 8009214:	603b      	str	r3, [r7, #0]
 8009216:	4613      	mov	r3, r2
 8009218:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800921a:	2300      	movs	r3, #0
 800921c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009224:	b2db      	uxtb	r3, r3
 8009226:	2b20      	cmp	r3, #32
 8009228:	d17c      	bne.n	8009324 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <HAL_UART_Transmit+0x2c>
 8009230:	88fb      	ldrh	r3, [r7, #6]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d101      	bne.n	800923a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e075      	b.n	8009326 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009240:	2b01      	cmp	r3, #1
 8009242:	d101      	bne.n	8009248 <HAL_UART_Transmit+0x3e>
 8009244:	2302      	movs	r3, #2
 8009246:	e06e      	b.n	8009326 <HAL_UART_Transmit+0x11c>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2221      	movs	r2, #33	; 0x21
 800925a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800925e:	f7fb f993 	bl	8004588 <HAL_GetTick>
 8009262:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	88fa      	ldrh	r2, [r7, #6]
 8009268:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	88fa      	ldrh	r2, [r7, #6]
 800926e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009278:	d108      	bne.n	800928c <HAL_UART_Transmit+0x82>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d104      	bne.n	800928c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009282:	2300      	movs	r3, #0
 8009284:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	61bb      	str	r3, [r7, #24]
 800928a:	e003      	b.n	8009294 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009290:	2300      	movs	r3, #0
 8009292:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800929c:	e02a      	b.n	80092f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2200      	movs	r2, #0
 80092a6:	2180      	movs	r1, #128	; 0x80
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f000 faf9 	bl	80098a0 <UART_WaitOnFlagUntilTimeout>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d001      	beq.n	80092b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e036      	b.n	8009326 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10b      	bne.n	80092d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	881b      	ldrh	r3, [r3, #0]
 80092c2:	461a      	mov	r2, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	3302      	adds	r3, #2
 80092d2:	61bb      	str	r3, [r7, #24]
 80092d4:	e007      	b.n	80092e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	781a      	ldrb	r2, [r3, #0]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	3301      	adds	r3, #1
 80092e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	3b01      	subs	r3, #1
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1cf      	bne.n	800929e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	2200      	movs	r2, #0
 8009306:	2140      	movs	r1, #64	; 0x40
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 fac9 	bl	80098a0 <UART_WaitOnFlagUntilTimeout>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e006      	b.n	8009326 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2220      	movs	r2, #32
 800931c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	e000      	b.n	8009326 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009324:	2302      	movs	r3, #2
  }
}
 8009326:	4618      	mov	r0, r3
 8009328:	3720      	adds	r7, #32
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
	...

08009330 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b0ba      	sub	sp, #232	; 0xe8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009356:	2300      	movs	r3, #0
 8009358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800935c:	2300      	movs	r3, #0
 800935e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009366:	f003 030f 	and.w	r3, r3, #15
 800936a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800936e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10f      	bne.n	8009396 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800937a:	f003 0320 	and.w	r3, r3, #32
 800937e:	2b00      	cmp	r3, #0
 8009380:	d009      	beq.n	8009396 <HAL_UART_IRQHandler+0x66>
 8009382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009386:	f003 0320 	and.w	r3, r3, #32
 800938a:	2b00      	cmp	r3, #0
 800938c:	d003      	beq.n	8009396 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fbd3 	bl	8009b3a <UART_Receive_IT>
      return;
 8009394:	e256      	b.n	8009844 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 80de 	beq.w	800955c <HAL_UART_IRQHandler+0x22c>
 80093a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d106      	bne.n	80093ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80093ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f000 80d1 	beq.w	800955c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80093ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00b      	beq.n	80093de <HAL_UART_IRQHandler+0xae>
 80093c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d005      	beq.n	80093de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d6:	f043 0201 	orr.w	r2, r3, #1
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e2:	f003 0304 	and.w	r3, r3, #4
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00b      	beq.n	8009402 <HAL_UART_IRQHandler+0xd2>
 80093ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093ee:	f003 0301 	and.w	r3, r3, #1
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d005      	beq.n	8009402 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fa:	f043 0202 	orr.w	r2, r3, #2
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009406:	f003 0302 	and.w	r3, r3, #2
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00b      	beq.n	8009426 <HAL_UART_IRQHandler+0xf6>
 800940e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	2b00      	cmp	r3, #0
 8009418:	d005      	beq.n	8009426 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941e:	f043 0204 	orr.w	r2, r3, #4
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800942a:	f003 0308 	and.w	r3, r3, #8
 800942e:	2b00      	cmp	r3, #0
 8009430:	d011      	beq.n	8009456 <HAL_UART_IRQHandler+0x126>
 8009432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009436:	f003 0320 	and.w	r3, r3, #32
 800943a:	2b00      	cmp	r3, #0
 800943c:	d105      	bne.n	800944a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800943e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	2b00      	cmp	r3, #0
 8009448:	d005      	beq.n	8009456 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944e:	f043 0208 	orr.w	r2, r3, #8
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945a:	2b00      	cmp	r3, #0
 800945c:	f000 81ed 	beq.w	800983a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009464:	f003 0320 	and.w	r3, r3, #32
 8009468:	2b00      	cmp	r3, #0
 800946a:	d008      	beq.n	800947e <HAL_UART_IRQHandler+0x14e>
 800946c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009470:	f003 0320 	and.w	r3, r3, #32
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 fb5e 	bl	8009b3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	695b      	ldr	r3, [r3, #20]
 8009484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009488:	2b40      	cmp	r3, #64	; 0x40
 800948a:	bf0c      	ite	eq
 800948c:	2301      	moveq	r3, #1
 800948e:	2300      	movne	r3, #0
 8009490:	b2db      	uxtb	r3, r3
 8009492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949a:	f003 0308 	and.w	r3, r3, #8
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d103      	bne.n	80094aa <HAL_UART_IRQHandler+0x17a>
 80094a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d04f      	beq.n	800954a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fa66 	bl	800997c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ba:	2b40      	cmp	r3, #64	; 0x40
 80094bc:	d141      	bne.n	8009542 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3314      	adds	r3, #20
 80094c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094cc:	e853 3f00 	ldrex	r3, [r3]
 80094d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80094d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	3314      	adds	r3, #20
 80094e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80094ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80094ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80094f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80094fa:	e841 2300 	strex	r3, r2, [r1]
 80094fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1d9      	bne.n	80094be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950e:	2b00      	cmp	r3, #0
 8009510:	d013      	beq.n	800953a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009516:	4a7d      	ldr	r2, [pc, #500]	; (800970c <HAL_UART_IRQHandler+0x3dc>)
 8009518:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951e:	4618      	mov	r0, r3
 8009520:	f7fb ff68 	bl	80053f4 <HAL_DMA_Abort_IT>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d016      	beq.n	8009558 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009534:	4610      	mov	r0, r2
 8009536:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009538:	e00e      	b.n	8009558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f99a 	bl	8009874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009540:	e00a      	b.n	8009558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f996 	bl	8009874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009548:	e006      	b.n	8009558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f992 	bl	8009874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009556:	e170      	b.n	800983a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009558:	bf00      	nop
    return;
 800955a:	e16e      	b.n	800983a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009560:	2b01      	cmp	r3, #1
 8009562:	f040 814a 	bne.w	80097fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800956a:	f003 0310 	and.w	r3, r3, #16
 800956e:	2b00      	cmp	r3, #0
 8009570:	f000 8143 	beq.w	80097fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009578:	f003 0310 	and.w	r3, r3, #16
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 813c 	beq.w	80097fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009582:	2300      	movs	r3, #0
 8009584:	60bb      	str	r3, [r7, #8]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	60bb      	str	r3, [r7, #8]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	60bb      	str	r3, [r7, #8]
 8009596:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a2:	2b40      	cmp	r3, #64	; 0x40
 80095a4:	f040 80b4 	bne.w	8009710 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f000 8140 	beq.w	800983e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80095c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095c6:	429a      	cmp	r2, r3
 80095c8:	f080 8139 	bcs.w	800983e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d8:	69db      	ldr	r3, [r3, #28]
 80095da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095de:	f000 8088 	beq.w	80096f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	330c      	adds	r3, #12
 80095e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095f0:	e853 3f00 	ldrex	r3, [r3]
 80095f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80095f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	330c      	adds	r3, #12
 800960a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800960e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800961a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800961e:	e841 2300 	strex	r3, r2, [r1]
 8009622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009626:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1d9      	bne.n	80095e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3314      	adds	r3, #20
 8009634:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009638:	e853 3f00 	ldrex	r3, [r3]
 800963c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800963e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009640:	f023 0301 	bic.w	r3, r3, #1
 8009644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3314      	adds	r3, #20
 800964e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009652:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009656:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009658:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800965a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800965e:	e841 2300 	strex	r3, r2, [r1]
 8009662:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1e1      	bne.n	800962e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3314      	adds	r3, #20
 8009670:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800967a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800967c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3314      	adds	r3, #20
 800968a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800968e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009690:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009692:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009694:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009696:	e841 2300 	strex	r3, r2, [r1]
 800969a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800969c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1e3      	bne.n	800966a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	330c      	adds	r3, #12
 80096b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096ba:	e853 3f00 	ldrex	r3, [r3]
 80096be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096c2:	f023 0310 	bic.w	r3, r3, #16
 80096c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	330c      	adds	r3, #12
 80096d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80096d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80096d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096dc:	e841 2300 	strex	r3, r2, [r1]
 80096e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1e3      	bne.n	80096b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fb fe11 	bl	8005314 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	b29b      	uxth	r3, r3
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f8c0 	bl	8009888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009708:	e099      	b.n	800983e <HAL_UART_IRQHandler+0x50e>
 800970a:	bf00      	nop
 800970c:	08009a43 	.word	0x08009a43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009718:	b29b      	uxth	r3, r3
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009724:	b29b      	uxth	r3, r3
 8009726:	2b00      	cmp	r3, #0
 8009728:	f000 808b 	beq.w	8009842 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800972c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 8086 	beq.w	8009842 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	330c      	adds	r3, #12
 800973c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009740:	e853 3f00 	ldrex	r3, [r3]
 8009744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800974c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	330c      	adds	r3, #12
 8009756:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800975a:	647a      	str	r2, [r7, #68]	; 0x44
 800975c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009762:	e841 2300 	strex	r3, r2, [r1]
 8009766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1e3      	bne.n	8009736 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3314      	adds	r3, #20
 8009774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009778:	e853 3f00 	ldrex	r3, [r3]
 800977c:	623b      	str	r3, [r7, #32]
   return(result);
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	f023 0301 	bic.w	r3, r3, #1
 8009784:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3314      	adds	r3, #20
 800978e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009792:	633a      	str	r2, [r7, #48]	; 0x30
 8009794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800979a:	e841 2300 	strex	r3, r2, [r1]
 800979e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1e3      	bne.n	800976e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2220      	movs	r2, #32
 80097aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	330c      	adds	r3, #12
 80097ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	e853 3f00 	ldrex	r3, [r3]
 80097c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f023 0310 	bic.w	r3, r3, #16
 80097ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	330c      	adds	r3, #12
 80097d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80097d8:	61fa      	str	r2, [r7, #28]
 80097da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097dc:	69b9      	ldr	r1, [r7, #24]
 80097de:	69fa      	ldr	r2, [r7, #28]
 80097e0:	e841 2300 	strex	r3, r2, [r1]
 80097e4:	617b      	str	r3, [r7, #20]
   return(result);
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1e3      	bne.n	80097b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097f0:	4619      	mov	r1, r3
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f848 	bl	8009888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80097f8:	e023      	b.n	8009842 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80097fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009802:	2b00      	cmp	r3, #0
 8009804:	d009      	beq.n	800981a <HAL_UART_IRQHandler+0x4ea>
 8009806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800980a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f929 	bl	8009a6a <UART_Transmit_IT>
    return;
 8009818:	e014      	b.n	8009844 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800981a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800981e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00e      	beq.n	8009844 <HAL_UART_IRQHandler+0x514>
 8009826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800982a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800982e:	2b00      	cmp	r3, #0
 8009830:	d008      	beq.n	8009844 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f969 	bl	8009b0a <UART_EndTransmit_IT>
    return;
 8009838:	e004      	b.n	8009844 <HAL_UART_IRQHandler+0x514>
    return;
 800983a:	bf00      	nop
 800983c:	e002      	b.n	8009844 <HAL_UART_IRQHandler+0x514>
      return;
 800983e:	bf00      	nop
 8009840:	e000      	b.n	8009844 <HAL_UART_IRQHandler+0x514>
      return;
 8009842:	bf00      	nop
  }
}
 8009844:	37e8      	adds	r7, #232	; 0xe8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop

0800984c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009868:	bf00      	nop
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	460b      	mov	r3, r1
 8009892:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009894:	bf00      	nop
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b090      	sub	sp, #64	; 0x40
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	603b      	str	r3, [r7, #0]
 80098ac:	4613      	mov	r3, r2
 80098ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098b0:	e050      	b.n	8009954 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b8:	d04c      	beq.n	8009954 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80098ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d007      	beq.n	80098d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80098c0:	f7fa fe62 	bl	8004588 <HAL_GetTick>
 80098c4:	4602      	mov	r2, r0
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d241      	bcs.n	8009954 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	330c      	adds	r3, #12
 80098d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098da:	e853 3f00 	ldrex	r3, [r3]
 80098de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80098e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	330c      	adds	r3, #12
 80098ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098f0:	637a      	str	r2, [r7, #52]	; 0x34
 80098f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098f8:	e841 2300 	strex	r3, r2, [r1]
 80098fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80098fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1e5      	bne.n	80098d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	3314      	adds	r3, #20
 800990a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	e853 3f00 	ldrex	r3, [r3]
 8009912:	613b      	str	r3, [r7, #16]
   return(result);
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	f023 0301 	bic.w	r3, r3, #1
 800991a:	63bb      	str	r3, [r7, #56]	; 0x38
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3314      	adds	r3, #20
 8009922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009924:	623a      	str	r2, [r7, #32]
 8009926:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009928:	69f9      	ldr	r1, [r7, #28]
 800992a:	6a3a      	ldr	r2, [r7, #32]
 800992c:	e841 2300 	strex	r3, r2, [r1]
 8009930:	61bb      	str	r3, [r7, #24]
   return(result);
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1e5      	bne.n	8009904 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2220      	movs	r2, #32
 800993c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2220      	movs	r2, #32
 8009944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009950:	2303      	movs	r3, #3
 8009952:	e00f      	b.n	8009974 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	4013      	ands	r3, r2
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	429a      	cmp	r2, r3
 8009962:	bf0c      	ite	eq
 8009964:	2301      	moveq	r3, #1
 8009966:	2300      	movne	r3, #0
 8009968:	b2db      	uxtb	r3, r3
 800996a:	461a      	mov	r2, r3
 800996c:	79fb      	ldrb	r3, [r7, #7]
 800996e:	429a      	cmp	r2, r3
 8009970:	d09f      	beq.n	80098b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3740      	adds	r7, #64	; 0x40
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800997c:	b480      	push	{r7}
 800997e:	b095      	sub	sp, #84	; 0x54
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	330c      	adds	r3, #12
 800998a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800998e:	e853 3f00 	ldrex	r3, [r3]
 8009992:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009996:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800999a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	330c      	adds	r3, #12
 80099a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099a4:	643a      	str	r2, [r7, #64]	; 0x40
 80099a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099ac:	e841 2300 	strex	r3, r2, [r1]
 80099b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1e5      	bne.n	8009984 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	3314      	adds	r3, #20
 80099be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	e853 3f00 	ldrex	r3, [r3]
 80099c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80099c8:	69fb      	ldr	r3, [r7, #28]
 80099ca:	f023 0301 	bic.w	r3, r3, #1
 80099ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	3314      	adds	r3, #20
 80099d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099e0:	e841 2300 	strex	r3, r2, [r1]
 80099e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1e5      	bne.n	80099b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d119      	bne.n	8009a28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	330c      	adds	r3, #12
 80099fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	e853 3f00 	ldrex	r3, [r3]
 8009a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	f023 0310 	bic.w	r3, r3, #16
 8009a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	330c      	adds	r3, #12
 8009a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a14:	61ba      	str	r2, [r7, #24]
 8009a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a18:	6979      	ldr	r1, [r7, #20]
 8009a1a:	69ba      	ldr	r2, [r7, #24]
 8009a1c:	e841 2300 	strex	r3, r2, [r1]
 8009a20:	613b      	str	r3, [r7, #16]
   return(result);
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1e5      	bne.n	80099f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2220      	movs	r2, #32
 8009a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009a36:	bf00      	nop
 8009a38:	3754      	adds	r7, #84	; 0x54
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2200      	movs	r2, #0
 8009a54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f7ff ff09 	bl	8009874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a62:	bf00      	nop
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b085      	sub	sp, #20
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	2b21      	cmp	r3, #33	; 0x21
 8009a7c:	d13e      	bne.n	8009afc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a86:	d114      	bne.n	8009ab2 <UART_Transmit_IT+0x48>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d110      	bne.n	8009ab2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6a1b      	ldr	r3, [r3, #32]
 8009a94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	881b      	ldrh	r3, [r3, #0]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009aa4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
 8009aaa:	1c9a      	adds	r2, r3, #2
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	621a      	str	r2, [r3, #32]
 8009ab0:	e008      	b.n	8009ac4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	1c59      	adds	r1, r3, #1
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	6211      	str	r1, [r2, #32]
 8009abc:	781a      	ldrb	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	3b01      	subs	r3, #1
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10f      	bne.n	8009af8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68da      	ldr	r2, [r3, #12]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ae6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68da      	ldr	r2, [r3, #12]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009af6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	e000      	b.n	8009afe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009afc:	2302      	movs	r3, #2
  }
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b082      	sub	sp, #8
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68da      	ldr	r2, [r3, #12]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2220      	movs	r2, #32
 8009b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f7ff fe8e 	bl	800984c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b08c      	sub	sp, #48	; 0x30
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	2b22      	cmp	r3, #34	; 0x22
 8009b4c:	f040 80ab 	bne.w	8009ca6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b58:	d117      	bne.n	8009b8a <UART_Receive_IT+0x50>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d113      	bne.n	8009b8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b62:	2300      	movs	r3, #0
 8009b64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b82:	1c9a      	adds	r2, r3, #2
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	629a      	str	r2, [r3, #40]	; 0x28
 8009b88:	e026      	b.n	8009bd8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009b90:	2300      	movs	r3, #0
 8009b92:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b9c:	d007      	beq.n	8009bae <UART_Receive_IT+0x74>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d10a      	bne.n	8009bbc <UART_Receive_IT+0x82>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d106      	bne.n	8009bbc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb8:	701a      	strb	r2, [r3, #0]
 8009bba:	e008      	b.n	8009bce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bc8:	b2da      	uxtb	r2, r3
 8009bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bcc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd2:	1c5a      	adds	r2, r3, #1
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	3b01      	subs	r3, #1
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	4619      	mov	r1, r3
 8009be6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d15a      	bne.n	8009ca2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68da      	ldr	r2, [r3, #12]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f022 0220 	bic.w	r2, r2, #32
 8009bfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68da      	ldr	r2, [r3, #12]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	695a      	ldr	r2, [r3, #20]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f022 0201 	bic.w	r2, r2, #1
 8009c1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2220      	movs	r2, #32
 8009c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d135      	bne.n	8009c98 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	330c      	adds	r3, #12
 8009c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	e853 3f00 	ldrex	r3, [r3]
 8009c40:	613b      	str	r3, [r7, #16]
   return(result);
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	f023 0310 	bic.w	r3, r3, #16
 8009c48:	627b      	str	r3, [r7, #36]	; 0x24
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	330c      	adds	r3, #12
 8009c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c52:	623a      	str	r2, [r7, #32]
 8009c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c56:	69f9      	ldr	r1, [r7, #28]
 8009c58:	6a3a      	ldr	r2, [r7, #32]
 8009c5a:	e841 2300 	strex	r3, r2, [r1]
 8009c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1e5      	bne.n	8009c32 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 0310 	and.w	r3, r3, #16
 8009c70:	2b10      	cmp	r3, #16
 8009c72:	d10a      	bne.n	8009c8a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c74:	2300      	movs	r3, #0
 8009c76:	60fb      	str	r3, [r7, #12]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	60fb      	str	r3, [r7, #12]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	60fb      	str	r3, [r7, #12]
 8009c88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7ff fdf9 	bl	8009888 <HAL_UARTEx_RxEventCallback>
 8009c96:	e002      	b.n	8009c9e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f7ff fde1 	bl	8009860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	e002      	b.n	8009ca8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	e000      	b.n	8009ca8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009ca6:	2302      	movs	r3, #2
  }
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3730      	adds	r7, #48	; 0x30
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb4:	b09f      	sub	sp, #124	; 0x7c
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cc6:	68d9      	ldr	r1, [r3, #12]
 8009cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	ea40 0301 	orr.w	r3, r0, r1
 8009cd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cd4:	689a      	ldr	r2, [r3, #8]
 8009cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	431a      	orrs	r2, r3
 8009cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cde:	695b      	ldr	r3, [r3, #20]
 8009ce0:	431a      	orrs	r2, r3
 8009ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ce4:	69db      	ldr	r3, [r3, #28]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009cf4:	f021 010c 	bic.w	r1, r1, #12
 8009cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cfe:	430b      	orrs	r3, r1
 8009d00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d0e:	6999      	ldr	r1, [r3, #24]
 8009d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	ea40 0301 	orr.w	r3, r0, r1
 8009d18:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	4bc5      	ldr	r3, [pc, #788]	; (800a034 <UART_SetConfig+0x384>)
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d004      	beq.n	8009d2e <UART_SetConfig+0x7e>
 8009d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	4bc3      	ldr	r3, [pc, #780]	; (800a038 <UART_SetConfig+0x388>)
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d103      	bne.n	8009d36 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d2e:	f7fd f84f 	bl	8006dd0 <HAL_RCC_GetPCLK2Freq>
 8009d32:	6778      	str	r0, [r7, #116]	; 0x74
 8009d34:	e002      	b.n	8009d3c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d36:	f7fd f837 	bl	8006da8 <HAL_RCC_GetPCLK1Freq>
 8009d3a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d3e:	69db      	ldr	r3, [r3, #28]
 8009d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d44:	f040 80b6 	bne.w	8009eb4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d4a:	461c      	mov	r4, r3
 8009d4c:	f04f 0500 	mov.w	r5, #0
 8009d50:	4622      	mov	r2, r4
 8009d52:	462b      	mov	r3, r5
 8009d54:	1891      	adds	r1, r2, r2
 8009d56:	6439      	str	r1, [r7, #64]	; 0x40
 8009d58:	415b      	adcs	r3, r3
 8009d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8009d5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d60:	1912      	adds	r2, r2, r4
 8009d62:	eb45 0303 	adc.w	r3, r5, r3
 8009d66:	f04f 0000 	mov.w	r0, #0
 8009d6a:	f04f 0100 	mov.w	r1, #0
 8009d6e:	00d9      	lsls	r1, r3, #3
 8009d70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d74:	00d0      	lsls	r0, r2, #3
 8009d76:	4602      	mov	r2, r0
 8009d78:	460b      	mov	r3, r1
 8009d7a:	1911      	adds	r1, r2, r4
 8009d7c:	6639      	str	r1, [r7, #96]	; 0x60
 8009d7e:	416b      	adcs	r3, r5
 8009d80:	667b      	str	r3, [r7, #100]	; 0x64
 8009d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	461a      	mov	r2, r3
 8009d88:	f04f 0300 	mov.w	r3, #0
 8009d8c:	1891      	adds	r1, r2, r2
 8009d8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009d90:	415b      	adcs	r3, r3
 8009d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d98:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009d9c:	f7f6 ff94 	bl	8000cc8 <__aeabi_uldivmod>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	4ba5      	ldr	r3, [pc, #660]	; (800a03c <UART_SetConfig+0x38c>)
 8009da6:	fba3 2302 	umull	r2, r3, r3, r2
 8009daa:	095b      	lsrs	r3, r3, #5
 8009dac:	011e      	lsls	r6, r3, #4
 8009dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009db0:	461c      	mov	r4, r3
 8009db2:	f04f 0500 	mov.w	r5, #0
 8009db6:	4622      	mov	r2, r4
 8009db8:	462b      	mov	r3, r5
 8009dba:	1891      	adds	r1, r2, r2
 8009dbc:	6339      	str	r1, [r7, #48]	; 0x30
 8009dbe:	415b      	adcs	r3, r3
 8009dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8009dc2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009dc6:	1912      	adds	r2, r2, r4
 8009dc8:	eb45 0303 	adc.w	r3, r5, r3
 8009dcc:	f04f 0000 	mov.w	r0, #0
 8009dd0:	f04f 0100 	mov.w	r1, #0
 8009dd4:	00d9      	lsls	r1, r3, #3
 8009dd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009dda:	00d0      	lsls	r0, r2, #3
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	1911      	adds	r1, r2, r4
 8009de2:	65b9      	str	r1, [r7, #88]	; 0x58
 8009de4:	416b      	adcs	r3, r5
 8009de6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	461a      	mov	r2, r3
 8009dee:	f04f 0300 	mov.w	r3, #0
 8009df2:	1891      	adds	r1, r2, r2
 8009df4:	62b9      	str	r1, [r7, #40]	; 0x28
 8009df6:	415b      	adcs	r3, r3
 8009df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009dfe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009e02:	f7f6 ff61 	bl	8000cc8 <__aeabi_uldivmod>
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	4b8c      	ldr	r3, [pc, #560]	; (800a03c <UART_SetConfig+0x38c>)
 8009e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8009e10:	095b      	lsrs	r3, r3, #5
 8009e12:	2164      	movs	r1, #100	; 0x64
 8009e14:	fb01 f303 	mul.w	r3, r1, r3
 8009e18:	1ad3      	subs	r3, r2, r3
 8009e1a:	00db      	lsls	r3, r3, #3
 8009e1c:	3332      	adds	r3, #50	; 0x32
 8009e1e:	4a87      	ldr	r2, [pc, #540]	; (800a03c <UART_SetConfig+0x38c>)
 8009e20:	fba2 2303 	umull	r2, r3, r2, r3
 8009e24:	095b      	lsrs	r3, r3, #5
 8009e26:	005b      	lsls	r3, r3, #1
 8009e28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e2c:	441e      	add	r6, r3
 8009e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e30:	4618      	mov	r0, r3
 8009e32:	f04f 0100 	mov.w	r1, #0
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	1894      	adds	r4, r2, r2
 8009e3c:	623c      	str	r4, [r7, #32]
 8009e3e:	415b      	adcs	r3, r3
 8009e40:	627b      	str	r3, [r7, #36]	; 0x24
 8009e42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e46:	1812      	adds	r2, r2, r0
 8009e48:	eb41 0303 	adc.w	r3, r1, r3
 8009e4c:	f04f 0400 	mov.w	r4, #0
 8009e50:	f04f 0500 	mov.w	r5, #0
 8009e54:	00dd      	lsls	r5, r3, #3
 8009e56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009e5a:	00d4      	lsls	r4, r2, #3
 8009e5c:	4622      	mov	r2, r4
 8009e5e:	462b      	mov	r3, r5
 8009e60:	1814      	adds	r4, r2, r0
 8009e62:	653c      	str	r4, [r7, #80]	; 0x50
 8009e64:	414b      	adcs	r3, r1
 8009e66:	657b      	str	r3, [r7, #84]	; 0x54
 8009e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	f04f 0300 	mov.w	r3, #0
 8009e72:	1891      	adds	r1, r2, r2
 8009e74:	61b9      	str	r1, [r7, #24]
 8009e76:	415b      	adcs	r3, r3
 8009e78:	61fb      	str	r3, [r7, #28]
 8009e7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e7e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009e82:	f7f6 ff21 	bl	8000cc8 <__aeabi_uldivmod>
 8009e86:	4602      	mov	r2, r0
 8009e88:	460b      	mov	r3, r1
 8009e8a:	4b6c      	ldr	r3, [pc, #432]	; (800a03c <UART_SetConfig+0x38c>)
 8009e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8009e90:	095b      	lsrs	r3, r3, #5
 8009e92:	2164      	movs	r1, #100	; 0x64
 8009e94:	fb01 f303 	mul.w	r3, r1, r3
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	00db      	lsls	r3, r3, #3
 8009e9c:	3332      	adds	r3, #50	; 0x32
 8009e9e:	4a67      	ldr	r2, [pc, #412]	; (800a03c <UART_SetConfig+0x38c>)
 8009ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea4:	095b      	lsrs	r3, r3, #5
 8009ea6:	f003 0207 	and.w	r2, r3, #7
 8009eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4432      	add	r2, r6
 8009eb0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009eb2:	e0b9      	b.n	800a028 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009eb6:	461c      	mov	r4, r3
 8009eb8:	f04f 0500 	mov.w	r5, #0
 8009ebc:	4622      	mov	r2, r4
 8009ebe:	462b      	mov	r3, r5
 8009ec0:	1891      	adds	r1, r2, r2
 8009ec2:	6139      	str	r1, [r7, #16]
 8009ec4:	415b      	adcs	r3, r3
 8009ec6:	617b      	str	r3, [r7, #20]
 8009ec8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009ecc:	1912      	adds	r2, r2, r4
 8009ece:	eb45 0303 	adc.w	r3, r5, r3
 8009ed2:	f04f 0000 	mov.w	r0, #0
 8009ed6:	f04f 0100 	mov.w	r1, #0
 8009eda:	00d9      	lsls	r1, r3, #3
 8009edc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009ee0:	00d0      	lsls	r0, r2, #3
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	eb12 0804 	adds.w	r8, r2, r4
 8009eea:	eb43 0905 	adc.w	r9, r3, r5
 8009eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f04f 0100 	mov.w	r1, #0
 8009ef8:	f04f 0200 	mov.w	r2, #0
 8009efc:	f04f 0300 	mov.w	r3, #0
 8009f00:	008b      	lsls	r3, r1, #2
 8009f02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f06:	0082      	lsls	r2, r0, #2
 8009f08:	4640      	mov	r0, r8
 8009f0a:	4649      	mov	r1, r9
 8009f0c:	f7f6 fedc 	bl	8000cc8 <__aeabi_uldivmod>
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	4b49      	ldr	r3, [pc, #292]	; (800a03c <UART_SetConfig+0x38c>)
 8009f16:	fba3 2302 	umull	r2, r3, r3, r2
 8009f1a:	095b      	lsrs	r3, r3, #5
 8009f1c:	011e      	lsls	r6, r3, #4
 8009f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f20:	4618      	mov	r0, r3
 8009f22:	f04f 0100 	mov.w	r1, #0
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	1894      	adds	r4, r2, r2
 8009f2c:	60bc      	str	r4, [r7, #8]
 8009f2e:	415b      	adcs	r3, r3
 8009f30:	60fb      	str	r3, [r7, #12]
 8009f32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f36:	1812      	adds	r2, r2, r0
 8009f38:	eb41 0303 	adc.w	r3, r1, r3
 8009f3c:	f04f 0400 	mov.w	r4, #0
 8009f40:	f04f 0500 	mov.w	r5, #0
 8009f44:	00dd      	lsls	r5, r3, #3
 8009f46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009f4a:	00d4      	lsls	r4, r2, #3
 8009f4c:	4622      	mov	r2, r4
 8009f4e:	462b      	mov	r3, r5
 8009f50:	1814      	adds	r4, r2, r0
 8009f52:	64bc      	str	r4, [r7, #72]	; 0x48
 8009f54:	414b      	adcs	r3, r1
 8009f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f04f 0100 	mov.w	r1, #0
 8009f62:	f04f 0200 	mov.w	r2, #0
 8009f66:	f04f 0300 	mov.w	r3, #0
 8009f6a:	008b      	lsls	r3, r1, #2
 8009f6c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f70:	0082      	lsls	r2, r0, #2
 8009f72:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009f76:	f7f6 fea7 	bl	8000cc8 <__aeabi_uldivmod>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	4b2f      	ldr	r3, [pc, #188]	; (800a03c <UART_SetConfig+0x38c>)
 8009f80:	fba3 1302 	umull	r1, r3, r3, r2
 8009f84:	095b      	lsrs	r3, r3, #5
 8009f86:	2164      	movs	r1, #100	; 0x64
 8009f88:	fb01 f303 	mul.w	r3, r1, r3
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	011b      	lsls	r3, r3, #4
 8009f90:	3332      	adds	r3, #50	; 0x32
 8009f92:	4a2a      	ldr	r2, [pc, #168]	; (800a03c <UART_SetConfig+0x38c>)
 8009f94:	fba2 2303 	umull	r2, r3, r2, r3
 8009f98:	095b      	lsrs	r3, r3, #5
 8009f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f9e:	441e      	add	r6, r3
 8009fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f04f 0100 	mov.w	r1, #0
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	1894      	adds	r4, r2, r2
 8009fae:	603c      	str	r4, [r7, #0]
 8009fb0:	415b      	adcs	r3, r3
 8009fb2:	607b      	str	r3, [r7, #4]
 8009fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fb8:	1812      	adds	r2, r2, r0
 8009fba:	eb41 0303 	adc.w	r3, r1, r3
 8009fbe:	f04f 0400 	mov.w	r4, #0
 8009fc2:	f04f 0500 	mov.w	r5, #0
 8009fc6:	00dd      	lsls	r5, r3, #3
 8009fc8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009fcc:	00d4      	lsls	r4, r2, #3
 8009fce:	4622      	mov	r2, r4
 8009fd0:	462b      	mov	r3, r5
 8009fd2:	eb12 0a00 	adds.w	sl, r2, r0
 8009fd6:	eb43 0b01 	adc.w	fp, r3, r1
 8009fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f04f 0100 	mov.w	r1, #0
 8009fe4:	f04f 0200 	mov.w	r2, #0
 8009fe8:	f04f 0300 	mov.w	r3, #0
 8009fec:	008b      	lsls	r3, r1, #2
 8009fee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009ff2:	0082      	lsls	r2, r0, #2
 8009ff4:	4650      	mov	r0, sl
 8009ff6:	4659      	mov	r1, fp
 8009ff8:	f7f6 fe66 	bl	8000cc8 <__aeabi_uldivmod>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	460b      	mov	r3, r1
 800a000:	4b0e      	ldr	r3, [pc, #56]	; (800a03c <UART_SetConfig+0x38c>)
 800a002:	fba3 1302 	umull	r1, r3, r3, r2
 800a006:	095b      	lsrs	r3, r3, #5
 800a008:	2164      	movs	r1, #100	; 0x64
 800a00a:	fb01 f303 	mul.w	r3, r1, r3
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	011b      	lsls	r3, r3, #4
 800a012:	3332      	adds	r3, #50	; 0x32
 800a014:	4a09      	ldr	r2, [pc, #36]	; (800a03c <UART_SetConfig+0x38c>)
 800a016:	fba2 2303 	umull	r2, r3, r2, r3
 800a01a:	095b      	lsrs	r3, r3, #5
 800a01c:	f003 020f 	and.w	r2, r3, #15
 800a020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4432      	add	r2, r6
 800a026:	609a      	str	r2, [r3, #8]
}
 800a028:	bf00      	nop
 800a02a:	377c      	adds	r7, #124	; 0x7c
 800a02c:	46bd      	mov	sp, r7
 800a02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a032:	bf00      	nop
 800a034:	40011000 	.word	0x40011000
 800a038:	40011400 	.word	0x40011400
 800a03c:	51eb851f 	.word	0x51eb851f

0800a040 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800a04e:	6839      	ldr	r1, [r7, #0]
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f001 fca4 	bl	800b99e <VL53L0X_get_offset_calibration_data_micro_meter>
 800a056:	4603      	mov	r3, r0
 800a058:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800a05a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b084      	sub	sp, #16
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
 800a06e:	460b      	mov	r3, r1
 800a070:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a072:	2300      	movs	r3, #0
 800a074:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 800a076:	78fb      	ldrb	r3, [r7, #3]
 800a078:	085b      	lsrs	r3, r3, #1
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	461a      	mov	r2, r3
 800a07e:	218a      	movs	r1, #138	; 0x8a
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f004 fc03 	bl	800e88c <VL53L0X_WrByte>
 800a086:	4603      	mov	r3, r0
 800a088:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 800a08a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800a098:	b5b0      	push	{r4, r5, r7, lr}
 800a09a:	b096      	sub	sp, #88	; 0x58
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800a0a6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d107      	bne.n	800a0be <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	2188      	movs	r1, #136	; 0x88
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f004 fbea 	bl	800e88c <VL53L0X_WrByte>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a0cc:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a0d6:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a9e      	ldr	r2, [pc, #632]	; (800a358 <VL53L0X_DataInit+0x2c0>)
 800a0de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4a9d      	ldr	r2, [pc, #628]	; (800a35c <VL53L0X_DataInit+0x2c4>)
 800a0e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800a0f0:	f107 0310 	add.w	r3, r7, #16
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 fab4 	bl	800a664 <VL53L0X_GetDeviceParameters>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800a102:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a106:	2b00      	cmp	r3, #0
 800a108:	d112      	bne.n	800a130 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800a10a:	2300      	movs	r3, #0
 800a10c:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800a10e:	2300      	movs	r3, #0
 800a110:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f103 0410 	add.w	r4, r3, #16
 800a118:	f107 0510 	add.w	r5, r7, #16
 800a11c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a11e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a128:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a12c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2264      	movs	r2, #100	; 0x64
 800a134:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800a13e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a148:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800a152:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2201      	movs	r2, #1
 800a15a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a15e:	2201      	movs	r2, #1
 800a160:	2180      	movs	r1, #128	; 0x80
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f004 fb92 	bl	800e88c <VL53L0X_WrByte>
 800a168:	4603      	mov	r3, r0
 800a16a:	461a      	mov	r2, r3
 800a16c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a170:	4313      	orrs	r3, r2
 800a172:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a176:	2201      	movs	r2, #1
 800a178:	21ff      	movs	r1, #255	; 0xff
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f004 fb86 	bl	800e88c <VL53L0X_WrByte>
 800a180:	4603      	mov	r3, r0
 800a182:	461a      	mov	r2, r3
 800a184:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a188:	4313      	orrs	r3, r2
 800a18a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a18e:	2200      	movs	r2, #0
 800a190:	2100      	movs	r1, #0
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f004 fb7a 	bl	800e88c <VL53L0X_WrByte>
 800a198:	4603      	mov	r3, r0
 800a19a:	461a      	mov	r2, r3
 800a19c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800a1a6:	f107 030f 	add.w	r3, r7, #15
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	2191      	movs	r1, #145	; 0x91
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f004 fbee 	bl	800e990 <VL53L0X_RdByte>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800a1c2:	7bfa      	ldrb	r2, [r7, #15]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f004 fb5c 	bl	800e88c <VL53L0X_WrByte>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	21ff      	movs	r1, #255	; 0xff
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f004 fb50 	bl	800e88c <VL53L0X_WrByte>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	2180      	movs	r1, #128	; 0x80
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f004 fb44 	bl	800e88c <VL53L0X_WrByte>
 800a204:	4603      	mov	r3, r0
 800a206:	461a      	mov	r2, r3
 800a208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a20c:	4313      	orrs	r3, r2
 800a20e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a212:	2300      	movs	r3, #0
 800a214:	653b      	str	r3, [r7, #80]	; 0x50
 800a216:	e014      	b.n	800a242 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800a218:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d114      	bne.n	800a24a <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800a220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a222:	b29b      	uxth	r3, r3
 800a224:	2201      	movs	r2, #1
 800a226:	4619      	mov	r1, r3
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fd0f 	bl	800ac4c <VL53L0X_SetLimitCheckEnable>
 800a22e:	4603      	mov	r3, r0
 800a230:	461a      	mov	r2, r3
 800a232:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a236:	4313      	orrs	r3, r2
 800a238:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a23c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a23e:	3301      	adds	r3, #1
 800a240:	653b      	str	r3, [r7, #80]	; 0x50
 800a242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a244:	2b05      	cmp	r3, #5
 800a246:	dde7      	ble.n	800a218 <VL53L0X_DataInit+0x180>
 800a248:	e000      	b.n	800a24c <VL53L0X_DataInit+0x1b4>
		else
			break;
 800a24a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800a24c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a250:	2b00      	cmp	r3, #0
 800a252:	d107      	bne.n	800a264 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a254:	2200      	movs	r2, #0
 800a256:	2102      	movs	r1, #2
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 fcf7 	bl	800ac4c <VL53L0X_SetLimitCheckEnable>
 800a25e:	4603      	mov	r3, r0
 800a260:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a264:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d107      	bne.n	800a27c <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a26c:	2200      	movs	r2, #0
 800a26e:	2103      	movs	r1, #3
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 fceb 	bl	800ac4c <VL53L0X_SetLimitCheckEnable>
 800a276:	4603      	mov	r3, r0
 800a278:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a27c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a280:	2b00      	cmp	r3, #0
 800a282:	d107      	bne.n	800a294 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a284:	2200      	movs	r2, #0
 800a286:	2104      	movs	r1, #4
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fcdf 	bl	800ac4c <VL53L0X_SetLimitCheckEnable>
 800a28e:	4603      	mov	r3, r0
 800a290:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a294:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d107      	bne.n	800a2ac <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a29c:	2200      	movs	r2, #0
 800a29e:	2105      	movs	r1, #5
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 fcd3 	bl	800ac4c <VL53L0X_SetLimitCheckEnable>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800a2ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d108      	bne.n	800a2c6 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a2b4:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fd76 	bl	800adac <VL53L0X_SetLimitCheckValue>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a2c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d108      	bne.n	800a2e0 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a2ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a2d2:	2101      	movs	r1, #1
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fd69 	bl	800adac <VL53L0X_SetLimitCheckValue>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a2e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d108      	bne.n	800a2fa <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a2e8:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800a2ec:	2102      	movs	r1, #2
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fd5c 	bl	800adac <VL53L0X_SetLimitCheckValue>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a2fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d107      	bne.n	800a312 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a302:	2200      	movs	r2, #0
 800a304:	2103      	movs	r1, #3
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fd50 	bl	800adac <VL53L0X_SetLimitCheckValue>
 800a30c:	4603      	mov	r3, r0
 800a30e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a312:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10f      	bne.n	800a33a <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	22ff      	movs	r2, #255	; 0xff
 800a31e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a322:	22ff      	movs	r2, #255	; 0xff
 800a324:	2101      	movs	r1, #1
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f004 fab0 	bl	800e88c <VL53L0X_WrByte>
 800a32c:	4603      	mov	r3, r0
 800a32e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2201      	movs	r2, #1
 800a336:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a33a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d103      	bne.n	800a34a <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800a34a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3758      	adds	r7, #88	; 0x58
 800a352:	46bd      	mov	sp, r7
 800a354:	bdb0      	pop	{r4, r5, r7, pc}
 800a356:	bf00      	nop
 800a358:	00016b85 	.word	0x00016b85
 800a35c:	000970a4 	.word	0x000970a4

0800a360 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800a360:	b5b0      	push	{r4, r5, r7, lr}
 800a362:	b09e      	sub	sp, #120	; 0x78
 800a364:	af02      	add	r7, sp, #8
 800a366:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a368:	2300      	movs	r3, #0
 800a36a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800a36e:	f107 031c 	add.w	r3, r7, #28
 800a372:	2240      	movs	r2, #64	; 0x40
 800a374:	2100      	movs	r1, #0
 800a376:	4618      	mov	r0, r3
 800a378:	f006 fe69 	bl	801104e <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800a380:	2300      	movs	r3, #0
 800a382:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800a384:	2300      	movs	r3, #0
 800a386:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800a38a:	2300      	movs	r3, #0
 800a38c:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800a38e:	2300      	movs	r3, #0
 800a390:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800a392:	2300      	movs	r3, #0
 800a394:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800a396:	2300      	movs	r3, #0
 800a398:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800a39c:	2101      	movs	r1, #1
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f002 fa40 	bl	800c824 <VL53L0X_get_info_from_device>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800a3b0:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800a3b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800a3bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d80d      	bhi.n	800a3e0 <VL53L0X_StaticInit+0x80>
 800a3c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d102      	bne.n	800a3d2 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800a3cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3ce:	2b20      	cmp	r3, #32
 800a3d0:	d806      	bhi.n	800a3e0 <VL53L0X_StaticInit+0x80>
 800a3d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d10e      	bne.n	800a3f8 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800a3da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3dc:	2b0c      	cmp	r3, #12
 800a3de:	d90b      	bls.n	800a3f8 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800a3e0:	f107 0218 	add.w	r2, r7, #24
 800a3e4:	f107 0314 	add.w	r3, r7, #20
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f001 fcd2 	bl	800bd94 <VL53L0X_perform_ref_spad_management>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800a3f6:	e009      	b.n	800a40c <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800a3f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f001 fed3 	bl	800c1ac <VL53L0X_set_reference_spads>
 800a406:	4603      	mov	r3, r0
 800a408:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800a40c:	4b94      	ldr	r3, [pc, #592]	; (800a660 <VL53L0X_StaticInit+0x300>)
 800a40e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800a410:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10f      	bne.n	800a438 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800a41e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800a422:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a426:	2b00      	cmp	r3, #0
 800a428:	d104      	bne.n	800a434 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a430:	66bb      	str	r3, [r7, #104]	; 0x68
 800a432:	e001      	b.n	800a438 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800a434:	4b8a      	ldr	r3, [pc, #552]	; (800a660 <VL53L0X_StaticInit+0x300>)
 800a436:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a438:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d106      	bne.n	800a44e <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800a440:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f003 fb0c 	bl	800da60 <VL53L0X_load_tuning_settings>
 800a448:	4603      	mov	r3, r0
 800a44a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800a44e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10a      	bne.n	800a46c <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800a456:	2300      	movs	r3, #0
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	2304      	movs	r3, #4
 800a45c:	2200      	movs	r2, #0
 800a45e:	2100      	movs	r1, #0
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f001 f8cb 	bl	800b5fc <VL53L0X_SetGpioConfig>
 800a466:	4603      	mov	r3, r0
 800a468:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a46c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a470:	2b00      	cmp	r3, #0
 800a472:	d121      	bne.n	800a4b8 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a474:	2201      	movs	r2, #1
 800a476:	21ff      	movs	r1, #255	; 0xff
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f004 fa07 	bl	800e88c <VL53L0X_WrByte>
 800a47e:	4603      	mov	r3, r0
 800a480:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800a484:	f107 031a 	add.w	r3, r7, #26
 800a488:	461a      	mov	r2, r3
 800a48a:	2184      	movs	r1, #132	; 0x84
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f004 faa9 	bl	800e9e4 <VL53L0X_RdWord>
 800a492:	4603      	mov	r3, r0
 800a494:	461a      	mov	r2, r3
 800a496:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a49a:	4313      	orrs	r3, r2
 800a49c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	21ff      	movs	r1, #255	; 0xff
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f004 f9f1 	bl	800e88c <VL53L0X_WrByte>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a4b8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d105      	bne.n	800a4cc <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800a4c0:	8b7b      	ldrh	r3, [r7, #26]
 800a4c2:	011b      	lsls	r3, r3, #4
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800a4cc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d108      	bne.n	800a4e6 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800a4d4:	f107 031c 	add.w	r3, r7, #28
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f8c2 	bl	800a664 <VL53L0X_GetDeviceParameters>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800a4e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d110      	bne.n	800a510 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800a4ee:	f107 0319 	add.w	r3, r7, #25
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f984 	bl	800a802 <VL53L0X_GetFractionEnable>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800a500:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a504:	2b00      	cmp	r3, #0
 800a506:	d103      	bne.n	800a510 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800a508:	7e7a      	ldrb	r2, [r7, #25]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a510:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10e      	bne.n	800a536 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f103 0410 	add.w	r4, r3, #16
 800a51e:	f107 051c 	add.w	r5, r7, #28
 800a522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a52a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a52c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a52e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a532:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800a536:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d111      	bne.n	800a562 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800a53e:	f107 0319 	add.w	r3, r7, #25
 800a542:	461a      	mov	r2, r3
 800a544:	2101      	movs	r1, #1
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f004 fa22 	bl	800e990 <VL53L0X_RdByte>
 800a54c:	4603      	mov	r3, r0
 800a54e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800a552:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a556:	2b00      	cmp	r3, #0
 800a558:	d103      	bne.n	800a562 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800a55a:	7e7a      	ldrb	r2, [r7, #25]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800a562:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a566:	2b00      	cmp	r3, #0
 800a568:	d107      	bne.n	800a57a <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a56a:	2200      	movs	r2, #0
 800a56c:	2100      	movs	r1, #0
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f9a4 	bl	800a8bc <VL53L0X_SetSequenceStepEnable>
 800a574:	4603      	mov	r3, r0
 800a576:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a57a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d107      	bne.n	800a592 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a582:	2200      	movs	r2, #0
 800a584:	2102      	movs	r1, #2
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f998 	bl	800a8bc <VL53L0X_SetSequenceStepEnable>
 800a58c:	4603      	mov	r3, r0
 800a58e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800a592:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a596:	2b00      	cmp	r3, #0
 800a598:	d103      	bne.n	800a5a2 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2203      	movs	r2, #3
 800a59e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a5a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d109      	bne.n	800a5be <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a5aa:	f107 0313 	add.w	r3, r7, #19
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f96a 	bl	800a88c <VL53L0X_GetVcselPulsePeriod>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a5be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d103      	bne.n	800a5ce <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a5c6:	7cfa      	ldrb	r2, [r7, #19]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a5ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d109      	bne.n	800a5ea <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a5d6:	f107 0313 	add.w	r3, r7, #19
 800a5da:	461a      	mov	r2, r3
 800a5dc:	2101      	movs	r1, #1
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f954 	bl	800a88c <VL53L0X_GetVcselPulsePeriod>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a5ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d103      	bne.n	800a5fa <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a5f2:	7cfa      	ldrb	r2, [r7, #19]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a5fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d109      	bne.n	800a616 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800a602:	f107 030c 	add.w	r3, r7, #12
 800a606:	461a      	mov	r2, r3
 800a608:	2103      	movs	r1, #3
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f002 fe8c 	bl	800d328 <get_sequence_step_timeout>
 800a610:	4603      	mov	r3, r0
 800a612:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a616:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d103      	bne.n	800a626 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a61e:	68fa      	ldr	r2, [r7, #12]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a626:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d109      	bne.n	800a642 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800a62e:	f107 030c 	add.w	r3, r7, #12
 800a632:	461a      	mov	r2, r3
 800a634:	2104      	movs	r1, #4
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f002 fe76 	bl	800d328 <get_sequence_step_timeout>
 800a63c:	4603      	mov	r3, r0
 800a63e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a642:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a646:	2b00      	cmp	r3, #0
 800a648:	d103      	bne.n	800a652 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a652:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800a656:	4618      	mov	r0, r3
 800a658:	3770      	adds	r7, #112	; 0x70
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bdb0      	pop	{r4, r5, r7, pc}
 800a65e:	bf00      	nop
 800a660:	2000000c 	.word	0x2000000c

0800a664 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a66e:	2300      	movs	r3, #0
 800a670:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	4619      	mov	r1, r3
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f8b0 	bl	800a7dc <VL53L0X_GetDeviceMode>
 800a67c:	4603      	mov	r3, r0
 800a67e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d107      	bne.n	800a698 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	3308      	adds	r3, #8
 800a68c:	4619      	mov	r1, r3
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fa60 	bl	800ab54 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800a694:	4603      	mov	r3, r0
 800a696:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800a698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d102      	bne.n	800a6a6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800a6a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d107      	bne.n	800a6be <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	3310      	adds	r3, #16
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 fa96 	bl	800abe6 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800a6be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d107      	bne.n	800a6d6 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	3314      	adds	r3, #20
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f7ff fcb7 	bl	800a040 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800a6d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d134      	bne.n	800a748 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a6de:	2300      	movs	r3, #0
 800a6e0:	60bb      	str	r3, [r7, #8]
 800a6e2:	e02a      	b.n	800a73a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a6e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d12a      	bne.n	800a742 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	b299      	uxth	r1, r3
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	3308      	adds	r3, #8
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	3304      	adds	r3, #4
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 fbb6 	bl	800ae70 <VL53L0X_GetLimitCheckValue>
 800a704:	4603      	mov	r3, r0
 800a706:	461a      	mov	r2, r3
 800a708:	7bfb      	ldrb	r3, [r7, #15]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a70e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d117      	bne.n	800a746 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	b299      	uxth	r1, r3
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	3318      	adds	r3, #24
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	4413      	add	r3, r2
 800a722:	461a      	mov	r2, r3
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fb1d 	bl	800ad64 <VL53L0X_GetLimitCheckEnable>
 800a72a:	4603      	mov	r3, r0
 800a72c:	461a      	mov	r2, r3
 800a72e:	7bfb      	ldrb	r3, [r7, #15]
 800a730:	4313      	orrs	r3, r2
 800a732:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	3301      	adds	r3, #1
 800a738:	60bb      	str	r3, [r7, #8]
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	2b05      	cmp	r3, #5
 800a73e:	ddd1      	ble.n	800a6e4 <VL53L0X_GetDeviceParameters+0x80>
 800a740:	e002      	b.n	800a748 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800a742:	bf00      	nop
 800a744:	e000      	b.n	800a748 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800a746:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d107      	bne.n	800a760 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	333c      	adds	r3, #60	; 0x3c
 800a754:	4619      	mov	r1, r3
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 fc18 	bl	800af8c <VL53L0X_GetWrapAroundCheckEnable>
 800a75c:	4603      	mov	r3, r0
 800a75e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800a760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d107      	bne.n	800a778 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	3304      	adds	r3, #4
 800a76c:	4619      	mov	r1, r3
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 f879 	bl	800a866 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800a774:	4603      	mov	r3, r0
 800a776:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a778:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3710      	adds	r7, #16
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	460b      	mov	r3, r1
 800a78e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a790:	2300      	movs	r3, #0
 800a792:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800a794:	78fb      	ldrb	r3, [r7, #3]
 800a796:	2b15      	cmp	r3, #21
 800a798:	bf8c      	ite	hi
 800a79a:	2201      	movhi	r2, #1
 800a79c:	2200      	movls	r2, #0
 800a79e:	b2d2      	uxtb	r2, r2
 800a7a0:	2a00      	cmp	r2, #0
 800a7a2:	d10e      	bne.n	800a7c2 <VL53L0X_SetDeviceMode+0x3e>
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	409a      	lsls	r2, r3
 800a7a8:	4b0b      	ldr	r3, [pc, #44]	; (800a7d8 <VL53L0X_SetDeviceMode+0x54>)
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	bf14      	ite	ne
 800a7b0:	2301      	movne	r3, #1
 800a7b2:	2300      	moveq	r3, #0
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	78fa      	ldrb	r2, [r7, #3]
 800a7be:	741a      	strb	r2, [r3, #16]
		break;
 800a7c0:	e001      	b.n	800a7c6 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a7c2:	23f8      	movs	r3, #248	; 0xf8
 800a7c4:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a7c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3714      	adds	r7, #20
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	0030000b 	.word	0x0030000b

0800a7dc <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b085      	sub	sp, #20
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	7c1a      	ldrb	r2, [r3, #16]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a7f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3714      	adds	r7, #20
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr

0800a802 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b084      	sub	sp, #16
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
 800a80a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a80c:	2300      	movs	r3, #0
 800a80e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800a810:	683a      	ldr	r2, [r7, #0]
 800a812:	2109      	movs	r1, #9
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f004 f8bb 	bl	800e990 <VL53L0X_RdByte>
 800a81a:	4603      	mov	r3, r0
 800a81c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a81e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d106      	bne.n	800a834 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	f003 0301 	and.w	r3, r3, #1
 800a82e:	b2da      	uxtb	r2, r3
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a834:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a84a:	2300      	movs	r3, #0
 800a84c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800a84e:	6839      	ldr	r1, [r7, #0]
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f002 ff73 	bl	800d73c <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800a856:	4603      	mov	r3, r0
 800a858:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800a85a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b084      	sub	sp, #16
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a870:	2300      	movs	r3, #0
 800a872:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800a874:	6839      	ldr	r1, [r7, #0]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f003 f840 	bl	800d8fc <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800a87c:	4603      	mov	r3, r0
 800a87e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800a880:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	460b      	mov	r3, r1
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a89a:	2300      	movs	r3, #0
 800a89c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800a89e:	7afb      	ldrb	r3, [r7, #11]
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f002 ff12 	bl	800d6ce <VL53L0X_get_vcsel_pulse_period>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a8ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3718      	adds	r7, #24
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
	...

0800a8bc <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	70fb      	strb	r3, [r7, #3]
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a8d8:	f107 030f 	add.w	r3, r7, #15
 800a8dc:	461a      	mov	r2, r3
 800a8de:	2101      	movs	r1, #1
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f004 f855 	bl	800e990 <VL53L0X_RdByte>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
 800a8ec:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800a8ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d15a      	bne.n	800a9ac <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800a8f6:	78bb      	ldrb	r3, [r7, #2]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d12b      	bne.n	800a954 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800a8fc:	78fb      	ldrb	r3, [r7, #3]
 800a8fe:	2b04      	cmp	r3, #4
 800a900:	d825      	bhi.n	800a94e <VL53L0X_SetSequenceStepEnable+0x92>
 800a902:	a201      	add	r2, pc, #4	; (adr r2, 800a908 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800a904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a908:	0800a91d 	.word	0x0800a91d
 800a90c:	0800a927 	.word	0x0800a927
 800a910:	0800a931 	.word	0x0800a931
 800a914:	0800a93b 	.word	0x0800a93b
 800a918:	0800a945 	.word	0x0800a945
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800a91c:	7dbb      	ldrb	r3, [r7, #22]
 800a91e:	f043 0310 	orr.w	r3, r3, #16
 800a922:	75bb      	strb	r3, [r7, #22]
				break;
 800a924:	e043      	b.n	800a9ae <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800a926:	7dbb      	ldrb	r3, [r7, #22]
 800a928:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800a92c:	75bb      	strb	r3, [r7, #22]
				break;
 800a92e:	e03e      	b.n	800a9ae <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800a930:	7dbb      	ldrb	r3, [r7, #22]
 800a932:	f043 0304 	orr.w	r3, r3, #4
 800a936:	75bb      	strb	r3, [r7, #22]
				break;
 800a938:	e039      	b.n	800a9ae <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800a93a:	7dbb      	ldrb	r3, [r7, #22]
 800a93c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a940:	75bb      	strb	r3, [r7, #22]
				break;
 800a942:	e034      	b.n	800a9ae <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800a944:	7dbb      	ldrb	r3, [r7, #22]
 800a946:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a94a:	75bb      	strb	r3, [r7, #22]
				break;
 800a94c:	e02f      	b.n	800a9ae <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a94e:	23fc      	movs	r3, #252	; 0xfc
 800a950:	75fb      	strb	r3, [r7, #23]
 800a952:	e02c      	b.n	800a9ae <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800a954:	78fb      	ldrb	r3, [r7, #3]
 800a956:	2b04      	cmp	r3, #4
 800a958:	d825      	bhi.n	800a9a6 <VL53L0X_SetSequenceStepEnable+0xea>
 800a95a:	a201      	add	r2, pc, #4	; (adr r2, 800a960 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800a95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a960:	0800a975 	.word	0x0800a975
 800a964:	0800a97f 	.word	0x0800a97f
 800a968:	0800a989 	.word	0x0800a989
 800a96c:	0800a993 	.word	0x0800a993
 800a970:	0800a99d 	.word	0x0800a99d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800a974:	7dbb      	ldrb	r3, [r7, #22]
 800a976:	f023 0310 	bic.w	r3, r3, #16
 800a97a:	75bb      	strb	r3, [r7, #22]
				break;
 800a97c:	e017      	b.n	800a9ae <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800a97e:	7dbb      	ldrb	r3, [r7, #22]
 800a980:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800a984:	75bb      	strb	r3, [r7, #22]
				break;
 800a986:	e012      	b.n	800a9ae <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800a988:	7dbb      	ldrb	r3, [r7, #22]
 800a98a:	f023 0304 	bic.w	r3, r3, #4
 800a98e:	75bb      	strb	r3, [r7, #22]
				break;
 800a990:	e00d      	b.n	800a9ae <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800a992:	7dbb      	ldrb	r3, [r7, #22]
 800a994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a998:	75bb      	strb	r3, [r7, #22]
				break;
 800a99a:	e008      	b.n	800a9ae <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800a99c:	7dbb      	ldrb	r3, [r7, #22]
 800a99e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9a2:	75bb      	strb	r3, [r7, #22]
				break;
 800a9a4:	e003      	b.n	800a9ae <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a9a6:	23fc      	movs	r3, #252	; 0xfc
 800a9a8:	75fb      	strb	r3, [r7, #23]
 800a9aa:	e000      	b.n	800a9ae <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800a9ac:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
 800a9b0:	7dba      	ldrb	r2, [r7, #22]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d01e      	beq.n	800a9f4 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800a9b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d107      	bne.n	800a9ce <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800a9be:	7dbb      	ldrb	r3, [r7, #22]
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	2101      	movs	r1, #1
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f003 ff61 	bl	800e88c <VL53L0X_WrByte>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800a9ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d103      	bne.n	800a9de <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	7dba      	ldrb	r2, [r7, #22]
 800a9da:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800a9de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d106      	bne.n	800a9f4 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	695b      	ldr	r3, [r3, #20]
 800a9ea:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a9ec:	6939      	ldr	r1, [r7, #16]
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f7ff ff26 	bl	800a840 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a9f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3718      	adds	r7, #24
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b087      	sub	sp, #28
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	607b      	str	r3, [r7, #4]
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	72fb      	strb	r3, [r7, #11]
 800aa0e:	4613      	mov	r3, r2
 800aa10:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa12:	2300      	movs	r3, #0
 800aa14:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800aa1c:	7afb      	ldrb	r3, [r7, #11]
 800aa1e:	2b04      	cmp	r3, #4
 800aa20:	d836      	bhi.n	800aa90 <sequence_step_enabled+0x90>
 800aa22:	a201      	add	r2, pc, #4	; (adr r2, 800aa28 <sequence_step_enabled+0x28>)
 800aa24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa28:	0800aa3d 	.word	0x0800aa3d
 800aa2c:	0800aa4f 	.word	0x0800aa4f
 800aa30:	0800aa61 	.word	0x0800aa61
 800aa34:	0800aa73 	.word	0x0800aa73
 800aa38:	0800aa85 	.word	0x0800aa85
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800aa3c:	7abb      	ldrb	r3, [r7, #10]
 800aa3e:	111b      	asrs	r3, r3, #4
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	b2da      	uxtb	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	701a      	strb	r2, [r3, #0]
		break;
 800aa4c:	e022      	b.n	800aa94 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800aa4e:	7abb      	ldrb	r3, [r7, #10]
 800aa50:	10db      	asrs	r3, r3, #3
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	f003 0301 	and.w	r3, r3, #1
 800aa58:	b2da      	uxtb	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	701a      	strb	r2, [r3, #0]
		break;
 800aa5e:	e019      	b.n	800aa94 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800aa60:	7abb      	ldrb	r3, [r7, #10]
 800aa62:	109b      	asrs	r3, r3, #2
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	f003 0301 	and.w	r3, r3, #1
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	701a      	strb	r2, [r3, #0]
		break;
 800aa70:	e010      	b.n	800aa94 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800aa72:	7abb      	ldrb	r3, [r7, #10]
 800aa74:	119b      	asrs	r3, r3, #6
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	f003 0301 	and.w	r3, r3, #1
 800aa7c:	b2da      	uxtb	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	701a      	strb	r2, [r3, #0]
		break;
 800aa82:	e007      	b.n	800aa94 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800aa84:	7abb      	ldrb	r3, [r7, #10]
 800aa86:	09db      	lsrs	r3, r3, #7
 800aa88:	b2da      	uxtb	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	701a      	strb	r2, [r3, #0]
		break;
 800aa8e:	e001      	b.n	800aa94 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aa90:	23fc      	movs	r3, #252	; 0xfc
 800aa92:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	371c      	adds	r7, #28
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aaae:	2300      	movs	r3, #0
 800aab0:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800aab2:	2300      	movs	r3, #0
 800aab4:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800aab6:	f107 030e 	add.w	r3, r7, #14
 800aaba:	461a      	mov	r2, r3
 800aabc:	2101      	movs	r1, #1
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f003 ff66 	bl	800e990 <VL53L0X_RdByte>
 800aac4:	4603      	mov	r3, r0
 800aac6:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800aac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d107      	bne.n	800aae0 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800aad0:	7bba      	ldrb	r2, [r7, #14]
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	2100      	movs	r1, #0
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f7ff ff92 	bl	800aa00 <sequence_step_enabled>
 800aadc:	4603      	mov	r3, r0
 800aade:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800aae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d108      	bne.n	800aafa <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800aae8:	7bba      	ldrb	r2, [r7, #14]
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	3302      	adds	r3, #2
 800aaee:	2101      	movs	r1, #1
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f7ff ff85 	bl	800aa00 <sequence_step_enabled>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800aafa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d108      	bne.n	800ab14 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800ab02:	7bba      	ldrb	r2, [r7, #14]
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	3301      	adds	r3, #1
 800ab08:	2102      	movs	r1, #2
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f7ff ff78 	bl	800aa00 <sequence_step_enabled>
 800ab10:	4603      	mov	r3, r0
 800ab12:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ab14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d108      	bne.n	800ab2e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800ab1c:	7bba      	ldrb	r2, [r7, #14]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	3303      	adds	r3, #3
 800ab22:	2103      	movs	r1, #3
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7ff ff6b 	bl	800aa00 <sequence_step_enabled>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ab2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d108      	bne.n	800ab48 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800ab36:	7bba      	ldrb	r2, [r7, #14]
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	3304      	adds	r3, #4
 800ab3c:	2104      	movs	r1, #4
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f7ff ff5e 	bl	800aa00 <sequence_step_enabled>
 800ab44:	4603      	mov	r3, r0
 800ab46:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ab48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800ab62:	f107 030c 	add.w	r3, r7, #12
 800ab66:	461a      	mov	r2, r3
 800ab68:	21f8      	movs	r1, #248	; 0xf8
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f003 ff3a 	bl	800e9e4 <VL53L0X_RdWord>
 800ab70:	4603      	mov	r3, r0
 800ab72:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800ab74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d108      	bne.n	800ab8e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800ab7c:	f107 0308 	add.w	r3, r7, #8
 800ab80:	461a      	mov	r2, r3
 800ab82:	2104      	movs	r1, #4
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f003 ff65 	bl	800ea54 <VL53L0X_RdDWord>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ab8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d10c      	bne.n	800abb0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800ab96:	89bb      	ldrh	r3, [r7, #12]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d005      	beq.n	800aba8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	89ba      	ldrh	r2, [r7, #12]
 800aba0:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800abb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3710      	adds	r7, #16
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abc6:	2300      	movs	r3, #0
 800abc8:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	7f1b      	ldrb	r3, [r3, #28]
 800abce:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	7bba      	ldrb	r2, [r7, #14]
 800abd4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800abd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3714      	adds	r7, #20
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr

0800abe6 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b086      	sub	sp, #24
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
 800abee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abf0:	2300      	movs	r3, #0
 800abf2:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800abf4:	f107 030e 	add.w	r3, r7, #14
 800abf8:	461a      	mov	r2, r3
 800abfa:	2120      	movs	r1, #32
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f003 fef1 	bl	800e9e4 <VL53L0X_RdWord>
 800ac02:	4603      	mov	r3, r0
 800ac04:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800ac06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d118      	bne.n	800ac40 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800ac0e:	89fb      	ldrh	r3, [r7, #14]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d109      	bne.n	800ac28 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a1b      	ldr	r3, [r3, #32]
 800ac18:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	693a      	ldr	r2, [r7, #16]
 800ac1e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	771a      	strb	r2, [r3, #28]
 800ac26:	e00b      	b.n	800ac40 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800ac28:	89fb      	ldrh	r3, [r7, #14]
 800ac2a:	00db      	lsls	r3, r3, #3
 800ac2c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	693a      	ldr	r2, [r7, #16]
 800ac32:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ac40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3718      	adds	r7, #24
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b086      	sub	sp, #24
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	460b      	mov	r3, r1
 800ac56:	807b      	strh	r3, [r7, #2]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800ac60:	2300      	movs	r3, #0
 800ac62:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800ac6c:	887b      	ldrh	r3, [r7, #2]
 800ac6e:	2b05      	cmp	r3, #5
 800ac70:	d902      	bls.n	800ac78 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ac72:	23fc      	movs	r3, #252	; 0xfc
 800ac74:	75fb      	strb	r3, [r7, #23]
 800ac76:	e05b      	b.n	800ad30 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800ac78:	787b      	ldrb	r3, [r7, #1]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d106      	bne.n	800ac8c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800ac82:	2300      	movs	r3, #0
 800ac84:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800ac86:	2301      	movs	r3, #1
 800ac88:	73bb      	strb	r3, [r7, #14]
 800ac8a:	e00a      	b.n	800aca2 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ac8c:	887b      	ldrh	r3, [r7, #2]
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	330c      	adds	r3, #12
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800aca2:	887b      	ldrh	r3, [r7, #2]
 800aca4:	2b05      	cmp	r3, #5
 800aca6:	d841      	bhi.n	800ad2c <VL53L0X_SetLimitCheckEnable+0xe0>
 800aca8:	a201      	add	r2, pc, #4	; (adr r2, 800acb0 <VL53L0X_SetLimitCheckEnable+0x64>)
 800acaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acae:	bf00      	nop
 800acb0:	0800acc9 	.word	0x0800acc9
 800acb4:	0800acd3 	.word	0x0800acd3
 800acb8:	0800ace9 	.word	0x0800ace9
 800acbc:	0800acf3 	.word	0x0800acf3
 800acc0:	0800acfd 	.word	0x0800acfd
 800acc4:	0800ad15 	.word	0x0800ad15

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	7bfa      	ldrb	r2, [r7, #15]
 800accc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800acd0:	e02e      	b.n	800ad30 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	461a      	mov	r2, r3
 800acda:	2144      	movs	r1, #68	; 0x44
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f003 fdf9 	bl	800e8d4 <VL53L0X_WrWord>
 800ace2:	4603      	mov	r3, r0
 800ace4:	75fb      	strb	r3, [r7, #23]

			break;
 800ace6:	e023      	b.n	800ad30 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	7bfa      	ldrb	r2, [r7, #15]
 800acec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800acf0:	e01e      	b.n	800ad30 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	7bfa      	ldrb	r2, [r7, #15]
 800acf6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800acfa:	e019      	b.n	800ad30 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800acfc:	7bbb      	ldrb	r3, [r7, #14]
 800acfe:	005b      	lsls	r3, r3, #1
 800ad00:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800ad02:	7b7b      	ldrb	r3, [r7, #13]
 800ad04:	22fe      	movs	r2, #254	; 0xfe
 800ad06:	2160      	movs	r1, #96	; 0x60
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f003 fe0d 	bl	800e928 <VL53L0X_UpdateByte>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800ad12:	e00d      	b.n	800ad30 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800ad14:	7bbb      	ldrb	r3, [r7, #14]
 800ad16:	011b      	lsls	r3, r3, #4
 800ad18:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800ad1a:	7b7b      	ldrb	r3, [r7, #13]
 800ad1c:	22ef      	movs	r2, #239	; 0xef
 800ad1e:	2160      	movs	r1, #96	; 0x60
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f003 fe01 	bl	800e928 <VL53L0X_UpdateByte>
 800ad26:	4603      	mov	r3, r0
 800ad28:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800ad2a:	e001      	b.n	800ad30 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad2c:	23fc      	movs	r3, #252	; 0xfc
 800ad2e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ad30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d10f      	bne.n	800ad58 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800ad38:	787b      	ldrb	r3, [r7, #1]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d106      	bne.n	800ad4c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ad3e:	887b      	ldrh	r3, [r7, #2]
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	4413      	add	r3, r2
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ad4a:	e005      	b.n	800ad58 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ad4c:	887b      	ldrh	r3, [r7, #2]
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	4413      	add	r3, r2
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ad58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3718      	adds	r7, #24
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b087      	sub	sp, #28
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	607a      	str	r2, [r7, #4]
 800ad70:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad72:	2300      	movs	r3, #0
 800ad74:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800ad76:	897b      	ldrh	r3, [r7, #10]
 800ad78:	2b05      	cmp	r3, #5
 800ad7a:	d905      	bls.n	800ad88 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad7c:	23fc      	movs	r3, #252	; 0xfc
 800ad7e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	701a      	strb	r2, [r3, #0]
 800ad86:	e008      	b.n	800ad9a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ad88:	897b      	ldrh	r3, [r7, #10]
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad92:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	7dba      	ldrb	r2, [r7, #22]
 800ad98:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ad9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	371c      	adds	r7, #28
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
	...

0800adac <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	460b      	mov	r3, r1
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800adba:	2300      	movs	r3, #0
 800adbc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800adbe:	897b      	ldrh	r3, [r7, #10]
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	4413      	add	r3, r2
 800adc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adc8:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800adca:	7dbb      	ldrb	r3, [r7, #22]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d107      	bne.n	800ade0 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800add0:	897b      	ldrh	r3, [r7, #10]
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	330c      	adds	r3, #12
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	605a      	str	r2, [r3, #4]
 800adde:	e040      	b.n	800ae62 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800ade0:	897b      	ldrh	r3, [r7, #10]
 800ade2:	2b05      	cmp	r3, #5
 800ade4:	d830      	bhi.n	800ae48 <VL53L0X_SetLimitCheckValue+0x9c>
 800ade6:	a201      	add	r2, pc, #4	; (adr r2, 800adec <VL53L0X_SetLimitCheckValue+0x40>)
 800ade8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adec:	0800ae05 	.word	0x0800ae05
 800adf0:	0800ae0d 	.word	0x0800ae0d
 800adf4:	0800ae23 	.word	0x0800ae23
 800adf8:	0800ae2b 	.word	0x0800ae2b
 800adfc:	0800ae33 	.word	0x0800ae33
 800ae00:	0800ae33 	.word	0x0800ae33

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800ae0a:	e01f      	b.n	800ae4c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	461a      	mov	r2, r3
 800ae14:	2144      	movs	r1, #68	; 0x44
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f003 fd5c 	bl	800e8d4 <VL53L0X_WrWord>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800ae20:	e014      	b.n	800ae4c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800ae28:	e010      	b.n	800ae4c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800ae30:	e00c      	b.n	800ae4c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	461a      	mov	r2, r3
 800ae3a:	2164      	movs	r1, #100	; 0x64
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f003 fd49 	bl	800e8d4 <VL53L0X_WrWord>
 800ae42:	4603      	mov	r3, r0
 800ae44:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800ae46:	e001      	b.n	800ae4c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae48:	23fc      	movs	r3, #252	; 0xfc
 800ae4a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800ae4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d106      	bne.n	800ae62 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ae54:	897b      	ldrh	r3, [r7, #10]
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	330c      	adds	r3, #12
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	4413      	add	r3, r2
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ae62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3718      	adds	r7, #24
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop

0800ae70 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b088      	sub	sp, #32
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	607a      	str	r2, [r7, #4]
 800ae7c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800ae86:	897b      	ldrh	r3, [r7, #10]
 800ae88:	2b05      	cmp	r3, #5
 800ae8a:	d847      	bhi.n	800af1c <VL53L0X_GetLimitCheckValue+0xac>
 800ae8c:	a201      	add	r2, pc, #4	; (adr r2, 800ae94 <VL53L0X_GetLimitCheckValue+0x24>)
 800ae8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae92:	bf00      	nop
 800ae94:	0800aead 	.word	0x0800aead
 800ae98:	0800aeb9 	.word	0x0800aeb9
 800ae9c:	0800aedf 	.word	0x0800aedf
 800aea0:	0800aeeb 	.word	0x0800aeeb
 800aea4:	0800aef7 	.word	0x0800aef7
 800aea8:	0800aef7 	.word	0x0800aef7

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeb0:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	77bb      	strb	r3, [r7, #30]
		break;
 800aeb6:	e033      	b.n	800af20 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800aeb8:	f107 0316 	add.w	r3, r7, #22
 800aebc:	461a      	mov	r2, r3
 800aebe:	2144      	movs	r1, #68	; 0x44
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f003 fd8f 	bl	800e9e4 <VL53L0X_RdWord>
 800aec6:	4603      	mov	r3, r0
 800aec8:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800aeca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d102      	bne.n	800aed8 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800aed2:	8afb      	ldrh	r3, [r7, #22]
 800aed4:	025b      	lsls	r3, r3, #9
 800aed6:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800aed8:	2301      	movs	r3, #1
 800aeda:	77bb      	strb	r3, [r7, #30]
		break;
 800aedc:	e020      	b.n	800af20 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aee2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800aee4:	2300      	movs	r3, #0
 800aee6:	77bb      	strb	r3, [r7, #30]
		break;
 800aee8:	e01a      	b.n	800af20 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeee:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800aef0:	2300      	movs	r3, #0
 800aef2:	77bb      	strb	r3, [r7, #30]
		break;
 800aef4:	e014      	b.n	800af20 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800aef6:	f107 0316 	add.w	r3, r7, #22
 800aefa:	461a      	mov	r2, r3
 800aefc:	2164      	movs	r1, #100	; 0x64
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f003 fd70 	bl	800e9e4 <VL53L0X_RdWord>
 800af04:	4603      	mov	r3, r0
 800af06:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800af08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d102      	bne.n	800af16 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800af10:	8afb      	ldrh	r3, [r7, #22]
 800af12:	025b      	lsls	r3, r3, #9
 800af14:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800af16:	2300      	movs	r3, #0
 800af18:	77bb      	strb	r3, [r7, #30]
		break;
 800af1a:	e001      	b.n	800af20 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800af1c:	23fc      	movs	r3, #252	; 0xfc
 800af1e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800af20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d12a      	bne.n	800af7e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800af28:	7fbb      	ldrb	r3, [r7, #30]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d124      	bne.n	800af78 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d110      	bne.n	800af56 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800af34:	897b      	ldrh	r3, [r7, #10]
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	330c      	adds	r3, #12
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4413      	add	r3, r2
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	69ba      	ldr	r2, [r7, #24]
 800af46:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800af48:	897b      	ldrh	r3, [r7, #10]
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	4413      	add	r3, r2
 800af4e:	2200      	movs	r2, #0
 800af50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800af54:	e013      	b.n	800af7e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	69ba      	ldr	r2, [r7, #24]
 800af5a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800af5c:	897b      	ldrh	r3, [r7, #10]
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	330c      	adds	r3, #12
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	4413      	add	r3, r2
 800af66:	69ba      	ldr	r2, [r7, #24]
 800af68:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800af6a:	897b      	ldrh	r3, [r7, #10]
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	4413      	add	r3, r2
 800af70:	2201      	movs	r2, #1
 800af72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800af76:	e002      	b.n	800af7e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	69ba      	ldr	r2, [r7, #24]
 800af7c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800af7e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800af82:	4618      	mov	r0, r3
 800af84:	3720      	adds	r7, #32
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop

0800af8c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af96:	2300      	movs	r3, #0
 800af98:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800af9a:	f107 030e 	add.w	r3, r7, #14
 800af9e:	461a      	mov	r2, r3
 800afa0:	2101      	movs	r1, #1
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f003 fcf4 	bl	800e990 <VL53L0X_RdByte>
 800afa8:	4603      	mov	r3, r0
 800afaa:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800afac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d10e      	bne.n	800afd2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800afb4:	7bba      	ldrb	r2, [r7, #14]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800afbc:	7bbb      	ldrb	r3, [r7, #14]
 800afbe:	b25b      	sxtb	r3, r3
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	da03      	bge.n	800afcc <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	2201      	movs	r2, #1
 800afc8:	701a      	strb	r2, [r3, #0]
 800afca:	e002      	b.n	800afd2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	2200      	movs	r2, #0
 800afd0:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800afd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d104      	bne.n	800afe4 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	781a      	ldrb	r2, [r3, #0]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800afe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aff8:	2300      	movs	r3, #0
 800affa:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800affc:	f107 030e 	add.w	r3, r7, #14
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7ff fbea 	bl	800a7dc <VL53L0X_GetDeviceMode>
 800b008:	4603      	mov	r3, r0
 800b00a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800b00c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d107      	bne.n	800b024 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800b014:	7bbb      	ldrb	r3, [r7, #14]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d104      	bne.n	800b024 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 f898 	bl	800b150 <VL53L0X_StartMeasurement>
 800b020:	4603      	mov	r3, r0
 800b022:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800b024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d104      	bne.n	800b036 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f001 fb3f 	bl	800c6b0 <VL53L0X_measurement_poll_for_completion>
 800b032:	4603      	mov	r3, r0
 800b034:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800b036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d106      	bne.n	800b04c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800b03e:	7bbb      	ldrb	r3, [r7, #14]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d103      	bne.n	800b04c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2203      	movs	r2, #3
 800b048:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800b04c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b064:	2300      	movs	r3, #0
 800b066:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800b068:	2301      	movs	r3, #1
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	68b9      	ldr	r1, [r7, #8]
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f001 fae1 	bl	800c636 <VL53L0X_perform_ref_calibration>
 800b074:	4603      	mov	r3, r0
 800b076:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800b078:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3718      	adds	r7, #24
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	460b      	mov	r3, r1
 800b08e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b090:	2300      	movs	r3, #0
 800b092:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800b09a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800b09c:	7dbb      	ldrb	r3, [r7, #22]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d005      	beq.n	800b0ae <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800b0a2:	7dbb      	ldrb	r3, [r7, #22]
 800b0a4:	2b02      	cmp	r3, #2
 800b0a6:	d002      	beq.n	800b0ae <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800b0a8:	7dbb      	ldrb	r3, [r7, #22]
 800b0aa:	2b03      	cmp	r3, #3
 800b0ac:	d147      	bne.n	800b13e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800b0ae:	f107 030c 	add.w	r3, r7, #12
 800b0b2:	f107 0210 	add.w	r2, r7, #16
 800b0b6:	2101      	movs	r1, #1
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 fbc3 	bl	800b844 <VL53L0X_GetInterruptThresholds>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800b0c8:	d803      	bhi.n	800b0d2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800b0ca:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800b0cc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800b0d0:	d935      	bls.n	800b13e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800b0d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d131      	bne.n	800b13e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800b0da:	78fb      	ldrb	r3, [r7, #3]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d006      	beq.n	800b0ee <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800b0e0:	491a      	ldr	r1, [pc, #104]	; (800b14c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f002 fcbc 	bl	800da60 <VL53L0X_load_tuning_settings>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	75fb      	strb	r3, [r7, #23]
 800b0ec:	e027      	b.n	800b13e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800b0ee:	2204      	movs	r2, #4
 800b0f0:	21ff      	movs	r1, #255	; 0xff
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f003 fbca 	bl	800e88c <VL53L0X_WrByte>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	7dfb      	ldrb	r3, [r7, #23]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800b102:	2200      	movs	r2, #0
 800b104:	2170      	movs	r1, #112	; 0x70
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f003 fbc0 	bl	800e88c <VL53L0X_WrByte>
 800b10c:	4603      	mov	r3, r0
 800b10e:	461a      	mov	r2, r3
 800b110:	7dfb      	ldrb	r3, [r7, #23]
 800b112:	4313      	orrs	r3, r2
 800b114:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b116:	2200      	movs	r2, #0
 800b118:	21ff      	movs	r1, #255	; 0xff
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f003 fbb6 	bl	800e88c <VL53L0X_WrByte>
 800b120:	4603      	mov	r3, r0
 800b122:	461a      	mov	r2, r3
 800b124:	7dfb      	ldrb	r3, [r7, #23]
 800b126:	4313      	orrs	r3, r2
 800b128:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b12a:	2200      	movs	r2, #0
 800b12c:	2180      	movs	r1, #128	; 0x80
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f003 fbac 	bl	800e88c <VL53L0X_WrByte>
 800b134:	4603      	mov	r3, r0
 800b136:	461a      	mov	r2, r3
 800b138:	7dfb      	ldrb	r3, [r7, #23]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800b13e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800b142:	4618      	mov	r0, r3
 800b144:	3718      	adds	r7, #24
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	20000100 	.word	0x20000100

0800b150 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b158:	2300      	movs	r3, #0
 800b15a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800b15c:	2301      	movs	r3, #1
 800b15e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800b160:	f107 030e 	add.w	r3, r7, #14
 800b164:	4619      	mov	r1, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f7ff fb38 	bl	800a7dc <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b16c:	2201      	movs	r2, #1
 800b16e:	2180      	movs	r1, #128	; 0x80
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f003 fb8b 	bl	800e88c <VL53L0X_WrByte>
 800b176:	4603      	mov	r3, r0
 800b178:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b17a:	2201      	movs	r2, #1
 800b17c:	21ff      	movs	r1, #255	; 0xff
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f003 fb84 	bl	800e88c <VL53L0X_WrByte>
 800b184:	4603      	mov	r3, r0
 800b186:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b188:	2200      	movs	r2, #0
 800b18a:	2100      	movs	r1, #0
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f003 fb7d 	bl	800e88c <VL53L0X_WrByte>
 800b192:	4603      	mov	r3, r0
 800b194:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800b19c:	461a      	mov	r2, r3
 800b19e:	2191      	movs	r1, #145	; 0x91
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f003 fb73 	bl	800e88c <VL53L0X_WrByte>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f003 fb6c 	bl	800e88c <VL53L0X_WrByte>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	21ff      	movs	r1, #255	; 0xff
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f003 fb65 	bl	800e88c <VL53L0X_WrByte>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	2180      	movs	r1, #128	; 0x80
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f003 fb5e 	bl	800e88c <VL53L0X_WrByte>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800b1d4:	7bbb      	ldrb	r3, [r7, #14]
 800b1d6:	2b03      	cmp	r3, #3
 800b1d8:	d054      	beq.n	800b284 <VL53L0X_StartMeasurement+0x134>
 800b1da:	2b03      	cmp	r3, #3
 800b1dc:	dc6c      	bgt.n	800b2b8 <VL53L0X_StartMeasurement+0x168>
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d002      	beq.n	800b1e8 <VL53L0X_StartMeasurement+0x98>
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d034      	beq.n	800b250 <VL53L0X_StartMeasurement+0x100>
 800b1e6:	e067      	b.n	800b2b8 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f003 fb4d 	bl	800e88c <VL53L0X_WrByte>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800b1f6:	7bfb      	ldrb	r3, [r7, #15]
 800b1f8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800b1fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d15d      	bne.n	800b2be <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800b202:	2300      	movs	r3, #0
 800b204:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d008      	beq.n	800b21e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800b20c:	f107 030d 	add.w	r3, r7, #13
 800b210:	461a      	mov	r2, r3
 800b212:	2100      	movs	r1, #0
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f003 fbbb 	bl	800e990 <VL53L0X_RdByte>
 800b21a:	4603      	mov	r3, r0
 800b21c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	3301      	adds	r3, #1
 800b222:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800b224:	7b7a      	ldrb	r2, [r7, #13]
 800b226:	7bfb      	ldrb	r3, [r7, #15]
 800b228:	4013      	ands	r3, r2
 800b22a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800b22c:	7bfa      	ldrb	r2, [r7, #15]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d107      	bne.n	800b242 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800b232:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d103      	bne.n	800b242 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b240:	d3e1      	bcc.n	800b206 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b248:	d339      	bcc.n	800b2be <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800b24a:	23f9      	movs	r3, #249	; 0xf9
 800b24c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800b24e:	e036      	b.n	800b2be <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800b250:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d105      	bne.n	800b264 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800b258:	2101      	movs	r1, #1
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7ff ff12 	bl	800b084 <VL53L0X_CheckAndLoadInterruptSettings>
 800b260:	4603      	mov	r3, r0
 800b262:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800b264:	2202      	movs	r2, #2
 800b266:	2100      	movs	r1, #0
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f003 fb0f 	bl	800e88c <VL53L0X_WrByte>
 800b26e:	4603      	mov	r3, r0
 800b270:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800b272:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d123      	bne.n	800b2c2 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2204      	movs	r2, #4
 800b27e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800b282:	e01e      	b.n	800b2c2 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800b284:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d105      	bne.n	800b298 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800b28c:	2101      	movs	r1, #1
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f7ff fef8 	bl	800b084 <VL53L0X_CheckAndLoadInterruptSettings>
 800b294:	4603      	mov	r3, r0
 800b296:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800b298:	2204      	movs	r2, #4
 800b29a:	2100      	movs	r1, #0
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f003 faf5 	bl	800e88c <VL53L0X_WrByte>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800b2a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10b      	bne.n	800b2c6 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2204      	movs	r2, #4
 800b2b2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800b2b6:	e006      	b.n	800b2c6 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b2b8:	23f8      	movs	r3, #248	; 0xf8
 800b2ba:	75fb      	strb	r3, [r7, #23]
 800b2bc:	e004      	b.n	800b2c8 <VL53L0X_StartMeasurement+0x178>
		break;
 800b2be:	bf00      	nop
 800b2c0:	e002      	b.n	800b2c8 <VL53L0X_StartMeasurement+0x178>
		break;
 800b2c2:	bf00      	nop
 800b2c4:	e000      	b.n	800b2c8 <VL53L0X_StartMeasurement+0x178>
		break;
 800b2c6:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800b2c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3718      	adds	r7, #24
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800b2e8:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800b2ea:	7bbb      	ldrb	r3, [r7, #14]
 800b2ec:	2b04      	cmp	r3, #4
 800b2ee:	d112      	bne.n	800b316 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800b2f0:	f107 0308 	add.w	r3, r7, #8
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 fb1a 	bl	800b930 <VL53L0X_GetInterruptMaskStatus>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	2b04      	cmp	r3, #4
 800b304:	d103      	bne.n	800b30e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	2201      	movs	r2, #1
 800b30a:	701a      	strb	r2, [r3, #0]
 800b30c:	e01c      	b.n	800b348 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	2200      	movs	r2, #0
 800b312:	701a      	strb	r2, [r3, #0]
 800b314:	e018      	b.n	800b348 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800b316:	f107 030d 	add.w	r3, r7, #13
 800b31a:	461a      	mov	r2, r3
 800b31c:	2114      	movs	r1, #20
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f003 fb36 	bl	800e990 <VL53L0X_RdByte>
 800b324:	4603      	mov	r3, r0
 800b326:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800b328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10b      	bne.n	800b348 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800b330:	7b7b      	ldrb	r3, [r7, #13]
 800b332:	f003 0301 	and.w	r3, r3, #1
 800b336:	2b00      	cmp	r3, #0
 800b338:	d003      	beq.n	800b342 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	2201      	movs	r2, #1
 800b33e:	701a      	strb	r2, [r3, #0]
 800b340:	e002      	b.n	800b348 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	2200      	movs	r2, #0
 800b346:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b348:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b354:	b5b0      	push	{r4, r5, r7, lr}
 800b356:	b096      	sub	sp, #88	; 0x58
 800b358:	af02      	add	r7, sp, #8
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b35e:	2300      	movs	r3, #0
 800b360:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800b364:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b368:	230c      	movs	r3, #12
 800b36a:	2114      	movs	r1, #20
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f003 fa61 	bl	800e834 <VL53L0X_ReadMulti>
 800b372:	4603      	mov	r3, r0
 800b374:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800b378:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f040 80d1 	bne.w	800b524 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	2200      	movs	r2, #0
 800b386:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	2200      	movs	r2, #0
 800b38c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800b38e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b392:	b29b      	uxth	r3, r3
 800b394:	021b      	lsls	r3, r3, #8
 800b396:	b29a      	uxth	r2, r3
 800b398:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	4413      	add	r3, r2
 800b3a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800b3aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	021b      	lsls	r3, r3, #8
 800b3b2:	b29a      	uxth	r2, r3
 800b3b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	4413      	add	r3, r2
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	025b      	lsls	r3, r3, #9
 800b3c0:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3c6:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800b3c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	021b      	lsls	r3, r3, #8
 800b3d0:	b29a      	uxth	r2, r3
 800b3d2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	4413      	add	r3, r2
 800b3da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800b3de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b3e2:	025b      	lsls	r3, r3, #9
 800b3e4:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800b3ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	021b      	lsls	r3, r3, #8
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	4413      	add	r3, r2
 800b3fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b406:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800b408:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b40c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800b416:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800b41e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800b422:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b424:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b428:	d046      	beq.n	800b4b8 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800b42a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b42c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800b430:	fb02 f303 	mul.w	r3, r2, r3
 800b434:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b438:	4a57      	ldr	r2, [pc, #348]	; (800b598 <VL53L0X_GetRangingMeasurementData+0x244>)
 800b43a:	fb82 1203 	smull	r1, r2, r2, r3
 800b43e:	1192      	asrs	r2, r2, #6
 800b440:	17db      	asrs	r3, r3, #31
 800b442:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800b444:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a1b      	ldr	r3, [r3, #32]
 800b44c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	7f1b      	ldrb	r3, [r3, #28]
 800b452:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800b456:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d02c      	beq.n	800b4b8 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800b45e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b460:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b464:	fb02 f303 	mul.w	r3, r2, r3
 800b468:	121a      	asrs	r2, r3, #8
					<= 0) {
 800b46a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d10d      	bne.n	800b48c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800b470:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b474:	2b00      	cmp	r3, #0
 800b476:	d004      	beq.n	800b482 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800b478:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800b47c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b480:	e016      	b.n	800b4b0 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800b482:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800b486:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b48a:	e011      	b.n	800b4b0 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800b48c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b490:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b492:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800b496:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b498:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800b49c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800b4a0:	121b      	asrs	r3, r3, #8
 800b4a2:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800b4a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4a6:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800b4a8:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800b4ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800b4b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b4b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800b4b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00d      	beq.n	800b4dc <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800b4c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b4c4:	089b      	lsrs	r3, r3, #2
 800b4c6:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800b4cc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	019b      	lsls	r3, r3, #6
 800b4d4:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	75da      	strb	r2, [r3, #23]
 800b4da:	e006      	b.n	800b4ea <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800b4e2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800b4ea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b4ee:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800b4f2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800b4f6:	9301      	str	r3, [sp, #4]
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	9300      	str	r3, [sp, #0]
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f002 ff4b 	bl	800e39c <VL53L0X_get_pal_range_status>
 800b506:	4603      	mov	r3, r0
 800b508:	461a      	mov	r2, r3
 800b50a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b50e:	4313      	orrs	r3, r2
 800b510:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800b514:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d103      	bne.n	800b524 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800b51c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b524:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d12f      	bne.n	800b58c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f107 040c 	add.w	r4, r7, #12
 800b532:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800b536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b53a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b53e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800b546:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800b54c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800b554:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800b55a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800b560:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800b566:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800b56c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800b572:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800b57c:	f107 050c 	add.w	r5, r7, #12
 800b580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b58c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800b590:	4618      	mov	r0, r3
 800b592:	3750      	adds	r7, #80	; 0x50
 800b594:	46bd      	mov	sp, r7
 800b596:	bdb0      	pop	{r4, r5, r7, pc}
 800b598:	10624dd3 	.word	0x10624dd3

0800b59c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f7ff f8e9 	bl	800a784 <VL53L0X_SetDeviceMode>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b5b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d104      	bne.n	800b5c8 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f7ff fd16 	bl	800aff0 <VL53L0X_PerformSingleMeasurement>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800b5c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d105      	bne.n	800b5dc <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800b5d0:	6839      	ldr	r1, [r7, #0]
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7ff febe 	bl	800b354 <VL53L0X_GetRangingMeasurementData>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800b5dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d105      	bne.n	800b5f0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f962 	bl	800b8b0 <VL53L0X_ClearInterruptMask>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800b5f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	4608      	mov	r0, r1
 800b606:	4611      	mov	r1, r2
 800b608:	461a      	mov	r2, r3
 800b60a:	4603      	mov	r3, r0
 800b60c:	70fb      	strb	r3, [r7, #3]
 800b60e:	460b      	mov	r3, r1
 800b610:	70bb      	strb	r3, [r7, #2]
 800b612:	4613      	mov	r3, r2
 800b614:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b616:	2300      	movs	r3, #0
 800b618:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800b61a:	78fb      	ldrb	r3, [r7, #3]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d002      	beq.n	800b626 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800b620:	23f6      	movs	r3, #246	; 0xf6
 800b622:	73fb      	strb	r3, [r7, #15]
 800b624:	e107      	b.n	800b836 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800b626:	78bb      	ldrb	r3, [r7, #2]
 800b628:	2b14      	cmp	r3, #20
 800b62a:	d110      	bne.n	800b64e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b62c:	7e3b      	ldrb	r3, [r7, #24]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d102      	bne.n	800b638 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800b632:	2310      	movs	r3, #16
 800b634:	73bb      	strb	r3, [r7, #14]
 800b636:	e001      	b.n	800b63c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800b638:	2301      	movs	r3, #1
 800b63a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800b63c:	7bbb      	ldrb	r3, [r7, #14]
 800b63e:	461a      	mov	r2, r3
 800b640:	2184      	movs	r1, #132	; 0x84
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f003 f922 	bl	800e88c <VL53L0X_WrByte>
 800b648:	4603      	mov	r3, r0
 800b64a:	73fb      	strb	r3, [r7, #15]
 800b64c:	e0f3      	b.n	800b836 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800b64e:	78bb      	ldrb	r3, [r7, #2]
 800b650:	2b15      	cmp	r3, #21
 800b652:	f040 8097 	bne.w	800b784 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b656:	2201      	movs	r2, #1
 800b658:	21ff      	movs	r1, #255	; 0xff
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f003 f916 	bl	800e88c <VL53L0X_WrByte>
 800b660:	4603      	mov	r3, r0
 800b662:	461a      	mov	r2, r3
 800b664:	7bfb      	ldrb	r3, [r7, #15]
 800b666:	4313      	orrs	r3, r2
 800b668:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b66a:	2200      	movs	r2, #0
 800b66c:	2100      	movs	r1, #0
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f003 f90c 	bl	800e88c <VL53L0X_WrByte>
 800b674:	4603      	mov	r3, r0
 800b676:	461a      	mov	r2, r3
 800b678:	7bfb      	ldrb	r3, [r7, #15]
 800b67a:	4313      	orrs	r3, r2
 800b67c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b67e:	2200      	movs	r2, #0
 800b680:	21ff      	movs	r1, #255	; 0xff
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f003 f902 	bl	800e88c <VL53L0X_WrByte>
 800b688:	4603      	mov	r3, r0
 800b68a:	461a      	mov	r2, r3
 800b68c:	7bfb      	ldrb	r3, [r7, #15]
 800b68e:	4313      	orrs	r3, r2
 800b690:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b692:	2201      	movs	r2, #1
 800b694:	2180      	movs	r1, #128	; 0x80
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f003 f8f8 	bl	800e88c <VL53L0X_WrByte>
 800b69c:	4603      	mov	r3, r0
 800b69e:	461a      	mov	r2, r3
 800b6a0:	7bfb      	ldrb	r3, [r7, #15]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800b6a6:	2202      	movs	r2, #2
 800b6a8:	2185      	movs	r1, #133	; 0x85
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f003 f8ee 	bl	800e88c <VL53L0X_WrByte>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	7bfb      	ldrb	r3, [r7, #15]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800b6ba:	2204      	movs	r2, #4
 800b6bc:	21ff      	movs	r1, #255	; 0xff
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f003 f8e4 	bl	800e88c <VL53L0X_WrByte>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	21cd      	movs	r1, #205	; 0xcd
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f003 f8da 	bl	800e88c <VL53L0X_WrByte>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	461a      	mov	r2, r3
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800b6e2:	2211      	movs	r2, #17
 800b6e4:	21cc      	movs	r1, #204	; 0xcc
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f003 f8d0 	bl	800e88c <VL53L0X_WrByte>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	7bfb      	ldrb	r3, [r7, #15]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800b6f6:	2207      	movs	r2, #7
 800b6f8:	21ff      	movs	r1, #255	; 0xff
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f003 f8c6 	bl	800e88c <VL53L0X_WrByte>
 800b700:	4603      	mov	r3, r0
 800b702:	461a      	mov	r2, r3
 800b704:	7bfb      	ldrb	r3, [r7, #15]
 800b706:	4313      	orrs	r3, r2
 800b708:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800b70a:	2200      	movs	r2, #0
 800b70c:	21be      	movs	r1, #190	; 0xbe
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f003 f8bc 	bl	800e88c <VL53L0X_WrByte>
 800b714:	4603      	mov	r3, r0
 800b716:	461a      	mov	r2, r3
 800b718:	7bfb      	ldrb	r3, [r7, #15]
 800b71a:	4313      	orrs	r3, r2
 800b71c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800b71e:	2206      	movs	r2, #6
 800b720:	21ff      	movs	r1, #255	; 0xff
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f003 f8b2 	bl	800e88c <VL53L0X_WrByte>
 800b728:	4603      	mov	r3, r0
 800b72a:	461a      	mov	r2, r3
 800b72c:	7bfb      	ldrb	r3, [r7, #15]
 800b72e:	4313      	orrs	r3, r2
 800b730:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800b732:	2209      	movs	r2, #9
 800b734:	21cc      	movs	r1, #204	; 0xcc
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f003 f8a8 	bl	800e88c <VL53L0X_WrByte>
 800b73c:	4603      	mov	r3, r0
 800b73e:	461a      	mov	r2, r3
 800b740:	7bfb      	ldrb	r3, [r7, #15]
 800b742:	4313      	orrs	r3, r2
 800b744:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b746:	2200      	movs	r2, #0
 800b748:	21ff      	movs	r1, #255	; 0xff
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f003 f89e 	bl	800e88c <VL53L0X_WrByte>
 800b750:	4603      	mov	r3, r0
 800b752:	461a      	mov	r2, r3
 800b754:	7bfb      	ldrb	r3, [r7, #15]
 800b756:	4313      	orrs	r3, r2
 800b758:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b75a:	2201      	movs	r2, #1
 800b75c:	21ff      	movs	r1, #255	; 0xff
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f003 f894 	bl	800e88c <VL53L0X_WrByte>
 800b764:	4603      	mov	r3, r0
 800b766:	461a      	mov	r2, r3
 800b768:	7bfb      	ldrb	r3, [r7, #15]
 800b76a:	4313      	orrs	r3, r2
 800b76c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b76e:	2200      	movs	r2, #0
 800b770:	2100      	movs	r1, #0
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f003 f88a 	bl	800e88c <VL53L0X_WrByte>
 800b778:	4603      	mov	r3, r0
 800b77a:	461a      	mov	r2, r3
 800b77c:	7bfb      	ldrb	r3, [r7, #15]
 800b77e:	4313      	orrs	r3, r2
 800b780:	73fb      	strb	r3, [r7, #15]
 800b782:	e058      	b.n	800b836 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800b784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d121      	bne.n	800b7d0 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800b78c:	787b      	ldrb	r3, [r7, #1]
 800b78e:	2b04      	cmp	r3, #4
 800b790:	d81b      	bhi.n	800b7ca <VL53L0X_SetGpioConfig+0x1ce>
 800b792:	a201      	add	r2, pc, #4	; (adr r2, 800b798 <VL53L0X_SetGpioConfig+0x19c>)
 800b794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b798:	0800b7ad 	.word	0x0800b7ad
 800b79c:	0800b7b3 	.word	0x0800b7b3
 800b7a0:	0800b7b9 	.word	0x0800b7b9
 800b7a4:	0800b7bf 	.word	0x0800b7bf
 800b7a8:	0800b7c5 	.word	0x0800b7c5
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	73bb      	strb	r3, [r7, #14]
				break;
 800b7b0:	e00f      	b.n	800b7d2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	73bb      	strb	r3, [r7, #14]
				break;
 800b7b6:	e00c      	b.n	800b7d2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800b7b8:	2302      	movs	r3, #2
 800b7ba:	73bb      	strb	r3, [r7, #14]
				break;
 800b7bc:	e009      	b.n	800b7d2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800b7be:	2303      	movs	r3, #3
 800b7c0:	73bb      	strb	r3, [r7, #14]
				break;
 800b7c2:	e006      	b.n	800b7d2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800b7c4:	2304      	movs	r3, #4
 800b7c6:	73bb      	strb	r3, [r7, #14]
				break;
 800b7c8:	e003      	b.n	800b7d2 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800b7ca:	23f5      	movs	r3, #245	; 0xf5
 800b7cc:	73fb      	strb	r3, [r7, #15]
 800b7ce:	e000      	b.n	800b7d2 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800b7d0:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800b7d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d107      	bne.n	800b7ea <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800b7da:	7bbb      	ldrb	r3, [r7, #14]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	210a      	movs	r1, #10
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f003 f853 	bl	800e88c <VL53L0X_WrByte>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800b7ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10f      	bne.n	800b812 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b7f2:	7e3b      	ldrb	r3, [r7, #24]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d102      	bne.n	800b7fe <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	73bb      	strb	r3, [r7, #14]
 800b7fc:	e001      	b.n	800b802 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800b7fe:	2310      	movs	r3, #16
 800b800:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800b802:	7bbb      	ldrb	r3, [r7, #14]
 800b804:	22ef      	movs	r2, #239	; 0xef
 800b806:	2184      	movs	r1, #132	; 0x84
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f003 f88d 	bl	800e928 <VL53L0X_UpdateByte>
 800b80e:	4603      	mov	r3, r0
 800b810:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800b812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d103      	bne.n	800b822 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	787a      	ldrb	r2, [r7, #1]
 800b81e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800b822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d105      	bne.n	800b836 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b82a:	2100      	movs	r1, #0
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 f83f 	bl	800b8b0 <VL53L0X_ClearInterruptMask>
 800b832:	4603      	mov	r3, r0
 800b834:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b836:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop

0800b844 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	607a      	str	r2, [r7, #4]
 800b84e:	603b      	str	r3, [r7, #0]
 800b850:	460b      	mov	r3, r1
 800b852:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b854:	2300      	movs	r3, #0
 800b856:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800b858:	f107 0314 	add.w	r3, r7, #20
 800b85c:	461a      	mov	r2, r3
 800b85e:	210e      	movs	r1, #14
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f003 f8bf 	bl	800e9e4 <VL53L0X_RdWord>
 800b866:	4603      	mov	r3, r0
 800b868:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800b86a:	8abb      	ldrh	r3, [r7, #20]
 800b86c:	045b      	lsls	r3, r3, #17
 800b86e:	461a      	mov	r2, r3
 800b870:	4b0e      	ldr	r3, [pc, #56]	; (800b8ac <VL53L0X_GetInterruptThresholds+0x68>)
 800b872:	4013      	ands	r3, r2
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800b878:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10f      	bne.n	800b8a0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800b880:	f107 0314 	add.w	r3, r7, #20
 800b884:	461a      	mov	r2, r3
 800b886:	210c      	movs	r1, #12
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f003 f8ab 	bl	800e9e4 <VL53L0X_RdWord>
 800b88e:	4603      	mov	r3, r0
 800b890:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800b892:	8abb      	ldrh	r3, [r7, #20]
 800b894:	045b      	lsls	r3, r3, #17
 800b896:	461a      	mov	r2, r3
 800b898:	4b04      	ldr	r3, [pc, #16]	; (800b8ac <VL53L0X_GetInterruptThresholds+0x68>)
 800b89a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800b89c:	683a      	ldr	r2, [r7, #0]
 800b89e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b8a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3718      	adds	r7, #24
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	1ffe0000 	.word	0x1ffe0000

0800b8b0 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	210b      	movs	r1, #11
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f002 ffe0 	bl	800e88c <VL53L0X_WrByte>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	210b      	movs	r1, #11
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f002 ffd9 	bl	800e88c <VL53L0X_WrByte>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	461a      	mov	r2, r3
 800b8de:	7bfb      	ldrb	r3, [r7, #15]
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800b8e4:	f107 030d 	add.w	r3, r7, #13
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	2113      	movs	r1, #19
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f003 f84f 	bl	800e990 <VL53L0X_RdByte>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	7bfb      	ldrb	r3, [r7, #15]
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800b8fc:	7bbb      	ldrb	r3, [r7, #14]
 800b8fe:	3301      	adds	r3, #1
 800b900:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800b902:	7b7b      	ldrb	r3, [r7, #13]
 800b904:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d006      	beq.n	800b91a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800b90c:	7bbb      	ldrb	r3, [r7, #14]
 800b90e:	2b02      	cmp	r3, #2
 800b910:	d803      	bhi.n	800b91a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800b912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d0d3      	beq.n	800b8c2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800b91a:	7bbb      	ldrb	r3, [r7, #14]
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d901      	bls.n	800b924 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800b920:	23f4      	movs	r3, #244	; 0xf4
 800b922:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b924:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b93a:	2300      	movs	r3, #0
 800b93c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800b93e:	f107 030e 	add.w	r3, r7, #14
 800b942:	461a      	mov	r2, r3
 800b944:	2113      	movs	r1, #19
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f003 f822 	bl	800e990 <VL53L0X_RdByte>
 800b94c:	4603      	mov	r3, r0
 800b94e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800b950:	7bbb      	ldrb	r3, [r7, #14]
 800b952:	f003 0207 	and.w	r2, r3, #7
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800b95a:	7bbb      	ldrb	r3, [r7, #14]
 800b95c:	f003 0318 	and.w	r3, r3, #24
 800b960:	2b00      	cmp	r3, #0
 800b962:	d001      	beq.n	800b968 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800b964:	23fa      	movs	r3, #250	; 0xfa
 800b966:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b968:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3710      	adds	r7, #16
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b980:	2300      	movs	r3, #0
 800b982:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	68b9      	ldr	r1, [r7, #8]
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f000 fa03 	bl	800bd94 <VL53L0X_perform_ref_spad_management>
 800b98e:	4603      	mov	r3, r0
 800b990:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800b992:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3718      	adds	r7, #24
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b084      	sub	sp, #16
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
 800b9a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800b9ac:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800b9b0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800b9b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9b6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800b9b8:	f107 0308 	add.w	r3, r7, #8
 800b9bc:	461a      	mov	r2, r3
 800b9be:	2128      	movs	r1, #40	; 0x28
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f003 f80f 	bl	800e9e4 <VL53L0X_RdWord>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800b9ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d11e      	bne.n	800ba10 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800b9d2:	893b      	ldrh	r3, [r7, #8]
 800b9d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800b9dc:	893b      	ldrh	r3, [r7, #8]
 800b9de:	461a      	mov	r2, r3
 800b9e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	dd0b      	ble.n	800ba00 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800b9e8:	893a      	ldrh	r2, [r7, #8]
 800b9ea:	897b      	ldrh	r3, [r7, #10]
 800b9ec:	1ad3      	subs	r3, r2, r3
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	b21b      	sxth	r3, r3
 800b9f2:	461a      	mov	r2, r3
					* 250;
 800b9f4:	23fa      	movs	r3, #250	; 0xfa
 800b9f6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	601a      	str	r2, [r3, #0]
 800b9fe:	e007      	b.n	800ba10 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800ba00:	893b      	ldrh	r3, [r7, #8]
 800ba02:	b21b      	sxth	r3, r3
 800ba04:	461a      	mov	r2, r3
 800ba06:	23fa      	movs	r3, #250	; 0xfa
 800ba08:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800ba10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b08b      	sub	sp, #44	; 0x2c
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	607a      	str	r2, [r7, #4]
 800ba28:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800ba2a:	2308      	movs	r3, #8
 800ba2c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	f04f 32ff 	mov.w	r2, #4294967295
 800ba38:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba42:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	69ba      	ldr	r2, [r7, #24]
 800ba48:	fbb3 f2f2 	udiv	r2, r3, r2
 800ba4c:	69b9      	ldr	r1, [r7, #24]
 800ba4e:	fb01 f202 	mul.w	r2, r1, r2
 800ba52:	1a9b      	subs	r3, r3, r2
 800ba54:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	627b      	str	r3, [r7, #36]	; 0x24
 800ba5a:	e030      	b.n	800babe <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba64:	4413      	add	r3, r2
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800ba6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d11e      	bne.n	800bab0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800ba72:	7ffa      	ldrb	r2, [r7, #31]
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	fa42 f303 	asr.w	r3, r2, r3
 800ba7a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800ba80:	e016      	b.n	800bab0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800ba82:	7ffb      	ldrb	r3, [r7, #31]
 800ba84:	f003 0301 	and.w	r3, r3, #1
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00b      	beq.n	800baa4 <get_next_good_spad+0x88>
				success = 1;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800ba90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba92:	69ba      	ldr	r2, [r7, #24]
 800ba94:	fb02 f203 	mul.w	r2, r2, r3
 800ba98:	6a3b      	ldr	r3, [r7, #32]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	601a      	str	r2, [r3, #0]
				break;
 800baa2:	e009      	b.n	800bab8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800baa4:	7ffb      	ldrb	r3, [r7, #31]
 800baa6:	085b      	lsrs	r3, r3, #1
 800baa8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800baaa:	6a3b      	ldr	r3, [r7, #32]
 800baac:	3301      	adds	r3, #1
 800baae:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800bab0:	6a3a      	ldr	r2, [r7, #32]
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d3e4      	bcc.n	800ba82 <get_next_good_spad+0x66>
				coarseIndex++) {
 800bab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baba:	3301      	adds	r3, #1
 800babc:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800babe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d202      	bcs.n	800bacc <get_next_good_spad+0xb0>
 800bac6:	7fbb      	ldrb	r3, [r7, #30]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d0c7      	beq.n	800ba5c <get_next_good_spad+0x40>
		}
	}
}
 800bacc:	bf00      	nop
 800bace:	372c      	adds	r7, #44	; 0x2c
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800bae0:	2301      	movs	r3, #1
 800bae2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	099b      	lsrs	r3, r3, #6
 800bae8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800baea:	4a07      	ldr	r2, [pc, #28]	; (800bb08 <is_aperture+0x30>)
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d101      	bne.n	800bafa <is_aperture+0x22>
		isAperture = 0;
 800baf6:	2300      	movs	r3, #0
 800baf8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800bafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3714      	adds	r7, #20
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr
 800bb08:	200002b8 	.word	0x200002b8

0800bb0c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b089      	sub	sp, #36	; 0x24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800bb1c:	2308      	movs	r3, #8
 800bb1e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb28:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	69ba      	ldr	r2, [r7, #24]
 800bb2e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bb32:	69b9      	ldr	r1, [r7, #24]
 800bb34:	fb01 f202 	mul.w	r2, r1, r2
 800bb38:	1a9b      	subs	r3, r3, r2
 800bb3a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800bb3c:	697a      	ldr	r2, [r7, #20]
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d302      	bcc.n	800bb4a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bb44:	23ce      	movs	r3, #206	; 0xce
 800bb46:	77fb      	strb	r3, [r7, #31]
 800bb48:	e010      	b.n	800bb6c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	4413      	add	r3, r2
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	b25a      	sxtb	r2, r3
 800bb54:	2101      	movs	r1, #1
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	fa01 f303 	lsl.w	r3, r1, r3
 800bb5c:	b25b      	sxtb	r3, r3
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	b259      	sxtb	r1, r3
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	4413      	add	r3, r2
 800bb68:	b2ca      	uxtb	r2, r1
 800bb6a:	701a      	strb	r2, [r3, #0]

	return status;
 800bb6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3724      	adds	r7, #36	; 0x24
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800bb86:	2306      	movs	r3, #6
 800bb88:	683a      	ldr	r2, [r7, #0]
 800bb8a:	21b0      	movs	r1, #176	; 0xb0
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f002 fe21 	bl	800e7d4 <VL53L0X_WriteMulti>
 800bb92:	4603      	mov	r3, r0
 800bb94:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800bb96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b084      	sub	sp, #16
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
 800bbaa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800bbac:	2306      	movs	r3, #6
 800bbae:	683a      	ldr	r2, [r7, #0]
 800bbb0:	21b0      	movs	r1, #176	; 0xb0
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f002 fe3e 	bl	800e834 <VL53L0X_ReadMulti>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800bbbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b08c      	sub	sp, #48	; 0x30
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	607a      	str	r2, [r7, #4]
 800bbd2:	603b      	str	r3, [r7, #0]
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800bbde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbe0:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800bbe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbe4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbea:	e02b      	b.n	800bc44 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800bbec:	f107 031c 	add.w	r3, r7, #28
 800bbf0:	6a3a      	ldr	r2, [r7, #32]
 800bbf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f7ff ff11 	bl	800ba1c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc00:	d103      	bne.n	800bc0a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bc02:	23ce      	movs	r3, #206	; 0xce
 800bc04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800bc08:	e020      	b.n	800bc4c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800bc0a:	69fb      	ldr	r3, [r7, #28]
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc10:	4413      	add	r3, r2
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7ff ff60 	bl	800bad8 <is_aperture>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	7afb      	ldrb	r3, [r7, #11]
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d003      	beq.n	800bc2a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bc22:	23ce      	movs	r3, #206	; 0xce
 800bc24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800bc28:	e010      	b.n	800bc4c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800bc2a:	69fb      	ldr	r3, [r7, #28]
 800bc2c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800bc2e:	6a3a      	ldr	r2, [r7, #32]
 800bc30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc32:	6838      	ldr	r0, [r7, #0]
 800bc34:	f7ff ff6a 	bl	800bb0c <enable_spad_bit>
		currentSpad++;
 800bc38:	6a3b      	ldr	r3, [r7, #32]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800bc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc40:	3301      	adds	r3, #1
 800bc42:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d3cf      	bcc.n	800bbec <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800bc4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc4e:	6a3a      	ldr	r2, [r7, #32]
 800bc50:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800bc52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d106      	bne.n	800bc68 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800bc5a:	6839      	ldr	r1, [r7, #0]
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f7ff ff8d 	bl	800bb7c <set_ref_spad_map>
 800bc62:	4603      	mov	r3, r0
 800bc64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800bc68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d121      	bne.n	800bcb4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800bc70:	f107 0314 	add.w	r3, r7, #20
 800bc74:	4619      	mov	r1, r3
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f7ff ff93 	bl	800bba2 <get_ref_spad_map>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800bc82:	2300      	movs	r3, #0
 800bc84:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800bc86:	e011      	b.n	800bcac <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800bc88:	683a      	ldr	r2, [r7, #0]
 800bc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8c:	4413      	add	r3, r2
 800bc8e:	781a      	ldrb	r2, [r3, #0]
 800bc90:	f107 0114 	add.w	r1, r7, #20
 800bc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc96:	440b      	add	r3, r1
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d003      	beq.n	800bca6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bc9e:	23ce      	movs	r3, #206	; 0xce
 800bca0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800bca4:	e006      	b.n	800bcb4 <enable_ref_spads+0xec>
			}
			i++;
 800bca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca8:	3301      	adds	r3, #1
 800bcaa:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800bcac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d3e9      	bcc.n	800bc88 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800bcb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3730      	adds	r7, #48	; 0x30
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b08a      	sub	sp, #40	; 0x28
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bcca:	2300      	movs	r3, #0
 800bccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800bcdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800bce0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d107      	bne.n	800bcf8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800bce8:	22c0      	movs	r2, #192	; 0xc0
 800bcea:	2101      	movs	r1, #1
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f002 fdcd 	bl	800e88c <VL53L0X_WrByte>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800bcf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d108      	bne.n	800bd12 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800bd00:	f107 0308 	add.w	r3, r7, #8
 800bd04:	4619      	mov	r1, r3
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f7ff fc48 	bl	800b59c <VL53L0X_PerformSingleRangingMeasurement>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800bd12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d107      	bne.n	800bd2a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	21ff      	movs	r1, #255	; 0xff
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f002 fdb4 	bl	800e88c <VL53L0X_WrByte>
 800bd24:	4603      	mov	r3, r0
 800bd26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800bd2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d107      	bne.n	800bd42 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800bd32:	683a      	ldr	r2, [r7, #0]
 800bd34:	21b6      	movs	r1, #182	; 0xb6
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f002 fe54 	bl	800e9e4 <VL53L0X_RdWord>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800bd42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d107      	bne.n	800bd5a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	21ff      	movs	r1, #255	; 0xff
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f002 fd9c 	bl	800e88c <VL53L0X_WrByte>
 800bd54:	4603      	mov	r3, r0
 800bd56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800bd5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d112      	bne.n	800bd88 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bd62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd66:	461a      	mov	r2, r3
 800bd68:	2101      	movs	r1, #1
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f002 fd8e 	bl	800e88c <VL53L0X_WrByte>
 800bd70:	4603      	mov	r3, r0
 800bd72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800bd76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d104      	bne.n	800bd88 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bd84:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800bd88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3728      	adds	r7, #40	; 0x28
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800bd94:	b590      	push	{r4, r7, lr}
 800bd96:	b09d      	sub	sp, #116	; 0x74
 800bd98:	af06      	add	r7, sp, #24
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bda0:	2300      	movs	r3, #0
 800bda2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800bda6:	23b4      	movs	r3, #180	; 0xb4
 800bda8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800bdac:	2303      	movs	r3, #3
 800bdae:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800bdb0:	232c      	movs	r3, #44	; 0x2c
 800bdb2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800bdc0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800bdc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800bdce:	2306      	movs	r3, #6
 800bdd0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800bde0:	2300      	movs	r3, #0
 800bde2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800bde4:	2300      	movs	r3, #0
 800bde6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800bde8:	2300      	movs	r3, #0
 800bdea:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800bdec:	2300      	movs	r3, #0
 800bdee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800bdf8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdfe:	e009      	b.n	800be14 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be04:	4413      	add	r3, r2
 800be06:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800be0a:	2200      	movs	r2, #0
 800be0c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800be0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be10:	3301      	adds	r3, #1
 800be12:	64bb      	str	r3, [r7, #72]	; 0x48
 800be14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be18:	429a      	cmp	r2, r3
 800be1a:	d3f1      	bcc.n	800be00 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800be1c:	2201      	movs	r2, #1
 800be1e:	21ff      	movs	r1, #255	; 0xff
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f002 fd33 	bl	800e88c <VL53L0X_WrByte>
 800be26:	4603      	mov	r3, r0
 800be28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800be2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800be30:	2b00      	cmp	r3, #0
 800be32:	d107      	bne.n	800be44 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800be34:	2200      	movs	r2, #0
 800be36:	214f      	movs	r1, #79	; 0x4f
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f002 fd27 	bl	800e88c <VL53L0X_WrByte>
 800be3e:	4603      	mov	r3, r0
 800be40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800be44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d107      	bne.n	800be5c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800be4c:	222c      	movs	r2, #44	; 0x2c
 800be4e:	214e      	movs	r1, #78	; 0x4e
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f002 fd1b 	bl	800e88c <VL53L0X_WrByte>
 800be56:	4603      	mov	r3, r0
 800be58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800be5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800be60:	2b00      	cmp	r3, #0
 800be62:	d107      	bne.n	800be74 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800be64:	2200      	movs	r2, #0
 800be66:	21ff      	movs	r1, #255	; 0xff
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f002 fd0f 	bl	800e88c <VL53L0X_WrByte>
 800be6e:	4603      	mov	r3, r0
 800be70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800be74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d109      	bne.n	800be90 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800be7c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800be80:	461a      	mov	r2, r3
 800be82:	21b6      	movs	r1, #182	; 0xb6
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	f002 fd01 	bl	800e88c <VL53L0X_WrByte>
 800be8a:	4603      	mov	r3, r0
 800be8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800be90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800be94:	2b00      	cmp	r3, #0
 800be96:	d107      	bne.n	800bea8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800be98:	2200      	movs	r2, #0
 800be9a:	2180      	movs	r1, #128	; 0x80
 800be9c:	68f8      	ldr	r0, [r7, #12]
 800be9e:	f002 fcf5 	bl	800e88c <VL53L0X_WrByte>
 800bea2:	4603      	mov	r3, r0
 800bea4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800bea8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10a      	bne.n	800bec6 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800beb0:	f107 0210 	add.w	r2, r7, #16
 800beb4:	f107 0111 	add.w	r1, r7, #17
 800beb8:	2300      	movs	r3, #0
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f000 fbbb 	bl	800c636 <VL53L0X_perform_ref_calibration>
 800bec0:	4603      	mov	r3, r0
 800bec2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800bec6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800beca:	2b00      	cmp	r3, #0
 800becc:	d121      	bne.n	800bf12 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800bece:	2300      	movs	r3, #0
 800bed0:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800bed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bed4:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800beda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bedc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800beea:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800beee:	f107 0218 	add.w	r2, r7, #24
 800bef2:	9204      	str	r2, [sp, #16]
 800bef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bef6:	9203      	str	r2, [sp, #12]
 800bef8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800befa:	9202      	str	r2, [sp, #8]
 800befc:	9301      	str	r3, [sp, #4]
 800befe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf00:	9300      	str	r3, [sp, #0]
 800bf02:	4623      	mov	r3, r4
 800bf04:	4602      	mov	r2, r0
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f7ff fe5e 	bl	800bbc8 <enable_ref_spads>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bf12:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d174      	bne.n	800c004 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800bf1e:	f107 0312 	add.w	r3, r7, #18
 800bf22:	4619      	mov	r1, r3
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	f7ff fecb 	bl	800bcc0 <perform_ref_signal_measurement>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800bf30:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d161      	bne.n	800bffc <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800bf38:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800bf3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d25d      	bcs.n	800bffc <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800bf40:	2300      	movs	r3, #0
 800bf42:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf44:	e009      	b.n	800bf5a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800bf46:	68fa      	ldr	r2, [r7, #12]
 800bf48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf4a:	4413      	add	r3, r2
 800bf4c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800bf50:	2200      	movs	r2, #0
 800bf52:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800bf54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf56:	3301      	adds	r3, #1
 800bf58:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d3f1      	bcc.n	800bf46 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800bf62:	e002      	b.n	800bf6a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800bf64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf66:	3301      	adds	r3, #1
 800bf68:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800bf6a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800bf6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf70:	4413      	add	r3, r2
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7ff fdb0 	bl	800bad8 <is_aperture>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d103      	bne.n	800bf86 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800bf7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d3ee      	bcc.n	800bf64 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800bf86:	2301      	movs	r3, #1
 800bf88:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800bf8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf8c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800bf9a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800bf9e:	f107 0218 	add.w	r2, r7, #24
 800bfa2:	9204      	str	r2, [sp, #16]
 800bfa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfa6:	9203      	str	r2, [sp, #12]
 800bfa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bfaa:	9202      	str	r2, [sp, #8]
 800bfac:	9301      	str	r3, [sp, #4]
 800bfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	4623      	mov	r3, r4
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f7ff fe06 	bl	800bbc8 <enable_ref_spads>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800bfc2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d11b      	bne.n	800c002 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800bfce:	f107 0312 	add.w	r3, r7, #18
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	68f8      	ldr	r0, [r7, #12]
 800bfd6:	f7ff fe73 	bl	800bcc0 <perform_ref_signal_measurement>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800bfe0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d10c      	bne.n	800c002 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800bfe8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800bfea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d208      	bcs.n	800c002 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800bff0:	2301      	movs	r3, #1
 800bff2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800bff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800bffa:	e002      	b.n	800c002 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800bffc:	2300      	movs	r3, #0
 800bffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c000:	e000      	b.n	800c004 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800c002:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800c004:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f040 80af 	bne.w	800c16c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800c00e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800c010:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c012:	429a      	cmp	r2, r3
 800c014:	f240 80aa 	bls.w	800c16c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800c018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c01a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800c01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c020:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800c028:	f107 031c 	add.w	r3, r7, #28
 800c02c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c02e:	4618      	mov	r0, r3
 800c030:	f004 ffff 	bl	8011032 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800c034:	8a7b      	ldrh	r3, [r7, #18]
 800c036:	461a      	mov	r2, r3
 800c038:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c03a:	1ad3      	subs	r3, r2, r3
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	bfb8      	it	lt
 800c040:	425b      	neglt	r3, r3
 800c042:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800c044:	2300      	movs	r3, #0
 800c046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800c04a:	e086      	b.n	800c15a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800c052:	f107 0314 	add.w	r3, r7, #20
 800c056:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c05a:	f7ff fcdf 	bl	800ba1c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c064:	d103      	bne.n	800c06e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c066:	23ce      	movs	r3, #206	; 0xce
 800c068:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800c06c:	e07e      	b.n	800c16c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800c06e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800c072:	697a      	ldr	r2, [r7, #20]
 800c074:	4413      	add	r3, r2
 800c076:	4618      	mov	r0, r3
 800c078:	f7ff fd2e 	bl	800bad8 <is_aperture>
 800c07c:	4603      	mov	r3, r0
 800c07e:	461a      	mov	r2, r3
 800c080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c082:	4293      	cmp	r3, r2
 800c084:	d003      	beq.n	800c08e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800c086:	2301      	movs	r3, #1
 800c088:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800c08c:	e06e      	b.n	800c16c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800c08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c090:	3301      	adds	r3, #1
 800c092:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800c09e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c0a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7ff fd32 	bl	800bb0c <enable_spad_bit>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800c0ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d10c      	bne.n	800c0d0 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800c0b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f7ff fd59 	bl	800bb7c <set_ref_spad_map>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800c0d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d146      	bne.n	800c166 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800c0d8:	f107 0312 	add.w	r3, r7, #18
 800c0dc:	4619      	mov	r1, r3
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f7ff fdee 	bl	800bcc0 <perform_ref_signal_measurement>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800c0ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d13b      	bne.n	800c16a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800c0f2:	8a7b      	ldrh	r3, [r7, #18]
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c0f8:	1ad3      	subs	r3, r2, r3
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	bfb8      	it	lt
 800c0fe:	425b      	neglt	r3, r3
 800c100:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800c102:	8a7b      	ldrh	r3, [r7, #18]
 800c104:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c106:	429a      	cmp	r2, r3
 800c108:	d21c      	bcs.n	800c144 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800c10a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c10c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c10e:	429a      	cmp	r2, r3
 800c110:	d914      	bls.n	800c13c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800c112:	f107 031c 	add.w	r3, r7, #28
 800c116:	4619      	mov	r1, r3
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	f7ff fd2f 	bl	800bb7c <set_ref_spad_map>
 800c11e:	4603      	mov	r3, r0
 800c120:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800c12a:	f107 011c 	add.w	r1, r7, #28
 800c12e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c130:	4618      	mov	r0, r3
 800c132:	f004 ff7e 	bl	8011032 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800c136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c138:	3b01      	subs	r3, #1
 800c13a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800c13c:	2301      	movs	r3, #1
 800c13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c142:	e00a      	b.n	800c15a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800c144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c146:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800c14e:	f107 031c 	add.w	r3, r7, #28
 800c152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c154:	4618      	mov	r0, r3
 800c156:	f004 ff6c 	bl	8011032 <memcpy>
		while (!complete) {
 800c15a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f43f af74 	beq.w	800c04c <VL53L0X_perform_ref_spad_management+0x2b8>
 800c164:	e002      	b.n	800c16c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800c166:	bf00      	nop
 800c168:	e000      	b.n	800c16c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800c16a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c16c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c170:	2b00      	cmp	r3, #0
 800c172:	d115      	bne.n	800c1a0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c178:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800c180:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2201      	movs	r2, #1
 800c186:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	781a      	ldrb	r2, [r3, #0]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800c1a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	375c      	adds	r7, #92	; 0x5c
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd90      	pop	{r4, r7, pc}

0800c1ac <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800c1ac:	b590      	push	{r4, r7, lr}
 800c1ae:	b093      	sub	sp, #76	; 0x4c
 800c1b0:	af06      	add	r7, sp, #24
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800c1c4:	23b4      	movs	r3, #180	; 0xb4
 800c1c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800c1ca:	2306      	movs	r3, #6
 800c1cc:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800c1ce:	232c      	movs	r3, #44	; 0x2c
 800c1d0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	21ff      	movs	r1, #255	; 0xff
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f002 fb58 	bl	800e88c <VL53L0X_WrByte>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800c1e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d107      	bne.n	800c1fa <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	214f      	movs	r1, #79	; 0x4f
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f002 fb4c 	bl	800e88c <VL53L0X_WrByte>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800c1fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d107      	bne.n	800c212 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800c202:	222c      	movs	r2, #44	; 0x2c
 800c204:	214e      	movs	r1, #78	; 0x4e
 800c206:	68f8      	ldr	r0, [r7, #12]
 800c208:	f002 fb40 	bl	800e88c <VL53L0X_WrByte>
 800c20c:	4603      	mov	r3, r0
 800c20e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800c212:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c216:	2b00      	cmp	r3, #0
 800c218:	d107      	bne.n	800c22a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c21a:	2200      	movs	r2, #0
 800c21c:	21ff      	movs	r1, #255	; 0xff
 800c21e:	68f8      	ldr	r0, [r7, #12]
 800c220:	f002 fb34 	bl	800e88c <VL53L0X_WrByte>
 800c224:	4603      	mov	r3, r0
 800c226:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800c22a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d109      	bne.n	800c246 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800c232:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c236:	461a      	mov	r2, r3
 800c238:	21b6      	movs	r1, #182	; 0xb6
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f002 fb26 	bl	800e88c <VL53L0X_WrByte>
 800c240:	4603      	mov	r3, r0
 800c242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800c246:	2300      	movs	r3, #0
 800c248:	627b      	str	r3, [r7, #36]	; 0x24
 800c24a:	e009      	b.n	800c260 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c24c:	68fa      	ldr	r2, [r7, #12]
 800c24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c250:	4413      	add	r3, r2
 800c252:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800c256:	2200      	movs	r2, #0
 800c258:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800c25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25c:	3301      	adds	r3, #1
 800c25e:	627b      	str	r3, [r7, #36]	; 0x24
 800c260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c262:	69fb      	ldr	r3, [r7, #28]
 800c264:	429a      	cmp	r2, r3
 800c266:	d3f1      	bcc.n	800c24c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800c268:	79fb      	ldrb	r3, [r7, #7]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d011      	beq.n	800c292 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800c26e:	e002      	b.n	800c276 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800c270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c272:	3301      	adds	r3, #1
 800c274:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800c276:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800c27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27c:	4413      	add	r3, r2
 800c27e:	4618      	mov	r0, r3
 800c280:	f7ff fc2a 	bl	800bad8 <is_aperture>
 800c284:	4603      	mov	r3, r0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d103      	bne.n	800c292 <VL53L0X_set_reference_spads+0xe6>
 800c28a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c28c:	69bb      	ldr	r3, [r7, #24]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d3ee      	bcc.n	800c270 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800c29e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c2a2:	79f9      	ldrb	r1, [r7, #7]
 800c2a4:	f107 0214 	add.w	r2, r7, #20
 800c2a8:	9204      	str	r2, [sp, #16]
 800c2aa:	68ba      	ldr	r2, [r7, #8]
 800c2ac:	9203      	str	r2, [sp, #12]
 800c2ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2b0:	9202      	str	r2, [sp, #8]
 800c2b2:	9301      	str	r3, [sp, #4]
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	4623      	mov	r3, r4
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	68f8      	ldr	r0, [r7, #12]
 800c2be:	f7ff fc83 	bl	800bbc8 <enable_ref_spads>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800c2c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d10c      	bne.n	800c2ea <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	b2da      	uxtb	r2, r3
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	79fa      	ldrb	r2, [r7, #7]
 800c2e6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800c2ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3734      	adds	r7, #52	; 0x34
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd90      	pop	{r4, r7, pc}

0800c2f6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b084      	sub	sp, #16
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
 800c2fe:	460b      	mov	r3, r1
 800c300:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c302:	2300      	movs	r3, #0
 800c304:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d10a      	bne.n	800c324 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800c30e:	78fb      	ldrb	r3, [r7, #3]
 800c310:	f043 0301 	orr.w	r3, r3, #1
 800c314:	b2db      	uxtb	r3, r3
 800c316:	461a      	mov	r2, r3
 800c318:	2100      	movs	r1, #0
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f002 fab6 	bl	800e88c <VL53L0X_WrByte>
 800c320:	4603      	mov	r3, r0
 800c322:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800c324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d104      	bne.n	800c336 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 f9bf 	bl	800c6b0 <VL53L0X_measurement_poll_for_completion>
 800c332:	4603      	mov	r3, r0
 800c334:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d105      	bne.n	800c34a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c33e:	2100      	movs	r1, #0
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f7ff fab5 	bl	800b8b0 <VL53L0X_ClearInterruptMask>
 800c346:	4603      	mov	r3, r0
 800c348:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c34a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d106      	bne.n	800c360 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800c352:	2200      	movs	r2, #0
 800c354:	2100      	movs	r1, #0
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f002 fa98 	bl	800e88c <VL53L0X_WrByte>
 800c35c:	4603      	mov	r3, r0
 800c35e:	73fb      	strb	r3, [r7, #15]

	return Status;
 800c360:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3710      	adds	r7, #16
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	4608      	mov	r0, r1
 800c376:	4611      	mov	r1, r2
 800c378:	461a      	mov	r2, r3
 800c37a:	4603      	mov	r3, r0
 800c37c:	70fb      	strb	r3, [r7, #3]
 800c37e:	460b      	mov	r3, r1
 800c380:	70bb      	strb	r3, [r7, #2]
 800c382:	4613      	mov	r3, r2
 800c384:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c386:	2300      	movs	r3, #0
 800c388:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800c38a:	2300      	movs	r3, #0
 800c38c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c38e:	2201      	movs	r2, #1
 800c390:	21ff      	movs	r1, #255	; 0xff
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f002 fa7a 	bl	800e88c <VL53L0X_WrByte>
 800c398:	4603      	mov	r3, r0
 800c39a:	461a      	mov	r2, r3
 800c39c:	7bfb      	ldrb	r3, [r7, #15]
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f002 fa70 	bl	800e88c <VL53L0X_WrByte>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	7bfb      	ldrb	r3, [r7, #15]
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	21ff      	movs	r1, #255	; 0xff
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f002 fa66 	bl	800e88c <VL53L0X_WrByte>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	7bfb      	ldrb	r3, [r7, #15]
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800c3ca:	78fb      	ldrb	r3, [r7, #3]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d01e      	beq.n	800c40e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800c3d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d009      	beq.n	800c3ec <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800c3d8:	69ba      	ldr	r2, [r7, #24]
 800c3da:	21cb      	movs	r1, #203	; 0xcb
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f002 fad7 	bl	800e990 <VL53L0X_RdByte>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	7bfb      	ldrb	r3, [r7, #15]
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800c3ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d02a      	beq.n	800c44a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800c3f4:	f107 030e 	add.w	r3, r7, #14
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	21ee      	movs	r1, #238	; 0xee
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f002 fac7 	bl	800e990 <VL53L0X_RdByte>
 800c402:	4603      	mov	r3, r0
 800c404:	461a      	mov	r2, r3
 800c406:	7bfb      	ldrb	r3, [r7, #15]
 800c408:	4313      	orrs	r3, r2
 800c40a:	73fb      	strb	r3, [r7, #15]
 800c40c:	e01d      	b.n	800c44a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800c40e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00a      	beq.n	800c42c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800c416:	78bb      	ldrb	r3, [r7, #2]
 800c418:	461a      	mov	r2, r3
 800c41a:	21cb      	movs	r1, #203	; 0xcb
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f002 fa35 	bl	800e88c <VL53L0X_WrByte>
 800c422:	4603      	mov	r3, r0
 800c424:	461a      	mov	r2, r3
 800c426:	7bfb      	ldrb	r3, [r7, #15]
 800c428:	4313      	orrs	r3, r2
 800c42a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800c42c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00a      	beq.n	800c44a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800c434:	787b      	ldrb	r3, [r7, #1]
 800c436:	2280      	movs	r2, #128	; 0x80
 800c438:	21ee      	movs	r1, #238	; 0xee
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f002 fa74 	bl	800e928 <VL53L0X_UpdateByte>
 800c440:	4603      	mov	r3, r0
 800c442:	461a      	mov	r2, r3
 800c444:	7bfb      	ldrb	r3, [r7, #15]
 800c446:	4313      	orrs	r3, r2
 800c448:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c44a:	2201      	movs	r2, #1
 800c44c:	21ff      	movs	r1, #255	; 0xff
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f002 fa1c 	bl	800e88c <VL53L0X_WrByte>
 800c454:	4603      	mov	r3, r0
 800c456:	461a      	mov	r2, r3
 800c458:	7bfb      	ldrb	r3, [r7, #15]
 800c45a:	4313      	orrs	r3, r2
 800c45c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c45e:	2201      	movs	r2, #1
 800c460:	2100      	movs	r1, #0
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f002 fa12 	bl	800e88c <VL53L0X_WrByte>
 800c468:	4603      	mov	r3, r0
 800c46a:	461a      	mov	r2, r3
 800c46c:	7bfb      	ldrb	r3, [r7, #15]
 800c46e:	4313      	orrs	r3, r2
 800c470:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c472:	2200      	movs	r2, #0
 800c474:	21ff      	movs	r1, #255	; 0xff
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f002 fa08 	bl	800e88c <VL53L0X_WrByte>
 800c47c:	4603      	mov	r3, r0
 800c47e:	461a      	mov	r2, r3
 800c480:	7bfb      	ldrb	r3, [r7, #15]
 800c482:	4313      	orrs	r3, r2
 800c484:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800c486:	7bbb      	ldrb	r3, [r7, #14]
 800c488:	f023 0310 	bic.w	r3, r3, #16
 800c48c:	b2da      	uxtb	r2, r3
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	701a      	strb	r2, [r3, #0]

	return Status;
 800c492:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c496:	4618      	mov	r0, r3
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}

0800c49e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c49e:	b580      	push	{r7, lr}
 800c4a0:	b08a      	sub	sp, #40	; 0x28
 800c4a2:	af04      	add	r7, sp, #16
 800c4a4:	60f8      	str	r0, [r7, #12]
 800c4a6:	60b9      	str	r1, [r7, #8]
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	71fb      	strb	r3, [r7, #7]
 800c4b0:	4613      	mov	r3, r2
 800c4b2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c4c8:	79bb      	ldrb	r3, [r7, #6]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d003      	beq.n	800c4d6 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c4d4:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	2101      	movs	r1, #1
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	f002 f9d6 	bl	800e88c <VL53L0X_WrByte>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800c4e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d105      	bne.n	800c4f8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800c4ec:	2140      	movs	r1, #64	; 0x40
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f7ff ff01 	bl	800c2f6 <VL53L0X_perform_single_ref_calibration>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c4f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d115      	bne.n	800c52c <VL53L0X_perform_vhv_calibration+0x8e>
 800c500:	79fb      	ldrb	r3, [r7, #7]
 800c502:	2b01      	cmp	r3, #1
 800c504:	d112      	bne.n	800c52c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c506:	7d39      	ldrb	r1, [r7, #20]
 800c508:	7d7a      	ldrb	r2, [r7, #21]
 800c50a:	2300      	movs	r3, #0
 800c50c:	9303      	str	r3, [sp, #12]
 800c50e:	2301      	movs	r3, #1
 800c510:	9302      	str	r3, [sp, #8]
 800c512:	f107 0313 	add.w	r3, r7, #19
 800c516:	9301      	str	r3, [sp, #4]
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	9300      	str	r3, [sp, #0]
 800c51c:	460b      	mov	r3, r1
 800c51e:	2101      	movs	r1, #1
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f7ff ff23 	bl	800c36c <VL53L0X_ref_calibration_io>
 800c526:	4603      	mov	r3, r0
 800c528:	75fb      	strb	r3, [r7, #23]
 800c52a:	e002      	b.n	800c532 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	2200      	movs	r2, #0
 800c530:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800c532:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d112      	bne.n	800c560 <VL53L0X_perform_vhv_calibration+0xc2>
 800c53a:	79bb      	ldrb	r3, [r7, #6]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00f      	beq.n	800c560 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c540:	7dbb      	ldrb	r3, [r7, #22]
 800c542:	461a      	mov	r2, r3
 800c544:	2101      	movs	r1, #1
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	f002 f9a0 	bl	800e88c <VL53L0X_WrByte>
 800c54c:	4603      	mov	r3, r0
 800c54e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c550:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d103      	bne.n	800c560 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	7dba      	ldrb	r2, [r7, #22]
 800c55c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800c560:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3718      	adds	r7, #24
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b08a      	sub	sp, #40	; 0x28
 800c570:	af04      	add	r7, sp, #16
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	4611      	mov	r1, r2
 800c578:	461a      	mov	r2, r3
 800c57a:	460b      	mov	r3, r1
 800c57c:	71fb      	strb	r3, [r7, #7]
 800c57e:	4613      	mov	r3, r2
 800c580:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c582:	2300      	movs	r3, #0
 800c584:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c586:	2300      	movs	r3, #0
 800c588:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800c58a:	2300      	movs	r3, #0
 800c58c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800c58e:	2300      	movs	r3, #0
 800c590:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c592:	79bb      	ldrb	r3, [r7, #6]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d003      	beq.n	800c5a0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c59e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800c5a0:	2202      	movs	r2, #2
 800c5a2:	2101      	movs	r1, #1
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f002 f971 	bl	800e88c <VL53L0X_WrByte>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800c5ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d105      	bne.n	800c5c2 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800c5b6:	2100      	movs	r1, #0
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f7ff fe9c 	bl	800c2f6 <VL53L0X_perform_single_ref_calibration>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c5c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d115      	bne.n	800c5f6 <VL53L0X_perform_phase_calibration+0x8a>
 800c5ca:	79fb      	ldrb	r3, [r7, #7]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d112      	bne.n	800c5f6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c5d0:	7d39      	ldrb	r1, [r7, #20]
 800c5d2:	7d7a      	ldrb	r2, [r7, #21]
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	9303      	str	r3, [sp, #12]
 800c5d8:	2300      	movs	r3, #0
 800c5da:	9302      	str	r3, [sp, #8]
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	9301      	str	r3, [sp, #4]
 800c5e0:	f107 0313 	add.w	r3, r7, #19
 800c5e4:	9300      	str	r3, [sp, #0]
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	2101      	movs	r1, #1
 800c5ea:	68f8      	ldr	r0, [r7, #12]
 800c5ec:	f7ff febe 	bl	800c36c <VL53L0X_ref_calibration_io>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	75fb      	strb	r3, [r7, #23]
 800c5f4:	e002      	b.n	800c5fc <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800c5fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d112      	bne.n	800c62a <VL53L0X_perform_phase_calibration+0xbe>
 800c604:	79bb      	ldrb	r3, [r7, #6]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00f      	beq.n	800c62a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c60a:	7dbb      	ldrb	r3, [r7, #22]
 800c60c:	461a      	mov	r2, r3
 800c60e:	2101      	movs	r1, #1
 800c610:	68f8      	ldr	r0, [r7, #12]
 800c612:	f002 f93b 	bl	800e88c <VL53L0X_WrByte>
 800c616:	4603      	mov	r3, r0
 800c618:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c61a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d103      	bne.n	800c62a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	7dba      	ldrb	r2, [r7, #22]
 800c626:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800c62a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3718      	adds	r7, #24
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b086      	sub	sp, #24
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	60f8      	str	r0, [r7, #12]
 800c63e:	60b9      	str	r1, [r7, #8]
 800c640:	607a      	str	r2, [r7, #4]
 800c642:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c644:	2300      	movs	r3, #0
 800c646:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c648:	2300      	movs	r3, #0
 800c64a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c652:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800c654:	78fa      	ldrb	r2, [r7, #3]
 800c656:	2300      	movs	r3, #0
 800c658:	68b9      	ldr	r1, [r7, #8]
 800c65a:	68f8      	ldr	r0, [r7, #12]
 800c65c:	f7ff ff1f 	bl	800c49e <VL53L0X_perform_vhv_calibration>
 800c660:	4603      	mov	r3, r0
 800c662:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800c664:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d107      	bne.n	800c67c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800c66c:	78fa      	ldrb	r2, [r7, #3]
 800c66e:	2300      	movs	r3, #0
 800c670:	6879      	ldr	r1, [r7, #4]
 800c672:	68f8      	ldr	r0, [r7, #12]
 800c674:	f7ff ff7a 	bl	800c56c <VL53L0X_perform_phase_calibration>
 800c678:	4603      	mov	r3, r0
 800c67a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800c67c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10f      	bne.n	800c6a4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c684:	7dbb      	ldrb	r3, [r7, #22]
 800c686:	461a      	mov	r2, r3
 800c688:	2101      	movs	r1, #1
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f002 f8fe 	bl	800e88c <VL53L0X_WrByte>
 800c690:	4603      	mov	r3, r0
 800c692:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c694:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d103      	bne.n	800c6a4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	7dba      	ldrb	r2, [r7, #22]
 800c6a0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800c6a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3718      	adds	r7, #24
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b086      	sub	sp, #24
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800c6c4:	f107 030f 	add.w	r3, r7, #15
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7fe fe02 	bl	800b2d4 <VL53L0X_GetMeasurementDataReady>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800c6d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d110      	bne.n	800c6fe <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800c6dc:	7bfb      	ldrb	r3, [r7, #15]
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d00f      	beq.n	800c702 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c6ee:	d302      	bcc.n	800c6f6 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800c6f0:	23f9      	movs	r3, #249	; 0xf9
 800c6f2:	75fb      	strb	r3, [r7, #23]
			break;
 800c6f4:	e006      	b.n	800c704 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f002 f9e8 	bl	800eacc <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800c6fc:	e7e2      	b.n	800c6c4 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800c6fe:	bf00      	nop
 800c700:	e000      	b.n	800c704 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800c702:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800c704:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3718      	adds	r7, #24
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800c710:	b480      	push	{r7}
 800c712:	b085      	sub	sp, #20
 800c714:	af00      	add	r7, sp, #0
 800c716:	4603      	mov	r3, r0
 800c718:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800c71a:	2300      	movs	r3, #0
 800c71c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800c71e:	79fb      	ldrb	r3, [r7, #7]
 800c720:	3301      	adds	r3, #1
 800c722:	b2db      	uxtb	r3, r3
 800c724:	005b      	lsls	r3, r3, #1
 800c726:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800c728:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3714      	adds	r7, #20
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr

0800c736 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800c736:	b480      	push	{r7}
 800c738:	b085      	sub	sp, #20
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800c73e:	2300      	movs	r3, #0
 800c740:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800c742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c746:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800c748:	e002      	b.n	800c750 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	089b      	lsrs	r3, r3, #2
 800c74e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800c750:	68ba      	ldr	r2, [r7, #8]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	429a      	cmp	r2, r3
 800c756:	d8f8      	bhi.n	800c74a <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800c758:	e017      	b.n	800c78a <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800c75a:	68fa      	ldr	r2, [r7, #12]
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	4413      	add	r3, r2
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	429a      	cmp	r2, r3
 800c764:	d30b      	bcc.n	800c77e <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800c766:	68fa      	ldr	r2, [r7, #12]
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	4413      	add	r3, r2
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	1ad3      	subs	r3, r2, r3
 800c770:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	085b      	lsrs	r3, r3, #1
 800c776:	68ba      	ldr	r2, [r7, #8]
 800c778:	4413      	add	r3, r2
 800c77a:	60fb      	str	r3, [r7, #12]
 800c77c:	e002      	b.n	800c784 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	085b      	lsrs	r3, r3, #1
 800c782:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	089b      	lsrs	r3, r3, #2
 800c788:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d1e4      	bne.n	800c75a <VL53L0X_isqrt+0x24>
	}

	return res;
 800c790:	68fb      	ldr	r3, [r7, #12]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3714      	adds	r7, #20
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr

0800c79e <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800c79e:	b580      	push	{r7, lr}
 800c7a0:	b086      	sub	sp, #24
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	2183      	movs	r1, #131	; 0x83
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f002 f86c 	bl	800e88c <VL53L0X_WrByte>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	7dfb      	ldrb	r3, [r7, #23]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800c7be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d11e      	bne.n	800c804 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800c7ca:	f107 030f 	add.w	r3, r7, #15
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	2183      	movs	r1, #131	; 0x83
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f002 f8dc 	bl	800e990 <VL53L0X_RdByte>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800c7dc:	7bfb      	ldrb	r3, [r7, #15]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d10a      	bne.n	800c7f8 <VL53L0X_device_read_strobe+0x5a>
 800c7e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d106      	bne.n	800c7f8 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c7f6:	d3e8      	bcc.n	800c7ca <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c7fe:	d301      	bcc.n	800c804 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800c800:	23f9      	movs	r3, #249	; 0xf9
 800c802:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800c804:	2201      	movs	r2, #1
 800c806:	2183      	movs	r1, #131	; 0x83
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f002 f83f 	bl	800e88c <VL53L0X_WrByte>
 800c80e:	4603      	mov	r3, r0
 800c810:	461a      	mov	r2, r3
 800c812:	7dfb      	ldrb	r3, [r7, #23]
 800c814:	4313      	orrs	r3, r2
 800c816:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800c818:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3718      	adds	r7, #24
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b098      	sub	sp, #96	; 0x60
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	460b      	mov	r3, r1
 800c82e:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c830:	2300      	movs	r3, #0
 800c832:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800c836:	2300      	movs	r3, #0
 800c838:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800c83c:	2300      	movs	r3, #0
 800c83e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800c842:	2300      	movs	r3, #0
 800c844:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800c846:	2300      	movs	r3, #0
 800c848:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800c84e:	2300      	movs	r3, #0
 800c850:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800c854:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800c858:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800c85a:	2300      	movs	r3, #0
 800c85c:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800c85e:	2300      	movs	r3, #0
 800c860:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800c862:	2300      	movs	r3, #0
 800c864:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800c86c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800c870:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c874:	2b07      	cmp	r3, #7
 800c876:	f000 8408 	beq.w	800d08a <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c87a:	2201      	movs	r2, #1
 800c87c:	2180      	movs	r1, #128	; 0x80
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f002 f804 	bl	800e88c <VL53L0X_WrByte>
 800c884:	4603      	mov	r3, r0
 800c886:	461a      	mov	r2, r3
 800c888:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c88c:	4313      	orrs	r3, r2
 800c88e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c892:	2201      	movs	r2, #1
 800c894:	21ff      	movs	r1, #255	; 0xff
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f001 fff8 	bl	800e88c <VL53L0X_WrByte>
 800c89c:	4603      	mov	r3, r0
 800c89e:	461a      	mov	r2, r3
 800c8a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f001 ffec 	bl	800e88c <VL53L0X_WrByte>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800c8c2:	2206      	movs	r2, #6
 800c8c4:	21ff      	movs	r1, #255	; 0xff
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f001 ffe0 	bl	800e88c <VL53L0X_WrByte>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800c8da:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800c8de:	461a      	mov	r2, r3
 800c8e0:	2183      	movs	r1, #131	; 0x83
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f002 f854 	bl	800e990 <VL53L0X_RdByte>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800c8f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8fa:	f043 0304 	orr.w	r3, r3, #4
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	461a      	mov	r2, r3
 800c902:	2183      	movs	r1, #131	; 0x83
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f001 ffc1 	bl	800e88c <VL53L0X_WrByte>
 800c90a:	4603      	mov	r3, r0
 800c90c:	461a      	mov	r2, r3
 800c90e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c912:	4313      	orrs	r3, r2
 800c914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800c918:	2207      	movs	r2, #7
 800c91a:	21ff      	movs	r1, #255	; 0xff
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f001 ffb5 	bl	800e88c <VL53L0X_WrByte>
 800c922:	4603      	mov	r3, r0
 800c924:	461a      	mov	r2, r3
 800c926:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c92a:	4313      	orrs	r3, r2
 800c92c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800c930:	2201      	movs	r2, #1
 800c932:	2181      	movs	r1, #129	; 0x81
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f001 ffa9 	bl	800e88c <VL53L0X_WrByte>
 800c93a:	4603      	mov	r3, r0
 800c93c:	461a      	mov	r2, r3
 800c93e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c942:	4313      	orrs	r3, r2
 800c944:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f002 f8bf 	bl	800eacc <VL53L0X_PollingDelay>
 800c94e:	4603      	mov	r3, r0
 800c950:	461a      	mov	r2, r3
 800c952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c956:	4313      	orrs	r3, r2
 800c958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c95c:	2201      	movs	r2, #1
 800c95e:	2180      	movs	r1, #128	; 0x80
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f001 ff93 	bl	800e88c <VL53L0X_WrByte>
 800c966:	4603      	mov	r3, r0
 800c968:	461a      	mov	r2, r3
 800c96a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c96e:	4313      	orrs	r3, r2
 800c970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800c974:	78fb      	ldrb	r3, [r7, #3]
 800c976:	f003 0301 	and.w	r3, r3, #1
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	f000 8098 	beq.w	800cab0 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c980:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c984:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c988:	2b00      	cmp	r3, #0
 800c98a:	f040 8091 	bne.w	800cab0 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800c98e:	226b      	movs	r2, #107	; 0x6b
 800c990:	2194      	movs	r1, #148	; 0x94
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f001 ff7a 	bl	800e88c <VL53L0X_WrByte>
 800c998:	4603      	mov	r3, r0
 800c99a:	461a      	mov	r2, r3
 800c99c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f7ff fef9 	bl	800c79e <VL53L0X_device_read_strobe>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c9ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c9be:	461a      	mov	r2, r3
 800c9c0:	2190      	movs	r1, #144	; 0x90
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f002 f846 	bl	800ea54 <VL53L0X_RdDWord>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800c9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d8:	0a1b      	lsrs	r3, r3, #8
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9e0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800c9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e6:	0bdb      	lsrs	r3, r3, #15
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	f003 0301 	and.w	r3, r3, #1
 800c9ee:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800c9f2:	2224      	movs	r2, #36	; 0x24
 800c9f4:	2194      	movs	r1, #148	; 0x94
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f001 ff48 	bl	800e88c <VL53L0X_WrByte>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	461a      	mov	r2, r3
 800ca00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca04:	4313      	orrs	r3, r2
 800ca06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f7ff fec7 	bl	800c79e <VL53L0X_device_read_strobe>
 800ca10:	4603      	mov	r3, r0
 800ca12:	461a      	mov	r2, r3
 800ca14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ca1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ca22:	461a      	mov	r2, r3
 800ca24:	2190      	movs	r1, #144	; 0x90
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f002 f814 	bl	800ea54 <VL53L0X_RdDWord>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	461a      	mov	r2, r3
 800ca30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca34:	4313      	orrs	r3, r2
 800ca36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3c:	0e1b      	lsrs	r3, r3, #24
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800ca42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca44:	0c1b      	lsrs	r3, r3, #16
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800ca4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4c:	0a1b      	lsrs	r3, r3, #8
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800ca52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800ca58:	2225      	movs	r2, #37	; 0x25
 800ca5a:	2194      	movs	r1, #148	; 0x94
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f001 ff15 	bl	800e88c <VL53L0X_WrByte>
 800ca62:	4603      	mov	r3, r0
 800ca64:	461a      	mov	r2, r3
 800ca66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f7ff fe94 	bl	800c79e <VL53L0X_device_read_strobe>
 800ca76:	4603      	mov	r3, r0
 800ca78:	461a      	mov	r2, r3
 800ca7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ca84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ca88:	461a      	mov	r2, r3
 800ca8a:	2190      	movs	r1, #144	; 0x90
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f001 ffe1 	bl	800ea54 <VL53L0X_RdDWord>
 800ca92:	4603      	mov	r3, r0
 800ca94:	461a      	mov	r2, r3
 800ca96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800caa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa2:	0e1b      	lsrs	r3, r3, #24
 800caa4:	b2db      	uxtb	r3, r3
 800caa6:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800caa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caaa:	0c1b      	lsrs	r3, r3, #16
 800caac:	b2db      	uxtb	r3, r3
 800caae:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800cab0:	78fb      	ldrb	r3, [r7, #3]
 800cab2:	f003 0302 	and.w	r3, r3, #2
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	f000 8189 	beq.w	800cdce <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800cabc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cac0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f040 8182 	bne.w	800cdce <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800caca:	2202      	movs	r2, #2
 800cacc:	2194      	movs	r1, #148	; 0x94
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f001 fedc 	bl	800e88c <VL53L0X_WrByte>
 800cad4:	4603      	mov	r3, r0
 800cad6:	461a      	mov	r2, r3
 800cad8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cadc:	4313      	orrs	r3, r2
 800cade:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7ff fe5b 	bl	800c79e <VL53L0X_device_read_strobe>
 800cae8:	4603      	mov	r3, r0
 800caea:	461a      	mov	r2, r3
 800caec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800caf0:	4313      	orrs	r3, r2
 800caf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800caf6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800cafa:	461a      	mov	r2, r3
 800cafc:	2190      	movs	r1, #144	; 0x90
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f001 ff46 	bl	800e990 <VL53L0X_RdByte>
 800cb04:	4603      	mov	r3, r0
 800cb06:	461a      	mov	r2, r3
 800cb08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800cb12:	227b      	movs	r2, #123	; 0x7b
 800cb14:	2194      	movs	r1, #148	; 0x94
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f001 feb8 	bl	800e88c <VL53L0X_WrByte>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	461a      	mov	r2, r3
 800cb20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb24:	4313      	orrs	r3, r2
 800cb26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7ff fe37 	bl	800c79e <VL53L0X_device_read_strobe>
 800cb30:	4603      	mov	r3, r0
 800cb32:	461a      	mov	r2, r3
 800cb34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800cb3e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800cb42:	461a      	mov	r2, r3
 800cb44:	2190      	movs	r1, #144	; 0x90
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f001 ff22 	bl	800e990 <VL53L0X_RdByte>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	461a      	mov	r2, r3
 800cb50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb54:	4313      	orrs	r3, r2
 800cb56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800cb5a:	2277      	movs	r2, #119	; 0x77
 800cb5c:	2194      	movs	r1, #148	; 0x94
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f001 fe94 	bl	800e88c <VL53L0X_WrByte>
 800cb64:	4603      	mov	r3, r0
 800cb66:	461a      	mov	r2, r3
 800cb68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb6c:	4313      	orrs	r3, r2
 800cb6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f7ff fe13 	bl	800c79e <VL53L0X_device_read_strobe>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb80:	4313      	orrs	r3, r2
 800cb82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cb86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	2190      	movs	r1, #144	; 0x90
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f001 ff60 	bl	800ea54 <VL53L0X_RdDWord>
 800cb94:	4603      	mov	r3, r0
 800cb96:	461a      	mov	r2, r3
 800cb98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800cba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba4:	0e5b      	lsrs	r3, r3, #25
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb2:	0c9b      	lsrs	r3, r3, #18
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbba:	b2db      	uxtb	r3, r3
 800cbbc:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800cbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc0:	0adb      	lsrs	r3, r3, #11
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800cbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbce:	091b      	lsrs	r3, r3, #4
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800cbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	00db      	lsls	r3, r3, #3
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800cbe6:	b2db      	uxtb	r3, r3
 800cbe8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800cbec:	2278      	movs	r2, #120	; 0x78
 800cbee:	2194      	movs	r1, #148	; 0x94
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f001 fe4b 	bl	800e88c <VL53L0X_WrByte>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f7ff fdca 	bl	800c79e <VL53L0X_device_read_strobe>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc12:	4313      	orrs	r3, r2
 800cc14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cc18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	2190      	movs	r1, #144	; 0x90
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f001 ff17 	bl	800ea54 <VL53L0X_RdDWord>
 800cc26:	4603      	mov	r3, r0
 800cc28:	461a      	mov	r2, r3
 800cc2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800cc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc36:	0f5b      	lsrs	r3, r3, #29
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc3e:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800cc40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cc44:	4413      	add	r3, r2
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800cc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc4c:	0d9b      	lsrs	r3, r3, #22
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800cc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5a:	0bdb      	lsrs	r3, r3, #15
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800cc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc68:	0a1b      	lsrs	r3, r3, #8
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800cc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc76:	085b      	lsrs	r3, r3, #1
 800cc78:	b2db      	uxtb	r3, r3
 800cc7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800cc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	019b      	lsls	r3, r3, #6
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800cc94:	2279      	movs	r2, #121	; 0x79
 800cc96:	2194      	movs	r1, #148	; 0x94
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f001 fdf7 	bl	800e88c <VL53L0X_WrByte>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	461a      	mov	r2, r3
 800cca2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cca6:	4313      	orrs	r3, r2
 800cca8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f7ff fd76 	bl	800c79e <VL53L0X_device_read_strobe>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ccc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	2190      	movs	r1, #144	; 0x90
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f001 fec3 	bl	800ea54 <VL53L0X_RdDWord>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800ccdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccde:	0e9b      	lsrs	r3, r3, #26
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cce6:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800cce8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ccec:	4413      	add	r3, r2
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800ccf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf4:	0cdb      	lsrs	r3, r3, #19
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800cd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd02:	0b1b      	lsrs	r3, r3, #12
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800cd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd10:	095b      	lsrs	r3, r3, #5
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800cd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1e:	b2db      	uxtb	r3, r3
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800cd2e:	227a      	movs	r2, #122	; 0x7a
 800cd30:	2194      	movs	r1, #148	; 0x94
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f001 fdaa 	bl	800e88c <VL53L0X_WrByte>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd40:	4313      	orrs	r3, r2
 800cd42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f7ff fd29 	bl	800c79e <VL53L0X_device_read_strobe>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	461a      	mov	r2, r3
 800cd50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd54:	4313      	orrs	r3, r2
 800cd56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cd5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd5e:	461a      	mov	r2, r3
 800cd60:	2190      	movs	r1, #144	; 0x90
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f001 fe76 	bl	800ea54 <VL53L0X_RdDWord>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd70:	4313      	orrs	r3, r2
 800cd72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800cd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd78:	0f9b      	lsrs	r3, r3, #30
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd80:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800cd82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cd86:	4413      	add	r3, r2
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8e:	0ddb      	lsrs	r3, r3, #23
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800cd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9c:	0c1b      	lsrs	r3, r3, #16
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800cda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdaa:	0a5b      	lsrs	r3, r3, #9
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800cdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdba:	089b      	lsrs	r3, r3, #2
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdc2:	b2db      	uxtb	r3, r3
 800cdc4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800cdc8:	2300      	movs	r3, #0
 800cdca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800cdce:	78fb      	ldrb	r3, [r7, #3]
 800cdd0:	f003 0304 	and.w	r3, r3, #4
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f000 80f1 	beq.w	800cfbc <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800cdda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cdde:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f040 80ea 	bne.w	800cfbc <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800cde8:	227b      	movs	r2, #123	; 0x7b
 800cdea:	2194      	movs	r1, #148	; 0x94
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f001 fd4d 	bl	800e88c <VL53L0X_WrByte>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7ff fccc 	bl	800c79e <VL53L0X_device_read_strobe>
 800ce06:	4603      	mov	r3, r0
 800ce08:	461a      	mov	r2, r3
 800ce0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800ce14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ce18:	461a      	mov	r2, r3
 800ce1a:	2190      	movs	r1, #144	; 0x90
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f001 fe19 	bl	800ea54 <VL53L0X_RdDWord>
 800ce22:	4603      	mov	r3, r0
 800ce24:	461a      	mov	r2, r3
 800ce26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800ce30:	227c      	movs	r2, #124	; 0x7c
 800ce32:	2194      	movs	r1, #148	; 0x94
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f001 fd29 	bl	800e88c <VL53L0X_WrByte>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce42:	4313      	orrs	r3, r2
 800ce44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7ff fca8 	bl	800c79e <VL53L0X_device_read_strobe>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	461a      	mov	r2, r3
 800ce52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce56:	4313      	orrs	r3, r2
 800ce58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800ce5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce60:	461a      	mov	r2, r3
 800ce62:	2190      	movs	r1, #144	; 0x90
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f001 fdf5 	bl	800ea54 <VL53L0X_RdDWord>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce72:	4313      	orrs	r3, r2
 800ce74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800ce78:	2273      	movs	r2, #115	; 0x73
 800ce7a:	2194      	movs	r1, #148	; 0x94
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f001 fd05 	bl	800e88c <VL53L0X_WrByte>
 800ce82:	4603      	mov	r3, r0
 800ce84:	461a      	mov	r2, r3
 800ce86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce8a:	4313      	orrs	r3, r2
 800ce8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f7ff fc84 	bl	800c79e <VL53L0X_device_read_strobe>
 800ce96:	4603      	mov	r3, r0
 800ce98:	461a      	mov	r2, r3
 800ce9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cea4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cea8:	461a      	mov	r2, r3
 800ceaa:	2190      	movs	r1, #144	; 0x90
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f001 fdd1 	bl	800ea54 <VL53L0X_RdDWord>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ceba:	4313      	orrs	r3, r2
 800cebc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800cec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec2:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800cec8:	2274      	movs	r2, #116	; 0x74
 800ceca:	2194      	movs	r1, #148	; 0x94
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f001 fcdd 	bl	800e88c <VL53L0X_WrByte>
 800ced2:	4603      	mov	r3, r0
 800ced4:	461a      	mov	r2, r3
 800ced6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ceda:	4313      	orrs	r3, r2
 800cedc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f7ff fc5c 	bl	800c79e <VL53L0X_device_read_strobe>
 800cee6:	4603      	mov	r3, r0
 800cee8:	461a      	mov	r2, r3
 800ceea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ceee:	4313      	orrs	r3, r2
 800cef0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cef4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cef8:	461a      	mov	r2, r3
 800cefa:	2190      	movs	r1, #144	; 0x90
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f001 fda9 	bl	800ea54 <VL53L0X_RdDWord>
 800cf02:	4603      	mov	r3, r0
 800cf04:	461a      	mov	r2, r3
 800cf06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800cf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf12:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800cf14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf16:	4313      	orrs	r3, r2
 800cf18:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800cf1a:	2275      	movs	r2, #117	; 0x75
 800cf1c:	2194      	movs	r1, #148	; 0x94
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f001 fcb4 	bl	800e88c <VL53L0X_WrByte>
 800cf24:	4603      	mov	r3, r0
 800cf26:	461a      	mov	r2, r3
 800cf28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f7ff fc33 	bl	800c79e <VL53L0X_device_read_strobe>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf40:	4313      	orrs	r3, r2
 800cf42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cf46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	2190      	movs	r1, #144	; 0x90
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f001 fd80 	bl	800ea54 <VL53L0X_RdDWord>
 800cf54:	4603      	mov	r3, r0
 800cf56:	461a      	mov	r2, r3
 800cf58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800cf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf64:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800cf6a:	2276      	movs	r2, #118	; 0x76
 800cf6c:	2194      	movs	r1, #148	; 0x94
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f001 fc8c 	bl	800e88c <VL53L0X_WrByte>
 800cf74:	4603      	mov	r3, r0
 800cf76:	461a      	mov	r2, r3
 800cf78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf7c:	4313      	orrs	r3, r2
 800cf7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f7ff fc0b 	bl	800c79e <VL53L0X_device_read_strobe>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf90:	4313      	orrs	r3, r2
 800cf92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cf96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	2190      	movs	r1, #144	; 0x90
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f001 fd58 	bl	800ea54 <VL53L0X_RdDWord>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfac:	4313      	orrs	r3, r2
 800cfae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800cfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb4:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800cfb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	2181      	movs	r1, #129	; 0x81
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f001 fc63 	bl	800e88c <VL53L0X_WrByte>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	461a      	mov	r2, r3
 800cfca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800cfd4:	2206      	movs	r2, #6
 800cfd6:	21ff      	movs	r1, #255	; 0xff
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f001 fc57 	bl	800e88c <VL53L0X_WrByte>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800cfec:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800cff0:	461a      	mov	r2, r3
 800cff2:	2183      	movs	r1, #131	; 0x83
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f001 fccb 	bl	800e990 <VL53L0X_RdByte>
 800cffa:	4603      	mov	r3, r0
 800cffc:	461a      	mov	r2, r3
 800cffe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d002:	4313      	orrs	r3, r2
 800d004:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800d008:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d00c:	f023 0304 	bic.w	r3, r3, #4
 800d010:	b2db      	uxtb	r3, r3
 800d012:	461a      	mov	r2, r3
 800d014:	2183      	movs	r1, #131	; 0x83
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f001 fc38 	bl	800e88c <VL53L0X_WrByte>
 800d01c:	4603      	mov	r3, r0
 800d01e:	461a      	mov	r2, r3
 800d020:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d024:	4313      	orrs	r3, r2
 800d026:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d02a:	2201      	movs	r2, #1
 800d02c:	21ff      	movs	r1, #255	; 0xff
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f001 fc2c 	bl	800e88c <VL53L0X_WrByte>
 800d034:	4603      	mov	r3, r0
 800d036:	461a      	mov	r2, r3
 800d038:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d03c:	4313      	orrs	r3, r2
 800d03e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800d042:	2201      	movs	r2, #1
 800d044:	2100      	movs	r1, #0
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f001 fc20 	bl	800e88c <VL53L0X_WrByte>
 800d04c:	4603      	mov	r3, r0
 800d04e:	461a      	mov	r2, r3
 800d050:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d054:	4313      	orrs	r3, r2
 800d056:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d05a:	2200      	movs	r2, #0
 800d05c:	21ff      	movs	r1, #255	; 0xff
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f001 fc14 	bl	800e88c <VL53L0X_WrByte>
 800d064:	4603      	mov	r3, r0
 800d066:	461a      	mov	r2, r3
 800d068:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d06c:	4313      	orrs	r3, r2
 800d06e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800d072:	2200      	movs	r2, #0
 800d074:	2180      	movs	r1, #128	; 0x80
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f001 fc08 	bl	800e88c <VL53L0X_WrByte>
 800d07c:	4603      	mov	r3, r0
 800d07e:	461a      	mov	r2, r3
 800d080:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d084:	4313      	orrs	r3, r2
 800d086:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800d08a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800d08e:	2b00      	cmp	r3, #0
 800d090:	f040 808f 	bne.w	800d1b2 <VL53L0X_get_info_from_device+0x98e>
 800d094:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d098:	2b07      	cmp	r3, #7
 800d09a:	f000 808a 	beq.w	800d1b2 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800d09e:	78fb      	ldrb	r3, [r7, #3]
 800d0a0:	f003 0301 	and.w	r3, r3, #1
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d024      	beq.n	800d0f2 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800d0a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d0ac:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d11e      	bne.n	800d0f2 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800d0ba:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800d0c4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0cc:	e00e      	b.n	800d0ec <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800d0ce:	f107 0208 	add.w	r2, r7, #8
 800d0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0d4:	4413      	add	r3, r2
 800d0d6:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0dc:	4413      	add	r3, r2
 800d0de:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800d0e2:	460a      	mov	r2, r1
 800d0e4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800d0e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0e8:	3301      	adds	r3, #1
 800d0ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0ee:	2b05      	cmp	r3, #5
 800d0f0:	dded      	ble.n	800d0ce <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800d0f2:	78fb      	ldrb	r3, [r7, #3]
 800d0f4:	f003 0302 	and.w	r3, r3, #2
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d018      	beq.n	800d12e <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800d0fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d100:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800d104:	2b00      	cmp	r3, #0
 800d106:	d112      	bne.n	800d12e <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d108:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d112:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	33f3      	adds	r3, #243	; 0xf3
 800d120:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800d122:	f107 0310 	add.w	r3, r7, #16
 800d126:	4619      	mov	r1, r3
 800d128:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d12a:	f004 fdc8 	bl	8011cbe <strcpy>

		}

		if (((option & 4) == 4) &&
 800d12e:	78fb      	ldrb	r3, [r7, #3]
 800d130:	f003 0304 	and.w	r3, r3, #4
 800d134:	2b00      	cmp	r3, #0
 800d136:	d030      	beq.n	800d19a <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800d138:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d13c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800d140:	2b00      	cmp	r3, #0
 800d142:	d12a      	bne.n	800d19a <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800d154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d156:	025b      	lsls	r3, r3, #9
 800d158:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d15e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800d162:	2300      	movs	r3, #0
 800d164:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800d168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d011      	beq.n	800d192 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800d16e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d172:	1ad3      	subs	r3, r2, r3
 800d174:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800d176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d17c:	fb02 f303 	mul.w	r3, r2, r3
 800d180:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800d182:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800d186:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800d18a:	425b      	negs	r3, r3
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800d192:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800d19a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d19e:	78fb      	ldrb	r3, [r7, #3]
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800d1a8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d1b2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3760      	adds	r7, #96	; 0x60
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}

0800d1be <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800d1be:	b480      	push	{r7}
 800d1c0:	b087      	sub	sp, #28
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800d1ca:	f240 6277 	movw	r2, #1655	; 0x677
 800d1ce:	f04f 0300 	mov.w	r3, #0
 800d1d2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800d1d6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800d1da:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800d1dc:	78fb      	ldrb	r3, [r7, #3]
 800d1de:	68fa      	ldr	r2, [r7, #12]
 800d1e0:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800d1e4:	693a      	ldr	r2, [r7, #16]
 800d1e6:	fb02 f303 	mul.w	r3, r2, r3
 800d1ea:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800d1ec:	68bb      	ldr	r3, [r7, #8]
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	371c      	adds	r7, #28
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr

0800d1fa <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800d1fa:	b480      	push	{r7}
 800d1fc:	b087      	sub	sp, #28
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800d202:	2300      	movs	r3, #0
 800d204:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800d206:	2300      	movs	r3, #0
 800d208:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800d20a:	2300      	movs	r3, #0
 800d20c:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d017      	beq.n	800d244 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	3b01      	subs	r3, #1
 800d218:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d21a:	e005      	b.n	800d228 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	085b      	lsrs	r3, r3, #1
 800d220:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800d222:	89fb      	ldrh	r3, [r7, #14]
 800d224:	3301      	adds	r3, #1
 800d226:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1f4      	bne.n	800d21c <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800d232:	89fb      	ldrh	r3, [r7, #14]
 800d234:	021b      	lsls	r3, r3, #8
 800d236:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800d240:	4413      	add	r3, r2
 800d242:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800d244:	8afb      	ldrh	r3, [r7, #22]

}
 800d246:	4618      	mov	r0, r3
 800d248:	371c      	adds	r7, #28
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr

0800d252 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800d252:	b480      	push	{r7}
 800d254:	b085      	sub	sp, #20
 800d256:	af00      	add	r7, sp, #0
 800d258:	4603      	mov	r3, r0
 800d25a:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800d25c:	2300      	movs	r3, #0
 800d25e:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d260:	88fb      	ldrh	r3, [r7, #6]
 800d262:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800d264:	88fa      	ldrh	r2, [r7, #6]
 800d266:	0a12      	lsrs	r2, r2, #8
 800d268:	b292      	uxth	r2, r2
 800d26a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d26c:	3301      	adds	r3, #1
 800d26e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800d270:	68fb      	ldr	r3, [r7, #12]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3714      	adds	r7, #20
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr
	...

0800d280 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b088      	sub	sp, #32
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	4613      	mov	r3, r2
 800d28c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800d28e:	2300      	movs	r3, #0
 800d290:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800d292:	79fb      	ldrb	r3, [r7, #7]
 800d294:	4619      	mov	r1, r3
 800d296:	68f8      	ldr	r0, [r7, #12]
 800d298:	f7ff ff91 	bl	800d1be <VL53L0X_calc_macro_period_ps>
 800d29c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800d29e:	69bb      	ldr	r3, [r7, #24]
 800d2a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d2a4:	4a0a      	ldr	r2, [pc, #40]	; (800d2d0 <VL53L0X_calc_timeout_mclks+0x50>)
 800d2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2aa:	099b      	lsrs	r3, r3, #6
 800d2ac:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d2b4:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	085b      	lsrs	r3, r3, #1
 800d2bc:	441a      	add	r2, r3
	timeout_period_mclks =
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2c4:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800d2c6:	69fb      	ldr	r3, [r7, #28]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3720      	adds	r7, #32
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	10624dd3 	.word	0x10624dd3

0800d2d4 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b086      	sub	sp, #24
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	460b      	mov	r3, r1
 800d2de:	807b      	strh	r3, [r7, #2]
 800d2e0:	4613      	mov	r3, r2
 800d2e2:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800d2e8:	787b      	ldrb	r3, [r7, #1]
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f7ff ff66 	bl	800d1be <VL53L0X_calc_macro_period_ps>
 800d2f2:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d2fa:	4a0a      	ldr	r2, [pc, #40]	; (800d324 <VL53L0X_calc_timeout_us+0x50>)
 800d2fc:	fba2 2303 	umull	r2, r3, r2, r3
 800d300:	099b      	lsrs	r3, r3, #6
 800d302:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800d304:	887b      	ldrh	r3, [r7, #2]
 800d306:	68fa      	ldr	r2, [r7, #12]
 800d308:	fb02 f303 	mul.w	r3, r2, r3
 800d30c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800d310:	4a04      	ldr	r2, [pc, #16]	; (800d324 <VL53L0X_calc_timeout_us+0x50>)
 800d312:	fba2 2303 	umull	r2, r3, r2, r3
 800d316:	099b      	lsrs	r3, r3, #6
 800d318:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800d31a:	697b      	ldr	r3, [r7, #20]
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3718      	adds	r7, #24
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}
 800d324:	10624dd3 	.word	0x10624dd3

0800d328 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b08c      	sub	sp, #48	; 0x30
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	460b      	mov	r3, r1
 800d332:	607a      	str	r2, [r7, #4]
 800d334:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d336:	2300      	movs	r3, #0
 800d338:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800d33c:	2300      	movs	r3, #0
 800d33e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800d342:	2300      	movs	r3, #0
 800d344:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800d346:	2300      	movs	r3, #0
 800d348:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800d34e:	7afb      	ldrb	r3, [r7, #11]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d005      	beq.n	800d360 <get_sequence_step_timeout+0x38>
 800d354:	7afb      	ldrb	r3, [r7, #11]
 800d356:	2b01      	cmp	r3, #1
 800d358:	d002      	beq.n	800d360 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800d35a:	7afb      	ldrb	r3, [r7, #11]
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	d128      	bne.n	800d3b2 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d360:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d364:	461a      	mov	r2, r3
 800d366:	2100      	movs	r1, #0
 800d368:	68f8      	ldr	r0, [r7, #12]
 800d36a:	f7fd fa8f 	bl	800a88c <VL53L0X_GetVcselPulsePeriod>
 800d36e:	4603      	mov	r3, r0
 800d370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800d374:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d109      	bne.n	800d390 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800d37c:	f107 0320 	add.w	r3, r7, #32
 800d380:	461a      	mov	r2, r3
 800d382:	2146      	movs	r1, #70	; 0x46
 800d384:	68f8      	ldr	r0, [r7, #12]
 800d386:	f001 fb03 	bl	800e990 <VL53L0X_RdByte>
 800d38a:	4603      	mov	r3, r0
 800d38c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800d390:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d394:	b29b      	uxth	r3, r3
 800d396:	4618      	mov	r0, r3
 800d398:	f7ff ff5b 	bl	800d252 <VL53L0X_decode_timeout>
 800d39c:	4603      	mov	r3, r0
 800d39e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d3a0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d3a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	68f8      	ldr	r0, [r7, #12]
 800d3aa:	f7ff ff93 	bl	800d2d4 <VL53L0X_calc_timeout_us>
 800d3ae:	62b8      	str	r0, [r7, #40]	; 0x28
 800d3b0:	e092      	b.n	800d4d8 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800d3b2:	7afb      	ldrb	r3, [r7, #11]
 800d3b4:	2b03      	cmp	r3, #3
 800d3b6:	d135      	bne.n	800d424 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d3b8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d3bc:	461a      	mov	r2, r3
 800d3be:	2100      	movs	r1, #0
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f7fd fa63 	bl	800a88c <VL53L0X_GetVcselPulsePeriod>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800d3cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	f040 8081 	bne.w	800d4d8 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d3d6:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d3da:	461a      	mov	r2, r3
 800d3dc:	2100      	movs	r1, #0
 800d3de:	68f8      	ldr	r0, [r7, #12]
 800d3e0:	f7fd fa54 	bl	800a88c <VL53L0X_GetVcselPulsePeriod>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800d3ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d109      	bne.n	800d406 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800d3f2:	f107 031e 	add.w	r3, r7, #30
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	2151      	movs	r1, #81	; 0x51
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	f001 faf2 	bl	800e9e4 <VL53L0X_RdWord>
 800d400:	4603      	mov	r3, r0
 800d402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d406:	8bfb      	ldrh	r3, [r7, #30]
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff ff22 	bl	800d252 <VL53L0X_decode_timeout>
 800d40e:	4603      	mov	r3, r0
 800d410:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d412:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d416:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d418:	4619      	mov	r1, r3
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	f7ff ff5a 	bl	800d2d4 <VL53L0X_calc_timeout_us>
 800d420:	62b8      	str	r0, [r7, #40]	; 0x28
 800d422:	e059      	b.n	800d4d8 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800d424:	7afb      	ldrb	r3, [r7, #11]
 800d426:	2b04      	cmp	r3, #4
 800d428:	d156      	bne.n	800d4d8 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d42a:	f107 0314 	add.w	r3, r7, #20
 800d42e:	4619      	mov	r1, r3
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	f7fd fb37 	bl	800aaa4 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800d436:	2300      	movs	r3, #0
 800d438:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800d43a:	7dfb      	ldrb	r3, [r7, #23]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d01d      	beq.n	800d47c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d440:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d444:	461a      	mov	r2, r3
 800d446:	2100      	movs	r1, #0
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	f7fd fa1f 	bl	800a88c <VL53L0X_GetVcselPulsePeriod>
 800d44e:	4603      	mov	r3, r0
 800d450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800d454:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d10f      	bne.n	800d47c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800d45c:	f107 031e 	add.w	r3, r7, #30
 800d460:	461a      	mov	r2, r3
 800d462:	2151      	movs	r1, #81	; 0x51
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	f001 fabd 	bl	800e9e4 <VL53L0X_RdWord>
 800d46a:	4603      	mov	r3, r0
 800d46c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d470:	8bfb      	ldrh	r3, [r7, #30]
 800d472:	4618      	mov	r0, r3
 800d474:	f7ff feed 	bl	800d252 <VL53L0X_decode_timeout>
 800d478:	4603      	mov	r3, r0
 800d47a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800d47c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d480:	2b00      	cmp	r3, #0
 800d482:	d109      	bne.n	800d498 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d484:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d488:	461a      	mov	r2, r3
 800d48a:	2101      	movs	r1, #1
 800d48c:	68f8      	ldr	r0, [r7, #12]
 800d48e:	f7fd f9fd 	bl	800a88c <VL53L0X_GetVcselPulsePeriod>
 800d492:	4603      	mov	r3, r0
 800d494:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800d498:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10f      	bne.n	800d4c0 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800d4a0:	f107 031c 	add.w	r3, r7, #28
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	2171      	movs	r1, #113	; 0x71
 800d4a8:	68f8      	ldr	r0, [r7, #12]
 800d4aa:	f001 fa9b 	bl	800e9e4 <VL53L0X_RdWord>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d4b4:	8bbb      	ldrh	r3, [r7, #28]
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7ff fecb 	bl	800d252 <VL53L0X_decode_timeout>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800d4c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d4c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d4c4:	1ad3      	subs	r3, r2, r3
 800d4c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d4c8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d4cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	68f8      	ldr	r0, [r7, #12]
 800d4d2:	f7ff feff 	bl	800d2d4 <VL53L0X_calc_timeout_us>
 800d4d6:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4dc:	601a      	str	r2, [r3, #0]

	return Status;
 800d4de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3730      	adds	r7, #48	; 0x30
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}

0800d4ea <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800d4ea:	b580      	push	{r7, lr}
 800d4ec:	b08a      	sub	sp, #40	; 0x28
 800d4ee:	af00      	add	r7, sp, #0
 800d4f0:	60f8      	str	r0, [r7, #12]
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	607a      	str	r2, [r7, #4]
 800d4f6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800d4fe:	7afb      	ldrb	r3, [r7, #11]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d005      	beq.n	800d510 <set_sequence_step_timeout+0x26>
 800d504:	7afb      	ldrb	r3, [r7, #11]
 800d506:	2b01      	cmp	r3, #1
 800d508:	d002      	beq.n	800d510 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800d50a:	7afb      	ldrb	r3, [r7, #11]
 800d50c:	2b02      	cmp	r3, #2
 800d50e:	d138      	bne.n	800d582 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d510:	f107 031b 	add.w	r3, r7, #27
 800d514:	461a      	mov	r2, r3
 800d516:	2100      	movs	r1, #0
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f7fd f9b7 	bl	800a88c <VL53L0X_GetVcselPulsePeriod>
 800d51e:	4603      	mov	r3, r0
 800d520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800d524:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d11a      	bne.n	800d562 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800d52c:	7efb      	ldrb	r3, [r7, #27]
 800d52e:	461a      	mov	r2, r3
 800d530:	6879      	ldr	r1, [r7, #4]
 800d532:	68f8      	ldr	r0, [r7, #12]
 800d534:	f7ff fea4 	bl	800d280 <VL53L0X_calc_timeout_mclks>
 800d538:	4603      	mov	r3, r0
 800d53a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800d53c:	8bbb      	ldrh	r3, [r7, #28]
 800d53e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d542:	d903      	bls.n	800d54c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800d544:	23ff      	movs	r3, #255	; 0xff
 800d546:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d54a:	e004      	b.n	800d556 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800d54c:	8bbb      	ldrh	r3, [r7, #28]
 800d54e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800d550:	3b01      	subs	r3, #1
 800d552:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d556:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d55a:	b29a      	uxth	r2, r3
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800d562:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d566:	2b00      	cmp	r3, #0
 800d568:	f040 80ab 	bne.w	800d6c2 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800d56c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d570:	461a      	mov	r2, r3
 800d572:	2146      	movs	r1, #70	; 0x46
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f001 f989 	bl	800e88c <VL53L0X_WrByte>
 800d57a:	4603      	mov	r3, r0
 800d57c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800d580:	e09f      	b.n	800d6c2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800d582:	7afb      	ldrb	r3, [r7, #11]
 800d584:	2b03      	cmp	r3, #3
 800d586:	d135      	bne.n	800d5f4 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800d588:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d11b      	bne.n	800d5c8 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d590:	f107 031b 	add.w	r3, r7, #27
 800d594:	461a      	mov	r2, r3
 800d596:	2100      	movs	r1, #0
 800d598:	68f8      	ldr	r0, [r7, #12]
 800d59a:	f7fd f977 	bl	800a88c <VL53L0X_GetVcselPulsePeriod>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800d5a4:	7efb      	ldrb	r3, [r7, #27]
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	6879      	ldr	r1, [r7, #4]
 800d5aa:	68f8      	ldr	r0, [r7, #12]
 800d5ac:	f7ff fe68 	bl	800d280 <VL53L0X_calc_timeout_mclks>
 800d5b0:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800d5b2:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800d5b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7ff fe1f 	bl	800d1fa <VL53L0X_encode_timeout>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d5c0:	8b3a      	ldrh	r2, [r7, #24]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800d5c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d108      	bne.n	800d5e2 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800d5d0:	8b3b      	ldrh	r3, [r7, #24]
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	2151      	movs	r1, #81	; 0x51
 800d5d6:	68f8      	ldr	r0, [r7, #12]
 800d5d8:	f001 f97c 	bl	800e8d4 <VL53L0X_WrWord>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800d5e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d16b      	bne.n	800d6c2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800d5f2:	e066      	b.n	800d6c2 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800d5f4:	7afb      	ldrb	r3, [r7, #11]
 800d5f6:	2b04      	cmp	r3, #4
 800d5f8:	d160      	bne.n	800d6bc <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800d5fa:	f107 0310 	add.w	r3, r7, #16
 800d5fe:	4619      	mov	r1, r3
 800d600:	68f8      	ldr	r0, [r7, #12]
 800d602:	f7fd fa4f 	bl	800aaa4 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800d606:	2300      	movs	r3, #0
 800d608:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800d60a:	7cfb      	ldrb	r3, [r7, #19]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d01d      	beq.n	800d64c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d610:	f107 031b 	add.w	r3, r7, #27
 800d614:	461a      	mov	r2, r3
 800d616:	2100      	movs	r1, #0
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f7fd f937 	bl	800a88c <VL53L0X_GetVcselPulsePeriod>
 800d61e:	4603      	mov	r3, r0
 800d620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800d624:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d10f      	bne.n	800d64c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800d62c:	f107 0318 	add.w	r3, r7, #24
 800d630:	461a      	mov	r2, r3
 800d632:	2151      	movs	r1, #81	; 0x51
 800d634:	68f8      	ldr	r0, [r7, #12]
 800d636:	f001 f9d5 	bl	800e9e4 <VL53L0X_RdWord>
 800d63a:	4603      	mov	r3, r0
 800d63c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800d640:	8b3b      	ldrh	r3, [r7, #24]
 800d642:	4618      	mov	r0, r3
 800d644:	f7ff fe05 	bl	800d252 <VL53L0X_decode_timeout>
 800d648:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800d64a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800d64c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d650:	2b00      	cmp	r3, #0
 800d652:	d109      	bne.n	800d668 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d654:	f107 031b 	add.w	r3, r7, #27
 800d658:	461a      	mov	r2, r3
 800d65a:	2101      	movs	r1, #1
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	f7fd f915 	bl	800a88c <VL53L0X_GetVcselPulsePeriod>
 800d662:	4603      	mov	r3, r0
 800d664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800d668:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d128      	bne.n	800d6c2 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800d670:	7efb      	ldrb	r3, [r7, #27]
 800d672:	461a      	mov	r2, r3
 800d674:	6879      	ldr	r1, [r7, #4]
 800d676:	68f8      	ldr	r0, [r7, #12]
 800d678:	f7ff fe02 	bl	800d280 <VL53L0X_calc_timeout_mclks>
 800d67c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800d67e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d680:	6a3a      	ldr	r2, [r7, #32]
 800d682:	4413      	add	r3, r2
 800d684:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800d686:	6a38      	ldr	r0, [r7, #32]
 800d688:	f7ff fdb7 	bl	800d1fa <VL53L0X_encode_timeout>
 800d68c:	4603      	mov	r3, r0
 800d68e:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800d690:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d694:	2b00      	cmp	r3, #0
 800d696:	d108      	bne.n	800d6aa <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800d698:	8bfb      	ldrh	r3, [r7, #30]
 800d69a:	461a      	mov	r2, r3
 800d69c:	2171      	movs	r1, #113	; 0x71
 800d69e:	68f8      	ldr	r0, [r7, #12]
 800d6a0:	f001 f918 	bl	800e8d4 <VL53L0X_WrWord>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800d6aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d107      	bne.n	800d6c2 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800d6ba:	e002      	b.n	800d6c2 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d6bc:	23fc      	movs	r3, #252	; 0xfc
 800d6be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800d6c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3728      	adds	r7, #40	; 0x28
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}

0800d6ce <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b086      	sub	sp, #24
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	60f8      	str	r0, [r7, #12]
 800d6d6:	460b      	mov	r3, r1
 800d6d8:	607a      	str	r2, [r7, #4]
 800d6da:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800d6e0:	7afb      	ldrb	r3, [r7, #11]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d002      	beq.n	800d6ec <VL53L0X_get_vcsel_pulse_period+0x1e>
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d00a      	beq.n	800d700 <VL53L0X_get_vcsel_pulse_period+0x32>
 800d6ea:	e013      	b.n	800d714 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800d6ec:	f107 0316 	add.w	r3, r7, #22
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	2150      	movs	r1, #80	; 0x50
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	f001 f94b 	bl	800e990 <VL53L0X_RdByte>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800d6fe:	e00b      	b.n	800d718 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800d700:	f107 0316 	add.w	r3, r7, #22
 800d704:	461a      	mov	r2, r3
 800d706:	2170      	movs	r1, #112	; 0x70
 800d708:	68f8      	ldr	r0, [r7, #12]
 800d70a:	f001 f941 	bl	800e990 <VL53L0X_RdByte>
 800d70e:	4603      	mov	r3, r0
 800d710:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800d712:	e001      	b.n	800d718 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d714:	23fc      	movs	r3, #252	; 0xfc
 800d716:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800d718:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d107      	bne.n	800d730 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800d720:	7dbb      	ldrb	r3, [r7, #22]
 800d722:	4618      	mov	r0, r3
 800d724:	f7fe fff4 	bl	800c710 <VL53L0X_decode_vcsel_period>
 800d728:	4603      	mov	r3, r0
 800d72a:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	701a      	strb	r2, [r3, #0]

	return Status;
 800d730:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d734:	4618      	mov	r0, r3
 800d736:	3718      	adds	r7, #24
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b092      	sub	sp, #72	; 0x48
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d746:	2300      	movs	r3, #0
 800d748:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800d74c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d750:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800d752:	f240 7376 	movw	r3, #1910	; 0x776
 800d756:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800d758:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800d75c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800d75e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d762:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800d764:	f240 234e 	movw	r3, #590	; 0x24e
 800d768:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800d76a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800d76e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800d770:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d774:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800d776:	f240 2326 	movw	r3, #550	; 0x226
 800d77a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800d77c:	2300      	movs	r3, #0
 800d77e:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800d780:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d784:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800d786:	2300      	movs	r3, #0
 800d788:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800d78a:	683a      	ldr	r2, [r7, #0]
 800d78c:	6a3b      	ldr	r3, [r7, #32]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d205      	bcs.n	800d79e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d792:	23fc      	movs	r3, #252	; 0xfc
 800d794:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800d798:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d79c:	e0aa      	b.n	800d8f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800d79e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a2:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800d7a4:	683a      	ldr	r2, [r7, #0]
 800d7a6:	1ad3      	subs	r3, r2, r3
 800d7a8:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d7aa:	f107 0314 	add.w	r3, r7, #20
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f7fd f977 	bl	800aaa4 <VL53L0X_GetSequenceStepEnables>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800d7bc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d15b      	bne.n	800d87c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800d7c4:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d105      	bne.n	800d7d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800d7ca:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d102      	bne.n	800d7d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800d7d0:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d052      	beq.n	800d87c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800d7d6:	f107 0310 	add.w	r3, r7, #16
 800d7da:	461a      	mov	r2, r3
 800d7dc:	2102      	movs	r1, #2
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f7ff fda2 	bl	800d328 <get_sequence_step_timeout>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800d7ea:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d002      	beq.n	800d7f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800d7f2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d7f6:	e07d      	b.n	800d8f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800d7f8:	7d3b      	ldrb	r3, [r7, #20]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d00f      	beq.n	800d81e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800d7fe:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800d800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d802:	4413      	add	r3, r2
 800d804:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800d806:	69fa      	ldr	r2, [r7, #28]
 800d808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d204      	bcs.n	800d818 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800d80e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	643b      	str	r3, [r7, #64]	; 0x40
 800d816:	e002      	b.n	800d81e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d818:	23fc      	movs	r3, #252	; 0xfc
 800d81a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800d81e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d822:	2b00      	cmp	r3, #0
 800d824:	d002      	beq.n	800d82c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800d826:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d82a:	e063      	b.n	800d8f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800d82c:	7dbb      	ldrb	r3, [r7, #22]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d011      	beq.n	800d856 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800d832:	693a      	ldr	r2, [r7, #16]
 800d834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d836:	4413      	add	r3, r2
 800d838:	005b      	lsls	r3, r3, #1
 800d83a:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800d83c:	69fa      	ldr	r2, [r7, #28]
 800d83e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d840:	429a      	cmp	r2, r3
 800d842:	d204      	bcs.n	800d84e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800d844:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	1ad3      	subs	r3, r2, r3
 800d84a:	643b      	str	r3, [r7, #64]	; 0x40
 800d84c:	e016      	b.n	800d87c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d84e:	23fc      	movs	r3, #252	; 0xfc
 800d850:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d854:	e012      	b.n	800d87c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800d856:	7d7b      	ldrb	r3, [r7, #21]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d00f      	beq.n	800d87c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d860:	4413      	add	r3, r2
 800d862:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800d864:	69fa      	ldr	r2, [r7, #28]
 800d866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d868:	429a      	cmp	r2, r3
 800d86a:	d204      	bcs.n	800d876 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800d86c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	1ad3      	subs	r3, r2, r3
 800d872:	643b      	str	r3, [r7, #64]	; 0x40
 800d874:	e002      	b.n	800d87c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d876:	23fc      	movs	r3, #252	; 0xfc
 800d878:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800d87c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d880:	2b00      	cmp	r3, #0
 800d882:	d002      	beq.n	800d88a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800d884:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d888:	e034      	b.n	800d8f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800d88a:	7dfb      	ldrb	r3, [r7, #23]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d019      	beq.n	800d8c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800d890:	f107 030c 	add.w	r3, r7, #12
 800d894:	461a      	mov	r2, r3
 800d896:	2103      	movs	r1, #3
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f7ff fd45 	bl	800d328 <get_sequence_step_timeout>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8a8:	4413      	add	r3, r2
 800d8aa:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800d8ac:	69fa      	ldr	r2, [r7, #28]
 800d8ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d204      	bcs.n	800d8be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800d8b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	1ad3      	subs	r3, r2, r3
 800d8ba:	643b      	str	r3, [r7, #64]	; 0x40
 800d8bc:	e002      	b.n	800d8c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d8be:	23fc      	movs	r3, #252	; 0xfc
 800d8c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800d8c4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d111      	bne.n	800d8f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800d8cc:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00e      	beq.n	800d8f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800d8d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d6:	1ad3      	subs	r3, r2, r3
 800d8d8:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800d8da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8dc:	2104      	movs	r1, #4
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f7ff fe03 	bl	800d4ea <set_sequence_step_timeout>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	683a      	ldr	r2, [r7, #0]
 800d8ee:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800d8f0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3748      	adds	r7, #72	; 0x48
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b090      	sub	sp, #64	; 0x40
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d906:	2300      	movs	r3, #0
 800d908:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800d90c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d910:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800d912:	f240 7376 	movw	r3, #1910	; 0x776
 800d916:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800d918:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800d91c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800d91e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d922:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800d924:	f240 234e 	movw	r3, #590	; 0x24e
 800d928:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800d92a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800d92e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800d930:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d934:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800d936:	f240 2326 	movw	r3, #550	; 0x226
 800d93a:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800d93c:	2300      	movs	r3, #0
 800d93e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800d940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d944:	441a      	add	r2, r3
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d94a:	f107 0318 	add.w	r3, r7, #24
 800d94e:	4619      	mov	r1, r3
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f7fd f8a7 	bl	800aaa4 <VL53L0X_GetSequenceStepEnables>
 800d956:	4603      	mov	r3, r0
 800d958:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800d95c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d960:	2b00      	cmp	r3, #0
 800d962:	d002      	beq.n	800d96a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800d964:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d968:	e075      	b.n	800da56 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800d96a:	7e3b      	ldrb	r3, [r7, #24]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d105      	bne.n	800d97c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800d970:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800d972:	2b00      	cmp	r3, #0
 800d974:	d102      	bne.n	800d97c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800d976:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d030      	beq.n	800d9de <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800d97c:	f107 0310 	add.w	r3, r7, #16
 800d980:	461a      	mov	r2, r3
 800d982:	2102      	movs	r1, #2
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f7ff fccf 	bl	800d328 <get_sequence_step_timeout>
 800d98a:	4603      	mov	r3, r0
 800d98c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800d990:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d994:	2b00      	cmp	r3, #0
 800d996:	d122      	bne.n	800d9de <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800d998:	7e3b      	ldrb	r3, [r7, #24]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d007      	beq.n	800d9ae <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800d9a2:	6939      	ldr	r1, [r7, #16]
 800d9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a6:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d9a8:	441a      	add	r2, r3
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800d9ae:	7ebb      	ldrb	r3, [r7, #26]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d009      	beq.n	800d9c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800d9b8:	6939      	ldr	r1, [r7, #16]
 800d9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9bc:	440b      	add	r3, r1
 800d9be:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d9c0:	441a      	add	r2, r3
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	601a      	str	r2, [r3, #0]
 800d9c6:	e00a      	b.n	800d9de <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800d9c8:	7e7b      	ldrb	r3, [r7, #25]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d007      	beq.n	800d9de <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800d9d2:	6939      	ldr	r1, [r7, #16]
 800d9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d6:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d9d8:	441a      	add	r2, r3
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d9de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d114      	bne.n	800da10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800d9e6:	7efb      	ldrb	r3, [r7, #27]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d011      	beq.n	800da10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800d9ec:	f107 030c 	add.w	r3, r7, #12
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	2103      	movs	r1, #3
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f7ff fc97 	bl	800d328 <get_sequence_step_timeout>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800da04:	68f9      	ldr	r1, [r7, #12]
 800da06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da08:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800da0a:	441a      	add	r2, r3
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800da10:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800da14:	2b00      	cmp	r3, #0
 800da16:	d114      	bne.n	800da42 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800da18:	7f3b      	ldrb	r3, [r7, #28]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d011      	beq.n	800da42 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800da1e:	f107 0314 	add.w	r3, r7, #20
 800da22:	461a      	mov	r2, r3
 800da24:	2104      	movs	r1, #4
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f7ff fc7e 	bl	800d328 <get_sequence_step_timeout>
 800da2c:	4603      	mov	r3, r0
 800da2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800da36:	6979      	ldr	r1, [r7, #20]
 800da38:	6a3b      	ldr	r3, [r7, #32]
 800da3a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800da3c:	441a      	add	r2, r3
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800da42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800da46:	2b00      	cmp	r3, #0
 800da48:	d103      	bne.n	800da52 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	681a      	ldr	r2, [r3, #0]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800da52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800da56:	4618      	mov	r0, r3
 800da58:	3740      	adds	r7, #64	; 0x40
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
	...

0800da60 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b088      	sub	sp, #32
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800da6a:	2300      	movs	r3, #0
 800da6c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800da6e:	2300      	movs	r3, #0
 800da70:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800da72:	e0c6      	b.n	800dc02 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	683a      	ldr	r2, [r7, #0]
 800da78:	4413      	add	r3, r2
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	3301      	adds	r3, #1
 800da82:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800da84:	7cfb      	ldrb	r3, [r7, #19]
 800da86:	2bff      	cmp	r3, #255	; 0xff
 800da88:	f040 808d 	bne.w	800dba6 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	683a      	ldr	r2, [r7, #0]
 800da90:	4413      	add	r3, r2
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	747b      	strb	r3, [r7, #17]
			Index++;
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	3301      	adds	r3, #1
 800da9a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800da9c:	7c7b      	ldrb	r3, [r7, #17]
 800da9e:	2b03      	cmp	r3, #3
 800daa0:	d87e      	bhi.n	800dba0 <VL53L0X_load_tuning_settings+0x140>
 800daa2:	a201      	add	r2, pc, #4	; (adr r2, 800daa8 <VL53L0X_load_tuning_settings+0x48>)
 800daa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa8:	0800dab9 	.word	0x0800dab9
 800daac:	0800daf3 	.word	0x0800daf3
 800dab0:	0800db2d 	.word	0x0800db2d
 800dab4:	0800db67 	.word	0x0800db67
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	683a      	ldr	r2, [r7, #0]
 800dabc:	4413      	add	r3, r2
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	743b      	strb	r3, [r7, #16]
				Index++;
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	3301      	adds	r3, #1
 800dac6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	683a      	ldr	r2, [r7, #0]
 800dacc:	4413      	add	r3, r2
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	73fb      	strb	r3, [r7, #15]
				Index++;
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	3301      	adds	r3, #1
 800dad6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800dad8:	7c3b      	ldrb	r3, [r7, #16]
 800dada:	b29b      	uxth	r3, r3
 800dadc:	021b      	lsls	r3, r3, #8
 800dade:	b29a      	uxth	r2, r3
 800dae0:	7bfb      	ldrb	r3, [r7, #15]
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	4413      	add	r3, r2
 800dae6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	89ba      	ldrh	r2, [r7, #12]
 800daec:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800daf0:	e087      	b.n	800dc02 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	683a      	ldr	r2, [r7, #0]
 800daf6:	4413      	add	r3, r2
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	743b      	strb	r3, [r7, #16]
				Index++;
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	3301      	adds	r3, #1
 800db00:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	683a      	ldr	r2, [r7, #0]
 800db06:	4413      	add	r3, r2
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	3301      	adds	r3, #1
 800db10:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800db12:	7c3b      	ldrb	r3, [r7, #16]
 800db14:	b29b      	uxth	r3, r3
 800db16:	021b      	lsls	r3, r3, #8
 800db18:	b29a      	uxth	r2, r3
 800db1a:	7bfb      	ldrb	r3, [r7, #15]
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	4413      	add	r3, r2
 800db20:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	89ba      	ldrh	r2, [r7, #12]
 800db26:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800db2a:	e06a      	b.n	800dc02 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	683a      	ldr	r2, [r7, #0]
 800db30:	4413      	add	r3, r2
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	743b      	strb	r3, [r7, #16]
				Index++;
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	3301      	adds	r3, #1
 800db3a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	683a      	ldr	r2, [r7, #0]
 800db40:	4413      	add	r3, r2
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	73fb      	strb	r3, [r7, #15]
				Index++;
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	3301      	adds	r3, #1
 800db4a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800db4c:	7c3b      	ldrb	r3, [r7, #16]
 800db4e:	b29b      	uxth	r3, r3
 800db50:	021b      	lsls	r3, r3, #8
 800db52:	b29a      	uxth	r2, r3
 800db54:	7bfb      	ldrb	r3, [r7, #15]
 800db56:	b29b      	uxth	r3, r3
 800db58:	4413      	add	r3, r2
 800db5a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	89ba      	ldrh	r2, [r7, #12]
 800db60:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800db64:	e04d      	b.n	800dc02 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	683a      	ldr	r2, [r7, #0]
 800db6a:	4413      	add	r3, r2
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	743b      	strb	r3, [r7, #16]
				Index++;
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	3301      	adds	r3, #1
 800db74:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	683a      	ldr	r2, [r7, #0]
 800db7a:	4413      	add	r3, r2
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	3301      	adds	r3, #1
 800db84:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800db86:	7c3b      	ldrb	r3, [r7, #16]
 800db88:	b29b      	uxth	r3, r3
 800db8a:	021b      	lsls	r3, r3, #8
 800db8c:	b29a      	uxth	r2, r3
 800db8e:	7bfb      	ldrb	r3, [r7, #15]
 800db90:	b29b      	uxth	r3, r3
 800db92:	4413      	add	r3, r2
 800db94:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	89ba      	ldrh	r2, [r7, #12]
 800db9a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800db9e:	e030      	b.n	800dc02 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dba0:	23fc      	movs	r3, #252	; 0xfc
 800dba2:	77fb      	strb	r3, [r7, #31]
 800dba4:	e02d      	b.n	800dc02 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800dba6:	7cfb      	ldrb	r3, [r7, #19]
 800dba8:	2b04      	cmp	r3, #4
 800dbaa:	d828      	bhi.n	800dbfe <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	683a      	ldr	r2, [r7, #0]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	74bb      	strb	r3, [r7, #18]
			Index++;
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	61bb      	str	r3, [r7, #24]
 800dbc0:	e00f      	b.n	800dbe2 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	683a      	ldr	r2, [r7, #0]
 800dbc6:	4413      	add	r3, r2
 800dbc8:	7819      	ldrb	r1, [r3, #0]
 800dbca:	f107 0208 	add.w	r2, r7, #8
 800dbce:	69bb      	ldr	r3, [r7, #24]
 800dbd0:	4413      	add	r3, r2
 800dbd2:	460a      	mov	r2, r1
 800dbd4:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	3301      	adds	r3, #1
 800dbda:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800dbdc:	69bb      	ldr	r3, [r7, #24]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	61bb      	str	r3, [r7, #24]
 800dbe2:	7cfb      	ldrb	r3, [r7, #19]
 800dbe4:	69ba      	ldr	r2, [r7, #24]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	dbeb      	blt.n	800dbc2 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800dbea:	7cfb      	ldrb	r3, [r7, #19]
 800dbec:	f107 0208 	add.w	r2, r7, #8
 800dbf0:	7cb9      	ldrb	r1, [r7, #18]
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 fdee 	bl	800e7d4 <VL53L0X_WriteMulti>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	77fb      	strb	r3, [r7, #31]
 800dbfc:	e001      	b.n	800dc02 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dbfe:	23fc      	movs	r3, #252	; 0xfc
 800dc00:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	683a      	ldr	r2, [r7, #0]
 800dc06:	4413      	add	r3, r2
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d004      	beq.n	800dc18 <VL53L0X_load_tuning_settings+0x1b8>
 800dc0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	f43f af2e 	beq.w	800da74 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800dc18:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3720      	adds	r7, #32
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b088      	sub	sp, #32
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dc30:	2300      	movs	r3, #0
 800dc32:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2200      	movs	r2, #0
 800dc38:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800dc3a:	f107 0313 	add.w	r3, r7, #19
 800dc3e:	4619      	mov	r1, r3
 800dc40:	68f8      	ldr	r0, [r7, #12]
 800dc42:	f7fc ffbb 	bl	800abbc <VL53L0X_GetXTalkCompensationEnable>
 800dc46:	4603      	mov	r3, r0
 800dc48:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800dc4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d111      	bne.n	800dc76 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800dc52:	7cfb      	ldrb	r3, [r7, #19]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d00e      	beq.n	800dc76 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	6a1b      	ldr	r3, [r3, #32]
 800dc5c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	8a9b      	ldrh	r3, [r3, #20]
 800dc62:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800dc64:	69bb      	ldr	r3, [r7, #24]
 800dc66:	fb02 f303 	mul.w	r3, r2, r3
 800dc6a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	3380      	adds	r3, #128	; 0x80
 800dc70:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800dc76:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3720      	adds	r7, #32
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b086      	sub	sp, #24
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	60f8      	str	r0, [r7, #12]
 800dc8a:	60b9      	str	r1, [r7, #8]
 800dc8c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800dc9a:	f107 0310 	add.w	r3, r7, #16
 800dc9e:	461a      	mov	r2, r3
 800dca0:	68b9      	ldr	r1, [r7, #8]
 800dca2:	68f8      	ldr	r0, [r7, #12]
 800dca4:	f7ff ffbe 	bl	800dc24 <VL53L0X_get_total_xtalk_rate>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800dcac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d105      	bne.n	800dcc0 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681a      	ldr	r2, [r3, #0]
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	441a      	add	r2, r3
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	601a      	str	r2, [r3, #0]

	return Status;
 800dcc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3718      	adds	r7, #24
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b09a      	sub	sp, #104	; 0x68
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	607a      	str	r2, [r7, #4]
 800dcd8:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800dcda:	2312      	movs	r3, #18
 800dcdc:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800dcde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dce2:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800dce4:	2342      	movs	r3, #66	; 0x42
 800dce6:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800dce8:	2306      	movs	r3, #6
 800dcea:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800dcec:	2307      	movs	r3, #7
 800dcee:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800dcfc:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800dd04:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800dd06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd0a:	fb02 f303 	mul.w	r3, r2, r3
 800dd0e:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800dd10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd12:	3380      	adds	r3, #128	; 0x80
 800dd14:	0a1b      	lsrs	r3, r3, #8
 800dd16:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800dd18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dd1c:	fb02 f303 	mul.w	r3, r2, r3
 800dd20:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800dd22:	2300      	movs	r3, #0
 800dd24:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d01a      	beq.n	800dd62 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	029b      	lsls	r3, r3, #10
 800dd30:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800dd36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd38:	4413      	add	r3, r2
 800dd3a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800dd3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd44:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800dd46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dd48:	4613      	mov	r3, r2
 800dd4a:	005b      	lsls	r3, r3, #1
 800dd4c:	4413      	add	r3, r2
 800dd4e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800dd50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd52:	fb03 f303 	mul.w	r3, r3, r3
 800dd56:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800dd58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd5a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dd5e:	0c1b      	lsrs	r3, r3, #16
 800dd60:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dd66:	fb02 f303 	mul.w	r3, r2, r3
 800dd6a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800dd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dd72:	0c1b      	lsrs	r3, r3, #16
 800dd74:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800dd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd78:	fb03 f303 	mul.w	r3, r3, r3
 800dd7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800dd7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dd80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dd84:	0c1b      	lsrs	r3, r3, #16
 800dd86:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800dd88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd8a:	085a      	lsrs	r2, r3, #1
 800dd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd8e:	441a      	add	r2, r3
 800dd90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd92:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd96:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800dd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd9c:	fb02 f303 	mul.w	r3, r2, r3
 800dda0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800dda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dda8:	d302      	bcc.n	800ddb0 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800ddaa:	4b54      	ldr	r3, [pc, #336]	; (800defc <VL53L0X_calc_dmax+0x230>)
 800ddac:	663b      	str	r3, [r7, #96]	; 0x60
 800ddae:	e015      	b.n	800dddc <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800ddb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddb2:	085a      	lsrs	r2, r3, #1
 800ddb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ddb6:	441a      	add	r2, r3
 800ddb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddba:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddbe:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800ddc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ddc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ddc4:	fb02 f303 	mul.w	r3, r2, r3
 800ddc8:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800ddca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ddcc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ddd0:	0c1b      	lsrs	r3, r3, #16
 800ddd2:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800ddd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddd6:	fb03 f303 	mul.w	r3, r3, r3
 800ddda:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800dddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddde:	039b      	lsls	r3, r3, #14
 800dde0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800dde4:	4a46      	ldr	r2, [pc, #280]	; (800df00 <VL53L0X_calc_dmax+0x234>)
 800dde6:	fba2 2303 	umull	r2, r3, r2, r3
 800ddea:	099b      	lsrs	r3, r3, #6
 800ddec:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800ddee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf0:	fb03 f303 	mul.w	r3, r3, r3
 800ddf4:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800ddf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddf8:	fb03 f303 	mul.w	r3, r3, r3
 800ddfc:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800ddfe:	6a3b      	ldr	r3, [r7, #32]
 800de00:	3308      	adds	r3, #8
 800de02:	091b      	lsrs	r3, r3, #4
 800de04:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800de06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de08:	6a3b      	ldr	r3, [r7, #32]
 800de0a:	1ad3      	subs	r3, r2, r3
 800de0c:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800de0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de10:	4613      	mov	r3, r2
 800de12:	005b      	lsls	r3, r3, #1
 800de14:	4413      	add	r3, r2
 800de16:	011b      	lsls	r3, r3, #4
 800de18:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800de1a:	69fb      	ldr	r3, [r7, #28]
 800de1c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800de20:	0b9b      	lsrs	r3, r3, #14
 800de22:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800de24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de28:	4413      	add	r3, r2
 800de2a:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800de2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de2e:	085b      	lsrs	r3, r3, #1
 800de30:	69ba      	ldr	r2, [r7, #24]
 800de32:	4413      	add	r3, r2
 800de34:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800de36:	69ba      	ldr	r2, [r7, #24]
 800de38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800de3e:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800de40:	69bb      	ldr	r3, [r7, #24]
 800de42:	039b      	lsls	r3, r3, #14
 800de44:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800de46:	69fb      	ldr	r3, [r7, #28]
 800de48:	085b      	lsrs	r3, r3, #1
 800de4a:	69ba      	ldr	r2, [r7, #24]
 800de4c:	4413      	add	r3, r2
 800de4e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800de50:	69ba      	ldr	r2, [r7, #24]
 800de52:	69fb      	ldr	r3, [r7, #28]
 800de54:	fbb2 f3f3 	udiv	r3, r2, r3
 800de58:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800de5a:	69bb      	ldr	r3, [r7, #24]
 800de5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800de5e:	fb02 f303 	mul.w	r3, r2, r3
 800de62:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800de64:	69bb      	ldr	r3, [r7, #24]
 800de66:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800de6a:	4a25      	ldr	r2, [pc, #148]	; (800df00 <VL53L0X_calc_dmax+0x234>)
 800de6c:	fba2 2303 	umull	r2, r3, r2, r3
 800de70:	099b      	lsrs	r3, r3, #6
 800de72:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800de74:	69bb      	ldr	r3, [r7, #24]
 800de76:	011b      	lsls	r3, r3, #4
 800de78:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800de80:	4a1f      	ldr	r2, [pc, #124]	; (800df00 <VL53L0X_calc_dmax+0x234>)
 800de82:	fba2 2303 	umull	r2, r3, r2, r3
 800de86:	099b      	lsrs	r3, r3, #6
 800de88:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800de8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de8c:	3380      	adds	r3, #128	; 0x80
 800de8e:	0a1b      	lsrs	r3, r3, #8
 800de90:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d008      	beq.n	800deaa <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	085a      	lsrs	r2, r3, #1
 800de9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de9e:	441a      	add	r2, r3
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dea6:	65bb      	str	r3, [r7, #88]	; 0x58
 800dea8:	e001      	b.n	800deae <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800deaa:	2300      	movs	r3, #0
 800deac:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800deae:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800deb0:	f7fe fc41 	bl	800c736 <VL53L0X_isqrt>
 800deb4:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800deb6:	69bb      	ldr	r3, [r7, #24]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d008      	beq.n	800dece <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800debc:	69bb      	ldr	r3, [r7, #24]
 800debe:	085a      	lsrs	r2, r3, #1
 800dec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dec2:	441a      	add	r2, r3
 800dec4:	69bb      	ldr	r3, [r7, #24]
 800dec6:	fbb2 f3f3 	udiv	r3, r2, r3
 800deca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800decc:	e001      	b.n	800ded2 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800dece:	2300      	movs	r3, #0
 800ded0:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800ded2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ded4:	f7fe fc2f 	bl	800c736 <VL53L0X_isqrt>
 800ded8:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800deda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dedc:	693a      	ldr	r2, [r7, #16]
 800dede:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800dee0:	693a      	ldr	r2, [r7, #16]
 800dee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d902      	bls.n	800deee <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800dee8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800deea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800deec:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800deee:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800def2:	4618      	mov	r0, r3
 800def4:	3768      	adds	r7, #104	; 0x68
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	fff00000 	.word	0xfff00000
 800df00:	10624dd3 	.word	0x10624dd3

0800df04 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b0b4      	sub	sp, #208	; 0xd0
 800df08:	af04      	add	r7, sp, #16
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
 800df10:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800df12:	f44f 7348 	mov.w	r3, #800	; 0x320
 800df16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800df1a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800df1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800df22:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800df26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800df2a:	f241 235c 	movw	r3, #4700	; 0x125c
 800df2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800df32:	4b9e      	ldr	r3, [pc, #632]	; (800e1ac <VL53L0X_calc_sigma_estimate+0x2a8>)
 800df34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800df38:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800df3c:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800df3e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800df42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800df46:	fbb2 f3f3 	udiv	r3, r2, r3
 800df4a:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800df4c:	4b98      	ldr	r3, [pc, #608]	; (800e1b0 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800df4e:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800df50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df54:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800df56:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800df5a:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800df5c:	f240 6377 	movw	r3, #1655	; 0x677
 800df60:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800df62:	2300      	movs	r3, #0
 800df64:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	6a1b      	ldr	r3, [r3, #32]
 800df6c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	691b      	ldr	r3, [r3, #16]
 800df72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800df76:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800df7a:	0c1b      	lsrs	r3, r3, #16
 800df7c:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800df84:	f107 0310 	add.w	r3, r7, #16
 800df88:	461a      	mov	r2, r3
 800df8a:	68b9      	ldr	r1, [r7, #8]
 800df8c:	68f8      	ldr	r0, [r7, #12]
 800df8e:	f7ff fe78 	bl	800dc82 <VL53L0X_get_total_signal_rate>
 800df92:	4603      	mov	r3, r0
 800df94:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800df98:	f107 0314 	add.w	r3, r7, #20
 800df9c:	461a      	mov	r2, r3
 800df9e:	68b9      	ldr	r1, [r7, #8]
 800dfa0:	68f8      	ldr	r0, [r7, #12]
 800dfa2:	f7ff fe3f 	bl	800dc24 <VL53L0X_get_total_xtalk_rate>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dfb2:	fb02 f303 	mul.w	r3, r2, r3
 800dfb6:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800dfb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dfbe:	0c1b      	lsrs	r3, r3, #16
 800dfc0:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dfc8:	fb02 f303 	mul.w	r3, r2, r3
 800dfcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800dfd0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800dfd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d902      	bls.n	800dfe0 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800dfda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800dfe0:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d168      	bne.n	800e0ba <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800dfee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800dff8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800dffc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e000:	461a      	mov	r2, r3
 800e002:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800e006:	68f8      	ldr	r0, [r7, #12]
 800e008:	f7ff f93a 	bl	800d280 <VL53L0X_calc_timeout_mclks>
 800e00c:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800e01e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800e022:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800e026:	461a      	mov	r2, r3
 800e028:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800e02c:	68f8      	ldr	r0, [r7, #12]
 800e02e:	f7ff f927 	bl	800d280 <VL53L0X_calc_timeout_mclks>
 800e032:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800e034:	2303      	movs	r3, #3
 800e036:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800e03a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e03e:	2b08      	cmp	r3, #8
 800e040:	d102      	bne.n	800e048 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800e042:	2302      	movs	r3, #2
 800e044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800e048:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e04a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e04c:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800e04e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e052:	fb02 f303 	mul.w	r3, r2, r3
 800e056:	02db      	lsls	r3, r3, #11
 800e058:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800e05c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e060:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e064:	4a53      	ldr	r2, [pc, #332]	; (800e1b4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e066:	fba2 2303 	umull	r2, r3, r2, r3
 800e06a:	099b      	lsrs	r3, r3, #6
 800e06c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800e070:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e074:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e076:	fb02 f303 	mul.w	r3, r2, r3
 800e07a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800e07e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e082:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e086:	4a4b      	ldr	r2, [pc, #300]	; (800e1b4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e088:	fba2 2303 	umull	r2, r3, r2, r3
 800e08c:	099b      	lsrs	r3, r3, #6
 800e08e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	3380      	adds	r3, #128	; 0x80
 800e096:	0a1b      	lsrs	r3, r3, #8
 800e098:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800e09a:	693a      	ldr	r2, [r7, #16]
 800e09c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e0a0:	fb02 f303 	mul.w	r3, r2, r3
 800e0a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800e0a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e0ac:	3380      	adds	r3, #128	; 0x80
 800e0ae:	0a1b      	lsrs	r3, r3, #8
 800e0b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	021b      	lsls	r3, r3, #8
 800e0b8:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800e0ba:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d002      	beq.n	800e0c8 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800e0c2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800e0c6:	e15e      	b.n	800e386 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800e0c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d10c      	bne.n	800e0e8 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e0d4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e0dc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	601a      	str	r2, [r3, #0]
 800e0e6:	e14c      	b.n	800e382 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800e0e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d102      	bne.n	800e0f6 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800e0f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0fa:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800e0fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e0fe:	041a      	lsls	r2, r3, #16
 800e100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e102:	fbb2 f3f3 	udiv	r3, r2, r3
 800e106:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800e10a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e10e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e110:	429a      	cmp	r2, r3
 800e112:	d902      	bls.n	800e11a <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800e114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e116:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800e11a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e11e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e122:	fb02 f303 	mul.w	r3, r2, r3
 800e126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800e12a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800e12e:	4613      	mov	r3, r2
 800e130:	005b      	lsls	r3, r3, #1
 800e132:	4413      	add	r3, r2
 800e134:	009b      	lsls	r3, r3, #2
 800e136:	4618      	mov	r0, r3
 800e138:	f7fe fafd 	bl	800c736 <VL53L0X_isqrt>
 800e13c:	4603      	mov	r3, r0
 800e13e:	005b      	lsls	r3, r3, #1
 800e140:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	891b      	ldrh	r3, [r3, #8]
 800e146:	461a      	mov	r2, r3
 800e148:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e14a:	fb02 f303 	mul.w	r3, r2, r3
 800e14e:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e152:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800e154:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e158:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e15a:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800e15c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e160:	4a14      	ldr	r2, [pc, #80]	; (800e1b4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e162:	fba2 2303 	umull	r2, r3, r2, r3
 800e166:	099b      	lsrs	r3, r3, #6
 800e168:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800e16a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e16c:	041b      	lsls	r3, r3, #16
 800e16e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e172:	4a10      	ldr	r2, [pc, #64]	; (800e1b4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e174:	fba2 2303 	umull	r2, r3, r2, r3
 800e178:	099b      	lsrs	r3, r3, #6
 800e17a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800e17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e17e:	021b      	lsls	r3, r3, #8
 800e180:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800e182:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e186:	fbb2 f3f3 	udiv	r3, r2, r3
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	bfb8      	it	lt
 800e18e:	425b      	neglt	r3, r3
 800e190:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800e192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e194:	021b      	lsls	r3, r3, #8
 800e196:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	7e1b      	ldrb	r3, [r3, #24]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d00b      	beq.n	800e1b8 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800e1a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e1a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e1a8:	e033      	b.n	800e212 <VL53L0X_calc_sigma_estimate+0x30e>
 800e1aa:	bf00      	nop
 800e1ac:	028f87ae 	.word	0x028f87ae
 800e1b0:	0006999a 	.word	0x0006999a
 800e1b4:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800e1b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e1ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800e1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1c8:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800e1cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e1d0:	fb02 f303 	mul.w	r3, r2, r3
 800e1d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800e1d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e1dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e1de:	4413      	add	r3, r2
 800e1e0:	0c1b      	lsrs	r3, r3, #16
 800e1e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800e1e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e1ea:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800e1ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800e1f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e1f6:	085b      	lsrs	r3, r3, #1
 800e1f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800e1fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e200:	fb03 f303 	mul.w	r3, r3, r3
 800e204:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800e208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e20c:	0b9b      	lsrs	r3, r3, #14
 800e20e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800e212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e216:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e218:	fb02 f303 	mul.w	r3, r2, r3
 800e21c:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800e21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e220:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e224:	0c1b      	lsrs	r3, r3, #16
 800e226:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800e228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e22a:	fb03 f303 	mul.w	r3, r3, r3
 800e22e:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800e230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e234:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800e236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e238:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e23c:	0c1b      	lsrs	r3, r3, #16
 800e23e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800e240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e242:	fb03 f303 	mul.w	r3, r3, r3
 800e246:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800e248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e24c:	4413      	add	r3, r2
 800e24e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800e250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e252:	f7fe fa70 	bl	800c736 <VL53L0X_isqrt>
 800e256:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800e258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25a:	041b      	lsls	r3, r3, #16
 800e25c:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800e25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e260:	3332      	adds	r3, #50	; 0x32
 800e262:	4a4b      	ldr	r2, [pc, #300]	; (800e390 <VL53L0X_calc_sigma_estimate+0x48c>)
 800e264:	fba2 2303 	umull	r2, r3, r2, r3
 800e268:	095a      	lsrs	r2, r3, #5
 800e26a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e26c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e270:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800e274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e278:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800e27c:	fb02 f303 	mul.w	r3, r2, r3
 800e280:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800e284:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e288:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800e28c:	3308      	adds	r3, #8
 800e28e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800e292:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e296:	4a3f      	ldr	r2, [pc, #252]	; (800e394 <VL53L0X_calc_sigma_estimate+0x490>)
 800e298:	fba2 2303 	umull	r2, r3, r2, r3
 800e29c:	0b5b      	lsrs	r3, r3, #13
 800e29e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800e2a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e2a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d902      	bls.n	800e2b2 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800e2ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e2ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800e2b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e2b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e2ba:	4413      	add	r3, r2
 800e2bc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800e2c0:	4a35      	ldr	r2, [pc, #212]	; (800e398 <VL53L0X_calc_sigma_estimate+0x494>)
 800e2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e2c6:	099b      	lsrs	r3, r3, #6
 800e2c8:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800e2ca:	6a3b      	ldr	r3, [r7, #32]
 800e2cc:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800e2ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e2d2:	441a      	add	r2, r3
 800e2d4:	6a3b      	ldr	r3, [r7, #32]
 800e2d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7fe fa2b 	bl	800c736 <VL53L0X_isqrt>
 800e2e0:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800e2e2:	69fb      	ldr	r3, [r7, #28]
 800e2e4:	021b      	lsls	r3, r3, #8
 800e2e6:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e2ee:	4a2a      	ldr	r2, [pc, #168]	; (800e398 <VL53L0X_calc_sigma_estimate+0x494>)
 800e2f0:	fba2 2303 	umull	r2, r3, r2, r3
 800e2f4:	099b      	lsrs	r3, r3, #6
 800e2f6:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800e2f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e2fc:	fb03 f303 	mul.w	r3, r3, r3
 800e300:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	fb03 f303 	mul.w	r3, r3, r3
 800e308:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800e30a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30e:	4413      	add	r3, r2
 800e310:	4618      	mov	r0, r3
 800e312:	f7fe fa10 	bl	800c736 <VL53L0X_isqrt>
 800e316:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800e318:	69bb      	ldr	r3, [r7, #24]
 800e31a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e31e:	fb02 f303 	mul.w	r3, r2, r3
 800e322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800e326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d009      	beq.n	800e340 <VL53L0X_calc_sigma_estimate+0x43c>
 800e32c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e330:	2b00      	cmp	r3, #0
 800e332:	d005      	beq.n	800e340 <VL53L0X_calc_sigma_estimate+0x43c>
 800e334:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e338:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d903      	bls.n	800e348 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800e340:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e344:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e34e:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681a      	ldr	r2, [r3, #0]
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800e35a:	6939      	ldr	r1, [r7, #16]
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	9303      	str	r3, [sp, #12]
 800e360:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e364:	9302      	str	r3, [sp, #8]
 800e366:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e36a:	9301      	str	r3, [sp, #4]
 800e36c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e36e:	9300      	str	r3, [sp, #0]
 800e370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e374:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e376:	68f8      	ldr	r0, [r7, #12]
 800e378:	f7ff fca8 	bl	800dccc <VL53L0X_calc_dmax>
 800e37c:	4603      	mov	r3, r0
 800e37e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e382:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800e386:	4618      	mov	r0, r3
 800e388:	37c0      	adds	r7, #192	; 0xc0
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	51eb851f 	.word	0x51eb851f
 800e394:	d1b71759 	.word	0xd1b71759
 800e398:	10624dd3 	.word	0x10624dd3

0800e39c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b090      	sub	sp, #64	; 0x40
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	607a      	str	r2, [r7, #4]
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	72fb      	strb	r3, [r7, #11]
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800e3ee:	7afb      	ldrb	r3, [r7, #11]
 800e3f0:	10db      	asrs	r3, r3, #3
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	f003 030f 	and.w	r3, r3, #15
 800e3f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800e3fc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e400:	2b00      	cmp	r3, #0
 800e402:	d017      	beq.n	800e434 <VL53L0X_get_pal_range_status+0x98>
 800e404:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e408:	2b05      	cmp	r3, #5
 800e40a:	d013      	beq.n	800e434 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800e40c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e410:	2b07      	cmp	r3, #7
 800e412:	d00f      	beq.n	800e434 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800e414:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e418:	2b0c      	cmp	r3, #12
 800e41a:	d00b      	beq.n	800e434 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800e41c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e420:	2b0d      	cmp	r3, #13
 800e422:	d007      	beq.n	800e434 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800e424:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e428:	2b0e      	cmp	r3, #14
 800e42a:	d003      	beq.n	800e434 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800e42c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e430:	2b0f      	cmp	r3, #15
 800e432:	d103      	bne.n	800e43c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800e434:	2301      	movs	r3, #1
 800e436:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800e43a:	e002      	b.n	800e442 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800e43c:	2300      	movs	r3, #0
 800e43e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e442:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e446:	2b00      	cmp	r3, #0
 800e448:	d109      	bne.n	800e45e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e44a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e44e:	461a      	mov	r2, r3
 800e450:	2100      	movs	r1, #0
 800e452:	68f8      	ldr	r0, [r7, #12]
 800e454:	f7fc fc86 	bl	800ad64 <VL53L0X_GetLimitCheckEnable>
 800e458:	4603      	mov	r3, r0
 800e45a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800e45e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e462:	2b00      	cmp	r3, #0
 800e464:	d02e      	beq.n	800e4c4 <VL53L0X_get_pal_range_status+0x128>
 800e466:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d12a      	bne.n	800e4c4 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800e46e:	f107 0310 	add.w	r3, r7, #16
 800e472:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e476:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	f7ff fd43 	bl	800df04 <VL53L0X_calc_sigma_estimate>
 800e47e:	4603      	mov	r3, r0
 800e480:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800e484:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d103      	bne.n	800e494 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800e48c:	693b      	ldr	r3, [r7, #16]
 800e48e:	b29a      	uxth	r2, r3
 800e490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e492:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800e494:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d113      	bne.n	800e4c4 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800e49c:	f107 0320 	add.w	r3, r7, #32
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	2100      	movs	r1, #0
 800e4a4:	68f8      	ldr	r0, [r7, #12]
 800e4a6:	f7fc fce3 	bl	800ae70 <VL53L0X_GetLimitCheckValue>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800e4b0:	6a3b      	ldr	r3, [r7, #32]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d006      	beq.n	800e4c4 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800e4b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4b8:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d902      	bls.n	800e4c4 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800e4be:	2301      	movs	r3, #1
 800e4c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e4c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d109      	bne.n	800e4e0 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e4cc:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	2102      	movs	r1, #2
 800e4d4:	68f8      	ldr	r0, [r7, #12]
 800e4d6:	f7fc fc45 	bl	800ad64 <VL53L0X_GetLimitCheckEnable>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800e4e0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d044      	beq.n	800e572 <VL53L0X_get_pal_range_status+0x1d6>
 800e4e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d140      	bne.n	800e572 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800e4f0:	f107 031c 	add.w	r3, r7, #28
 800e4f4:	461a      	mov	r2, r3
 800e4f6:	2102      	movs	r1, #2
 800e4f8:	68f8      	ldr	r0, [r7, #12]
 800e4fa:	f7fc fcb9 	bl	800ae70 <VL53L0X_GetLimitCheckValue>
 800e4fe:	4603      	mov	r3, r0
 800e500:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800e504:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d107      	bne.n	800e51c <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e50c:	2201      	movs	r2, #1
 800e50e:	21ff      	movs	r1, #255	; 0xff
 800e510:	68f8      	ldr	r0, [r7, #12]
 800e512:	f000 f9bb 	bl	800e88c <VL53L0X_WrByte>
 800e516:	4603      	mov	r3, r0
 800e518:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800e51c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e520:	2b00      	cmp	r3, #0
 800e522:	d109      	bne.n	800e538 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800e524:	f107 0316 	add.w	r3, r7, #22
 800e528:	461a      	mov	r2, r3
 800e52a:	21b6      	movs	r1, #182	; 0xb6
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f000 fa59 	bl	800e9e4 <VL53L0X_RdWord>
 800e532:	4603      	mov	r3, r0
 800e534:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800e538:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d107      	bne.n	800e550 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e540:	2200      	movs	r2, #0
 800e542:	21ff      	movs	r1, #255	; 0xff
 800e544:	68f8      	ldr	r0, [r7, #12]
 800e546:	f000 f9a1 	bl	800e88c <VL53L0X_WrByte>
 800e54a:	4603      	mov	r3, r0
 800e54c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800e550:	8afb      	ldrh	r3, [r7, #22]
 800e552:	025b      	lsls	r3, r3, #9
 800e554:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e55a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800e55e:	69fb      	ldr	r3, [r7, #28]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d006      	beq.n	800e572 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800e564:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800e566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e568:	429a      	cmp	r2, r3
 800e56a:	d902      	bls.n	800e572 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800e56c:	2301      	movs	r3, #1
 800e56e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e572:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e576:	2b00      	cmp	r3, #0
 800e578:	d109      	bne.n	800e58e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e57a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e57e:	461a      	mov	r2, r3
 800e580:	2103      	movs	r1, #3
 800e582:	68f8      	ldr	r0, [r7, #12]
 800e584:	f7fc fbee 	bl	800ad64 <VL53L0X_GetLimitCheckEnable>
 800e588:	4603      	mov	r3, r0
 800e58a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800e58e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e592:	2b00      	cmp	r3, #0
 800e594:	d023      	beq.n	800e5de <VL53L0X_get_pal_range_status+0x242>
 800e596:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d11f      	bne.n	800e5de <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800e59e:	893b      	ldrh	r3, [r7, #8]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d102      	bne.n	800e5aa <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	637b      	str	r3, [r7, #52]	; 0x34
 800e5a8:	e005      	b.n	800e5b6 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	021a      	lsls	r2, r3, #8
 800e5ae:	893b      	ldrh	r3, [r7, #8]
 800e5b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5b4:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800e5b6:	f107 0318 	add.w	r3, r7, #24
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	2103      	movs	r1, #3
 800e5be:	68f8      	ldr	r0, [r7, #12]
 800e5c0:	f7fc fc56 	bl	800ae70 <VL53L0X_GetLimitCheckValue>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d006      	beq.n	800e5de <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800e5d0:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800e5d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d202      	bcs.n	800e5de <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e5de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d14a      	bne.n	800e67c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800e5e6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e5ea:	2b01      	cmp	r3, #1
 800e5ec:	d103      	bne.n	800e5f6 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800e5ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5f0:	22ff      	movs	r2, #255	; 0xff
 800e5f2:	701a      	strb	r2, [r3, #0]
 800e5f4:	e042      	b.n	800e67c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800e5f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d007      	beq.n	800e60e <VL53L0X_get_pal_range_status+0x272>
 800e5fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e602:	2b02      	cmp	r3, #2
 800e604:	d003      	beq.n	800e60e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800e606:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e60a:	2b03      	cmp	r3, #3
 800e60c:	d103      	bne.n	800e616 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800e60e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e610:	2205      	movs	r2, #5
 800e612:	701a      	strb	r2, [r3, #0]
 800e614:	e032      	b.n	800e67c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800e616:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e61a:	2b06      	cmp	r3, #6
 800e61c:	d003      	beq.n	800e626 <VL53L0X_get_pal_range_status+0x28a>
 800e61e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e622:	2b09      	cmp	r3, #9
 800e624:	d103      	bne.n	800e62e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800e626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e628:	2204      	movs	r2, #4
 800e62a:	701a      	strb	r2, [r3, #0]
 800e62c:	e026      	b.n	800e67c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800e62e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e632:	2b08      	cmp	r3, #8
 800e634:	d007      	beq.n	800e646 <VL53L0X_get_pal_range_status+0x2aa>
 800e636:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e63a:	2b0a      	cmp	r3, #10
 800e63c:	d003      	beq.n	800e646 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800e63e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e642:	2b01      	cmp	r3, #1
 800e644:	d103      	bne.n	800e64e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800e646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e648:	2203      	movs	r2, #3
 800e64a:	701a      	strb	r2, [r3, #0]
 800e64c:	e016      	b.n	800e67c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800e64e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e652:	2b04      	cmp	r3, #4
 800e654:	d003      	beq.n	800e65e <VL53L0X_get_pal_range_status+0x2c2>
 800e656:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e65a:	2b01      	cmp	r3, #1
 800e65c:	d103      	bne.n	800e666 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800e65e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e660:	2202      	movs	r2, #2
 800e662:	701a      	strb	r2, [r3, #0]
 800e664:	e00a      	b.n	800e67c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800e666:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800e66a:	2b01      	cmp	r3, #1
 800e66c:	d103      	bne.n	800e676 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800e66e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e670:	2201      	movs	r2, #1
 800e672:	701a      	strb	r2, [r3, #0]
 800e674:	e002      	b.n	800e67c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800e676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e678:	2200      	movs	r2, #0
 800e67a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800e67c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d102      	bne.n	800e68a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800e684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e686:	2200      	movs	r2, #0
 800e688:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e68a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800e68e:	461a      	mov	r2, r3
 800e690:	2101      	movs	r1, #1
 800e692:	68f8      	ldr	r0, [r7, #12]
 800e694:	f7fc fb66 	bl	800ad64 <VL53L0X_GetLimitCheckEnable>
 800e698:	4603      	mov	r3, r0
 800e69a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800e69e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d14f      	bne.n	800e746 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800e6a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d003      	beq.n	800e6b6 <VL53L0X_get_pal_range_status+0x31a>
 800e6ae:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d103      	bne.n	800e6be <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6bc:	e002      	b.n	800e6c4 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e6ca:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800e6ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e6d2:	2b04      	cmp	r3, #4
 800e6d4:	d003      	beq.n	800e6de <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800e6d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d103      	bne.n	800e6e6 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6e4:	e002      	b.n	800e6ec <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e6f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800e6f6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d003      	beq.n	800e706 <VL53L0X_get_pal_range_status+0x36a>
 800e6fe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e702:	2b01      	cmp	r3, #1
 800e704:	d103      	bne.n	800e70e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800e706:	2301      	movs	r3, #1
 800e708:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e70c:	e002      	b.n	800e714 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800e70e:	2300      	movs	r3, #0
 800e710:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e71a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800e71e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e722:	2b00      	cmp	r3, #0
 800e724:	d003      	beq.n	800e72e <VL53L0X_get_pal_range_status+0x392>
 800e726:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e72a:	2b01      	cmp	r3, #1
 800e72c:	d103      	bne.n	800e736 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800e72e:	2301      	movs	r3, #1
 800e730:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e734:	e002      	b.n	800e73c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800e736:	2300      	movs	r3, #0
 800e738:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e742:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e746:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3740      	adds	r7, #64	; 0x40
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}

0800e752 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800e752:	b580      	push	{r7, lr}
 800e754:	b088      	sub	sp, #32
 800e756:	af02      	add	r7, sp, #8
 800e758:	60f8      	str	r0, [r7, #12]
 800e75a:	60b9      	str	r1, [r7, #8]
 800e75c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	330a      	adds	r3, #10
 800e762:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 800e770:	b299      	uxth	r1, r3
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	b29a      	uxth	r2, r3
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	9300      	str	r3, [sp, #0]
 800e77a:	4613      	mov	r3, r2
 800e77c:	68ba      	ldr	r2, [r7, #8]
 800e77e:	f7f7 fbcf 	bl	8005f20 <HAL_I2C_Master_Transmit>
 800e782:	4603      	mov	r3, r0
 800e784:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800e786:	693b      	ldr	r3, [r7, #16]
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3718      	adds	r7, #24
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800e790:	b580      	push	{r7, lr}
 800e792:	b088      	sub	sp, #32
 800e794:	af02      	add	r7, sp, #8
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	330a      	adds	r3, #10
 800e7a0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 800e7ae:	f043 0301 	orr.w	r3, r3, #1
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	b299      	uxth	r1, r3
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	b29a      	uxth	r2, r3
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	9300      	str	r3, [sp, #0]
 800e7be:	4613      	mov	r3, r2
 800e7c0:	68ba      	ldr	r2, [r7, #8]
 800e7c2:	f7f7 fcab 	bl	800611c <HAL_I2C_Master_Receive>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800e7ca:	693b      	ldr	r3, [r7, #16]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3718      	adds	r7, #24
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b086      	sub	sp, #24
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	607a      	str	r2, [r7, #4]
 800e7de:	603b      	str	r3, [r7, #0]
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	2b3f      	cmp	r3, #63	; 0x3f
 800e7ec:	d902      	bls.n	800e7f4 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800e7ee:	f06f 0303 	mvn.w	r3, #3
 800e7f2:	e016      	b.n	800e822 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800e7f4:	4a0d      	ldr	r2, [pc, #52]	; (800e82c <VL53L0X_WriteMulti+0x58>)
 800e7f6:	7afb      	ldrb	r3, [r7, #11]
 800e7f8:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800e7fa:	683a      	ldr	r2, [r7, #0]
 800e7fc:	6879      	ldr	r1, [r7, #4]
 800e7fe:	480c      	ldr	r0, [pc, #48]	; (800e830 <VL53L0X_WriteMulti+0x5c>)
 800e800:	f002 fc17 	bl	8011032 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	3301      	adds	r3, #1
 800e808:	461a      	mov	r2, r3
 800e80a:	4908      	ldr	r1, [pc, #32]	; (800e82c <VL53L0X_WriteMulti+0x58>)
 800e80c:	68f8      	ldr	r0, [r7, #12]
 800e80e:	f7ff ffa0 	bl	800e752 <_I2CWrite>
 800e812:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d001      	beq.n	800e81e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e81a:	23ec      	movs	r3, #236	; 0xec
 800e81c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800e81e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e822:	4618      	mov	r0, r3
 800e824:	3718      	adds	r7, #24
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	20004e4c 	.word	0x20004e4c
 800e830:	20004e4d 	.word	0x20004e4d

0800e834 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800e834:	b580      	push	{r7, lr}
 800e836:	b086      	sub	sp, #24
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	607a      	str	r2, [r7, #4]
 800e83e:	603b      	str	r3, [r7, #0]
 800e840:	460b      	mov	r3, r1
 800e842:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e844:	2300      	movs	r3, #0
 800e846:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e848:	f107 030b 	add.w	r3, r7, #11
 800e84c:	2201      	movs	r2, #1
 800e84e:	4619      	mov	r1, r3
 800e850:	68f8      	ldr	r0, [r7, #12]
 800e852:	f7ff ff7e 	bl	800e752 <_I2CWrite>
 800e856:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d002      	beq.n	800e864 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e85e:	23ec      	movs	r3, #236	; 0xec
 800e860:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e862:	e00c      	b.n	800e87e <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800e864:	683a      	ldr	r2, [r7, #0]
 800e866:	6879      	ldr	r1, [r7, #4]
 800e868:	68f8      	ldr	r0, [r7, #12]
 800e86a:	f7ff ff91 	bl	800e790 <_I2CRead>
 800e86e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d002      	beq.n	800e87c <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e876:	23ec      	movs	r3, #236	; 0xec
 800e878:	75fb      	strb	r3, [r7, #23]
 800e87a:	e000      	b.n	800e87e <VL53L0X_ReadMulti+0x4a>
    }
done:
 800e87c:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800e87e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e882:	4618      	mov	r0, r3
 800e884:	3718      	adds	r7, #24
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
	...

0800e88c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	460b      	mov	r3, r1
 800e896:	70fb      	strb	r3, [r7, #3]
 800e898:	4613      	mov	r3, r2
 800e89a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e89c:	2300      	movs	r3, #0
 800e89e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800e8a0:	4a0b      	ldr	r2, [pc, #44]	; (800e8d0 <VL53L0X_WrByte+0x44>)
 800e8a2:	78fb      	ldrb	r3, [r7, #3]
 800e8a4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800e8a6:	4a0a      	ldr	r2, [pc, #40]	; (800e8d0 <VL53L0X_WrByte+0x44>)
 800e8a8:	78bb      	ldrb	r3, [r7, #2]
 800e8aa:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800e8ac:	2202      	movs	r2, #2
 800e8ae:	4908      	ldr	r1, [pc, #32]	; (800e8d0 <VL53L0X_WrByte+0x44>)
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f7ff ff4e 	bl	800e752 <_I2CWrite>
 800e8b6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d001      	beq.n	800e8c2 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e8be:	23ec      	movs	r3, #236	; 0xec
 800e8c0:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800e8c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3710      	adds	r7, #16
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	20004e4c 	.word	0x20004e4c

0800e8d4 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b084      	sub	sp, #16
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	460b      	mov	r3, r1
 800e8de:	70fb      	strb	r3, [r7, #3]
 800e8e0:	4613      	mov	r3, r2
 800e8e2:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800e8e8:	4a0e      	ldr	r2, [pc, #56]	; (800e924 <VL53L0X_WrWord+0x50>)
 800e8ea:	78fb      	ldrb	r3, [r7, #3]
 800e8ec:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800e8ee:	883b      	ldrh	r3, [r7, #0]
 800e8f0:	0a1b      	lsrs	r3, r3, #8
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	b2da      	uxtb	r2, r3
 800e8f6:	4b0b      	ldr	r3, [pc, #44]	; (800e924 <VL53L0X_WrWord+0x50>)
 800e8f8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800e8fa:	883b      	ldrh	r3, [r7, #0]
 800e8fc:	b2da      	uxtb	r2, r3
 800e8fe:	4b09      	ldr	r3, [pc, #36]	; (800e924 <VL53L0X_WrWord+0x50>)
 800e900:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800e902:	2203      	movs	r2, #3
 800e904:	4907      	ldr	r1, [pc, #28]	; (800e924 <VL53L0X_WrWord+0x50>)
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f7ff ff23 	bl	800e752 <_I2CWrite>
 800e90c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d001      	beq.n	800e918 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e914:	23ec      	movs	r3, #236	; 0xec
 800e916:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800e918:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3710      	adds	r7, #16
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}
 800e924:	20004e4c 	.word	0x20004e4c

0800e928 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800e928:	b580      	push	{r7, lr}
 800e92a:	b084      	sub	sp, #16
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	4608      	mov	r0, r1
 800e932:	4611      	mov	r1, r2
 800e934:	461a      	mov	r2, r3
 800e936:	4603      	mov	r3, r0
 800e938:	70fb      	strb	r3, [r7, #3]
 800e93a:	460b      	mov	r3, r1
 800e93c:	70bb      	strb	r3, [r7, #2]
 800e93e:	4613      	mov	r3, r2
 800e940:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e942:	2300      	movs	r3, #0
 800e944:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800e946:	f107 020e 	add.w	r2, r7, #14
 800e94a:	78fb      	ldrb	r3, [r7, #3]
 800e94c:	4619      	mov	r1, r3
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f000 f81e 	bl	800e990 <VL53L0X_RdByte>
 800e954:	4603      	mov	r3, r0
 800e956:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800e958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d110      	bne.n	800e982 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800e960:	7bba      	ldrb	r2, [r7, #14]
 800e962:	78bb      	ldrb	r3, [r7, #2]
 800e964:	4013      	ands	r3, r2
 800e966:	b2da      	uxtb	r2, r3
 800e968:	787b      	ldrb	r3, [r7, #1]
 800e96a:	4313      	orrs	r3, r2
 800e96c:	b2db      	uxtb	r3, r3
 800e96e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800e970:	7bba      	ldrb	r2, [r7, #14]
 800e972:	78fb      	ldrb	r3, [r7, #3]
 800e974:	4619      	mov	r1, r3
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f7ff ff88 	bl	800e88c <VL53L0X_WrByte>
 800e97c:	4603      	mov	r3, r0
 800e97e:	73fb      	strb	r3, [r7, #15]
 800e980:	e000      	b.n	800e984 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800e982:	bf00      	nop
done:
    return Status;
 800e984:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3710      	adds	r7, #16
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800e990:	b580      	push	{r7, lr}
 800e992:	b086      	sub	sp, #24
 800e994:	af00      	add	r7, sp, #0
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	460b      	mov	r3, r1
 800e99a:	607a      	str	r2, [r7, #4]
 800e99c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e9a2:	f107 030b 	add.w	r3, r7, #11
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	68f8      	ldr	r0, [r7, #12]
 800e9ac:	f7ff fed1 	bl	800e752 <_I2CWrite>
 800e9b0:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d002      	beq.n	800e9be <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e9b8:	23ec      	movs	r3, #236	; 0xec
 800e9ba:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e9bc:	e00c      	b.n	800e9d8 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800e9be:	2201      	movs	r2, #1
 800e9c0:	6879      	ldr	r1, [r7, #4]
 800e9c2:	68f8      	ldr	r0, [r7, #12]
 800e9c4:	f7ff fee4 	bl	800e790 <_I2CRead>
 800e9c8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e9ca:	693b      	ldr	r3, [r7, #16]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d002      	beq.n	800e9d6 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e9d0:	23ec      	movs	r3, #236	; 0xec
 800e9d2:	75fb      	strb	r3, [r7, #23]
 800e9d4:	e000      	b.n	800e9d8 <VL53L0X_RdByte+0x48>
    }
done:
 800e9d6:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800e9d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3718      	adds	r7, #24
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}

0800e9e4 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b086      	sub	sp, #24
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	607a      	str	r2, [r7, #4]
 800e9f0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e9f6:	f107 030b 	add.w	r3, r7, #11
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	68f8      	ldr	r0, [r7, #12]
 800ea00:	f7ff fea7 	bl	800e752 <_I2CWrite>
 800ea04:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d002      	beq.n	800ea12 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ea0c:	23ec      	movs	r3, #236	; 0xec
 800ea0e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ea10:	e017      	b.n	800ea42 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ea12:	2202      	movs	r2, #2
 800ea14:	490e      	ldr	r1, [pc, #56]	; (800ea50 <VL53L0X_RdWord+0x6c>)
 800ea16:	68f8      	ldr	r0, [r7, #12]
 800ea18:	f7ff feba 	bl	800e790 <_I2CRead>
 800ea1c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d002      	beq.n	800ea2a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ea24:	23ec      	movs	r3, #236	; 0xec
 800ea26:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ea28:	e00b      	b.n	800ea42 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800ea2a:	4b09      	ldr	r3, [pc, #36]	; (800ea50 <VL53L0X_RdWord+0x6c>)
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	021b      	lsls	r3, r3, #8
 800ea32:	b29a      	uxth	r2, r3
 800ea34:	4b06      	ldr	r3, [pc, #24]	; (800ea50 <VL53L0X_RdWord+0x6c>)
 800ea36:	785b      	ldrb	r3, [r3, #1]
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	4413      	add	r3, r2
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800ea42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3718      	adds	r7, #24
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	20004e4c 	.word	0x20004e4c

0800ea54 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b086      	sub	sp, #24
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	460b      	mov	r3, r1
 800ea5e:	607a      	str	r2, [r7, #4]
 800ea60:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ea62:	2300      	movs	r3, #0
 800ea64:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ea66:	f107 030b 	add.w	r3, r7, #11
 800ea6a:	2201      	movs	r2, #1
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	68f8      	ldr	r0, [r7, #12]
 800ea70:	f7ff fe6f 	bl	800e752 <_I2CWrite>
 800ea74:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d002      	beq.n	800ea82 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ea7c:	23ec      	movs	r3, #236	; 0xec
 800ea7e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ea80:	e01b      	b.n	800eaba <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800ea82:	2204      	movs	r2, #4
 800ea84:	4910      	ldr	r1, [pc, #64]	; (800eac8 <VL53L0X_RdDWord+0x74>)
 800ea86:	68f8      	ldr	r0, [r7, #12]
 800ea88:	f7ff fe82 	bl	800e790 <_I2CRead>
 800ea8c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d002      	beq.n	800ea9a <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ea94:	23ec      	movs	r3, #236	; 0xec
 800ea96:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ea98:	e00f      	b.n	800eaba <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800ea9a:	4b0b      	ldr	r3, [pc, #44]	; (800eac8 <VL53L0X_RdDWord+0x74>)
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	061a      	lsls	r2, r3, #24
 800eaa0:	4b09      	ldr	r3, [pc, #36]	; (800eac8 <VL53L0X_RdDWord+0x74>)
 800eaa2:	785b      	ldrb	r3, [r3, #1]
 800eaa4:	041b      	lsls	r3, r3, #16
 800eaa6:	441a      	add	r2, r3
 800eaa8:	4b07      	ldr	r3, [pc, #28]	; (800eac8 <VL53L0X_RdDWord+0x74>)
 800eaaa:	789b      	ldrb	r3, [r3, #2]
 800eaac:	021b      	lsls	r3, r3, #8
 800eaae:	4413      	add	r3, r2
 800eab0:	4a05      	ldr	r2, [pc, #20]	; (800eac8 <VL53L0X_RdDWord+0x74>)
 800eab2:	78d2      	ldrb	r2, [r2, #3]
 800eab4:	441a      	add	r2, r3
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800eaba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3718      	adds	r7, #24
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop
 800eac8:	20004e4c 	.word	0x20004e4c

0800eacc <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ead4:	2300      	movs	r3, #0
 800ead6:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800ead8:	2002      	movs	r0, #2
 800eada:	f7f5 fd61 	bl	80045a0 <HAL_Delay>
    return status;
 800eade:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3710      	adds	r7, #16
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}

0800eaea <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800eaea:	b480      	push	{r7}
 800eaec:	b085      	sub	sp, #20
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800eaf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800eafc:	2b84      	cmp	r3, #132	; 0x84
 800eafe:	d005      	beq.n	800eb0c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800eb00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	4413      	add	r3, r2
 800eb08:	3303      	adds	r3, #3
 800eb0a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3714      	adds	r7, #20
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr

0800eb1a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800eb1e:	f000 fefd 	bl	800f91c <vTaskStartScheduler>
  
  return osOK;
 800eb22:	2300      	movs	r3, #0
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800eb28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb2a:	b089      	sub	sp, #36	; 0x24
 800eb2c:	af04      	add	r7, sp, #16
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	695b      	ldr	r3, [r3, #20]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d020      	beq.n	800eb7c <osThreadCreate+0x54>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	699b      	ldr	r3, [r3, #24]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d01c      	beq.n	800eb7c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	685c      	ldr	r4, [r3, #4]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681d      	ldr	r5, [r3, #0]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	691e      	ldr	r6, [r3, #16]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eb54:	4618      	mov	r0, r3
 800eb56:	f7ff ffc8 	bl	800eaea <makeFreeRtosPriority>
 800eb5a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	695b      	ldr	r3, [r3, #20]
 800eb60:	687a      	ldr	r2, [r7, #4]
 800eb62:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb64:	9202      	str	r2, [sp, #8]
 800eb66:	9301      	str	r3, [sp, #4]
 800eb68:	9100      	str	r1, [sp, #0]
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	4632      	mov	r2, r6
 800eb6e:	4629      	mov	r1, r5
 800eb70:	4620      	mov	r0, r4
 800eb72:	f000 fced 	bl	800f550 <xTaskCreateStatic>
 800eb76:	4603      	mov	r3, r0
 800eb78:	60fb      	str	r3, [r7, #12]
 800eb7a:	e01c      	b.n	800ebb6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	685c      	ldr	r4, [r3, #4]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb88:	b29e      	uxth	r6, r3
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7ff ffaa 	bl	800eaea <makeFreeRtosPriority>
 800eb96:	4602      	mov	r2, r0
 800eb98:	f107 030c 	add.w	r3, r7, #12
 800eb9c:	9301      	str	r3, [sp, #4]
 800eb9e:	9200      	str	r2, [sp, #0]
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	4632      	mov	r2, r6
 800eba4:	4629      	mov	r1, r5
 800eba6:	4620      	mov	r0, r4
 800eba8:	f000 fd2f 	bl	800f60a <xTaskCreate>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d001      	beq.n	800ebb6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	e000      	b.n	800ebb8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3714      	adds	r7, #20
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ebc0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b084      	sub	sp, #16
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d001      	beq.n	800ebd6 <osDelay+0x16>
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	e000      	b.n	800ebd8 <osDelay+0x18>
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f000 fe6b 	bl	800f8b4 <vTaskDelay>
  
  return osOK;
 800ebde:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	3710      	adds	r7, #16
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b083      	sub	sp, #12
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f103 0208 	add.w	r2, r3, #8
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f04f 32ff 	mov.w	r2, #4294967295
 800ec00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f103 0208 	add.w	r2, r3, #8
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f103 0208 	add.w	r2, r3, #8
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ec1c:	bf00      	nop
 800ec1e:	370c      	adds	r7, #12
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr

0800ec28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2200      	movs	r2, #0
 800ec34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ec36:	bf00      	nop
 800ec38:	370c      	adds	r7, #12
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec40:	4770      	bx	lr

0800ec42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ec42:	b480      	push	{r7}
 800ec44:	b085      	sub	sp, #20
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	6078      	str	r0, [r7, #4]
 800ec4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	68fa      	ldr	r2, [r7, #12]
 800ec56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	689a      	ldr	r2, [r3, #8]
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	689b      	ldr	r3, [r3, #8]
 800ec64:	683a      	ldr	r2, [r7, #0]
 800ec66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	683a      	ldr	r2, [r7, #0]
 800ec6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	687a      	ldr	r2, [r7, #4]
 800ec72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	1c5a      	adds	r2, r3, #1
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	601a      	str	r2, [r3, #0]
}
 800ec7e:	bf00      	nop
 800ec80:	3714      	adds	r7, #20
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr

0800ec8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ec8a:	b480      	push	{r7}
 800ec8c:	b085      	sub	sp, #20
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
 800ec92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eca0:	d103      	bne.n	800ecaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	691b      	ldr	r3, [r3, #16]
 800eca6:	60fb      	str	r3, [r7, #12]
 800eca8:	e00c      	b.n	800ecc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	3308      	adds	r3, #8
 800ecae:	60fb      	str	r3, [r7, #12]
 800ecb0:	e002      	b.n	800ecb8 <vListInsert+0x2e>
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	60fb      	str	r3, [r7, #12]
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	68ba      	ldr	r2, [r7, #8]
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d2f6      	bcs.n	800ecb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	685a      	ldr	r2, [r3, #4]
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	683a      	ldr	r2, [r7, #0]
 800ecd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	68fa      	ldr	r2, [r7, #12]
 800ecd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	683a      	ldr	r2, [r7, #0]
 800ecde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	1c5a      	adds	r2, r3, #1
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	601a      	str	r2, [r3, #0]
}
 800ecf0:	bf00      	nop
 800ecf2:	3714      	adds	r7, #20
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr

0800ecfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b085      	sub	sp, #20
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	691b      	ldr	r3, [r3, #16]
 800ed08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	687a      	ldr	r2, [r7, #4]
 800ed10:	6892      	ldr	r2, [r2, #8]
 800ed12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	687a      	ldr	r2, [r7, #4]
 800ed1a:	6852      	ldr	r2, [r2, #4]
 800ed1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	687a      	ldr	r2, [r7, #4]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d103      	bne.n	800ed30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	689a      	ldr	r2, [r3, #8]
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2200      	movs	r2, #0
 800ed34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	1e5a      	subs	r2, r3, #1
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	3714      	adds	r7, #20
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr

0800ed50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d10a      	bne.n	800ed7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ed64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed68:	f383 8811 	msr	BASEPRI, r3
 800ed6c:	f3bf 8f6f 	isb	sy
 800ed70:	f3bf 8f4f 	dsb	sy
 800ed74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ed76:	bf00      	nop
 800ed78:	e7fe      	b.n	800ed78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ed7a:	f001 fd6b 	bl	8010854 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed86:	68f9      	ldr	r1, [r7, #12]
 800ed88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ed8a:	fb01 f303 	mul.w	r3, r1, r3
 800ed8e:	441a      	add	r2, r3
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	2200      	movs	r2, #0
 800ed98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681a      	ldr	r2, [r3, #0]
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681a      	ldr	r2, [r3, #0]
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edaa:	3b01      	subs	r3, #1
 800edac:	68f9      	ldr	r1, [r7, #12]
 800edae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800edb0:	fb01 f303 	mul.w	r3, r1, r3
 800edb4:	441a      	add	r2, r3
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	22ff      	movs	r2, #255	; 0xff
 800edbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	22ff      	movs	r2, #255	; 0xff
 800edc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d114      	bne.n	800edfa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	691b      	ldr	r3, [r3, #16]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d01a      	beq.n	800ee0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	3310      	adds	r3, #16
 800eddc:	4618      	mov	r0, r3
 800edde:	f000 ffef 	bl	800fdc0 <xTaskRemoveFromEventList>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d012      	beq.n	800ee0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ede8:	4b0c      	ldr	r3, [pc, #48]	; (800ee1c <xQueueGenericReset+0xcc>)
 800edea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edee:	601a      	str	r2, [r3, #0]
 800edf0:	f3bf 8f4f 	dsb	sy
 800edf4:	f3bf 8f6f 	isb	sy
 800edf8:	e009      	b.n	800ee0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	3310      	adds	r3, #16
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7ff fef2 	bl	800ebe8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	3324      	adds	r3, #36	; 0x24
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7ff feed 	bl	800ebe8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ee0e:	f001 fd51 	bl	80108b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ee12:	2301      	movs	r3, #1
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3710      	adds	r7, #16
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	e000ed04 	.word	0xe000ed04

0800ee20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b08a      	sub	sp, #40	; 0x28
 800ee24:	af02      	add	r7, sp, #8
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	4613      	mov	r3, r2
 800ee2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d10a      	bne.n	800ee4a <xQueueGenericCreate+0x2a>
	__asm volatile
 800ee34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee38:	f383 8811 	msr	BASEPRI, r3
 800ee3c:	f3bf 8f6f 	isb	sy
 800ee40:	f3bf 8f4f 	dsb	sy
 800ee44:	613b      	str	r3, [r7, #16]
}
 800ee46:	bf00      	nop
 800ee48:	e7fe      	b.n	800ee48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	68ba      	ldr	r2, [r7, #8]
 800ee4e:	fb02 f303 	mul.w	r3, r2, r3
 800ee52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ee54:	69fb      	ldr	r3, [r7, #28]
 800ee56:	3348      	adds	r3, #72	; 0x48
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f001 fddd 	bl	8010a18 <pvPortMalloc>
 800ee5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ee60:	69bb      	ldr	r3, [r7, #24]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d011      	beq.n	800ee8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	3348      	adds	r3, #72	; 0x48
 800ee6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	2200      	movs	r2, #0
 800ee74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ee78:	79fa      	ldrb	r2, [r7, #7]
 800ee7a:	69bb      	ldr	r3, [r7, #24]
 800ee7c:	9300      	str	r3, [sp, #0]
 800ee7e:	4613      	mov	r3, r2
 800ee80:	697a      	ldr	r2, [r7, #20]
 800ee82:	68b9      	ldr	r1, [r7, #8]
 800ee84:	68f8      	ldr	r0, [r7, #12]
 800ee86:	f000 f805 	bl	800ee94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ee8a:	69bb      	ldr	r3, [r7, #24]
	}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3720      	adds	r7, #32
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b084      	sub	sp, #16
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	60b9      	str	r1, [r7, #8]
 800ee9e:	607a      	str	r2, [r7, #4]
 800eea0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d103      	bne.n	800eeb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800eea8:	69bb      	ldr	r3, [r7, #24]
 800eeaa:	69ba      	ldr	r2, [r7, #24]
 800eeac:	601a      	str	r2, [r3, #0]
 800eeae:	e002      	b.n	800eeb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	68fa      	ldr	r2, [r7, #12]
 800eeba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eebc:	69bb      	ldr	r3, [r7, #24]
 800eebe:	68ba      	ldr	r2, [r7, #8]
 800eec0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eec2:	2101      	movs	r1, #1
 800eec4:	69b8      	ldr	r0, [r7, #24]
 800eec6:	f7ff ff43 	bl	800ed50 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eeca:	bf00      	nop
 800eecc:	3710      	adds	r7, #16
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}

0800eed2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800eed2:	b580      	push	{r7, lr}
 800eed4:	b082      	sub	sp, #8
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d00e      	beq.n	800eefe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2200      	movs	r2, #0
 800eee4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2200      	movs	r2, #0
 800eeea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2200      	movs	r2, #0
 800eef0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800eef2:	2300      	movs	r3, #0
 800eef4:	2200      	movs	r2, #0
 800eef6:	2100      	movs	r1, #0
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f000 f81d 	bl	800ef38 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800eefe:	bf00      	nop
 800ef00:	3708      	adds	r7, #8
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}

0800ef06 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ef06:	b580      	push	{r7, lr}
 800ef08:	b086      	sub	sp, #24
 800ef0a:	af00      	add	r7, sp, #0
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ef10:	2301      	movs	r3, #1
 800ef12:	617b      	str	r3, [r7, #20]
 800ef14:	2300      	movs	r3, #0
 800ef16:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ef18:	79fb      	ldrb	r3, [r7, #7]
 800ef1a:	461a      	mov	r2, r3
 800ef1c:	6939      	ldr	r1, [r7, #16]
 800ef1e:	6978      	ldr	r0, [r7, #20]
 800ef20:	f7ff ff7e 	bl	800ee20 <xQueueGenericCreate>
 800ef24:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ef26:	68f8      	ldr	r0, [r7, #12]
 800ef28:	f7ff ffd3 	bl	800eed2 <prvInitialiseMutex>

		return xNewQueue;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
	}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3718      	adds	r7, #24
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
	...

0800ef38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b08e      	sub	sp, #56	; 0x38
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	60f8      	str	r0, [r7, #12]
 800ef40:	60b9      	str	r1, [r7, #8]
 800ef42:	607a      	str	r2, [r7, #4]
 800ef44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ef46:	2300      	movs	r3, #0
 800ef48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d10a      	bne.n	800ef6a <xQueueGenericSend+0x32>
	__asm volatile
 800ef54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef58:	f383 8811 	msr	BASEPRI, r3
 800ef5c:	f3bf 8f6f 	isb	sy
 800ef60:	f3bf 8f4f 	dsb	sy
 800ef64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ef66:	bf00      	nop
 800ef68:	e7fe      	b.n	800ef68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d103      	bne.n	800ef78 <xQueueGenericSend+0x40>
 800ef70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d101      	bne.n	800ef7c <xQueueGenericSend+0x44>
 800ef78:	2301      	movs	r3, #1
 800ef7a:	e000      	b.n	800ef7e <xQueueGenericSend+0x46>
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d10a      	bne.n	800ef98 <xQueueGenericSend+0x60>
	__asm volatile
 800ef82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef86:	f383 8811 	msr	BASEPRI, r3
 800ef8a:	f3bf 8f6f 	isb	sy
 800ef8e:	f3bf 8f4f 	dsb	sy
 800ef92:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ef94:	bf00      	nop
 800ef96:	e7fe      	b.n	800ef96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	2b02      	cmp	r3, #2
 800ef9c:	d103      	bne.n	800efa6 <xQueueGenericSend+0x6e>
 800ef9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d101      	bne.n	800efaa <xQueueGenericSend+0x72>
 800efa6:	2301      	movs	r3, #1
 800efa8:	e000      	b.n	800efac <xQueueGenericSend+0x74>
 800efaa:	2300      	movs	r3, #0
 800efac:	2b00      	cmp	r3, #0
 800efae:	d10a      	bne.n	800efc6 <xQueueGenericSend+0x8e>
	__asm volatile
 800efb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb4:	f383 8811 	msr	BASEPRI, r3
 800efb8:	f3bf 8f6f 	isb	sy
 800efbc:	f3bf 8f4f 	dsb	sy
 800efc0:	623b      	str	r3, [r7, #32]
}
 800efc2:	bf00      	nop
 800efc4:	e7fe      	b.n	800efc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800efc6:	f001 f8f3 	bl	80101b0 <xTaskGetSchedulerState>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d102      	bne.n	800efd6 <xQueueGenericSend+0x9e>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d101      	bne.n	800efda <xQueueGenericSend+0xa2>
 800efd6:	2301      	movs	r3, #1
 800efd8:	e000      	b.n	800efdc <xQueueGenericSend+0xa4>
 800efda:	2300      	movs	r3, #0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d10a      	bne.n	800eff6 <xQueueGenericSend+0xbe>
	__asm volatile
 800efe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe4:	f383 8811 	msr	BASEPRI, r3
 800efe8:	f3bf 8f6f 	isb	sy
 800efec:	f3bf 8f4f 	dsb	sy
 800eff0:	61fb      	str	r3, [r7, #28]
}
 800eff2:	bf00      	nop
 800eff4:	e7fe      	b.n	800eff4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eff6:	f001 fc2d 	bl	8010854 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800effa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800effe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f002:	429a      	cmp	r2, r3
 800f004:	d302      	bcc.n	800f00c <xQueueGenericSend+0xd4>
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	2b02      	cmp	r3, #2
 800f00a:	d129      	bne.n	800f060 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f00c:	683a      	ldr	r2, [r7, #0]
 800f00e:	68b9      	ldr	r1, [r7, #8]
 800f010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f012:	f000 f9b3 	bl	800f37c <prvCopyDataToQueue>
 800f016:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d010      	beq.n	800f042 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f022:	3324      	adds	r3, #36	; 0x24
 800f024:	4618      	mov	r0, r3
 800f026:	f000 fecb 	bl	800fdc0 <xTaskRemoveFromEventList>
 800f02a:	4603      	mov	r3, r0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d013      	beq.n	800f058 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f030:	4b3f      	ldr	r3, [pc, #252]	; (800f130 <xQueueGenericSend+0x1f8>)
 800f032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f036:	601a      	str	r2, [r3, #0]
 800f038:	f3bf 8f4f 	dsb	sy
 800f03c:	f3bf 8f6f 	isb	sy
 800f040:	e00a      	b.n	800f058 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f044:	2b00      	cmp	r3, #0
 800f046:	d007      	beq.n	800f058 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f048:	4b39      	ldr	r3, [pc, #228]	; (800f130 <xQueueGenericSend+0x1f8>)
 800f04a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f04e:	601a      	str	r2, [r3, #0]
 800f050:	f3bf 8f4f 	dsb	sy
 800f054:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f058:	f001 fc2c 	bl	80108b4 <vPortExitCritical>
				return pdPASS;
 800f05c:	2301      	movs	r3, #1
 800f05e:	e063      	b.n	800f128 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d103      	bne.n	800f06e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f066:	f001 fc25 	bl	80108b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f06a:	2300      	movs	r3, #0
 800f06c:	e05c      	b.n	800f128 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f070:	2b00      	cmp	r3, #0
 800f072:	d106      	bne.n	800f082 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f074:	f107 0314 	add.w	r3, r7, #20
 800f078:	4618      	mov	r0, r3
 800f07a:	f000 ff03 	bl	800fe84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f07e:	2301      	movs	r3, #1
 800f080:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f082:	f001 fc17 	bl	80108b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f086:	f000 fcb3 	bl	800f9f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f08a:	f001 fbe3 	bl	8010854 <vPortEnterCritical>
 800f08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f094:	b25b      	sxtb	r3, r3
 800f096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f09a:	d103      	bne.n	800f0a4 <xQueueGenericSend+0x16c>
 800f09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f09e:	2200      	movs	r2, #0
 800f0a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0aa:	b25b      	sxtb	r3, r3
 800f0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b0:	d103      	bne.n	800f0ba <xQueueGenericSend+0x182>
 800f0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f0ba:	f001 fbfb 	bl	80108b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f0be:	1d3a      	adds	r2, r7, #4
 800f0c0:	f107 0314 	add.w	r3, r7, #20
 800f0c4:	4611      	mov	r1, r2
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f000 fef2 	bl	800feb0 <xTaskCheckForTimeOut>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d124      	bne.n	800f11c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f0d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0d4:	f000 fa24 	bl	800f520 <prvIsQueueFull>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d018      	beq.n	800f110 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e0:	3310      	adds	r3, #16
 800f0e2:	687a      	ldr	r2, [r7, #4]
 800f0e4:	4611      	mov	r1, r2
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f000 fe46 	bl	800fd78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f0ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0ee:	f000 f9af 	bl	800f450 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f0f2:	f000 fc8b 	bl	800fa0c <xTaskResumeAll>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	f47f af7c 	bne.w	800eff6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f0fe:	4b0c      	ldr	r3, [pc, #48]	; (800f130 <xQueueGenericSend+0x1f8>)
 800f100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f104:	601a      	str	r2, [r3, #0]
 800f106:	f3bf 8f4f 	dsb	sy
 800f10a:	f3bf 8f6f 	isb	sy
 800f10e:	e772      	b.n	800eff6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f112:	f000 f99d 	bl	800f450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f116:	f000 fc79 	bl	800fa0c <xTaskResumeAll>
 800f11a:	e76c      	b.n	800eff6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f11c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f11e:	f000 f997 	bl	800f450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f122:	f000 fc73 	bl	800fa0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f126:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3738      	adds	r7, #56	; 0x38
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	e000ed04 	.word	0xe000ed04

0800f134 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b08e      	sub	sp, #56	; 0x38
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f13e:	2300      	movs	r3, #0
 800f140:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f146:	2300      	movs	r3, #0
 800f148:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d10a      	bne.n	800f166 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f154:	f383 8811 	msr	BASEPRI, r3
 800f158:	f3bf 8f6f 	isb	sy
 800f15c:	f3bf 8f4f 	dsb	sy
 800f160:	623b      	str	r3, [r7, #32]
}
 800f162:	bf00      	nop
 800f164:	e7fe      	b.n	800f164 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00a      	beq.n	800f184 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f172:	f383 8811 	msr	BASEPRI, r3
 800f176:	f3bf 8f6f 	isb	sy
 800f17a:	f3bf 8f4f 	dsb	sy
 800f17e:	61fb      	str	r3, [r7, #28]
}
 800f180:	bf00      	nop
 800f182:	e7fe      	b.n	800f182 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f184:	f001 f814 	bl	80101b0 <xTaskGetSchedulerState>
 800f188:	4603      	mov	r3, r0
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d102      	bne.n	800f194 <xQueueSemaphoreTake+0x60>
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d101      	bne.n	800f198 <xQueueSemaphoreTake+0x64>
 800f194:	2301      	movs	r3, #1
 800f196:	e000      	b.n	800f19a <xQueueSemaphoreTake+0x66>
 800f198:	2300      	movs	r3, #0
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d10a      	bne.n	800f1b4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a2:	f383 8811 	msr	BASEPRI, r3
 800f1a6:	f3bf 8f6f 	isb	sy
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	61bb      	str	r3, [r7, #24]
}
 800f1b0:	bf00      	nop
 800f1b2:	e7fe      	b.n	800f1b2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f1b4:	f001 fb4e 	bl	8010854 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d024      	beq.n	800f20e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c6:	1e5a      	subs	r2, r3, #1
 800f1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d104      	bne.n	800f1de <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f1d4:	f001 f994 	bl	8010500 <pvTaskIncrementMutexHeldCount>
 800f1d8:	4602      	mov	r2, r0
 800f1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1dc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e0:	691b      	ldr	r3, [r3, #16]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d00f      	beq.n	800f206 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e8:	3310      	adds	r3, #16
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f000 fde8 	bl	800fdc0 <xTaskRemoveFromEventList>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d007      	beq.n	800f206 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f1f6:	4b54      	ldr	r3, [pc, #336]	; (800f348 <xQueueSemaphoreTake+0x214>)
 800f1f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1fc:	601a      	str	r2, [r3, #0]
 800f1fe:	f3bf 8f4f 	dsb	sy
 800f202:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f206:	f001 fb55 	bl	80108b4 <vPortExitCritical>
				return pdPASS;
 800f20a:	2301      	movs	r3, #1
 800f20c:	e097      	b.n	800f33e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d111      	bne.n	800f238 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f216:	2b00      	cmp	r3, #0
 800f218:	d00a      	beq.n	800f230 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f21e:	f383 8811 	msr	BASEPRI, r3
 800f222:	f3bf 8f6f 	isb	sy
 800f226:	f3bf 8f4f 	dsb	sy
 800f22a:	617b      	str	r3, [r7, #20]
}
 800f22c:	bf00      	nop
 800f22e:	e7fe      	b.n	800f22e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f230:	f001 fb40 	bl	80108b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f234:	2300      	movs	r3, #0
 800f236:	e082      	b.n	800f33e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d106      	bne.n	800f24c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f23e:	f107 030c 	add.w	r3, r7, #12
 800f242:	4618      	mov	r0, r3
 800f244:	f000 fe1e 	bl	800fe84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f248:	2301      	movs	r3, #1
 800f24a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f24c:	f001 fb32 	bl	80108b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f250:	f000 fbce 	bl	800f9f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f254:	f001 fafe 	bl	8010854 <vPortEnterCritical>
 800f258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f25e:	b25b      	sxtb	r3, r3
 800f260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f264:	d103      	bne.n	800f26e <xQueueSemaphoreTake+0x13a>
 800f266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f268:	2200      	movs	r2, #0
 800f26a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f274:	b25b      	sxtb	r3, r3
 800f276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f27a:	d103      	bne.n	800f284 <xQueueSemaphoreTake+0x150>
 800f27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27e:	2200      	movs	r2, #0
 800f280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f284:	f001 fb16 	bl	80108b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f288:	463a      	mov	r2, r7
 800f28a:	f107 030c 	add.w	r3, r7, #12
 800f28e:	4611      	mov	r1, r2
 800f290:	4618      	mov	r0, r3
 800f292:	f000 fe0d 	bl	800feb0 <xTaskCheckForTimeOut>
 800f296:	4603      	mov	r3, r0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d132      	bne.n	800f302 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f29c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f29e:	f000 f929 	bl	800f4f4 <prvIsQueueEmpty>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d026      	beq.n	800f2f6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d109      	bne.n	800f2c4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f2b0:	f001 fad0 	bl	8010854 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b6:	689b      	ldr	r3, [r3, #8]
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f000 ff97 	bl	80101ec <xTaskPriorityInherit>
 800f2be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f2c0:	f001 faf8 	bl	80108b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c6:	3324      	adds	r3, #36	; 0x24
 800f2c8:	683a      	ldr	r2, [r7, #0]
 800f2ca:	4611      	mov	r1, r2
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f000 fd53 	bl	800fd78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f2d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2d4:	f000 f8bc 	bl	800f450 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f2d8:	f000 fb98 	bl	800fa0c <xTaskResumeAll>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	f47f af68 	bne.w	800f1b4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f2e4:	4b18      	ldr	r3, [pc, #96]	; (800f348 <xQueueSemaphoreTake+0x214>)
 800f2e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2ea:	601a      	str	r2, [r3, #0]
 800f2ec:	f3bf 8f4f 	dsb	sy
 800f2f0:	f3bf 8f6f 	isb	sy
 800f2f4:	e75e      	b.n	800f1b4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f2f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2f8:	f000 f8aa 	bl	800f450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f2fc:	f000 fb86 	bl	800fa0c <xTaskResumeAll>
 800f300:	e758      	b.n	800f1b4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f304:	f000 f8a4 	bl	800f450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f308:	f000 fb80 	bl	800fa0c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f30c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f30e:	f000 f8f1 	bl	800f4f4 <prvIsQueueEmpty>
 800f312:	4603      	mov	r3, r0
 800f314:	2b00      	cmp	r3, #0
 800f316:	f43f af4d 	beq.w	800f1b4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d00d      	beq.n	800f33c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f320:	f001 fa98 	bl	8010854 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f324:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f326:	f000 f811 	bl	800f34c <prvGetDisinheritPriorityAfterTimeout>
 800f32a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32e:	689b      	ldr	r3, [r3, #8]
 800f330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f332:	4618      	mov	r0, r3
 800f334:	f001 f856 	bl	80103e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f338:	f001 fabc 	bl	80108b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f33c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3738      	adds	r7, #56	; 0x38
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}
 800f346:	bf00      	nop
 800f348:	e000ed04 	.word	0xe000ed04

0800f34c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f34c:	b480      	push	{r7}
 800f34e:	b085      	sub	sp, #20
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d006      	beq.n	800f36a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	f1c3 0307 	rsb	r3, r3, #7
 800f366:	60fb      	str	r3, [r7, #12]
 800f368:	e001      	b.n	800f36e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f36a:	2300      	movs	r3, #0
 800f36c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f36e:	68fb      	ldr	r3, [r7, #12]
	}
 800f370:	4618      	mov	r0, r3
 800f372:	3714      	adds	r7, #20
 800f374:	46bd      	mov	sp, r7
 800f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37a:	4770      	bx	lr

0800f37c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b086      	sub	sp, #24
 800f380:	af00      	add	r7, sp, #0
 800f382:	60f8      	str	r0, [r7, #12]
 800f384:	60b9      	str	r1, [r7, #8]
 800f386:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f388:	2300      	movs	r3, #0
 800f38a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f390:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f396:	2b00      	cmp	r3, #0
 800f398:	d10d      	bne.n	800f3b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d14d      	bne.n	800f43e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	689b      	ldr	r3, [r3, #8]
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f000 ff96 	bl	80102d8 <xTaskPriorityDisinherit>
 800f3ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	609a      	str	r2, [r3, #8]
 800f3b4:	e043      	b.n	800f43e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d119      	bne.n	800f3f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	6858      	ldr	r0, [r3, #4]
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3c4:	461a      	mov	r2, r3
 800f3c6:	68b9      	ldr	r1, [r7, #8]
 800f3c8:	f001 fe33 	bl	8011032 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	685a      	ldr	r2, [r3, #4]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d4:	441a      	add	r2, r3
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	685a      	ldr	r2, [r3, #4]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	689b      	ldr	r3, [r3, #8]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d32b      	bcc.n	800f43e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	605a      	str	r2, [r3, #4]
 800f3ee:	e026      	b.n	800f43e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	68d8      	ldr	r0, [r3, #12]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3f8:	461a      	mov	r2, r3
 800f3fa:	68b9      	ldr	r1, [r7, #8]
 800f3fc:	f001 fe19 	bl	8011032 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	68da      	ldr	r2, [r3, #12]
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f408:	425b      	negs	r3, r3
 800f40a:	441a      	add	r2, r3
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	68da      	ldr	r2, [r3, #12]
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	429a      	cmp	r2, r3
 800f41a:	d207      	bcs.n	800f42c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	689a      	ldr	r2, [r3, #8]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f424:	425b      	negs	r3, r3
 800f426:	441a      	add	r2, r3
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2b02      	cmp	r3, #2
 800f430:	d105      	bne.n	800f43e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f432:	693b      	ldr	r3, [r7, #16]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d002      	beq.n	800f43e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	3b01      	subs	r3, #1
 800f43c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	1c5a      	adds	r2, r3, #1
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f446:	697b      	ldr	r3, [r7, #20]
}
 800f448:	4618      	mov	r0, r3
 800f44a:	3718      	adds	r7, #24
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}

0800f450 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b084      	sub	sp, #16
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f458:	f001 f9fc 	bl	8010854 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f462:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f464:	e011      	b.n	800f48a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d012      	beq.n	800f494 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	3324      	adds	r3, #36	; 0x24
 800f472:	4618      	mov	r0, r3
 800f474:	f000 fca4 	bl	800fdc0 <xTaskRemoveFromEventList>
 800f478:	4603      	mov	r3, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d001      	beq.n	800f482 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f47e:	f000 fd79 	bl	800ff74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f482:	7bfb      	ldrb	r3, [r7, #15]
 800f484:	3b01      	subs	r3, #1
 800f486:	b2db      	uxtb	r3, r3
 800f488:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f48a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	dce9      	bgt.n	800f466 <prvUnlockQueue+0x16>
 800f492:	e000      	b.n	800f496 <prvUnlockQueue+0x46>
					break;
 800f494:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	22ff      	movs	r2, #255	; 0xff
 800f49a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f49e:	f001 fa09 	bl	80108b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f4a2:	f001 f9d7 	bl	8010854 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4ae:	e011      	b.n	800f4d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	691b      	ldr	r3, [r3, #16]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d012      	beq.n	800f4de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	3310      	adds	r3, #16
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f000 fc7f 	bl	800fdc0 <xTaskRemoveFromEventList>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d001      	beq.n	800f4cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f4c8:	f000 fd54 	bl	800ff74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f4cc:	7bbb      	ldrb	r3, [r7, #14]
 800f4ce:	3b01      	subs	r3, #1
 800f4d0:	b2db      	uxtb	r3, r3
 800f4d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	dce9      	bgt.n	800f4b0 <prvUnlockQueue+0x60>
 800f4dc:	e000      	b.n	800f4e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f4de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	22ff      	movs	r2, #255	; 0xff
 800f4e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f4e8:	f001 f9e4 	bl	80108b4 <vPortExitCritical>
}
 800f4ec:	bf00      	nop
 800f4ee:	3710      	adds	r7, #16
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}

0800f4f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b084      	sub	sp, #16
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4fc:	f001 f9aa 	bl	8010854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f504:	2b00      	cmp	r3, #0
 800f506:	d102      	bne.n	800f50e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f508:	2301      	movs	r3, #1
 800f50a:	60fb      	str	r3, [r7, #12]
 800f50c:	e001      	b.n	800f512 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f50e:	2300      	movs	r3, #0
 800f510:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f512:	f001 f9cf 	bl	80108b4 <vPortExitCritical>

	return xReturn;
 800f516:	68fb      	ldr	r3, [r7, #12]
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3710      	adds	r7, #16
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f528:	f001 f994 	bl	8010854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f534:	429a      	cmp	r2, r3
 800f536:	d102      	bne.n	800f53e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f538:	2301      	movs	r3, #1
 800f53a:	60fb      	str	r3, [r7, #12]
 800f53c:	e001      	b.n	800f542 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f53e:	2300      	movs	r3, #0
 800f540:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f542:	f001 f9b7 	bl	80108b4 <vPortExitCritical>

	return xReturn;
 800f546:	68fb      	ldr	r3, [r7, #12]
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3710      	adds	r7, #16
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f550:	b580      	push	{r7, lr}
 800f552:	b08e      	sub	sp, #56	; 0x38
 800f554:	af04      	add	r7, sp, #16
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	60b9      	str	r1, [r7, #8]
 800f55a:	607a      	str	r2, [r7, #4]
 800f55c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f560:	2b00      	cmp	r3, #0
 800f562:	d10a      	bne.n	800f57a <xTaskCreateStatic+0x2a>
	__asm volatile
 800f564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f568:	f383 8811 	msr	BASEPRI, r3
 800f56c:	f3bf 8f6f 	isb	sy
 800f570:	f3bf 8f4f 	dsb	sy
 800f574:	623b      	str	r3, [r7, #32]
}
 800f576:	bf00      	nop
 800f578:	e7fe      	b.n	800f578 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d10a      	bne.n	800f596 <xTaskCreateStatic+0x46>
	__asm volatile
 800f580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f584:	f383 8811 	msr	BASEPRI, r3
 800f588:	f3bf 8f6f 	isb	sy
 800f58c:	f3bf 8f4f 	dsb	sy
 800f590:	61fb      	str	r3, [r7, #28]
}
 800f592:	bf00      	nop
 800f594:	e7fe      	b.n	800f594 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f596:	23b4      	movs	r3, #180	; 0xb4
 800f598:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	2bb4      	cmp	r3, #180	; 0xb4
 800f59e:	d00a      	beq.n	800f5b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800f5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a4:	f383 8811 	msr	BASEPRI, r3
 800f5a8:	f3bf 8f6f 	isb	sy
 800f5ac:	f3bf 8f4f 	dsb	sy
 800f5b0:	61bb      	str	r3, [r7, #24]
}
 800f5b2:	bf00      	nop
 800f5b4:	e7fe      	b.n	800f5b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f5b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d01e      	beq.n	800f5fc <xTaskCreateStatic+0xac>
 800f5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d01b      	beq.n	800f5fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f5cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d0:	2202      	movs	r2, #2
 800f5d2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	9303      	str	r3, [sp, #12]
 800f5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5dc:	9302      	str	r3, [sp, #8]
 800f5de:	f107 0314 	add.w	r3, r7, #20
 800f5e2:	9301      	str	r3, [sp, #4]
 800f5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e6:	9300      	str	r3, [sp, #0]
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	687a      	ldr	r2, [r7, #4]
 800f5ec:	68b9      	ldr	r1, [r7, #8]
 800f5ee:	68f8      	ldr	r0, [r7, #12]
 800f5f0:	f000 f850 	bl	800f694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f5f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5f6:	f000 f8f3 	bl	800f7e0 <prvAddNewTaskToReadyList>
 800f5fa:	e001      	b.n	800f600 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f600:	697b      	ldr	r3, [r7, #20]
	}
 800f602:	4618      	mov	r0, r3
 800f604:	3728      	adds	r7, #40	; 0x28
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b08c      	sub	sp, #48	; 0x30
 800f60e:	af04      	add	r7, sp, #16
 800f610:	60f8      	str	r0, [r7, #12]
 800f612:	60b9      	str	r1, [r7, #8]
 800f614:	603b      	str	r3, [r7, #0]
 800f616:	4613      	mov	r3, r2
 800f618:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f61a:	88fb      	ldrh	r3, [r7, #6]
 800f61c:	009b      	lsls	r3, r3, #2
 800f61e:	4618      	mov	r0, r3
 800f620:	f001 f9fa 	bl	8010a18 <pvPortMalloc>
 800f624:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d00e      	beq.n	800f64a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f62c:	20b4      	movs	r0, #180	; 0xb4
 800f62e:	f001 f9f3 	bl	8010a18 <pvPortMalloc>
 800f632:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d003      	beq.n	800f642 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f63a:	69fb      	ldr	r3, [r7, #28]
 800f63c:	697a      	ldr	r2, [r7, #20]
 800f63e:	631a      	str	r2, [r3, #48]	; 0x30
 800f640:	e005      	b.n	800f64e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f642:	6978      	ldr	r0, [r7, #20]
 800f644:	f001 fab4 	bl	8010bb0 <vPortFree>
 800f648:	e001      	b.n	800f64e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f64a:	2300      	movs	r3, #0
 800f64c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f64e:	69fb      	ldr	r3, [r7, #28]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d017      	beq.n	800f684 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	2200      	movs	r2, #0
 800f658:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f65c:	88fa      	ldrh	r2, [r7, #6]
 800f65e:	2300      	movs	r3, #0
 800f660:	9303      	str	r3, [sp, #12]
 800f662:	69fb      	ldr	r3, [r7, #28]
 800f664:	9302      	str	r3, [sp, #8]
 800f666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f668:	9301      	str	r3, [sp, #4]
 800f66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f66c:	9300      	str	r3, [sp, #0]
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	68b9      	ldr	r1, [r7, #8]
 800f672:	68f8      	ldr	r0, [r7, #12]
 800f674:	f000 f80e 	bl	800f694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f678:	69f8      	ldr	r0, [r7, #28]
 800f67a:	f000 f8b1 	bl	800f7e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f67e:	2301      	movs	r3, #1
 800f680:	61bb      	str	r3, [r7, #24]
 800f682:	e002      	b.n	800f68a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f684:	f04f 33ff 	mov.w	r3, #4294967295
 800f688:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f68a:	69bb      	ldr	r3, [r7, #24]
	}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3720      	adds	r7, #32
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b088      	sub	sp, #32
 800f698:	af00      	add	r7, sp, #0
 800f69a:	60f8      	str	r0, [r7, #12]
 800f69c:	60b9      	str	r1, [r7, #8]
 800f69e:	607a      	str	r2, [r7, #4]
 800f6a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	009b      	lsls	r3, r3, #2
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	21a5      	movs	r1, #165	; 0xa5
 800f6ae:	f001 fcce 	bl	801104e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f6bc:	3b01      	subs	r3, #1
 800f6be:	009b      	lsls	r3, r3, #2
 800f6c0:	4413      	add	r3, r2
 800f6c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f6c4:	69bb      	ldr	r3, [r7, #24]
 800f6c6:	f023 0307 	bic.w	r3, r3, #7
 800f6ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f6cc:	69bb      	ldr	r3, [r7, #24]
 800f6ce:	f003 0307 	and.w	r3, r3, #7
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d00a      	beq.n	800f6ec <prvInitialiseNewTask+0x58>
	__asm volatile
 800f6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6da:	f383 8811 	msr	BASEPRI, r3
 800f6de:	f3bf 8f6f 	isb	sy
 800f6e2:	f3bf 8f4f 	dsb	sy
 800f6e6:	617b      	str	r3, [r7, #20]
}
 800f6e8:	bf00      	nop
 800f6ea:	e7fe      	b.n	800f6ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d01f      	beq.n	800f732 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	61fb      	str	r3, [r7, #28]
 800f6f6:	e012      	b.n	800f71e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f6f8:	68ba      	ldr	r2, [r7, #8]
 800f6fa:	69fb      	ldr	r3, [r7, #28]
 800f6fc:	4413      	add	r3, r2
 800f6fe:	7819      	ldrb	r1, [r3, #0]
 800f700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f702:	69fb      	ldr	r3, [r7, #28]
 800f704:	4413      	add	r3, r2
 800f706:	3334      	adds	r3, #52	; 0x34
 800f708:	460a      	mov	r2, r1
 800f70a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f70c:	68ba      	ldr	r2, [r7, #8]
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	4413      	add	r3, r2
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d006      	beq.n	800f726 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f718:	69fb      	ldr	r3, [r7, #28]
 800f71a:	3301      	adds	r3, #1
 800f71c:	61fb      	str	r3, [r7, #28]
 800f71e:	69fb      	ldr	r3, [r7, #28]
 800f720:	2b0f      	cmp	r3, #15
 800f722:	d9e9      	bls.n	800f6f8 <prvInitialiseNewTask+0x64>
 800f724:	e000      	b.n	800f728 <prvInitialiseNewTask+0x94>
			{
				break;
 800f726:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72a:	2200      	movs	r2, #0
 800f72c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f730:	e003      	b.n	800f73a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f734:	2200      	movs	r2, #0
 800f736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f73c:	2b06      	cmp	r3, #6
 800f73e:	d901      	bls.n	800f744 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f740:	2306      	movs	r3, #6
 800f742:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f748:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f74e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f752:	2200      	movs	r2, #0
 800f754:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f758:	3304      	adds	r3, #4
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7ff fa64 	bl	800ec28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f762:	3318      	adds	r3, #24
 800f764:	4618      	mov	r0, r3
 800f766:	f7ff fa5f 	bl	800ec28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f76e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f772:	f1c3 0207 	rsb	r2, r3, #7
 800f776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f778:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f77c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f77e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f782:	2200      	movs	r2, #0
 800f784:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f78a:	2200      	movs	r2, #0
 800f78c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f792:	334c      	adds	r3, #76	; 0x4c
 800f794:	2260      	movs	r2, #96	; 0x60
 800f796:	2100      	movs	r1, #0
 800f798:	4618      	mov	r0, r3
 800f79a:	f001 fc58 	bl	801104e <memset>
 800f79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a0:	4a0c      	ldr	r2, [pc, #48]	; (800f7d4 <prvInitialiseNewTask+0x140>)
 800f7a2:	651a      	str	r2, [r3, #80]	; 0x50
 800f7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a6:	4a0c      	ldr	r2, [pc, #48]	; (800f7d8 <prvInitialiseNewTask+0x144>)
 800f7a8:	655a      	str	r2, [r3, #84]	; 0x54
 800f7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ac:	4a0b      	ldr	r2, [pc, #44]	; (800f7dc <prvInitialiseNewTask+0x148>)
 800f7ae:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f7b0:	683a      	ldr	r2, [r7, #0]
 800f7b2:	68f9      	ldr	r1, [r7, #12]
 800f7b4:	69b8      	ldr	r0, [r7, #24]
 800f7b6:	f000 ff1d 	bl	80105f4 <pxPortInitialiseStack>
 800f7ba:	4602      	mov	r2, r0
 800f7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d002      	beq.n	800f7cc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7cc:	bf00      	nop
 800f7ce:	3720      	adds	r7, #32
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}
 800f7d4:	08016e8c 	.word	0x08016e8c
 800f7d8:	08016eac 	.word	0x08016eac
 800f7dc:	08016e6c 	.word	0x08016e6c

0800f7e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f7e8:	f001 f834 	bl	8010854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f7ec:	4b2a      	ldr	r3, [pc, #168]	; (800f898 <prvAddNewTaskToReadyList+0xb8>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	4a29      	ldr	r2, [pc, #164]	; (800f898 <prvAddNewTaskToReadyList+0xb8>)
 800f7f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f7f6:	4b29      	ldr	r3, [pc, #164]	; (800f89c <prvAddNewTaskToReadyList+0xbc>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d109      	bne.n	800f812 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f7fe:	4a27      	ldr	r2, [pc, #156]	; (800f89c <prvAddNewTaskToReadyList+0xbc>)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f804:	4b24      	ldr	r3, [pc, #144]	; (800f898 <prvAddNewTaskToReadyList+0xb8>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	2b01      	cmp	r3, #1
 800f80a:	d110      	bne.n	800f82e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f80c:	f000 fbd6 	bl	800ffbc <prvInitialiseTaskLists>
 800f810:	e00d      	b.n	800f82e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f812:	4b23      	ldr	r3, [pc, #140]	; (800f8a0 <prvAddNewTaskToReadyList+0xc0>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d109      	bne.n	800f82e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f81a:	4b20      	ldr	r3, [pc, #128]	; (800f89c <prvAddNewTaskToReadyList+0xbc>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f824:	429a      	cmp	r2, r3
 800f826:	d802      	bhi.n	800f82e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f828:	4a1c      	ldr	r2, [pc, #112]	; (800f89c <prvAddNewTaskToReadyList+0xbc>)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f82e:	4b1d      	ldr	r3, [pc, #116]	; (800f8a4 <prvAddNewTaskToReadyList+0xc4>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	3301      	adds	r3, #1
 800f834:	4a1b      	ldr	r2, [pc, #108]	; (800f8a4 <prvAddNewTaskToReadyList+0xc4>)
 800f836:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f83c:	2201      	movs	r2, #1
 800f83e:	409a      	lsls	r2, r3
 800f840:	4b19      	ldr	r3, [pc, #100]	; (800f8a8 <prvAddNewTaskToReadyList+0xc8>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	4313      	orrs	r3, r2
 800f846:	4a18      	ldr	r2, [pc, #96]	; (800f8a8 <prvAddNewTaskToReadyList+0xc8>)
 800f848:	6013      	str	r3, [r2, #0]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f84e:	4613      	mov	r3, r2
 800f850:	009b      	lsls	r3, r3, #2
 800f852:	4413      	add	r3, r2
 800f854:	009b      	lsls	r3, r3, #2
 800f856:	4a15      	ldr	r2, [pc, #84]	; (800f8ac <prvAddNewTaskToReadyList+0xcc>)
 800f858:	441a      	add	r2, r3
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	3304      	adds	r3, #4
 800f85e:	4619      	mov	r1, r3
 800f860:	4610      	mov	r0, r2
 800f862:	f7ff f9ee 	bl	800ec42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f866:	f001 f825 	bl	80108b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f86a:	4b0d      	ldr	r3, [pc, #52]	; (800f8a0 <prvAddNewTaskToReadyList+0xc0>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d00e      	beq.n	800f890 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f872:	4b0a      	ldr	r3, [pc, #40]	; (800f89c <prvAddNewTaskToReadyList+0xbc>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d207      	bcs.n	800f890 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f880:	4b0b      	ldr	r3, [pc, #44]	; (800f8b0 <prvAddNewTaskToReadyList+0xd0>)
 800f882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f886:	601a      	str	r2, [r3, #0]
 800f888:	f3bf 8f4f 	dsb	sy
 800f88c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f890:	bf00      	nop
 800f892:	3708      	adds	r7, #8
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}
 800f898:	200008d4 	.word	0x200008d4
 800f89c:	200007d4 	.word	0x200007d4
 800f8a0:	200008e0 	.word	0x200008e0
 800f8a4:	200008f0 	.word	0x200008f0
 800f8a8:	200008dc 	.word	0x200008dc
 800f8ac:	200007d8 	.word	0x200007d8
 800f8b0:	e000ed04 	.word	0xe000ed04

0800f8b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b084      	sub	sp, #16
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d017      	beq.n	800f8f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f8c6:	4b13      	ldr	r3, [pc, #76]	; (800f914 <vTaskDelay+0x60>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d00a      	beq.n	800f8e4 <vTaskDelay+0x30>
	__asm volatile
 800f8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d2:	f383 8811 	msr	BASEPRI, r3
 800f8d6:	f3bf 8f6f 	isb	sy
 800f8da:	f3bf 8f4f 	dsb	sy
 800f8de:	60bb      	str	r3, [r7, #8]
}
 800f8e0:	bf00      	nop
 800f8e2:	e7fe      	b.n	800f8e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f8e4:	f000 f884 	bl	800f9f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f8e8:	2100      	movs	r1, #0
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f000 fe1c 	bl	8010528 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f8f0:	f000 f88c 	bl	800fa0c <xTaskResumeAll>
 800f8f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d107      	bne.n	800f90c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f8fc:	4b06      	ldr	r3, [pc, #24]	; (800f918 <vTaskDelay+0x64>)
 800f8fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f902:	601a      	str	r2, [r3, #0]
 800f904:	f3bf 8f4f 	dsb	sy
 800f908:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f90c:	bf00      	nop
 800f90e:	3710      	adds	r7, #16
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}
 800f914:	200008fc 	.word	0x200008fc
 800f918:	e000ed04 	.word	0xe000ed04

0800f91c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b08a      	sub	sp, #40	; 0x28
 800f920:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f922:	2300      	movs	r3, #0
 800f924:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f926:	2300      	movs	r3, #0
 800f928:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f92a:	463a      	mov	r2, r7
 800f92c:	1d39      	adds	r1, r7, #4
 800f92e:	f107 0308 	add.w	r3, r7, #8
 800f932:	4618      	mov	r0, r3
 800f934:	f7f3 fb48 	bl	8002fc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f938:	6839      	ldr	r1, [r7, #0]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	68ba      	ldr	r2, [r7, #8]
 800f93e:	9202      	str	r2, [sp, #8]
 800f940:	9301      	str	r3, [sp, #4]
 800f942:	2300      	movs	r3, #0
 800f944:	9300      	str	r3, [sp, #0]
 800f946:	2300      	movs	r3, #0
 800f948:	460a      	mov	r2, r1
 800f94a:	4921      	ldr	r1, [pc, #132]	; (800f9d0 <vTaskStartScheduler+0xb4>)
 800f94c:	4821      	ldr	r0, [pc, #132]	; (800f9d4 <vTaskStartScheduler+0xb8>)
 800f94e:	f7ff fdff 	bl	800f550 <xTaskCreateStatic>
 800f952:	4603      	mov	r3, r0
 800f954:	4a20      	ldr	r2, [pc, #128]	; (800f9d8 <vTaskStartScheduler+0xbc>)
 800f956:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f958:	4b1f      	ldr	r3, [pc, #124]	; (800f9d8 <vTaskStartScheduler+0xbc>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d002      	beq.n	800f966 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f960:	2301      	movs	r3, #1
 800f962:	617b      	str	r3, [r7, #20]
 800f964:	e001      	b.n	800f96a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f966:	2300      	movs	r3, #0
 800f968:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	d11b      	bne.n	800f9a8 <vTaskStartScheduler+0x8c>
	__asm volatile
 800f970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f974:	f383 8811 	msr	BASEPRI, r3
 800f978:	f3bf 8f6f 	isb	sy
 800f97c:	f3bf 8f4f 	dsb	sy
 800f980:	613b      	str	r3, [r7, #16]
}
 800f982:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f984:	4b15      	ldr	r3, [pc, #84]	; (800f9dc <vTaskStartScheduler+0xc0>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	334c      	adds	r3, #76	; 0x4c
 800f98a:	4a15      	ldr	r2, [pc, #84]	; (800f9e0 <vTaskStartScheduler+0xc4>)
 800f98c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f98e:	4b15      	ldr	r3, [pc, #84]	; (800f9e4 <vTaskStartScheduler+0xc8>)
 800f990:	f04f 32ff 	mov.w	r2, #4294967295
 800f994:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f996:	4b14      	ldr	r3, [pc, #80]	; (800f9e8 <vTaskStartScheduler+0xcc>)
 800f998:	2201      	movs	r2, #1
 800f99a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f99c:	4b13      	ldr	r3, [pc, #76]	; (800f9ec <vTaskStartScheduler+0xd0>)
 800f99e:	2200      	movs	r2, #0
 800f9a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f9a2:	f000 feb5 	bl	8010710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f9a6:	e00e      	b.n	800f9c6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9ae:	d10a      	bne.n	800f9c6 <vTaskStartScheduler+0xaa>
	__asm volatile
 800f9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b4:	f383 8811 	msr	BASEPRI, r3
 800f9b8:	f3bf 8f6f 	isb	sy
 800f9bc:	f3bf 8f4f 	dsb	sy
 800f9c0:	60fb      	str	r3, [r7, #12]
}
 800f9c2:	bf00      	nop
 800f9c4:	e7fe      	b.n	800f9c4 <vTaskStartScheduler+0xa8>
}
 800f9c6:	bf00      	nop
 800f9c8:	3718      	adds	r7, #24
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}
 800f9ce:	bf00      	nop
 800f9d0:	08016e44 	.word	0x08016e44
 800f9d4:	0800ff8d 	.word	0x0800ff8d
 800f9d8:	200008f8 	.word	0x200008f8
 800f9dc:	200007d4 	.word	0x200007d4
 800f9e0:	200002cc 	.word	0x200002cc
 800f9e4:	200008f4 	.word	0x200008f4
 800f9e8:	200008e0 	.word	0x200008e0
 800f9ec:	200008d8 	.word	0x200008d8

0800f9f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f9f4:	4b04      	ldr	r3, [pc, #16]	; (800fa08 <vTaskSuspendAll+0x18>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	4a03      	ldr	r2, [pc, #12]	; (800fa08 <vTaskSuspendAll+0x18>)
 800f9fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f9fe:	bf00      	nop
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr
 800fa08:	200008fc 	.word	0x200008fc

0800fa0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b084      	sub	sp, #16
 800fa10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fa12:	2300      	movs	r3, #0
 800fa14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fa16:	2300      	movs	r3, #0
 800fa18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fa1a:	4b41      	ldr	r3, [pc, #260]	; (800fb20 <xTaskResumeAll+0x114>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d10a      	bne.n	800fa38 <xTaskResumeAll+0x2c>
	__asm volatile
 800fa22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa26:	f383 8811 	msr	BASEPRI, r3
 800fa2a:	f3bf 8f6f 	isb	sy
 800fa2e:	f3bf 8f4f 	dsb	sy
 800fa32:	603b      	str	r3, [r7, #0]
}
 800fa34:	bf00      	nop
 800fa36:	e7fe      	b.n	800fa36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fa38:	f000 ff0c 	bl	8010854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fa3c:	4b38      	ldr	r3, [pc, #224]	; (800fb20 <xTaskResumeAll+0x114>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	3b01      	subs	r3, #1
 800fa42:	4a37      	ldr	r2, [pc, #220]	; (800fb20 <xTaskResumeAll+0x114>)
 800fa44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa46:	4b36      	ldr	r3, [pc, #216]	; (800fb20 <xTaskResumeAll+0x114>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d161      	bne.n	800fb12 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fa4e:	4b35      	ldr	r3, [pc, #212]	; (800fb24 <xTaskResumeAll+0x118>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d05d      	beq.n	800fb12 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa56:	e02e      	b.n	800fab6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa58:	4b33      	ldr	r3, [pc, #204]	; (800fb28 <xTaskResumeAll+0x11c>)
 800fa5a:	68db      	ldr	r3, [r3, #12]
 800fa5c:	68db      	ldr	r3, [r3, #12]
 800fa5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	3318      	adds	r3, #24
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7ff f949 	bl	800ecfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	3304      	adds	r3, #4
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7ff f944 	bl	800ecfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa78:	2201      	movs	r2, #1
 800fa7a:	409a      	lsls	r2, r3
 800fa7c:	4b2b      	ldr	r3, [pc, #172]	; (800fb2c <xTaskResumeAll+0x120>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4313      	orrs	r3, r2
 800fa82:	4a2a      	ldr	r2, [pc, #168]	; (800fb2c <xTaskResumeAll+0x120>)
 800fa84:	6013      	str	r3, [r2, #0]
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa8a:	4613      	mov	r3, r2
 800fa8c:	009b      	lsls	r3, r3, #2
 800fa8e:	4413      	add	r3, r2
 800fa90:	009b      	lsls	r3, r3, #2
 800fa92:	4a27      	ldr	r2, [pc, #156]	; (800fb30 <xTaskResumeAll+0x124>)
 800fa94:	441a      	add	r2, r3
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	3304      	adds	r3, #4
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	4610      	mov	r0, r2
 800fa9e:	f7ff f8d0 	bl	800ec42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faa6:	4b23      	ldr	r3, [pc, #140]	; (800fb34 <xTaskResumeAll+0x128>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faac:	429a      	cmp	r2, r3
 800faae:	d302      	bcc.n	800fab6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800fab0:	4b21      	ldr	r3, [pc, #132]	; (800fb38 <xTaskResumeAll+0x12c>)
 800fab2:	2201      	movs	r2, #1
 800fab4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fab6:	4b1c      	ldr	r3, [pc, #112]	; (800fb28 <xTaskResumeAll+0x11c>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d1cc      	bne.n	800fa58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d001      	beq.n	800fac8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fac4:	f000 fb54 	bl	8010170 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fac8:	4b1c      	ldr	r3, [pc, #112]	; (800fb3c <xTaskResumeAll+0x130>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d010      	beq.n	800faf6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fad4:	f000 f836 	bl	800fb44 <xTaskIncrementTick>
 800fad8:	4603      	mov	r3, r0
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d002      	beq.n	800fae4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800fade:	4b16      	ldr	r3, [pc, #88]	; (800fb38 <xTaskResumeAll+0x12c>)
 800fae0:	2201      	movs	r2, #1
 800fae2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	3b01      	subs	r3, #1
 800fae8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d1f1      	bne.n	800fad4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800faf0:	4b12      	ldr	r3, [pc, #72]	; (800fb3c <xTaskResumeAll+0x130>)
 800faf2:	2200      	movs	r2, #0
 800faf4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800faf6:	4b10      	ldr	r3, [pc, #64]	; (800fb38 <xTaskResumeAll+0x12c>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d009      	beq.n	800fb12 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fafe:	2301      	movs	r3, #1
 800fb00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fb02:	4b0f      	ldr	r3, [pc, #60]	; (800fb40 <xTaskResumeAll+0x134>)
 800fb04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb08:	601a      	str	r2, [r3, #0]
 800fb0a:	f3bf 8f4f 	dsb	sy
 800fb0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fb12:	f000 fecf 	bl	80108b4 <vPortExitCritical>

	return xAlreadyYielded;
 800fb16:	68bb      	ldr	r3, [r7, #8]
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3710      	adds	r7, #16
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	200008fc 	.word	0x200008fc
 800fb24:	200008d4 	.word	0x200008d4
 800fb28:	20000894 	.word	0x20000894
 800fb2c:	200008dc 	.word	0x200008dc
 800fb30:	200007d8 	.word	0x200007d8
 800fb34:	200007d4 	.word	0x200007d4
 800fb38:	200008e8 	.word	0x200008e8
 800fb3c:	200008e4 	.word	0x200008e4
 800fb40:	e000ed04 	.word	0xe000ed04

0800fb44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b086      	sub	sp, #24
 800fb48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb4e:	4b4e      	ldr	r3, [pc, #312]	; (800fc88 <xTaskIncrementTick+0x144>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	f040 808e 	bne.w	800fc74 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fb58:	4b4c      	ldr	r3, [pc, #304]	; (800fc8c <xTaskIncrementTick+0x148>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	3301      	adds	r3, #1
 800fb5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fb60:	4a4a      	ldr	r2, [pc, #296]	; (800fc8c <xTaskIncrementTick+0x148>)
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d120      	bne.n	800fbae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fb6c:	4b48      	ldr	r3, [pc, #288]	; (800fc90 <xTaskIncrementTick+0x14c>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d00a      	beq.n	800fb8c <xTaskIncrementTick+0x48>
	__asm volatile
 800fb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb7a:	f383 8811 	msr	BASEPRI, r3
 800fb7e:	f3bf 8f6f 	isb	sy
 800fb82:	f3bf 8f4f 	dsb	sy
 800fb86:	603b      	str	r3, [r7, #0]
}
 800fb88:	bf00      	nop
 800fb8a:	e7fe      	b.n	800fb8a <xTaskIncrementTick+0x46>
 800fb8c:	4b40      	ldr	r3, [pc, #256]	; (800fc90 <xTaskIncrementTick+0x14c>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	60fb      	str	r3, [r7, #12]
 800fb92:	4b40      	ldr	r3, [pc, #256]	; (800fc94 <xTaskIncrementTick+0x150>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	4a3e      	ldr	r2, [pc, #248]	; (800fc90 <xTaskIncrementTick+0x14c>)
 800fb98:	6013      	str	r3, [r2, #0]
 800fb9a:	4a3e      	ldr	r2, [pc, #248]	; (800fc94 <xTaskIncrementTick+0x150>)
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	6013      	str	r3, [r2, #0]
 800fba0:	4b3d      	ldr	r3, [pc, #244]	; (800fc98 <xTaskIncrementTick+0x154>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	3301      	adds	r3, #1
 800fba6:	4a3c      	ldr	r2, [pc, #240]	; (800fc98 <xTaskIncrementTick+0x154>)
 800fba8:	6013      	str	r3, [r2, #0]
 800fbaa:	f000 fae1 	bl	8010170 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fbae:	4b3b      	ldr	r3, [pc, #236]	; (800fc9c <xTaskIncrementTick+0x158>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	693a      	ldr	r2, [r7, #16]
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	d348      	bcc.n	800fc4a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbb8:	4b35      	ldr	r3, [pc, #212]	; (800fc90 <xTaskIncrementTick+0x14c>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d104      	bne.n	800fbcc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbc2:	4b36      	ldr	r3, [pc, #216]	; (800fc9c <xTaskIncrementTick+0x158>)
 800fbc4:	f04f 32ff 	mov.w	r2, #4294967295
 800fbc8:	601a      	str	r2, [r3, #0]
					break;
 800fbca:	e03e      	b.n	800fc4a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbcc:	4b30      	ldr	r3, [pc, #192]	; (800fc90 <xTaskIncrementTick+0x14c>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	68db      	ldr	r3, [r3, #12]
 800fbd2:	68db      	ldr	r3, [r3, #12]
 800fbd4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	685b      	ldr	r3, [r3, #4]
 800fbda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fbdc:	693a      	ldr	r2, [r7, #16]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d203      	bcs.n	800fbec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fbe4:	4a2d      	ldr	r2, [pc, #180]	; (800fc9c <xTaskIncrementTick+0x158>)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fbea:	e02e      	b.n	800fc4a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	3304      	adds	r3, #4
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7ff f883 	bl	800ecfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d004      	beq.n	800fc08 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	3318      	adds	r3, #24
 800fc02:	4618      	mov	r0, r3
 800fc04:	f7ff f87a 	bl	800ecfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc0c:	2201      	movs	r2, #1
 800fc0e:	409a      	lsls	r2, r3
 800fc10:	4b23      	ldr	r3, [pc, #140]	; (800fca0 <xTaskIncrementTick+0x15c>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	4313      	orrs	r3, r2
 800fc16:	4a22      	ldr	r2, [pc, #136]	; (800fca0 <xTaskIncrementTick+0x15c>)
 800fc18:	6013      	str	r3, [r2, #0]
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc1e:	4613      	mov	r3, r2
 800fc20:	009b      	lsls	r3, r3, #2
 800fc22:	4413      	add	r3, r2
 800fc24:	009b      	lsls	r3, r3, #2
 800fc26:	4a1f      	ldr	r2, [pc, #124]	; (800fca4 <xTaskIncrementTick+0x160>)
 800fc28:	441a      	add	r2, r3
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	3304      	adds	r3, #4
 800fc2e:	4619      	mov	r1, r3
 800fc30:	4610      	mov	r0, r2
 800fc32:	f7ff f806 	bl	800ec42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc3a:	4b1b      	ldr	r3, [pc, #108]	; (800fca8 <xTaskIncrementTick+0x164>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc40:	429a      	cmp	r2, r3
 800fc42:	d3b9      	bcc.n	800fbb8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fc44:	2301      	movs	r3, #1
 800fc46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc48:	e7b6      	b.n	800fbb8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fc4a:	4b17      	ldr	r3, [pc, #92]	; (800fca8 <xTaskIncrementTick+0x164>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc50:	4914      	ldr	r1, [pc, #80]	; (800fca4 <xTaskIncrementTick+0x160>)
 800fc52:	4613      	mov	r3, r2
 800fc54:	009b      	lsls	r3, r3, #2
 800fc56:	4413      	add	r3, r2
 800fc58:	009b      	lsls	r3, r3, #2
 800fc5a:	440b      	add	r3, r1
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	2b01      	cmp	r3, #1
 800fc60:	d901      	bls.n	800fc66 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800fc62:	2301      	movs	r3, #1
 800fc64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fc66:	4b11      	ldr	r3, [pc, #68]	; (800fcac <xTaskIncrementTick+0x168>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d007      	beq.n	800fc7e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800fc6e:	2301      	movs	r3, #1
 800fc70:	617b      	str	r3, [r7, #20]
 800fc72:	e004      	b.n	800fc7e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fc74:	4b0e      	ldr	r3, [pc, #56]	; (800fcb0 <xTaskIncrementTick+0x16c>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	3301      	adds	r3, #1
 800fc7a:	4a0d      	ldr	r2, [pc, #52]	; (800fcb0 <xTaskIncrementTick+0x16c>)
 800fc7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fc7e:	697b      	ldr	r3, [r7, #20]
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3718      	adds	r7, #24
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}
 800fc88:	200008fc 	.word	0x200008fc
 800fc8c:	200008d8 	.word	0x200008d8
 800fc90:	2000088c 	.word	0x2000088c
 800fc94:	20000890 	.word	0x20000890
 800fc98:	200008ec 	.word	0x200008ec
 800fc9c:	200008f4 	.word	0x200008f4
 800fca0:	200008dc 	.word	0x200008dc
 800fca4:	200007d8 	.word	0x200007d8
 800fca8:	200007d4 	.word	0x200007d4
 800fcac:	200008e8 	.word	0x200008e8
 800fcb0:	200008e4 	.word	0x200008e4

0800fcb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	b087      	sub	sp, #28
 800fcb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fcba:	4b29      	ldr	r3, [pc, #164]	; (800fd60 <vTaskSwitchContext+0xac>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d003      	beq.n	800fcca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fcc2:	4b28      	ldr	r3, [pc, #160]	; (800fd64 <vTaskSwitchContext+0xb0>)
 800fcc4:	2201      	movs	r2, #1
 800fcc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fcc8:	e044      	b.n	800fd54 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800fcca:	4b26      	ldr	r3, [pc, #152]	; (800fd64 <vTaskSwitchContext+0xb0>)
 800fccc:	2200      	movs	r2, #0
 800fcce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcd0:	4b25      	ldr	r3, [pc, #148]	; (800fd68 <vTaskSwitchContext+0xb4>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	fab3 f383 	clz	r3, r3
 800fcdc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fcde:	7afb      	ldrb	r3, [r7, #11]
 800fce0:	f1c3 031f 	rsb	r3, r3, #31
 800fce4:	617b      	str	r3, [r7, #20]
 800fce6:	4921      	ldr	r1, [pc, #132]	; (800fd6c <vTaskSwitchContext+0xb8>)
 800fce8:	697a      	ldr	r2, [r7, #20]
 800fcea:	4613      	mov	r3, r2
 800fcec:	009b      	lsls	r3, r3, #2
 800fcee:	4413      	add	r3, r2
 800fcf0:	009b      	lsls	r3, r3, #2
 800fcf2:	440b      	add	r3, r1
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d10a      	bne.n	800fd10 <vTaskSwitchContext+0x5c>
	__asm volatile
 800fcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcfe:	f383 8811 	msr	BASEPRI, r3
 800fd02:	f3bf 8f6f 	isb	sy
 800fd06:	f3bf 8f4f 	dsb	sy
 800fd0a:	607b      	str	r3, [r7, #4]
}
 800fd0c:	bf00      	nop
 800fd0e:	e7fe      	b.n	800fd0e <vTaskSwitchContext+0x5a>
 800fd10:	697a      	ldr	r2, [r7, #20]
 800fd12:	4613      	mov	r3, r2
 800fd14:	009b      	lsls	r3, r3, #2
 800fd16:	4413      	add	r3, r2
 800fd18:	009b      	lsls	r3, r3, #2
 800fd1a:	4a14      	ldr	r2, [pc, #80]	; (800fd6c <vTaskSwitchContext+0xb8>)
 800fd1c:	4413      	add	r3, r2
 800fd1e:	613b      	str	r3, [r7, #16]
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	685a      	ldr	r2, [r3, #4]
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	605a      	str	r2, [r3, #4]
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	685a      	ldr	r2, [r3, #4]
 800fd2e:	693b      	ldr	r3, [r7, #16]
 800fd30:	3308      	adds	r3, #8
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d104      	bne.n	800fd40 <vTaskSwitchContext+0x8c>
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	685b      	ldr	r3, [r3, #4]
 800fd3a:	685a      	ldr	r2, [r3, #4]
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	605a      	str	r2, [r3, #4]
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	68db      	ldr	r3, [r3, #12]
 800fd46:	4a0a      	ldr	r2, [pc, #40]	; (800fd70 <vTaskSwitchContext+0xbc>)
 800fd48:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fd4a:	4b09      	ldr	r3, [pc, #36]	; (800fd70 <vTaskSwitchContext+0xbc>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	334c      	adds	r3, #76	; 0x4c
 800fd50:	4a08      	ldr	r2, [pc, #32]	; (800fd74 <vTaskSwitchContext+0xc0>)
 800fd52:	6013      	str	r3, [r2, #0]
}
 800fd54:	bf00      	nop
 800fd56:	371c      	adds	r7, #28
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr
 800fd60:	200008fc 	.word	0x200008fc
 800fd64:	200008e8 	.word	0x200008e8
 800fd68:	200008dc 	.word	0x200008dc
 800fd6c:	200007d8 	.word	0x200007d8
 800fd70:	200007d4 	.word	0x200007d4
 800fd74:	200002cc 	.word	0x200002cc

0800fd78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d10a      	bne.n	800fd9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd8c:	f383 8811 	msr	BASEPRI, r3
 800fd90:	f3bf 8f6f 	isb	sy
 800fd94:	f3bf 8f4f 	dsb	sy
 800fd98:	60fb      	str	r3, [r7, #12]
}
 800fd9a:	bf00      	nop
 800fd9c:	e7fe      	b.n	800fd9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd9e:	4b07      	ldr	r3, [pc, #28]	; (800fdbc <vTaskPlaceOnEventList+0x44>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	3318      	adds	r3, #24
 800fda4:	4619      	mov	r1, r3
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f7fe ff6f 	bl	800ec8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fdac:	2101      	movs	r1, #1
 800fdae:	6838      	ldr	r0, [r7, #0]
 800fdb0:	f000 fbba 	bl	8010528 <prvAddCurrentTaskToDelayedList>
}
 800fdb4:	bf00      	nop
 800fdb6:	3710      	adds	r7, #16
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	200007d4 	.word	0x200007d4

0800fdc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b086      	sub	sp, #24
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	68db      	ldr	r3, [r3, #12]
 800fdcc:	68db      	ldr	r3, [r3, #12]
 800fdce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d10a      	bne.n	800fdec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdda:	f383 8811 	msr	BASEPRI, r3
 800fdde:	f3bf 8f6f 	isb	sy
 800fde2:	f3bf 8f4f 	dsb	sy
 800fde6:	60fb      	str	r3, [r7, #12]
}
 800fde8:	bf00      	nop
 800fdea:	e7fe      	b.n	800fdea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	3318      	adds	r3, #24
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7fe ff83 	bl	800ecfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fdf6:	4b1d      	ldr	r3, [pc, #116]	; (800fe6c <xTaskRemoveFromEventList+0xac>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d11c      	bne.n	800fe38 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fdfe:	693b      	ldr	r3, [r7, #16]
 800fe00:	3304      	adds	r3, #4
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7fe ff7a 	bl	800ecfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe0c:	2201      	movs	r2, #1
 800fe0e:	409a      	lsls	r2, r3
 800fe10:	4b17      	ldr	r3, [pc, #92]	; (800fe70 <xTaskRemoveFromEventList+0xb0>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	4313      	orrs	r3, r2
 800fe16:	4a16      	ldr	r2, [pc, #88]	; (800fe70 <xTaskRemoveFromEventList+0xb0>)
 800fe18:	6013      	str	r3, [r2, #0]
 800fe1a:	693b      	ldr	r3, [r7, #16]
 800fe1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe1e:	4613      	mov	r3, r2
 800fe20:	009b      	lsls	r3, r3, #2
 800fe22:	4413      	add	r3, r2
 800fe24:	009b      	lsls	r3, r3, #2
 800fe26:	4a13      	ldr	r2, [pc, #76]	; (800fe74 <xTaskRemoveFromEventList+0xb4>)
 800fe28:	441a      	add	r2, r3
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	3304      	adds	r3, #4
 800fe2e:	4619      	mov	r1, r3
 800fe30:	4610      	mov	r0, r2
 800fe32:	f7fe ff06 	bl	800ec42 <vListInsertEnd>
 800fe36:	e005      	b.n	800fe44 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	3318      	adds	r3, #24
 800fe3c:	4619      	mov	r1, r3
 800fe3e:	480e      	ldr	r0, [pc, #56]	; (800fe78 <xTaskRemoveFromEventList+0xb8>)
 800fe40:	f7fe feff 	bl	800ec42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe48:	4b0c      	ldr	r3, [pc, #48]	; (800fe7c <xTaskRemoveFromEventList+0xbc>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d905      	bls.n	800fe5e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fe52:	2301      	movs	r3, #1
 800fe54:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fe56:	4b0a      	ldr	r3, [pc, #40]	; (800fe80 <xTaskRemoveFromEventList+0xc0>)
 800fe58:	2201      	movs	r2, #1
 800fe5a:	601a      	str	r2, [r3, #0]
 800fe5c:	e001      	b.n	800fe62 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fe62:	697b      	ldr	r3, [r7, #20]
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3718      	adds	r7, #24
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}
 800fe6c:	200008fc 	.word	0x200008fc
 800fe70:	200008dc 	.word	0x200008dc
 800fe74:	200007d8 	.word	0x200007d8
 800fe78:	20000894 	.word	0x20000894
 800fe7c:	200007d4 	.word	0x200007d4
 800fe80:	200008e8 	.word	0x200008e8

0800fe84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fe84:	b480      	push	{r7}
 800fe86:	b083      	sub	sp, #12
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fe8c:	4b06      	ldr	r3, [pc, #24]	; (800fea8 <vTaskInternalSetTimeOutState+0x24>)
 800fe8e:	681a      	ldr	r2, [r3, #0]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fe94:	4b05      	ldr	r3, [pc, #20]	; (800feac <vTaskInternalSetTimeOutState+0x28>)
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	605a      	str	r2, [r3, #4]
}
 800fe9c:	bf00      	nop
 800fe9e:	370c      	adds	r7, #12
 800fea0:	46bd      	mov	sp, r7
 800fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea6:	4770      	bx	lr
 800fea8:	200008ec 	.word	0x200008ec
 800feac:	200008d8 	.word	0x200008d8

0800feb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b088      	sub	sp, #32
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d10a      	bne.n	800fed6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec4:	f383 8811 	msr	BASEPRI, r3
 800fec8:	f3bf 8f6f 	isb	sy
 800fecc:	f3bf 8f4f 	dsb	sy
 800fed0:	613b      	str	r3, [r7, #16]
}
 800fed2:	bf00      	nop
 800fed4:	e7fe      	b.n	800fed4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d10a      	bne.n	800fef2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee0:	f383 8811 	msr	BASEPRI, r3
 800fee4:	f3bf 8f6f 	isb	sy
 800fee8:	f3bf 8f4f 	dsb	sy
 800feec:	60fb      	str	r3, [r7, #12]
}
 800feee:	bf00      	nop
 800fef0:	e7fe      	b.n	800fef0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fef2:	f000 fcaf 	bl	8010854 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fef6:	4b1d      	ldr	r3, [pc, #116]	; (800ff6c <xTaskCheckForTimeOut+0xbc>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	69ba      	ldr	r2, [r7, #24]
 800ff02:	1ad3      	subs	r3, r2, r3
 800ff04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff0e:	d102      	bne.n	800ff16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ff10:	2300      	movs	r3, #0
 800ff12:	61fb      	str	r3, [r7, #28]
 800ff14:	e023      	b.n	800ff5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681a      	ldr	r2, [r3, #0]
 800ff1a:	4b15      	ldr	r3, [pc, #84]	; (800ff70 <xTaskCheckForTimeOut+0xc0>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d007      	beq.n	800ff32 <xTaskCheckForTimeOut+0x82>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	685b      	ldr	r3, [r3, #4]
 800ff26:	69ba      	ldr	r2, [r7, #24]
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d302      	bcc.n	800ff32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	61fb      	str	r3, [r7, #28]
 800ff30:	e015      	b.n	800ff5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	697a      	ldr	r2, [r7, #20]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d20b      	bcs.n	800ff54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	1ad2      	subs	r2, r2, r3
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f7ff ff9b 	bl	800fe84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	61fb      	str	r3, [r7, #28]
 800ff52:	e004      	b.n	800ff5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	2200      	movs	r2, #0
 800ff58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ff5e:	f000 fca9 	bl	80108b4 <vPortExitCritical>

	return xReturn;
 800ff62:	69fb      	ldr	r3, [r7, #28]
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3720      	adds	r7, #32
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	200008d8 	.word	0x200008d8
 800ff70:	200008ec 	.word	0x200008ec

0800ff74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ff74:	b480      	push	{r7}
 800ff76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ff78:	4b03      	ldr	r3, [pc, #12]	; (800ff88 <vTaskMissedYield+0x14>)
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	601a      	str	r2, [r3, #0]
}
 800ff7e:	bf00      	nop
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr
 800ff88:	200008e8 	.word	0x200008e8

0800ff8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b082      	sub	sp, #8
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ff94:	f000 f852 	bl	801003c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ff98:	4b06      	ldr	r3, [pc, #24]	; (800ffb4 <prvIdleTask+0x28>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	2b01      	cmp	r3, #1
 800ff9e:	d9f9      	bls.n	800ff94 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ffa0:	4b05      	ldr	r3, [pc, #20]	; (800ffb8 <prvIdleTask+0x2c>)
 800ffa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffa6:	601a      	str	r2, [r3, #0]
 800ffa8:	f3bf 8f4f 	dsb	sy
 800ffac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ffb0:	e7f0      	b.n	800ff94 <prvIdleTask+0x8>
 800ffb2:	bf00      	nop
 800ffb4:	200007d8 	.word	0x200007d8
 800ffb8:	e000ed04 	.word	0xe000ed04

0800ffbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b082      	sub	sp, #8
 800ffc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	607b      	str	r3, [r7, #4]
 800ffc6:	e00c      	b.n	800ffe2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ffc8:	687a      	ldr	r2, [r7, #4]
 800ffca:	4613      	mov	r3, r2
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	4413      	add	r3, r2
 800ffd0:	009b      	lsls	r3, r3, #2
 800ffd2:	4a12      	ldr	r2, [pc, #72]	; (801001c <prvInitialiseTaskLists+0x60>)
 800ffd4:	4413      	add	r3, r2
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7fe fe06 	bl	800ebe8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	3301      	adds	r3, #1
 800ffe0:	607b      	str	r3, [r7, #4]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2b06      	cmp	r3, #6
 800ffe6:	d9ef      	bls.n	800ffc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ffe8:	480d      	ldr	r0, [pc, #52]	; (8010020 <prvInitialiseTaskLists+0x64>)
 800ffea:	f7fe fdfd 	bl	800ebe8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ffee:	480d      	ldr	r0, [pc, #52]	; (8010024 <prvInitialiseTaskLists+0x68>)
 800fff0:	f7fe fdfa 	bl	800ebe8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fff4:	480c      	ldr	r0, [pc, #48]	; (8010028 <prvInitialiseTaskLists+0x6c>)
 800fff6:	f7fe fdf7 	bl	800ebe8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fffa:	480c      	ldr	r0, [pc, #48]	; (801002c <prvInitialiseTaskLists+0x70>)
 800fffc:	f7fe fdf4 	bl	800ebe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010000:	480b      	ldr	r0, [pc, #44]	; (8010030 <prvInitialiseTaskLists+0x74>)
 8010002:	f7fe fdf1 	bl	800ebe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010006:	4b0b      	ldr	r3, [pc, #44]	; (8010034 <prvInitialiseTaskLists+0x78>)
 8010008:	4a05      	ldr	r2, [pc, #20]	; (8010020 <prvInitialiseTaskLists+0x64>)
 801000a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801000c:	4b0a      	ldr	r3, [pc, #40]	; (8010038 <prvInitialiseTaskLists+0x7c>)
 801000e:	4a05      	ldr	r2, [pc, #20]	; (8010024 <prvInitialiseTaskLists+0x68>)
 8010010:	601a      	str	r2, [r3, #0]
}
 8010012:	bf00      	nop
 8010014:	3708      	adds	r7, #8
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	200007d8 	.word	0x200007d8
 8010020:	20000864 	.word	0x20000864
 8010024:	20000878 	.word	0x20000878
 8010028:	20000894 	.word	0x20000894
 801002c:	200008a8 	.word	0x200008a8
 8010030:	200008c0 	.word	0x200008c0
 8010034:	2000088c 	.word	0x2000088c
 8010038:	20000890 	.word	0x20000890

0801003c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010042:	e019      	b.n	8010078 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010044:	f000 fc06 	bl	8010854 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010048:	4b10      	ldr	r3, [pc, #64]	; (801008c <prvCheckTasksWaitingTermination+0x50>)
 801004a:	68db      	ldr	r3, [r3, #12]
 801004c:	68db      	ldr	r3, [r3, #12]
 801004e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	3304      	adds	r3, #4
 8010054:	4618      	mov	r0, r3
 8010056:	f7fe fe51 	bl	800ecfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 801005a:	4b0d      	ldr	r3, [pc, #52]	; (8010090 <prvCheckTasksWaitingTermination+0x54>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	3b01      	subs	r3, #1
 8010060:	4a0b      	ldr	r2, [pc, #44]	; (8010090 <prvCheckTasksWaitingTermination+0x54>)
 8010062:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010064:	4b0b      	ldr	r3, [pc, #44]	; (8010094 <prvCheckTasksWaitingTermination+0x58>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	3b01      	subs	r3, #1
 801006a:	4a0a      	ldr	r2, [pc, #40]	; (8010094 <prvCheckTasksWaitingTermination+0x58>)
 801006c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801006e:	f000 fc21 	bl	80108b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 f848 	bl	8010108 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010078:	4b06      	ldr	r3, [pc, #24]	; (8010094 <prvCheckTasksWaitingTermination+0x58>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d1e1      	bne.n	8010044 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010080:	bf00      	nop
 8010082:	bf00      	nop
 8010084:	3708      	adds	r7, #8
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
 801008a:	bf00      	nop
 801008c:	200008a8 	.word	0x200008a8
 8010090:	200008d4 	.word	0x200008d4
 8010094:	200008bc 	.word	0x200008bc

08010098 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8010098:	b480      	push	{r7}
 801009a:	b085      	sub	sp, #20
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80100a0:	2300      	movs	r3, #0
 80100a2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80100a4:	e005      	b.n	80100b2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	3301      	adds	r3, #1
 80100aa:	607b      	str	r3, [r7, #4]
			ulCount++;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	3301      	adds	r3, #1
 80100b0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	781b      	ldrb	r3, [r3, #0]
 80100b6:	2ba5      	cmp	r3, #165	; 0xa5
 80100b8:	d0f5      	beq.n	80100a6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	089b      	lsrs	r3, r3, #2
 80100be:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	b29b      	uxth	r3, r3
	}
 80100c4:	4618      	mov	r0, r3
 80100c6:	3714      	adds	r7, #20
 80100c8:	46bd      	mov	sp, r7
 80100ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ce:	4770      	bx	lr

080100d0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b086      	sub	sp, #24
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d102      	bne.n	80100e4 <uxTaskGetStackHighWaterMark+0x14>
 80100de:	4b09      	ldr	r3, [pc, #36]	; (8010104 <uxTaskGetStackHighWaterMark+0x34>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	e000      	b.n	80100e6 <uxTaskGetStackHighWaterMark+0x16>
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ec:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80100ee:	6938      	ldr	r0, [r7, #16]
 80100f0:	f7ff ffd2 	bl	8010098 <prvTaskCheckFreeStackSpace>
 80100f4:	4603      	mov	r3, r0
 80100f6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80100f8:	68fb      	ldr	r3, [r7, #12]
	}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3718      	adds	r7, #24
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}
 8010102:	bf00      	nop
 8010104:	200007d4 	.word	0x200007d4

08010108 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010108:	b580      	push	{r7, lr}
 801010a:	b084      	sub	sp, #16
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	334c      	adds	r3, #76	; 0x4c
 8010114:	4618      	mov	r0, r3
 8010116:	f001 fd03 	bl	8011b20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8010120:	2b00      	cmp	r3, #0
 8010122:	d108      	bne.n	8010136 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010128:	4618      	mov	r0, r3
 801012a:	f000 fd41 	bl	8010bb0 <vPortFree>
				vPortFree( pxTCB );
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f000 fd3e 	bl	8010bb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010134:	e018      	b.n	8010168 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801013c:	2b01      	cmp	r3, #1
 801013e:	d103      	bne.n	8010148 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f000 fd35 	bl	8010bb0 <vPortFree>
	}
 8010146:	e00f      	b.n	8010168 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801014e:	2b02      	cmp	r3, #2
 8010150:	d00a      	beq.n	8010168 <prvDeleteTCB+0x60>
	__asm volatile
 8010152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010156:	f383 8811 	msr	BASEPRI, r3
 801015a:	f3bf 8f6f 	isb	sy
 801015e:	f3bf 8f4f 	dsb	sy
 8010162:	60fb      	str	r3, [r7, #12]
}
 8010164:	bf00      	nop
 8010166:	e7fe      	b.n	8010166 <prvDeleteTCB+0x5e>
	}
 8010168:	bf00      	nop
 801016a:	3710      	adds	r7, #16
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}

08010170 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010170:	b480      	push	{r7}
 8010172:	b083      	sub	sp, #12
 8010174:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010176:	4b0c      	ldr	r3, [pc, #48]	; (80101a8 <prvResetNextTaskUnblockTime+0x38>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d104      	bne.n	801018a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010180:	4b0a      	ldr	r3, [pc, #40]	; (80101ac <prvResetNextTaskUnblockTime+0x3c>)
 8010182:	f04f 32ff 	mov.w	r2, #4294967295
 8010186:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010188:	e008      	b.n	801019c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801018a:	4b07      	ldr	r3, [pc, #28]	; (80101a8 <prvResetNextTaskUnblockTime+0x38>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	68db      	ldr	r3, [r3, #12]
 8010190:	68db      	ldr	r3, [r3, #12]
 8010192:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	685b      	ldr	r3, [r3, #4]
 8010198:	4a04      	ldr	r2, [pc, #16]	; (80101ac <prvResetNextTaskUnblockTime+0x3c>)
 801019a:	6013      	str	r3, [r2, #0]
}
 801019c:	bf00      	nop
 801019e:	370c      	adds	r7, #12
 80101a0:	46bd      	mov	sp, r7
 80101a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a6:	4770      	bx	lr
 80101a8:	2000088c 	.word	0x2000088c
 80101ac:	200008f4 	.word	0x200008f4

080101b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80101b0:	b480      	push	{r7}
 80101b2:	b083      	sub	sp, #12
 80101b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80101b6:	4b0b      	ldr	r3, [pc, #44]	; (80101e4 <xTaskGetSchedulerState+0x34>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d102      	bne.n	80101c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80101be:	2301      	movs	r3, #1
 80101c0:	607b      	str	r3, [r7, #4]
 80101c2:	e008      	b.n	80101d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101c4:	4b08      	ldr	r3, [pc, #32]	; (80101e8 <xTaskGetSchedulerState+0x38>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d102      	bne.n	80101d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80101cc:	2302      	movs	r3, #2
 80101ce:	607b      	str	r3, [r7, #4]
 80101d0:	e001      	b.n	80101d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80101d2:	2300      	movs	r3, #0
 80101d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80101d6:	687b      	ldr	r3, [r7, #4]
	}
 80101d8:	4618      	mov	r0, r3
 80101da:	370c      	adds	r7, #12
 80101dc:	46bd      	mov	sp, r7
 80101de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e2:	4770      	bx	lr
 80101e4:	200008e0 	.word	0x200008e0
 80101e8:	200008fc 	.word	0x200008fc

080101ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b084      	sub	sp, #16
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80101f8:	2300      	movs	r3, #0
 80101fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d05e      	beq.n	80102c0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010206:	4b31      	ldr	r3, [pc, #196]	; (80102cc <xTaskPriorityInherit+0xe0>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801020c:	429a      	cmp	r2, r3
 801020e:	d24e      	bcs.n	80102ae <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	699b      	ldr	r3, [r3, #24]
 8010214:	2b00      	cmp	r3, #0
 8010216:	db06      	blt.n	8010226 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010218:	4b2c      	ldr	r3, [pc, #176]	; (80102cc <xTaskPriorityInherit+0xe0>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801021e:	f1c3 0207 	rsb	r2, r3, #7
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	6959      	ldr	r1, [r3, #20]
 801022a:	68bb      	ldr	r3, [r7, #8]
 801022c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801022e:	4613      	mov	r3, r2
 8010230:	009b      	lsls	r3, r3, #2
 8010232:	4413      	add	r3, r2
 8010234:	009b      	lsls	r3, r3, #2
 8010236:	4a26      	ldr	r2, [pc, #152]	; (80102d0 <xTaskPriorityInherit+0xe4>)
 8010238:	4413      	add	r3, r2
 801023a:	4299      	cmp	r1, r3
 801023c:	d12f      	bne.n	801029e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	3304      	adds	r3, #4
 8010242:	4618      	mov	r0, r3
 8010244:	f7fe fd5a 	bl	800ecfc <uxListRemove>
 8010248:	4603      	mov	r3, r0
 801024a:	2b00      	cmp	r3, #0
 801024c:	d10a      	bne.n	8010264 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010252:	2201      	movs	r2, #1
 8010254:	fa02 f303 	lsl.w	r3, r2, r3
 8010258:	43da      	mvns	r2, r3
 801025a:	4b1e      	ldr	r3, [pc, #120]	; (80102d4 <xTaskPriorityInherit+0xe8>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	4013      	ands	r3, r2
 8010260:	4a1c      	ldr	r2, [pc, #112]	; (80102d4 <xTaskPriorityInherit+0xe8>)
 8010262:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010264:	4b19      	ldr	r3, [pc, #100]	; (80102cc <xTaskPriorityInherit+0xe0>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010272:	2201      	movs	r2, #1
 8010274:	409a      	lsls	r2, r3
 8010276:	4b17      	ldr	r3, [pc, #92]	; (80102d4 <xTaskPriorityInherit+0xe8>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	4313      	orrs	r3, r2
 801027c:	4a15      	ldr	r2, [pc, #84]	; (80102d4 <xTaskPriorityInherit+0xe8>)
 801027e:	6013      	str	r3, [r2, #0]
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010284:	4613      	mov	r3, r2
 8010286:	009b      	lsls	r3, r3, #2
 8010288:	4413      	add	r3, r2
 801028a:	009b      	lsls	r3, r3, #2
 801028c:	4a10      	ldr	r2, [pc, #64]	; (80102d0 <xTaskPriorityInherit+0xe4>)
 801028e:	441a      	add	r2, r3
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	3304      	adds	r3, #4
 8010294:	4619      	mov	r1, r3
 8010296:	4610      	mov	r0, r2
 8010298:	f7fe fcd3 	bl	800ec42 <vListInsertEnd>
 801029c:	e004      	b.n	80102a8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801029e:	4b0b      	ldr	r3, [pc, #44]	; (80102cc <xTaskPriorityInherit+0xe0>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80102a8:	2301      	movs	r3, #1
 80102aa:	60fb      	str	r3, [r7, #12]
 80102ac:	e008      	b.n	80102c0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80102b2:	4b06      	ldr	r3, [pc, #24]	; (80102cc <xTaskPriorityInherit+0xe0>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d201      	bcs.n	80102c0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80102bc:	2301      	movs	r3, #1
 80102be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80102c0:	68fb      	ldr	r3, [r7, #12]
	}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3710      	adds	r7, #16
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}
 80102ca:	bf00      	nop
 80102cc:	200007d4 	.word	0x200007d4
 80102d0:	200007d8 	.word	0x200007d8
 80102d4:	200008dc 	.word	0x200008dc

080102d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b086      	sub	sp, #24
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80102e4:	2300      	movs	r3, #0
 80102e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d06e      	beq.n	80103cc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80102ee:	4b3a      	ldr	r3, [pc, #232]	; (80103d8 <xTaskPriorityDisinherit+0x100>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	693a      	ldr	r2, [r7, #16]
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d00a      	beq.n	801030e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80102f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102fc:	f383 8811 	msr	BASEPRI, r3
 8010300:	f3bf 8f6f 	isb	sy
 8010304:	f3bf 8f4f 	dsb	sy
 8010308:	60fb      	str	r3, [r7, #12]
}
 801030a:	bf00      	nop
 801030c:	e7fe      	b.n	801030c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801030e:	693b      	ldr	r3, [r7, #16]
 8010310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010312:	2b00      	cmp	r3, #0
 8010314:	d10a      	bne.n	801032c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010316:	f04f 0350 	mov.w	r3, #80	; 0x50
 801031a:	f383 8811 	msr	BASEPRI, r3
 801031e:	f3bf 8f6f 	isb	sy
 8010322:	f3bf 8f4f 	dsb	sy
 8010326:	60bb      	str	r3, [r7, #8]
}
 8010328:	bf00      	nop
 801032a:	e7fe      	b.n	801032a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801032c:	693b      	ldr	r3, [r7, #16]
 801032e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010330:	1e5a      	subs	r2, r3, #1
 8010332:	693b      	ldr	r3, [r7, #16]
 8010334:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801033a:	693b      	ldr	r3, [r7, #16]
 801033c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801033e:	429a      	cmp	r2, r3
 8010340:	d044      	beq.n	80103cc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010346:	2b00      	cmp	r3, #0
 8010348:	d140      	bne.n	80103cc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	3304      	adds	r3, #4
 801034e:	4618      	mov	r0, r3
 8010350:	f7fe fcd4 	bl	800ecfc <uxListRemove>
 8010354:	4603      	mov	r3, r0
 8010356:	2b00      	cmp	r3, #0
 8010358:	d115      	bne.n	8010386 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801035e:	491f      	ldr	r1, [pc, #124]	; (80103dc <xTaskPriorityDisinherit+0x104>)
 8010360:	4613      	mov	r3, r2
 8010362:	009b      	lsls	r3, r3, #2
 8010364:	4413      	add	r3, r2
 8010366:	009b      	lsls	r3, r3, #2
 8010368:	440b      	add	r3, r1
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d10a      	bne.n	8010386 <xTaskPriorityDisinherit+0xae>
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010374:	2201      	movs	r2, #1
 8010376:	fa02 f303 	lsl.w	r3, r2, r3
 801037a:	43da      	mvns	r2, r3
 801037c:	4b18      	ldr	r3, [pc, #96]	; (80103e0 <xTaskPriorityDisinherit+0x108>)
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	4013      	ands	r3, r2
 8010382:	4a17      	ldr	r2, [pc, #92]	; (80103e0 <xTaskPriorityDisinherit+0x108>)
 8010384:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010386:	693b      	ldr	r3, [r7, #16]
 8010388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801038e:	693b      	ldr	r3, [r7, #16]
 8010390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010392:	f1c3 0207 	rsb	r2, r3, #7
 8010396:	693b      	ldr	r3, [r7, #16]
 8010398:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801039e:	2201      	movs	r2, #1
 80103a0:	409a      	lsls	r2, r3
 80103a2:	4b0f      	ldr	r3, [pc, #60]	; (80103e0 <xTaskPriorityDisinherit+0x108>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	4313      	orrs	r3, r2
 80103a8:	4a0d      	ldr	r2, [pc, #52]	; (80103e0 <xTaskPriorityDisinherit+0x108>)
 80103aa:	6013      	str	r3, [r2, #0]
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103b0:	4613      	mov	r3, r2
 80103b2:	009b      	lsls	r3, r3, #2
 80103b4:	4413      	add	r3, r2
 80103b6:	009b      	lsls	r3, r3, #2
 80103b8:	4a08      	ldr	r2, [pc, #32]	; (80103dc <xTaskPriorityDisinherit+0x104>)
 80103ba:	441a      	add	r2, r3
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	3304      	adds	r3, #4
 80103c0:	4619      	mov	r1, r3
 80103c2:	4610      	mov	r0, r2
 80103c4:	f7fe fc3d 	bl	800ec42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80103c8:	2301      	movs	r3, #1
 80103ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80103cc:	697b      	ldr	r3, [r7, #20]
	}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3718      	adds	r7, #24
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	200007d4 	.word	0x200007d4
 80103dc:	200007d8 	.word	0x200007d8
 80103e0:	200008dc 	.word	0x200008dc

080103e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b088      	sub	sp, #32
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80103f2:	2301      	movs	r3, #1
 80103f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d077      	beq.n	80104ec <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80103fc:	69bb      	ldr	r3, [r7, #24]
 80103fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010400:	2b00      	cmp	r3, #0
 8010402:	d10a      	bne.n	801041a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010408:	f383 8811 	msr	BASEPRI, r3
 801040c:	f3bf 8f6f 	isb	sy
 8010410:	f3bf 8f4f 	dsb	sy
 8010414:	60fb      	str	r3, [r7, #12]
}
 8010416:	bf00      	nop
 8010418:	e7fe      	b.n	8010418 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801041a:	69bb      	ldr	r3, [r7, #24]
 801041c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801041e:	683a      	ldr	r2, [r7, #0]
 8010420:	429a      	cmp	r2, r3
 8010422:	d902      	bls.n	801042a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	61fb      	str	r3, [r7, #28]
 8010428:	e002      	b.n	8010430 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801042a:	69bb      	ldr	r3, [r7, #24]
 801042c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801042e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010430:	69bb      	ldr	r3, [r7, #24]
 8010432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010434:	69fa      	ldr	r2, [r7, #28]
 8010436:	429a      	cmp	r2, r3
 8010438:	d058      	beq.n	80104ec <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801043a:	69bb      	ldr	r3, [r7, #24]
 801043c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801043e:	697a      	ldr	r2, [r7, #20]
 8010440:	429a      	cmp	r2, r3
 8010442:	d153      	bne.n	80104ec <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010444:	4b2b      	ldr	r3, [pc, #172]	; (80104f4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	69ba      	ldr	r2, [r7, #24]
 801044a:	429a      	cmp	r2, r3
 801044c:	d10a      	bne.n	8010464 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801044e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010452:	f383 8811 	msr	BASEPRI, r3
 8010456:	f3bf 8f6f 	isb	sy
 801045a:	f3bf 8f4f 	dsb	sy
 801045e:	60bb      	str	r3, [r7, #8]
}
 8010460:	bf00      	nop
 8010462:	e7fe      	b.n	8010462 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010464:	69bb      	ldr	r3, [r7, #24]
 8010466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010468:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801046a:	69bb      	ldr	r3, [r7, #24]
 801046c:	69fa      	ldr	r2, [r7, #28]
 801046e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010470:	69bb      	ldr	r3, [r7, #24]
 8010472:	699b      	ldr	r3, [r3, #24]
 8010474:	2b00      	cmp	r3, #0
 8010476:	db04      	blt.n	8010482 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010478:	69fb      	ldr	r3, [r7, #28]
 801047a:	f1c3 0207 	rsb	r2, r3, #7
 801047e:	69bb      	ldr	r3, [r7, #24]
 8010480:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010482:	69bb      	ldr	r3, [r7, #24]
 8010484:	6959      	ldr	r1, [r3, #20]
 8010486:	693a      	ldr	r2, [r7, #16]
 8010488:	4613      	mov	r3, r2
 801048a:	009b      	lsls	r3, r3, #2
 801048c:	4413      	add	r3, r2
 801048e:	009b      	lsls	r3, r3, #2
 8010490:	4a19      	ldr	r2, [pc, #100]	; (80104f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010492:	4413      	add	r3, r2
 8010494:	4299      	cmp	r1, r3
 8010496:	d129      	bne.n	80104ec <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010498:	69bb      	ldr	r3, [r7, #24]
 801049a:	3304      	adds	r3, #4
 801049c:	4618      	mov	r0, r3
 801049e:	f7fe fc2d 	bl	800ecfc <uxListRemove>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d10a      	bne.n	80104be <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80104a8:	69bb      	ldr	r3, [r7, #24]
 80104aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ac:	2201      	movs	r2, #1
 80104ae:	fa02 f303 	lsl.w	r3, r2, r3
 80104b2:	43da      	mvns	r2, r3
 80104b4:	4b11      	ldr	r3, [pc, #68]	; (80104fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	4013      	ands	r3, r2
 80104ba:	4a10      	ldr	r2, [pc, #64]	; (80104fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80104bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80104be:	69bb      	ldr	r3, [r7, #24]
 80104c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104c2:	2201      	movs	r2, #1
 80104c4:	409a      	lsls	r2, r3
 80104c6:	4b0d      	ldr	r3, [pc, #52]	; (80104fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	4313      	orrs	r3, r2
 80104cc:	4a0b      	ldr	r2, [pc, #44]	; (80104fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80104ce:	6013      	str	r3, [r2, #0]
 80104d0:	69bb      	ldr	r3, [r7, #24]
 80104d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104d4:	4613      	mov	r3, r2
 80104d6:	009b      	lsls	r3, r3, #2
 80104d8:	4413      	add	r3, r2
 80104da:	009b      	lsls	r3, r3, #2
 80104dc:	4a06      	ldr	r2, [pc, #24]	; (80104f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80104de:	441a      	add	r2, r3
 80104e0:	69bb      	ldr	r3, [r7, #24]
 80104e2:	3304      	adds	r3, #4
 80104e4:	4619      	mov	r1, r3
 80104e6:	4610      	mov	r0, r2
 80104e8:	f7fe fbab 	bl	800ec42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80104ec:	bf00      	nop
 80104ee:	3720      	adds	r7, #32
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}
 80104f4:	200007d4 	.word	0x200007d4
 80104f8:	200007d8 	.word	0x200007d8
 80104fc:	200008dc 	.word	0x200008dc

08010500 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010500:	b480      	push	{r7}
 8010502:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010504:	4b07      	ldr	r3, [pc, #28]	; (8010524 <pvTaskIncrementMutexHeldCount+0x24>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d004      	beq.n	8010516 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801050c:	4b05      	ldr	r3, [pc, #20]	; (8010524 <pvTaskIncrementMutexHeldCount+0x24>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010512:	3201      	adds	r2, #1
 8010514:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8010516:	4b03      	ldr	r3, [pc, #12]	; (8010524 <pvTaskIncrementMutexHeldCount+0x24>)
 8010518:	681b      	ldr	r3, [r3, #0]
	}
 801051a:	4618      	mov	r0, r3
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr
 8010524:	200007d4 	.word	0x200007d4

08010528 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b084      	sub	sp, #16
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010532:	4b29      	ldr	r3, [pc, #164]	; (80105d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010538:	4b28      	ldr	r3, [pc, #160]	; (80105dc <prvAddCurrentTaskToDelayedList+0xb4>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	3304      	adds	r3, #4
 801053e:	4618      	mov	r0, r3
 8010540:	f7fe fbdc 	bl	800ecfc <uxListRemove>
 8010544:	4603      	mov	r3, r0
 8010546:	2b00      	cmp	r3, #0
 8010548:	d10b      	bne.n	8010562 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801054a:	4b24      	ldr	r3, [pc, #144]	; (80105dc <prvAddCurrentTaskToDelayedList+0xb4>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010550:	2201      	movs	r2, #1
 8010552:	fa02 f303 	lsl.w	r3, r2, r3
 8010556:	43da      	mvns	r2, r3
 8010558:	4b21      	ldr	r3, [pc, #132]	; (80105e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	4013      	ands	r3, r2
 801055e:	4a20      	ldr	r2, [pc, #128]	; (80105e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010560:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010568:	d10a      	bne.n	8010580 <prvAddCurrentTaskToDelayedList+0x58>
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d007      	beq.n	8010580 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010570:	4b1a      	ldr	r3, [pc, #104]	; (80105dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	3304      	adds	r3, #4
 8010576:	4619      	mov	r1, r3
 8010578:	481a      	ldr	r0, [pc, #104]	; (80105e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801057a:	f7fe fb62 	bl	800ec42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801057e:	e026      	b.n	80105ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010580:	68fa      	ldr	r2, [r7, #12]
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	4413      	add	r3, r2
 8010586:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010588:	4b14      	ldr	r3, [pc, #80]	; (80105dc <prvAddCurrentTaskToDelayedList+0xb4>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	68ba      	ldr	r2, [r7, #8]
 801058e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010590:	68ba      	ldr	r2, [r7, #8]
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	429a      	cmp	r2, r3
 8010596:	d209      	bcs.n	80105ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010598:	4b13      	ldr	r3, [pc, #76]	; (80105e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801059a:	681a      	ldr	r2, [r3, #0]
 801059c:	4b0f      	ldr	r3, [pc, #60]	; (80105dc <prvAddCurrentTaskToDelayedList+0xb4>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	3304      	adds	r3, #4
 80105a2:	4619      	mov	r1, r3
 80105a4:	4610      	mov	r0, r2
 80105a6:	f7fe fb70 	bl	800ec8a <vListInsert>
}
 80105aa:	e010      	b.n	80105ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105ac:	4b0f      	ldr	r3, [pc, #60]	; (80105ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80105ae:	681a      	ldr	r2, [r3, #0]
 80105b0:	4b0a      	ldr	r3, [pc, #40]	; (80105dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	3304      	adds	r3, #4
 80105b6:	4619      	mov	r1, r3
 80105b8:	4610      	mov	r0, r2
 80105ba:	f7fe fb66 	bl	800ec8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80105be:	4b0c      	ldr	r3, [pc, #48]	; (80105f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	68ba      	ldr	r2, [r7, #8]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d202      	bcs.n	80105ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80105c8:	4a09      	ldr	r2, [pc, #36]	; (80105f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	6013      	str	r3, [r2, #0]
}
 80105ce:	bf00      	nop
 80105d0:	3710      	adds	r7, #16
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	200008d8 	.word	0x200008d8
 80105dc:	200007d4 	.word	0x200007d4
 80105e0:	200008dc 	.word	0x200008dc
 80105e4:	200008c0 	.word	0x200008c0
 80105e8:	20000890 	.word	0x20000890
 80105ec:	2000088c 	.word	0x2000088c
 80105f0:	200008f4 	.word	0x200008f4

080105f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80105f4:	b480      	push	{r7}
 80105f6:	b085      	sub	sp, #20
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	60f8      	str	r0, [r7, #12]
 80105fc:	60b9      	str	r1, [r7, #8]
 80105fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	3b04      	subs	r3, #4
 8010604:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801060c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	3b04      	subs	r3, #4
 8010612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	f023 0201 	bic.w	r2, r3, #1
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	3b04      	subs	r3, #4
 8010622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010624:	4a0c      	ldr	r2, [pc, #48]	; (8010658 <pxPortInitialiseStack+0x64>)
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	3b14      	subs	r3, #20
 801062e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010630:	687a      	ldr	r2, [r7, #4]
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	3b04      	subs	r3, #4
 801063a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f06f 0202 	mvn.w	r2, #2
 8010642:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	3b20      	subs	r3, #32
 8010648:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801064a:	68fb      	ldr	r3, [r7, #12]
}
 801064c:	4618      	mov	r0, r3
 801064e:	3714      	adds	r7, #20
 8010650:	46bd      	mov	sp, r7
 8010652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010656:	4770      	bx	lr
 8010658:	0801065d 	.word	0x0801065d

0801065c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801065c:	b480      	push	{r7}
 801065e:	b085      	sub	sp, #20
 8010660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010662:	2300      	movs	r3, #0
 8010664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010666:	4b12      	ldr	r3, [pc, #72]	; (80106b0 <prvTaskExitError+0x54>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801066e:	d00a      	beq.n	8010686 <prvTaskExitError+0x2a>
	__asm volatile
 8010670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010674:	f383 8811 	msr	BASEPRI, r3
 8010678:	f3bf 8f6f 	isb	sy
 801067c:	f3bf 8f4f 	dsb	sy
 8010680:	60fb      	str	r3, [r7, #12]
}
 8010682:	bf00      	nop
 8010684:	e7fe      	b.n	8010684 <prvTaskExitError+0x28>
	__asm volatile
 8010686:	f04f 0350 	mov.w	r3, #80	; 0x50
 801068a:	f383 8811 	msr	BASEPRI, r3
 801068e:	f3bf 8f6f 	isb	sy
 8010692:	f3bf 8f4f 	dsb	sy
 8010696:	60bb      	str	r3, [r7, #8]
}
 8010698:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801069a:	bf00      	nop
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d0fc      	beq.n	801069c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80106a2:	bf00      	nop
 80106a4:	bf00      	nop
 80106a6:	3714      	adds	r7, #20
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr
 80106b0:	200002c8 	.word	0x200002c8
	...

080106c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80106c0:	4b07      	ldr	r3, [pc, #28]	; (80106e0 <pxCurrentTCBConst2>)
 80106c2:	6819      	ldr	r1, [r3, #0]
 80106c4:	6808      	ldr	r0, [r1, #0]
 80106c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ca:	f380 8809 	msr	PSP, r0
 80106ce:	f3bf 8f6f 	isb	sy
 80106d2:	f04f 0000 	mov.w	r0, #0
 80106d6:	f380 8811 	msr	BASEPRI, r0
 80106da:	4770      	bx	lr
 80106dc:	f3af 8000 	nop.w

080106e0 <pxCurrentTCBConst2>:
 80106e0:	200007d4 	.word	0x200007d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80106e4:	bf00      	nop
 80106e6:	bf00      	nop

080106e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80106e8:	4808      	ldr	r0, [pc, #32]	; (801070c <prvPortStartFirstTask+0x24>)
 80106ea:	6800      	ldr	r0, [r0, #0]
 80106ec:	6800      	ldr	r0, [r0, #0]
 80106ee:	f380 8808 	msr	MSP, r0
 80106f2:	f04f 0000 	mov.w	r0, #0
 80106f6:	f380 8814 	msr	CONTROL, r0
 80106fa:	b662      	cpsie	i
 80106fc:	b661      	cpsie	f
 80106fe:	f3bf 8f4f 	dsb	sy
 8010702:	f3bf 8f6f 	isb	sy
 8010706:	df00      	svc	0
 8010708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801070a:	bf00      	nop
 801070c:	e000ed08 	.word	0xe000ed08

08010710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b086      	sub	sp, #24
 8010714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010716:	4b46      	ldr	r3, [pc, #280]	; (8010830 <xPortStartScheduler+0x120>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	4a46      	ldr	r2, [pc, #280]	; (8010834 <xPortStartScheduler+0x124>)
 801071c:	4293      	cmp	r3, r2
 801071e:	d10a      	bne.n	8010736 <xPortStartScheduler+0x26>
	__asm volatile
 8010720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010724:	f383 8811 	msr	BASEPRI, r3
 8010728:	f3bf 8f6f 	isb	sy
 801072c:	f3bf 8f4f 	dsb	sy
 8010730:	613b      	str	r3, [r7, #16]
}
 8010732:	bf00      	nop
 8010734:	e7fe      	b.n	8010734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010736:	4b3e      	ldr	r3, [pc, #248]	; (8010830 <xPortStartScheduler+0x120>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	4a3f      	ldr	r2, [pc, #252]	; (8010838 <xPortStartScheduler+0x128>)
 801073c:	4293      	cmp	r3, r2
 801073e:	d10a      	bne.n	8010756 <xPortStartScheduler+0x46>
	__asm volatile
 8010740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010744:	f383 8811 	msr	BASEPRI, r3
 8010748:	f3bf 8f6f 	isb	sy
 801074c:	f3bf 8f4f 	dsb	sy
 8010750:	60fb      	str	r3, [r7, #12]
}
 8010752:	bf00      	nop
 8010754:	e7fe      	b.n	8010754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010756:	4b39      	ldr	r3, [pc, #228]	; (801083c <xPortStartScheduler+0x12c>)
 8010758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801075a:	697b      	ldr	r3, [r7, #20]
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	b2db      	uxtb	r3, r3
 8010760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	22ff      	movs	r2, #255	; 0xff
 8010766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	b2db      	uxtb	r3, r3
 801076e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010770:	78fb      	ldrb	r3, [r7, #3]
 8010772:	b2db      	uxtb	r3, r3
 8010774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010778:	b2da      	uxtb	r2, r3
 801077a:	4b31      	ldr	r3, [pc, #196]	; (8010840 <xPortStartScheduler+0x130>)
 801077c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801077e:	4b31      	ldr	r3, [pc, #196]	; (8010844 <xPortStartScheduler+0x134>)
 8010780:	2207      	movs	r2, #7
 8010782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010784:	e009      	b.n	801079a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010786:	4b2f      	ldr	r3, [pc, #188]	; (8010844 <xPortStartScheduler+0x134>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	3b01      	subs	r3, #1
 801078c:	4a2d      	ldr	r2, [pc, #180]	; (8010844 <xPortStartScheduler+0x134>)
 801078e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010790:	78fb      	ldrb	r3, [r7, #3]
 8010792:	b2db      	uxtb	r3, r3
 8010794:	005b      	lsls	r3, r3, #1
 8010796:	b2db      	uxtb	r3, r3
 8010798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801079a:	78fb      	ldrb	r3, [r7, #3]
 801079c:	b2db      	uxtb	r3, r3
 801079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107a2:	2b80      	cmp	r3, #128	; 0x80
 80107a4:	d0ef      	beq.n	8010786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80107a6:	4b27      	ldr	r3, [pc, #156]	; (8010844 <xPortStartScheduler+0x134>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	f1c3 0307 	rsb	r3, r3, #7
 80107ae:	2b04      	cmp	r3, #4
 80107b0:	d00a      	beq.n	80107c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80107b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b6:	f383 8811 	msr	BASEPRI, r3
 80107ba:	f3bf 8f6f 	isb	sy
 80107be:	f3bf 8f4f 	dsb	sy
 80107c2:	60bb      	str	r3, [r7, #8]
}
 80107c4:	bf00      	nop
 80107c6:	e7fe      	b.n	80107c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80107c8:	4b1e      	ldr	r3, [pc, #120]	; (8010844 <xPortStartScheduler+0x134>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	021b      	lsls	r3, r3, #8
 80107ce:	4a1d      	ldr	r2, [pc, #116]	; (8010844 <xPortStartScheduler+0x134>)
 80107d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80107d2:	4b1c      	ldr	r3, [pc, #112]	; (8010844 <xPortStartScheduler+0x134>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80107da:	4a1a      	ldr	r2, [pc, #104]	; (8010844 <xPortStartScheduler+0x134>)
 80107dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	b2da      	uxtb	r2, r3
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80107e6:	4b18      	ldr	r3, [pc, #96]	; (8010848 <xPortStartScheduler+0x138>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	4a17      	ldr	r2, [pc, #92]	; (8010848 <xPortStartScheduler+0x138>)
 80107ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80107f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80107f2:	4b15      	ldr	r3, [pc, #84]	; (8010848 <xPortStartScheduler+0x138>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	4a14      	ldr	r2, [pc, #80]	; (8010848 <xPortStartScheduler+0x138>)
 80107f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80107fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80107fe:	f000 f8dd 	bl	80109bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010802:	4b12      	ldr	r3, [pc, #72]	; (801084c <xPortStartScheduler+0x13c>)
 8010804:	2200      	movs	r2, #0
 8010806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010808:	f000 f8fc 	bl	8010a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801080c:	4b10      	ldr	r3, [pc, #64]	; (8010850 <xPortStartScheduler+0x140>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	4a0f      	ldr	r2, [pc, #60]	; (8010850 <xPortStartScheduler+0x140>)
 8010812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010818:	f7ff ff66 	bl	80106e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801081c:	f7ff fa4a 	bl	800fcb4 <vTaskSwitchContext>
	prvTaskExitError();
 8010820:	f7ff ff1c 	bl	801065c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010824:	2300      	movs	r3, #0
}
 8010826:	4618      	mov	r0, r3
 8010828:	3718      	adds	r7, #24
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop
 8010830:	e000ed00 	.word	0xe000ed00
 8010834:	410fc271 	.word	0x410fc271
 8010838:	410fc270 	.word	0x410fc270
 801083c:	e000e400 	.word	0xe000e400
 8010840:	20000900 	.word	0x20000900
 8010844:	20000904 	.word	0x20000904
 8010848:	e000ed20 	.word	0xe000ed20
 801084c:	200002c8 	.word	0x200002c8
 8010850:	e000ef34 	.word	0xe000ef34

08010854 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010854:	b480      	push	{r7}
 8010856:	b083      	sub	sp, #12
 8010858:	af00      	add	r7, sp, #0
	__asm volatile
 801085a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801085e:	f383 8811 	msr	BASEPRI, r3
 8010862:	f3bf 8f6f 	isb	sy
 8010866:	f3bf 8f4f 	dsb	sy
 801086a:	607b      	str	r3, [r7, #4]
}
 801086c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801086e:	4b0f      	ldr	r3, [pc, #60]	; (80108ac <vPortEnterCritical+0x58>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	3301      	adds	r3, #1
 8010874:	4a0d      	ldr	r2, [pc, #52]	; (80108ac <vPortEnterCritical+0x58>)
 8010876:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010878:	4b0c      	ldr	r3, [pc, #48]	; (80108ac <vPortEnterCritical+0x58>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	2b01      	cmp	r3, #1
 801087e:	d10f      	bne.n	80108a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010880:	4b0b      	ldr	r3, [pc, #44]	; (80108b0 <vPortEnterCritical+0x5c>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	b2db      	uxtb	r3, r3
 8010886:	2b00      	cmp	r3, #0
 8010888:	d00a      	beq.n	80108a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801088a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801088e:	f383 8811 	msr	BASEPRI, r3
 8010892:	f3bf 8f6f 	isb	sy
 8010896:	f3bf 8f4f 	dsb	sy
 801089a:	603b      	str	r3, [r7, #0]
}
 801089c:	bf00      	nop
 801089e:	e7fe      	b.n	801089e <vPortEnterCritical+0x4a>
	}
}
 80108a0:	bf00      	nop
 80108a2:	370c      	adds	r7, #12
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr
 80108ac:	200002c8 	.word	0x200002c8
 80108b0:	e000ed04 	.word	0xe000ed04

080108b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80108b4:	b480      	push	{r7}
 80108b6:	b083      	sub	sp, #12
 80108b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80108ba:	4b12      	ldr	r3, [pc, #72]	; (8010904 <vPortExitCritical+0x50>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d10a      	bne.n	80108d8 <vPortExitCritical+0x24>
	__asm volatile
 80108c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c6:	f383 8811 	msr	BASEPRI, r3
 80108ca:	f3bf 8f6f 	isb	sy
 80108ce:	f3bf 8f4f 	dsb	sy
 80108d2:	607b      	str	r3, [r7, #4]
}
 80108d4:	bf00      	nop
 80108d6:	e7fe      	b.n	80108d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80108d8:	4b0a      	ldr	r3, [pc, #40]	; (8010904 <vPortExitCritical+0x50>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	3b01      	subs	r3, #1
 80108de:	4a09      	ldr	r2, [pc, #36]	; (8010904 <vPortExitCritical+0x50>)
 80108e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80108e2:	4b08      	ldr	r3, [pc, #32]	; (8010904 <vPortExitCritical+0x50>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d105      	bne.n	80108f6 <vPortExitCritical+0x42>
 80108ea:	2300      	movs	r3, #0
 80108ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80108f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80108f6:	bf00      	nop
 80108f8:	370c      	adds	r7, #12
 80108fa:	46bd      	mov	sp, r7
 80108fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010900:	4770      	bx	lr
 8010902:	bf00      	nop
 8010904:	200002c8 	.word	0x200002c8
	...

08010910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010910:	f3ef 8009 	mrs	r0, PSP
 8010914:	f3bf 8f6f 	isb	sy
 8010918:	4b15      	ldr	r3, [pc, #84]	; (8010970 <pxCurrentTCBConst>)
 801091a:	681a      	ldr	r2, [r3, #0]
 801091c:	f01e 0f10 	tst.w	lr, #16
 8010920:	bf08      	it	eq
 8010922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801092a:	6010      	str	r0, [r2, #0]
 801092c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010934:	f380 8811 	msr	BASEPRI, r0
 8010938:	f3bf 8f4f 	dsb	sy
 801093c:	f3bf 8f6f 	isb	sy
 8010940:	f7ff f9b8 	bl	800fcb4 <vTaskSwitchContext>
 8010944:	f04f 0000 	mov.w	r0, #0
 8010948:	f380 8811 	msr	BASEPRI, r0
 801094c:	bc09      	pop	{r0, r3}
 801094e:	6819      	ldr	r1, [r3, #0]
 8010950:	6808      	ldr	r0, [r1, #0]
 8010952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010956:	f01e 0f10 	tst.w	lr, #16
 801095a:	bf08      	it	eq
 801095c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010960:	f380 8809 	msr	PSP, r0
 8010964:	f3bf 8f6f 	isb	sy
 8010968:	4770      	bx	lr
 801096a:	bf00      	nop
 801096c:	f3af 8000 	nop.w

08010970 <pxCurrentTCBConst>:
 8010970:	200007d4 	.word	0x200007d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010974:	bf00      	nop
 8010976:	bf00      	nop

08010978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
	__asm volatile
 801097e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010982:	f383 8811 	msr	BASEPRI, r3
 8010986:	f3bf 8f6f 	isb	sy
 801098a:	f3bf 8f4f 	dsb	sy
 801098e:	607b      	str	r3, [r7, #4]
}
 8010990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010992:	f7ff f8d7 	bl	800fb44 <xTaskIncrementTick>
 8010996:	4603      	mov	r3, r0
 8010998:	2b00      	cmp	r3, #0
 801099a:	d003      	beq.n	80109a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801099c:	4b06      	ldr	r3, [pc, #24]	; (80109b8 <SysTick_Handler+0x40>)
 801099e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109a2:	601a      	str	r2, [r3, #0]
 80109a4:	2300      	movs	r3, #0
 80109a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	f383 8811 	msr	BASEPRI, r3
}
 80109ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80109b0:	bf00      	nop
 80109b2:	3708      	adds	r7, #8
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}
 80109b8:	e000ed04 	.word	0xe000ed04

080109bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80109bc:	b480      	push	{r7}
 80109be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80109c0:	4b0b      	ldr	r3, [pc, #44]	; (80109f0 <vPortSetupTimerInterrupt+0x34>)
 80109c2:	2200      	movs	r2, #0
 80109c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80109c6:	4b0b      	ldr	r3, [pc, #44]	; (80109f4 <vPortSetupTimerInterrupt+0x38>)
 80109c8:	2200      	movs	r2, #0
 80109ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80109cc:	4b0a      	ldr	r3, [pc, #40]	; (80109f8 <vPortSetupTimerInterrupt+0x3c>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	4a0a      	ldr	r2, [pc, #40]	; (80109fc <vPortSetupTimerInterrupt+0x40>)
 80109d2:	fba2 2303 	umull	r2, r3, r2, r3
 80109d6:	099b      	lsrs	r3, r3, #6
 80109d8:	4a09      	ldr	r2, [pc, #36]	; (8010a00 <vPortSetupTimerInterrupt+0x44>)
 80109da:	3b01      	subs	r3, #1
 80109dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80109de:	4b04      	ldr	r3, [pc, #16]	; (80109f0 <vPortSetupTimerInterrupt+0x34>)
 80109e0:	2207      	movs	r2, #7
 80109e2:	601a      	str	r2, [r3, #0]
}
 80109e4:	bf00      	nop
 80109e6:	46bd      	mov	sp, r7
 80109e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ec:	4770      	bx	lr
 80109ee:	bf00      	nop
 80109f0:	e000e010 	.word	0xe000e010
 80109f4:	e000e018 	.word	0xe000e018
 80109f8:	20000000 	.word	0x20000000
 80109fc:	10624dd3 	.word	0x10624dd3
 8010a00:	e000e014 	.word	0xe000e014

08010a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010a04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010a14 <vPortEnableVFP+0x10>
 8010a08:	6801      	ldr	r1, [r0, #0]
 8010a0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010a0e:	6001      	str	r1, [r0, #0]
 8010a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010a12:	bf00      	nop
 8010a14:	e000ed88 	.word	0xe000ed88

08010a18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b08a      	sub	sp, #40	; 0x28
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010a20:	2300      	movs	r3, #0
 8010a22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010a24:	f7fe ffe4 	bl	800f9f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010a28:	4b5b      	ldr	r3, [pc, #364]	; (8010b98 <pvPortMalloc+0x180>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d101      	bne.n	8010a34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010a30:	f000 f920 	bl	8010c74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010a34:	4b59      	ldr	r3, [pc, #356]	; (8010b9c <pvPortMalloc+0x184>)
 8010a36:	681a      	ldr	r2, [r3, #0]
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	4013      	ands	r3, r2
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	f040 8093 	bne.w	8010b68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d01d      	beq.n	8010a84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010a48:	2208      	movs	r2, #8
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	4413      	add	r3, r2
 8010a4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f003 0307 	and.w	r3, r3, #7
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d014      	beq.n	8010a84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f023 0307 	bic.w	r3, r3, #7
 8010a60:	3308      	adds	r3, #8
 8010a62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f003 0307 	and.w	r3, r3, #7
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d00a      	beq.n	8010a84 <pvPortMalloc+0x6c>
	__asm volatile
 8010a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a72:	f383 8811 	msr	BASEPRI, r3
 8010a76:	f3bf 8f6f 	isb	sy
 8010a7a:	f3bf 8f4f 	dsb	sy
 8010a7e:	617b      	str	r3, [r7, #20]
}
 8010a80:	bf00      	nop
 8010a82:	e7fe      	b.n	8010a82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d06e      	beq.n	8010b68 <pvPortMalloc+0x150>
 8010a8a:	4b45      	ldr	r3, [pc, #276]	; (8010ba0 <pvPortMalloc+0x188>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	687a      	ldr	r2, [r7, #4]
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d869      	bhi.n	8010b68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010a94:	4b43      	ldr	r3, [pc, #268]	; (8010ba4 <pvPortMalloc+0x18c>)
 8010a96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010a98:	4b42      	ldr	r3, [pc, #264]	; (8010ba4 <pvPortMalloc+0x18c>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a9e:	e004      	b.n	8010aaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aac:	685b      	ldr	r3, [r3, #4]
 8010aae:	687a      	ldr	r2, [r7, #4]
 8010ab0:	429a      	cmp	r2, r3
 8010ab2:	d903      	bls.n	8010abc <pvPortMalloc+0xa4>
 8010ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d1f1      	bne.n	8010aa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010abc:	4b36      	ldr	r3, [pc, #216]	; (8010b98 <pvPortMalloc+0x180>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d050      	beq.n	8010b68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010ac6:	6a3b      	ldr	r3, [r7, #32]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	2208      	movs	r2, #8
 8010acc:	4413      	add	r3, r2
 8010ace:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad2:	681a      	ldr	r2, [r3, #0]
 8010ad4:	6a3b      	ldr	r3, [r7, #32]
 8010ad6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ada:	685a      	ldr	r2, [r3, #4]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	1ad2      	subs	r2, r2, r3
 8010ae0:	2308      	movs	r3, #8
 8010ae2:	005b      	lsls	r3, r3, #1
 8010ae4:	429a      	cmp	r2, r3
 8010ae6:	d91f      	bls.n	8010b28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	4413      	add	r3, r2
 8010aee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010af0:	69bb      	ldr	r3, [r7, #24]
 8010af2:	f003 0307 	and.w	r3, r3, #7
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d00a      	beq.n	8010b10 <pvPortMalloc+0xf8>
	__asm volatile
 8010afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010afe:	f383 8811 	msr	BASEPRI, r3
 8010b02:	f3bf 8f6f 	isb	sy
 8010b06:	f3bf 8f4f 	dsb	sy
 8010b0a:	613b      	str	r3, [r7, #16]
}
 8010b0c:	bf00      	nop
 8010b0e:	e7fe      	b.n	8010b0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b12:	685a      	ldr	r2, [r3, #4]
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	1ad2      	subs	r2, r2, r3
 8010b18:	69bb      	ldr	r3, [r7, #24]
 8010b1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b1e:	687a      	ldr	r2, [r7, #4]
 8010b20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010b22:	69b8      	ldr	r0, [r7, #24]
 8010b24:	f000 f908 	bl	8010d38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010b28:	4b1d      	ldr	r3, [pc, #116]	; (8010ba0 <pvPortMalloc+0x188>)
 8010b2a:	681a      	ldr	r2, [r3, #0]
 8010b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2e:	685b      	ldr	r3, [r3, #4]
 8010b30:	1ad3      	subs	r3, r2, r3
 8010b32:	4a1b      	ldr	r2, [pc, #108]	; (8010ba0 <pvPortMalloc+0x188>)
 8010b34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010b36:	4b1a      	ldr	r3, [pc, #104]	; (8010ba0 <pvPortMalloc+0x188>)
 8010b38:	681a      	ldr	r2, [r3, #0]
 8010b3a:	4b1b      	ldr	r3, [pc, #108]	; (8010ba8 <pvPortMalloc+0x190>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d203      	bcs.n	8010b4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010b42:	4b17      	ldr	r3, [pc, #92]	; (8010ba0 <pvPortMalloc+0x188>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	4a18      	ldr	r2, [pc, #96]	; (8010ba8 <pvPortMalloc+0x190>)
 8010b48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b4c:	685a      	ldr	r2, [r3, #4]
 8010b4e:	4b13      	ldr	r3, [pc, #76]	; (8010b9c <pvPortMalloc+0x184>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	431a      	orrs	r2, r3
 8010b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010b5e:	4b13      	ldr	r3, [pc, #76]	; (8010bac <pvPortMalloc+0x194>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	3301      	adds	r3, #1
 8010b64:	4a11      	ldr	r2, [pc, #68]	; (8010bac <pvPortMalloc+0x194>)
 8010b66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010b68:	f7fe ff50 	bl	800fa0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b6c:	69fb      	ldr	r3, [r7, #28]
 8010b6e:	f003 0307 	and.w	r3, r3, #7
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d00a      	beq.n	8010b8c <pvPortMalloc+0x174>
	__asm volatile
 8010b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b7a:	f383 8811 	msr	BASEPRI, r3
 8010b7e:	f3bf 8f6f 	isb	sy
 8010b82:	f3bf 8f4f 	dsb	sy
 8010b86:	60fb      	str	r3, [r7, #12]
}
 8010b88:	bf00      	nop
 8010b8a:	e7fe      	b.n	8010b8a <pvPortMalloc+0x172>
	return pvReturn;
 8010b8c:	69fb      	ldr	r3, [r7, #28]
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3728      	adds	r7, #40	; 0x28
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	bf00      	nop
 8010b98:	20004510 	.word	0x20004510
 8010b9c:	20004524 	.word	0x20004524
 8010ba0:	20004514 	.word	0x20004514
 8010ba4:	20004508 	.word	0x20004508
 8010ba8:	20004518 	.word	0x20004518
 8010bac:	2000451c 	.word	0x2000451c

08010bb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b086      	sub	sp, #24
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d04d      	beq.n	8010c5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010bc2:	2308      	movs	r3, #8
 8010bc4:	425b      	negs	r3, r3
 8010bc6:	697a      	ldr	r2, [r7, #20]
 8010bc8:	4413      	add	r3, r2
 8010bca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	685a      	ldr	r2, [r3, #4]
 8010bd4:	4b24      	ldr	r3, [pc, #144]	; (8010c68 <vPortFree+0xb8>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	4013      	ands	r3, r2
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d10a      	bne.n	8010bf4 <vPortFree+0x44>
	__asm volatile
 8010bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010be2:	f383 8811 	msr	BASEPRI, r3
 8010be6:	f3bf 8f6f 	isb	sy
 8010bea:	f3bf 8f4f 	dsb	sy
 8010bee:	60fb      	str	r3, [r7, #12]
}
 8010bf0:	bf00      	nop
 8010bf2:	e7fe      	b.n	8010bf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d00a      	beq.n	8010c12 <vPortFree+0x62>
	__asm volatile
 8010bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c00:	f383 8811 	msr	BASEPRI, r3
 8010c04:	f3bf 8f6f 	isb	sy
 8010c08:	f3bf 8f4f 	dsb	sy
 8010c0c:	60bb      	str	r3, [r7, #8]
}
 8010c0e:	bf00      	nop
 8010c10:	e7fe      	b.n	8010c10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	685a      	ldr	r2, [r3, #4]
 8010c16:	4b14      	ldr	r3, [pc, #80]	; (8010c68 <vPortFree+0xb8>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	4013      	ands	r3, r2
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d01e      	beq.n	8010c5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010c20:	693b      	ldr	r3, [r7, #16]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d11a      	bne.n	8010c5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	685a      	ldr	r2, [r3, #4]
 8010c2c:	4b0e      	ldr	r3, [pc, #56]	; (8010c68 <vPortFree+0xb8>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	43db      	mvns	r3, r3
 8010c32:	401a      	ands	r2, r3
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010c38:	f7fe feda 	bl	800f9f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010c3c:	693b      	ldr	r3, [r7, #16]
 8010c3e:	685a      	ldr	r2, [r3, #4]
 8010c40:	4b0a      	ldr	r3, [pc, #40]	; (8010c6c <vPortFree+0xbc>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	4413      	add	r3, r2
 8010c46:	4a09      	ldr	r2, [pc, #36]	; (8010c6c <vPortFree+0xbc>)
 8010c48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010c4a:	6938      	ldr	r0, [r7, #16]
 8010c4c:	f000 f874 	bl	8010d38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010c50:	4b07      	ldr	r3, [pc, #28]	; (8010c70 <vPortFree+0xc0>)
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	3301      	adds	r3, #1
 8010c56:	4a06      	ldr	r2, [pc, #24]	; (8010c70 <vPortFree+0xc0>)
 8010c58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010c5a:	f7fe fed7 	bl	800fa0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010c5e:	bf00      	nop
 8010c60:	3718      	adds	r7, #24
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}
 8010c66:	bf00      	nop
 8010c68:	20004524 	.word	0x20004524
 8010c6c:	20004514 	.word	0x20004514
 8010c70:	20004520 	.word	0x20004520

08010c74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010c74:	b480      	push	{r7}
 8010c76:	b085      	sub	sp, #20
 8010c78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010c7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010c7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010c80:	4b27      	ldr	r3, [pc, #156]	; (8010d20 <prvHeapInit+0xac>)
 8010c82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	f003 0307 	and.w	r3, r3, #7
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d00c      	beq.n	8010ca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	3307      	adds	r3, #7
 8010c92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	f023 0307 	bic.w	r3, r3, #7
 8010c9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010c9c:	68ba      	ldr	r2, [r7, #8]
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	1ad3      	subs	r3, r2, r3
 8010ca2:	4a1f      	ldr	r2, [pc, #124]	; (8010d20 <prvHeapInit+0xac>)
 8010ca4:	4413      	add	r3, r2
 8010ca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010cac:	4a1d      	ldr	r2, [pc, #116]	; (8010d24 <prvHeapInit+0xb0>)
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010cb2:	4b1c      	ldr	r3, [pc, #112]	; (8010d24 <prvHeapInit+0xb0>)
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	68ba      	ldr	r2, [r7, #8]
 8010cbc:	4413      	add	r3, r2
 8010cbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010cc0:	2208      	movs	r2, #8
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	1a9b      	subs	r3, r3, r2
 8010cc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	f023 0307 	bic.w	r3, r3, #7
 8010cce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	4a15      	ldr	r2, [pc, #84]	; (8010d28 <prvHeapInit+0xb4>)
 8010cd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010cd6:	4b14      	ldr	r3, [pc, #80]	; (8010d28 <prvHeapInit+0xb4>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010cde:	4b12      	ldr	r3, [pc, #72]	; (8010d28 <prvHeapInit+0xb4>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	68fa      	ldr	r2, [r7, #12]
 8010cee:	1ad2      	subs	r2, r2, r3
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010cf4:	4b0c      	ldr	r3, [pc, #48]	; (8010d28 <prvHeapInit+0xb4>)
 8010cf6:	681a      	ldr	r2, [r3, #0]
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	685b      	ldr	r3, [r3, #4]
 8010d00:	4a0a      	ldr	r2, [pc, #40]	; (8010d2c <prvHeapInit+0xb8>)
 8010d02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010d04:	683b      	ldr	r3, [r7, #0]
 8010d06:	685b      	ldr	r3, [r3, #4]
 8010d08:	4a09      	ldr	r2, [pc, #36]	; (8010d30 <prvHeapInit+0xbc>)
 8010d0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010d0c:	4b09      	ldr	r3, [pc, #36]	; (8010d34 <prvHeapInit+0xc0>)
 8010d0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010d12:	601a      	str	r2, [r3, #0]
}
 8010d14:	bf00      	nop
 8010d16:	3714      	adds	r7, #20
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1e:	4770      	bx	lr
 8010d20:	20000908 	.word	0x20000908
 8010d24:	20004508 	.word	0x20004508
 8010d28:	20004510 	.word	0x20004510
 8010d2c:	20004518 	.word	0x20004518
 8010d30:	20004514 	.word	0x20004514
 8010d34:	20004524 	.word	0x20004524

08010d38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010d38:	b480      	push	{r7}
 8010d3a:	b085      	sub	sp, #20
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010d40:	4b28      	ldr	r3, [pc, #160]	; (8010de4 <prvInsertBlockIntoFreeList+0xac>)
 8010d42:	60fb      	str	r3, [r7, #12]
 8010d44:	e002      	b.n	8010d4c <prvInsertBlockIntoFreeList+0x14>
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	60fb      	str	r3, [r7, #12]
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	687a      	ldr	r2, [r7, #4]
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d8f7      	bhi.n	8010d46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	68ba      	ldr	r2, [r7, #8]
 8010d60:	4413      	add	r3, r2
 8010d62:	687a      	ldr	r2, [r7, #4]
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d108      	bne.n	8010d7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	685a      	ldr	r2, [r3, #4]
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	685b      	ldr	r3, [r3, #4]
 8010d70:	441a      	add	r2, r3
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	685b      	ldr	r3, [r3, #4]
 8010d82:	68ba      	ldr	r2, [r7, #8]
 8010d84:	441a      	add	r2, r3
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d118      	bne.n	8010dc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	681a      	ldr	r2, [r3, #0]
 8010d92:	4b15      	ldr	r3, [pc, #84]	; (8010de8 <prvInsertBlockIntoFreeList+0xb0>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d00d      	beq.n	8010db6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	685a      	ldr	r2, [r3, #4]
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	441a      	add	r2, r3
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	681a      	ldr	r2, [r3, #0]
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	601a      	str	r2, [r3, #0]
 8010db4:	e008      	b.n	8010dc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010db6:	4b0c      	ldr	r3, [pc, #48]	; (8010de8 <prvInsertBlockIntoFreeList+0xb0>)
 8010db8:	681a      	ldr	r2, [r3, #0]
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	601a      	str	r2, [r3, #0]
 8010dbe:	e003      	b.n	8010dc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681a      	ldr	r2, [r3, #0]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010dc8:	68fa      	ldr	r2, [r7, #12]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d002      	beq.n	8010dd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	687a      	ldr	r2, [r7, #4]
 8010dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010dd6:	bf00      	nop
 8010dd8:	3714      	adds	r7, #20
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de0:	4770      	bx	lr
 8010de2:	bf00      	nop
 8010de4:	20004508 	.word	0x20004508
 8010de8:	20004510 	.word	0x20004510

08010dec <__errno>:
 8010dec:	4b01      	ldr	r3, [pc, #4]	; (8010df4 <__errno+0x8>)
 8010dee:	6818      	ldr	r0, [r3, #0]
 8010df0:	4770      	bx	lr
 8010df2:	bf00      	nop
 8010df4:	200002cc 	.word	0x200002cc

08010df8 <std>:
 8010df8:	2300      	movs	r3, #0
 8010dfa:	b510      	push	{r4, lr}
 8010dfc:	4604      	mov	r4, r0
 8010dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8010e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010e06:	6083      	str	r3, [r0, #8]
 8010e08:	8181      	strh	r1, [r0, #12]
 8010e0a:	6643      	str	r3, [r0, #100]	; 0x64
 8010e0c:	81c2      	strh	r2, [r0, #14]
 8010e0e:	6183      	str	r3, [r0, #24]
 8010e10:	4619      	mov	r1, r3
 8010e12:	2208      	movs	r2, #8
 8010e14:	305c      	adds	r0, #92	; 0x5c
 8010e16:	f000 f91a 	bl	801104e <memset>
 8010e1a:	4b05      	ldr	r3, [pc, #20]	; (8010e30 <std+0x38>)
 8010e1c:	6263      	str	r3, [r4, #36]	; 0x24
 8010e1e:	4b05      	ldr	r3, [pc, #20]	; (8010e34 <std+0x3c>)
 8010e20:	62a3      	str	r3, [r4, #40]	; 0x28
 8010e22:	4b05      	ldr	r3, [pc, #20]	; (8010e38 <std+0x40>)
 8010e24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010e26:	4b05      	ldr	r3, [pc, #20]	; (8010e3c <std+0x44>)
 8010e28:	6224      	str	r4, [r4, #32]
 8010e2a:	6323      	str	r3, [r4, #48]	; 0x30
 8010e2c:	bd10      	pop	{r4, pc}
 8010e2e:	bf00      	nop
 8010e30:	08011c39 	.word	0x08011c39
 8010e34:	08011c5b 	.word	0x08011c5b
 8010e38:	08011c93 	.word	0x08011c93
 8010e3c:	08011cb7 	.word	0x08011cb7

08010e40 <_cleanup_r>:
 8010e40:	4901      	ldr	r1, [pc, #4]	; (8010e48 <_cleanup_r+0x8>)
 8010e42:	f000 b8af 	b.w	8010fa4 <_fwalk_reent>
 8010e46:	bf00      	nop
 8010e48:	08012c95 	.word	0x08012c95

08010e4c <__sfmoreglue>:
 8010e4c:	b570      	push	{r4, r5, r6, lr}
 8010e4e:	1e4a      	subs	r2, r1, #1
 8010e50:	2568      	movs	r5, #104	; 0x68
 8010e52:	4355      	muls	r5, r2
 8010e54:	460e      	mov	r6, r1
 8010e56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010e5a:	f000 f901 	bl	8011060 <_malloc_r>
 8010e5e:	4604      	mov	r4, r0
 8010e60:	b140      	cbz	r0, 8010e74 <__sfmoreglue+0x28>
 8010e62:	2100      	movs	r1, #0
 8010e64:	e9c0 1600 	strd	r1, r6, [r0]
 8010e68:	300c      	adds	r0, #12
 8010e6a:	60a0      	str	r0, [r4, #8]
 8010e6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010e70:	f000 f8ed 	bl	801104e <memset>
 8010e74:	4620      	mov	r0, r4
 8010e76:	bd70      	pop	{r4, r5, r6, pc}

08010e78 <__sfp_lock_acquire>:
 8010e78:	4801      	ldr	r0, [pc, #4]	; (8010e80 <__sfp_lock_acquire+0x8>)
 8010e7a:	f000 b8d8 	b.w	801102e <__retarget_lock_acquire_recursive>
 8010e7e:	bf00      	nop
 8010e80:	20004e94 	.word	0x20004e94

08010e84 <__sfp_lock_release>:
 8010e84:	4801      	ldr	r0, [pc, #4]	; (8010e8c <__sfp_lock_release+0x8>)
 8010e86:	f000 b8d3 	b.w	8011030 <__retarget_lock_release_recursive>
 8010e8a:	bf00      	nop
 8010e8c:	20004e94 	.word	0x20004e94

08010e90 <__sinit_lock_acquire>:
 8010e90:	4801      	ldr	r0, [pc, #4]	; (8010e98 <__sinit_lock_acquire+0x8>)
 8010e92:	f000 b8cc 	b.w	801102e <__retarget_lock_acquire_recursive>
 8010e96:	bf00      	nop
 8010e98:	20004e8f 	.word	0x20004e8f

08010e9c <__sinit_lock_release>:
 8010e9c:	4801      	ldr	r0, [pc, #4]	; (8010ea4 <__sinit_lock_release+0x8>)
 8010e9e:	f000 b8c7 	b.w	8011030 <__retarget_lock_release_recursive>
 8010ea2:	bf00      	nop
 8010ea4:	20004e8f 	.word	0x20004e8f

08010ea8 <__sinit>:
 8010ea8:	b510      	push	{r4, lr}
 8010eaa:	4604      	mov	r4, r0
 8010eac:	f7ff fff0 	bl	8010e90 <__sinit_lock_acquire>
 8010eb0:	69a3      	ldr	r3, [r4, #24]
 8010eb2:	b11b      	cbz	r3, 8010ebc <__sinit+0x14>
 8010eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010eb8:	f7ff bff0 	b.w	8010e9c <__sinit_lock_release>
 8010ebc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010ec0:	6523      	str	r3, [r4, #80]	; 0x50
 8010ec2:	4b13      	ldr	r3, [pc, #76]	; (8010f10 <__sinit+0x68>)
 8010ec4:	4a13      	ldr	r2, [pc, #76]	; (8010f14 <__sinit+0x6c>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	62a2      	str	r2, [r4, #40]	; 0x28
 8010eca:	42a3      	cmp	r3, r4
 8010ecc:	bf04      	itt	eq
 8010ece:	2301      	moveq	r3, #1
 8010ed0:	61a3      	streq	r3, [r4, #24]
 8010ed2:	4620      	mov	r0, r4
 8010ed4:	f000 f820 	bl	8010f18 <__sfp>
 8010ed8:	6060      	str	r0, [r4, #4]
 8010eda:	4620      	mov	r0, r4
 8010edc:	f000 f81c 	bl	8010f18 <__sfp>
 8010ee0:	60a0      	str	r0, [r4, #8]
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	f000 f818 	bl	8010f18 <__sfp>
 8010ee8:	2200      	movs	r2, #0
 8010eea:	60e0      	str	r0, [r4, #12]
 8010eec:	2104      	movs	r1, #4
 8010eee:	6860      	ldr	r0, [r4, #4]
 8010ef0:	f7ff ff82 	bl	8010df8 <std>
 8010ef4:	68a0      	ldr	r0, [r4, #8]
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	2109      	movs	r1, #9
 8010efa:	f7ff ff7d 	bl	8010df8 <std>
 8010efe:	68e0      	ldr	r0, [r4, #12]
 8010f00:	2202      	movs	r2, #2
 8010f02:	2112      	movs	r1, #18
 8010f04:	f7ff ff78 	bl	8010df8 <std>
 8010f08:	2301      	movs	r3, #1
 8010f0a:	61a3      	str	r3, [r4, #24]
 8010f0c:	e7d2      	b.n	8010eb4 <__sinit+0xc>
 8010f0e:	bf00      	nop
 8010f10:	08016ecc 	.word	0x08016ecc
 8010f14:	08010e41 	.word	0x08010e41

08010f18 <__sfp>:
 8010f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f1a:	4607      	mov	r7, r0
 8010f1c:	f7ff ffac 	bl	8010e78 <__sfp_lock_acquire>
 8010f20:	4b1e      	ldr	r3, [pc, #120]	; (8010f9c <__sfp+0x84>)
 8010f22:	681e      	ldr	r6, [r3, #0]
 8010f24:	69b3      	ldr	r3, [r6, #24]
 8010f26:	b913      	cbnz	r3, 8010f2e <__sfp+0x16>
 8010f28:	4630      	mov	r0, r6
 8010f2a:	f7ff ffbd 	bl	8010ea8 <__sinit>
 8010f2e:	3648      	adds	r6, #72	; 0x48
 8010f30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010f34:	3b01      	subs	r3, #1
 8010f36:	d503      	bpl.n	8010f40 <__sfp+0x28>
 8010f38:	6833      	ldr	r3, [r6, #0]
 8010f3a:	b30b      	cbz	r3, 8010f80 <__sfp+0x68>
 8010f3c:	6836      	ldr	r6, [r6, #0]
 8010f3e:	e7f7      	b.n	8010f30 <__sfp+0x18>
 8010f40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010f44:	b9d5      	cbnz	r5, 8010f7c <__sfp+0x64>
 8010f46:	4b16      	ldr	r3, [pc, #88]	; (8010fa0 <__sfp+0x88>)
 8010f48:	60e3      	str	r3, [r4, #12]
 8010f4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010f4e:	6665      	str	r5, [r4, #100]	; 0x64
 8010f50:	f000 f86c 	bl	801102c <__retarget_lock_init_recursive>
 8010f54:	f7ff ff96 	bl	8010e84 <__sfp_lock_release>
 8010f58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010f5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010f60:	6025      	str	r5, [r4, #0]
 8010f62:	61a5      	str	r5, [r4, #24]
 8010f64:	2208      	movs	r2, #8
 8010f66:	4629      	mov	r1, r5
 8010f68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010f6c:	f000 f86f 	bl	801104e <memset>
 8010f70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010f74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010f78:	4620      	mov	r0, r4
 8010f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f7c:	3468      	adds	r4, #104	; 0x68
 8010f7e:	e7d9      	b.n	8010f34 <__sfp+0x1c>
 8010f80:	2104      	movs	r1, #4
 8010f82:	4638      	mov	r0, r7
 8010f84:	f7ff ff62 	bl	8010e4c <__sfmoreglue>
 8010f88:	4604      	mov	r4, r0
 8010f8a:	6030      	str	r0, [r6, #0]
 8010f8c:	2800      	cmp	r0, #0
 8010f8e:	d1d5      	bne.n	8010f3c <__sfp+0x24>
 8010f90:	f7ff ff78 	bl	8010e84 <__sfp_lock_release>
 8010f94:	230c      	movs	r3, #12
 8010f96:	603b      	str	r3, [r7, #0]
 8010f98:	e7ee      	b.n	8010f78 <__sfp+0x60>
 8010f9a:	bf00      	nop
 8010f9c:	08016ecc 	.word	0x08016ecc
 8010fa0:	ffff0001 	.word	0xffff0001

08010fa4 <_fwalk_reent>:
 8010fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fa8:	4606      	mov	r6, r0
 8010faa:	4688      	mov	r8, r1
 8010fac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010fb0:	2700      	movs	r7, #0
 8010fb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010fb6:	f1b9 0901 	subs.w	r9, r9, #1
 8010fba:	d505      	bpl.n	8010fc8 <_fwalk_reent+0x24>
 8010fbc:	6824      	ldr	r4, [r4, #0]
 8010fbe:	2c00      	cmp	r4, #0
 8010fc0:	d1f7      	bne.n	8010fb2 <_fwalk_reent+0xe>
 8010fc2:	4638      	mov	r0, r7
 8010fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fc8:	89ab      	ldrh	r3, [r5, #12]
 8010fca:	2b01      	cmp	r3, #1
 8010fcc:	d907      	bls.n	8010fde <_fwalk_reent+0x3a>
 8010fce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010fd2:	3301      	adds	r3, #1
 8010fd4:	d003      	beq.n	8010fde <_fwalk_reent+0x3a>
 8010fd6:	4629      	mov	r1, r5
 8010fd8:	4630      	mov	r0, r6
 8010fda:	47c0      	blx	r8
 8010fdc:	4307      	orrs	r7, r0
 8010fde:	3568      	adds	r5, #104	; 0x68
 8010fe0:	e7e9      	b.n	8010fb6 <_fwalk_reent+0x12>
	...

08010fe4 <__libc_init_array>:
 8010fe4:	b570      	push	{r4, r5, r6, lr}
 8010fe6:	4d0d      	ldr	r5, [pc, #52]	; (801101c <__libc_init_array+0x38>)
 8010fe8:	4c0d      	ldr	r4, [pc, #52]	; (8011020 <__libc_init_array+0x3c>)
 8010fea:	1b64      	subs	r4, r4, r5
 8010fec:	10a4      	asrs	r4, r4, #2
 8010fee:	2600      	movs	r6, #0
 8010ff0:	42a6      	cmp	r6, r4
 8010ff2:	d109      	bne.n	8011008 <__libc_init_array+0x24>
 8010ff4:	4d0b      	ldr	r5, [pc, #44]	; (8011024 <__libc_init_array+0x40>)
 8010ff6:	4c0c      	ldr	r4, [pc, #48]	; (8011028 <__libc_init_array+0x44>)
 8010ff8:	f005 fc68 	bl	80168cc <_init>
 8010ffc:	1b64      	subs	r4, r4, r5
 8010ffe:	10a4      	asrs	r4, r4, #2
 8011000:	2600      	movs	r6, #0
 8011002:	42a6      	cmp	r6, r4
 8011004:	d105      	bne.n	8011012 <__libc_init_array+0x2e>
 8011006:	bd70      	pop	{r4, r5, r6, pc}
 8011008:	f855 3b04 	ldr.w	r3, [r5], #4
 801100c:	4798      	blx	r3
 801100e:	3601      	adds	r6, #1
 8011010:	e7ee      	b.n	8010ff0 <__libc_init_array+0xc>
 8011012:	f855 3b04 	ldr.w	r3, [r5], #4
 8011016:	4798      	blx	r3
 8011018:	3601      	adds	r6, #1
 801101a:	e7f2      	b.n	8011002 <__libc_init_array+0x1e>
 801101c:	080174f0 	.word	0x080174f0
 8011020:	080174f0 	.word	0x080174f0
 8011024:	080174f0 	.word	0x080174f0
 8011028:	080174f4 	.word	0x080174f4

0801102c <__retarget_lock_init_recursive>:
 801102c:	4770      	bx	lr

0801102e <__retarget_lock_acquire_recursive>:
 801102e:	4770      	bx	lr

08011030 <__retarget_lock_release_recursive>:
 8011030:	4770      	bx	lr

08011032 <memcpy>:
 8011032:	440a      	add	r2, r1
 8011034:	4291      	cmp	r1, r2
 8011036:	f100 33ff 	add.w	r3, r0, #4294967295
 801103a:	d100      	bne.n	801103e <memcpy+0xc>
 801103c:	4770      	bx	lr
 801103e:	b510      	push	{r4, lr}
 8011040:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011044:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011048:	4291      	cmp	r1, r2
 801104a:	d1f9      	bne.n	8011040 <memcpy+0xe>
 801104c:	bd10      	pop	{r4, pc}

0801104e <memset>:
 801104e:	4402      	add	r2, r0
 8011050:	4603      	mov	r3, r0
 8011052:	4293      	cmp	r3, r2
 8011054:	d100      	bne.n	8011058 <memset+0xa>
 8011056:	4770      	bx	lr
 8011058:	f803 1b01 	strb.w	r1, [r3], #1
 801105c:	e7f9      	b.n	8011052 <memset+0x4>
	...

08011060 <_malloc_r>:
 8011060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011062:	1ccd      	adds	r5, r1, #3
 8011064:	f025 0503 	bic.w	r5, r5, #3
 8011068:	3508      	adds	r5, #8
 801106a:	2d0c      	cmp	r5, #12
 801106c:	bf38      	it	cc
 801106e:	250c      	movcc	r5, #12
 8011070:	2d00      	cmp	r5, #0
 8011072:	4606      	mov	r6, r0
 8011074:	db01      	blt.n	801107a <_malloc_r+0x1a>
 8011076:	42a9      	cmp	r1, r5
 8011078:	d903      	bls.n	8011082 <_malloc_r+0x22>
 801107a:	230c      	movs	r3, #12
 801107c:	6033      	str	r3, [r6, #0]
 801107e:	2000      	movs	r0, #0
 8011080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011082:	f001 fec5 	bl	8012e10 <__malloc_lock>
 8011086:	4921      	ldr	r1, [pc, #132]	; (801110c <_malloc_r+0xac>)
 8011088:	680a      	ldr	r2, [r1, #0]
 801108a:	4614      	mov	r4, r2
 801108c:	b99c      	cbnz	r4, 80110b6 <_malloc_r+0x56>
 801108e:	4f20      	ldr	r7, [pc, #128]	; (8011110 <_malloc_r+0xb0>)
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	b923      	cbnz	r3, 801109e <_malloc_r+0x3e>
 8011094:	4621      	mov	r1, r4
 8011096:	4630      	mov	r0, r6
 8011098:	f000 fd9e 	bl	8011bd8 <_sbrk_r>
 801109c:	6038      	str	r0, [r7, #0]
 801109e:	4629      	mov	r1, r5
 80110a0:	4630      	mov	r0, r6
 80110a2:	f000 fd99 	bl	8011bd8 <_sbrk_r>
 80110a6:	1c43      	adds	r3, r0, #1
 80110a8:	d123      	bne.n	80110f2 <_malloc_r+0x92>
 80110aa:	230c      	movs	r3, #12
 80110ac:	6033      	str	r3, [r6, #0]
 80110ae:	4630      	mov	r0, r6
 80110b0:	f001 feb4 	bl	8012e1c <__malloc_unlock>
 80110b4:	e7e3      	b.n	801107e <_malloc_r+0x1e>
 80110b6:	6823      	ldr	r3, [r4, #0]
 80110b8:	1b5b      	subs	r3, r3, r5
 80110ba:	d417      	bmi.n	80110ec <_malloc_r+0x8c>
 80110bc:	2b0b      	cmp	r3, #11
 80110be:	d903      	bls.n	80110c8 <_malloc_r+0x68>
 80110c0:	6023      	str	r3, [r4, #0]
 80110c2:	441c      	add	r4, r3
 80110c4:	6025      	str	r5, [r4, #0]
 80110c6:	e004      	b.n	80110d2 <_malloc_r+0x72>
 80110c8:	6863      	ldr	r3, [r4, #4]
 80110ca:	42a2      	cmp	r2, r4
 80110cc:	bf0c      	ite	eq
 80110ce:	600b      	streq	r3, [r1, #0]
 80110d0:	6053      	strne	r3, [r2, #4]
 80110d2:	4630      	mov	r0, r6
 80110d4:	f001 fea2 	bl	8012e1c <__malloc_unlock>
 80110d8:	f104 000b 	add.w	r0, r4, #11
 80110dc:	1d23      	adds	r3, r4, #4
 80110de:	f020 0007 	bic.w	r0, r0, #7
 80110e2:	1ac2      	subs	r2, r0, r3
 80110e4:	d0cc      	beq.n	8011080 <_malloc_r+0x20>
 80110e6:	1a1b      	subs	r3, r3, r0
 80110e8:	50a3      	str	r3, [r4, r2]
 80110ea:	e7c9      	b.n	8011080 <_malloc_r+0x20>
 80110ec:	4622      	mov	r2, r4
 80110ee:	6864      	ldr	r4, [r4, #4]
 80110f0:	e7cc      	b.n	801108c <_malloc_r+0x2c>
 80110f2:	1cc4      	adds	r4, r0, #3
 80110f4:	f024 0403 	bic.w	r4, r4, #3
 80110f8:	42a0      	cmp	r0, r4
 80110fa:	d0e3      	beq.n	80110c4 <_malloc_r+0x64>
 80110fc:	1a21      	subs	r1, r4, r0
 80110fe:	4630      	mov	r0, r6
 8011100:	f000 fd6a 	bl	8011bd8 <_sbrk_r>
 8011104:	3001      	adds	r0, #1
 8011106:	d1dd      	bne.n	80110c4 <_malloc_r+0x64>
 8011108:	e7cf      	b.n	80110aa <_malloc_r+0x4a>
 801110a:	bf00      	nop
 801110c:	20004528 	.word	0x20004528
 8011110:	2000452c 	.word	0x2000452c

08011114 <__cvt>:
 8011114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011118:	ec55 4b10 	vmov	r4, r5, d0
 801111c:	2d00      	cmp	r5, #0
 801111e:	460e      	mov	r6, r1
 8011120:	4619      	mov	r1, r3
 8011122:	462b      	mov	r3, r5
 8011124:	bfbb      	ittet	lt
 8011126:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801112a:	461d      	movlt	r5, r3
 801112c:	2300      	movge	r3, #0
 801112e:	232d      	movlt	r3, #45	; 0x2d
 8011130:	700b      	strb	r3, [r1, #0]
 8011132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011134:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011138:	4691      	mov	r9, r2
 801113a:	f023 0820 	bic.w	r8, r3, #32
 801113e:	bfbc      	itt	lt
 8011140:	4622      	movlt	r2, r4
 8011142:	4614      	movlt	r4, r2
 8011144:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011148:	d005      	beq.n	8011156 <__cvt+0x42>
 801114a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801114e:	d100      	bne.n	8011152 <__cvt+0x3e>
 8011150:	3601      	adds	r6, #1
 8011152:	2102      	movs	r1, #2
 8011154:	e000      	b.n	8011158 <__cvt+0x44>
 8011156:	2103      	movs	r1, #3
 8011158:	ab03      	add	r3, sp, #12
 801115a:	9301      	str	r3, [sp, #4]
 801115c:	ab02      	add	r3, sp, #8
 801115e:	9300      	str	r3, [sp, #0]
 8011160:	ec45 4b10 	vmov	d0, r4, r5
 8011164:	4653      	mov	r3, sl
 8011166:	4632      	mov	r2, r6
 8011168:	f000 ff22 	bl	8011fb0 <_dtoa_r>
 801116c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011170:	4607      	mov	r7, r0
 8011172:	d102      	bne.n	801117a <__cvt+0x66>
 8011174:	f019 0f01 	tst.w	r9, #1
 8011178:	d022      	beq.n	80111c0 <__cvt+0xac>
 801117a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801117e:	eb07 0906 	add.w	r9, r7, r6
 8011182:	d110      	bne.n	80111a6 <__cvt+0x92>
 8011184:	783b      	ldrb	r3, [r7, #0]
 8011186:	2b30      	cmp	r3, #48	; 0x30
 8011188:	d10a      	bne.n	80111a0 <__cvt+0x8c>
 801118a:	2200      	movs	r2, #0
 801118c:	2300      	movs	r3, #0
 801118e:	4620      	mov	r0, r4
 8011190:	4629      	mov	r1, r5
 8011192:	f7ef fcb9 	bl	8000b08 <__aeabi_dcmpeq>
 8011196:	b918      	cbnz	r0, 80111a0 <__cvt+0x8c>
 8011198:	f1c6 0601 	rsb	r6, r6, #1
 801119c:	f8ca 6000 	str.w	r6, [sl]
 80111a0:	f8da 3000 	ldr.w	r3, [sl]
 80111a4:	4499      	add	r9, r3
 80111a6:	2200      	movs	r2, #0
 80111a8:	2300      	movs	r3, #0
 80111aa:	4620      	mov	r0, r4
 80111ac:	4629      	mov	r1, r5
 80111ae:	f7ef fcab 	bl	8000b08 <__aeabi_dcmpeq>
 80111b2:	b108      	cbz	r0, 80111b8 <__cvt+0xa4>
 80111b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80111b8:	2230      	movs	r2, #48	; 0x30
 80111ba:	9b03      	ldr	r3, [sp, #12]
 80111bc:	454b      	cmp	r3, r9
 80111be:	d307      	bcc.n	80111d0 <__cvt+0xbc>
 80111c0:	9b03      	ldr	r3, [sp, #12]
 80111c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80111c4:	1bdb      	subs	r3, r3, r7
 80111c6:	4638      	mov	r0, r7
 80111c8:	6013      	str	r3, [r2, #0]
 80111ca:	b004      	add	sp, #16
 80111cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111d0:	1c59      	adds	r1, r3, #1
 80111d2:	9103      	str	r1, [sp, #12]
 80111d4:	701a      	strb	r2, [r3, #0]
 80111d6:	e7f0      	b.n	80111ba <__cvt+0xa6>

080111d8 <__exponent>:
 80111d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80111da:	4603      	mov	r3, r0
 80111dc:	2900      	cmp	r1, #0
 80111de:	bfb8      	it	lt
 80111e0:	4249      	neglt	r1, r1
 80111e2:	f803 2b02 	strb.w	r2, [r3], #2
 80111e6:	bfb4      	ite	lt
 80111e8:	222d      	movlt	r2, #45	; 0x2d
 80111ea:	222b      	movge	r2, #43	; 0x2b
 80111ec:	2909      	cmp	r1, #9
 80111ee:	7042      	strb	r2, [r0, #1]
 80111f0:	dd2a      	ble.n	8011248 <__exponent+0x70>
 80111f2:	f10d 0407 	add.w	r4, sp, #7
 80111f6:	46a4      	mov	ip, r4
 80111f8:	270a      	movs	r7, #10
 80111fa:	46a6      	mov	lr, r4
 80111fc:	460a      	mov	r2, r1
 80111fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8011202:	fb07 1516 	mls	r5, r7, r6, r1
 8011206:	3530      	adds	r5, #48	; 0x30
 8011208:	2a63      	cmp	r2, #99	; 0x63
 801120a:	f104 34ff 	add.w	r4, r4, #4294967295
 801120e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011212:	4631      	mov	r1, r6
 8011214:	dcf1      	bgt.n	80111fa <__exponent+0x22>
 8011216:	3130      	adds	r1, #48	; 0x30
 8011218:	f1ae 0502 	sub.w	r5, lr, #2
 801121c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011220:	1c44      	adds	r4, r0, #1
 8011222:	4629      	mov	r1, r5
 8011224:	4561      	cmp	r1, ip
 8011226:	d30a      	bcc.n	801123e <__exponent+0x66>
 8011228:	f10d 0209 	add.w	r2, sp, #9
 801122c:	eba2 020e 	sub.w	r2, r2, lr
 8011230:	4565      	cmp	r5, ip
 8011232:	bf88      	it	hi
 8011234:	2200      	movhi	r2, #0
 8011236:	4413      	add	r3, r2
 8011238:	1a18      	subs	r0, r3, r0
 801123a:	b003      	add	sp, #12
 801123c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801123e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011242:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011246:	e7ed      	b.n	8011224 <__exponent+0x4c>
 8011248:	2330      	movs	r3, #48	; 0x30
 801124a:	3130      	adds	r1, #48	; 0x30
 801124c:	7083      	strb	r3, [r0, #2]
 801124e:	70c1      	strb	r1, [r0, #3]
 8011250:	1d03      	adds	r3, r0, #4
 8011252:	e7f1      	b.n	8011238 <__exponent+0x60>

08011254 <_printf_float>:
 8011254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011258:	ed2d 8b02 	vpush	{d8}
 801125c:	b08d      	sub	sp, #52	; 0x34
 801125e:	460c      	mov	r4, r1
 8011260:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011264:	4616      	mov	r6, r2
 8011266:	461f      	mov	r7, r3
 8011268:	4605      	mov	r5, r0
 801126a:	f001 fd4f 	bl	8012d0c <_localeconv_r>
 801126e:	f8d0 a000 	ldr.w	sl, [r0]
 8011272:	4650      	mov	r0, sl
 8011274:	f7ee ffcc 	bl	8000210 <strlen>
 8011278:	2300      	movs	r3, #0
 801127a:	930a      	str	r3, [sp, #40]	; 0x28
 801127c:	6823      	ldr	r3, [r4, #0]
 801127e:	9305      	str	r3, [sp, #20]
 8011280:	f8d8 3000 	ldr.w	r3, [r8]
 8011284:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011288:	3307      	adds	r3, #7
 801128a:	f023 0307 	bic.w	r3, r3, #7
 801128e:	f103 0208 	add.w	r2, r3, #8
 8011292:	f8c8 2000 	str.w	r2, [r8]
 8011296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801129a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801129e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80112a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80112a6:	9307      	str	r3, [sp, #28]
 80112a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80112ac:	ee08 0a10 	vmov	s16, r0
 80112b0:	4b9f      	ldr	r3, [pc, #636]	; (8011530 <_printf_float+0x2dc>)
 80112b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80112b6:	f04f 32ff 	mov.w	r2, #4294967295
 80112ba:	f7ef fc57 	bl	8000b6c <__aeabi_dcmpun>
 80112be:	bb88      	cbnz	r0, 8011324 <_printf_float+0xd0>
 80112c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80112c4:	4b9a      	ldr	r3, [pc, #616]	; (8011530 <_printf_float+0x2dc>)
 80112c6:	f04f 32ff 	mov.w	r2, #4294967295
 80112ca:	f7ef fc31 	bl	8000b30 <__aeabi_dcmple>
 80112ce:	bb48      	cbnz	r0, 8011324 <_printf_float+0xd0>
 80112d0:	2200      	movs	r2, #0
 80112d2:	2300      	movs	r3, #0
 80112d4:	4640      	mov	r0, r8
 80112d6:	4649      	mov	r1, r9
 80112d8:	f7ef fc20 	bl	8000b1c <__aeabi_dcmplt>
 80112dc:	b110      	cbz	r0, 80112e4 <_printf_float+0x90>
 80112de:	232d      	movs	r3, #45	; 0x2d
 80112e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80112e4:	4b93      	ldr	r3, [pc, #588]	; (8011534 <_printf_float+0x2e0>)
 80112e6:	4894      	ldr	r0, [pc, #592]	; (8011538 <_printf_float+0x2e4>)
 80112e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80112ec:	bf94      	ite	ls
 80112ee:	4698      	movls	r8, r3
 80112f0:	4680      	movhi	r8, r0
 80112f2:	2303      	movs	r3, #3
 80112f4:	6123      	str	r3, [r4, #16]
 80112f6:	9b05      	ldr	r3, [sp, #20]
 80112f8:	f023 0204 	bic.w	r2, r3, #4
 80112fc:	6022      	str	r2, [r4, #0]
 80112fe:	f04f 0900 	mov.w	r9, #0
 8011302:	9700      	str	r7, [sp, #0]
 8011304:	4633      	mov	r3, r6
 8011306:	aa0b      	add	r2, sp, #44	; 0x2c
 8011308:	4621      	mov	r1, r4
 801130a:	4628      	mov	r0, r5
 801130c:	f000 f9d8 	bl	80116c0 <_printf_common>
 8011310:	3001      	adds	r0, #1
 8011312:	f040 8090 	bne.w	8011436 <_printf_float+0x1e2>
 8011316:	f04f 30ff 	mov.w	r0, #4294967295
 801131a:	b00d      	add	sp, #52	; 0x34
 801131c:	ecbd 8b02 	vpop	{d8}
 8011320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011324:	4642      	mov	r2, r8
 8011326:	464b      	mov	r3, r9
 8011328:	4640      	mov	r0, r8
 801132a:	4649      	mov	r1, r9
 801132c:	f7ef fc1e 	bl	8000b6c <__aeabi_dcmpun>
 8011330:	b140      	cbz	r0, 8011344 <_printf_float+0xf0>
 8011332:	464b      	mov	r3, r9
 8011334:	2b00      	cmp	r3, #0
 8011336:	bfbc      	itt	lt
 8011338:	232d      	movlt	r3, #45	; 0x2d
 801133a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801133e:	487f      	ldr	r0, [pc, #508]	; (801153c <_printf_float+0x2e8>)
 8011340:	4b7f      	ldr	r3, [pc, #508]	; (8011540 <_printf_float+0x2ec>)
 8011342:	e7d1      	b.n	80112e8 <_printf_float+0x94>
 8011344:	6863      	ldr	r3, [r4, #4]
 8011346:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801134a:	9206      	str	r2, [sp, #24]
 801134c:	1c5a      	adds	r2, r3, #1
 801134e:	d13f      	bne.n	80113d0 <_printf_float+0x17c>
 8011350:	2306      	movs	r3, #6
 8011352:	6063      	str	r3, [r4, #4]
 8011354:	9b05      	ldr	r3, [sp, #20]
 8011356:	6861      	ldr	r1, [r4, #4]
 8011358:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801135c:	2300      	movs	r3, #0
 801135e:	9303      	str	r3, [sp, #12]
 8011360:	ab0a      	add	r3, sp, #40	; 0x28
 8011362:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011366:	ab09      	add	r3, sp, #36	; 0x24
 8011368:	ec49 8b10 	vmov	d0, r8, r9
 801136c:	9300      	str	r3, [sp, #0]
 801136e:	6022      	str	r2, [r4, #0]
 8011370:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011374:	4628      	mov	r0, r5
 8011376:	f7ff fecd 	bl	8011114 <__cvt>
 801137a:	9b06      	ldr	r3, [sp, #24]
 801137c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801137e:	2b47      	cmp	r3, #71	; 0x47
 8011380:	4680      	mov	r8, r0
 8011382:	d108      	bne.n	8011396 <_printf_float+0x142>
 8011384:	1cc8      	adds	r0, r1, #3
 8011386:	db02      	blt.n	801138e <_printf_float+0x13a>
 8011388:	6863      	ldr	r3, [r4, #4]
 801138a:	4299      	cmp	r1, r3
 801138c:	dd41      	ble.n	8011412 <_printf_float+0x1be>
 801138e:	f1ab 0b02 	sub.w	fp, fp, #2
 8011392:	fa5f fb8b 	uxtb.w	fp, fp
 8011396:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801139a:	d820      	bhi.n	80113de <_printf_float+0x18a>
 801139c:	3901      	subs	r1, #1
 801139e:	465a      	mov	r2, fp
 80113a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80113a4:	9109      	str	r1, [sp, #36]	; 0x24
 80113a6:	f7ff ff17 	bl	80111d8 <__exponent>
 80113aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80113ac:	1813      	adds	r3, r2, r0
 80113ae:	2a01      	cmp	r2, #1
 80113b0:	4681      	mov	r9, r0
 80113b2:	6123      	str	r3, [r4, #16]
 80113b4:	dc02      	bgt.n	80113bc <_printf_float+0x168>
 80113b6:	6822      	ldr	r2, [r4, #0]
 80113b8:	07d2      	lsls	r2, r2, #31
 80113ba:	d501      	bpl.n	80113c0 <_printf_float+0x16c>
 80113bc:	3301      	adds	r3, #1
 80113be:	6123      	str	r3, [r4, #16]
 80113c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d09c      	beq.n	8011302 <_printf_float+0xae>
 80113c8:	232d      	movs	r3, #45	; 0x2d
 80113ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80113ce:	e798      	b.n	8011302 <_printf_float+0xae>
 80113d0:	9a06      	ldr	r2, [sp, #24]
 80113d2:	2a47      	cmp	r2, #71	; 0x47
 80113d4:	d1be      	bne.n	8011354 <_printf_float+0x100>
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d1bc      	bne.n	8011354 <_printf_float+0x100>
 80113da:	2301      	movs	r3, #1
 80113dc:	e7b9      	b.n	8011352 <_printf_float+0xfe>
 80113de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80113e2:	d118      	bne.n	8011416 <_printf_float+0x1c2>
 80113e4:	2900      	cmp	r1, #0
 80113e6:	6863      	ldr	r3, [r4, #4]
 80113e8:	dd0b      	ble.n	8011402 <_printf_float+0x1ae>
 80113ea:	6121      	str	r1, [r4, #16]
 80113ec:	b913      	cbnz	r3, 80113f4 <_printf_float+0x1a0>
 80113ee:	6822      	ldr	r2, [r4, #0]
 80113f0:	07d0      	lsls	r0, r2, #31
 80113f2:	d502      	bpl.n	80113fa <_printf_float+0x1a6>
 80113f4:	3301      	adds	r3, #1
 80113f6:	440b      	add	r3, r1
 80113f8:	6123      	str	r3, [r4, #16]
 80113fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80113fc:	f04f 0900 	mov.w	r9, #0
 8011400:	e7de      	b.n	80113c0 <_printf_float+0x16c>
 8011402:	b913      	cbnz	r3, 801140a <_printf_float+0x1b6>
 8011404:	6822      	ldr	r2, [r4, #0]
 8011406:	07d2      	lsls	r2, r2, #31
 8011408:	d501      	bpl.n	801140e <_printf_float+0x1ba>
 801140a:	3302      	adds	r3, #2
 801140c:	e7f4      	b.n	80113f8 <_printf_float+0x1a4>
 801140e:	2301      	movs	r3, #1
 8011410:	e7f2      	b.n	80113f8 <_printf_float+0x1a4>
 8011412:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011418:	4299      	cmp	r1, r3
 801141a:	db05      	blt.n	8011428 <_printf_float+0x1d4>
 801141c:	6823      	ldr	r3, [r4, #0]
 801141e:	6121      	str	r1, [r4, #16]
 8011420:	07d8      	lsls	r0, r3, #31
 8011422:	d5ea      	bpl.n	80113fa <_printf_float+0x1a6>
 8011424:	1c4b      	adds	r3, r1, #1
 8011426:	e7e7      	b.n	80113f8 <_printf_float+0x1a4>
 8011428:	2900      	cmp	r1, #0
 801142a:	bfd4      	ite	le
 801142c:	f1c1 0202 	rsble	r2, r1, #2
 8011430:	2201      	movgt	r2, #1
 8011432:	4413      	add	r3, r2
 8011434:	e7e0      	b.n	80113f8 <_printf_float+0x1a4>
 8011436:	6823      	ldr	r3, [r4, #0]
 8011438:	055a      	lsls	r2, r3, #21
 801143a:	d407      	bmi.n	801144c <_printf_float+0x1f8>
 801143c:	6923      	ldr	r3, [r4, #16]
 801143e:	4642      	mov	r2, r8
 8011440:	4631      	mov	r1, r6
 8011442:	4628      	mov	r0, r5
 8011444:	47b8      	blx	r7
 8011446:	3001      	adds	r0, #1
 8011448:	d12c      	bne.n	80114a4 <_printf_float+0x250>
 801144a:	e764      	b.n	8011316 <_printf_float+0xc2>
 801144c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011450:	f240 80e0 	bls.w	8011614 <_printf_float+0x3c0>
 8011454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011458:	2200      	movs	r2, #0
 801145a:	2300      	movs	r3, #0
 801145c:	f7ef fb54 	bl	8000b08 <__aeabi_dcmpeq>
 8011460:	2800      	cmp	r0, #0
 8011462:	d034      	beq.n	80114ce <_printf_float+0x27a>
 8011464:	4a37      	ldr	r2, [pc, #220]	; (8011544 <_printf_float+0x2f0>)
 8011466:	2301      	movs	r3, #1
 8011468:	4631      	mov	r1, r6
 801146a:	4628      	mov	r0, r5
 801146c:	47b8      	blx	r7
 801146e:	3001      	adds	r0, #1
 8011470:	f43f af51 	beq.w	8011316 <_printf_float+0xc2>
 8011474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011478:	429a      	cmp	r2, r3
 801147a:	db02      	blt.n	8011482 <_printf_float+0x22e>
 801147c:	6823      	ldr	r3, [r4, #0]
 801147e:	07d8      	lsls	r0, r3, #31
 8011480:	d510      	bpl.n	80114a4 <_printf_float+0x250>
 8011482:	ee18 3a10 	vmov	r3, s16
 8011486:	4652      	mov	r2, sl
 8011488:	4631      	mov	r1, r6
 801148a:	4628      	mov	r0, r5
 801148c:	47b8      	blx	r7
 801148e:	3001      	adds	r0, #1
 8011490:	f43f af41 	beq.w	8011316 <_printf_float+0xc2>
 8011494:	f04f 0800 	mov.w	r8, #0
 8011498:	f104 091a 	add.w	r9, r4, #26
 801149c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801149e:	3b01      	subs	r3, #1
 80114a0:	4543      	cmp	r3, r8
 80114a2:	dc09      	bgt.n	80114b8 <_printf_float+0x264>
 80114a4:	6823      	ldr	r3, [r4, #0]
 80114a6:	079b      	lsls	r3, r3, #30
 80114a8:	f100 8105 	bmi.w	80116b6 <_printf_float+0x462>
 80114ac:	68e0      	ldr	r0, [r4, #12]
 80114ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114b0:	4298      	cmp	r0, r3
 80114b2:	bfb8      	it	lt
 80114b4:	4618      	movlt	r0, r3
 80114b6:	e730      	b.n	801131a <_printf_float+0xc6>
 80114b8:	2301      	movs	r3, #1
 80114ba:	464a      	mov	r2, r9
 80114bc:	4631      	mov	r1, r6
 80114be:	4628      	mov	r0, r5
 80114c0:	47b8      	blx	r7
 80114c2:	3001      	adds	r0, #1
 80114c4:	f43f af27 	beq.w	8011316 <_printf_float+0xc2>
 80114c8:	f108 0801 	add.w	r8, r8, #1
 80114cc:	e7e6      	b.n	801149c <_printf_float+0x248>
 80114ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	dc39      	bgt.n	8011548 <_printf_float+0x2f4>
 80114d4:	4a1b      	ldr	r2, [pc, #108]	; (8011544 <_printf_float+0x2f0>)
 80114d6:	2301      	movs	r3, #1
 80114d8:	4631      	mov	r1, r6
 80114da:	4628      	mov	r0, r5
 80114dc:	47b8      	blx	r7
 80114de:	3001      	adds	r0, #1
 80114e0:	f43f af19 	beq.w	8011316 <_printf_float+0xc2>
 80114e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80114e8:	4313      	orrs	r3, r2
 80114ea:	d102      	bne.n	80114f2 <_printf_float+0x29e>
 80114ec:	6823      	ldr	r3, [r4, #0]
 80114ee:	07d9      	lsls	r1, r3, #31
 80114f0:	d5d8      	bpl.n	80114a4 <_printf_float+0x250>
 80114f2:	ee18 3a10 	vmov	r3, s16
 80114f6:	4652      	mov	r2, sl
 80114f8:	4631      	mov	r1, r6
 80114fa:	4628      	mov	r0, r5
 80114fc:	47b8      	blx	r7
 80114fe:	3001      	adds	r0, #1
 8011500:	f43f af09 	beq.w	8011316 <_printf_float+0xc2>
 8011504:	f04f 0900 	mov.w	r9, #0
 8011508:	f104 0a1a 	add.w	sl, r4, #26
 801150c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801150e:	425b      	negs	r3, r3
 8011510:	454b      	cmp	r3, r9
 8011512:	dc01      	bgt.n	8011518 <_printf_float+0x2c4>
 8011514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011516:	e792      	b.n	801143e <_printf_float+0x1ea>
 8011518:	2301      	movs	r3, #1
 801151a:	4652      	mov	r2, sl
 801151c:	4631      	mov	r1, r6
 801151e:	4628      	mov	r0, r5
 8011520:	47b8      	blx	r7
 8011522:	3001      	adds	r0, #1
 8011524:	f43f aef7 	beq.w	8011316 <_printf_float+0xc2>
 8011528:	f109 0901 	add.w	r9, r9, #1
 801152c:	e7ee      	b.n	801150c <_printf_float+0x2b8>
 801152e:	bf00      	nop
 8011530:	7fefffff 	.word	0x7fefffff
 8011534:	08016ed0 	.word	0x08016ed0
 8011538:	08016ed4 	.word	0x08016ed4
 801153c:	08016edc 	.word	0x08016edc
 8011540:	08016ed8 	.word	0x08016ed8
 8011544:	08016ee0 	.word	0x08016ee0
 8011548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801154a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801154c:	429a      	cmp	r2, r3
 801154e:	bfa8      	it	ge
 8011550:	461a      	movge	r2, r3
 8011552:	2a00      	cmp	r2, #0
 8011554:	4691      	mov	r9, r2
 8011556:	dc37      	bgt.n	80115c8 <_printf_float+0x374>
 8011558:	f04f 0b00 	mov.w	fp, #0
 801155c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011560:	f104 021a 	add.w	r2, r4, #26
 8011564:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011566:	9305      	str	r3, [sp, #20]
 8011568:	eba3 0309 	sub.w	r3, r3, r9
 801156c:	455b      	cmp	r3, fp
 801156e:	dc33      	bgt.n	80115d8 <_printf_float+0x384>
 8011570:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011574:	429a      	cmp	r2, r3
 8011576:	db3b      	blt.n	80115f0 <_printf_float+0x39c>
 8011578:	6823      	ldr	r3, [r4, #0]
 801157a:	07da      	lsls	r2, r3, #31
 801157c:	d438      	bmi.n	80115f0 <_printf_float+0x39c>
 801157e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011580:	9b05      	ldr	r3, [sp, #20]
 8011582:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011584:	1ad3      	subs	r3, r2, r3
 8011586:	eba2 0901 	sub.w	r9, r2, r1
 801158a:	4599      	cmp	r9, r3
 801158c:	bfa8      	it	ge
 801158e:	4699      	movge	r9, r3
 8011590:	f1b9 0f00 	cmp.w	r9, #0
 8011594:	dc35      	bgt.n	8011602 <_printf_float+0x3ae>
 8011596:	f04f 0800 	mov.w	r8, #0
 801159a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801159e:	f104 0a1a 	add.w	sl, r4, #26
 80115a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80115a6:	1a9b      	subs	r3, r3, r2
 80115a8:	eba3 0309 	sub.w	r3, r3, r9
 80115ac:	4543      	cmp	r3, r8
 80115ae:	f77f af79 	ble.w	80114a4 <_printf_float+0x250>
 80115b2:	2301      	movs	r3, #1
 80115b4:	4652      	mov	r2, sl
 80115b6:	4631      	mov	r1, r6
 80115b8:	4628      	mov	r0, r5
 80115ba:	47b8      	blx	r7
 80115bc:	3001      	adds	r0, #1
 80115be:	f43f aeaa 	beq.w	8011316 <_printf_float+0xc2>
 80115c2:	f108 0801 	add.w	r8, r8, #1
 80115c6:	e7ec      	b.n	80115a2 <_printf_float+0x34e>
 80115c8:	4613      	mov	r3, r2
 80115ca:	4631      	mov	r1, r6
 80115cc:	4642      	mov	r2, r8
 80115ce:	4628      	mov	r0, r5
 80115d0:	47b8      	blx	r7
 80115d2:	3001      	adds	r0, #1
 80115d4:	d1c0      	bne.n	8011558 <_printf_float+0x304>
 80115d6:	e69e      	b.n	8011316 <_printf_float+0xc2>
 80115d8:	2301      	movs	r3, #1
 80115da:	4631      	mov	r1, r6
 80115dc:	4628      	mov	r0, r5
 80115de:	9205      	str	r2, [sp, #20]
 80115e0:	47b8      	blx	r7
 80115e2:	3001      	adds	r0, #1
 80115e4:	f43f ae97 	beq.w	8011316 <_printf_float+0xc2>
 80115e8:	9a05      	ldr	r2, [sp, #20]
 80115ea:	f10b 0b01 	add.w	fp, fp, #1
 80115ee:	e7b9      	b.n	8011564 <_printf_float+0x310>
 80115f0:	ee18 3a10 	vmov	r3, s16
 80115f4:	4652      	mov	r2, sl
 80115f6:	4631      	mov	r1, r6
 80115f8:	4628      	mov	r0, r5
 80115fa:	47b8      	blx	r7
 80115fc:	3001      	adds	r0, #1
 80115fe:	d1be      	bne.n	801157e <_printf_float+0x32a>
 8011600:	e689      	b.n	8011316 <_printf_float+0xc2>
 8011602:	9a05      	ldr	r2, [sp, #20]
 8011604:	464b      	mov	r3, r9
 8011606:	4442      	add	r2, r8
 8011608:	4631      	mov	r1, r6
 801160a:	4628      	mov	r0, r5
 801160c:	47b8      	blx	r7
 801160e:	3001      	adds	r0, #1
 8011610:	d1c1      	bne.n	8011596 <_printf_float+0x342>
 8011612:	e680      	b.n	8011316 <_printf_float+0xc2>
 8011614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011616:	2a01      	cmp	r2, #1
 8011618:	dc01      	bgt.n	801161e <_printf_float+0x3ca>
 801161a:	07db      	lsls	r3, r3, #31
 801161c:	d538      	bpl.n	8011690 <_printf_float+0x43c>
 801161e:	2301      	movs	r3, #1
 8011620:	4642      	mov	r2, r8
 8011622:	4631      	mov	r1, r6
 8011624:	4628      	mov	r0, r5
 8011626:	47b8      	blx	r7
 8011628:	3001      	adds	r0, #1
 801162a:	f43f ae74 	beq.w	8011316 <_printf_float+0xc2>
 801162e:	ee18 3a10 	vmov	r3, s16
 8011632:	4652      	mov	r2, sl
 8011634:	4631      	mov	r1, r6
 8011636:	4628      	mov	r0, r5
 8011638:	47b8      	blx	r7
 801163a:	3001      	adds	r0, #1
 801163c:	f43f ae6b 	beq.w	8011316 <_printf_float+0xc2>
 8011640:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011644:	2200      	movs	r2, #0
 8011646:	2300      	movs	r3, #0
 8011648:	f7ef fa5e 	bl	8000b08 <__aeabi_dcmpeq>
 801164c:	b9d8      	cbnz	r0, 8011686 <_printf_float+0x432>
 801164e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011650:	f108 0201 	add.w	r2, r8, #1
 8011654:	3b01      	subs	r3, #1
 8011656:	4631      	mov	r1, r6
 8011658:	4628      	mov	r0, r5
 801165a:	47b8      	blx	r7
 801165c:	3001      	adds	r0, #1
 801165e:	d10e      	bne.n	801167e <_printf_float+0x42a>
 8011660:	e659      	b.n	8011316 <_printf_float+0xc2>
 8011662:	2301      	movs	r3, #1
 8011664:	4652      	mov	r2, sl
 8011666:	4631      	mov	r1, r6
 8011668:	4628      	mov	r0, r5
 801166a:	47b8      	blx	r7
 801166c:	3001      	adds	r0, #1
 801166e:	f43f ae52 	beq.w	8011316 <_printf_float+0xc2>
 8011672:	f108 0801 	add.w	r8, r8, #1
 8011676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011678:	3b01      	subs	r3, #1
 801167a:	4543      	cmp	r3, r8
 801167c:	dcf1      	bgt.n	8011662 <_printf_float+0x40e>
 801167e:	464b      	mov	r3, r9
 8011680:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011684:	e6dc      	b.n	8011440 <_printf_float+0x1ec>
 8011686:	f04f 0800 	mov.w	r8, #0
 801168a:	f104 0a1a 	add.w	sl, r4, #26
 801168e:	e7f2      	b.n	8011676 <_printf_float+0x422>
 8011690:	2301      	movs	r3, #1
 8011692:	4642      	mov	r2, r8
 8011694:	e7df      	b.n	8011656 <_printf_float+0x402>
 8011696:	2301      	movs	r3, #1
 8011698:	464a      	mov	r2, r9
 801169a:	4631      	mov	r1, r6
 801169c:	4628      	mov	r0, r5
 801169e:	47b8      	blx	r7
 80116a0:	3001      	adds	r0, #1
 80116a2:	f43f ae38 	beq.w	8011316 <_printf_float+0xc2>
 80116a6:	f108 0801 	add.w	r8, r8, #1
 80116aa:	68e3      	ldr	r3, [r4, #12]
 80116ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80116ae:	1a5b      	subs	r3, r3, r1
 80116b0:	4543      	cmp	r3, r8
 80116b2:	dcf0      	bgt.n	8011696 <_printf_float+0x442>
 80116b4:	e6fa      	b.n	80114ac <_printf_float+0x258>
 80116b6:	f04f 0800 	mov.w	r8, #0
 80116ba:	f104 0919 	add.w	r9, r4, #25
 80116be:	e7f4      	b.n	80116aa <_printf_float+0x456>

080116c0 <_printf_common>:
 80116c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116c4:	4616      	mov	r6, r2
 80116c6:	4699      	mov	r9, r3
 80116c8:	688a      	ldr	r2, [r1, #8]
 80116ca:	690b      	ldr	r3, [r1, #16]
 80116cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80116d0:	4293      	cmp	r3, r2
 80116d2:	bfb8      	it	lt
 80116d4:	4613      	movlt	r3, r2
 80116d6:	6033      	str	r3, [r6, #0]
 80116d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80116dc:	4607      	mov	r7, r0
 80116de:	460c      	mov	r4, r1
 80116e0:	b10a      	cbz	r2, 80116e6 <_printf_common+0x26>
 80116e2:	3301      	adds	r3, #1
 80116e4:	6033      	str	r3, [r6, #0]
 80116e6:	6823      	ldr	r3, [r4, #0]
 80116e8:	0699      	lsls	r1, r3, #26
 80116ea:	bf42      	ittt	mi
 80116ec:	6833      	ldrmi	r3, [r6, #0]
 80116ee:	3302      	addmi	r3, #2
 80116f0:	6033      	strmi	r3, [r6, #0]
 80116f2:	6825      	ldr	r5, [r4, #0]
 80116f4:	f015 0506 	ands.w	r5, r5, #6
 80116f8:	d106      	bne.n	8011708 <_printf_common+0x48>
 80116fa:	f104 0a19 	add.w	sl, r4, #25
 80116fe:	68e3      	ldr	r3, [r4, #12]
 8011700:	6832      	ldr	r2, [r6, #0]
 8011702:	1a9b      	subs	r3, r3, r2
 8011704:	42ab      	cmp	r3, r5
 8011706:	dc26      	bgt.n	8011756 <_printf_common+0x96>
 8011708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801170c:	1e13      	subs	r3, r2, #0
 801170e:	6822      	ldr	r2, [r4, #0]
 8011710:	bf18      	it	ne
 8011712:	2301      	movne	r3, #1
 8011714:	0692      	lsls	r2, r2, #26
 8011716:	d42b      	bmi.n	8011770 <_printf_common+0xb0>
 8011718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801171c:	4649      	mov	r1, r9
 801171e:	4638      	mov	r0, r7
 8011720:	47c0      	blx	r8
 8011722:	3001      	adds	r0, #1
 8011724:	d01e      	beq.n	8011764 <_printf_common+0xa4>
 8011726:	6823      	ldr	r3, [r4, #0]
 8011728:	68e5      	ldr	r5, [r4, #12]
 801172a:	6832      	ldr	r2, [r6, #0]
 801172c:	f003 0306 	and.w	r3, r3, #6
 8011730:	2b04      	cmp	r3, #4
 8011732:	bf08      	it	eq
 8011734:	1aad      	subeq	r5, r5, r2
 8011736:	68a3      	ldr	r3, [r4, #8]
 8011738:	6922      	ldr	r2, [r4, #16]
 801173a:	bf0c      	ite	eq
 801173c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011740:	2500      	movne	r5, #0
 8011742:	4293      	cmp	r3, r2
 8011744:	bfc4      	itt	gt
 8011746:	1a9b      	subgt	r3, r3, r2
 8011748:	18ed      	addgt	r5, r5, r3
 801174a:	2600      	movs	r6, #0
 801174c:	341a      	adds	r4, #26
 801174e:	42b5      	cmp	r5, r6
 8011750:	d11a      	bne.n	8011788 <_printf_common+0xc8>
 8011752:	2000      	movs	r0, #0
 8011754:	e008      	b.n	8011768 <_printf_common+0xa8>
 8011756:	2301      	movs	r3, #1
 8011758:	4652      	mov	r2, sl
 801175a:	4649      	mov	r1, r9
 801175c:	4638      	mov	r0, r7
 801175e:	47c0      	blx	r8
 8011760:	3001      	adds	r0, #1
 8011762:	d103      	bne.n	801176c <_printf_common+0xac>
 8011764:	f04f 30ff 	mov.w	r0, #4294967295
 8011768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801176c:	3501      	adds	r5, #1
 801176e:	e7c6      	b.n	80116fe <_printf_common+0x3e>
 8011770:	18e1      	adds	r1, r4, r3
 8011772:	1c5a      	adds	r2, r3, #1
 8011774:	2030      	movs	r0, #48	; 0x30
 8011776:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801177a:	4422      	add	r2, r4
 801177c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011784:	3302      	adds	r3, #2
 8011786:	e7c7      	b.n	8011718 <_printf_common+0x58>
 8011788:	2301      	movs	r3, #1
 801178a:	4622      	mov	r2, r4
 801178c:	4649      	mov	r1, r9
 801178e:	4638      	mov	r0, r7
 8011790:	47c0      	blx	r8
 8011792:	3001      	adds	r0, #1
 8011794:	d0e6      	beq.n	8011764 <_printf_common+0xa4>
 8011796:	3601      	adds	r6, #1
 8011798:	e7d9      	b.n	801174e <_printf_common+0x8e>
	...

0801179c <_printf_i>:
 801179c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80117a0:	460c      	mov	r4, r1
 80117a2:	4691      	mov	r9, r2
 80117a4:	7e27      	ldrb	r7, [r4, #24]
 80117a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80117a8:	2f78      	cmp	r7, #120	; 0x78
 80117aa:	4680      	mov	r8, r0
 80117ac:	469a      	mov	sl, r3
 80117ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80117b2:	d807      	bhi.n	80117c4 <_printf_i+0x28>
 80117b4:	2f62      	cmp	r7, #98	; 0x62
 80117b6:	d80a      	bhi.n	80117ce <_printf_i+0x32>
 80117b8:	2f00      	cmp	r7, #0
 80117ba:	f000 80d8 	beq.w	801196e <_printf_i+0x1d2>
 80117be:	2f58      	cmp	r7, #88	; 0x58
 80117c0:	f000 80a3 	beq.w	801190a <_printf_i+0x16e>
 80117c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80117c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80117cc:	e03a      	b.n	8011844 <_printf_i+0xa8>
 80117ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80117d2:	2b15      	cmp	r3, #21
 80117d4:	d8f6      	bhi.n	80117c4 <_printf_i+0x28>
 80117d6:	a001      	add	r0, pc, #4	; (adr r0, 80117dc <_printf_i+0x40>)
 80117d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80117dc:	08011835 	.word	0x08011835
 80117e0:	08011849 	.word	0x08011849
 80117e4:	080117c5 	.word	0x080117c5
 80117e8:	080117c5 	.word	0x080117c5
 80117ec:	080117c5 	.word	0x080117c5
 80117f0:	080117c5 	.word	0x080117c5
 80117f4:	08011849 	.word	0x08011849
 80117f8:	080117c5 	.word	0x080117c5
 80117fc:	080117c5 	.word	0x080117c5
 8011800:	080117c5 	.word	0x080117c5
 8011804:	080117c5 	.word	0x080117c5
 8011808:	08011955 	.word	0x08011955
 801180c:	08011879 	.word	0x08011879
 8011810:	08011937 	.word	0x08011937
 8011814:	080117c5 	.word	0x080117c5
 8011818:	080117c5 	.word	0x080117c5
 801181c:	08011977 	.word	0x08011977
 8011820:	080117c5 	.word	0x080117c5
 8011824:	08011879 	.word	0x08011879
 8011828:	080117c5 	.word	0x080117c5
 801182c:	080117c5 	.word	0x080117c5
 8011830:	0801193f 	.word	0x0801193f
 8011834:	680b      	ldr	r3, [r1, #0]
 8011836:	1d1a      	adds	r2, r3, #4
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	600a      	str	r2, [r1, #0]
 801183c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011844:	2301      	movs	r3, #1
 8011846:	e0a3      	b.n	8011990 <_printf_i+0x1f4>
 8011848:	6825      	ldr	r5, [r4, #0]
 801184a:	6808      	ldr	r0, [r1, #0]
 801184c:	062e      	lsls	r6, r5, #24
 801184e:	f100 0304 	add.w	r3, r0, #4
 8011852:	d50a      	bpl.n	801186a <_printf_i+0xce>
 8011854:	6805      	ldr	r5, [r0, #0]
 8011856:	600b      	str	r3, [r1, #0]
 8011858:	2d00      	cmp	r5, #0
 801185a:	da03      	bge.n	8011864 <_printf_i+0xc8>
 801185c:	232d      	movs	r3, #45	; 0x2d
 801185e:	426d      	negs	r5, r5
 8011860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011864:	485e      	ldr	r0, [pc, #376]	; (80119e0 <_printf_i+0x244>)
 8011866:	230a      	movs	r3, #10
 8011868:	e019      	b.n	801189e <_printf_i+0x102>
 801186a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801186e:	6805      	ldr	r5, [r0, #0]
 8011870:	600b      	str	r3, [r1, #0]
 8011872:	bf18      	it	ne
 8011874:	b22d      	sxthne	r5, r5
 8011876:	e7ef      	b.n	8011858 <_printf_i+0xbc>
 8011878:	680b      	ldr	r3, [r1, #0]
 801187a:	6825      	ldr	r5, [r4, #0]
 801187c:	1d18      	adds	r0, r3, #4
 801187e:	6008      	str	r0, [r1, #0]
 8011880:	0628      	lsls	r0, r5, #24
 8011882:	d501      	bpl.n	8011888 <_printf_i+0xec>
 8011884:	681d      	ldr	r5, [r3, #0]
 8011886:	e002      	b.n	801188e <_printf_i+0xf2>
 8011888:	0669      	lsls	r1, r5, #25
 801188a:	d5fb      	bpl.n	8011884 <_printf_i+0xe8>
 801188c:	881d      	ldrh	r5, [r3, #0]
 801188e:	4854      	ldr	r0, [pc, #336]	; (80119e0 <_printf_i+0x244>)
 8011890:	2f6f      	cmp	r7, #111	; 0x6f
 8011892:	bf0c      	ite	eq
 8011894:	2308      	moveq	r3, #8
 8011896:	230a      	movne	r3, #10
 8011898:	2100      	movs	r1, #0
 801189a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801189e:	6866      	ldr	r6, [r4, #4]
 80118a0:	60a6      	str	r6, [r4, #8]
 80118a2:	2e00      	cmp	r6, #0
 80118a4:	bfa2      	ittt	ge
 80118a6:	6821      	ldrge	r1, [r4, #0]
 80118a8:	f021 0104 	bicge.w	r1, r1, #4
 80118ac:	6021      	strge	r1, [r4, #0]
 80118ae:	b90d      	cbnz	r5, 80118b4 <_printf_i+0x118>
 80118b0:	2e00      	cmp	r6, #0
 80118b2:	d04d      	beq.n	8011950 <_printf_i+0x1b4>
 80118b4:	4616      	mov	r6, r2
 80118b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80118ba:	fb03 5711 	mls	r7, r3, r1, r5
 80118be:	5dc7      	ldrb	r7, [r0, r7]
 80118c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80118c4:	462f      	mov	r7, r5
 80118c6:	42bb      	cmp	r3, r7
 80118c8:	460d      	mov	r5, r1
 80118ca:	d9f4      	bls.n	80118b6 <_printf_i+0x11a>
 80118cc:	2b08      	cmp	r3, #8
 80118ce:	d10b      	bne.n	80118e8 <_printf_i+0x14c>
 80118d0:	6823      	ldr	r3, [r4, #0]
 80118d2:	07df      	lsls	r7, r3, #31
 80118d4:	d508      	bpl.n	80118e8 <_printf_i+0x14c>
 80118d6:	6923      	ldr	r3, [r4, #16]
 80118d8:	6861      	ldr	r1, [r4, #4]
 80118da:	4299      	cmp	r1, r3
 80118dc:	bfde      	ittt	le
 80118de:	2330      	movle	r3, #48	; 0x30
 80118e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80118e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80118e8:	1b92      	subs	r2, r2, r6
 80118ea:	6122      	str	r2, [r4, #16]
 80118ec:	f8cd a000 	str.w	sl, [sp]
 80118f0:	464b      	mov	r3, r9
 80118f2:	aa03      	add	r2, sp, #12
 80118f4:	4621      	mov	r1, r4
 80118f6:	4640      	mov	r0, r8
 80118f8:	f7ff fee2 	bl	80116c0 <_printf_common>
 80118fc:	3001      	adds	r0, #1
 80118fe:	d14c      	bne.n	801199a <_printf_i+0x1fe>
 8011900:	f04f 30ff 	mov.w	r0, #4294967295
 8011904:	b004      	add	sp, #16
 8011906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801190a:	4835      	ldr	r0, [pc, #212]	; (80119e0 <_printf_i+0x244>)
 801190c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011910:	6823      	ldr	r3, [r4, #0]
 8011912:	680e      	ldr	r6, [r1, #0]
 8011914:	061f      	lsls	r7, r3, #24
 8011916:	f856 5b04 	ldr.w	r5, [r6], #4
 801191a:	600e      	str	r6, [r1, #0]
 801191c:	d514      	bpl.n	8011948 <_printf_i+0x1ac>
 801191e:	07d9      	lsls	r1, r3, #31
 8011920:	bf44      	itt	mi
 8011922:	f043 0320 	orrmi.w	r3, r3, #32
 8011926:	6023      	strmi	r3, [r4, #0]
 8011928:	b91d      	cbnz	r5, 8011932 <_printf_i+0x196>
 801192a:	6823      	ldr	r3, [r4, #0]
 801192c:	f023 0320 	bic.w	r3, r3, #32
 8011930:	6023      	str	r3, [r4, #0]
 8011932:	2310      	movs	r3, #16
 8011934:	e7b0      	b.n	8011898 <_printf_i+0xfc>
 8011936:	6823      	ldr	r3, [r4, #0]
 8011938:	f043 0320 	orr.w	r3, r3, #32
 801193c:	6023      	str	r3, [r4, #0]
 801193e:	2378      	movs	r3, #120	; 0x78
 8011940:	4828      	ldr	r0, [pc, #160]	; (80119e4 <_printf_i+0x248>)
 8011942:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011946:	e7e3      	b.n	8011910 <_printf_i+0x174>
 8011948:	065e      	lsls	r6, r3, #25
 801194a:	bf48      	it	mi
 801194c:	b2ad      	uxthmi	r5, r5
 801194e:	e7e6      	b.n	801191e <_printf_i+0x182>
 8011950:	4616      	mov	r6, r2
 8011952:	e7bb      	b.n	80118cc <_printf_i+0x130>
 8011954:	680b      	ldr	r3, [r1, #0]
 8011956:	6826      	ldr	r6, [r4, #0]
 8011958:	6960      	ldr	r0, [r4, #20]
 801195a:	1d1d      	adds	r5, r3, #4
 801195c:	600d      	str	r5, [r1, #0]
 801195e:	0635      	lsls	r5, r6, #24
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	d501      	bpl.n	8011968 <_printf_i+0x1cc>
 8011964:	6018      	str	r0, [r3, #0]
 8011966:	e002      	b.n	801196e <_printf_i+0x1d2>
 8011968:	0671      	lsls	r1, r6, #25
 801196a:	d5fb      	bpl.n	8011964 <_printf_i+0x1c8>
 801196c:	8018      	strh	r0, [r3, #0]
 801196e:	2300      	movs	r3, #0
 8011970:	6123      	str	r3, [r4, #16]
 8011972:	4616      	mov	r6, r2
 8011974:	e7ba      	b.n	80118ec <_printf_i+0x150>
 8011976:	680b      	ldr	r3, [r1, #0]
 8011978:	1d1a      	adds	r2, r3, #4
 801197a:	600a      	str	r2, [r1, #0]
 801197c:	681e      	ldr	r6, [r3, #0]
 801197e:	6862      	ldr	r2, [r4, #4]
 8011980:	2100      	movs	r1, #0
 8011982:	4630      	mov	r0, r6
 8011984:	f7ee fc4c 	bl	8000220 <memchr>
 8011988:	b108      	cbz	r0, 801198e <_printf_i+0x1f2>
 801198a:	1b80      	subs	r0, r0, r6
 801198c:	6060      	str	r0, [r4, #4]
 801198e:	6863      	ldr	r3, [r4, #4]
 8011990:	6123      	str	r3, [r4, #16]
 8011992:	2300      	movs	r3, #0
 8011994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011998:	e7a8      	b.n	80118ec <_printf_i+0x150>
 801199a:	6923      	ldr	r3, [r4, #16]
 801199c:	4632      	mov	r2, r6
 801199e:	4649      	mov	r1, r9
 80119a0:	4640      	mov	r0, r8
 80119a2:	47d0      	blx	sl
 80119a4:	3001      	adds	r0, #1
 80119a6:	d0ab      	beq.n	8011900 <_printf_i+0x164>
 80119a8:	6823      	ldr	r3, [r4, #0]
 80119aa:	079b      	lsls	r3, r3, #30
 80119ac:	d413      	bmi.n	80119d6 <_printf_i+0x23a>
 80119ae:	68e0      	ldr	r0, [r4, #12]
 80119b0:	9b03      	ldr	r3, [sp, #12]
 80119b2:	4298      	cmp	r0, r3
 80119b4:	bfb8      	it	lt
 80119b6:	4618      	movlt	r0, r3
 80119b8:	e7a4      	b.n	8011904 <_printf_i+0x168>
 80119ba:	2301      	movs	r3, #1
 80119bc:	4632      	mov	r2, r6
 80119be:	4649      	mov	r1, r9
 80119c0:	4640      	mov	r0, r8
 80119c2:	47d0      	blx	sl
 80119c4:	3001      	adds	r0, #1
 80119c6:	d09b      	beq.n	8011900 <_printf_i+0x164>
 80119c8:	3501      	adds	r5, #1
 80119ca:	68e3      	ldr	r3, [r4, #12]
 80119cc:	9903      	ldr	r1, [sp, #12]
 80119ce:	1a5b      	subs	r3, r3, r1
 80119d0:	42ab      	cmp	r3, r5
 80119d2:	dcf2      	bgt.n	80119ba <_printf_i+0x21e>
 80119d4:	e7eb      	b.n	80119ae <_printf_i+0x212>
 80119d6:	2500      	movs	r5, #0
 80119d8:	f104 0619 	add.w	r6, r4, #25
 80119dc:	e7f5      	b.n	80119ca <_printf_i+0x22e>
 80119de:	bf00      	nop
 80119e0:	08016ee2 	.word	0x08016ee2
 80119e4:	08016ef3 	.word	0x08016ef3

080119e8 <iprintf>:
 80119e8:	b40f      	push	{r0, r1, r2, r3}
 80119ea:	4b0a      	ldr	r3, [pc, #40]	; (8011a14 <iprintf+0x2c>)
 80119ec:	b513      	push	{r0, r1, r4, lr}
 80119ee:	681c      	ldr	r4, [r3, #0]
 80119f0:	b124      	cbz	r4, 80119fc <iprintf+0x14>
 80119f2:	69a3      	ldr	r3, [r4, #24]
 80119f4:	b913      	cbnz	r3, 80119fc <iprintf+0x14>
 80119f6:	4620      	mov	r0, r4
 80119f8:	f7ff fa56 	bl	8010ea8 <__sinit>
 80119fc:	ab05      	add	r3, sp, #20
 80119fe:	9a04      	ldr	r2, [sp, #16]
 8011a00:	68a1      	ldr	r1, [r4, #8]
 8011a02:	9301      	str	r3, [sp, #4]
 8011a04:	4620      	mov	r0, r4
 8011a06:	f001 ff73 	bl	80138f0 <_vfiprintf_r>
 8011a0a:	b002      	add	sp, #8
 8011a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a10:	b004      	add	sp, #16
 8011a12:	4770      	bx	lr
 8011a14:	200002cc 	.word	0x200002cc

08011a18 <_puts_r>:
 8011a18:	b570      	push	{r4, r5, r6, lr}
 8011a1a:	460e      	mov	r6, r1
 8011a1c:	4605      	mov	r5, r0
 8011a1e:	b118      	cbz	r0, 8011a28 <_puts_r+0x10>
 8011a20:	6983      	ldr	r3, [r0, #24]
 8011a22:	b90b      	cbnz	r3, 8011a28 <_puts_r+0x10>
 8011a24:	f7ff fa40 	bl	8010ea8 <__sinit>
 8011a28:	69ab      	ldr	r3, [r5, #24]
 8011a2a:	68ac      	ldr	r4, [r5, #8]
 8011a2c:	b913      	cbnz	r3, 8011a34 <_puts_r+0x1c>
 8011a2e:	4628      	mov	r0, r5
 8011a30:	f7ff fa3a 	bl	8010ea8 <__sinit>
 8011a34:	4b2c      	ldr	r3, [pc, #176]	; (8011ae8 <_puts_r+0xd0>)
 8011a36:	429c      	cmp	r4, r3
 8011a38:	d120      	bne.n	8011a7c <_puts_r+0x64>
 8011a3a:	686c      	ldr	r4, [r5, #4]
 8011a3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a3e:	07db      	lsls	r3, r3, #31
 8011a40:	d405      	bmi.n	8011a4e <_puts_r+0x36>
 8011a42:	89a3      	ldrh	r3, [r4, #12]
 8011a44:	0598      	lsls	r0, r3, #22
 8011a46:	d402      	bmi.n	8011a4e <_puts_r+0x36>
 8011a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a4a:	f7ff faf0 	bl	801102e <__retarget_lock_acquire_recursive>
 8011a4e:	89a3      	ldrh	r3, [r4, #12]
 8011a50:	0719      	lsls	r1, r3, #28
 8011a52:	d51d      	bpl.n	8011a90 <_puts_r+0x78>
 8011a54:	6923      	ldr	r3, [r4, #16]
 8011a56:	b1db      	cbz	r3, 8011a90 <_puts_r+0x78>
 8011a58:	3e01      	subs	r6, #1
 8011a5a:	68a3      	ldr	r3, [r4, #8]
 8011a5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011a60:	3b01      	subs	r3, #1
 8011a62:	60a3      	str	r3, [r4, #8]
 8011a64:	bb39      	cbnz	r1, 8011ab6 <_puts_r+0x9e>
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	da38      	bge.n	8011adc <_puts_r+0xc4>
 8011a6a:	4622      	mov	r2, r4
 8011a6c:	210a      	movs	r1, #10
 8011a6e:	4628      	mov	r0, r5
 8011a70:	f000 f92e 	bl	8011cd0 <__swbuf_r>
 8011a74:	3001      	adds	r0, #1
 8011a76:	d011      	beq.n	8011a9c <_puts_r+0x84>
 8011a78:	250a      	movs	r5, #10
 8011a7a:	e011      	b.n	8011aa0 <_puts_r+0x88>
 8011a7c:	4b1b      	ldr	r3, [pc, #108]	; (8011aec <_puts_r+0xd4>)
 8011a7e:	429c      	cmp	r4, r3
 8011a80:	d101      	bne.n	8011a86 <_puts_r+0x6e>
 8011a82:	68ac      	ldr	r4, [r5, #8]
 8011a84:	e7da      	b.n	8011a3c <_puts_r+0x24>
 8011a86:	4b1a      	ldr	r3, [pc, #104]	; (8011af0 <_puts_r+0xd8>)
 8011a88:	429c      	cmp	r4, r3
 8011a8a:	bf08      	it	eq
 8011a8c:	68ec      	ldreq	r4, [r5, #12]
 8011a8e:	e7d5      	b.n	8011a3c <_puts_r+0x24>
 8011a90:	4621      	mov	r1, r4
 8011a92:	4628      	mov	r0, r5
 8011a94:	f000 f980 	bl	8011d98 <__swsetup_r>
 8011a98:	2800      	cmp	r0, #0
 8011a9a:	d0dd      	beq.n	8011a58 <_puts_r+0x40>
 8011a9c:	f04f 35ff 	mov.w	r5, #4294967295
 8011aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011aa2:	07da      	lsls	r2, r3, #31
 8011aa4:	d405      	bmi.n	8011ab2 <_puts_r+0x9a>
 8011aa6:	89a3      	ldrh	r3, [r4, #12]
 8011aa8:	059b      	lsls	r3, r3, #22
 8011aaa:	d402      	bmi.n	8011ab2 <_puts_r+0x9a>
 8011aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011aae:	f7ff fabf 	bl	8011030 <__retarget_lock_release_recursive>
 8011ab2:	4628      	mov	r0, r5
 8011ab4:	bd70      	pop	{r4, r5, r6, pc}
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	da04      	bge.n	8011ac4 <_puts_r+0xac>
 8011aba:	69a2      	ldr	r2, [r4, #24]
 8011abc:	429a      	cmp	r2, r3
 8011abe:	dc06      	bgt.n	8011ace <_puts_r+0xb6>
 8011ac0:	290a      	cmp	r1, #10
 8011ac2:	d004      	beq.n	8011ace <_puts_r+0xb6>
 8011ac4:	6823      	ldr	r3, [r4, #0]
 8011ac6:	1c5a      	adds	r2, r3, #1
 8011ac8:	6022      	str	r2, [r4, #0]
 8011aca:	7019      	strb	r1, [r3, #0]
 8011acc:	e7c5      	b.n	8011a5a <_puts_r+0x42>
 8011ace:	4622      	mov	r2, r4
 8011ad0:	4628      	mov	r0, r5
 8011ad2:	f000 f8fd 	bl	8011cd0 <__swbuf_r>
 8011ad6:	3001      	adds	r0, #1
 8011ad8:	d1bf      	bne.n	8011a5a <_puts_r+0x42>
 8011ada:	e7df      	b.n	8011a9c <_puts_r+0x84>
 8011adc:	6823      	ldr	r3, [r4, #0]
 8011ade:	250a      	movs	r5, #10
 8011ae0:	1c5a      	adds	r2, r3, #1
 8011ae2:	6022      	str	r2, [r4, #0]
 8011ae4:	701d      	strb	r5, [r3, #0]
 8011ae6:	e7db      	b.n	8011aa0 <_puts_r+0x88>
 8011ae8:	08016e8c 	.word	0x08016e8c
 8011aec:	08016eac 	.word	0x08016eac
 8011af0:	08016e6c 	.word	0x08016e6c

08011af4 <puts>:
 8011af4:	4b02      	ldr	r3, [pc, #8]	; (8011b00 <puts+0xc>)
 8011af6:	4601      	mov	r1, r0
 8011af8:	6818      	ldr	r0, [r3, #0]
 8011afa:	f7ff bf8d 	b.w	8011a18 <_puts_r>
 8011afe:	bf00      	nop
 8011b00:	200002cc 	.word	0x200002cc

08011b04 <cleanup_glue>:
 8011b04:	b538      	push	{r3, r4, r5, lr}
 8011b06:	460c      	mov	r4, r1
 8011b08:	6809      	ldr	r1, [r1, #0]
 8011b0a:	4605      	mov	r5, r0
 8011b0c:	b109      	cbz	r1, 8011b12 <cleanup_glue+0xe>
 8011b0e:	f7ff fff9 	bl	8011b04 <cleanup_glue>
 8011b12:	4621      	mov	r1, r4
 8011b14:	4628      	mov	r0, r5
 8011b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b1a:	f001 bd13 	b.w	8013544 <_free_r>
	...

08011b20 <_reclaim_reent>:
 8011b20:	4b2c      	ldr	r3, [pc, #176]	; (8011bd4 <_reclaim_reent+0xb4>)
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	4283      	cmp	r3, r0
 8011b26:	b570      	push	{r4, r5, r6, lr}
 8011b28:	4604      	mov	r4, r0
 8011b2a:	d051      	beq.n	8011bd0 <_reclaim_reent+0xb0>
 8011b2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011b2e:	b143      	cbz	r3, 8011b42 <_reclaim_reent+0x22>
 8011b30:	68db      	ldr	r3, [r3, #12]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d14a      	bne.n	8011bcc <_reclaim_reent+0xac>
 8011b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b38:	6819      	ldr	r1, [r3, #0]
 8011b3a:	b111      	cbz	r1, 8011b42 <_reclaim_reent+0x22>
 8011b3c:	4620      	mov	r0, r4
 8011b3e:	f001 fd01 	bl	8013544 <_free_r>
 8011b42:	6961      	ldr	r1, [r4, #20]
 8011b44:	b111      	cbz	r1, 8011b4c <_reclaim_reent+0x2c>
 8011b46:	4620      	mov	r0, r4
 8011b48:	f001 fcfc 	bl	8013544 <_free_r>
 8011b4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011b4e:	b111      	cbz	r1, 8011b56 <_reclaim_reent+0x36>
 8011b50:	4620      	mov	r0, r4
 8011b52:	f001 fcf7 	bl	8013544 <_free_r>
 8011b56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011b58:	b111      	cbz	r1, 8011b60 <_reclaim_reent+0x40>
 8011b5a:	4620      	mov	r0, r4
 8011b5c:	f001 fcf2 	bl	8013544 <_free_r>
 8011b60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011b62:	b111      	cbz	r1, 8011b6a <_reclaim_reent+0x4a>
 8011b64:	4620      	mov	r0, r4
 8011b66:	f001 fced 	bl	8013544 <_free_r>
 8011b6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011b6c:	b111      	cbz	r1, 8011b74 <_reclaim_reent+0x54>
 8011b6e:	4620      	mov	r0, r4
 8011b70:	f001 fce8 	bl	8013544 <_free_r>
 8011b74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011b76:	b111      	cbz	r1, 8011b7e <_reclaim_reent+0x5e>
 8011b78:	4620      	mov	r0, r4
 8011b7a:	f001 fce3 	bl	8013544 <_free_r>
 8011b7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011b80:	b111      	cbz	r1, 8011b88 <_reclaim_reent+0x68>
 8011b82:	4620      	mov	r0, r4
 8011b84:	f001 fcde 	bl	8013544 <_free_r>
 8011b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b8a:	b111      	cbz	r1, 8011b92 <_reclaim_reent+0x72>
 8011b8c:	4620      	mov	r0, r4
 8011b8e:	f001 fcd9 	bl	8013544 <_free_r>
 8011b92:	69a3      	ldr	r3, [r4, #24]
 8011b94:	b1e3      	cbz	r3, 8011bd0 <_reclaim_reent+0xb0>
 8011b96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011b98:	4620      	mov	r0, r4
 8011b9a:	4798      	blx	r3
 8011b9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011b9e:	b1b9      	cbz	r1, 8011bd0 <_reclaim_reent+0xb0>
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ba6:	f7ff bfad 	b.w	8011b04 <cleanup_glue>
 8011baa:	5949      	ldr	r1, [r1, r5]
 8011bac:	b941      	cbnz	r1, 8011bc0 <_reclaim_reent+0xa0>
 8011bae:	3504      	adds	r5, #4
 8011bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011bb2:	2d80      	cmp	r5, #128	; 0x80
 8011bb4:	68d9      	ldr	r1, [r3, #12]
 8011bb6:	d1f8      	bne.n	8011baa <_reclaim_reent+0x8a>
 8011bb8:	4620      	mov	r0, r4
 8011bba:	f001 fcc3 	bl	8013544 <_free_r>
 8011bbe:	e7ba      	b.n	8011b36 <_reclaim_reent+0x16>
 8011bc0:	680e      	ldr	r6, [r1, #0]
 8011bc2:	4620      	mov	r0, r4
 8011bc4:	f001 fcbe 	bl	8013544 <_free_r>
 8011bc8:	4631      	mov	r1, r6
 8011bca:	e7ef      	b.n	8011bac <_reclaim_reent+0x8c>
 8011bcc:	2500      	movs	r5, #0
 8011bce:	e7ef      	b.n	8011bb0 <_reclaim_reent+0x90>
 8011bd0:	bd70      	pop	{r4, r5, r6, pc}
 8011bd2:	bf00      	nop
 8011bd4:	200002cc 	.word	0x200002cc

08011bd8 <_sbrk_r>:
 8011bd8:	b538      	push	{r3, r4, r5, lr}
 8011bda:	4d06      	ldr	r5, [pc, #24]	; (8011bf4 <_sbrk_r+0x1c>)
 8011bdc:	2300      	movs	r3, #0
 8011bde:	4604      	mov	r4, r0
 8011be0:	4608      	mov	r0, r1
 8011be2:	602b      	str	r3, [r5, #0]
 8011be4:	f7f2 f8de 	bl	8003da4 <_sbrk>
 8011be8:	1c43      	adds	r3, r0, #1
 8011bea:	d102      	bne.n	8011bf2 <_sbrk_r+0x1a>
 8011bec:	682b      	ldr	r3, [r5, #0]
 8011bee:	b103      	cbz	r3, 8011bf2 <_sbrk_r+0x1a>
 8011bf0:	6023      	str	r3, [r4, #0]
 8011bf2:	bd38      	pop	{r3, r4, r5, pc}
 8011bf4:	20004e98 	.word	0x20004e98

08011bf8 <siprintf>:
 8011bf8:	b40e      	push	{r1, r2, r3}
 8011bfa:	b500      	push	{lr}
 8011bfc:	b09c      	sub	sp, #112	; 0x70
 8011bfe:	ab1d      	add	r3, sp, #116	; 0x74
 8011c00:	9002      	str	r0, [sp, #8]
 8011c02:	9006      	str	r0, [sp, #24]
 8011c04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011c08:	4809      	ldr	r0, [pc, #36]	; (8011c30 <siprintf+0x38>)
 8011c0a:	9107      	str	r1, [sp, #28]
 8011c0c:	9104      	str	r1, [sp, #16]
 8011c0e:	4909      	ldr	r1, [pc, #36]	; (8011c34 <siprintf+0x3c>)
 8011c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c14:	9105      	str	r1, [sp, #20]
 8011c16:	6800      	ldr	r0, [r0, #0]
 8011c18:	9301      	str	r3, [sp, #4]
 8011c1a:	a902      	add	r1, sp, #8
 8011c1c:	f001 fd3e 	bl	801369c <_svfiprintf_r>
 8011c20:	9b02      	ldr	r3, [sp, #8]
 8011c22:	2200      	movs	r2, #0
 8011c24:	701a      	strb	r2, [r3, #0]
 8011c26:	b01c      	add	sp, #112	; 0x70
 8011c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c2c:	b003      	add	sp, #12
 8011c2e:	4770      	bx	lr
 8011c30:	200002cc 	.word	0x200002cc
 8011c34:	ffff0208 	.word	0xffff0208

08011c38 <__sread>:
 8011c38:	b510      	push	{r4, lr}
 8011c3a:	460c      	mov	r4, r1
 8011c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c40:	f001 ff86 	bl	8013b50 <_read_r>
 8011c44:	2800      	cmp	r0, #0
 8011c46:	bfab      	itete	ge
 8011c48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011c4a:	89a3      	ldrhlt	r3, [r4, #12]
 8011c4c:	181b      	addge	r3, r3, r0
 8011c4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011c52:	bfac      	ite	ge
 8011c54:	6563      	strge	r3, [r4, #84]	; 0x54
 8011c56:	81a3      	strhlt	r3, [r4, #12]
 8011c58:	bd10      	pop	{r4, pc}

08011c5a <__swrite>:
 8011c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c5e:	461f      	mov	r7, r3
 8011c60:	898b      	ldrh	r3, [r1, #12]
 8011c62:	05db      	lsls	r3, r3, #23
 8011c64:	4605      	mov	r5, r0
 8011c66:	460c      	mov	r4, r1
 8011c68:	4616      	mov	r6, r2
 8011c6a:	d505      	bpl.n	8011c78 <__swrite+0x1e>
 8011c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c70:	2302      	movs	r3, #2
 8011c72:	2200      	movs	r2, #0
 8011c74:	f001 f84e 	bl	8012d14 <_lseek_r>
 8011c78:	89a3      	ldrh	r3, [r4, #12]
 8011c7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011c82:	81a3      	strh	r3, [r4, #12]
 8011c84:	4632      	mov	r2, r6
 8011c86:	463b      	mov	r3, r7
 8011c88:	4628      	mov	r0, r5
 8011c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c8e:	f000 b871 	b.w	8011d74 <_write_r>

08011c92 <__sseek>:
 8011c92:	b510      	push	{r4, lr}
 8011c94:	460c      	mov	r4, r1
 8011c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c9a:	f001 f83b 	bl	8012d14 <_lseek_r>
 8011c9e:	1c43      	adds	r3, r0, #1
 8011ca0:	89a3      	ldrh	r3, [r4, #12]
 8011ca2:	bf15      	itete	ne
 8011ca4:	6560      	strne	r0, [r4, #84]	; 0x54
 8011ca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011caa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011cae:	81a3      	strheq	r3, [r4, #12]
 8011cb0:	bf18      	it	ne
 8011cb2:	81a3      	strhne	r3, [r4, #12]
 8011cb4:	bd10      	pop	{r4, pc}

08011cb6 <__sclose>:
 8011cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cba:	f000 b8db 	b.w	8011e74 <_close_r>

08011cbe <strcpy>:
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011cc4:	f803 2b01 	strb.w	r2, [r3], #1
 8011cc8:	2a00      	cmp	r2, #0
 8011cca:	d1f9      	bne.n	8011cc0 <strcpy+0x2>
 8011ccc:	4770      	bx	lr
	...

08011cd0 <__swbuf_r>:
 8011cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cd2:	460e      	mov	r6, r1
 8011cd4:	4614      	mov	r4, r2
 8011cd6:	4605      	mov	r5, r0
 8011cd8:	b118      	cbz	r0, 8011ce2 <__swbuf_r+0x12>
 8011cda:	6983      	ldr	r3, [r0, #24]
 8011cdc:	b90b      	cbnz	r3, 8011ce2 <__swbuf_r+0x12>
 8011cde:	f7ff f8e3 	bl	8010ea8 <__sinit>
 8011ce2:	4b21      	ldr	r3, [pc, #132]	; (8011d68 <__swbuf_r+0x98>)
 8011ce4:	429c      	cmp	r4, r3
 8011ce6:	d12b      	bne.n	8011d40 <__swbuf_r+0x70>
 8011ce8:	686c      	ldr	r4, [r5, #4]
 8011cea:	69a3      	ldr	r3, [r4, #24]
 8011cec:	60a3      	str	r3, [r4, #8]
 8011cee:	89a3      	ldrh	r3, [r4, #12]
 8011cf0:	071a      	lsls	r2, r3, #28
 8011cf2:	d52f      	bpl.n	8011d54 <__swbuf_r+0x84>
 8011cf4:	6923      	ldr	r3, [r4, #16]
 8011cf6:	b36b      	cbz	r3, 8011d54 <__swbuf_r+0x84>
 8011cf8:	6923      	ldr	r3, [r4, #16]
 8011cfa:	6820      	ldr	r0, [r4, #0]
 8011cfc:	1ac0      	subs	r0, r0, r3
 8011cfe:	6963      	ldr	r3, [r4, #20]
 8011d00:	b2f6      	uxtb	r6, r6
 8011d02:	4283      	cmp	r3, r0
 8011d04:	4637      	mov	r7, r6
 8011d06:	dc04      	bgt.n	8011d12 <__swbuf_r+0x42>
 8011d08:	4621      	mov	r1, r4
 8011d0a:	4628      	mov	r0, r5
 8011d0c:	f000 ffc2 	bl	8012c94 <_fflush_r>
 8011d10:	bb30      	cbnz	r0, 8011d60 <__swbuf_r+0x90>
 8011d12:	68a3      	ldr	r3, [r4, #8]
 8011d14:	3b01      	subs	r3, #1
 8011d16:	60a3      	str	r3, [r4, #8]
 8011d18:	6823      	ldr	r3, [r4, #0]
 8011d1a:	1c5a      	adds	r2, r3, #1
 8011d1c:	6022      	str	r2, [r4, #0]
 8011d1e:	701e      	strb	r6, [r3, #0]
 8011d20:	6963      	ldr	r3, [r4, #20]
 8011d22:	3001      	adds	r0, #1
 8011d24:	4283      	cmp	r3, r0
 8011d26:	d004      	beq.n	8011d32 <__swbuf_r+0x62>
 8011d28:	89a3      	ldrh	r3, [r4, #12]
 8011d2a:	07db      	lsls	r3, r3, #31
 8011d2c:	d506      	bpl.n	8011d3c <__swbuf_r+0x6c>
 8011d2e:	2e0a      	cmp	r6, #10
 8011d30:	d104      	bne.n	8011d3c <__swbuf_r+0x6c>
 8011d32:	4621      	mov	r1, r4
 8011d34:	4628      	mov	r0, r5
 8011d36:	f000 ffad 	bl	8012c94 <_fflush_r>
 8011d3a:	b988      	cbnz	r0, 8011d60 <__swbuf_r+0x90>
 8011d3c:	4638      	mov	r0, r7
 8011d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d40:	4b0a      	ldr	r3, [pc, #40]	; (8011d6c <__swbuf_r+0x9c>)
 8011d42:	429c      	cmp	r4, r3
 8011d44:	d101      	bne.n	8011d4a <__swbuf_r+0x7a>
 8011d46:	68ac      	ldr	r4, [r5, #8]
 8011d48:	e7cf      	b.n	8011cea <__swbuf_r+0x1a>
 8011d4a:	4b09      	ldr	r3, [pc, #36]	; (8011d70 <__swbuf_r+0xa0>)
 8011d4c:	429c      	cmp	r4, r3
 8011d4e:	bf08      	it	eq
 8011d50:	68ec      	ldreq	r4, [r5, #12]
 8011d52:	e7ca      	b.n	8011cea <__swbuf_r+0x1a>
 8011d54:	4621      	mov	r1, r4
 8011d56:	4628      	mov	r0, r5
 8011d58:	f000 f81e 	bl	8011d98 <__swsetup_r>
 8011d5c:	2800      	cmp	r0, #0
 8011d5e:	d0cb      	beq.n	8011cf8 <__swbuf_r+0x28>
 8011d60:	f04f 37ff 	mov.w	r7, #4294967295
 8011d64:	e7ea      	b.n	8011d3c <__swbuf_r+0x6c>
 8011d66:	bf00      	nop
 8011d68:	08016e8c 	.word	0x08016e8c
 8011d6c:	08016eac 	.word	0x08016eac
 8011d70:	08016e6c 	.word	0x08016e6c

08011d74 <_write_r>:
 8011d74:	b538      	push	{r3, r4, r5, lr}
 8011d76:	4d07      	ldr	r5, [pc, #28]	; (8011d94 <_write_r+0x20>)
 8011d78:	4604      	mov	r4, r0
 8011d7a:	4608      	mov	r0, r1
 8011d7c:	4611      	mov	r1, r2
 8011d7e:	2200      	movs	r2, #0
 8011d80:	602a      	str	r2, [r5, #0]
 8011d82:	461a      	mov	r2, r3
 8011d84:	f7f1 ffbd 	bl	8003d02 <_write>
 8011d88:	1c43      	adds	r3, r0, #1
 8011d8a:	d102      	bne.n	8011d92 <_write_r+0x1e>
 8011d8c:	682b      	ldr	r3, [r5, #0]
 8011d8e:	b103      	cbz	r3, 8011d92 <_write_r+0x1e>
 8011d90:	6023      	str	r3, [r4, #0]
 8011d92:	bd38      	pop	{r3, r4, r5, pc}
 8011d94:	20004e98 	.word	0x20004e98

08011d98 <__swsetup_r>:
 8011d98:	4b32      	ldr	r3, [pc, #200]	; (8011e64 <__swsetup_r+0xcc>)
 8011d9a:	b570      	push	{r4, r5, r6, lr}
 8011d9c:	681d      	ldr	r5, [r3, #0]
 8011d9e:	4606      	mov	r6, r0
 8011da0:	460c      	mov	r4, r1
 8011da2:	b125      	cbz	r5, 8011dae <__swsetup_r+0x16>
 8011da4:	69ab      	ldr	r3, [r5, #24]
 8011da6:	b913      	cbnz	r3, 8011dae <__swsetup_r+0x16>
 8011da8:	4628      	mov	r0, r5
 8011daa:	f7ff f87d 	bl	8010ea8 <__sinit>
 8011dae:	4b2e      	ldr	r3, [pc, #184]	; (8011e68 <__swsetup_r+0xd0>)
 8011db0:	429c      	cmp	r4, r3
 8011db2:	d10f      	bne.n	8011dd4 <__swsetup_r+0x3c>
 8011db4:	686c      	ldr	r4, [r5, #4]
 8011db6:	89a3      	ldrh	r3, [r4, #12]
 8011db8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011dbc:	0719      	lsls	r1, r3, #28
 8011dbe:	d42c      	bmi.n	8011e1a <__swsetup_r+0x82>
 8011dc0:	06dd      	lsls	r5, r3, #27
 8011dc2:	d411      	bmi.n	8011de8 <__swsetup_r+0x50>
 8011dc4:	2309      	movs	r3, #9
 8011dc6:	6033      	str	r3, [r6, #0]
 8011dc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011dcc:	81a3      	strh	r3, [r4, #12]
 8011dce:	f04f 30ff 	mov.w	r0, #4294967295
 8011dd2:	e03e      	b.n	8011e52 <__swsetup_r+0xba>
 8011dd4:	4b25      	ldr	r3, [pc, #148]	; (8011e6c <__swsetup_r+0xd4>)
 8011dd6:	429c      	cmp	r4, r3
 8011dd8:	d101      	bne.n	8011dde <__swsetup_r+0x46>
 8011dda:	68ac      	ldr	r4, [r5, #8]
 8011ddc:	e7eb      	b.n	8011db6 <__swsetup_r+0x1e>
 8011dde:	4b24      	ldr	r3, [pc, #144]	; (8011e70 <__swsetup_r+0xd8>)
 8011de0:	429c      	cmp	r4, r3
 8011de2:	bf08      	it	eq
 8011de4:	68ec      	ldreq	r4, [r5, #12]
 8011de6:	e7e6      	b.n	8011db6 <__swsetup_r+0x1e>
 8011de8:	0758      	lsls	r0, r3, #29
 8011dea:	d512      	bpl.n	8011e12 <__swsetup_r+0x7a>
 8011dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011dee:	b141      	cbz	r1, 8011e02 <__swsetup_r+0x6a>
 8011df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011df4:	4299      	cmp	r1, r3
 8011df6:	d002      	beq.n	8011dfe <__swsetup_r+0x66>
 8011df8:	4630      	mov	r0, r6
 8011dfa:	f001 fba3 	bl	8013544 <_free_r>
 8011dfe:	2300      	movs	r3, #0
 8011e00:	6363      	str	r3, [r4, #52]	; 0x34
 8011e02:	89a3      	ldrh	r3, [r4, #12]
 8011e04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011e08:	81a3      	strh	r3, [r4, #12]
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	6063      	str	r3, [r4, #4]
 8011e0e:	6923      	ldr	r3, [r4, #16]
 8011e10:	6023      	str	r3, [r4, #0]
 8011e12:	89a3      	ldrh	r3, [r4, #12]
 8011e14:	f043 0308 	orr.w	r3, r3, #8
 8011e18:	81a3      	strh	r3, [r4, #12]
 8011e1a:	6923      	ldr	r3, [r4, #16]
 8011e1c:	b94b      	cbnz	r3, 8011e32 <__swsetup_r+0x9a>
 8011e1e:	89a3      	ldrh	r3, [r4, #12]
 8011e20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e28:	d003      	beq.n	8011e32 <__swsetup_r+0x9a>
 8011e2a:	4621      	mov	r1, r4
 8011e2c:	4630      	mov	r0, r6
 8011e2e:	f000 ffa7 	bl	8012d80 <__smakebuf_r>
 8011e32:	89a0      	ldrh	r0, [r4, #12]
 8011e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011e38:	f010 0301 	ands.w	r3, r0, #1
 8011e3c:	d00a      	beq.n	8011e54 <__swsetup_r+0xbc>
 8011e3e:	2300      	movs	r3, #0
 8011e40:	60a3      	str	r3, [r4, #8]
 8011e42:	6963      	ldr	r3, [r4, #20]
 8011e44:	425b      	negs	r3, r3
 8011e46:	61a3      	str	r3, [r4, #24]
 8011e48:	6923      	ldr	r3, [r4, #16]
 8011e4a:	b943      	cbnz	r3, 8011e5e <__swsetup_r+0xc6>
 8011e4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011e50:	d1ba      	bne.n	8011dc8 <__swsetup_r+0x30>
 8011e52:	bd70      	pop	{r4, r5, r6, pc}
 8011e54:	0781      	lsls	r1, r0, #30
 8011e56:	bf58      	it	pl
 8011e58:	6963      	ldrpl	r3, [r4, #20]
 8011e5a:	60a3      	str	r3, [r4, #8]
 8011e5c:	e7f4      	b.n	8011e48 <__swsetup_r+0xb0>
 8011e5e:	2000      	movs	r0, #0
 8011e60:	e7f7      	b.n	8011e52 <__swsetup_r+0xba>
 8011e62:	bf00      	nop
 8011e64:	200002cc 	.word	0x200002cc
 8011e68:	08016e8c 	.word	0x08016e8c
 8011e6c:	08016eac 	.word	0x08016eac
 8011e70:	08016e6c 	.word	0x08016e6c

08011e74 <_close_r>:
 8011e74:	b538      	push	{r3, r4, r5, lr}
 8011e76:	4d06      	ldr	r5, [pc, #24]	; (8011e90 <_close_r+0x1c>)
 8011e78:	2300      	movs	r3, #0
 8011e7a:	4604      	mov	r4, r0
 8011e7c:	4608      	mov	r0, r1
 8011e7e:	602b      	str	r3, [r5, #0]
 8011e80:	f7f1 ff5b 	bl	8003d3a <_close>
 8011e84:	1c43      	adds	r3, r0, #1
 8011e86:	d102      	bne.n	8011e8e <_close_r+0x1a>
 8011e88:	682b      	ldr	r3, [r5, #0]
 8011e8a:	b103      	cbz	r3, 8011e8e <_close_r+0x1a>
 8011e8c:	6023      	str	r3, [r4, #0]
 8011e8e:	bd38      	pop	{r3, r4, r5, pc}
 8011e90:	20004e98 	.word	0x20004e98

08011e94 <quorem>:
 8011e94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e98:	6903      	ldr	r3, [r0, #16]
 8011e9a:	690c      	ldr	r4, [r1, #16]
 8011e9c:	42a3      	cmp	r3, r4
 8011e9e:	4607      	mov	r7, r0
 8011ea0:	f2c0 8081 	blt.w	8011fa6 <quorem+0x112>
 8011ea4:	3c01      	subs	r4, #1
 8011ea6:	f101 0814 	add.w	r8, r1, #20
 8011eaa:	f100 0514 	add.w	r5, r0, #20
 8011eae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011eb2:	9301      	str	r3, [sp, #4]
 8011eb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011eb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011ebc:	3301      	adds	r3, #1
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011ec4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011ec8:	fbb2 f6f3 	udiv	r6, r2, r3
 8011ecc:	d331      	bcc.n	8011f32 <quorem+0x9e>
 8011ece:	f04f 0e00 	mov.w	lr, #0
 8011ed2:	4640      	mov	r0, r8
 8011ed4:	46ac      	mov	ip, r5
 8011ed6:	46f2      	mov	sl, lr
 8011ed8:	f850 2b04 	ldr.w	r2, [r0], #4
 8011edc:	b293      	uxth	r3, r2
 8011ede:	fb06 e303 	mla	r3, r6, r3, lr
 8011ee2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011ee6:	b29b      	uxth	r3, r3
 8011ee8:	ebaa 0303 	sub.w	r3, sl, r3
 8011eec:	0c12      	lsrs	r2, r2, #16
 8011eee:	f8dc a000 	ldr.w	sl, [ip]
 8011ef2:	fb06 e202 	mla	r2, r6, r2, lr
 8011ef6:	fa13 f38a 	uxtah	r3, r3, sl
 8011efa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011efe:	fa1f fa82 	uxth.w	sl, r2
 8011f02:	f8dc 2000 	ldr.w	r2, [ip]
 8011f06:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011f0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f0e:	b29b      	uxth	r3, r3
 8011f10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f14:	4581      	cmp	r9, r0
 8011f16:	f84c 3b04 	str.w	r3, [ip], #4
 8011f1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011f1e:	d2db      	bcs.n	8011ed8 <quorem+0x44>
 8011f20:	f855 300b 	ldr.w	r3, [r5, fp]
 8011f24:	b92b      	cbnz	r3, 8011f32 <quorem+0x9e>
 8011f26:	9b01      	ldr	r3, [sp, #4]
 8011f28:	3b04      	subs	r3, #4
 8011f2a:	429d      	cmp	r5, r3
 8011f2c:	461a      	mov	r2, r3
 8011f2e:	d32e      	bcc.n	8011f8e <quorem+0xfa>
 8011f30:	613c      	str	r4, [r7, #16]
 8011f32:	4638      	mov	r0, r7
 8011f34:	f001 f9f6 	bl	8013324 <__mcmp>
 8011f38:	2800      	cmp	r0, #0
 8011f3a:	db24      	blt.n	8011f86 <quorem+0xf2>
 8011f3c:	3601      	adds	r6, #1
 8011f3e:	4628      	mov	r0, r5
 8011f40:	f04f 0c00 	mov.w	ip, #0
 8011f44:	f858 2b04 	ldr.w	r2, [r8], #4
 8011f48:	f8d0 e000 	ldr.w	lr, [r0]
 8011f4c:	b293      	uxth	r3, r2
 8011f4e:	ebac 0303 	sub.w	r3, ip, r3
 8011f52:	0c12      	lsrs	r2, r2, #16
 8011f54:	fa13 f38e 	uxtah	r3, r3, lr
 8011f58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011f5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f60:	b29b      	uxth	r3, r3
 8011f62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f66:	45c1      	cmp	r9, r8
 8011f68:	f840 3b04 	str.w	r3, [r0], #4
 8011f6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011f70:	d2e8      	bcs.n	8011f44 <quorem+0xb0>
 8011f72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f7a:	b922      	cbnz	r2, 8011f86 <quorem+0xf2>
 8011f7c:	3b04      	subs	r3, #4
 8011f7e:	429d      	cmp	r5, r3
 8011f80:	461a      	mov	r2, r3
 8011f82:	d30a      	bcc.n	8011f9a <quorem+0x106>
 8011f84:	613c      	str	r4, [r7, #16]
 8011f86:	4630      	mov	r0, r6
 8011f88:	b003      	add	sp, #12
 8011f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f8e:	6812      	ldr	r2, [r2, #0]
 8011f90:	3b04      	subs	r3, #4
 8011f92:	2a00      	cmp	r2, #0
 8011f94:	d1cc      	bne.n	8011f30 <quorem+0x9c>
 8011f96:	3c01      	subs	r4, #1
 8011f98:	e7c7      	b.n	8011f2a <quorem+0x96>
 8011f9a:	6812      	ldr	r2, [r2, #0]
 8011f9c:	3b04      	subs	r3, #4
 8011f9e:	2a00      	cmp	r2, #0
 8011fa0:	d1f0      	bne.n	8011f84 <quorem+0xf0>
 8011fa2:	3c01      	subs	r4, #1
 8011fa4:	e7eb      	b.n	8011f7e <quorem+0xea>
 8011fa6:	2000      	movs	r0, #0
 8011fa8:	e7ee      	b.n	8011f88 <quorem+0xf4>
 8011faa:	0000      	movs	r0, r0
 8011fac:	0000      	movs	r0, r0
	...

08011fb0 <_dtoa_r>:
 8011fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fb4:	ed2d 8b02 	vpush	{d8}
 8011fb8:	ec57 6b10 	vmov	r6, r7, d0
 8011fbc:	b095      	sub	sp, #84	; 0x54
 8011fbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011fc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011fc4:	9105      	str	r1, [sp, #20]
 8011fc6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011fca:	4604      	mov	r4, r0
 8011fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8011fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8011fd0:	b975      	cbnz	r5, 8011ff0 <_dtoa_r+0x40>
 8011fd2:	2010      	movs	r0, #16
 8011fd4:	f000 ff14 	bl	8012e00 <malloc>
 8011fd8:	4602      	mov	r2, r0
 8011fda:	6260      	str	r0, [r4, #36]	; 0x24
 8011fdc:	b920      	cbnz	r0, 8011fe8 <_dtoa_r+0x38>
 8011fde:	4bb2      	ldr	r3, [pc, #712]	; (80122a8 <_dtoa_r+0x2f8>)
 8011fe0:	21ea      	movs	r1, #234	; 0xea
 8011fe2:	48b2      	ldr	r0, [pc, #712]	; (80122ac <_dtoa_r+0x2fc>)
 8011fe4:	f001 fdc6 	bl	8013b74 <__assert_func>
 8011fe8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011fec:	6005      	str	r5, [r0, #0]
 8011fee:	60c5      	str	r5, [r0, #12]
 8011ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ff2:	6819      	ldr	r1, [r3, #0]
 8011ff4:	b151      	cbz	r1, 801200c <_dtoa_r+0x5c>
 8011ff6:	685a      	ldr	r2, [r3, #4]
 8011ff8:	604a      	str	r2, [r1, #4]
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	4093      	lsls	r3, r2
 8011ffe:	608b      	str	r3, [r1, #8]
 8012000:	4620      	mov	r0, r4
 8012002:	f000 ff51 	bl	8012ea8 <_Bfree>
 8012006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012008:	2200      	movs	r2, #0
 801200a:	601a      	str	r2, [r3, #0]
 801200c:	1e3b      	subs	r3, r7, #0
 801200e:	bfb9      	ittee	lt
 8012010:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012014:	9303      	strlt	r3, [sp, #12]
 8012016:	2300      	movge	r3, #0
 8012018:	f8c8 3000 	strge.w	r3, [r8]
 801201c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012020:	4ba3      	ldr	r3, [pc, #652]	; (80122b0 <_dtoa_r+0x300>)
 8012022:	bfbc      	itt	lt
 8012024:	2201      	movlt	r2, #1
 8012026:	f8c8 2000 	strlt.w	r2, [r8]
 801202a:	ea33 0309 	bics.w	r3, r3, r9
 801202e:	d11b      	bne.n	8012068 <_dtoa_r+0xb8>
 8012030:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012032:	f242 730f 	movw	r3, #9999	; 0x270f
 8012036:	6013      	str	r3, [r2, #0]
 8012038:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801203c:	4333      	orrs	r3, r6
 801203e:	f000 857a 	beq.w	8012b36 <_dtoa_r+0xb86>
 8012042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012044:	b963      	cbnz	r3, 8012060 <_dtoa_r+0xb0>
 8012046:	4b9b      	ldr	r3, [pc, #620]	; (80122b4 <_dtoa_r+0x304>)
 8012048:	e024      	b.n	8012094 <_dtoa_r+0xe4>
 801204a:	4b9b      	ldr	r3, [pc, #620]	; (80122b8 <_dtoa_r+0x308>)
 801204c:	9300      	str	r3, [sp, #0]
 801204e:	3308      	adds	r3, #8
 8012050:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012052:	6013      	str	r3, [r2, #0]
 8012054:	9800      	ldr	r0, [sp, #0]
 8012056:	b015      	add	sp, #84	; 0x54
 8012058:	ecbd 8b02 	vpop	{d8}
 801205c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012060:	4b94      	ldr	r3, [pc, #592]	; (80122b4 <_dtoa_r+0x304>)
 8012062:	9300      	str	r3, [sp, #0]
 8012064:	3303      	adds	r3, #3
 8012066:	e7f3      	b.n	8012050 <_dtoa_r+0xa0>
 8012068:	ed9d 7b02 	vldr	d7, [sp, #8]
 801206c:	2200      	movs	r2, #0
 801206e:	ec51 0b17 	vmov	r0, r1, d7
 8012072:	2300      	movs	r3, #0
 8012074:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012078:	f7ee fd46 	bl	8000b08 <__aeabi_dcmpeq>
 801207c:	4680      	mov	r8, r0
 801207e:	b158      	cbz	r0, 8012098 <_dtoa_r+0xe8>
 8012080:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012082:	2301      	movs	r3, #1
 8012084:	6013      	str	r3, [r2, #0]
 8012086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012088:	2b00      	cmp	r3, #0
 801208a:	f000 8551 	beq.w	8012b30 <_dtoa_r+0xb80>
 801208e:	488b      	ldr	r0, [pc, #556]	; (80122bc <_dtoa_r+0x30c>)
 8012090:	6018      	str	r0, [r3, #0]
 8012092:	1e43      	subs	r3, r0, #1
 8012094:	9300      	str	r3, [sp, #0]
 8012096:	e7dd      	b.n	8012054 <_dtoa_r+0xa4>
 8012098:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801209c:	aa12      	add	r2, sp, #72	; 0x48
 801209e:	a913      	add	r1, sp, #76	; 0x4c
 80120a0:	4620      	mov	r0, r4
 80120a2:	f001 f9e3 	bl	801346c <__d2b>
 80120a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80120aa:	4683      	mov	fp, r0
 80120ac:	2d00      	cmp	r5, #0
 80120ae:	d07c      	beq.n	80121aa <_dtoa_r+0x1fa>
 80120b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80120b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80120ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80120be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80120c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80120c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80120ca:	4b7d      	ldr	r3, [pc, #500]	; (80122c0 <_dtoa_r+0x310>)
 80120cc:	2200      	movs	r2, #0
 80120ce:	4630      	mov	r0, r6
 80120d0:	4639      	mov	r1, r7
 80120d2:	f7ee f8f9 	bl	80002c8 <__aeabi_dsub>
 80120d6:	a36e      	add	r3, pc, #440	; (adr r3, 8012290 <_dtoa_r+0x2e0>)
 80120d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120dc:	f7ee faac 	bl	8000638 <__aeabi_dmul>
 80120e0:	a36d      	add	r3, pc, #436	; (adr r3, 8012298 <_dtoa_r+0x2e8>)
 80120e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e6:	f7ee f8f1 	bl	80002cc <__adddf3>
 80120ea:	4606      	mov	r6, r0
 80120ec:	4628      	mov	r0, r5
 80120ee:	460f      	mov	r7, r1
 80120f0:	f7ee fa38 	bl	8000564 <__aeabi_i2d>
 80120f4:	a36a      	add	r3, pc, #424	; (adr r3, 80122a0 <_dtoa_r+0x2f0>)
 80120f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120fa:	f7ee fa9d 	bl	8000638 <__aeabi_dmul>
 80120fe:	4602      	mov	r2, r0
 8012100:	460b      	mov	r3, r1
 8012102:	4630      	mov	r0, r6
 8012104:	4639      	mov	r1, r7
 8012106:	f7ee f8e1 	bl	80002cc <__adddf3>
 801210a:	4606      	mov	r6, r0
 801210c:	460f      	mov	r7, r1
 801210e:	f7ee fd43 	bl	8000b98 <__aeabi_d2iz>
 8012112:	2200      	movs	r2, #0
 8012114:	4682      	mov	sl, r0
 8012116:	2300      	movs	r3, #0
 8012118:	4630      	mov	r0, r6
 801211a:	4639      	mov	r1, r7
 801211c:	f7ee fcfe 	bl	8000b1c <__aeabi_dcmplt>
 8012120:	b148      	cbz	r0, 8012136 <_dtoa_r+0x186>
 8012122:	4650      	mov	r0, sl
 8012124:	f7ee fa1e 	bl	8000564 <__aeabi_i2d>
 8012128:	4632      	mov	r2, r6
 801212a:	463b      	mov	r3, r7
 801212c:	f7ee fcec 	bl	8000b08 <__aeabi_dcmpeq>
 8012130:	b908      	cbnz	r0, 8012136 <_dtoa_r+0x186>
 8012132:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012136:	f1ba 0f16 	cmp.w	sl, #22
 801213a:	d854      	bhi.n	80121e6 <_dtoa_r+0x236>
 801213c:	4b61      	ldr	r3, [pc, #388]	; (80122c4 <_dtoa_r+0x314>)
 801213e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012146:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801214a:	f7ee fce7 	bl	8000b1c <__aeabi_dcmplt>
 801214e:	2800      	cmp	r0, #0
 8012150:	d04b      	beq.n	80121ea <_dtoa_r+0x23a>
 8012152:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012156:	2300      	movs	r3, #0
 8012158:	930e      	str	r3, [sp, #56]	; 0x38
 801215a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801215c:	1b5d      	subs	r5, r3, r5
 801215e:	1e6b      	subs	r3, r5, #1
 8012160:	9304      	str	r3, [sp, #16]
 8012162:	bf43      	ittte	mi
 8012164:	2300      	movmi	r3, #0
 8012166:	f1c5 0801 	rsbmi	r8, r5, #1
 801216a:	9304      	strmi	r3, [sp, #16]
 801216c:	f04f 0800 	movpl.w	r8, #0
 8012170:	f1ba 0f00 	cmp.w	sl, #0
 8012174:	db3b      	blt.n	80121ee <_dtoa_r+0x23e>
 8012176:	9b04      	ldr	r3, [sp, #16]
 8012178:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801217c:	4453      	add	r3, sl
 801217e:	9304      	str	r3, [sp, #16]
 8012180:	2300      	movs	r3, #0
 8012182:	9306      	str	r3, [sp, #24]
 8012184:	9b05      	ldr	r3, [sp, #20]
 8012186:	2b09      	cmp	r3, #9
 8012188:	d869      	bhi.n	801225e <_dtoa_r+0x2ae>
 801218a:	2b05      	cmp	r3, #5
 801218c:	bfc4      	itt	gt
 801218e:	3b04      	subgt	r3, #4
 8012190:	9305      	strgt	r3, [sp, #20]
 8012192:	9b05      	ldr	r3, [sp, #20]
 8012194:	f1a3 0302 	sub.w	r3, r3, #2
 8012198:	bfcc      	ite	gt
 801219a:	2500      	movgt	r5, #0
 801219c:	2501      	movle	r5, #1
 801219e:	2b03      	cmp	r3, #3
 80121a0:	d869      	bhi.n	8012276 <_dtoa_r+0x2c6>
 80121a2:	e8df f003 	tbb	[pc, r3]
 80121a6:	4e2c      	.short	0x4e2c
 80121a8:	5a4c      	.short	0x5a4c
 80121aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80121ae:	441d      	add	r5, r3
 80121b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80121b4:	2b20      	cmp	r3, #32
 80121b6:	bfc1      	itttt	gt
 80121b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80121bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80121c0:	fa09 f303 	lslgt.w	r3, r9, r3
 80121c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80121c8:	bfda      	itte	le
 80121ca:	f1c3 0320 	rsble	r3, r3, #32
 80121ce:	fa06 f003 	lslle.w	r0, r6, r3
 80121d2:	4318      	orrgt	r0, r3
 80121d4:	f7ee f9b6 	bl	8000544 <__aeabi_ui2d>
 80121d8:	2301      	movs	r3, #1
 80121da:	4606      	mov	r6, r0
 80121dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80121e0:	3d01      	subs	r5, #1
 80121e2:	9310      	str	r3, [sp, #64]	; 0x40
 80121e4:	e771      	b.n	80120ca <_dtoa_r+0x11a>
 80121e6:	2301      	movs	r3, #1
 80121e8:	e7b6      	b.n	8012158 <_dtoa_r+0x1a8>
 80121ea:	900e      	str	r0, [sp, #56]	; 0x38
 80121ec:	e7b5      	b.n	801215a <_dtoa_r+0x1aa>
 80121ee:	f1ca 0300 	rsb	r3, sl, #0
 80121f2:	9306      	str	r3, [sp, #24]
 80121f4:	2300      	movs	r3, #0
 80121f6:	eba8 080a 	sub.w	r8, r8, sl
 80121fa:	930d      	str	r3, [sp, #52]	; 0x34
 80121fc:	e7c2      	b.n	8012184 <_dtoa_r+0x1d4>
 80121fe:	2300      	movs	r3, #0
 8012200:	9308      	str	r3, [sp, #32]
 8012202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012204:	2b00      	cmp	r3, #0
 8012206:	dc39      	bgt.n	801227c <_dtoa_r+0x2cc>
 8012208:	f04f 0901 	mov.w	r9, #1
 801220c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012210:	464b      	mov	r3, r9
 8012212:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012216:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012218:	2200      	movs	r2, #0
 801221a:	6042      	str	r2, [r0, #4]
 801221c:	2204      	movs	r2, #4
 801221e:	f102 0614 	add.w	r6, r2, #20
 8012222:	429e      	cmp	r6, r3
 8012224:	6841      	ldr	r1, [r0, #4]
 8012226:	d92f      	bls.n	8012288 <_dtoa_r+0x2d8>
 8012228:	4620      	mov	r0, r4
 801222a:	f000 fdfd 	bl	8012e28 <_Balloc>
 801222e:	9000      	str	r0, [sp, #0]
 8012230:	2800      	cmp	r0, #0
 8012232:	d14b      	bne.n	80122cc <_dtoa_r+0x31c>
 8012234:	4b24      	ldr	r3, [pc, #144]	; (80122c8 <_dtoa_r+0x318>)
 8012236:	4602      	mov	r2, r0
 8012238:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801223c:	e6d1      	b.n	8011fe2 <_dtoa_r+0x32>
 801223e:	2301      	movs	r3, #1
 8012240:	e7de      	b.n	8012200 <_dtoa_r+0x250>
 8012242:	2300      	movs	r3, #0
 8012244:	9308      	str	r3, [sp, #32]
 8012246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012248:	eb0a 0903 	add.w	r9, sl, r3
 801224c:	f109 0301 	add.w	r3, r9, #1
 8012250:	2b01      	cmp	r3, #1
 8012252:	9301      	str	r3, [sp, #4]
 8012254:	bfb8      	it	lt
 8012256:	2301      	movlt	r3, #1
 8012258:	e7dd      	b.n	8012216 <_dtoa_r+0x266>
 801225a:	2301      	movs	r3, #1
 801225c:	e7f2      	b.n	8012244 <_dtoa_r+0x294>
 801225e:	2501      	movs	r5, #1
 8012260:	2300      	movs	r3, #0
 8012262:	9305      	str	r3, [sp, #20]
 8012264:	9508      	str	r5, [sp, #32]
 8012266:	f04f 39ff 	mov.w	r9, #4294967295
 801226a:	2200      	movs	r2, #0
 801226c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012270:	2312      	movs	r3, #18
 8012272:	9209      	str	r2, [sp, #36]	; 0x24
 8012274:	e7cf      	b.n	8012216 <_dtoa_r+0x266>
 8012276:	2301      	movs	r3, #1
 8012278:	9308      	str	r3, [sp, #32]
 801227a:	e7f4      	b.n	8012266 <_dtoa_r+0x2b6>
 801227c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012280:	f8cd 9004 	str.w	r9, [sp, #4]
 8012284:	464b      	mov	r3, r9
 8012286:	e7c6      	b.n	8012216 <_dtoa_r+0x266>
 8012288:	3101      	adds	r1, #1
 801228a:	6041      	str	r1, [r0, #4]
 801228c:	0052      	lsls	r2, r2, #1
 801228e:	e7c6      	b.n	801221e <_dtoa_r+0x26e>
 8012290:	636f4361 	.word	0x636f4361
 8012294:	3fd287a7 	.word	0x3fd287a7
 8012298:	8b60c8b3 	.word	0x8b60c8b3
 801229c:	3fc68a28 	.word	0x3fc68a28
 80122a0:	509f79fb 	.word	0x509f79fb
 80122a4:	3fd34413 	.word	0x3fd34413
 80122a8:	08016f11 	.word	0x08016f11
 80122ac:	08016f28 	.word	0x08016f28
 80122b0:	7ff00000 	.word	0x7ff00000
 80122b4:	08016f0d 	.word	0x08016f0d
 80122b8:	08016f04 	.word	0x08016f04
 80122bc:	08016ee1 	.word	0x08016ee1
 80122c0:	3ff80000 	.word	0x3ff80000
 80122c4:	08017020 	.word	0x08017020
 80122c8:	08016f87 	.word	0x08016f87
 80122cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122ce:	9a00      	ldr	r2, [sp, #0]
 80122d0:	601a      	str	r2, [r3, #0]
 80122d2:	9b01      	ldr	r3, [sp, #4]
 80122d4:	2b0e      	cmp	r3, #14
 80122d6:	f200 80ad 	bhi.w	8012434 <_dtoa_r+0x484>
 80122da:	2d00      	cmp	r5, #0
 80122dc:	f000 80aa 	beq.w	8012434 <_dtoa_r+0x484>
 80122e0:	f1ba 0f00 	cmp.w	sl, #0
 80122e4:	dd36      	ble.n	8012354 <_dtoa_r+0x3a4>
 80122e6:	4ac3      	ldr	r2, [pc, #780]	; (80125f4 <_dtoa_r+0x644>)
 80122e8:	f00a 030f 	and.w	r3, sl, #15
 80122ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80122f0:	ed93 7b00 	vldr	d7, [r3]
 80122f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80122f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80122fc:	eeb0 8a47 	vmov.f32	s16, s14
 8012300:	eef0 8a67 	vmov.f32	s17, s15
 8012304:	d016      	beq.n	8012334 <_dtoa_r+0x384>
 8012306:	4bbc      	ldr	r3, [pc, #752]	; (80125f8 <_dtoa_r+0x648>)
 8012308:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801230c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012310:	f7ee fabc 	bl	800088c <__aeabi_ddiv>
 8012314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012318:	f007 070f 	and.w	r7, r7, #15
 801231c:	2503      	movs	r5, #3
 801231e:	4eb6      	ldr	r6, [pc, #728]	; (80125f8 <_dtoa_r+0x648>)
 8012320:	b957      	cbnz	r7, 8012338 <_dtoa_r+0x388>
 8012322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012326:	ec53 2b18 	vmov	r2, r3, d8
 801232a:	f7ee faaf 	bl	800088c <__aeabi_ddiv>
 801232e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012332:	e029      	b.n	8012388 <_dtoa_r+0x3d8>
 8012334:	2502      	movs	r5, #2
 8012336:	e7f2      	b.n	801231e <_dtoa_r+0x36e>
 8012338:	07f9      	lsls	r1, r7, #31
 801233a:	d508      	bpl.n	801234e <_dtoa_r+0x39e>
 801233c:	ec51 0b18 	vmov	r0, r1, d8
 8012340:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012344:	f7ee f978 	bl	8000638 <__aeabi_dmul>
 8012348:	ec41 0b18 	vmov	d8, r0, r1
 801234c:	3501      	adds	r5, #1
 801234e:	107f      	asrs	r7, r7, #1
 8012350:	3608      	adds	r6, #8
 8012352:	e7e5      	b.n	8012320 <_dtoa_r+0x370>
 8012354:	f000 80a6 	beq.w	80124a4 <_dtoa_r+0x4f4>
 8012358:	f1ca 0600 	rsb	r6, sl, #0
 801235c:	4ba5      	ldr	r3, [pc, #660]	; (80125f4 <_dtoa_r+0x644>)
 801235e:	4fa6      	ldr	r7, [pc, #664]	; (80125f8 <_dtoa_r+0x648>)
 8012360:	f006 020f 	and.w	r2, r6, #15
 8012364:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801236c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012370:	f7ee f962 	bl	8000638 <__aeabi_dmul>
 8012374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012378:	1136      	asrs	r6, r6, #4
 801237a:	2300      	movs	r3, #0
 801237c:	2502      	movs	r5, #2
 801237e:	2e00      	cmp	r6, #0
 8012380:	f040 8085 	bne.w	801248e <_dtoa_r+0x4de>
 8012384:	2b00      	cmp	r3, #0
 8012386:	d1d2      	bne.n	801232e <_dtoa_r+0x37e>
 8012388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801238a:	2b00      	cmp	r3, #0
 801238c:	f000 808c 	beq.w	80124a8 <_dtoa_r+0x4f8>
 8012390:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012394:	4b99      	ldr	r3, [pc, #612]	; (80125fc <_dtoa_r+0x64c>)
 8012396:	2200      	movs	r2, #0
 8012398:	4630      	mov	r0, r6
 801239a:	4639      	mov	r1, r7
 801239c:	f7ee fbbe 	bl	8000b1c <__aeabi_dcmplt>
 80123a0:	2800      	cmp	r0, #0
 80123a2:	f000 8081 	beq.w	80124a8 <_dtoa_r+0x4f8>
 80123a6:	9b01      	ldr	r3, [sp, #4]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d07d      	beq.n	80124a8 <_dtoa_r+0x4f8>
 80123ac:	f1b9 0f00 	cmp.w	r9, #0
 80123b0:	dd3c      	ble.n	801242c <_dtoa_r+0x47c>
 80123b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80123b6:	9307      	str	r3, [sp, #28]
 80123b8:	2200      	movs	r2, #0
 80123ba:	4b91      	ldr	r3, [pc, #580]	; (8012600 <_dtoa_r+0x650>)
 80123bc:	4630      	mov	r0, r6
 80123be:	4639      	mov	r1, r7
 80123c0:	f7ee f93a 	bl	8000638 <__aeabi_dmul>
 80123c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123c8:	3501      	adds	r5, #1
 80123ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80123ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80123d2:	4628      	mov	r0, r5
 80123d4:	f7ee f8c6 	bl	8000564 <__aeabi_i2d>
 80123d8:	4632      	mov	r2, r6
 80123da:	463b      	mov	r3, r7
 80123dc:	f7ee f92c 	bl	8000638 <__aeabi_dmul>
 80123e0:	4b88      	ldr	r3, [pc, #544]	; (8012604 <_dtoa_r+0x654>)
 80123e2:	2200      	movs	r2, #0
 80123e4:	f7ed ff72 	bl	80002cc <__adddf3>
 80123e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80123ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123f0:	9303      	str	r3, [sp, #12]
 80123f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d15c      	bne.n	80124b2 <_dtoa_r+0x502>
 80123f8:	4b83      	ldr	r3, [pc, #524]	; (8012608 <_dtoa_r+0x658>)
 80123fa:	2200      	movs	r2, #0
 80123fc:	4630      	mov	r0, r6
 80123fe:	4639      	mov	r1, r7
 8012400:	f7ed ff62 	bl	80002c8 <__aeabi_dsub>
 8012404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012408:	4606      	mov	r6, r0
 801240a:	460f      	mov	r7, r1
 801240c:	f7ee fba4 	bl	8000b58 <__aeabi_dcmpgt>
 8012410:	2800      	cmp	r0, #0
 8012412:	f040 8296 	bne.w	8012942 <_dtoa_r+0x992>
 8012416:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801241a:	4630      	mov	r0, r6
 801241c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012420:	4639      	mov	r1, r7
 8012422:	f7ee fb7b 	bl	8000b1c <__aeabi_dcmplt>
 8012426:	2800      	cmp	r0, #0
 8012428:	f040 8288 	bne.w	801293c <_dtoa_r+0x98c>
 801242c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012430:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012434:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012436:	2b00      	cmp	r3, #0
 8012438:	f2c0 8158 	blt.w	80126ec <_dtoa_r+0x73c>
 801243c:	f1ba 0f0e 	cmp.w	sl, #14
 8012440:	f300 8154 	bgt.w	80126ec <_dtoa_r+0x73c>
 8012444:	4b6b      	ldr	r3, [pc, #428]	; (80125f4 <_dtoa_r+0x644>)
 8012446:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801244a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801244e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012450:	2b00      	cmp	r3, #0
 8012452:	f280 80e3 	bge.w	801261c <_dtoa_r+0x66c>
 8012456:	9b01      	ldr	r3, [sp, #4]
 8012458:	2b00      	cmp	r3, #0
 801245a:	f300 80df 	bgt.w	801261c <_dtoa_r+0x66c>
 801245e:	f040 826d 	bne.w	801293c <_dtoa_r+0x98c>
 8012462:	4b69      	ldr	r3, [pc, #420]	; (8012608 <_dtoa_r+0x658>)
 8012464:	2200      	movs	r2, #0
 8012466:	4640      	mov	r0, r8
 8012468:	4649      	mov	r1, r9
 801246a:	f7ee f8e5 	bl	8000638 <__aeabi_dmul>
 801246e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012472:	f7ee fb67 	bl	8000b44 <__aeabi_dcmpge>
 8012476:	9e01      	ldr	r6, [sp, #4]
 8012478:	4637      	mov	r7, r6
 801247a:	2800      	cmp	r0, #0
 801247c:	f040 8243 	bne.w	8012906 <_dtoa_r+0x956>
 8012480:	9d00      	ldr	r5, [sp, #0]
 8012482:	2331      	movs	r3, #49	; 0x31
 8012484:	f805 3b01 	strb.w	r3, [r5], #1
 8012488:	f10a 0a01 	add.w	sl, sl, #1
 801248c:	e23f      	b.n	801290e <_dtoa_r+0x95e>
 801248e:	07f2      	lsls	r2, r6, #31
 8012490:	d505      	bpl.n	801249e <_dtoa_r+0x4ee>
 8012492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012496:	f7ee f8cf 	bl	8000638 <__aeabi_dmul>
 801249a:	3501      	adds	r5, #1
 801249c:	2301      	movs	r3, #1
 801249e:	1076      	asrs	r6, r6, #1
 80124a0:	3708      	adds	r7, #8
 80124a2:	e76c      	b.n	801237e <_dtoa_r+0x3ce>
 80124a4:	2502      	movs	r5, #2
 80124a6:	e76f      	b.n	8012388 <_dtoa_r+0x3d8>
 80124a8:	9b01      	ldr	r3, [sp, #4]
 80124aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80124ae:	930c      	str	r3, [sp, #48]	; 0x30
 80124b0:	e78d      	b.n	80123ce <_dtoa_r+0x41e>
 80124b2:	9900      	ldr	r1, [sp, #0]
 80124b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80124b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80124b8:	4b4e      	ldr	r3, [pc, #312]	; (80125f4 <_dtoa_r+0x644>)
 80124ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80124be:	4401      	add	r1, r0
 80124c0:	9102      	str	r1, [sp, #8]
 80124c2:	9908      	ldr	r1, [sp, #32]
 80124c4:	eeb0 8a47 	vmov.f32	s16, s14
 80124c8:	eef0 8a67 	vmov.f32	s17, s15
 80124cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80124d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80124d4:	2900      	cmp	r1, #0
 80124d6:	d045      	beq.n	8012564 <_dtoa_r+0x5b4>
 80124d8:	494c      	ldr	r1, [pc, #304]	; (801260c <_dtoa_r+0x65c>)
 80124da:	2000      	movs	r0, #0
 80124dc:	f7ee f9d6 	bl	800088c <__aeabi_ddiv>
 80124e0:	ec53 2b18 	vmov	r2, r3, d8
 80124e4:	f7ed fef0 	bl	80002c8 <__aeabi_dsub>
 80124e8:	9d00      	ldr	r5, [sp, #0]
 80124ea:	ec41 0b18 	vmov	d8, r0, r1
 80124ee:	4639      	mov	r1, r7
 80124f0:	4630      	mov	r0, r6
 80124f2:	f7ee fb51 	bl	8000b98 <__aeabi_d2iz>
 80124f6:	900c      	str	r0, [sp, #48]	; 0x30
 80124f8:	f7ee f834 	bl	8000564 <__aeabi_i2d>
 80124fc:	4602      	mov	r2, r0
 80124fe:	460b      	mov	r3, r1
 8012500:	4630      	mov	r0, r6
 8012502:	4639      	mov	r1, r7
 8012504:	f7ed fee0 	bl	80002c8 <__aeabi_dsub>
 8012508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801250a:	3330      	adds	r3, #48	; 0x30
 801250c:	f805 3b01 	strb.w	r3, [r5], #1
 8012510:	ec53 2b18 	vmov	r2, r3, d8
 8012514:	4606      	mov	r6, r0
 8012516:	460f      	mov	r7, r1
 8012518:	f7ee fb00 	bl	8000b1c <__aeabi_dcmplt>
 801251c:	2800      	cmp	r0, #0
 801251e:	d165      	bne.n	80125ec <_dtoa_r+0x63c>
 8012520:	4632      	mov	r2, r6
 8012522:	463b      	mov	r3, r7
 8012524:	4935      	ldr	r1, [pc, #212]	; (80125fc <_dtoa_r+0x64c>)
 8012526:	2000      	movs	r0, #0
 8012528:	f7ed fece 	bl	80002c8 <__aeabi_dsub>
 801252c:	ec53 2b18 	vmov	r2, r3, d8
 8012530:	f7ee faf4 	bl	8000b1c <__aeabi_dcmplt>
 8012534:	2800      	cmp	r0, #0
 8012536:	f040 80b9 	bne.w	80126ac <_dtoa_r+0x6fc>
 801253a:	9b02      	ldr	r3, [sp, #8]
 801253c:	429d      	cmp	r5, r3
 801253e:	f43f af75 	beq.w	801242c <_dtoa_r+0x47c>
 8012542:	4b2f      	ldr	r3, [pc, #188]	; (8012600 <_dtoa_r+0x650>)
 8012544:	ec51 0b18 	vmov	r0, r1, d8
 8012548:	2200      	movs	r2, #0
 801254a:	f7ee f875 	bl	8000638 <__aeabi_dmul>
 801254e:	4b2c      	ldr	r3, [pc, #176]	; (8012600 <_dtoa_r+0x650>)
 8012550:	ec41 0b18 	vmov	d8, r0, r1
 8012554:	2200      	movs	r2, #0
 8012556:	4630      	mov	r0, r6
 8012558:	4639      	mov	r1, r7
 801255a:	f7ee f86d 	bl	8000638 <__aeabi_dmul>
 801255e:	4606      	mov	r6, r0
 8012560:	460f      	mov	r7, r1
 8012562:	e7c4      	b.n	80124ee <_dtoa_r+0x53e>
 8012564:	ec51 0b17 	vmov	r0, r1, d7
 8012568:	f7ee f866 	bl	8000638 <__aeabi_dmul>
 801256c:	9b02      	ldr	r3, [sp, #8]
 801256e:	9d00      	ldr	r5, [sp, #0]
 8012570:	930c      	str	r3, [sp, #48]	; 0x30
 8012572:	ec41 0b18 	vmov	d8, r0, r1
 8012576:	4639      	mov	r1, r7
 8012578:	4630      	mov	r0, r6
 801257a:	f7ee fb0d 	bl	8000b98 <__aeabi_d2iz>
 801257e:	9011      	str	r0, [sp, #68]	; 0x44
 8012580:	f7ed fff0 	bl	8000564 <__aeabi_i2d>
 8012584:	4602      	mov	r2, r0
 8012586:	460b      	mov	r3, r1
 8012588:	4630      	mov	r0, r6
 801258a:	4639      	mov	r1, r7
 801258c:	f7ed fe9c 	bl	80002c8 <__aeabi_dsub>
 8012590:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012592:	3330      	adds	r3, #48	; 0x30
 8012594:	f805 3b01 	strb.w	r3, [r5], #1
 8012598:	9b02      	ldr	r3, [sp, #8]
 801259a:	429d      	cmp	r5, r3
 801259c:	4606      	mov	r6, r0
 801259e:	460f      	mov	r7, r1
 80125a0:	f04f 0200 	mov.w	r2, #0
 80125a4:	d134      	bne.n	8012610 <_dtoa_r+0x660>
 80125a6:	4b19      	ldr	r3, [pc, #100]	; (801260c <_dtoa_r+0x65c>)
 80125a8:	ec51 0b18 	vmov	r0, r1, d8
 80125ac:	f7ed fe8e 	bl	80002cc <__adddf3>
 80125b0:	4602      	mov	r2, r0
 80125b2:	460b      	mov	r3, r1
 80125b4:	4630      	mov	r0, r6
 80125b6:	4639      	mov	r1, r7
 80125b8:	f7ee face 	bl	8000b58 <__aeabi_dcmpgt>
 80125bc:	2800      	cmp	r0, #0
 80125be:	d175      	bne.n	80126ac <_dtoa_r+0x6fc>
 80125c0:	ec53 2b18 	vmov	r2, r3, d8
 80125c4:	4911      	ldr	r1, [pc, #68]	; (801260c <_dtoa_r+0x65c>)
 80125c6:	2000      	movs	r0, #0
 80125c8:	f7ed fe7e 	bl	80002c8 <__aeabi_dsub>
 80125cc:	4602      	mov	r2, r0
 80125ce:	460b      	mov	r3, r1
 80125d0:	4630      	mov	r0, r6
 80125d2:	4639      	mov	r1, r7
 80125d4:	f7ee faa2 	bl	8000b1c <__aeabi_dcmplt>
 80125d8:	2800      	cmp	r0, #0
 80125da:	f43f af27 	beq.w	801242c <_dtoa_r+0x47c>
 80125de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80125e0:	1e6b      	subs	r3, r5, #1
 80125e2:	930c      	str	r3, [sp, #48]	; 0x30
 80125e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80125e8:	2b30      	cmp	r3, #48	; 0x30
 80125ea:	d0f8      	beq.n	80125de <_dtoa_r+0x62e>
 80125ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80125f0:	e04a      	b.n	8012688 <_dtoa_r+0x6d8>
 80125f2:	bf00      	nop
 80125f4:	08017020 	.word	0x08017020
 80125f8:	08016ff8 	.word	0x08016ff8
 80125fc:	3ff00000 	.word	0x3ff00000
 8012600:	40240000 	.word	0x40240000
 8012604:	401c0000 	.word	0x401c0000
 8012608:	40140000 	.word	0x40140000
 801260c:	3fe00000 	.word	0x3fe00000
 8012610:	4baf      	ldr	r3, [pc, #700]	; (80128d0 <_dtoa_r+0x920>)
 8012612:	f7ee f811 	bl	8000638 <__aeabi_dmul>
 8012616:	4606      	mov	r6, r0
 8012618:	460f      	mov	r7, r1
 801261a:	e7ac      	b.n	8012576 <_dtoa_r+0x5c6>
 801261c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012620:	9d00      	ldr	r5, [sp, #0]
 8012622:	4642      	mov	r2, r8
 8012624:	464b      	mov	r3, r9
 8012626:	4630      	mov	r0, r6
 8012628:	4639      	mov	r1, r7
 801262a:	f7ee f92f 	bl	800088c <__aeabi_ddiv>
 801262e:	f7ee fab3 	bl	8000b98 <__aeabi_d2iz>
 8012632:	9002      	str	r0, [sp, #8]
 8012634:	f7ed ff96 	bl	8000564 <__aeabi_i2d>
 8012638:	4642      	mov	r2, r8
 801263a:	464b      	mov	r3, r9
 801263c:	f7ed fffc 	bl	8000638 <__aeabi_dmul>
 8012640:	4602      	mov	r2, r0
 8012642:	460b      	mov	r3, r1
 8012644:	4630      	mov	r0, r6
 8012646:	4639      	mov	r1, r7
 8012648:	f7ed fe3e 	bl	80002c8 <__aeabi_dsub>
 801264c:	9e02      	ldr	r6, [sp, #8]
 801264e:	9f01      	ldr	r7, [sp, #4]
 8012650:	3630      	adds	r6, #48	; 0x30
 8012652:	f805 6b01 	strb.w	r6, [r5], #1
 8012656:	9e00      	ldr	r6, [sp, #0]
 8012658:	1bae      	subs	r6, r5, r6
 801265a:	42b7      	cmp	r7, r6
 801265c:	4602      	mov	r2, r0
 801265e:	460b      	mov	r3, r1
 8012660:	d137      	bne.n	80126d2 <_dtoa_r+0x722>
 8012662:	f7ed fe33 	bl	80002cc <__adddf3>
 8012666:	4642      	mov	r2, r8
 8012668:	464b      	mov	r3, r9
 801266a:	4606      	mov	r6, r0
 801266c:	460f      	mov	r7, r1
 801266e:	f7ee fa73 	bl	8000b58 <__aeabi_dcmpgt>
 8012672:	b9c8      	cbnz	r0, 80126a8 <_dtoa_r+0x6f8>
 8012674:	4642      	mov	r2, r8
 8012676:	464b      	mov	r3, r9
 8012678:	4630      	mov	r0, r6
 801267a:	4639      	mov	r1, r7
 801267c:	f7ee fa44 	bl	8000b08 <__aeabi_dcmpeq>
 8012680:	b110      	cbz	r0, 8012688 <_dtoa_r+0x6d8>
 8012682:	9b02      	ldr	r3, [sp, #8]
 8012684:	07d9      	lsls	r1, r3, #31
 8012686:	d40f      	bmi.n	80126a8 <_dtoa_r+0x6f8>
 8012688:	4620      	mov	r0, r4
 801268a:	4659      	mov	r1, fp
 801268c:	f000 fc0c 	bl	8012ea8 <_Bfree>
 8012690:	2300      	movs	r3, #0
 8012692:	702b      	strb	r3, [r5, #0]
 8012694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012696:	f10a 0001 	add.w	r0, sl, #1
 801269a:	6018      	str	r0, [r3, #0]
 801269c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801269e:	2b00      	cmp	r3, #0
 80126a0:	f43f acd8 	beq.w	8012054 <_dtoa_r+0xa4>
 80126a4:	601d      	str	r5, [r3, #0]
 80126a6:	e4d5      	b.n	8012054 <_dtoa_r+0xa4>
 80126a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80126ac:	462b      	mov	r3, r5
 80126ae:	461d      	mov	r5, r3
 80126b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80126b4:	2a39      	cmp	r2, #57	; 0x39
 80126b6:	d108      	bne.n	80126ca <_dtoa_r+0x71a>
 80126b8:	9a00      	ldr	r2, [sp, #0]
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d1f7      	bne.n	80126ae <_dtoa_r+0x6fe>
 80126be:	9a07      	ldr	r2, [sp, #28]
 80126c0:	9900      	ldr	r1, [sp, #0]
 80126c2:	3201      	adds	r2, #1
 80126c4:	9207      	str	r2, [sp, #28]
 80126c6:	2230      	movs	r2, #48	; 0x30
 80126c8:	700a      	strb	r2, [r1, #0]
 80126ca:	781a      	ldrb	r2, [r3, #0]
 80126cc:	3201      	adds	r2, #1
 80126ce:	701a      	strb	r2, [r3, #0]
 80126d0:	e78c      	b.n	80125ec <_dtoa_r+0x63c>
 80126d2:	4b7f      	ldr	r3, [pc, #508]	; (80128d0 <_dtoa_r+0x920>)
 80126d4:	2200      	movs	r2, #0
 80126d6:	f7ed ffaf 	bl	8000638 <__aeabi_dmul>
 80126da:	2200      	movs	r2, #0
 80126dc:	2300      	movs	r3, #0
 80126de:	4606      	mov	r6, r0
 80126e0:	460f      	mov	r7, r1
 80126e2:	f7ee fa11 	bl	8000b08 <__aeabi_dcmpeq>
 80126e6:	2800      	cmp	r0, #0
 80126e8:	d09b      	beq.n	8012622 <_dtoa_r+0x672>
 80126ea:	e7cd      	b.n	8012688 <_dtoa_r+0x6d8>
 80126ec:	9a08      	ldr	r2, [sp, #32]
 80126ee:	2a00      	cmp	r2, #0
 80126f0:	f000 80c4 	beq.w	801287c <_dtoa_r+0x8cc>
 80126f4:	9a05      	ldr	r2, [sp, #20]
 80126f6:	2a01      	cmp	r2, #1
 80126f8:	f300 80a8 	bgt.w	801284c <_dtoa_r+0x89c>
 80126fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80126fe:	2a00      	cmp	r2, #0
 8012700:	f000 80a0 	beq.w	8012844 <_dtoa_r+0x894>
 8012704:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012708:	9e06      	ldr	r6, [sp, #24]
 801270a:	4645      	mov	r5, r8
 801270c:	9a04      	ldr	r2, [sp, #16]
 801270e:	2101      	movs	r1, #1
 8012710:	441a      	add	r2, r3
 8012712:	4620      	mov	r0, r4
 8012714:	4498      	add	r8, r3
 8012716:	9204      	str	r2, [sp, #16]
 8012718:	f000 fc82 	bl	8013020 <__i2b>
 801271c:	4607      	mov	r7, r0
 801271e:	2d00      	cmp	r5, #0
 8012720:	dd0b      	ble.n	801273a <_dtoa_r+0x78a>
 8012722:	9b04      	ldr	r3, [sp, #16]
 8012724:	2b00      	cmp	r3, #0
 8012726:	dd08      	ble.n	801273a <_dtoa_r+0x78a>
 8012728:	42ab      	cmp	r3, r5
 801272a:	9a04      	ldr	r2, [sp, #16]
 801272c:	bfa8      	it	ge
 801272e:	462b      	movge	r3, r5
 8012730:	eba8 0803 	sub.w	r8, r8, r3
 8012734:	1aed      	subs	r5, r5, r3
 8012736:	1ad3      	subs	r3, r2, r3
 8012738:	9304      	str	r3, [sp, #16]
 801273a:	9b06      	ldr	r3, [sp, #24]
 801273c:	b1fb      	cbz	r3, 801277e <_dtoa_r+0x7ce>
 801273e:	9b08      	ldr	r3, [sp, #32]
 8012740:	2b00      	cmp	r3, #0
 8012742:	f000 809f 	beq.w	8012884 <_dtoa_r+0x8d4>
 8012746:	2e00      	cmp	r6, #0
 8012748:	dd11      	ble.n	801276e <_dtoa_r+0x7be>
 801274a:	4639      	mov	r1, r7
 801274c:	4632      	mov	r2, r6
 801274e:	4620      	mov	r0, r4
 8012750:	f000 fd22 	bl	8013198 <__pow5mult>
 8012754:	465a      	mov	r2, fp
 8012756:	4601      	mov	r1, r0
 8012758:	4607      	mov	r7, r0
 801275a:	4620      	mov	r0, r4
 801275c:	f000 fc76 	bl	801304c <__multiply>
 8012760:	4659      	mov	r1, fp
 8012762:	9007      	str	r0, [sp, #28]
 8012764:	4620      	mov	r0, r4
 8012766:	f000 fb9f 	bl	8012ea8 <_Bfree>
 801276a:	9b07      	ldr	r3, [sp, #28]
 801276c:	469b      	mov	fp, r3
 801276e:	9b06      	ldr	r3, [sp, #24]
 8012770:	1b9a      	subs	r2, r3, r6
 8012772:	d004      	beq.n	801277e <_dtoa_r+0x7ce>
 8012774:	4659      	mov	r1, fp
 8012776:	4620      	mov	r0, r4
 8012778:	f000 fd0e 	bl	8013198 <__pow5mult>
 801277c:	4683      	mov	fp, r0
 801277e:	2101      	movs	r1, #1
 8012780:	4620      	mov	r0, r4
 8012782:	f000 fc4d 	bl	8013020 <__i2b>
 8012786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012788:	2b00      	cmp	r3, #0
 801278a:	4606      	mov	r6, r0
 801278c:	dd7c      	ble.n	8012888 <_dtoa_r+0x8d8>
 801278e:	461a      	mov	r2, r3
 8012790:	4601      	mov	r1, r0
 8012792:	4620      	mov	r0, r4
 8012794:	f000 fd00 	bl	8013198 <__pow5mult>
 8012798:	9b05      	ldr	r3, [sp, #20]
 801279a:	2b01      	cmp	r3, #1
 801279c:	4606      	mov	r6, r0
 801279e:	dd76      	ble.n	801288e <_dtoa_r+0x8de>
 80127a0:	2300      	movs	r3, #0
 80127a2:	9306      	str	r3, [sp, #24]
 80127a4:	6933      	ldr	r3, [r6, #16]
 80127a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80127aa:	6918      	ldr	r0, [r3, #16]
 80127ac:	f000 fbe8 	bl	8012f80 <__hi0bits>
 80127b0:	f1c0 0020 	rsb	r0, r0, #32
 80127b4:	9b04      	ldr	r3, [sp, #16]
 80127b6:	4418      	add	r0, r3
 80127b8:	f010 001f 	ands.w	r0, r0, #31
 80127bc:	f000 8086 	beq.w	80128cc <_dtoa_r+0x91c>
 80127c0:	f1c0 0320 	rsb	r3, r0, #32
 80127c4:	2b04      	cmp	r3, #4
 80127c6:	dd7f      	ble.n	80128c8 <_dtoa_r+0x918>
 80127c8:	f1c0 001c 	rsb	r0, r0, #28
 80127cc:	9b04      	ldr	r3, [sp, #16]
 80127ce:	4403      	add	r3, r0
 80127d0:	4480      	add	r8, r0
 80127d2:	4405      	add	r5, r0
 80127d4:	9304      	str	r3, [sp, #16]
 80127d6:	f1b8 0f00 	cmp.w	r8, #0
 80127da:	dd05      	ble.n	80127e8 <_dtoa_r+0x838>
 80127dc:	4659      	mov	r1, fp
 80127de:	4642      	mov	r2, r8
 80127e0:	4620      	mov	r0, r4
 80127e2:	f000 fd33 	bl	801324c <__lshift>
 80127e6:	4683      	mov	fp, r0
 80127e8:	9b04      	ldr	r3, [sp, #16]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	dd05      	ble.n	80127fa <_dtoa_r+0x84a>
 80127ee:	4631      	mov	r1, r6
 80127f0:	461a      	mov	r2, r3
 80127f2:	4620      	mov	r0, r4
 80127f4:	f000 fd2a 	bl	801324c <__lshift>
 80127f8:	4606      	mov	r6, r0
 80127fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d069      	beq.n	80128d4 <_dtoa_r+0x924>
 8012800:	4631      	mov	r1, r6
 8012802:	4658      	mov	r0, fp
 8012804:	f000 fd8e 	bl	8013324 <__mcmp>
 8012808:	2800      	cmp	r0, #0
 801280a:	da63      	bge.n	80128d4 <_dtoa_r+0x924>
 801280c:	2300      	movs	r3, #0
 801280e:	4659      	mov	r1, fp
 8012810:	220a      	movs	r2, #10
 8012812:	4620      	mov	r0, r4
 8012814:	f000 fb6a 	bl	8012eec <__multadd>
 8012818:	9b08      	ldr	r3, [sp, #32]
 801281a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801281e:	4683      	mov	fp, r0
 8012820:	2b00      	cmp	r3, #0
 8012822:	f000 818f 	beq.w	8012b44 <_dtoa_r+0xb94>
 8012826:	4639      	mov	r1, r7
 8012828:	2300      	movs	r3, #0
 801282a:	220a      	movs	r2, #10
 801282c:	4620      	mov	r0, r4
 801282e:	f000 fb5d 	bl	8012eec <__multadd>
 8012832:	f1b9 0f00 	cmp.w	r9, #0
 8012836:	4607      	mov	r7, r0
 8012838:	f300 808e 	bgt.w	8012958 <_dtoa_r+0x9a8>
 801283c:	9b05      	ldr	r3, [sp, #20]
 801283e:	2b02      	cmp	r3, #2
 8012840:	dc50      	bgt.n	80128e4 <_dtoa_r+0x934>
 8012842:	e089      	b.n	8012958 <_dtoa_r+0x9a8>
 8012844:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012846:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801284a:	e75d      	b.n	8012708 <_dtoa_r+0x758>
 801284c:	9b01      	ldr	r3, [sp, #4]
 801284e:	1e5e      	subs	r6, r3, #1
 8012850:	9b06      	ldr	r3, [sp, #24]
 8012852:	42b3      	cmp	r3, r6
 8012854:	bfbf      	itttt	lt
 8012856:	9b06      	ldrlt	r3, [sp, #24]
 8012858:	9606      	strlt	r6, [sp, #24]
 801285a:	1af2      	sublt	r2, r6, r3
 801285c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801285e:	bfb6      	itet	lt
 8012860:	189b      	addlt	r3, r3, r2
 8012862:	1b9e      	subge	r6, r3, r6
 8012864:	930d      	strlt	r3, [sp, #52]	; 0x34
 8012866:	9b01      	ldr	r3, [sp, #4]
 8012868:	bfb8      	it	lt
 801286a:	2600      	movlt	r6, #0
 801286c:	2b00      	cmp	r3, #0
 801286e:	bfb5      	itete	lt
 8012870:	eba8 0503 	sublt.w	r5, r8, r3
 8012874:	9b01      	ldrge	r3, [sp, #4]
 8012876:	2300      	movlt	r3, #0
 8012878:	4645      	movge	r5, r8
 801287a:	e747      	b.n	801270c <_dtoa_r+0x75c>
 801287c:	9e06      	ldr	r6, [sp, #24]
 801287e:	9f08      	ldr	r7, [sp, #32]
 8012880:	4645      	mov	r5, r8
 8012882:	e74c      	b.n	801271e <_dtoa_r+0x76e>
 8012884:	9a06      	ldr	r2, [sp, #24]
 8012886:	e775      	b.n	8012774 <_dtoa_r+0x7c4>
 8012888:	9b05      	ldr	r3, [sp, #20]
 801288a:	2b01      	cmp	r3, #1
 801288c:	dc18      	bgt.n	80128c0 <_dtoa_r+0x910>
 801288e:	9b02      	ldr	r3, [sp, #8]
 8012890:	b9b3      	cbnz	r3, 80128c0 <_dtoa_r+0x910>
 8012892:	9b03      	ldr	r3, [sp, #12]
 8012894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012898:	b9a3      	cbnz	r3, 80128c4 <_dtoa_r+0x914>
 801289a:	9b03      	ldr	r3, [sp, #12]
 801289c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80128a0:	0d1b      	lsrs	r3, r3, #20
 80128a2:	051b      	lsls	r3, r3, #20
 80128a4:	b12b      	cbz	r3, 80128b2 <_dtoa_r+0x902>
 80128a6:	9b04      	ldr	r3, [sp, #16]
 80128a8:	3301      	adds	r3, #1
 80128aa:	9304      	str	r3, [sp, #16]
 80128ac:	f108 0801 	add.w	r8, r8, #1
 80128b0:	2301      	movs	r3, #1
 80128b2:	9306      	str	r3, [sp, #24]
 80128b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	f47f af74 	bne.w	80127a4 <_dtoa_r+0x7f4>
 80128bc:	2001      	movs	r0, #1
 80128be:	e779      	b.n	80127b4 <_dtoa_r+0x804>
 80128c0:	2300      	movs	r3, #0
 80128c2:	e7f6      	b.n	80128b2 <_dtoa_r+0x902>
 80128c4:	9b02      	ldr	r3, [sp, #8]
 80128c6:	e7f4      	b.n	80128b2 <_dtoa_r+0x902>
 80128c8:	d085      	beq.n	80127d6 <_dtoa_r+0x826>
 80128ca:	4618      	mov	r0, r3
 80128cc:	301c      	adds	r0, #28
 80128ce:	e77d      	b.n	80127cc <_dtoa_r+0x81c>
 80128d0:	40240000 	.word	0x40240000
 80128d4:	9b01      	ldr	r3, [sp, #4]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	dc38      	bgt.n	801294c <_dtoa_r+0x99c>
 80128da:	9b05      	ldr	r3, [sp, #20]
 80128dc:	2b02      	cmp	r3, #2
 80128de:	dd35      	ble.n	801294c <_dtoa_r+0x99c>
 80128e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80128e4:	f1b9 0f00 	cmp.w	r9, #0
 80128e8:	d10d      	bne.n	8012906 <_dtoa_r+0x956>
 80128ea:	4631      	mov	r1, r6
 80128ec:	464b      	mov	r3, r9
 80128ee:	2205      	movs	r2, #5
 80128f0:	4620      	mov	r0, r4
 80128f2:	f000 fafb 	bl	8012eec <__multadd>
 80128f6:	4601      	mov	r1, r0
 80128f8:	4606      	mov	r6, r0
 80128fa:	4658      	mov	r0, fp
 80128fc:	f000 fd12 	bl	8013324 <__mcmp>
 8012900:	2800      	cmp	r0, #0
 8012902:	f73f adbd 	bgt.w	8012480 <_dtoa_r+0x4d0>
 8012906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012908:	9d00      	ldr	r5, [sp, #0]
 801290a:	ea6f 0a03 	mvn.w	sl, r3
 801290e:	f04f 0800 	mov.w	r8, #0
 8012912:	4631      	mov	r1, r6
 8012914:	4620      	mov	r0, r4
 8012916:	f000 fac7 	bl	8012ea8 <_Bfree>
 801291a:	2f00      	cmp	r7, #0
 801291c:	f43f aeb4 	beq.w	8012688 <_dtoa_r+0x6d8>
 8012920:	f1b8 0f00 	cmp.w	r8, #0
 8012924:	d005      	beq.n	8012932 <_dtoa_r+0x982>
 8012926:	45b8      	cmp	r8, r7
 8012928:	d003      	beq.n	8012932 <_dtoa_r+0x982>
 801292a:	4641      	mov	r1, r8
 801292c:	4620      	mov	r0, r4
 801292e:	f000 fabb 	bl	8012ea8 <_Bfree>
 8012932:	4639      	mov	r1, r7
 8012934:	4620      	mov	r0, r4
 8012936:	f000 fab7 	bl	8012ea8 <_Bfree>
 801293a:	e6a5      	b.n	8012688 <_dtoa_r+0x6d8>
 801293c:	2600      	movs	r6, #0
 801293e:	4637      	mov	r7, r6
 8012940:	e7e1      	b.n	8012906 <_dtoa_r+0x956>
 8012942:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012944:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012948:	4637      	mov	r7, r6
 801294a:	e599      	b.n	8012480 <_dtoa_r+0x4d0>
 801294c:	9b08      	ldr	r3, [sp, #32]
 801294e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012952:	2b00      	cmp	r3, #0
 8012954:	f000 80fd 	beq.w	8012b52 <_dtoa_r+0xba2>
 8012958:	2d00      	cmp	r5, #0
 801295a:	dd05      	ble.n	8012968 <_dtoa_r+0x9b8>
 801295c:	4639      	mov	r1, r7
 801295e:	462a      	mov	r2, r5
 8012960:	4620      	mov	r0, r4
 8012962:	f000 fc73 	bl	801324c <__lshift>
 8012966:	4607      	mov	r7, r0
 8012968:	9b06      	ldr	r3, [sp, #24]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d05c      	beq.n	8012a28 <_dtoa_r+0xa78>
 801296e:	6879      	ldr	r1, [r7, #4]
 8012970:	4620      	mov	r0, r4
 8012972:	f000 fa59 	bl	8012e28 <_Balloc>
 8012976:	4605      	mov	r5, r0
 8012978:	b928      	cbnz	r0, 8012986 <_dtoa_r+0x9d6>
 801297a:	4b80      	ldr	r3, [pc, #512]	; (8012b7c <_dtoa_r+0xbcc>)
 801297c:	4602      	mov	r2, r0
 801297e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012982:	f7ff bb2e 	b.w	8011fe2 <_dtoa_r+0x32>
 8012986:	693a      	ldr	r2, [r7, #16]
 8012988:	3202      	adds	r2, #2
 801298a:	0092      	lsls	r2, r2, #2
 801298c:	f107 010c 	add.w	r1, r7, #12
 8012990:	300c      	adds	r0, #12
 8012992:	f7fe fb4e 	bl	8011032 <memcpy>
 8012996:	2201      	movs	r2, #1
 8012998:	4629      	mov	r1, r5
 801299a:	4620      	mov	r0, r4
 801299c:	f000 fc56 	bl	801324c <__lshift>
 80129a0:	9b00      	ldr	r3, [sp, #0]
 80129a2:	3301      	adds	r3, #1
 80129a4:	9301      	str	r3, [sp, #4]
 80129a6:	9b00      	ldr	r3, [sp, #0]
 80129a8:	444b      	add	r3, r9
 80129aa:	9307      	str	r3, [sp, #28]
 80129ac:	9b02      	ldr	r3, [sp, #8]
 80129ae:	f003 0301 	and.w	r3, r3, #1
 80129b2:	46b8      	mov	r8, r7
 80129b4:	9306      	str	r3, [sp, #24]
 80129b6:	4607      	mov	r7, r0
 80129b8:	9b01      	ldr	r3, [sp, #4]
 80129ba:	4631      	mov	r1, r6
 80129bc:	3b01      	subs	r3, #1
 80129be:	4658      	mov	r0, fp
 80129c0:	9302      	str	r3, [sp, #8]
 80129c2:	f7ff fa67 	bl	8011e94 <quorem>
 80129c6:	4603      	mov	r3, r0
 80129c8:	3330      	adds	r3, #48	; 0x30
 80129ca:	9004      	str	r0, [sp, #16]
 80129cc:	4641      	mov	r1, r8
 80129ce:	4658      	mov	r0, fp
 80129d0:	9308      	str	r3, [sp, #32]
 80129d2:	f000 fca7 	bl	8013324 <__mcmp>
 80129d6:	463a      	mov	r2, r7
 80129d8:	4681      	mov	r9, r0
 80129da:	4631      	mov	r1, r6
 80129dc:	4620      	mov	r0, r4
 80129de:	f000 fcbd 	bl	801335c <__mdiff>
 80129e2:	68c2      	ldr	r2, [r0, #12]
 80129e4:	9b08      	ldr	r3, [sp, #32]
 80129e6:	4605      	mov	r5, r0
 80129e8:	bb02      	cbnz	r2, 8012a2c <_dtoa_r+0xa7c>
 80129ea:	4601      	mov	r1, r0
 80129ec:	4658      	mov	r0, fp
 80129ee:	f000 fc99 	bl	8013324 <__mcmp>
 80129f2:	9b08      	ldr	r3, [sp, #32]
 80129f4:	4602      	mov	r2, r0
 80129f6:	4629      	mov	r1, r5
 80129f8:	4620      	mov	r0, r4
 80129fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80129fe:	f000 fa53 	bl	8012ea8 <_Bfree>
 8012a02:	9b05      	ldr	r3, [sp, #20]
 8012a04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a06:	9d01      	ldr	r5, [sp, #4]
 8012a08:	ea43 0102 	orr.w	r1, r3, r2
 8012a0c:	9b06      	ldr	r3, [sp, #24]
 8012a0e:	430b      	orrs	r3, r1
 8012a10:	9b08      	ldr	r3, [sp, #32]
 8012a12:	d10d      	bne.n	8012a30 <_dtoa_r+0xa80>
 8012a14:	2b39      	cmp	r3, #57	; 0x39
 8012a16:	d029      	beq.n	8012a6c <_dtoa_r+0xabc>
 8012a18:	f1b9 0f00 	cmp.w	r9, #0
 8012a1c:	dd01      	ble.n	8012a22 <_dtoa_r+0xa72>
 8012a1e:	9b04      	ldr	r3, [sp, #16]
 8012a20:	3331      	adds	r3, #49	; 0x31
 8012a22:	9a02      	ldr	r2, [sp, #8]
 8012a24:	7013      	strb	r3, [r2, #0]
 8012a26:	e774      	b.n	8012912 <_dtoa_r+0x962>
 8012a28:	4638      	mov	r0, r7
 8012a2a:	e7b9      	b.n	80129a0 <_dtoa_r+0x9f0>
 8012a2c:	2201      	movs	r2, #1
 8012a2e:	e7e2      	b.n	80129f6 <_dtoa_r+0xa46>
 8012a30:	f1b9 0f00 	cmp.w	r9, #0
 8012a34:	db06      	blt.n	8012a44 <_dtoa_r+0xa94>
 8012a36:	9905      	ldr	r1, [sp, #20]
 8012a38:	ea41 0909 	orr.w	r9, r1, r9
 8012a3c:	9906      	ldr	r1, [sp, #24]
 8012a3e:	ea59 0101 	orrs.w	r1, r9, r1
 8012a42:	d120      	bne.n	8012a86 <_dtoa_r+0xad6>
 8012a44:	2a00      	cmp	r2, #0
 8012a46:	ddec      	ble.n	8012a22 <_dtoa_r+0xa72>
 8012a48:	4659      	mov	r1, fp
 8012a4a:	2201      	movs	r2, #1
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	9301      	str	r3, [sp, #4]
 8012a50:	f000 fbfc 	bl	801324c <__lshift>
 8012a54:	4631      	mov	r1, r6
 8012a56:	4683      	mov	fp, r0
 8012a58:	f000 fc64 	bl	8013324 <__mcmp>
 8012a5c:	2800      	cmp	r0, #0
 8012a5e:	9b01      	ldr	r3, [sp, #4]
 8012a60:	dc02      	bgt.n	8012a68 <_dtoa_r+0xab8>
 8012a62:	d1de      	bne.n	8012a22 <_dtoa_r+0xa72>
 8012a64:	07da      	lsls	r2, r3, #31
 8012a66:	d5dc      	bpl.n	8012a22 <_dtoa_r+0xa72>
 8012a68:	2b39      	cmp	r3, #57	; 0x39
 8012a6a:	d1d8      	bne.n	8012a1e <_dtoa_r+0xa6e>
 8012a6c:	9a02      	ldr	r2, [sp, #8]
 8012a6e:	2339      	movs	r3, #57	; 0x39
 8012a70:	7013      	strb	r3, [r2, #0]
 8012a72:	462b      	mov	r3, r5
 8012a74:	461d      	mov	r5, r3
 8012a76:	3b01      	subs	r3, #1
 8012a78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012a7c:	2a39      	cmp	r2, #57	; 0x39
 8012a7e:	d050      	beq.n	8012b22 <_dtoa_r+0xb72>
 8012a80:	3201      	adds	r2, #1
 8012a82:	701a      	strb	r2, [r3, #0]
 8012a84:	e745      	b.n	8012912 <_dtoa_r+0x962>
 8012a86:	2a00      	cmp	r2, #0
 8012a88:	dd03      	ble.n	8012a92 <_dtoa_r+0xae2>
 8012a8a:	2b39      	cmp	r3, #57	; 0x39
 8012a8c:	d0ee      	beq.n	8012a6c <_dtoa_r+0xabc>
 8012a8e:	3301      	adds	r3, #1
 8012a90:	e7c7      	b.n	8012a22 <_dtoa_r+0xa72>
 8012a92:	9a01      	ldr	r2, [sp, #4]
 8012a94:	9907      	ldr	r1, [sp, #28]
 8012a96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012a9a:	428a      	cmp	r2, r1
 8012a9c:	d02a      	beq.n	8012af4 <_dtoa_r+0xb44>
 8012a9e:	4659      	mov	r1, fp
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	220a      	movs	r2, #10
 8012aa4:	4620      	mov	r0, r4
 8012aa6:	f000 fa21 	bl	8012eec <__multadd>
 8012aaa:	45b8      	cmp	r8, r7
 8012aac:	4683      	mov	fp, r0
 8012aae:	f04f 0300 	mov.w	r3, #0
 8012ab2:	f04f 020a 	mov.w	r2, #10
 8012ab6:	4641      	mov	r1, r8
 8012ab8:	4620      	mov	r0, r4
 8012aba:	d107      	bne.n	8012acc <_dtoa_r+0xb1c>
 8012abc:	f000 fa16 	bl	8012eec <__multadd>
 8012ac0:	4680      	mov	r8, r0
 8012ac2:	4607      	mov	r7, r0
 8012ac4:	9b01      	ldr	r3, [sp, #4]
 8012ac6:	3301      	adds	r3, #1
 8012ac8:	9301      	str	r3, [sp, #4]
 8012aca:	e775      	b.n	80129b8 <_dtoa_r+0xa08>
 8012acc:	f000 fa0e 	bl	8012eec <__multadd>
 8012ad0:	4639      	mov	r1, r7
 8012ad2:	4680      	mov	r8, r0
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	220a      	movs	r2, #10
 8012ad8:	4620      	mov	r0, r4
 8012ada:	f000 fa07 	bl	8012eec <__multadd>
 8012ade:	4607      	mov	r7, r0
 8012ae0:	e7f0      	b.n	8012ac4 <_dtoa_r+0xb14>
 8012ae2:	f1b9 0f00 	cmp.w	r9, #0
 8012ae6:	9a00      	ldr	r2, [sp, #0]
 8012ae8:	bfcc      	ite	gt
 8012aea:	464d      	movgt	r5, r9
 8012aec:	2501      	movle	r5, #1
 8012aee:	4415      	add	r5, r2
 8012af0:	f04f 0800 	mov.w	r8, #0
 8012af4:	4659      	mov	r1, fp
 8012af6:	2201      	movs	r2, #1
 8012af8:	4620      	mov	r0, r4
 8012afa:	9301      	str	r3, [sp, #4]
 8012afc:	f000 fba6 	bl	801324c <__lshift>
 8012b00:	4631      	mov	r1, r6
 8012b02:	4683      	mov	fp, r0
 8012b04:	f000 fc0e 	bl	8013324 <__mcmp>
 8012b08:	2800      	cmp	r0, #0
 8012b0a:	dcb2      	bgt.n	8012a72 <_dtoa_r+0xac2>
 8012b0c:	d102      	bne.n	8012b14 <_dtoa_r+0xb64>
 8012b0e:	9b01      	ldr	r3, [sp, #4]
 8012b10:	07db      	lsls	r3, r3, #31
 8012b12:	d4ae      	bmi.n	8012a72 <_dtoa_r+0xac2>
 8012b14:	462b      	mov	r3, r5
 8012b16:	461d      	mov	r5, r3
 8012b18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b1c:	2a30      	cmp	r2, #48	; 0x30
 8012b1e:	d0fa      	beq.n	8012b16 <_dtoa_r+0xb66>
 8012b20:	e6f7      	b.n	8012912 <_dtoa_r+0x962>
 8012b22:	9a00      	ldr	r2, [sp, #0]
 8012b24:	429a      	cmp	r2, r3
 8012b26:	d1a5      	bne.n	8012a74 <_dtoa_r+0xac4>
 8012b28:	f10a 0a01 	add.w	sl, sl, #1
 8012b2c:	2331      	movs	r3, #49	; 0x31
 8012b2e:	e779      	b.n	8012a24 <_dtoa_r+0xa74>
 8012b30:	4b13      	ldr	r3, [pc, #76]	; (8012b80 <_dtoa_r+0xbd0>)
 8012b32:	f7ff baaf 	b.w	8012094 <_dtoa_r+0xe4>
 8012b36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	f47f aa86 	bne.w	801204a <_dtoa_r+0x9a>
 8012b3e:	4b11      	ldr	r3, [pc, #68]	; (8012b84 <_dtoa_r+0xbd4>)
 8012b40:	f7ff baa8 	b.w	8012094 <_dtoa_r+0xe4>
 8012b44:	f1b9 0f00 	cmp.w	r9, #0
 8012b48:	dc03      	bgt.n	8012b52 <_dtoa_r+0xba2>
 8012b4a:	9b05      	ldr	r3, [sp, #20]
 8012b4c:	2b02      	cmp	r3, #2
 8012b4e:	f73f aec9 	bgt.w	80128e4 <_dtoa_r+0x934>
 8012b52:	9d00      	ldr	r5, [sp, #0]
 8012b54:	4631      	mov	r1, r6
 8012b56:	4658      	mov	r0, fp
 8012b58:	f7ff f99c 	bl	8011e94 <quorem>
 8012b5c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012b60:	f805 3b01 	strb.w	r3, [r5], #1
 8012b64:	9a00      	ldr	r2, [sp, #0]
 8012b66:	1aaa      	subs	r2, r5, r2
 8012b68:	4591      	cmp	r9, r2
 8012b6a:	ddba      	ble.n	8012ae2 <_dtoa_r+0xb32>
 8012b6c:	4659      	mov	r1, fp
 8012b6e:	2300      	movs	r3, #0
 8012b70:	220a      	movs	r2, #10
 8012b72:	4620      	mov	r0, r4
 8012b74:	f000 f9ba 	bl	8012eec <__multadd>
 8012b78:	4683      	mov	fp, r0
 8012b7a:	e7eb      	b.n	8012b54 <_dtoa_r+0xba4>
 8012b7c:	08016f87 	.word	0x08016f87
 8012b80:	08016ee0 	.word	0x08016ee0
 8012b84:	08016f04 	.word	0x08016f04

08012b88 <__sflush_r>:
 8012b88:	898a      	ldrh	r2, [r1, #12]
 8012b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b8e:	4605      	mov	r5, r0
 8012b90:	0710      	lsls	r0, r2, #28
 8012b92:	460c      	mov	r4, r1
 8012b94:	d458      	bmi.n	8012c48 <__sflush_r+0xc0>
 8012b96:	684b      	ldr	r3, [r1, #4]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	dc05      	bgt.n	8012ba8 <__sflush_r+0x20>
 8012b9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	dc02      	bgt.n	8012ba8 <__sflush_r+0x20>
 8012ba2:	2000      	movs	r0, #0
 8012ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ba8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012baa:	2e00      	cmp	r6, #0
 8012bac:	d0f9      	beq.n	8012ba2 <__sflush_r+0x1a>
 8012bae:	2300      	movs	r3, #0
 8012bb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012bb4:	682f      	ldr	r7, [r5, #0]
 8012bb6:	602b      	str	r3, [r5, #0]
 8012bb8:	d032      	beq.n	8012c20 <__sflush_r+0x98>
 8012bba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012bbc:	89a3      	ldrh	r3, [r4, #12]
 8012bbe:	075a      	lsls	r2, r3, #29
 8012bc0:	d505      	bpl.n	8012bce <__sflush_r+0x46>
 8012bc2:	6863      	ldr	r3, [r4, #4]
 8012bc4:	1ac0      	subs	r0, r0, r3
 8012bc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012bc8:	b10b      	cbz	r3, 8012bce <__sflush_r+0x46>
 8012bca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012bcc:	1ac0      	subs	r0, r0, r3
 8012bce:	2300      	movs	r3, #0
 8012bd0:	4602      	mov	r2, r0
 8012bd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012bd4:	6a21      	ldr	r1, [r4, #32]
 8012bd6:	4628      	mov	r0, r5
 8012bd8:	47b0      	blx	r6
 8012bda:	1c43      	adds	r3, r0, #1
 8012bdc:	89a3      	ldrh	r3, [r4, #12]
 8012bde:	d106      	bne.n	8012bee <__sflush_r+0x66>
 8012be0:	6829      	ldr	r1, [r5, #0]
 8012be2:	291d      	cmp	r1, #29
 8012be4:	d82c      	bhi.n	8012c40 <__sflush_r+0xb8>
 8012be6:	4a2a      	ldr	r2, [pc, #168]	; (8012c90 <__sflush_r+0x108>)
 8012be8:	40ca      	lsrs	r2, r1
 8012bea:	07d6      	lsls	r6, r2, #31
 8012bec:	d528      	bpl.n	8012c40 <__sflush_r+0xb8>
 8012bee:	2200      	movs	r2, #0
 8012bf0:	6062      	str	r2, [r4, #4]
 8012bf2:	04d9      	lsls	r1, r3, #19
 8012bf4:	6922      	ldr	r2, [r4, #16]
 8012bf6:	6022      	str	r2, [r4, #0]
 8012bf8:	d504      	bpl.n	8012c04 <__sflush_r+0x7c>
 8012bfa:	1c42      	adds	r2, r0, #1
 8012bfc:	d101      	bne.n	8012c02 <__sflush_r+0x7a>
 8012bfe:	682b      	ldr	r3, [r5, #0]
 8012c00:	b903      	cbnz	r3, 8012c04 <__sflush_r+0x7c>
 8012c02:	6560      	str	r0, [r4, #84]	; 0x54
 8012c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c06:	602f      	str	r7, [r5, #0]
 8012c08:	2900      	cmp	r1, #0
 8012c0a:	d0ca      	beq.n	8012ba2 <__sflush_r+0x1a>
 8012c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c10:	4299      	cmp	r1, r3
 8012c12:	d002      	beq.n	8012c1a <__sflush_r+0x92>
 8012c14:	4628      	mov	r0, r5
 8012c16:	f000 fc95 	bl	8013544 <_free_r>
 8012c1a:	2000      	movs	r0, #0
 8012c1c:	6360      	str	r0, [r4, #52]	; 0x34
 8012c1e:	e7c1      	b.n	8012ba4 <__sflush_r+0x1c>
 8012c20:	6a21      	ldr	r1, [r4, #32]
 8012c22:	2301      	movs	r3, #1
 8012c24:	4628      	mov	r0, r5
 8012c26:	47b0      	blx	r6
 8012c28:	1c41      	adds	r1, r0, #1
 8012c2a:	d1c7      	bne.n	8012bbc <__sflush_r+0x34>
 8012c2c:	682b      	ldr	r3, [r5, #0]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d0c4      	beq.n	8012bbc <__sflush_r+0x34>
 8012c32:	2b1d      	cmp	r3, #29
 8012c34:	d001      	beq.n	8012c3a <__sflush_r+0xb2>
 8012c36:	2b16      	cmp	r3, #22
 8012c38:	d101      	bne.n	8012c3e <__sflush_r+0xb6>
 8012c3a:	602f      	str	r7, [r5, #0]
 8012c3c:	e7b1      	b.n	8012ba2 <__sflush_r+0x1a>
 8012c3e:	89a3      	ldrh	r3, [r4, #12]
 8012c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c44:	81a3      	strh	r3, [r4, #12]
 8012c46:	e7ad      	b.n	8012ba4 <__sflush_r+0x1c>
 8012c48:	690f      	ldr	r7, [r1, #16]
 8012c4a:	2f00      	cmp	r7, #0
 8012c4c:	d0a9      	beq.n	8012ba2 <__sflush_r+0x1a>
 8012c4e:	0793      	lsls	r3, r2, #30
 8012c50:	680e      	ldr	r6, [r1, #0]
 8012c52:	bf08      	it	eq
 8012c54:	694b      	ldreq	r3, [r1, #20]
 8012c56:	600f      	str	r7, [r1, #0]
 8012c58:	bf18      	it	ne
 8012c5a:	2300      	movne	r3, #0
 8012c5c:	eba6 0807 	sub.w	r8, r6, r7
 8012c60:	608b      	str	r3, [r1, #8]
 8012c62:	f1b8 0f00 	cmp.w	r8, #0
 8012c66:	dd9c      	ble.n	8012ba2 <__sflush_r+0x1a>
 8012c68:	6a21      	ldr	r1, [r4, #32]
 8012c6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012c6c:	4643      	mov	r3, r8
 8012c6e:	463a      	mov	r2, r7
 8012c70:	4628      	mov	r0, r5
 8012c72:	47b0      	blx	r6
 8012c74:	2800      	cmp	r0, #0
 8012c76:	dc06      	bgt.n	8012c86 <__sflush_r+0xfe>
 8012c78:	89a3      	ldrh	r3, [r4, #12]
 8012c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c7e:	81a3      	strh	r3, [r4, #12]
 8012c80:	f04f 30ff 	mov.w	r0, #4294967295
 8012c84:	e78e      	b.n	8012ba4 <__sflush_r+0x1c>
 8012c86:	4407      	add	r7, r0
 8012c88:	eba8 0800 	sub.w	r8, r8, r0
 8012c8c:	e7e9      	b.n	8012c62 <__sflush_r+0xda>
 8012c8e:	bf00      	nop
 8012c90:	20400001 	.word	0x20400001

08012c94 <_fflush_r>:
 8012c94:	b538      	push	{r3, r4, r5, lr}
 8012c96:	690b      	ldr	r3, [r1, #16]
 8012c98:	4605      	mov	r5, r0
 8012c9a:	460c      	mov	r4, r1
 8012c9c:	b913      	cbnz	r3, 8012ca4 <_fflush_r+0x10>
 8012c9e:	2500      	movs	r5, #0
 8012ca0:	4628      	mov	r0, r5
 8012ca2:	bd38      	pop	{r3, r4, r5, pc}
 8012ca4:	b118      	cbz	r0, 8012cae <_fflush_r+0x1a>
 8012ca6:	6983      	ldr	r3, [r0, #24]
 8012ca8:	b90b      	cbnz	r3, 8012cae <_fflush_r+0x1a>
 8012caa:	f7fe f8fd 	bl	8010ea8 <__sinit>
 8012cae:	4b14      	ldr	r3, [pc, #80]	; (8012d00 <_fflush_r+0x6c>)
 8012cb0:	429c      	cmp	r4, r3
 8012cb2:	d11b      	bne.n	8012cec <_fflush_r+0x58>
 8012cb4:	686c      	ldr	r4, [r5, #4]
 8012cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d0ef      	beq.n	8012c9e <_fflush_r+0xa>
 8012cbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012cc0:	07d0      	lsls	r0, r2, #31
 8012cc2:	d404      	bmi.n	8012cce <_fflush_r+0x3a>
 8012cc4:	0599      	lsls	r1, r3, #22
 8012cc6:	d402      	bmi.n	8012cce <_fflush_r+0x3a>
 8012cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012cca:	f7fe f9b0 	bl	801102e <__retarget_lock_acquire_recursive>
 8012cce:	4628      	mov	r0, r5
 8012cd0:	4621      	mov	r1, r4
 8012cd2:	f7ff ff59 	bl	8012b88 <__sflush_r>
 8012cd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012cd8:	07da      	lsls	r2, r3, #31
 8012cda:	4605      	mov	r5, r0
 8012cdc:	d4e0      	bmi.n	8012ca0 <_fflush_r+0xc>
 8012cde:	89a3      	ldrh	r3, [r4, #12]
 8012ce0:	059b      	lsls	r3, r3, #22
 8012ce2:	d4dd      	bmi.n	8012ca0 <_fflush_r+0xc>
 8012ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ce6:	f7fe f9a3 	bl	8011030 <__retarget_lock_release_recursive>
 8012cea:	e7d9      	b.n	8012ca0 <_fflush_r+0xc>
 8012cec:	4b05      	ldr	r3, [pc, #20]	; (8012d04 <_fflush_r+0x70>)
 8012cee:	429c      	cmp	r4, r3
 8012cf0:	d101      	bne.n	8012cf6 <_fflush_r+0x62>
 8012cf2:	68ac      	ldr	r4, [r5, #8]
 8012cf4:	e7df      	b.n	8012cb6 <_fflush_r+0x22>
 8012cf6:	4b04      	ldr	r3, [pc, #16]	; (8012d08 <_fflush_r+0x74>)
 8012cf8:	429c      	cmp	r4, r3
 8012cfa:	bf08      	it	eq
 8012cfc:	68ec      	ldreq	r4, [r5, #12]
 8012cfe:	e7da      	b.n	8012cb6 <_fflush_r+0x22>
 8012d00:	08016e8c 	.word	0x08016e8c
 8012d04:	08016eac 	.word	0x08016eac
 8012d08:	08016e6c 	.word	0x08016e6c

08012d0c <_localeconv_r>:
 8012d0c:	4800      	ldr	r0, [pc, #0]	; (8012d10 <_localeconv_r+0x4>)
 8012d0e:	4770      	bx	lr
 8012d10:	20000420 	.word	0x20000420

08012d14 <_lseek_r>:
 8012d14:	b538      	push	{r3, r4, r5, lr}
 8012d16:	4d07      	ldr	r5, [pc, #28]	; (8012d34 <_lseek_r+0x20>)
 8012d18:	4604      	mov	r4, r0
 8012d1a:	4608      	mov	r0, r1
 8012d1c:	4611      	mov	r1, r2
 8012d1e:	2200      	movs	r2, #0
 8012d20:	602a      	str	r2, [r5, #0]
 8012d22:	461a      	mov	r2, r3
 8012d24:	f7f1 f830 	bl	8003d88 <_lseek>
 8012d28:	1c43      	adds	r3, r0, #1
 8012d2a:	d102      	bne.n	8012d32 <_lseek_r+0x1e>
 8012d2c:	682b      	ldr	r3, [r5, #0]
 8012d2e:	b103      	cbz	r3, 8012d32 <_lseek_r+0x1e>
 8012d30:	6023      	str	r3, [r4, #0]
 8012d32:	bd38      	pop	{r3, r4, r5, pc}
 8012d34:	20004e98 	.word	0x20004e98

08012d38 <__swhatbuf_r>:
 8012d38:	b570      	push	{r4, r5, r6, lr}
 8012d3a:	460e      	mov	r6, r1
 8012d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d40:	2900      	cmp	r1, #0
 8012d42:	b096      	sub	sp, #88	; 0x58
 8012d44:	4614      	mov	r4, r2
 8012d46:	461d      	mov	r5, r3
 8012d48:	da07      	bge.n	8012d5a <__swhatbuf_r+0x22>
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	602b      	str	r3, [r5, #0]
 8012d4e:	89b3      	ldrh	r3, [r6, #12]
 8012d50:	061a      	lsls	r2, r3, #24
 8012d52:	d410      	bmi.n	8012d76 <__swhatbuf_r+0x3e>
 8012d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d58:	e00e      	b.n	8012d78 <__swhatbuf_r+0x40>
 8012d5a:	466a      	mov	r2, sp
 8012d5c:	f000 ff3a 	bl	8013bd4 <_fstat_r>
 8012d60:	2800      	cmp	r0, #0
 8012d62:	dbf2      	blt.n	8012d4a <__swhatbuf_r+0x12>
 8012d64:	9a01      	ldr	r2, [sp, #4]
 8012d66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012d6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012d6e:	425a      	negs	r2, r3
 8012d70:	415a      	adcs	r2, r3
 8012d72:	602a      	str	r2, [r5, #0]
 8012d74:	e7ee      	b.n	8012d54 <__swhatbuf_r+0x1c>
 8012d76:	2340      	movs	r3, #64	; 0x40
 8012d78:	2000      	movs	r0, #0
 8012d7a:	6023      	str	r3, [r4, #0]
 8012d7c:	b016      	add	sp, #88	; 0x58
 8012d7e:	bd70      	pop	{r4, r5, r6, pc}

08012d80 <__smakebuf_r>:
 8012d80:	898b      	ldrh	r3, [r1, #12]
 8012d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012d84:	079d      	lsls	r5, r3, #30
 8012d86:	4606      	mov	r6, r0
 8012d88:	460c      	mov	r4, r1
 8012d8a:	d507      	bpl.n	8012d9c <__smakebuf_r+0x1c>
 8012d8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012d90:	6023      	str	r3, [r4, #0]
 8012d92:	6123      	str	r3, [r4, #16]
 8012d94:	2301      	movs	r3, #1
 8012d96:	6163      	str	r3, [r4, #20]
 8012d98:	b002      	add	sp, #8
 8012d9a:	bd70      	pop	{r4, r5, r6, pc}
 8012d9c:	ab01      	add	r3, sp, #4
 8012d9e:	466a      	mov	r2, sp
 8012da0:	f7ff ffca 	bl	8012d38 <__swhatbuf_r>
 8012da4:	9900      	ldr	r1, [sp, #0]
 8012da6:	4605      	mov	r5, r0
 8012da8:	4630      	mov	r0, r6
 8012daa:	f7fe f959 	bl	8011060 <_malloc_r>
 8012dae:	b948      	cbnz	r0, 8012dc4 <__smakebuf_r+0x44>
 8012db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012db4:	059a      	lsls	r2, r3, #22
 8012db6:	d4ef      	bmi.n	8012d98 <__smakebuf_r+0x18>
 8012db8:	f023 0303 	bic.w	r3, r3, #3
 8012dbc:	f043 0302 	orr.w	r3, r3, #2
 8012dc0:	81a3      	strh	r3, [r4, #12]
 8012dc2:	e7e3      	b.n	8012d8c <__smakebuf_r+0xc>
 8012dc4:	4b0d      	ldr	r3, [pc, #52]	; (8012dfc <__smakebuf_r+0x7c>)
 8012dc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8012dc8:	89a3      	ldrh	r3, [r4, #12]
 8012dca:	6020      	str	r0, [r4, #0]
 8012dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012dd0:	81a3      	strh	r3, [r4, #12]
 8012dd2:	9b00      	ldr	r3, [sp, #0]
 8012dd4:	6163      	str	r3, [r4, #20]
 8012dd6:	9b01      	ldr	r3, [sp, #4]
 8012dd8:	6120      	str	r0, [r4, #16]
 8012dda:	b15b      	cbz	r3, 8012df4 <__smakebuf_r+0x74>
 8012ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012de0:	4630      	mov	r0, r6
 8012de2:	f000 ff09 	bl	8013bf8 <_isatty_r>
 8012de6:	b128      	cbz	r0, 8012df4 <__smakebuf_r+0x74>
 8012de8:	89a3      	ldrh	r3, [r4, #12]
 8012dea:	f023 0303 	bic.w	r3, r3, #3
 8012dee:	f043 0301 	orr.w	r3, r3, #1
 8012df2:	81a3      	strh	r3, [r4, #12]
 8012df4:	89a0      	ldrh	r0, [r4, #12]
 8012df6:	4305      	orrs	r5, r0
 8012df8:	81a5      	strh	r5, [r4, #12]
 8012dfa:	e7cd      	b.n	8012d98 <__smakebuf_r+0x18>
 8012dfc:	08010e41 	.word	0x08010e41

08012e00 <malloc>:
 8012e00:	4b02      	ldr	r3, [pc, #8]	; (8012e0c <malloc+0xc>)
 8012e02:	4601      	mov	r1, r0
 8012e04:	6818      	ldr	r0, [r3, #0]
 8012e06:	f7fe b92b 	b.w	8011060 <_malloc_r>
 8012e0a:	bf00      	nop
 8012e0c:	200002cc 	.word	0x200002cc

08012e10 <__malloc_lock>:
 8012e10:	4801      	ldr	r0, [pc, #4]	; (8012e18 <__malloc_lock+0x8>)
 8012e12:	f7fe b90c 	b.w	801102e <__retarget_lock_acquire_recursive>
 8012e16:	bf00      	nop
 8012e18:	20004e90 	.word	0x20004e90

08012e1c <__malloc_unlock>:
 8012e1c:	4801      	ldr	r0, [pc, #4]	; (8012e24 <__malloc_unlock+0x8>)
 8012e1e:	f7fe b907 	b.w	8011030 <__retarget_lock_release_recursive>
 8012e22:	bf00      	nop
 8012e24:	20004e90 	.word	0x20004e90

08012e28 <_Balloc>:
 8012e28:	b570      	push	{r4, r5, r6, lr}
 8012e2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012e2c:	4604      	mov	r4, r0
 8012e2e:	460d      	mov	r5, r1
 8012e30:	b976      	cbnz	r6, 8012e50 <_Balloc+0x28>
 8012e32:	2010      	movs	r0, #16
 8012e34:	f7ff ffe4 	bl	8012e00 <malloc>
 8012e38:	4602      	mov	r2, r0
 8012e3a:	6260      	str	r0, [r4, #36]	; 0x24
 8012e3c:	b920      	cbnz	r0, 8012e48 <_Balloc+0x20>
 8012e3e:	4b18      	ldr	r3, [pc, #96]	; (8012ea0 <_Balloc+0x78>)
 8012e40:	4818      	ldr	r0, [pc, #96]	; (8012ea4 <_Balloc+0x7c>)
 8012e42:	2166      	movs	r1, #102	; 0x66
 8012e44:	f000 fe96 	bl	8013b74 <__assert_func>
 8012e48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e4c:	6006      	str	r6, [r0, #0]
 8012e4e:	60c6      	str	r6, [r0, #12]
 8012e50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012e52:	68f3      	ldr	r3, [r6, #12]
 8012e54:	b183      	cbz	r3, 8012e78 <_Balloc+0x50>
 8012e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e58:	68db      	ldr	r3, [r3, #12]
 8012e5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012e5e:	b9b8      	cbnz	r0, 8012e90 <_Balloc+0x68>
 8012e60:	2101      	movs	r1, #1
 8012e62:	fa01 f605 	lsl.w	r6, r1, r5
 8012e66:	1d72      	adds	r2, r6, #5
 8012e68:	0092      	lsls	r2, r2, #2
 8012e6a:	4620      	mov	r0, r4
 8012e6c:	f000 fb5a 	bl	8013524 <_calloc_r>
 8012e70:	b160      	cbz	r0, 8012e8c <_Balloc+0x64>
 8012e72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012e76:	e00e      	b.n	8012e96 <_Balloc+0x6e>
 8012e78:	2221      	movs	r2, #33	; 0x21
 8012e7a:	2104      	movs	r1, #4
 8012e7c:	4620      	mov	r0, r4
 8012e7e:	f000 fb51 	bl	8013524 <_calloc_r>
 8012e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e84:	60f0      	str	r0, [r6, #12]
 8012e86:	68db      	ldr	r3, [r3, #12]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d1e4      	bne.n	8012e56 <_Balloc+0x2e>
 8012e8c:	2000      	movs	r0, #0
 8012e8e:	bd70      	pop	{r4, r5, r6, pc}
 8012e90:	6802      	ldr	r2, [r0, #0]
 8012e92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012e96:	2300      	movs	r3, #0
 8012e98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012e9c:	e7f7      	b.n	8012e8e <_Balloc+0x66>
 8012e9e:	bf00      	nop
 8012ea0:	08016f11 	.word	0x08016f11
 8012ea4:	08016f98 	.word	0x08016f98

08012ea8 <_Bfree>:
 8012ea8:	b570      	push	{r4, r5, r6, lr}
 8012eaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012eac:	4605      	mov	r5, r0
 8012eae:	460c      	mov	r4, r1
 8012eb0:	b976      	cbnz	r6, 8012ed0 <_Bfree+0x28>
 8012eb2:	2010      	movs	r0, #16
 8012eb4:	f7ff ffa4 	bl	8012e00 <malloc>
 8012eb8:	4602      	mov	r2, r0
 8012eba:	6268      	str	r0, [r5, #36]	; 0x24
 8012ebc:	b920      	cbnz	r0, 8012ec8 <_Bfree+0x20>
 8012ebe:	4b09      	ldr	r3, [pc, #36]	; (8012ee4 <_Bfree+0x3c>)
 8012ec0:	4809      	ldr	r0, [pc, #36]	; (8012ee8 <_Bfree+0x40>)
 8012ec2:	218a      	movs	r1, #138	; 0x8a
 8012ec4:	f000 fe56 	bl	8013b74 <__assert_func>
 8012ec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012ecc:	6006      	str	r6, [r0, #0]
 8012ece:	60c6      	str	r6, [r0, #12]
 8012ed0:	b13c      	cbz	r4, 8012ee2 <_Bfree+0x3a>
 8012ed2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012ed4:	6862      	ldr	r2, [r4, #4]
 8012ed6:	68db      	ldr	r3, [r3, #12]
 8012ed8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012edc:	6021      	str	r1, [r4, #0]
 8012ede:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012ee2:	bd70      	pop	{r4, r5, r6, pc}
 8012ee4:	08016f11 	.word	0x08016f11
 8012ee8:	08016f98 	.word	0x08016f98

08012eec <__multadd>:
 8012eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ef0:	690e      	ldr	r6, [r1, #16]
 8012ef2:	4607      	mov	r7, r0
 8012ef4:	4698      	mov	r8, r3
 8012ef6:	460c      	mov	r4, r1
 8012ef8:	f101 0014 	add.w	r0, r1, #20
 8012efc:	2300      	movs	r3, #0
 8012efe:	6805      	ldr	r5, [r0, #0]
 8012f00:	b2a9      	uxth	r1, r5
 8012f02:	fb02 8101 	mla	r1, r2, r1, r8
 8012f06:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012f0a:	0c2d      	lsrs	r5, r5, #16
 8012f0c:	fb02 c505 	mla	r5, r2, r5, ip
 8012f10:	b289      	uxth	r1, r1
 8012f12:	3301      	adds	r3, #1
 8012f14:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012f18:	429e      	cmp	r6, r3
 8012f1a:	f840 1b04 	str.w	r1, [r0], #4
 8012f1e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012f22:	dcec      	bgt.n	8012efe <__multadd+0x12>
 8012f24:	f1b8 0f00 	cmp.w	r8, #0
 8012f28:	d022      	beq.n	8012f70 <__multadd+0x84>
 8012f2a:	68a3      	ldr	r3, [r4, #8]
 8012f2c:	42b3      	cmp	r3, r6
 8012f2e:	dc19      	bgt.n	8012f64 <__multadd+0x78>
 8012f30:	6861      	ldr	r1, [r4, #4]
 8012f32:	4638      	mov	r0, r7
 8012f34:	3101      	adds	r1, #1
 8012f36:	f7ff ff77 	bl	8012e28 <_Balloc>
 8012f3a:	4605      	mov	r5, r0
 8012f3c:	b928      	cbnz	r0, 8012f4a <__multadd+0x5e>
 8012f3e:	4602      	mov	r2, r0
 8012f40:	4b0d      	ldr	r3, [pc, #52]	; (8012f78 <__multadd+0x8c>)
 8012f42:	480e      	ldr	r0, [pc, #56]	; (8012f7c <__multadd+0x90>)
 8012f44:	21b5      	movs	r1, #181	; 0xb5
 8012f46:	f000 fe15 	bl	8013b74 <__assert_func>
 8012f4a:	6922      	ldr	r2, [r4, #16]
 8012f4c:	3202      	adds	r2, #2
 8012f4e:	f104 010c 	add.w	r1, r4, #12
 8012f52:	0092      	lsls	r2, r2, #2
 8012f54:	300c      	adds	r0, #12
 8012f56:	f7fe f86c 	bl	8011032 <memcpy>
 8012f5a:	4621      	mov	r1, r4
 8012f5c:	4638      	mov	r0, r7
 8012f5e:	f7ff ffa3 	bl	8012ea8 <_Bfree>
 8012f62:	462c      	mov	r4, r5
 8012f64:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012f68:	3601      	adds	r6, #1
 8012f6a:	f8c3 8014 	str.w	r8, [r3, #20]
 8012f6e:	6126      	str	r6, [r4, #16]
 8012f70:	4620      	mov	r0, r4
 8012f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f76:	bf00      	nop
 8012f78:	08016f87 	.word	0x08016f87
 8012f7c:	08016f98 	.word	0x08016f98

08012f80 <__hi0bits>:
 8012f80:	0c03      	lsrs	r3, r0, #16
 8012f82:	041b      	lsls	r3, r3, #16
 8012f84:	b9d3      	cbnz	r3, 8012fbc <__hi0bits+0x3c>
 8012f86:	0400      	lsls	r0, r0, #16
 8012f88:	2310      	movs	r3, #16
 8012f8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012f8e:	bf04      	itt	eq
 8012f90:	0200      	lsleq	r0, r0, #8
 8012f92:	3308      	addeq	r3, #8
 8012f94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012f98:	bf04      	itt	eq
 8012f9a:	0100      	lsleq	r0, r0, #4
 8012f9c:	3304      	addeq	r3, #4
 8012f9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012fa2:	bf04      	itt	eq
 8012fa4:	0080      	lsleq	r0, r0, #2
 8012fa6:	3302      	addeq	r3, #2
 8012fa8:	2800      	cmp	r0, #0
 8012faa:	db05      	blt.n	8012fb8 <__hi0bits+0x38>
 8012fac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012fb0:	f103 0301 	add.w	r3, r3, #1
 8012fb4:	bf08      	it	eq
 8012fb6:	2320      	moveq	r3, #32
 8012fb8:	4618      	mov	r0, r3
 8012fba:	4770      	bx	lr
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	e7e4      	b.n	8012f8a <__hi0bits+0xa>

08012fc0 <__lo0bits>:
 8012fc0:	6803      	ldr	r3, [r0, #0]
 8012fc2:	f013 0207 	ands.w	r2, r3, #7
 8012fc6:	4601      	mov	r1, r0
 8012fc8:	d00b      	beq.n	8012fe2 <__lo0bits+0x22>
 8012fca:	07da      	lsls	r2, r3, #31
 8012fcc:	d424      	bmi.n	8013018 <__lo0bits+0x58>
 8012fce:	0798      	lsls	r0, r3, #30
 8012fd0:	bf49      	itett	mi
 8012fd2:	085b      	lsrmi	r3, r3, #1
 8012fd4:	089b      	lsrpl	r3, r3, #2
 8012fd6:	2001      	movmi	r0, #1
 8012fd8:	600b      	strmi	r3, [r1, #0]
 8012fda:	bf5c      	itt	pl
 8012fdc:	600b      	strpl	r3, [r1, #0]
 8012fde:	2002      	movpl	r0, #2
 8012fe0:	4770      	bx	lr
 8012fe2:	b298      	uxth	r0, r3
 8012fe4:	b9b0      	cbnz	r0, 8013014 <__lo0bits+0x54>
 8012fe6:	0c1b      	lsrs	r3, r3, #16
 8012fe8:	2010      	movs	r0, #16
 8012fea:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012fee:	bf04      	itt	eq
 8012ff0:	0a1b      	lsreq	r3, r3, #8
 8012ff2:	3008      	addeq	r0, #8
 8012ff4:	071a      	lsls	r2, r3, #28
 8012ff6:	bf04      	itt	eq
 8012ff8:	091b      	lsreq	r3, r3, #4
 8012ffa:	3004      	addeq	r0, #4
 8012ffc:	079a      	lsls	r2, r3, #30
 8012ffe:	bf04      	itt	eq
 8013000:	089b      	lsreq	r3, r3, #2
 8013002:	3002      	addeq	r0, #2
 8013004:	07da      	lsls	r2, r3, #31
 8013006:	d403      	bmi.n	8013010 <__lo0bits+0x50>
 8013008:	085b      	lsrs	r3, r3, #1
 801300a:	f100 0001 	add.w	r0, r0, #1
 801300e:	d005      	beq.n	801301c <__lo0bits+0x5c>
 8013010:	600b      	str	r3, [r1, #0]
 8013012:	4770      	bx	lr
 8013014:	4610      	mov	r0, r2
 8013016:	e7e8      	b.n	8012fea <__lo0bits+0x2a>
 8013018:	2000      	movs	r0, #0
 801301a:	4770      	bx	lr
 801301c:	2020      	movs	r0, #32
 801301e:	4770      	bx	lr

08013020 <__i2b>:
 8013020:	b510      	push	{r4, lr}
 8013022:	460c      	mov	r4, r1
 8013024:	2101      	movs	r1, #1
 8013026:	f7ff feff 	bl	8012e28 <_Balloc>
 801302a:	4602      	mov	r2, r0
 801302c:	b928      	cbnz	r0, 801303a <__i2b+0x1a>
 801302e:	4b05      	ldr	r3, [pc, #20]	; (8013044 <__i2b+0x24>)
 8013030:	4805      	ldr	r0, [pc, #20]	; (8013048 <__i2b+0x28>)
 8013032:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013036:	f000 fd9d 	bl	8013b74 <__assert_func>
 801303a:	2301      	movs	r3, #1
 801303c:	6144      	str	r4, [r0, #20]
 801303e:	6103      	str	r3, [r0, #16]
 8013040:	bd10      	pop	{r4, pc}
 8013042:	bf00      	nop
 8013044:	08016f87 	.word	0x08016f87
 8013048:	08016f98 	.word	0x08016f98

0801304c <__multiply>:
 801304c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013050:	4614      	mov	r4, r2
 8013052:	690a      	ldr	r2, [r1, #16]
 8013054:	6923      	ldr	r3, [r4, #16]
 8013056:	429a      	cmp	r2, r3
 8013058:	bfb8      	it	lt
 801305a:	460b      	movlt	r3, r1
 801305c:	460d      	mov	r5, r1
 801305e:	bfbc      	itt	lt
 8013060:	4625      	movlt	r5, r4
 8013062:	461c      	movlt	r4, r3
 8013064:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013068:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801306c:	68ab      	ldr	r3, [r5, #8]
 801306e:	6869      	ldr	r1, [r5, #4]
 8013070:	eb0a 0709 	add.w	r7, sl, r9
 8013074:	42bb      	cmp	r3, r7
 8013076:	b085      	sub	sp, #20
 8013078:	bfb8      	it	lt
 801307a:	3101      	addlt	r1, #1
 801307c:	f7ff fed4 	bl	8012e28 <_Balloc>
 8013080:	b930      	cbnz	r0, 8013090 <__multiply+0x44>
 8013082:	4602      	mov	r2, r0
 8013084:	4b42      	ldr	r3, [pc, #264]	; (8013190 <__multiply+0x144>)
 8013086:	4843      	ldr	r0, [pc, #268]	; (8013194 <__multiply+0x148>)
 8013088:	f240 115d 	movw	r1, #349	; 0x15d
 801308c:	f000 fd72 	bl	8013b74 <__assert_func>
 8013090:	f100 0614 	add.w	r6, r0, #20
 8013094:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013098:	4633      	mov	r3, r6
 801309a:	2200      	movs	r2, #0
 801309c:	4543      	cmp	r3, r8
 801309e:	d31e      	bcc.n	80130de <__multiply+0x92>
 80130a0:	f105 0c14 	add.w	ip, r5, #20
 80130a4:	f104 0314 	add.w	r3, r4, #20
 80130a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80130ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80130b0:	9202      	str	r2, [sp, #8]
 80130b2:	ebac 0205 	sub.w	r2, ip, r5
 80130b6:	3a15      	subs	r2, #21
 80130b8:	f022 0203 	bic.w	r2, r2, #3
 80130bc:	3204      	adds	r2, #4
 80130be:	f105 0115 	add.w	r1, r5, #21
 80130c2:	458c      	cmp	ip, r1
 80130c4:	bf38      	it	cc
 80130c6:	2204      	movcc	r2, #4
 80130c8:	9201      	str	r2, [sp, #4]
 80130ca:	9a02      	ldr	r2, [sp, #8]
 80130cc:	9303      	str	r3, [sp, #12]
 80130ce:	429a      	cmp	r2, r3
 80130d0:	d808      	bhi.n	80130e4 <__multiply+0x98>
 80130d2:	2f00      	cmp	r7, #0
 80130d4:	dc55      	bgt.n	8013182 <__multiply+0x136>
 80130d6:	6107      	str	r7, [r0, #16]
 80130d8:	b005      	add	sp, #20
 80130da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130de:	f843 2b04 	str.w	r2, [r3], #4
 80130e2:	e7db      	b.n	801309c <__multiply+0x50>
 80130e4:	f8b3 a000 	ldrh.w	sl, [r3]
 80130e8:	f1ba 0f00 	cmp.w	sl, #0
 80130ec:	d020      	beq.n	8013130 <__multiply+0xe4>
 80130ee:	f105 0e14 	add.w	lr, r5, #20
 80130f2:	46b1      	mov	r9, r6
 80130f4:	2200      	movs	r2, #0
 80130f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80130fa:	f8d9 b000 	ldr.w	fp, [r9]
 80130fe:	b2a1      	uxth	r1, r4
 8013100:	fa1f fb8b 	uxth.w	fp, fp
 8013104:	fb0a b101 	mla	r1, sl, r1, fp
 8013108:	4411      	add	r1, r2
 801310a:	f8d9 2000 	ldr.w	r2, [r9]
 801310e:	0c24      	lsrs	r4, r4, #16
 8013110:	0c12      	lsrs	r2, r2, #16
 8013112:	fb0a 2404 	mla	r4, sl, r4, r2
 8013116:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801311a:	b289      	uxth	r1, r1
 801311c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013120:	45f4      	cmp	ip, lr
 8013122:	f849 1b04 	str.w	r1, [r9], #4
 8013126:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801312a:	d8e4      	bhi.n	80130f6 <__multiply+0xaa>
 801312c:	9901      	ldr	r1, [sp, #4]
 801312e:	5072      	str	r2, [r6, r1]
 8013130:	9a03      	ldr	r2, [sp, #12]
 8013132:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013136:	3304      	adds	r3, #4
 8013138:	f1b9 0f00 	cmp.w	r9, #0
 801313c:	d01f      	beq.n	801317e <__multiply+0x132>
 801313e:	6834      	ldr	r4, [r6, #0]
 8013140:	f105 0114 	add.w	r1, r5, #20
 8013144:	46b6      	mov	lr, r6
 8013146:	f04f 0a00 	mov.w	sl, #0
 801314a:	880a      	ldrh	r2, [r1, #0]
 801314c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013150:	fb09 b202 	mla	r2, r9, r2, fp
 8013154:	4492      	add	sl, r2
 8013156:	b2a4      	uxth	r4, r4
 8013158:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801315c:	f84e 4b04 	str.w	r4, [lr], #4
 8013160:	f851 4b04 	ldr.w	r4, [r1], #4
 8013164:	f8be 2000 	ldrh.w	r2, [lr]
 8013168:	0c24      	lsrs	r4, r4, #16
 801316a:	fb09 2404 	mla	r4, r9, r4, r2
 801316e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013172:	458c      	cmp	ip, r1
 8013174:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013178:	d8e7      	bhi.n	801314a <__multiply+0xfe>
 801317a:	9a01      	ldr	r2, [sp, #4]
 801317c:	50b4      	str	r4, [r6, r2]
 801317e:	3604      	adds	r6, #4
 8013180:	e7a3      	b.n	80130ca <__multiply+0x7e>
 8013182:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013186:	2b00      	cmp	r3, #0
 8013188:	d1a5      	bne.n	80130d6 <__multiply+0x8a>
 801318a:	3f01      	subs	r7, #1
 801318c:	e7a1      	b.n	80130d2 <__multiply+0x86>
 801318e:	bf00      	nop
 8013190:	08016f87 	.word	0x08016f87
 8013194:	08016f98 	.word	0x08016f98

08013198 <__pow5mult>:
 8013198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801319c:	4615      	mov	r5, r2
 801319e:	f012 0203 	ands.w	r2, r2, #3
 80131a2:	4606      	mov	r6, r0
 80131a4:	460f      	mov	r7, r1
 80131a6:	d007      	beq.n	80131b8 <__pow5mult+0x20>
 80131a8:	4c25      	ldr	r4, [pc, #148]	; (8013240 <__pow5mult+0xa8>)
 80131aa:	3a01      	subs	r2, #1
 80131ac:	2300      	movs	r3, #0
 80131ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80131b2:	f7ff fe9b 	bl	8012eec <__multadd>
 80131b6:	4607      	mov	r7, r0
 80131b8:	10ad      	asrs	r5, r5, #2
 80131ba:	d03d      	beq.n	8013238 <__pow5mult+0xa0>
 80131bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80131be:	b97c      	cbnz	r4, 80131e0 <__pow5mult+0x48>
 80131c0:	2010      	movs	r0, #16
 80131c2:	f7ff fe1d 	bl	8012e00 <malloc>
 80131c6:	4602      	mov	r2, r0
 80131c8:	6270      	str	r0, [r6, #36]	; 0x24
 80131ca:	b928      	cbnz	r0, 80131d8 <__pow5mult+0x40>
 80131cc:	4b1d      	ldr	r3, [pc, #116]	; (8013244 <__pow5mult+0xac>)
 80131ce:	481e      	ldr	r0, [pc, #120]	; (8013248 <__pow5mult+0xb0>)
 80131d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80131d4:	f000 fcce 	bl	8013b74 <__assert_func>
 80131d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80131dc:	6004      	str	r4, [r0, #0]
 80131de:	60c4      	str	r4, [r0, #12]
 80131e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80131e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80131e8:	b94c      	cbnz	r4, 80131fe <__pow5mult+0x66>
 80131ea:	f240 2171 	movw	r1, #625	; 0x271
 80131ee:	4630      	mov	r0, r6
 80131f0:	f7ff ff16 	bl	8013020 <__i2b>
 80131f4:	2300      	movs	r3, #0
 80131f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80131fa:	4604      	mov	r4, r0
 80131fc:	6003      	str	r3, [r0, #0]
 80131fe:	f04f 0900 	mov.w	r9, #0
 8013202:	07eb      	lsls	r3, r5, #31
 8013204:	d50a      	bpl.n	801321c <__pow5mult+0x84>
 8013206:	4639      	mov	r1, r7
 8013208:	4622      	mov	r2, r4
 801320a:	4630      	mov	r0, r6
 801320c:	f7ff ff1e 	bl	801304c <__multiply>
 8013210:	4639      	mov	r1, r7
 8013212:	4680      	mov	r8, r0
 8013214:	4630      	mov	r0, r6
 8013216:	f7ff fe47 	bl	8012ea8 <_Bfree>
 801321a:	4647      	mov	r7, r8
 801321c:	106d      	asrs	r5, r5, #1
 801321e:	d00b      	beq.n	8013238 <__pow5mult+0xa0>
 8013220:	6820      	ldr	r0, [r4, #0]
 8013222:	b938      	cbnz	r0, 8013234 <__pow5mult+0x9c>
 8013224:	4622      	mov	r2, r4
 8013226:	4621      	mov	r1, r4
 8013228:	4630      	mov	r0, r6
 801322a:	f7ff ff0f 	bl	801304c <__multiply>
 801322e:	6020      	str	r0, [r4, #0]
 8013230:	f8c0 9000 	str.w	r9, [r0]
 8013234:	4604      	mov	r4, r0
 8013236:	e7e4      	b.n	8013202 <__pow5mult+0x6a>
 8013238:	4638      	mov	r0, r7
 801323a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801323e:	bf00      	nop
 8013240:	080170e8 	.word	0x080170e8
 8013244:	08016f11 	.word	0x08016f11
 8013248:	08016f98 	.word	0x08016f98

0801324c <__lshift>:
 801324c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013250:	460c      	mov	r4, r1
 8013252:	6849      	ldr	r1, [r1, #4]
 8013254:	6923      	ldr	r3, [r4, #16]
 8013256:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801325a:	68a3      	ldr	r3, [r4, #8]
 801325c:	4607      	mov	r7, r0
 801325e:	4691      	mov	r9, r2
 8013260:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013264:	f108 0601 	add.w	r6, r8, #1
 8013268:	42b3      	cmp	r3, r6
 801326a:	db0b      	blt.n	8013284 <__lshift+0x38>
 801326c:	4638      	mov	r0, r7
 801326e:	f7ff fddb 	bl	8012e28 <_Balloc>
 8013272:	4605      	mov	r5, r0
 8013274:	b948      	cbnz	r0, 801328a <__lshift+0x3e>
 8013276:	4602      	mov	r2, r0
 8013278:	4b28      	ldr	r3, [pc, #160]	; (801331c <__lshift+0xd0>)
 801327a:	4829      	ldr	r0, [pc, #164]	; (8013320 <__lshift+0xd4>)
 801327c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013280:	f000 fc78 	bl	8013b74 <__assert_func>
 8013284:	3101      	adds	r1, #1
 8013286:	005b      	lsls	r3, r3, #1
 8013288:	e7ee      	b.n	8013268 <__lshift+0x1c>
 801328a:	2300      	movs	r3, #0
 801328c:	f100 0114 	add.w	r1, r0, #20
 8013290:	f100 0210 	add.w	r2, r0, #16
 8013294:	4618      	mov	r0, r3
 8013296:	4553      	cmp	r3, sl
 8013298:	db33      	blt.n	8013302 <__lshift+0xb6>
 801329a:	6920      	ldr	r0, [r4, #16]
 801329c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80132a0:	f104 0314 	add.w	r3, r4, #20
 80132a4:	f019 091f 	ands.w	r9, r9, #31
 80132a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80132ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80132b0:	d02b      	beq.n	801330a <__lshift+0xbe>
 80132b2:	f1c9 0e20 	rsb	lr, r9, #32
 80132b6:	468a      	mov	sl, r1
 80132b8:	2200      	movs	r2, #0
 80132ba:	6818      	ldr	r0, [r3, #0]
 80132bc:	fa00 f009 	lsl.w	r0, r0, r9
 80132c0:	4302      	orrs	r2, r0
 80132c2:	f84a 2b04 	str.w	r2, [sl], #4
 80132c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80132ca:	459c      	cmp	ip, r3
 80132cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80132d0:	d8f3      	bhi.n	80132ba <__lshift+0x6e>
 80132d2:	ebac 0304 	sub.w	r3, ip, r4
 80132d6:	3b15      	subs	r3, #21
 80132d8:	f023 0303 	bic.w	r3, r3, #3
 80132dc:	3304      	adds	r3, #4
 80132de:	f104 0015 	add.w	r0, r4, #21
 80132e2:	4584      	cmp	ip, r0
 80132e4:	bf38      	it	cc
 80132e6:	2304      	movcc	r3, #4
 80132e8:	50ca      	str	r2, [r1, r3]
 80132ea:	b10a      	cbz	r2, 80132f0 <__lshift+0xa4>
 80132ec:	f108 0602 	add.w	r6, r8, #2
 80132f0:	3e01      	subs	r6, #1
 80132f2:	4638      	mov	r0, r7
 80132f4:	612e      	str	r6, [r5, #16]
 80132f6:	4621      	mov	r1, r4
 80132f8:	f7ff fdd6 	bl	8012ea8 <_Bfree>
 80132fc:	4628      	mov	r0, r5
 80132fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013302:	f842 0f04 	str.w	r0, [r2, #4]!
 8013306:	3301      	adds	r3, #1
 8013308:	e7c5      	b.n	8013296 <__lshift+0x4a>
 801330a:	3904      	subs	r1, #4
 801330c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013310:	f841 2f04 	str.w	r2, [r1, #4]!
 8013314:	459c      	cmp	ip, r3
 8013316:	d8f9      	bhi.n	801330c <__lshift+0xc0>
 8013318:	e7ea      	b.n	80132f0 <__lshift+0xa4>
 801331a:	bf00      	nop
 801331c:	08016f87 	.word	0x08016f87
 8013320:	08016f98 	.word	0x08016f98

08013324 <__mcmp>:
 8013324:	b530      	push	{r4, r5, lr}
 8013326:	6902      	ldr	r2, [r0, #16]
 8013328:	690c      	ldr	r4, [r1, #16]
 801332a:	1b12      	subs	r2, r2, r4
 801332c:	d10e      	bne.n	801334c <__mcmp+0x28>
 801332e:	f100 0314 	add.w	r3, r0, #20
 8013332:	3114      	adds	r1, #20
 8013334:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013338:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801333c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013340:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013344:	42a5      	cmp	r5, r4
 8013346:	d003      	beq.n	8013350 <__mcmp+0x2c>
 8013348:	d305      	bcc.n	8013356 <__mcmp+0x32>
 801334a:	2201      	movs	r2, #1
 801334c:	4610      	mov	r0, r2
 801334e:	bd30      	pop	{r4, r5, pc}
 8013350:	4283      	cmp	r3, r0
 8013352:	d3f3      	bcc.n	801333c <__mcmp+0x18>
 8013354:	e7fa      	b.n	801334c <__mcmp+0x28>
 8013356:	f04f 32ff 	mov.w	r2, #4294967295
 801335a:	e7f7      	b.n	801334c <__mcmp+0x28>

0801335c <__mdiff>:
 801335c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013360:	460c      	mov	r4, r1
 8013362:	4606      	mov	r6, r0
 8013364:	4611      	mov	r1, r2
 8013366:	4620      	mov	r0, r4
 8013368:	4617      	mov	r7, r2
 801336a:	f7ff ffdb 	bl	8013324 <__mcmp>
 801336e:	1e05      	subs	r5, r0, #0
 8013370:	d110      	bne.n	8013394 <__mdiff+0x38>
 8013372:	4629      	mov	r1, r5
 8013374:	4630      	mov	r0, r6
 8013376:	f7ff fd57 	bl	8012e28 <_Balloc>
 801337a:	b930      	cbnz	r0, 801338a <__mdiff+0x2e>
 801337c:	4b39      	ldr	r3, [pc, #228]	; (8013464 <__mdiff+0x108>)
 801337e:	4602      	mov	r2, r0
 8013380:	f240 2132 	movw	r1, #562	; 0x232
 8013384:	4838      	ldr	r0, [pc, #224]	; (8013468 <__mdiff+0x10c>)
 8013386:	f000 fbf5 	bl	8013b74 <__assert_func>
 801338a:	2301      	movs	r3, #1
 801338c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013390:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013394:	bfa4      	itt	ge
 8013396:	463b      	movge	r3, r7
 8013398:	4627      	movge	r7, r4
 801339a:	4630      	mov	r0, r6
 801339c:	6879      	ldr	r1, [r7, #4]
 801339e:	bfa6      	itte	ge
 80133a0:	461c      	movge	r4, r3
 80133a2:	2500      	movge	r5, #0
 80133a4:	2501      	movlt	r5, #1
 80133a6:	f7ff fd3f 	bl	8012e28 <_Balloc>
 80133aa:	b920      	cbnz	r0, 80133b6 <__mdiff+0x5a>
 80133ac:	4b2d      	ldr	r3, [pc, #180]	; (8013464 <__mdiff+0x108>)
 80133ae:	4602      	mov	r2, r0
 80133b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80133b4:	e7e6      	b.n	8013384 <__mdiff+0x28>
 80133b6:	693e      	ldr	r6, [r7, #16]
 80133b8:	60c5      	str	r5, [r0, #12]
 80133ba:	6925      	ldr	r5, [r4, #16]
 80133bc:	f107 0114 	add.w	r1, r7, #20
 80133c0:	f104 0914 	add.w	r9, r4, #20
 80133c4:	f100 0e14 	add.w	lr, r0, #20
 80133c8:	f107 0210 	add.w	r2, r7, #16
 80133cc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80133d0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80133d4:	46f2      	mov	sl, lr
 80133d6:	2700      	movs	r7, #0
 80133d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80133dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80133e0:	fa1f f883 	uxth.w	r8, r3
 80133e4:	fa17 f78b 	uxtah	r7, r7, fp
 80133e8:	0c1b      	lsrs	r3, r3, #16
 80133ea:	eba7 0808 	sub.w	r8, r7, r8
 80133ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80133f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80133f6:	fa1f f888 	uxth.w	r8, r8
 80133fa:	141f      	asrs	r7, r3, #16
 80133fc:	454d      	cmp	r5, r9
 80133fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013402:	f84a 3b04 	str.w	r3, [sl], #4
 8013406:	d8e7      	bhi.n	80133d8 <__mdiff+0x7c>
 8013408:	1b2b      	subs	r3, r5, r4
 801340a:	3b15      	subs	r3, #21
 801340c:	f023 0303 	bic.w	r3, r3, #3
 8013410:	3304      	adds	r3, #4
 8013412:	3415      	adds	r4, #21
 8013414:	42a5      	cmp	r5, r4
 8013416:	bf38      	it	cc
 8013418:	2304      	movcc	r3, #4
 801341a:	4419      	add	r1, r3
 801341c:	4473      	add	r3, lr
 801341e:	469e      	mov	lr, r3
 8013420:	460d      	mov	r5, r1
 8013422:	4565      	cmp	r5, ip
 8013424:	d30e      	bcc.n	8013444 <__mdiff+0xe8>
 8013426:	f10c 0203 	add.w	r2, ip, #3
 801342a:	1a52      	subs	r2, r2, r1
 801342c:	f022 0203 	bic.w	r2, r2, #3
 8013430:	3903      	subs	r1, #3
 8013432:	458c      	cmp	ip, r1
 8013434:	bf38      	it	cc
 8013436:	2200      	movcc	r2, #0
 8013438:	441a      	add	r2, r3
 801343a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801343e:	b17b      	cbz	r3, 8013460 <__mdiff+0x104>
 8013440:	6106      	str	r6, [r0, #16]
 8013442:	e7a5      	b.n	8013390 <__mdiff+0x34>
 8013444:	f855 8b04 	ldr.w	r8, [r5], #4
 8013448:	fa17 f488 	uxtah	r4, r7, r8
 801344c:	1422      	asrs	r2, r4, #16
 801344e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013452:	b2a4      	uxth	r4, r4
 8013454:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013458:	f84e 4b04 	str.w	r4, [lr], #4
 801345c:	1417      	asrs	r7, r2, #16
 801345e:	e7e0      	b.n	8013422 <__mdiff+0xc6>
 8013460:	3e01      	subs	r6, #1
 8013462:	e7ea      	b.n	801343a <__mdiff+0xde>
 8013464:	08016f87 	.word	0x08016f87
 8013468:	08016f98 	.word	0x08016f98

0801346c <__d2b>:
 801346c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013470:	4689      	mov	r9, r1
 8013472:	2101      	movs	r1, #1
 8013474:	ec57 6b10 	vmov	r6, r7, d0
 8013478:	4690      	mov	r8, r2
 801347a:	f7ff fcd5 	bl	8012e28 <_Balloc>
 801347e:	4604      	mov	r4, r0
 8013480:	b930      	cbnz	r0, 8013490 <__d2b+0x24>
 8013482:	4602      	mov	r2, r0
 8013484:	4b25      	ldr	r3, [pc, #148]	; (801351c <__d2b+0xb0>)
 8013486:	4826      	ldr	r0, [pc, #152]	; (8013520 <__d2b+0xb4>)
 8013488:	f240 310a 	movw	r1, #778	; 0x30a
 801348c:	f000 fb72 	bl	8013b74 <__assert_func>
 8013490:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013494:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013498:	bb35      	cbnz	r5, 80134e8 <__d2b+0x7c>
 801349a:	2e00      	cmp	r6, #0
 801349c:	9301      	str	r3, [sp, #4]
 801349e:	d028      	beq.n	80134f2 <__d2b+0x86>
 80134a0:	4668      	mov	r0, sp
 80134a2:	9600      	str	r6, [sp, #0]
 80134a4:	f7ff fd8c 	bl	8012fc0 <__lo0bits>
 80134a8:	9900      	ldr	r1, [sp, #0]
 80134aa:	b300      	cbz	r0, 80134ee <__d2b+0x82>
 80134ac:	9a01      	ldr	r2, [sp, #4]
 80134ae:	f1c0 0320 	rsb	r3, r0, #32
 80134b2:	fa02 f303 	lsl.w	r3, r2, r3
 80134b6:	430b      	orrs	r3, r1
 80134b8:	40c2      	lsrs	r2, r0
 80134ba:	6163      	str	r3, [r4, #20]
 80134bc:	9201      	str	r2, [sp, #4]
 80134be:	9b01      	ldr	r3, [sp, #4]
 80134c0:	61a3      	str	r3, [r4, #24]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	bf14      	ite	ne
 80134c6:	2202      	movne	r2, #2
 80134c8:	2201      	moveq	r2, #1
 80134ca:	6122      	str	r2, [r4, #16]
 80134cc:	b1d5      	cbz	r5, 8013504 <__d2b+0x98>
 80134ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80134d2:	4405      	add	r5, r0
 80134d4:	f8c9 5000 	str.w	r5, [r9]
 80134d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80134dc:	f8c8 0000 	str.w	r0, [r8]
 80134e0:	4620      	mov	r0, r4
 80134e2:	b003      	add	sp, #12
 80134e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80134ec:	e7d5      	b.n	801349a <__d2b+0x2e>
 80134ee:	6161      	str	r1, [r4, #20]
 80134f0:	e7e5      	b.n	80134be <__d2b+0x52>
 80134f2:	a801      	add	r0, sp, #4
 80134f4:	f7ff fd64 	bl	8012fc0 <__lo0bits>
 80134f8:	9b01      	ldr	r3, [sp, #4]
 80134fa:	6163      	str	r3, [r4, #20]
 80134fc:	2201      	movs	r2, #1
 80134fe:	6122      	str	r2, [r4, #16]
 8013500:	3020      	adds	r0, #32
 8013502:	e7e3      	b.n	80134cc <__d2b+0x60>
 8013504:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013508:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801350c:	f8c9 0000 	str.w	r0, [r9]
 8013510:	6918      	ldr	r0, [r3, #16]
 8013512:	f7ff fd35 	bl	8012f80 <__hi0bits>
 8013516:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801351a:	e7df      	b.n	80134dc <__d2b+0x70>
 801351c:	08016f87 	.word	0x08016f87
 8013520:	08016f98 	.word	0x08016f98

08013524 <_calloc_r>:
 8013524:	b513      	push	{r0, r1, r4, lr}
 8013526:	434a      	muls	r2, r1
 8013528:	4611      	mov	r1, r2
 801352a:	9201      	str	r2, [sp, #4]
 801352c:	f7fd fd98 	bl	8011060 <_malloc_r>
 8013530:	4604      	mov	r4, r0
 8013532:	b118      	cbz	r0, 801353c <_calloc_r+0x18>
 8013534:	9a01      	ldr	r2, [sp, #4]
 8013536:	2100      	movs	r1, #0
 8013538:	f7fd fd89 	bl	801104e <memset>
 801353c:	4620      	mov	r0, r4
 801353e:	b002      	add	sp, #8
 8013540:	bd10      	pop	{r4, pc}
	...

08013544 <_free_r>:
 8013544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013546:	2900      	cmp	r1, #0
 8013548:	d048      	beq.n	80135dc <_free_r+0x98>
 801354a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801354e:	9001      	str	r0, [sp, #4]
 8013550:	2b00      	cmp	r3, #0
 8013552:	f1a1 0404 	sub.w	r4, r1, #4
 8013556:	bfb8      	it	lt
 8013558:	18e4      	addlt	r4, r4, r3
 801355a:	f7ff fc59 	bl	8012e10 <__malloc_lock>
 801355e:	4a20      	ldr	r2, [pc, #128]	; (80135e0 <_free_r+0x9c>)
 8013560:	9801      	ldr	r0, [sp, #4]
 8013562:	6813      	ldr	r3, [r2, #0]
 8013564:	4615      	mov	r5, r2
 8013566:	b933      	cbnz	r3, 8013576 <_free_r+0x32>
 8013568:	6063      	str	r3, [r4, #4]
 801356a:	6014      	str	r4, [r2, #0]
 801356c:	b003      	add	sp, #12
 801356e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013572:	f7ff bc53 	b.w	8012e1c <__malloc_unlock>
 8013576:	42a3      	cmp	r3, r4
 8013578:	d90b      	bls.n	8013592 <_free_r+0x4e>
 801357a:	6821      	ldr	r1, [r4, #0]
 801357c:	1862      	adds	r2, r4, r1
 801357e:	4293      	cmp	r3, r2
 8013580:	bf04      	itt	eq
 8013582:	681a      	ldreq	r2, [r3, #0]
 8013584:	685b      	ldreq	r3, [r3, #4]
 8013586:	6063      	str	r3, [r4, #4]
 8013588:	bf04      	itt	eq
 801358a:	1852      	addeq	r2, r2, r1
 801358c:	6022      	streq	r2, [r4, #0]
 801358e:	602c      	str	r4, [r5, #0]
 8013590:	e7ec      	b.n	801356c <_free_r+0x28>
 8013592:	461a      	mov	r2, r3
 8013594:	685b      	ldr	r3, [r3, #4]
 8013596:	b10b      	cbz	r3, 801359c <_free_r+0x58>
 8013598:	42a3      	cmp	r3, r4
 801359a:	d9fa      	bls.n	8013592 <_free_r+0x4e>
 801359c:	6811      	ldr	r1, [r2, #0]
 801359e:	1855      	adds	r5, r2, r1
 80135a0:	42a5      	cmp	r5, r4
 80135a2:	d10b      	bne.n	80135bc <_free_r+0x78>
 80135a4:	6824      	ldr	r4, [r4, #0]
 80135a6:	4421      	add	r1, r4
 80135a8:	1854      	adds	r4, r2, r1
 80135aa:	42a3      	cmp	r3, r4
 80135ac:	6011      	str	r1, [r2, #0]
 80135ae:	d1dd      	bne.n	801356c <_free_r+0x28>
 80135b0:	681c      	ldr	r4, [r3, #0]
 80135b2:	685b      	ldr	r3, [r3, #4]
 80135b4:	6053      	str	r3, [r2, #4]
 80135b6:	4421      	add	r1, r4
 80135b8:	6011      	str	r1, [r2, #0]
 80135ba:	e7d7      	b.n	801356c <_free_r+0x28>
 80135bc:	d902      	bls.n	80135c4 <_free_r+0x80>
 80135be:	230c      	movs	r3, #12
 80135c0:	6003      	str	r3, [r0, #0]
 80135c2:	e7d3      	b.n	801356c <_free_r+0x28>
 80135c4:	6825      	ldr	r5, [r4, #0]
 80135c6:	1961      	adds	r1, r4, r5
 80135c8:	428b      	cmp	r3, r1
 80135ca:	bf04      	itt	eq
 80135cc:	6819      	ldreq	r1, [r3, #0]
 80135ce:	685b      	ldreq	r3, [r3, #4]
 80135d0:	6063      	str	r3, [r4, #4]
 80135d2:	bf04      	itt	eq
 80135d4:	1949      	addeq	r1, r1, r5
 80135d6:	6021      	streq	r1, [r4, #0]
 80135d8:	6054      	str	r4, [r2, #4]
 80135da:	e7c7      	b.n	801356c <_free_r+0x28>
 80135dc:	b003      	add	sp, #12
 80135de:	bd30      	pop	{r4, r5, pc}
 80135e0:	20004528 	.word	0x20004528

080135e4 <__ssputs_r>:
 80135e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135e8:	688e      	ldr	r6, [r1, #8]
 80135ea:	429e      	cmp	r6, r3
 80135ec:	4682      	mov	sl, r0
 80135ee:	460c      	mov	r4, r1
 80135f0:	4690      	mov	r8, r2
 80135f2:	461f      	mov	r7, r3
 80135f4:	d838      	bhi.n	8013668 <__ssputs_r+0x84>
 80135f6:	898a      	ldrh	r2, [r1, #12]
 80135f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80135fc:	d032      	beq.n	8013664 <__ssputs_r+0x80>
 80135fe:	6825      	ldr	r5, [r4, #0]
 8013600:	6909      	ldr	r1, [r1, #16]
 8013602:	eba5 0901 	sub.w	r9, r5, r1
 8013606:	6965      	ldr	r5, [r4, #20]
 8013608:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801360c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013610:	3301      	adds	r3, #1
 8013612:	444b      	add	r3, r9
 8013614:	106d      	asrs	r5, r5, #1
 8013616:	429d      	cmp	r5, r3
 8013618:	bf38      	it	cc
 801361a:	461d      	movcc	r5, r3
 801361c:	0553      	lsls	r3, r2, #21
 801361e:	d531      	bpl.n	8013684 <__ssputs_r+0xa0>
 8013620:	4629      	mov	r1, r5
 8013622:	f7fd fd1d 	bl	8011060 <_malloc_r>
 8013626:	4606      	mov	r6, r0
 8013628:	b950      	cbnz	r0, 8013640 <__ssputs_r+0x5c>
 801362a:	230c      	movs	r3, #12
 801362c:	f8ca 3000 	str.w	r3, [sl]
 8013630:	89a3      	ldrh	r3, [r4, #12]
 8013632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013636:	81a3      	strh	r3, [r4, #12]
 8013638:	f04f 30ff 	mov.w	r0, #4294967295
 801363c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013640:	6921      	ldr	r1, [r4, #16]
 8013642:	464a      	mov	r2, r9
 8013644:	f7fd fcf5 	bl	8011032 <memcpy>
 8013648:	89a3      	ldrh	r3, [r4, #12]
 801364a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801364e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013652:	81a3      	strh	r3, [r4, #12]
 8013654:	6126      	str	r6, [r4, #16]
 8013656:	6165      	str	r5, [r4, #20]
 8013658:	444e      	add	r6, r9
 801365a:	eba5 0509 	sub.w	r5, r5, r9
 801365e:	6026      	str	r6, [r4, #0]
 8013660:	60a5      	str	r5, [r4, #8]
 8013662:	463e      	mov	r6, r7
 8013664:	42be      	cmp	r6, r7
 8013666:	d900      	bls.n	801366a <__ssputs_r+0x86>
 8013668:	463e      	mov	r6, r7
 801366a:	4632      	mov	r2, r6
 801366c:	6820      	ldr	r0, [r4, #0]
 801366e:	4641      	mov	r1, r8
 8013670:	f000 fae4 	bl	8013c3c <memmove>
 8013674:	68a3      	ldr	r3, [r4, #8]
 8013676:	6822      	ldr	r2, [r4, #0]
 8013678:	1b9b      	subs	r3, r3, r6
 801367a:	4432      	add	r2, r6
 801367c:	60a3      	str	r3, [r4, #8]
 801367e:	6022      	str	r2, [r4, #0]
 8013680:	2000      	movs	r0, #0
 8013682:	e7db      	b.n	801363c <__ssputs_r+0x58>
 8013684:	462a      	mov	r2, r5
 8013686:	f000 faf3 	bl	8013c70 <_realloc_r>
 801368a:	4606      	mov	r6, r0
 801368c:	2800      	cmp	r0, #0
 801368e:	d1e1      	bne.n	8013654 <__ssputs_r+0x70>
 8013690:	6921      	ldr	r1, [r4, #16]
 8013692:	4650      	mov	r0, sl
 8013694:	f7ff ff56 	bl	8013544 <_free_r>
 8013698:	e7c7      	b.n	801362a <__ssputs_r+0x46>
	...

0801369c <_svfiprintf_r>:
 801369c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136a0:	4698      	mov	r8, r3
 80136a2:	898b      	ldrh	r3, [r1, #12]
 80136a4:	061b      	lsls	r3, r3, #24
 80136a6:	b09d      	sub	sp, #116	; 0x74
 80136a8:	4607      	mov	r7, r0
 80136aa:	460d      	mov	r5, r1
 80136ac:	4614      	mov	r4, r2
 80136ae:	d50e      	bpl.n	80136ce <_svfiprintf_r+0x32>
 80136b0:	690b      	ldr	r3, [r1, #16]
 80136b2:	b963      	cbnz	r3, 80136ce <_svfiprintf_r+0x32>
 80136b4:	2140      	movs	r1, #64	; 0x40
 80136b6:	f7fd fcd3 	bl	8011060 <_malloc_r>
 80136ba:	6028      	str	r0, [r5, #0]
 80136bc:	6128      	str	r0, [r5, #16]
 80136be:	b920      	cbnz	r0, 80136ca <_svfiprintf_r+0x2e>
 80136c0:	230c      	movs	r3, #12
 80136c2:	603b      	str	r3, [r7, #0]
 80136c4:	f04f 30ff 	mov.w	r0, #4294967295
 80136c8:	e0d1      	b.n	801386e <_svfiprintf_r+0x1d2>
 80136ca:	2340      	movs	r3, #64	; 0x40
 80136cc:	616b      	str	r3, [r5, #20]
 80136ce:	2300      	movs	r3, #0
 80136d0:	9309      	str	r3, [sp, #36]	; 0x24
 80136d2:	2320      	movs	r3, #32
 80136d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80136d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80136dc:	2330      	movs	r3, #48	; 0x30
 80136de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013888 <_svfiprintf_r+0x1ec>
 80136e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80136e6:	f04f 0901 	mov.w	r9, #1
 80136ea:	4623      	mov	r3, r4
 80136ec:	469a      	mov	sl, r3
 80136ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136f2:	b10a      	cbz	r2, 80136f8 <_svfiprintf_r+0x5c>
 80136f4:	2a25      	cmp	r2, #37	; 0x25
 80136f6:	d1f9      	bne.n	80136ec <_svfiprintf_r+0x50>
 80136f8:	ebba 0b04 	subs.w	fp, sl, r4
 80136fc:	d00b      	beq.n	8013716 <_svfiprintf_r+0x7a>
 80136fe:	465b      	mov	r3, fp
 8013700:	4622      	mov	r2, r4
 8013702:	4629      	mov	r1, r5
 8013704:	4638      	mov	r0, r7
 8013706:	f7ff ff6d 	bl	80135e4 <__ssputs_r>
 801370a:	3001      	adds	r0, #1
 801370c:	f000 80aa 	beq.w	8013864 <_svfiprintf_r+0x1c8>
 8013710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013712:	445a      	add	r2, fp
 8013714:	9209      	str	r2, [sp, #36]	; 0x24
 8013716:	f89a 3000 	ldrb.w	r3, [sl]
 801371a:	2b00      	cmp	r3, #0
 801371c:	f000 80a2 	beq.w	8013864 <_svfiprintf_r+0x1c8>
 8013720:	2300      	movs	r3, #0
 8013722:	f04f 32ff 	mov.w	r2, #4294967295
 8013726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801372a:	f10a 0a01 	add.w	sl, sl, #1
 801372e:	9304      	str	r3, [sp, #16]
 8013730:	9307      	str	r3, [sp, #28]
 8013732:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013736:	931a      	str	r3, [sp, #104]	; 0x68
 8013738:	4654      	mov	r4, sl
 801373a:	2205      	movs	r2, #5
 801373c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013740:	4851      	ldr	r0, [pc, #324]	; (8013888 <_svfiprintf_r+0x1ec>)
 8013742:	f7ec fd6d 	bl	8000220 <memchr>
 8013746:	9a04      	ldr	r2, [sp, #16]
 8013748:	b9d8      	cbnz	r0, 8013782 <_svfiprintf_r+0xe6>
 801374a:	06d0      	lsls	r0, r2, #27
 801374c:	bf44      	itt	mi
 801374e:	2320      	movmi	r3, #32
 8013750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013754:	0711      	lsls	r1, r2, #28
 8013756:	bf44      	itt	mi
 8013758:	232b      	movmi	r3, #43	; 0x2b
 801375a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801375e:	f89a 3000 	ldrb.w	r3, [sl]
 8013762:	2b2a      	cmp	r3, #42	; 0x2a
 8013764:	d015      	beq.n	8013792 <_svfiprintf_r+0xf6>
 8013766:	9a07      	ldr	r2, [sp, #28]
 8013768:	4654      	mov	r4, sl
 801376a:	2000      	movs	r0, #0
 801376c:	f04f 0c0a 	mov.w	ip, #10
 8013770:	4621      	mov	r1, r4
 8013772:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013776:	3b30      	subs	r3, #48	; 0x30
 8013778:	2b09      	cmp	r3, #9
 801377a:	d94e      	bls.n	801381a <_svfiprintf_r+0x17e>
 801377c:	b1b0      	cbz	r0, 80137ac <_svfiprintf_r+0x110>
 801377e:	9207      	str	r2, [sp, #28]
 8013780:	e014      	b.n	80137ac <_svfiprintf_r+0x110>
 8013782:	eba0 0308 	sub.w	r3, r0, r8
 8013786:	fa09 f303 	lsl.w	r3, r9, r3
 801378a:	4313      	orrs	r3, r2
 801378c:	9304      	str	r3, [sp, #16]
 801378e:	46a2      	mov	sl, r4
 8013790:	e7d2      	b.n	8013738 <_svfiprintf_r+0x9c>
 8013792:	9b03      	ldr	r3, [sp, #12]
 8013794:	1d19      	adds	r1, r3, #4
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	9103      	str	r1, [sp, #12]
 801379a:	2b00      	cmp	r3, #0
 801379c:	bfbb      	ittet	lt
 801379e:	425b      	neglt	r3, r3
 80137a0:	f042 0202 	orrlt.w	r2, r2, #2
 80137a4:	9307      	strge	r3, [sp, #28]
 80137a6:	9307      	strlt	r3, [sp, #28]
 80137a8:	bfb8      	it	lt
 80137aa:	9204      	strlt	r2, [sp, #16]
 80137ac:	7823      	ldrb	r3, [r4, #0]
 80137ae:	2b2e      	cmp	r3, #46	; 0x2e
 80137b0:	d10c      	bne.n	80137cc <_svfiprintf_r+0x130>
 80137b2:	7863      	ldrb	r3, [r4, #1]
 80137b4:	2b2a      	cmp	r3, #42	; 0x2a
 80137b6:	d135      	bne.n	8013824 <_svfiprintf_r+0x188>
 80137b8:	9b03      	ldr	r3, [sp, #12]
 80137ba:	1d1a      	adds	r2, r3, #4
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	9203      	str	r2, [sp, #12]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	bfb8      	it	lt
 80137c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80137c8:	3402      	adds	r4, #2
 80137ca:	9305      	str	r3, [sp, #20]
 80137cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013898 <_svfiprintf_r+0x1fc>
 80137d0:	7821      	ldrb	r1, [r4, #0]
 80137d2:	2203      	movs	r2, #3
 80137d4:	4650      	mov	r0, sl
 80137d6:	f7ec fd23 	bl	8000220 <memchr>
 80137da:	b140      	cbz	r0, 80137ee <_svfiprintf_r+0x152>
 80137dc:	2340      	movs	r3, #64	; 0x40
 80137de:	eba0 000a 	sub.w	r0, r0, sl
 80137e2:	fa03 f000 	lsl.w	r0, r3, r0
 80137e6:	9b04      	ldr	r3, [sp, #16]
 80137e8:	4303      	orrs	r3, r0
 80137ea:	3401      	adds	r4, #1
 80137ec:	9304      	str	r3, [sp, #16]
 80137ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137f2:	4826      	ldr	r0, [pc, #152]	; (801388c <_svfiprintf_r+0x1f0>)
 80137f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80137f8:	2206      	movs	r2, #6
 80137fa:	f7ec fd11 	bl	8000220 <memchr>
 80137fe:	2800      	cmp	r0, #0
 8013800:	d038      	beq.n	8013874 <_svfiprintf_r+0x1d8>
 8013802:	4b23      	ldr	r3, [pc, #140]	; (8013890 <_svfiprintf_r+0x1f4>)
 8013804:	bb1b      	cbnz	r3, 801384e <_svfiprintf_r+0x1b2>
 8013806:	9b03      	ldr	r3, [sp, #12]
 8013808:	3307      	adds	r3, #7
 801380a:	f023 0307 	bic.w	r3, r3, #7
 801380e:	3308      	adds	r3, #8
 8013810:	9303      	str	r3, [sp, #12]
 8013812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013814:	4433      	add	r3, r6
 8013816:	9309      	str	r3, [sp, #36]	; 0x24
 8013818:	e767      	b.n	80136ea <_svfiprintf_r+0x4e>
 801381a:	fb0c 3202 	mla	r2, ip, r2, r3
 801381e:	460c      	mov	r4, r1
 8013820:	2001      	movs	r0, #1
 8013822:	e7a5      	b.n	8013770 <_svfiprintf_r+0xd4>
 8013824:	2300      	movs	r3, #0
 8013826:	3401      	adds	r4, #1
 8013828:	9305      	str	r3, [sp, #20]
 801382a:	4619      	mov	r1, r3
 801382c:	f04f 0c0a 	mov.w	ip, #10
 8013830:	4620      	mov	r0, r4
 8013832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013836:	3a30      	subs	r2, #48	; 0x30
 8013838:	2a09      	cmp	r2, #9
 801383a:	d903      	bls.n	8013844 <_svfiprintf_r+0x1a8>
 801383c:	2b00      	cmp	r3, #0
 801383e:	d0c5      	beq.n	80137cc <_svfiprintf_r+0x130>
 8013840:	9105      	str	r1, [sp, #20]
 8013842:	e7c3      	b.n	80137cc <_svfiprintf_r+0x130>
 8013844:	fb0c 2101 	mla	r1, ip, r1, r2
 8013848:	4604      	mov	r4, r0
 801384a:	2301      	movs	r3, #1
 801384c:	e7f0      	b.n	8013830 <_svfiprintf_r+0x194>
 801384e:	ab03      	add	r3, sp, #12
 8013850:	9300      	str	r3, [sp, #0]
 8013852:	462a      	mov	r2, r5
 8013854:	4b0f      	ldr	r3, [pc, #60]	; (8013894 <_svfiprintf_r+0x1f8>)
 8013856:	a904      	add	r1, sp, #16
 8013858:	4638      	mov	r0, r7
 801385a:	f7fd fcfb 	bl	8011254 <_printf_float>
 801385e:	1c42      	adds	r2, r0, #1
 8013860:	4606      	mov	r6, r0
 8013862:	d1d6      	bne.n	8013812 <_svfiprintf_r+0x176>
 8013864:	89ab      	ldrh	r3, [r5, #12]
 8013866:	065b      	lsls	r3, r3, #25
 8013868:	f53f af2c 	bmi.w	80136c4 <_svfiprintf_r+0x28>
 801386c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801386e:	b01d      	add	sp, #116	; 0x74
 8013870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013874:	ab03      	add	r3, sp, #12
 8013876:	9300      	str	r3, [sp, #0]
 8013878:	462a      	mov	r2, r5
 801387a:	4b06      	ldr	r3, [pc, #24]	; (8013894 <_svfiprintf_r+0x1f8>)
 801387c:	a904      	add	r1, sp, #16
 801387e:	4638      	mov	r0, r7
 8013880:	f7fd ff8c 	bl	801179c <_printf_i>
 8013884:	e7eb      	b.n	801385e <_svfiprintf_r+0x1c2>
 8013886:	bf00      	nop
 8013888:	080170f4 	.word	0x080170f4
 801388c:	080170fe 	.word	0x080170fe
 8013890:	08011255 	.word	0x08011255
 8013894:	080135e5 	.word	0x080135e5
 8013898:	080170fa 	.word	0x080170fa

0801389c <__sfputc_r>:
 801389c:	6893      	ldr	r3, [r2, #8]
 801389e:	3b01      	subs	r3, #1
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	b410      	push	{r4}
 80138a4:	6093      	str	r3, [r2, #8]
 80138a6:	da08      	bge.n	80138ba <__sfputc_r+0x1e>
 80138a8:	6994      	ldr	r4, [r2, #24]
 80138aa:	42a3      	cmp	r3, r4
 80138ac:	db01      	blt.n	80138b2 <__sfputc_r+0x16>
 80138ae:	290a      	cmp	r1, #10
 80138b0:	d103      	bne.n	80138ba <__sfputc_r+0x1e>
 80138b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138b6:	f7fe ba0b 	b.w	8011cd0 <__swbuf_r>
 80138ba:	6813      	ldr	r3, [r2, #0]
 80138bc:	1c58      	adds	r0, r3, #1
 80138be:	6010      	str	r0, [r2, #0]
 80138c0:	7019      	strb	r1, [r3, #0]
 80138c2:	4608      	mov	r0, r1
 80138c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138c8:	4770      	bx	lr

080138ca <__sfputs_r>:
 80138ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138cc:	4606      	mov	r6, r0
 80138ce:	460f      	mov	r7, r1
 80138d0:	4614      	mov	r4, r2
 80138d2:	18d5      	adds	r5, r2, r3
 80138d4:	42ac      	cmp	r4, r5
 80138d6:	d101      	bne.n	80138dc <__sfputs_r+0x12>
 80138d8:	2000      	movs	r0, #0
 80138da:	e007      	b.n	80138ec <__sfputs_r+0x22>
 80138dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138e0:	463a      	mov	r2, r7
 80138e2:	4630      	mov	r0, r6
 80138e4:	f7ff ffda 	bl	801389c <__sfputc_r>
 80138e8:	1c43      	adds	r3, r0, #1
 80138ea:	d1f3      	bne.n	80138d4 <__sfputs_r+0xa>
 80138ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080138f0 <_vfiprintf_r>:
 80138f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138f4:	460d      	mov	r5, r1
 80138f6:	b09d      	sub	sp, #116	; 0x74
 80138f8:	4614      	mov	r4, r2
 80138fa:	4698      	mov	r8, r3
 80138fc:	4606      	mov	r6, r0
 80138fe:	b118      	cbz	r0, 8013908 <_vfiprintf_r+0x18>
 8013900:	6983      	ldr	r3, [r0, #24]
 8013902:	b90b      	cbnz	r3, 8013908 <_vfiprintf_r+0x18>
 8013904:	f7fd fad0 	bl	8010ea8 <__sinit>
 8013908:	4b89      	ldr	r3, [pc, #548]	; (8013b30 <_vfiprintf_r+0x240>)
 801390a:	429d      	cmp	r5, r3
 801390c:	d11b      	bne.n	8013946 <_vfiprintf_r+0x56>
 801390e:	6875      	ldr	r5, [r6, #4]
 8013910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013912:	07d9      	lsls	r1, r3, #31
 8013914:	d405      	bmi.n	8013922 <_vfiprintf_r+0x32>
 8013916:	89ab      	ldrh	r3, [r5, #12]
 8013918:	059a      	lsls	r2, r3, #22
 801391a:	d402      	bmi.n	8013922 <_vfiprintf_r+0x32>
 801391c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801391e:	f7fd fb86 	bl	801102e <__retarget_lock_acquire_recursive>
 8013922:	89ab      	ldrh	r3, [r5, #12]
 8013924:	071b      	lsls	r3, r3, #28
 8013926:	d501      	bpl.n	801392c <_vfiprintf_r+0x3c>
 8013928:	692b      	ldr	r3, [r5, #16]
 801392a:	b9eb      	cbnz	r3, 8013968 <_vfiprintf_r+0x78>
 801392c:	4629      	mov	r1, r5
 801392e:	4630      	mov	r0, r6
 8013930:	f7fe fa32 	bl	8011d98 <__swsetup_r>
 8013934:	b1c0      	cbz	r0, 8013968 <_vfiprintf_r+0x78>
 8013936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013938:	07dc      	lsls	r4, r3, #31
 801393a:	d50e      	bpl.n	801395a <_vfiprintf_r+0x6a>
 801393c:	f04f 30ff 	mov.w	r0, #4294967295
 8013940:	b01d      	add	sp, #116	; 0x74
 8013942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013946:	4b7b      	ldr	r3, [pc, #492]	; (8013b34 <_vfiprintf_r+0x244>)
 8013948:	429d      	cmp	r5, r3
 801394a:	d101      	bne.n	8013950 <_vfiprintf_r+0x60>
 801394c:	68b5      	ldr	r5, [r6, #8]
 801394e:	e7df      	b.n	8013910 <_vfiprintf_r+0x20>
 8013950:	4b79      	ldr	r3, [pc, #484]	; (8013b38 <_vfiprintf_r+0x248>)
 8013952:	429d      	cmp	r5, r3
 8013954:	bf08      	it	eq
 8013956:	68f5      	ldreq	r5, [r6, #12]
 8013958:	e7da      	b.n	8013910 <_vfiprintf_r+0x20>
 801395a:	89ab      	ldrh	r3, [r5, #12]
 801395c:	0598      	lsls	r0, r3, #22
 801395e:	d4ed      	bmi.n	801393c <_vfiprintf_r+0x4c>
 8013960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013962:	f7fd fb65 	bl	8011030 <__retarget_lock_release_recursive>
 8013966:	e7e9      	b.n	801393c <_vfiprintf_r+0x4c>
 8013968:	2300      	movs	r3, #0
 801396a:	9309      	str	r3, [sp, #36]	; 0x24
 801396c:	2320      	movs	r3, #32
 801396e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013972:	f8cd 800c 	str.w	r8, [sp, #12]
 8013976:	2330      	movs	r3, #48	; 0x30
 8013978:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013b3c <_vfiprintf_r+0x24c>
 801397c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013980:	f04f 0901 	mov.w	r9, #1
 8013984:	4623      	mov	r3, r4
 8013986:	469a      	mov	sl, r3
 8013988:	f813 2b01 	ldrb.w	r2, [r3], #1
 801398c:	b10a      	cbz	r2, 8013992 <_vfiprintf_r+0xa2>
 801398e:	2a25      	cmp	r2, #37	; 0x25
 8013990:	d1f9      	bne.n	8013986 <_vfiprintf_r+0x96>
 8013992:	ebba 0b04 	subs.w	fp, sl, r4
 8013996:	d00b      	beq.n	80139b0 <_vfiprintf_r+0xc0>
 8013998:	465b      	mov	r3, fp
 801399a:	4622      	mov	r2, r4
 801399c:	4629      	mov	r1, r5
 801399e:	4630      	mov	r0, r6
 80139a0:	f7ff ff93 	bl	80138ca <__sfputs_r>
 80139a4:	3001      	adds	r0, #1
 80139a6:	f000 80aa 	beq.w	8013afe <_vfiprintf_r+0x20e>
 80139aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139ac:	445a      	add	r2, fp
 80139ae:	9209      	str	r2, [sp, #36]	; 0x24
 80139b0:	f89a 3000 	ldrb.w	r3, [sl]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	f000 80a2 	beq.w	8013afe <_vfiprintf_r+0x20e>
 80139ba:	2300      	movs	r3, #0
 80139bc:	f04f 32ff 	mov.w	r2, #4294967295
 80139c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80139c4:	f10a 0a01 	add.w	sl, sl, #1
 80139c8:	9304      	str	r3, [sp, #16]
 80139ca:	9307      	str	r3, [sp, #28]
 80139cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80139d0:	931a      	str	r3, [sp, #104]	; 0x68
 80139d2:	4654      	mov	r4, sl
 80139d4:	2205      	movs	r2, #5
 80139d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139da:	4858      	ldr	r0, [pc, #352]	; (8013b3c <_vfiprintf_r+0x24c>)
 80139dc:	f7ec fc20 	bl	8000220 <memchr>
 80139e0:	9a04      	ldr	r2, [sp, #16]
 80139e2:	b9d8      	cbnz	r0, 8013a1c <_vfiprintf_r+0x12c>
 80139e4:	06d1      	lsls	r1, r2, #27
 80139e6:	bf44      	itt	mi
 80139e8:	2320      	movmi	r3, #32
 80139ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139ee:	0713      	lsls	r3, r2, #28
 80139f0:	bf44      	itt	mi
 80139f2:	232b      	movmi	r3, #43	; 0x2b
 80139f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139f8:	f89a 3000 	ldrb.w	r3, [sl]
 80139fc:	2b2a      	cmp	r3, #42	; 0x2a
 80139fe:	d015      	beq.n	8013a2c <_vfiprintf_r+0x13c>
 8013a00:	9a07      	ldr	r2, [sp, #28]
 8013a02:	4654      	mov	r4, sl
 8013a04:	2000      	movs	r0, #0
 8013a06:	f04f 0c0a 	mov.w	ip, #10
 8013a0a:	4621      	mov	r1, r4
 8013a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a10:	3b30      	subs	r3, #48	; 0x30
 8013a12:	2b09      	cmp	r3, #9
 8013a14:	d94e      	bls.n	8013ab4 <_vfiprintf_r+0x1c4>
 8013a16:	b1b0      	cbz	r0, 8013a46 <_vfiprintf_r+0x156>
 8013a18:	9207      	str	r2, [sp, #28]
 8013a1a:	e014      	b.n	8013a46 <_vfiprintf_r+0x156>
 8013a1c:	eba0 0308 	sub.w	r3, r0, r8
 8013a20:	fa09 f303 	lsl.w	r3, r9, r3
 8013a24:	4313      	orrs	r3, r2
 8013a26:	9304      	str	r3, [sp, #16]
 8013a28:	46a2      	mov	sl, r4
 8013a2a:	e7d2      	b.n	80139d2 <_vfiprintf_r+0xe2>
 8013a2c:	9b03      	ldr	r3, [sp, #12]
 8013a2e:	1d19      	adds	r1, r3, #4
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	9103      	str	r1, [sp, #12]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	bfbb      	ittet	lt
 8013a38:	425b      	neglt	r3, r3
 8013a3a:	f042 0202 	orrlt.w	r2, r2, #2
 8013a3e:	9307      	strge	r3, [sp, #28]
 8013a40:	9307      	strlt	r3, [sp, #28]
 8013a42:	bfb8      	it	lt
 8013a44:	9204      	strlt	r2, [sp, #16]
 8013a46:	7823      	ldrb	r3, [r4, #0]
 8013a48:	2b2e      	cmp	r3, #46	; 0x2e
 8013a4a:	d10c      	bne.n	8013a66 <_vfiprintf_r+0x176>
 8013a4c:	7863      	ldrb	r3, [r4, #1]
 8013a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8013a50:	d135      	bne.n	8013abe <_vfiprintf_r+0x1ce>
 8013a52:	9b03      	ldr	r3, [sp, #12]
 8013a54:	1d1a      	adds	r2, r3, #4
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	9203      	str	r2, [sp, #12]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	bfb8      	it	lt
 8013a5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013a62:	3402      	adds	r4, #2
 8013a64:	9305      	str	r3, [sp, #20]
 8013a66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013b4c <_vfiprintf_r+0x25c>
 8013a6a:	7821      	ldrb	r1, [r4, #0]
 8013a6c:	2203      	movs	r2, #3
 8013a6e:	4650      	mov	r0, sl
 8013a70:	f7ec fbd6 	bl	8000220 <memchr>
 8013a74:	b140      	cbz	r0, 8013a88 <_vfiprintf_r+0x198>
 8013a76:	2340      	movs	r3, #64	; 0x40
 8013a78:	eba0 000a 	sub.w	r0, r0, sl
 8013a7c:	fa03 f000 	lsl.w	r0, r3, r0
 8013a80:	9b04      	ldr	r3, [sp, #16]
 8013a82:	4303      	orrs	r3, r0
 8013a84:	3401      	adds	r4, #1
 8013a86:	9304      	str	r3, [sp, #16]
 8013a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a8c:	482c      	ldr	r0, [pc, #176]	; (8013b40 <_vfiprintf_r+0x250>)
 8013a8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a92:	2206      	movs	r2, #6
 8013a94:	f7ec fbc4 	bl	8000220 <memchr>
 8013a98:	2800      	cmp	r0, #0
 8013a9a:	d03f      	beq.n	8013b1c <_vfiprintf_r+0x22c>
 8013a9c:	4b29      	ldr	r3, [pc, #164]	; (8013b44 <_vfiprintf_r+0x254>)
 8013a9e:	bb1b      	cbnz	r3, 8013ae8 <_vfiprintf_r+0x1f8>
 8013aa0:	9b03      	ldr	r3, [sp, #12]
 8013aa2:	3307      	adds	r3, #7
 8013aa4:	f023 0307 	bic.w	r3, r3, #7
 8013aa8:	3308      	adds	r3, #8
 8013aaa:	9303      	str	r3, [sp, #12]
 8013aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013aae:	443b      	add	r3, r7
 8013ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8013ab2:	e767      	b.n	8013984 <_vfiprintf_r+0x94>
 8013ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ab8:	460c      	mov	r4, r1
 8013aba:	2001      	movs	r0, #1
 8013abc:	e7a5      	b.n	8013a0a <_vfiprintf_r+0x11a>
 8013abe:	2300      	movs	r3, #0
 8013ac0:	3401      	adds	r4, #1
 8013ac2:	9305      	str	r3, [sp, #20]
 8013ac4:	4619      	mov	r1, r3
 8013ac6:	f04f 0c0a 	mov.w	ip, #10
 8013aca:	4620      	mov	r0, r4
 8013acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ad0:	3a30      	subs	r2, #48	; 0x30
 8013ad2:	2a09      	cmp	r2, #9
 8013ad4:	d903      	bls.n	8013ade <_vfiprintf_r+0x1ee>
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d0c5      	beq.n	8013a66 <_vfiprintf_r+0x176>
 8013ada:	9105      	str	r1, [sp, #20]
 8013adc:	e7c3      	b.n	8013a66 <_vfiprintf_r+0x176>
 8013ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8013ae2:	4604      	mov	r4, r0
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	e7f0      	b.n	8013aca <_vfiprintf_r+0x1da>
 8013ae8:	ab03      	add	r3, sp, #12
 8013aea:	9300      	str	r3, [sp, #0]
 8013aec:	462a      	mov	r2, r5
 8013aee:	4b16      	ldr	r3, [pc, #88]	; (8013b48 <_vfiprintf_r+0x258>)
 8013af0:	a904      	add	r1, sp, #16
 8013af2:	4630      	mov	r0, r6
 8013af4:	f7fd fbae 	bl	8011254 <_printf_float>
 8013af8:	4607      	mov	r7, r0
 8013afa:	1c78      	adds	r0, r7, #1
 8013afc:	d1d6      	bne.n	8013aac <_vfiprintf_r+0x1bc>
 8013afe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b00:	07d9      	lsls	r1, r3, #31
 8013b02:	d405      	bmi.n	8013b10 <_vfiprintf_r+0x220>
 8013b04:	89ab      	ldrh	r3, [r5, #12]
 8013b06:	059a      	lsls	r2, r3, #22
 8013b08:	d402      	bmi.n	8013b10 <_vfiprintf_r+0x220>
 8013b0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b0c:	f7fd fa90 	bl	8011030 <__retarget_lock_release_recursive>
 8013b10:	89ab      	ldrh	r3, [r5, #12]
 8013b12:	065b      	lsls	r3, r3, #25
 8013b14:	f53f af12 	bmi.w	801393c <_vfiprintf_r+0x4c>
 8013b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b1a:	e711      	b.n	8013940 <_vfiprintf_r+0x50>
 8013b1c:	ab03      	add	r3, sp, #12
 8013b1e:	9300      	str	r3, [sp, #0]
 8013b20:	462a      	mov	r2, r5
 8013b22:	4b09      	ldr	r3, [pc, #36]	; (8013b48 <_vfiprintf_r+0x258>)
 8013b24:	a904      	add	r1, sp, #16
 8013b26:	4630      	mov	r0, r6
 8013b28:	f7fd fe38 	bl	801179c <_printf_i>
 8013b2c:	e7e4      	b.n	8013af8 <_vfiprintf_r+0x208>
 8013b2e:	bf00      	nop
 8013b30:	08016e8c 	.word	0x08016e8c
 8013b34:	08016eac 	.word	0x08016eac
 8013b38:	08016e6c 	.word	0x08016e6c
 8013b3c:	080170f4 	.word	0x080170f4
 8013b40:	080170fe 	.word	0x080170fe
 8013b44:	08011255 	.word	0x08011255
 8013b48:	080138cb 	.word	0x080138cb
 8013b4c:	080170fa 	.word	0x080170fa

08013b50 <_read_r>:
 8013b50:	b538      	push	{r3, r4, r5, lr}
 8013b52:	4d07      	ldr	r5, [pc, #28]	; (8013b70 <_read_r+0x20>)
 8013b54:	4604      	mov	r4, r0
 8013b56:	4608      	mov	r0, r1
 8013b58:	4611      	mov	r1, r2
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	602a      	str	r2, [r5, #0]
 8013b5e:	461a      	mov	r2, r3
 8013b60:	f7f0 f8b2 	bl	8003cc8 <_read>
 8013b64:	1c43      	adds	r3, r0, #1
 8013b66:	d102      	bne.n	8013b6e <_read_r+0x1e>
 8013b68:	682b      	ldr	r3, [r5, #0]
 8013b6a:	b103      	cbz	r3, 8013b6e <_read_r+0x1e>
 8013b6c:	6023      	str	r3, [r4, #0]
 8013b6e:	bd38      	pop	{r3, r4, r5, pc}
 8013b70:	20004e98 	.word	0x20004e98

08013b74 <__assert_func>:
 8013b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b76:	4614      	mov	r4, r2
 8013b78:	461a      	mov	r2, r3
 8013b7a:	4b09      	ldr	r3, [pc, #36]	; (8013ba0 <__assert_func+0x2c>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	4605      	mov	r5, r0
 8013b80:	68d8      	ldr	r0, [r3, #12]
 8013b82:	b14c      	cbz	r4, 8013b98 <__assert_func+0x24>
 8013b84:	4b07      	ldr	r3, [pc, #28]	; (8013ba4 <__assert_func+0x30>)
 8013b86:	9100      	str	r1, [sp, #0]
 8013b88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013b8c:	4906      	ldr	r1, [pc, #24]	; (8013ba8 <__assert_func+0x34>)
 8013b8e:	462b      	mov	r3, r5
 8013b90:	f000 f80e 	bl	8013bb0 <fiprintf>
 8013b94:	f000 f89f 	bl	8013cd6 <abort>
 8013b98:	4b04      	ldr	r3, [pc, #16]	; (8013bac <__assert_func+0x38>)
 8013b9a:	461c      	mov	r4, r3
 8013b9c:	e7f3      	b.n	8013b86 <__assert_func+0x12>
 8013b9e:	bf00      	nop
 8013ba0:	200002cc 	.word	0x200002cc
 8013ba4:	08017105 	.word	0x08017105
 8013ba8:	08017112 	.word	0x08017112
 8013bac:	08017140 	.word	0x08017140

08013bb0 <fiprintf>:
 8013bb0:	b40e      	push	{r1, r2, r3}
 8013bb2:	b503      	push	{r0, r1, lr}
 8013bb4:	4601      	mov	r1, r0
 8013bb6:	ab03      	add	r3, sp, #12
 8013bb8:	4805      	ldr	r0, [pc, #20]	; (8013bd0 <fiprintf+0x20>)
 8013bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8013bbe:	6800      	ldr	r0, [r0, #0]
 8013bc0:	9301      	str	r3, [sp, #4]
 8013bc2:	f7ff fe95 	bl	80138f0 <_vfiprintf_r>
 8013bc6:	b002      	add	sp, #8
 8013bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013bcc:	b003      	add	sp, #12
 8013bce:	4770      	bx	lr
 8013bd0:	200002cc 	.word	0x200002cc

08013bd4 <_fstat_r>:
 8013bd4:	b538      	push	{r3, r4, r5, lr}
 8013bd6:	4d07      	ldr	r5, [pc, #28]	; (8013bf4 <_fstat_r+0x20>)
 8013bd8:	2300      	movs	r3, #0
 8013bda:	4604      	mov	r4, r0
 8013bdc:	4608      	mov	r0, r1
 8013bde:	4611      	mov	r1, r2
 8013be0:	602b      	str	r3, [r5, #0]
 8013be2:	f7f0 f8b6 	bl	8003d52 <_fstat>
 8013be6:	1c43      	adds	r3, r0, #1
 8013be8:	d102      	bne.n	8013bf0 <_fstat_r+0x1c>
 8013bea:	682b      	ldr	r3, [r5, #0]
 8013bec:	b103      	cbz	r3, 8013bf0 <_fstat_r+0x1c>
 8013bee:	6023      	str	r3, [r4, #0]
 8013bf0:	bd38      	pop	{r3, r4, r5, pc}
 8013bf2:	bf00      	nop
 8013bf4:	20004e98 	.word	0x20004e98

08013bf8 <_isatty_r>:
 8013bf8:	b538      	push	{r3, r4, r5, lr}
 8013bfa:	4d06      	ldr	r5, [pc, #24]	; (8013c14 <_isatty_r+0x1c>)
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	4604      	mov	r4, r0
 8013c00:	4608      	mov	r0, r1
 8013c02:	602b      	str	r3, [r5, #0]
 8013c04:	f7f0 f8b5 	bl	8003d72 <_isatty>
 8013c08:	1c43      	adds	r3, r0, #1
 8013c0a:	d102      	bne.n	8013c12 <_isatty_r+0x1a>
 8013c0c:	682b      	ldr	r3, [r5, #0]
 8013c0e:	b103      	cbz	r3, 8013c12 <_isatty_r+0x1a>
 8013c10:	6023      	str	r3, [r4, #0]
 8013c12:	bd38      	pop	{r3, r4, r5, pc}
 8013c14:	20004e98 	.word	0x20004e98

08013c18 <__ascii_mbtowc>:
 8013c18:	b082      	sub	sp, #8
 8013c1a:	b901      	cbnz	r1, 8013c1e <__ascii_mbtowc+0x6>
 8013c1c:	a901      	add	r1, sp, #4
 8013c1e:	b142      	cbz	r2, 8013c32 <__ascii_mbtowc+0x1a>
 8013c20:	b14b      	cbz	r3, 8013c36 <__ascii_mbtowc+0x1e>
 8013c22:	7813      	ldrb	r3, [r2, #0]
 8013c24:	600b      	str	r3, [r1, #0]
 8013c26:	7812      	ldrb	r2, [r2, #0]
 8013c28:	1e10      	subs	r0, r2, #0
 8013c2a:	bf18      	it	ne
 8013c2c:	2001      	movne	r0, #1
 8013c2e:	b002      	add	sp, #8
 8013c30:	4770      	bx	lr
 8013c32:	4610      	mov	r0, r2
 8013c34:	e7fb      	b.n	8013c2e <__ascii_mbtowc+0x16>
 8013c36:	f06f 0001 	mvn.w	r0, #1
 8013c3a:	e7f8      	b.n	8013c2e <__ascii_mbtowc+0x16>

08013c3c <memmove>:
 8013c3c:	4288      	cmp	r0, r1
 8013c3e:	b510      	push	{r4, lr}
 8013c40:	eb01 0402 	add.w	r4, r1, r2
 8013c44:	d902      	bls.n	8013c4c <memmove+0x10>
 8013c46:	4284      	cmp	r4, r0
 8013c48:	4623      	mov	r3, r4
 8013c4a:	d807      	bhi.n	8013c5c <memmove+0x20>
 8013c4c:	1e43      	subs	r3, r0, #1
 8013c4e:	42a1      	cmp	r1, r4
 8013c50:	d008      	beq.n	8013c64 <memmove+0x28>
 8013c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013c56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013c5a:	e7f8      	b.n	8013c4e <memmove+0x12>
 8013c5c:	4402      	add	r2, r0
 8013c5e:	4601      	mov	r1, r0
 8013c60:	428a      	cmp	r2, r1
 8013c62:	d100      	bne.n	8013c66 <memmove+0x2a>
 8013c64:	bd10      	pop	{r4, pc}
 8013c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013c6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013c6e:	e7f7      	b.n	8013c60 <memmove+0x24>

08013c70 <_realloc_r>:
 8013c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c72:	4607      	mov	r7, r0
 8013c74:	4614      	mov	r4, r2
 8013c76:	460e      	mov	r6, r1
 8013c78:	b921      	cbnz	r1, 8013c84 <_realloc_r+0x14>
 8013c7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013c7e:	4611      	mov	r1, r2
 8013c80:	f7fd b9ee 	b.w	8011060 <_malloc_r>
 8013c84:	b922      	cbnz	r2, 8013c90 <_realloc_r+0x20>
 8013c86:	f7ff fc5d 	bl	8013544 <_free_r>
 8013c8a:	4625      	mov	r5, r4
 8013c8c:	4628      	mov	r0, r5
 8013c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c90:	f000 f828 	bl	8013ce4 <_malloc_usable_size_r>
 8013c94:	42a0      	cmp	r0, r4
 8013c96:	d20f      	bcs.n	8013cb8 <_realloc_r+0x48>
 8013c98:	4621      	mov	r1, r4
 8013c9a:	4638      	mov	r0, r7
 8013c9c:	f7fd f9e0 	bl	8011060 <_malloc_r>
 8013ca0:	4605      	mov	r5, r0
 8013ca2:	2800      	cmp	r0, #0
 8013ca4:	d0f2      	beq.n	8013c8c <_realloc_r+0x1c>
 8013ca6:	4631      	mov	r1, r6
 8013ca8:	4622      	mov	r2, r4
 8013caa:	f7fd f9c2 	bl	8011032 <memcpy>
 8013cae:	4631      	mov	r1, r6
 8013cb0:	4638      	mov	r0, r7
 8013cb2:	f7ff fc47 	bl	8013544 <_free_r>
 8013cb6:	e7e9      	b.n	8013c8c <_realloc_r+0x1c>
 8013cb8:	4635      	mov	r5, r6
 8013cba:	e7e7      	b.n	8013c8c <_realloc_r+0x1c>

08013cbc <__ascii_wctomb>:
 8013cbc:	b149      	cbz	r1, 8013cd2 <__ascii_wctomb+0x16>
 8013cbe:	2aff      	cmp	r2, #255	; 0xff
 8013cc0:	bf85      	ittet	hi
 8013cc2:	238a      	movhi	r3, #138	; 0x8a
 8013cc4:	6003      	strhi	r3, [r0, #0]
 8013cc6:	700a      	strbls	r2, [r1, #0]
 8013cc8:	f04f 30ff 	movhi.w	r0, #4294967295
 8013ccc:	bf98      	it	ls
 8013cce:	2001      	movls	r0, #1
 8013cd0:	4770      	bx	lr
 8013cd2:	4608      	mov	r0, r1
 8013cd4:	4770      	bx	lr

08013cd6 <abort>:
 8013cd6:	b508      	push	{r3, lr}
 8013cd8:	2006      	movs	r0, #6
 8013cda:	f000 f833 	bl	8013d44 <raise>
 8013cde:	2001      	movs	r0, #1
 8013ce0:	f7ef ffe8 	bl	8003cb4 <_exit>

08013ce4 <_malloc_usable_size_r>:
 8013ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ce8:	1f18      	subs	r0, r3, #4
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	bfbc      	itt	lt
 8013cee:	580b      	ldrlt	r3, [r1, r0]
 8013cf0:	18c0      	addlt	r0, r0, r3
 8013cf2:	4770      	bx	lr

08013cf4 <_raise_r>:
 8013cf4:	291f      	cmp	r1, #31
 8013cf6:	b538      	push	{r3, r4, r5, lr}
 8013cf8:	4604      	mov	r4, r0
 8013cfa:	460d      	mov	r5, r1
 8013cfc:	d904      	bls.n	8013d08 <_raise_r+0x14>
 8013cfe:	2316      	movs	r3, #22
 8013d00:	6003      	str	r3, [r0, #0]
 8013d02:	f04f 30ff 	mov.w	r0, #4294967295
 8013d06:	bd38      	pop	{r3, r4, r5, pc}
 8013d08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013d0a:	b112      	cbz	r2, 8013d12 <_raise_r+0x1e>
 8013d0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013d10:	b94b      	cbnz	r3, 8013d26 <_raise_r+0x32>
 8013d12:	4620      	mov	r0, r4
 8013d14:	f000 f830 	bl	8013d78 <_getpid_r>
 8013d18:	462a      	mov	r2, r5
 8013d1a:	4601      	mov	r1, r0
 8013d1c:	4620      	mov	r0, r4
 8013d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d22:	f000 b817 	b.w	8013d54 <_kill_r>
 8013d26:	2b01      	cmp	r3, #1
 8013d28:	d00a      	beq.n	8013d40 <_raise_r+0x4c>
 8013d2a:	1c59      	adds	r1, r3, #1
 8013d2c:	d103      	bne.n	8013d36 <_raise_r+0x42>
 8013d2e:	2316      	movs	r3, #22
 8013d30:	6003      	str	r3, [r0, #0]
 8013d32:	2001      	movs	r0, #1
 8013d34:	e7e7      	b.n	8013d06 <_raise_r+0x12>
 8013d36:	2400      	movs	r4, #0
 8013d38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013d3c:	4628      	mov	r0, r5
 8013d3e:	4798      	blx	r3
 8013d40:	2000      	movs	r0, #0
 8013d42:	e7e0      	b.n	8013d06 <_raise_r+0x12>

08013d44 <raise>:
 8013d44:	4b02      	ldr	r3, [pc, #8]	; (8013d50 <raise+0xc>)
 8013d46:	4601      	mov	r1, r0
 8013d48:	6818      	ldr	r0, [r3, #0]
 8013d4a:	f7ff bfd3 	b.w	8013cf4 <_raise_r>
 8013d4e:	bf00      	nop
 8013d50:	200002cc 	.word	0x200002cc

08013d54 <_kill_r>:
 8013d54:	b538      	push	{r3, r4, r5, lr}
 8013d56:	4d07      	ldr	r5, [pc, #28]	; (8013d74 <_kill_r+0x20>)
 8013d58:	2300      	movs	r3, #0
 8013d5a:	4604      	mov	r4, r0
 8013d5c:	4608      	mov	r0, r1
 8013d5e:	4611      	mov	r1, r2
 8013d60:	602b      	str	r3, [r5, #0]
 8013d62:	f7ef ff97 	bl	8003c94 <_kill>
 8013d66:	1c43      	adds	r3, r0, #1
 8013d68:	d102      	bne.n	8013d70 <_kill_r+0x1c>
 8013d6a:	682b      	ldr	r3, [r5, #0]
 8013d6c:	b103      	cbz	r3, 8013d70 <_kill_r+0x1c>
 8013d6e:	6023      	str	r3, [r4, #0]
 8013d70:	bd38      	pop	{r3, r4, r5, pc}
 8013d72:	bf00      	nop
 8013d74:	20004e98 	.word	0x20004e98

08013d78 <_getpid_r>:
 8013d78:	f7ef bf84 	b.w	8003c84 <_getpid>
 8013d7c:	0000      	movs	r0, r0
	...

08013d80 <atan>:
 8013d80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d84:	ec55 4b10 	vmov	r4, r5, d0
 8013d88:	4bc3      	ldr	r3, [pc, #780]	; (8014098 <atan+0x318>)
 8013d8a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013d8e:	429e      	cmp	r6, r3
 8013d90:	46ab      	mov	fp, r5
 8013d92:	dd18      	ble.n	8013dc6 <atan+0x46>
 8013d94:	4bc1      	ldr	r3, [pc, #772]	; (801409c <atan+0x31c>)
 8013d96:	429e      	cmp	r6, r3
 8013d98:	dc01      	bgt.n	8013d9e <atan+0x1e>
 8013d9a:	d109      	bne.n	8013db0 <atan+0x30>
 8013d9c:	b144      	cbz	r4, 8013db0 <atan+0x30>
 8013d9e:	4622      	mov	r2, r4
 8013da0:	462b      	mov	r3, r5
 8013da2:	4620      	mov	r0, r4
 8013da4:	4629      	mov	r1, r5
 8013da6:	f7ec fa91 	bl	80002cc <__adddf3>
 8013daa:	4604      	mov	r4, r0
 8013dac:	460d      	mov	r5, r1
 8013dae:	e006      	b.n	8013dbe <atan+0x3e>
 8013db0:	f1bb 0f00 	cmp.w	fp, #0
 8013db4:	f300 8131 	bgt.w	801401a <atan+0x29a>
 8013db8:	a59b      	add	r5, pc, #620	; (adr r5, 8014028 <atan+0x2a8>)
 8013dba:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013dbe:	ec45 4b10 	vmov	d0, r4, r5
 8013dc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dc6:	4bb6      	ldr	r3, [pc, #728]	; (80140a0 <atan+0x320>)
 8013dc8:	429e      	cmp	r6, r3
 8013dca:	dc14      	bgt.n	8013df6 <atan+0x76>
 8013dcc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8013dd0:	429e      	cmp	r6, r3
 8013dd2:	dc0d      	bgt.n	8013df0 <atan+0x70>
 8013dd4:	a396      	add	r3, pc, #600	; (adr r3, 8014030 <atan+0x2b0>)
 8013dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dda:	ee10 0a10 	vmov	r0, s0
 8013dde:	4629      	mov	r1, r5
 8013de0:	f7ec fa74 	bl	80002cc <__adddf3>
 8013de4:	4baf      	ldr	r3, [pc, #700]	; (80140a4 <atan+0x324>)
 8013de6:	2200      	movs	r2, #0
 8013de8:	f7ec feb6 	bl	8000b58 <__aeabi_dcmpgt>
 8013dec:	2800      	cmp	r0, #0
 8013dee:	d1e6      	bne.n	8013dbe <atan+0x3e>
 8013df0:	f04f 3aff 	mov.w	sl, #4294967295
 8013df4:	e02b      	b.n	8013e4e <atan+0xce>
 8013df6:	f000 f9b3 	bl	8014160 <fabs>
 8013dfa:	4bab      	ldr	r3, [pc, #684]	; (80140a8 <atan+0x328>)
 8013dfc:	429e      	cmp	r6, r3
 8013dfe:	ec55 4b10 	vmov	r4, r5, d0
 8013e02:	f300 80bf 	bgt.w	8013f84 <atan+0x204>
 8013e06:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8013e0a:	429e      	cmp	r6, r3
 8013e0c:	f300 80a0 	bgt.w	8013f50 <atan+0x1d0>
 8013e10:	ee10 2a10 	vmov	r2, s0
 8013e14:	ee10 0a10 	vmov	r0, s0
 8013e18:	462b      	mov	r3, r5
 8013e1a:	4629      	mov	r1, r5
 8013e1c:	f7ec fa56 	bl	80002cc <__adddf3>
 8013e20:	4ba0      	ldr	r3, [pc, #640]	; (80140a4 <atan+0x324>)
 8013e22:	2200      	movs	r2, #0
 8013e24:	f7ec fa50 	bl	80002c8 <__aeabi_dsub>
 8013e28:	2200      	movs	r2, #0
 8013e2a:	4606      	mov	r6, r0
 8013e2c:	460f      	mov	r7, r1
 8013e2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013e32:	4620      	mov	r0, r4
 8013e34:	4629      	mov	r1, r5
 8013e36:	f7ec fa49 	bl	80002cc <__adddf3>
 8013e3a:	4602      	mov	r2, r0
 8013e3c:	460b      	mov	r3, r1
 8013e3e:	4630      	mov	r0, r6
 8013e40:	4639      	mov	r1, r7
 8013e42:	f7ec fd23 	bl	800088c <__aeabi_ddiv>
 8013e46:	f04f 0a00 	mov.w	sl, #0
 8013e4a:	4604      	mov	r4, r0
 8013e4c:	460d      	mov	r5, r1
 8013e4e:	4622      	mov	r2, r4
 8013e50:	462b      	mov	r3, r5
 8013e52:	4620      	mov	r0, r4
 8013e54:	4629      	mov	r1, r5
 8013e56:	f7ec fbef 	bl	8000638 <__aeabi_dmul>
 8013e5a:	4602      	mov	r2, r0
 8013e5c:	460b      	mov	r3, r1
 8013e5e:	4680      	mov	r8, r0
 8013e60:	4689      	mov	r9, r1
 8013e62:	f7ec fbe9 	bl	8000638 <__aeabi_dmul>
 8013e66:	a374      	add	r3, pc, #464	; (adr r3, 8014038 <atan+0x2b8>)
 8013e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e6c:	4606      	mov	r6, r0
 8013e6e:	460f      	mov	r7, r1
 8013e70:	f7ec fbe2 	bl	8000638 <__aeabi_dmul>
 8013e74:	a372      	add	r3, pc, #456	; (adr r3, 8014040 <atan+0x2c0>)
 8013e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e7a:	f7ec fa27 	bl	80002cc <__adddf3>
 8013e7e:	4632      	mov	r2, r6
 8013e80:	463b      	mov	r3, r7
 8013e82:	f7ec fbd9 	bl	8000638 <__aeabi_dmul>
 8013e86:	a370      	add	r3, pc, #448	; (adr r3, 8014048 <atan+0x2c8>)
 8013e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e8c:	f7ec fa1e 	bl	80002cc <__adddf3>
 8013e90:	4632      	mov	r2, r6
 8013e92:	463b      	mov	r3, r7
 8013e94:	f7ec fbd0 	bl	8000638 <__aeabi_dmul>
 8013e98:	a36d      	add	r3, pc, #436	; (adr r3, 8014050 <atan+0x2d0>)
 8013e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e9e:	f7ec fa15 	bl	80002cc <__adddf3>
 8013ea2:	4632      	mov	r2, r6
 8013ea4:	463b      	mov	r3, r7
 8013ea6:	f7ec fbc7 	bl	8000638 <__aeabi_dmul>
 8013eaa:	a36b      	add	r3, pc, #428	; (adr r3, 8014058 <atan+0x2d8>)
 8013eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eb0:	f7ec fa0c 	bl	80002cc <__adddf3>
 8013eb4:	4632      	mov	r2, r6
 8013eb6:	463b      	mov	r3, r7
 8013eb8:	f7ec fbbe 	bl	8000638 <__aeabi_dmul>
 8013ebc:	a368      	add	r3, pc, #416	; (adr r3, 8014060 <atan+0x2e0>)
 8013ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ec2:	f7ec fa03 	bl	80002cc <__adddf3>
 8013ec6:	4642      	mov	r2, r8
 8013ec8:	464b      	mov	r3, r9
 8013eca:	f7ec fbb5 	bl	8000638 <__aeabi_dmul>
 8013ece:	a366      	add	r3, pc, #408	; (adr r3, 8014068 <atan+0x2e8>)
 8013ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ed4:	4680      	mov	r8, r0
 8013ed6:	4689      	mov	r9, r1
 8013ed8:	4630      	mov	r0, r6
 8013eda:	4639      	mov	r1, r7
 8013edc:	f7ec fbac 	bl	8000638 <__aeabi_dmul>
 8013ee0:	a363      	add	r3, pc, #396	; (adr r3, 8014070 <atan+0x2f0>)
 8013ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ee6:	f7ec f9ef 	bl	80002c8 <__aeabi_dsub>
 8013eea:	4632      	mov	r2, r6
 8013eec:	463b      	mov	r3, r7
 8013eee:	f7ec fba3 	bl	8000638 <__aeabi_dmul>
 8013ef2:	a361      	add	r3, pc, #388	; (adr r3, 8014078 <atan+0x2f8>)
 8013ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ef8:	f7ec f9e6 	bl	80002c8 <__aeabi_dsub>
 8013efc:	4632      	mov	r2, r6
 8013efe:	463b      	mov	r3, r7
 8013f00:	f7ec fb9a 	bl	8000638 <__aeabi_dmul>
 8013f04:	a35e      	add	r3, pc, #376	; (adr r3, 8014080 <atan+0x300>)
 8013f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f0a:	f7ec f9dd 	bl	80002c8 <__aeabi_dsub>
 8013f0e:	4632      	mov	r2, r6
 8013f10:	463b      	mov	r3, r7
 8013f12:	f7ec fb91 	bl	8000638 <__aeabi_dmul>
 8013f16:	a35c      	add	r3, pc, #368	; (adr r3, 8014088 <atan+0x308>)
 8013f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f1c:	f7ec f9d4 	bl	80002c8 <__aeabi_dsub>
 8013f20:	4632      	mov	r2, r6
 8013f22:	463b      	mov	r3, r7
 8013f24:	f7ec fb88 	bl	8000638 <__aeabi_dmul>
 8013f28:	4602      	mov	r2, r0
 8013f2a:	460b      	mov	r3, r1
 8013f2c:	4640      	mov	r0, r8
 8013f2e:	4649      	mov	r1, r9
 8013f30:	f7ec f9cc 	bl	80002cc <__adddf3>
 8013f34:	4622      	mov	r2, r4
 8013f36:	462b      	mov	r3, r5
 8013f38:	f7ec fb7e 	bl	8000638 <__aeabi_dmul>
 8013f3c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013f40:	4602      	mov	r2, r0
 8013f42:	460b      	mov	r3, r1
 8013f44:	d14b      	bne.n	8013fde <atan+0x25e>
 8013f46:	4620      	mov	r0, r4
 8013f48:	4629      	mov	r1, r5
 8013f4a:	f7ec f9bd 	bl	80002c8 <__aeabi_dsub>
 8013f4e:	e72c      	b.n	8013daa <atan+0x2a>
 8013f50:	ee10 0a10 	vmov	r0, s0
 8013f54:	4b53      	ldr	r3, [pc, #332]	; (80140a4 <atan+0x324>)
 8013f56:	2200      	movs	r2, #0
 8013f58:	4629      	mov	r1, r5
 8013f5a:	f7ec f9b5 	bl	80002c8 <__aeabi_dsub>
 8013f5e:	4b51      	ldr	r3, [pc, #324]	; (80140a4 <atan+0x324>)
 8013f60:	4606      	mov	r6, r0
 8013f62:	460f      	mov	r7, r1
 8013f64:	2200      	movs	r2, #0
 8013f66:	4620      	mov	r0, r4
 8013f68:	4629      	mov	r1, r5
 8013f6a:	f7ec f9af 	bl	80002cc <__adddf3>
 8013f6e:	4602      	mov	r2, r0
 8013f70:	460b      	mov	r3, r1
 8013f72:	4630      	mov	r0, r6
 8013f74:	4639      	mov	r1, r7
 8013f76:	f7ec fc89 	bl	800088c <__aeabi_ddiv>
 8013f7a:	f04f 0a01 	mov.w	sl, #1
 8013f7e:	4604      	mov	r4, r0
 8013f80:	460d      	mov	r5, r1
 8013f82:	e764      	b.n	8013e4e <atan+0xce>
 8013f84:	4b49      	ldr	r3, [pc, #292]	; (80140ac <atan+0x32c>)
 8013f86:	429e      	cmp	r6, r3
 8013f88:	da1d      	bge.n	8013fc6 <atan+0x246>
 8013f8a:	ee10 0a10 	vmov	r0, s0
 8013f8e:	4b48      	ldr	r3, [pc, #288]	; (80140b0 <atan+0x330>)
 8013f90:	2200      	movs	r2, #0
 8013f92:	4629      	mov	r1, r5
 8013f94:	f7ec f998 	bl	80002c8 <__aeabi_dsub>
 8013f98:	4b45      	ldr	r3, [pc, #276]	; (80140b0 <atan+0x330>)
 8013f9a:	4606      	mov	r6, r0
 8013f9c:	460f      	mov	r7, r1
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	4629      	mov	r1, r5
 8013fa4:	f7ec fb48 	bl	8000638 <__aeabi_dmul>
 8013fa8:	4b3e      	ldr	r3, [pc, #248]	; (80140a4 <atan+0x324>)
 8013faa:	2200      	movs	r2, #0
 8013fac:	f7ec f98e 	bl	80002cc <__adddf3>
 8013fb0:	4602      	mov	r2, r0
 8013fb2:	460b      	mov	r3, r1
 8013fb4:	4630      	mov	r0, r6
 8013fb6:	4639      	mov	r1, r7
 8013fb8:	f7ec fc68 	bl	800088c <__aeabi_ddiv>
 8013fbc:	f04f 0a02 	mov.w	sl, #2
 8013fc0:	4604      	mov	r4, r0
 8013fc2:	460d      	mov	r5, r1
 8013fc4:	e743      	b.n	8013e4e <atan+0xce>
 8013fc6:	462b      	mov	r3, r5
 8013fc8:	ee10 2a10 	vmov	r2, s0
 8013fcc:	4939      	ldr	r1, [pc, #228]	; (80140b4 <atan+0x334>)
 8013fce:	2000      	movs	r0, #0
 8013fd0:	f7ec fc5c 	bl	800088c <__aeabi_ddiv>
 8013fd4:	f04f 0a03 	mov.w	sl, #3
 8013fd8:	4604      	mov	r4, r0
 8013fda:	460d      	mov	r5, r1
 8013fdc:	e737      	b.n	8013e4e <atan+0xce>
 8013fde:	4b36      	ldr	r3, [pc, #216]	; (80140b8 <atan+0x338>)
 8013fe0:	4e36      	ldr	r6, [pc, #216]	; (80140bc <atan+0x33c>)
 8013fe2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8013fe6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8013fea:	e9da 2300 	ldrd	r2, r3, [sl]
 8013fee:	f7ec f96b 	bl	80002c8 <__aeabi_dsub>
 8013ff2:	4622      	mov	r2, r4
 8013ff4:	462b      	mov	r3, r5
 8013ff6:	f7ec f967 	bl	80002c8 <__aeabi_dsub>
 8013ffa:	4602      	mov	r2, r0
 8013ffc:	460b      	mov	r3, r1
 8013ffe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014002:	f7ec f961 	bl	80002c8 <__aeabi_dsub>
 8014006:	f1bb 0f00 	cmp.w	fp, #0
 801400a:	4604      	mov	r4, r0
 801400c:	460d      	mov	r5, r1
 801400e:	f6bf aed6 	bge.w	8013dbe <atan+0x3e>
 8014012:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014016:	461d      	mov	r5, r3
 8014018:	e6d1      	b.n	8013dbe <atan+0x3e>
 801401a:	a51d      	add	r5, pc, #116	; (adr r5, 8014090 <atan+0x310>)
 801401c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014020:	e6cd      	b.n	8013dbe <atan+0x3e>
 8014022:	bf00      	nop
 8014024:	f3af 8000 	nop.w
 8014028:	54442d18 	.word	0x54442d18
 801402c:	bff921fb 	.word	0xbff921fb
 8014030:	8800759c 	.word	0x8800759c
 8014034:	7e37e43c 	.word	0x7e37e43c
 8014038:	e322da11 	.word	0xe322da11
 801403c:	3f90ad3a 	.word	0x3f90ad3a
 8014040:	24760deb 	.word	0x24760deb
 8014044:	3fa97b4b 	.word	0x3fa97b4b
 8014048:	a0d03d51 	.word	0xa0d03d51
 801404c:	3fb10d66 	.word	0x3fb10d66
 8014050:	c54c206e 	.word	0xc54c206e
 8014054:	3fb745cd 	.word	0x3fb745cd
 8014058:	920083ff 	.word	0x920083ff
 801405c:	3fc24924 	.word	0x3fc24924
 8014060:	5555550d 	.word	0x5555550d
 8014064:	3fd55555 	.word	0x3fd55555
 8014068:	2c6a6c2f 	.word	0x2c6a6c2f
 801406c:	bfa2b444 	.word	0xbfa2b444
 8014070:	52defd9a 	.word	0x52defd9a
 8014074:	3fadde2d 	.word	0x3fadde2d
 8014078:	af749a6d 	.word	0xaf749a6d
 801407c:	3fb3b0f2 	.word	0x3fb3b0f2
 8014080:	fe231671 	.word	0xfe231671
 8014084:	3fbc71c6 	.word	0x3fbc71c6
 8014088:	9998ebc4 	.word	0x9998ebc4
 801408c:	3fc99999 	.word	0x3fc99999
 8014090:	54442d18 	.word	0x54442d18
 8014094:	3ff921fb 	.word	0x3ff921fb
 8014098:	440fffff 	.word	0x440fffff
 801409c:	7ff00000 	.word	0x7ff00000
 80140a0:	3fdbffff 	.word	0x3fdbffff
 80140a4:	3ff00000 	.word	0x3ff00000
 80140a8:	3ff2ffff 	.word	0x3ff2ffff
 80140ac:	40038000 	.word	0x40038000
 80140b0:	3ff80000 	.word	0x3ff80000
 80140b4:	bff00000 	.word	0xbff00000
 80140b8:	08017270 	.word	0x08017270
 80140bc:	08017250 	.word	0x08017250

080140c0 <cos>:
 80140c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80140c2:	ec53 2b10 	vmov	r2, r3, d0
 80140c6:	4824      	ldr	r0, [pc, #144]	; (8014158 <cos+0x98>)
 80140c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80140cc:	4281      	cmp	r1, r0
 80140ce:	dc06      	bgt.n	80140de <cos+0x1e>
 80140d0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8014150 <cos+0x90>
 80140d4:	f001 fd8c 	bl	8015bf0 <__kernel_cos>
 80140d8:	ec51 0b10 	vmov	r0, r1, d0
 80140dc:	e007      	b.n	80140ee <cos+0x2e>
 80140de:	481f      	ldr	r0, [pc, #124]	; (801415c <cos+0x9c>)
 80140e0:	4281      	cmp	r1, r0
 80140e2:	dd09      	ble.n	80140f8 <cos+0x38>
 80140e4:	ee10 0a10 	vmov	r0, s0
 80140e8:	4619      	mov	r1, r3
 80140ea:	f7ec f8ed 	bl	80002c8 <__aeabi_dsub>
 80140ee:	ec41 0b10 	vmov	d0, r0, r1
 80140f2:	b005      	add	sp, #20
 80140f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80140f8:	4668      	mov	r0, sp
 80140fa:	f001 fab9 	bl	8015670 <__ieee754_rem_pio2>
 80140fe:	f000 0003 	and.w	r0, r0, #3
 8014102:	2801      	cmp	r0, #1
 8014104:	d007      	beq.n	8014116 <cos+0x56>
 8014106:	2802      	cmp	r0, #2
 8014108:	d012      	beq.n	8014130 <cos+0x70>
 801410a:	b9c0      	cbnz	r0, 801413e <cos+0x7e>
 801410c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014110:	ed9d 0b00 	vldr	d0, [sp]
 8014114:	e7de      	b.n	80140d4 <cos+0x14>
 8014116:	ed9d 1b02 	vldr	d1, [sp, #8]
 801411a:	ed9d 0b00 	vldr	d0, [sp]
 801411e:	f002 f96f 	bl	8016400 <__kernel_sin>
 8014122:	ec53 2b10 	vmov	r2, r3, d0
 8014126:	ee10 0a10 	vmov	r0, s0
 801412a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801412e:	e7de      	b.n	80140ee <cos+0x2e>
 8014130:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014134:	ed9d 0b00 	vldr	d0, [sp]
 8014138:	f001 fd5a 	bl	8015bf0 <__kernel_cos>
 801413c:	e7f1      	b.n	8014122 <cos+0x62>
 801413e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014142:	ed9d 0b00 	vldr	d0, [sp]
 8014146:	2001      	movs	r0, #1
 8014148:	f002 f95a 	bl	8016400 <__kernel_sin>
 801414c:	e7c4      	b.n	80140d8 <cos+0x18>
 801414e:	bf00      	nop
	...
 8014158:	3fe921fb 	.word	0x3fe921fb
 801415c:	7fefffff 	.word	0x7fefffff

08014160 <fabs>:
 8014160:	ec51 0b10 	vmov	r0, r1, d0
 8014164:	ee10 2a10 	vmov	r2, s0
 8014168:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801416c:	ec43 2b10 	vmov	d0, r2, r3
 8014170:	4770      	bx	lr
 8014172:	0000      	movs	r0, r0
 8014174:	0000      	movs	r0, r0
	...

08014178 <sin>:
 8014178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801417a:	ec53 2b10 	vmov	r2, r3, d0
 801417e:	4826      	ldr	r0, [pc, #152]	; (8014218 <sin+0xa0>)
 8014180:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014184:	4281      	cmp	r1, r0
 8014186:	dc07      	bgt.n	8014198 <sin+0x20>
 8014188:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8014210 <sin+0x98>
 801418c:	2000      	movs	r0, #0
 801418e:	f002 f937 	bl	8016400 <__kernel_sin>
 8014192:	ec51 0b10 	vmov	r0, r1, d0
 8014196:	e007      	b.n	80141a8 <sin+0x30>
 8014198:	4820      	ldr	r0, [pc, #128]	; (801421c <sin+0xa4>)
 801419a:	4281      	cmp	r1, r0
 801419c:	dd09      	ble.n	80141b2 <sin+0x3a>
 801419e:	ee10 0a10 	vmov	r0, s0
 80141a2:	4619      	mov	r1, r3
 80141a4:	f7ec f890 	bl	80002c8 <__aeabi_dsub>
 80141a8:	ec41 0b10 	vmov	d0, r0, r1
 80141ac:	b005      	add	sp, #20
 80141ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80141b2:	4668      	mov	r0, sp
 80141b4:	f001 fa5c 	bl	8015670 <__ieee754_rem_pio2>
 80141b8:	f000 0003 	and.w	r0, r0, #3
 80141bc:	2801      	cmp	r0, #1
 80141be:	d008      	beq.n	80141d2 <sin+0x5a>
 80141c0:	2802      	cmp	r0, #2
 80141c2:	d00d      	beq.n	80141e0 <sin+0x68>
 80141c4:	b9d0      	cbnz	r0, 80141fc <sin+0x84>
 80141c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80141ca:	ed9d 0b00 	vldr	d0, [sp]
 80141ce:	2001      	movs	r0, #1
 80141d0:	e7dd      	b.n	801418e <sin+0x16>
 80141d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80141d6:	ed9d 0b00 	vldr	d0, [sp]
 80141da:	f001 fd09 	bl	8015bf0 <__kernel_cos>
 80141de:	e7d8      	b.n	8014192 <sin+0x1a>
 80141e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80141e4:	ed9d 0b00 	vldr	d0, [sp]
 80141e8:	2001      	movs	r0, #1
 80141ea:	f002 f909 	bl	8016400 <__kernel_sin>
 80141ee:	ec53 2b10 	vmov	r2, r3, d0
 80141f2:	ee10 0a10 	vmov	r0, s0
 80141f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80141fa:	e7d5      	b.n	80141a8 <sin+0x30>
 80141fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014200:	ed9d 0b00 	vldr	d0, [sp]
 8014204:	f001 fcf4 	bl	8015bf0 <__kernel_cos>
 8014208:	e7f1      	b.n	80141ee <sin+0x76>
 801420a:	bf00      	nop
 801420c:	f3af 8000 	nop.w
	...
 8014218:	3fe921fb 	.word	0x3fe921fb
 801421c:	7fefffff 	.word	0x7fefffff

08014220 <atan2>:
 8014220:	f000 b96a 	b.w	80144f8 <__ieee754_atan2>

08014224 <fmod>:
 8014224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014226:	ed2d 8b02 	vpush	{d8}
 801422a:	ec57 6b10 	vmov	r6, r7, d0
 801422e:	ec55 4b11 	vmov	r4, r5, d1
 8014232:	f000 fa2b 	bl	801468c <__ieee754_fmod>
 8014236:	4b18      	ldr	r3, [pc, #96]	; (8014298 <fmod+0x74>)
 8014238:	eeb0 8a40 	vmov.f32	s16, s0
 801423c:	eef0 8a60 	vmov.f32	s17, s1
 8014240:	f993 3000 	ldrsb.w	r3, [r3]
 8014244:	3301      	adds	r3, #1
 8014246:	d020      	beq.n	801428a <fmod+0x66>
 8014248:	4622      	mov	r2, r4
 801424a:	462b      	mov	r3, r5
 801424c:	4620      	mov	r0, r4
 801424e:	4629      	mov	r1, r5
 8014250:	f7ec fc8c 	bl	8000b6c <__aeabi_dcmpun>
 8014254:	b9c8      	cbnz	r0, 801428a <fmod+0x66>
 8014256:	4632      	mov	r2, r6
 8014258:	463b      	mov	r3, r7
 801425a:	4630      	mov	r0, r6
 801425c:	4639      	mov	r1, r7
 801425e:	f7ec fc85 	bl	8000b6c <__aeabi_dcmpun>
 8014262:	b990      	cbnz	r0, 801428a <fmod+0x66>
 8014264:	2200      	movs	r2, #0
 8014266:	2300      	movs	r3, #0
 8014268:	4620      	mov	r0, r4
 801426a:	4629      	mov	r1, r5
 801426c:	f7ec fc4c 	bl	8000b08 <__aeabi_dcmpeq>
 8014270:	b158      	cbz	r0, 801428a <fmod+0x66>
 8014272:	f7fc fdbb 	bl	8010dec <__errno>
 8014276:	2321      	movs	r3, #33	; 0x21
 8014278:	6003      	str	r3, [r0, #0]
 801427a:	2200      	movs	r2, #0
 801427c:	2300      	movs	r3, #0
 801427e:	4610      	mov	r0, r2
 8014280:	4619      	mov	r1, r3
 8014282:	f7ec fb03 	bl	800088c <__aeabi_ddiv>
 8014286:	ec41 0b18 	vmov	d8, r0, r1
 801428a:	eeb0 0a48 	vmov.f32	s0, s16
 801428e:	eef0 0a68 	vmov.f32	s1, s17
 8014292:	ecbd 8b02 	vpop	{d8}
 8014296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014298:	2000049c 	.word	0x2000049c
 801429c:	00000000 	.word	0x00000000

080142a0 <log>:
 80142a0:	b538      	push	{r3, r4, r5, lr}
 80142a2:	ed2d 8b02 	vpush	{d8}
 80142a6:	ec55 4b10 	vmov	r4, r5, d0
 80142aa:	f000 fb01 	bl	80148b0 <__ieee754_log>
 80142ae:	4b1e      	ldr	r3, [pc, #120]	; (8014328 <log+0x88>)
 80142b0:	eeb0 8a40 	vmov.f32	s16, s0
 80142b4:	eef0 8a60 	vmov.f32	s17, s1
 80142b8:	f993 3000 	ldrsb.w	r3, [r3]
 80142bc:	3301      	adds	r3, #1
 80142be:	d01a      	beq.n	80142f6 <log+0x56>
 80142c0:	4622      	mov	r2, r4
 80142c2:	462b      	mov	r3, r5
 80142c4:	4620      	mov	r0, r4
 80142c6:	4629      	mov	r1, r5
 80142c8:	f7ec fc50 	bl	8000b6c <__aeabi_dcmpun>
 80142cc:	b998      	cbnz	r0, 80142f6 <log+0x56>
 80142ce:	2200      	movs	r2, #0
 80142d0:	2300      	movs	r3, #0
 80142d2:	4620      	mov	r0, r4
 80142d4:	4629      	mov	r1, r5
 80142d6:	f7ec fc3f 	bl	8000b58 <__aeabi_dcmpgt>
 80142da:	b960      	cbnz	r0, 80142f6 <log+0x56>
 80142dc:	2200      	movs	r2, #0
 80142de:	2300      	movs	r3, #0
 80142e0:	4620      	mov	r0, r4
 80142e2:	4629      	mov	r1, r5
 80142e4:	f7ec fc10 	bl	8000b08 <__aeabi_dcmpeq>
 80142e8:	b160      	cbz	r0, 8014304 <log+0x64>
 80142ea:	f7fc fd7f 	bl	8010dec <__errno>
 80142ee:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8014320 <log+0x80>
 80142f2:	2322      	movs	r3, #34	; 0x22
 80142f4:	6003      	str	r3, [r0, #0]
 80142f6:	eeb0 0a48 	vmov.f32	s0, s16
 80142fa:	eef0 0a68 	vmov.f32	s1, s17
 80142fe:	ecbd 8b02 	vpop	{d8}
 8014302:	bd38      	pop	{r3, r4, r5, pc}
 8014304:	f7fc fd72 	bl	8010dec <__errno>
 8014308:	ecbd 8b02 	vpop	{d8}
 801430c:	2321      	movs	r3, #33	; 0x21
 801430e:	6003      	str	r3, [r0, #0]
 8014310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014314:	4805      	ldr	r0, [pc, #20]	; (801432c <log+0x8c>)
 8014316:	f002 b9bf 	b.w	8016698 <nan>
 801431a:	bf00      	nop
 801431c:	f3af 8000 	nop.w
 8014320:	00000000 	.word	0x00000000
 8014324:	fff00000 	.word	0xfff00000
 8014328:	2000049c 	.word	0x2000049c
 801432c:	08017140 	.word	0x08017140

08014330 <pow>:
 8014330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014334:	ec59 8b10 	vmov	r8, r9, d0
 8014338:	ec57 6b11 	vmov	r6, r7, d1
 801433c:	f000 fc74 	bl	8014c28 <__ieee754_pow>
 8014340:	4b4e      	ldr	r3, [pc, #312]	; (801447c <pow+0x14c>)
 8014342:	f993 3000 	ldrsb.w	r3, [r3]
 8014346:	3301      	adds	r3, #1
 8014348:	ec55 4b10 	vmov	r4, r5, d0
 801434c:	d015      	beq.n	801437a <pow+0x4a>
 801434e:	4632      	mov	r2, r6
 8014350:	463b      	mov	r3, r7
 8014352:	4630      	mov	r0, r6
 8014354:	4639      	mov	r1, r7
 8014356:	f7ec fc09 	bl	8000b6c <__aeabi_dcmpun>
 801435a:	b970      	cbnz	r0, 801437a <pow+0x4a>
 801435c:	4642      	mov	r2, r8
 801435e:	464b      	mov	r3, r9
 8014360:	4640      	mov	r0, r8
 8014362:	4649      	mov	r1, r9
 8014364:	f7ec fc02 	bl	8000b6c <__aeabi_dcmpun>
 8014368:	2200      	movs	r2, #0
 801436a:	2300      	movs	r3, #0
 801436c:	b148      	cbz	r0, 8014382 <pow+0x52>
 801436e:	4630      	mov	r0, r6
 8014370:	4639      	mov	r1, r7
 8014372:	f7ec fbc9 	bl	8000b08 <__aeabi_dcmpeq>
 8014376:	2800      	cmp	r0, #0
 8014378:	d17d      	bne.n	8014476 <pow+0x146>
 801437a:	ec45 4b10 	vmov	d0, r4, r5
 801437e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014382:	4640      	mov	r0, r8
 8014384:	4649      	mov	r1, r9
 8014386:	f7ec fbbf 	bl	8000b08 <__aeabi_dcmpeq>
 801438a:	b1e0      	cbz	r0, 80143c6 <pow+0x96>
 801438c:	2200      	movs	r2, #0
 801438e:	2300      	movs	r3, #0
 8014390:	4630      	mov	r0, r6
 8014392:	4639      	mov	r1, r7
 8014394:	f7ec fbb8 	bl	8000b08 <__aeabi_dcmpeq>
 8014398:	2800      	cmp	r0, #0
 801439a:	d16c      	bne.n	8014476 <pow+0x146>
 801439c:	ec47 6b10 	vmov	d0, r6, r7
 80143a0:	f002 f8ec 	bl	801657c <finite>
 80143a4:	2800      	cmp	r0, #0
 80143a6:	d0e8      	beq.n	801437a <pow+0x4a>
 80143a8:	2200      	movs	r2, #0
 80143aa:	2300      	movs	r3, #0
 80143ac:	4630      	mov	r0, r6
 80143ae:	4639      	mov	r1, r7
 80143b0:	f7ec fbb4 	bl	8000b1c <__aeabi_dcmplt>
 80143b4:	2800      	cmp	r0, #0
 80143b6:	d0e0      	beq.n	801437a <pow+0x4a>
 80143b8:	f7fc fd18 	bl	8010dec <__errno>
 80143bc:	2321      	movs	r3, #33	; 0x21
 80143be:	6003      	str	r3, [r0, #0]
 80143c0:	2400      	movs	r4, #0
 80143c2:	4d2f      	ldr	r5, [pc, #188]	; (8014480 <pow+0x150>)
 80143c4:	e7d9      	b.n	801437a <pow+0x4a>
 80143c6:	ec45 4b10 	vmov	d0, r4, r5
 80143ca:	f002 f8d7 	bl	801657c <finite>
 80143ce:	bbb8      	cbnz	r0, 8014440 <pow+0x110>
 80143d0:	ec49 8b10 	vmov	d0, r8, r9
 80143d4:	f002 f8d2 	bl	801657c <finite>
 80143d8:	b390      	cbz	r0, 8014440 <pow+0x110>
 80143da:	ec47 6b10 	vmov	d0, r6, r7
 80143de:	f002 f8cd 	bl	801657c <finite>
 80143e2:	b368      	cbz	r0, 8014440 <pow+0x110>
 80143e4:	4622      	mov	r2, r4
 80143e6:	462b      	mov	r3, r5
 80143e8:	4620      	mov	r0, r4
 80143ea:	4629      	mov	r1, r5
 80143ec:	f7ec fbbe 	bl	8000b6c <__aeabi_dcmpun>
 80143f0:	b160      	cbz	r0, 801440c <pow+0xdc>
 80143f2:	f7fc fcfb 	bl	8010dec <__errno>
 80143f6:	2321      	movs	r3, #33	; 0x21
 80143f8:	6003      	str	r3, [r0, #0]
 80143fa:	2200      	movs	r2, #0
 80143fc:	2300      	movs	r3, #0
 80143fe:	4610      	mov	r0, r2
 8014400:	4619      	mov	r1, r3
 8014402:	f7ec fa43 	bl	800088c <__aeabi_ddiv>
 8014406:	4604      	mov	r4, r0
 8014408:	460d      	mov	r5, r1
 801440a:	e7b6      	b.n	801437a <pow+0x4a>
 801440c:	f7fc fcee 	bl	8010dec <__errno>
 8014410:	2322      	movs	r3, #34	; 0x22
 8014412:	6003      	str	r3, [r0, #0]
 8014414:	2200      	movs	r2, #0
 8014416:	2300      	movs	r3, #0
 8014418:	4640      	mov	r0, r8
 801441a:	4649      	mov	r1, r9
 801441c:	f7ec fb7e 	bl	8000b1c <__aeabi_dcmplt>
 8014420:	2400      	movs	r4, #0
 8014422:	b158      	cbz	r0, 801443c <pow+0x10c>
 8014424:	ec47 6b10 	vmov	d0, r6, r7
 8014428:	f002 f93e 	bl	80166a8 <rint>
 801442c:	4632      	mov	r2, r6
 801442e:	ec51 0b10 	vmov	r0, r1, d0
 8014432:	463b      	mov	r3, r7
 8014434:	f7ec fb68 	bl	8000b08 <__aeabi_dcmpeq>
 8014438:	2800      	cmp	r0, #0
 801443a:	d0c2      	beq.n	80143c2 <pow+0x92>
 801443c:	4d11      	ldr	r5, [pc, #68]	; (8014484 <pow+0x154>)
 801443e:	e79c      	b.n	801437a <pow+0x4a>
 8014440:	2200      	movs	r2, #0
 8014442:	2300      	movs	r3, #0
 8014444:	4620      	mov	r0, r4
 8014446:	4629      	mov	r1, r5
 8014448:	f7ec fb5e 	bl	8000b08 <__aeabi_dcmpeq>
 801444c:	2800      	cmp	r0, #0
 801444e:	d094      	beq.n	801437a <pow+0x4a>
 8014450:	ec49 8b10 	vmov	d0, r8, r9
 8014454:	f002 f892 	bl	801657c <finite>
 8014458:	2800      	cmp	r0, #0
 801445a:	d08e      	beq.n	801437a <pow+0x4a>
 801445c:	ec47 6b10 	vmov	d0, r6, r7
 8014460:	f002 f88c 	bl	801657c <finite>
 8014464:	2800      	cmp	r0, #0
 8014466:	d088      	beq.n	801437a <pow+0x4a>
 8014468:	f7fc fcc0 	bl	8010dec <__errno>
 801446c:	2322      	movs	r3, #34	; 0x22
 801446e:	6003      	str	r3, [r0, #0]
 8014470:	2400      	movs	r4, #0
 8014472:	2500      	movs	r5, #0
 8014474:	e781      	b.n	801437a <pow+0x4a>
 8014476:	4d04      	ldr	r5, [pc, #16]	; (8014488 <pow+0x158>)
 8014478:	2400      	movs	r4, #0
 801447a:	e77e      	b.n	801437a <pow+0x4a>
 801447c:	2000049c 	.word	0x2000049c
 8014480:	fff00000 	.word	0xfff00000
 8014484:	7ff00000 	.word	0x7ff00000
 8014488:	3ff00000 	.word	0x3ff00000

0801448c <sqrt>:
 801448c:	b538      	push	{r3, r4, r5, lr}
 801448e:	ed2d 8b02 	vpush	{d8}
 8014492:	ec55 4b10 	vmov	r4, r5, d0
 8014496:	f001 faf5 	bl	8015a84 <__ieee754_sqrt>
 801449a:	4b15      	ldr	r3, [pc, #84]	; (80144f0 <sqrt+0x64>)
 801449c:	eeb0 8a40 	vmov.f32	s16, s0
 80144a0:	eef0 8a60 	vmov.f32	s17, s1
 80144a4:	f993 3000 	ldrsb.w	r3, [r3]
 80144a8:	3301      	adds	r3, #1
 80144aa:	d019      	beq.n	80144e0 <sqrt+0x54>
 80144ac:	4622      	mov	r2, r4
 80144ae:	462b      	mov	r3, r5
 80144b0:	4620      	mov	r0, r4
 80144b2:	4629      	mov	r1, r5
 80144b4:	f7ec fb5a 	bl	8000b6c <__aeabi_dcmpun>
 80144b8:	b990      	cbnz	r0, 80144e0 <sqrt+0x54>
 80144ba:	2200      	movs	r2, #0
 80144bc:	2300      	movs	r3, #0
 80144be:	4620      	mov	r0, r4
 80144c0:	4629      	mov	r1, r5
 80144c2:	f7ec fb2b 	bl	8000b1c <__aeabi_dcmplt>
 80144c6:	b158      	cbz	r0, 80144e0 <sqrt+0x54>
 80144c8:	f7fc fc90 	bl	8010dec <__errno>
 80144cc:	2321      	movs	r3, #33	; 0x21
 80144ce:	6003      	str	r3, [r0, #0]
 80144d0:	2200      	movs	r2, #0
 80144d2:	2300      	movs	r3, #0
 80144d4:	4610      	mov	r0, r2
 80144d6:	4619      	mov	r1, r3
 80144d8:	f7ec f9d8 	bl	800088c <__aeabi_ddiv>
 80144dc:	ec41 0b18 	vmov	d8, r0, r1
 80144e0:	eeb0 0a48 	vmov.f32	s0, s16
 80144e4:	eef0 0a68 	vmov.f32	s1, s17
 80144e8:	ecbd 8b02 	vpop	{d8}
 80144ec:	bd38      	pop	{r3, r4, r5, pc}
 80144ee:	bf00      	nop
 80144f0:	2000049c 	.word	0x2000049c
 80144f4:	00000000 	.word	0x00000000

080144f8 <__ieee754_atan2>:
 80144f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144fc:	ec57 6b11 	vmov	r6, r7, d1
 8014500:	4273      	negs	r3, r6
 8014502:	f8df e184 	ldr.w	lr, [pc, #388]	; 8014688 <__ieee754_atan2+0x190>
 8014506:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801450a:	4333      	orrs	r3, r6
 801450c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8014510:	4573      	cmp	r3, lr
 8014512:	ec51 0b10 	vmov	r0, r1, d0
 8014516:	ee11 8a10 	vmov	r8, s2
 801451a:	d80a      	bhi.n	8014532 <__ieee754_atan2+0x3a>
 801451c:	4244      	negs	r4, r0
 801451e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014522:	4304      	orrs	r4, r0
 8014524:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8014528:	4574      	cmp	r4, lr
 801452a:	ee10 9a10 	vmov	r9, s0
 801452e:	468c      	mov	ip, r1
 8014530:	d907      	bls.n	8014542 <__ieee754_atan2+0x4a>
 8014532:	4632      	mov	r2, r6
 8014534:	463b      	mov	r3, r7
 8014536:	f7eb fec9 	bl	80002cc <__adddf3>
 801453a:	ec41 0b10 	vmov	d0, r0, r1
 801453e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014542:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8014546:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801454a:	4334      	orrs	r4, r6
 801454c:	d103      	bne.n	8014556 <__ieee754_atan2+0x5e>
 801454e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014552:	f7ff bc15 	b.w	8013d80 <atan>
 8014556:	17bc      	asrs	r4, r7, #30
 8014558:	f004 0402 	and.w	r4, r4, #2
 801455c:	ea53 0909 	orrs.w	r9, r3, r9
 8014560:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8014564:	d107      	bne.n	8014576 <__ieee754_atan2+0x7e>
 8014566:	2c02      	cmp	r4, #2
 8014568:	d060      	beq.n	801462c <__ieee754_atan2+0x134>
 801456a:	2c03      	cmp	r4, #3
 801456c:	d1e5      	bne.n	801453a <__ieee754_atan2+0x42>
 801456e:	a142      	add	r1, pc, #264	; (adr r1, 8014678 <__ieee754_atan2+0x180>)
 8014570:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014574:	e7e1      	b.n	801453a <__ieee754_atan2+0x42>
 8014576:	ea52 0808 	orrs.w	r8, r2, r8
 801457a:	d106      	bne.n	801458a <__ieee754_atan2+0x92>
 801457c:	f1bc 0f00 	cmp.w	ip, #0
 8014580:	da5f      	bge.n	8014642 <__ieee754_atan2+0x14a>
 8014582:	a13f      	add	r1, pc, #252	; (adr r1, 8014680 <__ieee754_atan2+0x188>)
 8014584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014588:	e7d7      	b.n	801453a <__ieee754_atan2+0x42>
 801458a:	4572      	cmp	r2, lr
 801458c:	d10f      	bne.n	80145ae <__ieee754_atan2+0xb6>
 801458e:	4293      	cmp	r3, r2
 8014590:	f104 34ff 	add.w	r4, r4, #4294967295
 8014594:	d107      	bne.n	80145a6 <__ieee754_atan2+0xae>
 8014596:	2c02      	cmp	r4, #2
 8014598:	d84c      	bhi.n	8014634 <__ieee754_atan2+0x13c>
 801459a:	4b35      	ldr	r3, [pc, #212]	; (8014670 <__ieee754_atan2+0x178>)
 801459c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80145a0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80145a4:	e7c9      	b.n	801453a <__ieee754_atan2+0x42>
 80145a6:	2c02      	cmp	r4, #2
 80145a8:	d848      	bhi.n	801463c <__ieee754_atan2+0x144>
 80145aa:	4b32      	ldr	r3, [pc, #200]	; (8014674 <__ieee754_atan2+0x17c>)
 80145ac:	e7f6      	b.n	801459c <__ieee754_atan2+0xa4>
 80145ae:	4573      	cmp	r3, lr
 80145b0:	d0e4      	beq.n	801457c <__ieee754_atan2+0x84>
 80145b2:	1a9b      	subs	r3, r3, r2
 80145b4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80145b8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80145bc:	da1e      	bge.n	80145fc <__ieee754_atan2+0x104>
 80145be:	2f00      	cmp	r7, #0
 80145c0:	da01      	bge.n	80145c6 <__ieee754_atan2+0xce>
 80145c2:	323c      	adds	r2, #60	; 0x3c
 80145c4:	db1e      	blt.n	8014604 <__ieee754_atan2+0x10c>
 80145c6:	4632      	mov	r2, r6
 80145c8:	463b      	mov	r3, r7
 80145ca:	f7ec f95f 	bl	800088c <__aeabi_ddiv>
 80145ce:	ec41 0b10 	vmov	d0, r0, r1
 80145d2:	f7ff fdc5 	bl	8014160 <fabs>
 80145d6:	f7ff fbd3 	bl	8013d80 <atan>
 80145da:	ec51 0b10 	vmov	r0, r1, d0
 80145de:	2c01      	cmp	r4, #1
 80145e0:	d013      	beq.n	801460a <__ieee754_atan2+0x112>
 80145e2:	2c02      	cmp	r4, #2
 80145e4:	d015      	beq.n	8014612 <__ieee754_atan2+0x11a>
 80145e6:	2c00      	cmp	r4, #0
 80145e8:	d0a7      	beq.n	801453a <__ieee754_atan2+0x42>
 80145ea:	a319      	add	r3, pc, #100	; (adr r3, 8014650 <__ieee754_atan2+0x158>)
 80145ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145f0:	f7eb fe6a 	bl	80002c8 <__aeabi_dsub>
 80145f4:	a318      	add	r3, pc, #96	; (adr r3, 8014658 <__ieee754_atan2+0x160>)
 80145f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145fa:	e014      	b.n	8014626 <__ieee754_atan2+0x12e>
 80145fc:	a118      	add	r1, pc, #96	; (adr r1, 8014660 <__ieee754_atan2+0x168>)
 80145fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014602:	e7ec      	b.n	80145de <__ieee754_atan2+0xe6>
 8014604:	2000      	movs	r0, #0
 8014606:	2100      	movs	r1, #0
 8014608:	e7e9      	b.n	80145de <__ieee754_atan2+0xe6>
 801460a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801460e:	4619      	mov	r1, r3
 8014610:	e793      	b.n	801453a <__ieee754_atan2+0x42>
 8014612:	a30f      	add	r3, pc, #60	; (adr r3, 8014650 <__ieee754_atan2+0x158>)
 8014614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014618:	f7eb fe56 	bl	80002c8 <__aeabi_dsub>
 801461c:	4602      	mov	r2, r0
 801461e:	460b      	mov	r3, r1
 8014620:	a10d      	add	r1, pc, #52	; (adr r1, 8014658 <__ieee754_atan2+0x160>)
 8014622:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014626:	f7eb fe4f 	bl	80002c8 <__aeabi_dsub>
 801462a:	e786      	b.n	801453a <__ieee754_atan2+0x42>
 801462c:	a10a      	add	r1, pc, #40	; (adr r1, 8014658 <__ieee754_atan2+0x160>)
 801462e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014632:	e782      	b.n	801453a <__ieee754_atan2+0x42>
 8014634:	a10c      	add	r1, pc, #48	; (adr r1, 8014668 <__ieee754_atan2+0x170>)
 8014636:	e9d1 0100 	ldrd	r0, r1, [r1]
 801463a:	e77e      	b.n	801453a <__ieee754_atan2+0x42>
 801463c:	2000      	movs	r0, #0
 801463e:	2100      	movs	r1, #0
 8014640:	e77b      	b.n	801453a <__ieee754_atan2+0x42>
 8014642:	a107      	add	r1, pc, #28	; (adr r1, 8014660 <__ieee754_atan2+0x168>)
 8014644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014648:	e777      	b.n	801453a <__ieee754_atan2+0x42>
 801464a:	bf00      	nop
 801464c:	f3af 8000 	nop.w
 8014650:	33145c07 	.word	0x33145c07
 8014654:	3ca1a626 	.word	0x3ca1a626
 8014658:	54442d18 	.word	0x54442d18
 801465c:	400921fb 	.word	0x400921fb
 8014660:	54442d18 	.word	0x54442d18
 8014664:	3ff921fb 	.word	0x3ff921fb
 8014668:	54442d18 	.word	0x54442d18
 801466c:	3fe921fb 	.word	0x3fe921fb
 8014670:	08017290 	.word	0x08017290
 8014674:	080172a8 	.word	0x080172a8
 8014678:	54442d18 	.word	0x54442d18
 801467c:	c00921fb 	.word	0xc00921fb
 8014680:	54442d18 	.word	0x54442d18
 8014684:	bff921fb 	.word	0xbff921fb
 8014688:	7ff00000 	.word	0x7ff00000

0801468c <__ieee754_fmod>:
 801468c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014690:	ec53 2b11 	vmov	r2, r3, d1
 8014694:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8014698:	ea5e 0402 	orrs.w	r4, lr, r2
 801469c:	ec51 0b10 	vmov	r0, r1, d0
 80146a0:	ee11 7a10 	vmov	r7, s2
 80146a4:	ee11 ca10 	vmov	ip, s2
 80146a8:	461e      	mov	r6, r3
 80146aa:	d00d      	beq.n	80146c8 <__ieee754_fmod+0x3c>
 80146ac:	4c7a      	ldr	r4, [pc, #488]	; (8014898 <__ieee754_fmod+0x20c>)
 80146ae:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80146b2:	45a0      	cmp	r8, r4
 80146b4:	4689      	mov	r9, r1
 80146b6:	dc07      	bgt.n	80146c8 <__ieee754_fmod+0x3c>
 80146b8:	4254      	negs	r4, r2
 80146ba:	4d78      	ldr	r5, [pc, #480]	; (801489c <__ieee754_fmod+0x210>)
 80146bc:	4314      	orrs	r4, r2
 80146be:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 80146c2:	42ac      	cmp	r4, r5
 80146c4:	46ab      	mov	fp, r5
 80146c6:	d909      	bls.n	80146dc <__ieee754_fmod+0x50>
 80146c8:	f7eb ffb6 	bl	8000638 <__aeabi_dmul>
 80146cc:	4602      	mov	r2, r0
 80146ce:	460b      	mov	r3, r1
 80146d0:	f7ec f8dc 	bl	800088c <__aeabi_ddiv>
 80146d4:	ec41 0b10 	vmov	d0, r0, r1
 80146d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146dc:	45f0      	cmp	r8, lr
 80146de:	ee10 aa10 	vmov	sl, s0
 80146e2:	ee10 4a10 	vmov	r4, s0
 80146e6:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80146ea:	dc0a      	bgt.n	8014702 <__ieee754_fmod+0x76>
 80146ec:	dbf2      	blt.n	80146d4 <__ieee754_fmod+0x48>
 80146ee:	4290      	cmp	r0, r2
 80146f0:	d3f0      	bcc.n	80146d4 <__ieee754_fmod+0x48>
 80146f2:	d106      	bne.n	8014702 <__ieee754_fmod+0x76>
 80146f4:	4a6a      	ldr	r2, [pc, #424]	; (80148a0 <__ieee754_fmod+0x214>)
 80146f6:	0fed      	lsrs	r5, r5, #31
 80146f8:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80146fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014700:	e7e8      	b.n	80146d4 <__ieee754_fmod+0x48>
 8014702:	ea19 0f0b 	tst.w	r9, fp
 8014706:	d14a      	bne.n	801479e <__ieee754_fmod+0x112>
 8014708:	f1b8 0f00 	cmp.w	r8, #0
 801470c:	d13f      	bne.n	801478e <__ieee754_fmod+0x102>
 801470e:	4965      	ldr	r1, [pc, #404]	; (80148a4 <__ieee754_fmod+0x218>)
 8014710:	4653      	mov	r3, sl
 8014712:	2b00      	cmp	r3, #0
 8014714:	dc38      	bgt.n	8014788 <__ieee754_fmod+0xfc>
 8014716:	4b61      	ldr	r3, [pc, #388]	; (801489c <__ieee754_fmod+0x210>)
 8014718:	4033      	ands	r3, r6
 801471a:	2b00      	cmp	r3, #0
 801471c:	d14f      	bne.n	80147be <__ieee754_fmod+0x132>
 801471e:	f1be 0f00 	cmp.w	lr, #0
 8014722:	d144      	bne.n	80147ae <__ieee754_fmod+0x122>
 8014724:	4a5f      	ldr	r2, [pc, #380]	; (80148a4 <__ieee754_fmod+0x218>)
 8014726:	463b      	mov	r3, r7
 8014728:	2b00      	cmp	r3, #0
 801472a:	dc3d      	bgt.n	80147a8 <__ieee754_fmod+0x11c>
 801472c:	4b5e      	ldr	r3, [pc, #376]	; (80148a8 <__ieee754_fmod+0x21c>)
 801472e:	4299      	cmp	r1, r3
 8014730:	db4a      	blt.n	80147c8 <__ieee754_fmod+0x13c>
 8014732:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801473a:	485b      	ldr	r0, [pc, #364]	; (80148a8 <__ieee754_fmod+0x21c>)
 801473c:	4282      	cmp	r2, r0
 801473e:	db57      	blt.n	80147f0 <__ieee754_fmod+0x164>
 8014740:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8014744:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8014748:	1a89      	subs	r1, r1, r2
 801474a:	1b98      	subs	r0, r3, r6
 801474c:	eba4 070c 	sub.w	r7, r4, ip
 8014750:	2900      	cmp	r1, #0
 8014752:	d164      	bne.n	801481e <__ieee754_fmod+0x192>
 8014754:	4564      	cmp	r4, ip
 8014756:	bf38      	it	cc
 8014758:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801475c:	2800      	cmp	r0, #0
 801475e:	bfa4      	itt	ge
 8014760:	463c      	movge	r4, r7
 8014762:	4603      	movge	r3, r0
 8014764:	ea53 0104 	orrs.w	r1, r3, r4
 8014768:	d0c4      	beq.n	80146f4 <__ieee754_fmod+0x68>
 801476a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801476e:	db6b      	blt.n	8014848 <__ieee754_fmod+0x1bc>
 8014770:	494d      	ldr	r1, [pc, #308]	; (80148a8 <__ieee754_fmod+0x21c>)
 8014772:	428a      	cmp	r2, r1
 8014774:	db6e      	blt.n	8014854 <__ieee754_fmod+0x1c8>
 8014776:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801477a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801477e:	431d      	orrs	r5, r3
 8014780:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8014784:	4620      	mov	r0, r4
 8014786:	e7a5      	b.n	80146d4 <__ieee754_fmod+0x48>
 8014788:	3901      	subs	r1, #1
 801478a:	005b      	lsls	r3, r3, #1
 801478c:	e7c1      	b.n	8014712 <__ieee754_fmod+0x86>
 801478e:	4946      	ldr	r1, [pc, #280]	; (80148a8 <__ieee754_fmod+0x21c>)
 8014790:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8014794:	2b00      	cmp	r3, #0
 8014796:	ddbe      	ble.n	8014716 <__ieee754_fmod+0x8a>
 8014798:	3901      	subs	r1, #1
 801479a:	005b      	lsls	r3, r3, #1
 801479c:	e7fa      	b.n	8014794 <__ieee754_fmod+0x108>
 801479e:	ea4f 5128 	mov.w	r1, r8, asr #20
 80147a2:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80147a6:	e7b6      	b.n	8014716 <__ieee754_fmod+0x8a>
 80147a8:	3a01      	subs	r2, #1
 80147aa:	005b      	lsls	r3, r3, #1
 80147ac:	e7bc      	b.n	8014728 <__ieee754_fmod+0x9c>
 80147ae:	4a3e      	ldr	r2, [pc, #248]	; (80148a8 <__ieee754_fmod+0x21c>)
 80147b0:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	ddb9      	ble.n	801472c <__ieee754_fmod+0xa0>
 80147b8:	3a01      	subs	r2, #1
 80147ba:	005b      	lsls	r3, r3, #1
 80147bc:	e7fa      	b.n	80147b4 <__ieee754_fmod+0x128>
 80147be:	ea4f 522e 	mov.w	r2, lr, asr #20
 80147c2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80147c6:	e7b1      	b.n	801472c <__ieee754_fmod+0xa0>
 80147c8:	1a5c      	subs	r4, r3, r1
 80147ca:	2c1f      	cmp	r4, #31
 80147cc:	dc0a      	bgt.n	80147e4 <__ieee754_fmod+0x158>
 80147ce:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 80147d2:	fa08 f804 	lsl.w	r8, r8, r4
 80147d6:	fa2a f303 	lsr.w	r3, sl, r3
 80147da:	ea43 0308 	orr.w	r3, r3, r8
 80147de:	fa0a f404 	lsl.w	r4, sl, r4
 80147e2:	e7aa      	b.n	801473a <__ieee754_fmod+0xae>
 80147e4:	4b31      	ldr	r3, [pc, #196]	; (80148ac <__ieee754_fmod+0x220>)
 80147e6:	1a5b      	subs	r3, r3, r1
 80147e8:	fa0a f303 	lsl.w	r3, sl, r3
 80147ec:	2400      	movs	r4, #0
 80147ee:	e7a4      	b.n	801473a <__ieee754_fmod+0xae>
 80147f0:	eba0 0c02 	sub.w	ip, r0, r2
 80147f4:	f1bc 0f1f 	cmp.w	ip, #31
 80147f8:	dc0a      	bgt.n	8014810 <__ieee754_fmod+0x184>
 80147fa:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 80147fe:	fa0e fe0c 	lsl.w	lr, lr, ip
 8014802:	fa27 f606 	lsr.w	r6, r7, r6
 8014806:	ea46 060e 	orr.w	r6, r6, lr
 801480a:	fa07 fc0c 	lsl.w	ip, r7, ip
 801480e:	e79b      	b.n	8014748 <__ieee754_fmod+0xbc>
 8014810:	4e26      	ldr	r6, [pc, #152]	; (80148ac <__ieee754_fmod+0x220>)
 8014812:	1ab6      	subs	r6, r6, r2
 8014814:	fa07 f606 	lsl.w	r6, r7, r6
 8014818:	f04f 0c00 	mov.w	ip, #0
 801481c:	e794      	b.n	8014748 <__ieee754_fmod+0xbc>
 801481e:	4564      	cmp	r4, ip
 8014820:	bf38      	it	cc
 8014822:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8014826:	2800      	cmp	r0, #0
 8014828:	da05      	bge.n	8014836 <__ieee754_fmod+0x1aa>
 801482a:	0fe0      	lsrs	r0, r4, #31
 801482c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014830:	0064      	lsls	r4, r4, #1
 8014832:	3901      	subs	r1, #1
 8014834:	e789      	b.n	801474a <__ieee754_fmod+0xbe>
 8014836:	ea50 0307 	orrs.w	r3, r0, r7
 801483a:	f43f af5b 	beq.w	80146f4 <__ieee754_fmod+0x68>
 801483e:	0ffb      	lsrs	r3, r7, #31
 8014840:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8014844:	007c      	lsls	r4, r7, #1
 8014846:	e7f4      	b.n	8014832 <__ieee754_fmod+0x1a6>
 8014848:	0fe1      	lsrs	r1, r4, #31
 801484a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801484e:	0064      	lsls	r4, r4, #1
 8014850:	3a01      	subs	r2, #1
 8014852:	e78a      	b.n	801476a <__ieee754_fmod+0xde>
 8014854:	1a89      	subs	r1, r1, r2
 8014856:	2914      	cmp	r1, #20
 8014858:	dc0a      	bgt.n	8014870 <__ieee754_fmod+0x1e4>
 801485a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801485e:	fa03 f202 	lsl.w	r2, r3, r2
 8014862:	40cc      	lsrs	r4, r1
 8014864:	4322      	orrs	r2, r4
 8014866:	410b      	asrs	r3, r1
 8014868:	ea43 0105 	orr.w	r1, r3, r5
 801486c:	4610      	mov	r0, r2
 801486e:	e731      	b.n	80146d4 <__ieee754_fmod+0x48>
 8014870:	291f      	cmp	r1, #31
 8014872:	dc07      	bgt.n	8014884 <__ieee754_fmod+0x1f8>
 8014874:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8014878:	40cc      	lsrs	r4, r1
 801487a:	fa03 f202 	lsl.w	r2, r3, r2
 801487e:	4322      	orrs	r2, r4
 8014880:	462b      	mov	r3, r5
 8014882:	e7f1      	b.n	8014868 <__ieee754_fmod+0x1dc>
 8014884:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8014888:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801488c:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8014890:	32e2      	adds	r2, #226	; 0xe2
 8014892:	fa43 f202 	asr.w	r2, r3, r2
 8014896:	e7f3      	b.n	8014880 <__ieee754_fmod+0x1f4>
 8014898:	7fefffff 	.word	0x7fefffff
 801489c:	7ff00000 	.word	0x7ff00000
 80148a0:	080172c0 	.word	0x080172c0
 80148a4:	fffffbed 	.word	0xfffffbed
 80148a8:	fffffc02 	.word	0xfffffc02
 80148ac:	fffffbe2 	.word	0xfffffbe2

080148b0 <__ieee754_log>:
 80148b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148b4:	ec51 0b10 	vmov	r0, r1, d0
 80148b8:	ed2d 8b04 	vpush	{d8-d9}
 80148bc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80148c0:	b083      	sub	sp, #12
 80148c2:	460d      	mov	r5, r1
 80148c4:	da29      	bge.n	801491a <__ieee754_log+0x6a>
 80148c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80148ca:	4303      	orrs	r3, r0
 80148cc:	ee10 2a10 	vmov	r2, s0
 80148d0:	d10c      	bne.n	80148ec <__ieee754_log+0x3c>
 80148d2:	49cf      	ldr	r1, [pc, #828]	; (8014c10 <__ieee754_log+0x360>)
 80148d4:	2200      	movs	r2, #0
 80148d6:	2300      	movs	r3, #0
 80148d8:	2000      	movs	r0, #0
 80148da:	f7eb ffd7 	bl	800088c <__aeabi_ddiv>
 80148de:	ec41 0b10 	vmov	d0, r0, r1
 80148e2:	b003      	add	sp, #12
 80148e4:	ecbd 8b04 	vpop	{d8-d9}
 80148e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ec:	2900      	cmp	r1, #0
 80148ee:	da05      	bge.n	80148fc <__ieee754_log+0x4c>
 80148f0:	460b      	mov	r3, r1
 80148f2:	f7eb fce9 	bl	80002c8 <__aeabi_dsub>
 80148f6:	2200      	movs	r2, #0
 80148f8:	2300      	movs	r3, #0
 80148fa:	e7ee      	b.n	80148da <__ieee754_log+0x2a>
 80148fc:	4bc5      	ldr	r3, [pc, #788]	; (8014c14 <__ieee754_log+0x364>)
 80148fe:	2200      	movs	r2, #0
 8014900:	f7eb fe9a 	bl	8000638 <__aeabi_dmul>
 8014904:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8014908:	460d      	mov	r5, r1
 801490a:	4ac3      	ldr	r2, [pc, #780]	; (8014c18 <__ieee754_log+0x368>)
 801490c:	4295      	cmp	r5, r2
 801490e:	dd06      	ble.n	801491e <__ieee754_log+0x6e>
 8014910:	4602      	mov	r2, r0
 8014912:	460b      	mov	r3, r1
 8014914:	f7eb fcda 	bl	80002cc <__adddf3>
 8014918:	e7e1      	b.n	80148de <__ieee754_log+0x2e>
 801491a:	2300      	movs	r3, #0
 801491c:	e7f5      	b.n	801490a <__ieee754_log+0x5a>
 801491e:	152c      	asrs	r4, r5, #20
 8014920:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8014924:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014928:	441c      	add	r4, r3
 801492a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801492e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8014932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014936:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801493a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801493e:	ea42 0105 	orr.w	r1, r2, r5
 8014942:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8014946:	2200      	movs	r2, #0
 8014948:	4bb4      	ldr	r3, [pc, #720]	; (8014c1c <__ieee754_log+0x36c>)
 801494a:	f7eb fcbd 	bl	80002c8 <__aeabi_dsub>
 801494e:	1cab      	adds	r3, r5, #2
 8014950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014954:	2b02      	cmp	r3, #2
 8014956:	4682      	mov	sl, r0
 8014958:	468b      	mov	fp, r1
 801495a:	f04f 0200 	mov.w	r2, #0
 801495e:	dc53      	bgt.n	8014a08 <__ieee754_log+0x158>
 8014960:	2300      	movs	r3, #0
 8014962:	f7ec f8d1 	bl	8000b08 <__aeabi_dcmpeq>
 8014966:	b1d0      	cbz	r0, 801499e <__ieee754_log+0xee>
 8014968:	2c00      	cmp	r4, #0
 801496a:	f000 8122 	beq.w	8014bb2 <__ieee754_log+0x302>
 801496e:	4620      	mov	r0, r4
 8014970:	f7eb fdf8 	bl	8000564 <__aeabi_i2d>
 8014974:	a390      	add	r3, pc, #576	; (adr r3, 8014bb8 <__ieee754_log+0x308>)
 8014976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801497a:	4606      	mov	r6, r0
 801497c:	460f      	mov	r7, r1
 801497e:	f7eb fe5b 	bl	8000638 <__aeabi_dmul>
 8014982:	a38f      	add	r3, pc, #572	; (adr r3, 8014bc0 <__ieee754_log+0x310>)
 8014984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014988:	4604      	mov	r4, r0
 801498a:	460d      	mov	r5, r1
 801498c:	4630      	mov	r0, r6
 801498e:	4639      	mov	r1, r7
 8014990:	f7eb fe52 	bl	8000638 <__aeabi_dmul>
 8014994:	4602      	mov	r2, r0
 8014996:	460b      	mov	r3, r1
 8014998:	4620      	mov	r0, r4
 801499a:	4629      	mov	r1, r5
 801499c:	e7ba      	b.n	8014914 <__ieee754_log+0x64>
 801499e:	a38a      	add	r3, pc, #552	; (adr r3, 8014bc8 <__ieee754_log+0x318>)
 80149a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149a4:	4650      	mov	r0, sl
 80149a6:	4659      	mov	r1, fp
 80149a8:	f7eb fe46 	bl	8000638 <__aeabi_dmul>
 80149ac:	4602      	mov	r2, r0
 80149ae:	460b      	mov	r3, r1
 80149b0:	2000      	movs	r0, #0
 80149b2:	499b      	ldr	r1, [pc, #620]	; (8014c20 <__ieee754_log+0x370>)
 80149b4:	f7eb fc88 	bl	80002c8 <__aeabi_dsub>
 80149b8:	4652      	mov	r2, sl
 80149ba:	4606      	mov	r6, r0
 80149bc:	460f      	mov	r7, r1
 80149be:	465b      	mov	r3, fp
 80149c0:	4650      	mov	r0, sl
 80149c2:	4659      	mov	r1, fp
 80149c4:	f7eb fe38 	bl	8000638 <__aeabi_dmul>
 80149c8:	4602      	mov	r2, r0
 80149ca:	460b      	mov	r3, r1
 80149cc:	4630      	mov	r0, r6
 80149ce:	4639      	mov	r1, r7
 80149d0:	f7eb fe32 	bl	8000638 <__aeabi_dmul>
 80149d4:	4606      	mov	r6, r0
 80149d6:	460f      	mov	r7, r1
 80149d8:	b914      	cbnz	r4, 80149e0 <__ieee754_log+0x130>
 80149da:	4632      	mov	r2, r6
 80149dc:	463b      	mov	r3, r7
 80149de:	e0a2      	b.n	8014b26 <__ieee754_log+0x276>
 80149e0:	4620      	mov	r0, r4
 80149e2:	f7eb fdbf 	bl	8000564 <__aeabi_i2d>
 80149e6:	a374      	add	r3, pc, #464	; (adr r3, 8014bb8 <__ieee754_log+0x308>)
 80149e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ec:	4680      	mov	r8, r0
 80149ee:	4689      	mov	r9, r1
 80149f0:	f7eb fe22 	bl	8000638 <__aeabi_dmul>
 80149f4:	a372      	add	r3, pc, #456	; (adr r3, 8014bc0 <__ieee754_log+0x310>)
 80149f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149fa:	4604      	mov	r4, r0
 80149fc:	460d      	mov	r5, r1
 80149fe:	4640      	mov	r0, r8
 8014a00:	4649      	mov	r1, r9
 8014a02:	f7eb fe19 	bl	8000638 <__aeabi_dmul>
 8014a06:	e0a7      	b.n	8014b58 <__ieee754_log+0x2a8>
 8014a08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014a0c:	f7eb fc5e 	bl	80002cc <__adddf3>
 8014a10:	4602      	mov	r2, r0
 8014a12:	460b      	mov	r3, r1
 8014a14:	4650      	mov	r0, sl
 8014a16:	4659      	mov	r1, fp
 8014a18:	f7eb ff38 	bl	800088c <__aeabi_ddiv>
 8014a1c:	ec41 0b18 	vmov	d8, r0, r1
 8014a20:	4620      	mov	r0, r4
 8014a22:	f7eb fd9f 	bl	8000564 <__aeabi_i2d>
 8014a26:	ec53 2b18 	vmov	r2, r3, d8
 8014a2a:	ec41 0b19 	vmov	d9, r0, r1
 8014a2e:	ec51 0b18 	vmov	r0, r1, d8
 8014a32:	f7eb fe01 	bl	8000638 <__aeabi_dmul>
 8014a36:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8014a3a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8014a3e:	9301      	str	r3, [sp, #4]
 8014a40:	4602      	mov	r2, r0
 8014a42:	460b      	mov	r3, r1
 8014a44:	4680      	mov	r8, r0
 8014a46:	4689      	mov	r9, r1
 8014a48:	f7eb fdf6 	bl	8000638 <__aeabi_dmul>
 8014a4c:	a360      	add	r3, pc, #384	; (adr r3, 8014bd0 <__ieee754_log+0x320>)
 8014a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a52:	4606      	mov	r6, r0
 8014a54:	460f      	mov	r7, r1
 8014a56:	f7eb fdef 	bl	8000638 <__aeabi_dmul>
 8014a5a:	a35f      	add	r3, pc, #380	; (adr r3, 8014bd8 <__ieee754_log+0x328>)
 8014a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a60:	f7eb fc34 	bl	80002cc <__adddf3>
 8014a64:	4632      	mov	r2, r6
 8014a66:	463b      	mov	r3, r7
 8014a68:	f7eb fde6 	bl	8000638 <__aeabi_dmul>
 8014a6c:	a35c      	add	r3, pc, #368	; (adr r3, 8014be0 <__ieee754_log+0x330>)
 8014a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a72:	f7eb fc2b 	bl	80002cc <__adddf3>
 8014a76:	4632      	mov	r2, r6
 8014a78:	463b      	mov	r3, r7
 8014a7a:	f7eb fddd 	bl	8000638 <__aeabi_dmul>
 8014a7e:	a35a      	add	r3, pc, #360	; (adr r3, 8014be8 <__ieee754_log+0x338>)
 8014a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a84:	f7eb fc22 	bl	80002cc <__adddf3>
 8014a88:	4642      	mov	r2, r8
 8014a8a:	464b      	mov	r3, r9
 8014a8c:	f7eb fdd4 	bl	8000638 <__aeabi_dmul>
 8014a90:	a357      	add	r3, pc, #348	; (adr r3, 8014bf0 <__ieee754_log+0x340>)
 8014a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a96:	4680      	mov	r8, r0
 8014a98:	4689      	mov	r9, r1
 8014a9a:	4630      	mov	r0, r6
 8014a9c:	4639      	mov	r1, r7
 8014a9e:	f7eb fdcb 	bl	8000638 <__aeabi_dmul>
 8014aa2:	a355      	add	r3, pc, #340	; (adr r3, 8014bf8 <__ieee754_log+0x348>)
 8014aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aa8:	f7eb fc10 	bl	80002cc <__adddf3>
 8014aac:	4632      	mov	r2, r6
 8014aae:	463b      	mov	r3, r7
 8014ab0:	f7eb fdc2 	bl	8000638 <__aeabi_dmul>
 8014ab4:	a352      	add	r3, pc, #328	; (adr r3, 8014c00 <__ieee754_log+0x350>)
 8014ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aba:	f7eb fc07 	bl	80002cc <__adddf3>
 8014abe:	4632      	mov	r2, r6
 8014ac0:	463b      	mov	r3, r7
 8014ac2:	f7eb fdb9 	bl	8000638 <__aeabi_dmul>
 8014ac6:	460b      	mov	r3, r1
 8014ac8:	4602      	mov	r2, r0
 8014aca:	4649      	mov	r1, r9
 8014acc:	4640      	mov	r0, r8
 8014ace:	f7eb fbfd 	bl	80002cc <__adddf3>
 8014ad2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8014ad6:	9b01      	ldr	r3, [sp, #4]
 8014ad8:	3551      	adds	r5, #81	; 0x51
 8014ada:	431d      	orrs	r5, r3
 8014adc:	2d00      	cmp	r5, #0
 8014ade:	4680      	mov	r8, r0
 8014ae0:	4689      	mov	r9, r1
 8014ae2:	dd48      	ble.n	8014b76 <__ieee754_log+0x2c6>
 8014ae4:	4b4e      	ldr	r3, [pc, #312]	; (8014c20 <__ieee754_log+0x370>)
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	4650      	mov	r0, sl
 8014aea:	4659      	mov	r1, fp
 8014aec:	f7eb fda4 	bl	8000638 <__aeabi_dmul>
 8014af0:	4652      	mov	r2, sl
 8014af2:	465b      	mov	r3, fp
 8014af4:	f7eb fda0 	bl	8000638 <__aeabi_dmul>
 8014af8:	4602      	mov	r2, r0
 8014afa:	460b      	mov	r3, r1
 8014afc:	4606      	mov	r6, r0
 8014afe:	460f      	mov	r7, r1
 8014b00:	4640      	mov	r0, r8
 8014b02:	4649      	mov	r1, r9
 8014b04:	f7eb fbe2 	bl	80002cc <__adddf3>
 8014b08:	ec53 2b18 	vmov	r2, r3, d8
 8014b0c:	f7eb fd94 	bl	8000638 <__aeabi_dmul>
 8014b10:	4680      	mov	r8, r0
 8014b12:	4689      	mov	r9, r1
 8014b14:	b964      	cbnz	r4, 8014b30 <__ieee754_log+0x280>
 8014b16:	4602      	mov	r2, r0
 8014b18:	460b      	mov	r3, r1
 8014b1a:	4630      	mov	r0, r6
 8014b1c:	4639      	mov	r1, r7
 8014b1e:	f7eb fbd3 	bl	80002c8 <__aeabi_dsub>
 8014b22:	4602      	mov	r2, r0
 8014b24:	460b      	mov	r3, r1
 8014b26:	4650      	mov	r0, sl
 8014b28:	4659      	mov	r1, fp
 8014b2a:	f7eb fbcd 	bl	80002c8 <__aeabi_dsub>
 8014b2e:	e6d6      	b.n	80148de <__ieee754_log+0x2e>
 8014b30:	a321      	add	r3, pc, #132	; (adr r3, 8014bb8 <__ieee754_log+0x308>)
 8014b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b36:	ec51 0b19 	vmov	r0, r1, d9
 8014b3a:	f7eb fd7d 	bl	8000638 <__aeabi_dmul>
 8014b3e:	a320      	add	r3, pc, #128	; (adr r3, 8014bc0 <__ieee754_log+0x310>)
 8014b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b44:	4604      	mov	r4, r0
 8014b46:	460d      	mov	r5, r1
 8014b48:	ec51 0b19 	vmov	r0, r1, d9
 8014b4c:	f7eb fd74 	bl	8000638 <__aeabi_dmul>
 8014b50:	4642      	mov	r2, r8
 8014b52:	464b      	mov	r3, r9
 8014b54:	f7eb fbba 	bl	80002cc <__adddf3>
 8014b58:	4602      	mov	r2, r0
 8014b5a:	460b      	mov	r3, r1
 8014b5c:	4630      	mov	r0, r6
 8014b5e:	4639      	mov	r1, r7
 8014b60:	f7eb fbb2 	bl	80002c8 <__aeabi_dsub>
 8014b64:	4652      	mov	r2, sl
 8014b66:	465b      	mov	r3, fp
 8014b68:	f7eb fbae 	bl	80002c8 <__aeabi_dsub>
 8014b6c:	4602      	mov	r2, r0
 8014b6e:	460b      	mov	r3, r1
 8014b70:	4620      	mov	r0, r4
 8014b72:	4629      	mov	r1, r5
 8014b74:	e7d9      	b.n	8014b2a <__ieee754_log+0x27a>
 8014b76:	4602      	mov	r2, r0
 8014b78:	460b      	mov	r3, r1
 8014b7a:	4650      	mov	r0, sl
 8014b7c:	4659      	mov	r1, fp
 8014b7e:	f7eb fba3 	bl	80002c8 <__aeabi_dsub>
 8014b82:	ec53 2b18 	vmov	r2, r3, d8
 8014b86:	f7eb fd57 	bl	8000638 <__aeabi_dmul>
 8014b8a:	4606      	mov	r6, r0
 8014b8c:	460f      	mov	r7, r1
 8014b8e:	2c00      	cmp	r4, #0
 8014b90:	f43f af23 	beq.w	80149da <__ieee754_log+0x12a>
 8014b94:	a308      	add	r3, pc, #32	; (adr r3, 8014bb8 <__ieee754_log+0x308>)
 8014b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b9a:	ec51 0b19 	vmov	r0, r1, d9
 8014b9e:	f7eb fd4b 	bl	8000638 <__aeabi_dmul>
 8014ba2:	a307      	add	r3, pc, #28	; (adr r3, 8014bc0 <__ieee754_log+0x310>)
 8014ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ba8:	4604      	mov	r4, r0
 8014baa:	460d      	mov	r5, r1
 8014bac:	ec51 0b19 	vmov	r0, r1, d9
 8014bb0:	e727      	b.n	8014a02 <__ieee754_log+0x152>
 8014bb2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8014c08 <__ieee754_log+0x358>
 8014bb6:	e694      	b.n	80148e2 <__ieee754_log+0x32>
 8014bb8:	fee00000 	.word	0xfee00000
 8014bbc:	3fe62e42 	.word	0x3fe62e42
 8014bc0:	35793c76 	.word	0x35793c76
 8014bc4:	3dea39ef 	.word	0x3dea39ef
 8014bc8:	55555555 	.word	0x55555555
 8014bcc:	3fd55555 	.word	0x3fd55555
 8014bd0:	df3e5244 	.word	0xdf3e5244
 8014bd4:	3fc2f112 	.word	0x3fc2f112
 8014bd8:	96cb03de 	.word	0x96cb03de
 8014bdc:	3fc74664 	.word	0x3fc74664
 8014be0:	94229359 	.word	0x94229359
 8014be4:	3fd24924 	.word	0x3fd24924
 8014be8:	55555593 	.word	0x55555593
 8014bec:	3fe55555 	.word	0x3fe55555
 8014bf0:	d078c69f 	.word	0xd078c69f
 8014bf4:	3fc39a09 	.word	0x3fc39a09
 8014bf8:	1d8e78af 	.word	0x1d8e78af
 8014bfc:	3fcc71c5 	.word	0x3fcc71c5
 8014c00:	9997fa04 	.word	0x9997fa04
 8014c04:	3fd99999 	.word	0x3fd99999
	...
 8014c10:	c3500000 	.word	0xc3500000
 8014c14:	43500000 	.word	0x43500000
 8014c18:	7fefffff 	.word	0x7fefffff
 8014c1c:	3ff00000 	.word	0x3ff00000
 8014c20:	3fe00000 	.word	0x3fe00000
 8014c24:	00000000 	.word	0x00000000

08014c28 <__ieee754_pow>:
 8014c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c2c:	ed2d 8b06 	vpush	{d8-d10}
 8014c30:	b08d      	sub	sp, #52	; 0x34
 8014c32:	ed8d 1b02 	vstr	d1, [sp, #8]
 8014c36:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8014c3a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8014c3e:	ea56 0100 	orrs.w	r1, r6, r0
 8014c42:	ec53 2b10 	vmov	r2, r3, d0
 8014c46:	f000 84d1 	beq.w	80155ec <__ieee754_pow+0x9c4>
 8014c4a:	497f      	ldr	r1, [pc, #508]	; (8014e48 <__ieee754_pow+0x220>)
 8014c4c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8014c50:	428c      	cmp	r4, r1
 8014c52:	ee10 8a10 	vmov	r8, s0
 8014c56:	4699      	mov	r9, r3
 8014c58:	dc09      	bgt.n	8014c6e <__ieee754_pow+0x46>
 8014c5a:	d103      	bne.n	8014c64 <__ieee754_pow+0x3c>
 8014c5c:	b97a      	cbnz	r2, 8014c7e <__ieee754_pow+0x56>
 8014c5e:	42a6      	cmp	r6, r4
 8014c60:	dd02      	ble.n	8014c68 <__ieee754_pow+0x40>
 8014c62:	e00c      	b.n	8014c7e <__ieee754_pow+0x56>
 8014c64:	428e      	cmp	r6, r1
 8014c66:	dc02      	bgt.n	8014c6e <__ieee754_pow+0x46>
 8014c68:	428e      	cmp	r6, r1
 8014c6a:	d110      	bne.n	8014c8e <__ieee754_pow+0x66>
 8014c6c:	b178      	cbz	r0, 8014c8e <__ieee754_pow+0x66>
 8014c6e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014c72:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014c76:	ea54 0308 	orrs.w	r3, r4, r8
 8014c7a:	f000 84b7 	beq.w	80155ec <__ieee754_pow+0x9c4>
 8014c7e:	4873      	ldr	r0, [pc, #460]	; (8014e4c <__ieee754_pow+0x224>)
 8014c80:	b00d      	add	sp, #52	; 0x34
 8014c82:	ecbd 8b06 	vpop	{d8-d10}
 8014c86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c8a:	f001 bd05 	b.w	8016698 <nan>
 8014c8e:	f1b9 0f00 	cmp.w	r9, #0
 8014c92:	da36      	bge.n	8014d02 <__ieee754_pow+0xda>
 8014c94:	496e      	ldr	r1, [pc, #440]	; (8014e50 <__ieee754_pow+0x228>)
 8014c96:	428e      	cmp	r6, r1
 8014c98:	dc51      	bgt.n	8014d3e <__ieee754_pow+0x116>
 8014c9a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8014c9e:	428e      	cmp	r6, r1
 8014ca0:	f340 84af 	ble.w	8015602 <__ieee754_pow+0x9da>
 8014ca4:	1531      	asrs	r1, r6, #20
 8014ca6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014caa:	2914      	cmp	r1, #20
 8014cac:	dd0f      	ble.n	8014cce <__ieee754_pow+0xa6>
 8014cae:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8014cb2:	fa20 fc01 	lsr.w	ip, r0, r1
 8014cb6:	fa0c f101 	lsl.w	r1, ip, r1
 8014cba:	4281      	cmp	r1, r0
 8014cbc:	f040 84a1 	bne.w	8015602 <__ieee754_pow+0x9da>
 8014cc0:	f00c 0c01 	and.w	ip, ip, #1
 8014cc4:	f1cc 0102 	rsb	r1, ip, #2
 8014cc8:	9100      	str	r1, [sp, #0]
 8014cca:	b180      	cbz	r0, 8014cee <__ieee754_pow+0xc6>
 8014ccc:	e059      	b.n	8014d82 <__ieee754_pow+0x15a>
 8014cce:	2800      	cmp	r0, #0
 8014cd0:	d155      	bne.n	8014d7e <__ieee754_pow+0x156>
 8014cd2:	f1c1 0114 	rsb	r1, r1, #20
 8014cd6:	fa46 fc01 	asr.w	ip, r6, r1
 8014cda:	fa0c f101 	lsl.w	r1, ip, r1
 8014cde:	42b1      	cmp	r1, r6
 8014ce0:	f040 848c 	bne.w	80155fc <__ieee754_pow+0x9d4>
 8014ce4:	f00c 0c01 	and.w	ip, ip, #1
 8014ce8:	f1cc 0102 	rsb	r1, ip, #2
 8014cec:	9100      	str	r1, [sp, #0]
 8014cee:	4959      	ldr	r1, [pc, #356]	; (8014e54 <__ieee754_pow+0x22c>)
 8014cf0:	428e      	cmp	r6, r1
 8014cf2:	d12d      	bne.n	8014d50 <__ieee754_pow+0x128>
 8014cf4:	2f00      	cmp	r7, #0
 8014cf6:	da79      	bge.n	8014dec <__ieee754_pow+0x1c4>
 8014cf8:	4956      	ldr	r1, [pc, #344]	; (8014e54 <__ieee754_pow+0x22c>)
 8014cfa:	2000      	movs	r0, #0
 8014cfc:	f7eb fdc6 	bl	800088c <__aeabi_ddiv>
 8014d00:	e016      	b.n	8014d30 <__ieee754_pow+0x108>
 8014d02:	2100      	movs	r1, #0
 8014d04:	9100      	str	r1, [sp, #0]
 8014d06:	2800      	cmp	r0, #0
 8014d08:	d13b      	bne.n	8014d82 <__ieee754_pow+0x15a>
 8014d0a:	494f      	ldr	r1, [pc, #316]	; (8014e48 <__ieee754_pow+0x220>)
 8014d0c:	428e      	cmp	r6, r1
 8014d0e:	d1ee      	bne.n	8014cee <__ieee754_pow+0xc6>
 8014d10:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014d14:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014d18:	ea53 0308 	orrs.w	r3, r3, r8
 8014d1c:	f000 8466 	beq.w	80155ec <__ieee754_pow+0x9c4>
 8014d20:	4b4d      	ldr	r3, [pc, #308]	; (8014e58 <__ieee754_pow+0x230>)
 8014d22:	429c      	cmp	r4, r3
 8014d24:	dd0d      	ble.n	8014d42 <__ieee754_pow+0x11a>
 8014d26:	2f00      	cmp	r7, #0
 8014d28:	f280 8464 	bge.w	80155f4 <__ieee754_pow+0x9cc>
 8014d2c:	2000      	movs	r0, #0
 8014d2e:	2100      	movs	r1, #0
 8014d30:	ec41 0b10 	vmov	d0, r0, r1
 8014d34:	b00d      	add	sp, #52	; 0x34
 8014d36:	ecbd 8b06 	vpop	{d8-d10}
 8014d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d3e:	2102      	movs	r1, #2
 8014d40:	e7e0      	b.n	8014d04 <__ieee754_pow+0xdc>
 8014d42:	2f00      	cmp	r7, #0
 8014d44:	daf2      	bge.n	8014d2c <__ieee754_pow+0x104>
 8014d46:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8014d4a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014d4e:	e7ef      	b.n	8014d30 <__ieee754_pow+0x108>
 8014d50:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8014d54:	d104      	bne.n	8014d60 <__ieee754_pow+0x138>
 8014d56:	4610      	mov	r0, r2
 8014d58:	4619      	mov	r1, r3
 8014d5a:	f7eb fc6d 	bl	8000638 <__aeabi_dmul>
 8014d5e:	e7e7      	b.n	8014d30 <__ieee754_pow+0x108>
 8014d60:	493e      	ldr	r1, [pc, #248]	; (8014e5c <__ieee754_pow+0x234>)
 8014d62:	428f      	cmp	r7, r1
 8014d64:	d10d      	bne.n	8014d82 <__ieee754_pow+0x15a>
 8014d66:	f1b9 0f00 	cmp.w	r9, #0
 8014d6a:	db0a      	blt.n	8014d82 <__ieee754_pow+0x15a>
 8014d6c:	ec43 2b10 	vmov	d0, r2, r3
 8014d70:	b00d      	add	sp, #52	; 0x34
 8014d72:	ecbd 8b06 	vpop	{d8-d10}
 8014d76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d7a:	f000 be83 	b.w	8015a84 <__ieee754_sqrt>
 8014d7e:	2100      	movs	r1, #0
 8014d80:	9100      	str	r1, [sp, #0]
 8014d82:	ec43 2b10 	vmov	d0, r2, r3
 8014d86:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014d8a:	f7ff f9e9 	bl	8014160 <fabs>
 8014d8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d92:	ec51 0b10 	vmov	r0, r1, d0
 8014d96:	f1b8 0f00 	cmp.w	r8, #0
 8014d9a:	d12a      	bne.n	8014df2 <__ieee754_pow+0x1ca>
 8014d9c:	b12c      	cbz	r4, 8014daa <__ieee754_pow+0x182>
 8014d9e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8014e54 <__ieee754_pow+0x22c>
 8014da2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8014da6:	45e6      	cmp	lr, ip
 8014da8:	d123      	bne.n	8014df2 <__ieee754_pow+0x1ca>
 8014daa:	2f00      	cmp	r7, #0
 8014dac:	da05      	bge.n	8014dba <__ieee754_pow+0x192>
 8014dae:	4602      	mov	r2, r0
 8014db0:	460b      	mov	r3, r1
 8014db2:	2000      	movs	r0, #0
 8014db4:	4927      	ldr	r1, [pc, #156]	; (8014e54 <__ieee754_pow+0x22c>)
 8014db6:	f7eb fd69 	bl	800088c <__aeabi_ddiv>
 8014dba:	f1b9 0f00 	cmp.w	r9, #0
 8014dbe:	dab7      	bge.n	8014d30 <__ieee754_pow+0x108>
 8014dc0:	9b00      	ldr	r3, [sp, #0]
 8014dc2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014dc6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014dca:	4323      	orrs	r3, r4
 8014dcc:	d108      	bne.n	8014de0 <__ieee754_pow+0x1b8>
 8014dce:	4602      	mov	r2, r0
 8014dd0:	460b      	mov	r3, r1
 8014dd2:	4610      	mov	r0, r2
 8014dd4:	4619      	mov	r1, r3
 8014dd6:	f7eb fa77 	bl	80002c8 <__aeabi_dsub>
 8014dda:	4602      	mov	r2, r0
 8014ddc:	460b      	mov	r3, r1
 8014dde:	e78d      	b.n	8014cfc <__ieee754_pow+0xd4>
 8014de0:	9b00      	ldr	r3, [sp, #0]
 8014de2:	2b01      	cmp	r3, #1
 8014de4:	d1a4      	bne.n	8014d30 <__ieee754_pow+0x108>
 8014de6:	4602      	mov	r2, r0
 8014de8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014dec:	4610      	mov	r0, r2
 8014dee:	4619      	mov	r1, r3
 8014df0:	e79e      	b.n	8014d30 <__ieee754_pow+0x108>
 8014df2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8014df6:	f10c 35ff 	add.w	r5, ip, #4294967295
 8014dfa:	950a      	str	r5, [sp, #40]	; 0x28
 8014dfc:	9d00      	ldr	r5, [sp, #0]
 8014dfe:	46ac      	mov	ip, r5
 8014e00:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8014e02:	ea5c 0505 	orrs.w	r5, ip, r5
 8014e06:	d0e4      	beq.n	8014dd2 <__ieee754_pow+0x1aa>
 8014e08:	4b15      	ldr	r3, [pc, #84]	; (8014e60 <__ieee754_pow+0x238>)
 8014e0a:	429e      	cmp	r6, r3
 8014e0c:	f340 80fc 	ble.w	8015008 <__ieee754_pow+0x3e0>
 8014e10:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014e14:	429e      	cmp	r6, r3
 8014e16:	4b10      	ldr	r3, [pc, #64]	; (8014e58 <__ieee754_pow+0x230>)
 8014e18:	dd07      	ble.n	8014e2a <__ieee754_pow+0x202>
 8014e1a:	429c      	cmp	r4, r3
 8014e1c:	dc0a      	bgt.n	8014e34 <__ieee754_pow+0x20c>
 8014e1e:	2f00      	cmp	r7, #0
 8014e20:	da84      	bge.n	8014d2c <__ieee754_pow+0x104>
 8014e22:	a307      	add	r3, pc, #28	; (adr r3, 8014e40 <__ieee754_pow+0x218>)
 8014e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e28:	e795      	b.n	8014d56 <__ieee754_pow+0x12e>
 8014e2a:	429c      	cmp	r4, r3
 8014e2c:	dbf7      	blt.n	8014e1e <__ieee754_pow+0x1f6>
 8014e2e:	4b09      	ldr	r3, [pc, #36]	; (8014e54 <__ieee754_pow+0x22c>)
 8014e30:	429c      	cmp	r4, r3
 8014e32:	dd17      	ble.n	8014e64 <__ieee754_pow+0x23c>
 8014e34:	2f00      	cmp	r7, #0
 8014e36:	dcf4      	bgt.n	8014e22 <__ieee754_pow+0x1fa>
 8014e38:	e778      	b.n	8014d2c <__ieee754_pow+0x104>
 8014e3a:	bf00      	nop
 8014e3c:	f3af 8000 	nop.w
 8014e40:	8800759c 	.word	0x8800759c
 8014e44:	7e37e43c 	.word	0x7e37e43c
 8014e48:	7ff00000 	.word	0x7ff00000
 8014e4c:	08017140 	.word	0x08017140
 8014e50:	433fffff 	.word	0x433fffff
 8014e54:	3ff00000 	.word	0x3ff00000
 8014e58:	3fefffff 	.word	0x3fefffff
 8014e5c:	3fe00000 	.word	0x3fe00000
 8014e60:	41e00000 	.word	0x41e00000
 8014e64:	4b64      	ldr	r3, [pc, #400]	; (8014ff8 <__ieee754_pow+0x3d0>)
 8014e66:	2200      	movs	r2, #0
 8014e68:	f7eb fa2e 	bl	80002c8 <__aeabi_dsub>
 8014e6c:	a356      	add	r3, pc, #344	; (adr r3, 8014fc8 <__ieee754_pow+0x3a0>)
 8014e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e72:	4604      	mov	r4, r0
 8014e74:	460d      	mov	r5, r1
 8014e76:	f7eb fbdf 	bl	8000638 <__aeabi_dmul>
 8014e7a:	a355      	add	r3, pc, #340	; (adr r3, 8014fd0 <__ieee754_pow+0x3a8>)
 8014e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e80:	4606      	mov	r6, r0
 8014e82:	460f      	mov	r7, r1
 8014e84:	4620      	mov	r0, r4
 8014e86:	4629      	mov	r1, r5
 8014e88:	f7eb fbd6 	bl	8000638 <__aeabi_dmul>
 8014e8c:	4b5b      	ldr	r3, [pc, #364]	; (8014ffc <__ieee754_pow+0x3d4>)
 8014e8e:	4682      	mov	sl, r0
 8014e90:	468b      	mov	fp, r1
 8014e92:	2200      	movs	r2, #0
 8014e94:	4620      	mov	r0, r4
 8014e96:	4629      	mov	r1, r5
 8014e98:	f7eb fbce 	bl	8000638 <__aeabi_dmul>
 8014e9c:	4602      	mov	r2, r0
 8014e9e:	460b      	mov	r3, r1
 8014ea0:	a14d      	add	r1, pc, #308	; (adr r1, 8014fd8 <__ieee754_pow+0x3b0>)
 8014ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ea6:	f7eb fa0f 	bl	80002c8 <__aeabi_dsub>
 8014eaa:	4622      	mov	r2, r4
 8014eac:	462b      	mov	r3, r5
 8014eae:	f7eb fbc3 	bl	8000638 <__aeabi_dmul>
 8014eb2:	4602      	mov	r2, r0
 8014eb4:	460b      	mov	r3, r1
 8014eb6:	2000      	movs	r0, #0
 8014eb8:	4951      	ldr	r1, [pc, #324]	; (8015000 <__ieee754_pow+0x3d8>)
 8014eba:	f7eb fa05 	bl	80002c8 <__aeabi_dsub>
 8014ebe:	4622      	mov	r2, r4
 8014ec0:	4680      	mov	r8, r0
 8014ec2:	4689      	mov	r9, r1
 8014ec4:	462b      	mov	r3, r5
 8014ec6:	4620      	mov	r0, r4
 8014ec8:	4629      	mov	r1, r5
 8014eca:	f7eb fbb5 	bl	8000638 <__aeabi_dmul>
 8014ece:	4602      	mov	r2, r0
 8014ed0:	460b      	mov	r3, r1
 8014ed2:	4640      	mov	r0, r8
 8014ed4:	4649      	mov	r1, r9
 8014ed6:	f7eb fbaf 	bl	8000638 <__aeabi_dmul>
 8014eda:	a341      	add	r3, pc, #260	; (adr r3, 8014fe0 <__ieee754_pow+0x3b8>)
 8014edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ee0:	f7eb fbaa 	bl	8000638 <__aeabi_dmul>
 8014ee4:	4602      	mov	r2, r0
 8014ee6:	460b      	mov	r3, r1
 8014ee8:	4650      	mov	r0, sl
 8014eea:	4659      	mov	r1, fp
 8014eec:	f7eb f9ec 	bl	80002c8 <__aeabi_dsub>
 8014ef0:	4602      	mov	r2, r0
 8014ef2:	460b      	mov	r3, r1
 8014ef4:	4680      	mov	r8, r0
 8014ef6:	4689      	mov	r9, r1
 8014ef8:	4630      	mov	r0, r6
 8014efa:	4639      	mov	r1, r7
 8014efc:	f7eb f9e6 	bl	80002cc <__adddf3>
 8014f00:	2400      	movs	r4, #0
 8014f02:	4632      	mov	r2, r6
 8014f04:	463b      	mov	r3, r7
 8014f06:	4620      	mov	r0, r4
 8014f08:	460d      	mov	r5, r1
 8014f0a:	f7eb f9dd 	bl	80002c8 <__aeabi_dsub>
 8014f0e:	4602      	mov	r2, r0
 8014f10:	460b      	mov	r3, r1
 8014f12:	4640      	mov	r0, r8
 8014f14:	4649      	mov	r1, r9
 8014f16:	f7eb f9d7 	bl	80002c8 <__aeabi_dsub>
 8014f1a:	9b00      	ldr	r3, [sp, #0]
 8014f1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f1e:	3b01      	subs	r3, #1
 8014f20:	4313      	orrs	r3, r2
 8014f22:	4682      	mov	sl, r0
 8014f24:	468b      	mov	fp, r1
 8014f26:	f040 81f1 	bne.w	801530c <__ieee754_pow+0x6e4>
 8014f2a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8014fe8 <__ieee754_pow+0x3c0>
 8014f2e:	eeb0 8a47 	vmov.f32	s16, s14
 8014f32:	eef0 8a67 	vmov.f32	s17, s15
 8014f36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014f3a:	2600      	movs	r6, #0
 8014f3c:	4632      	mov	r2, r6
 8014f3e:	463b      	mov	r3, r7
 8014f40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014f44:	f7eb f9c0 	bl	80002c8 <__aeabi_dsub>
 8014f48:	4622      	mov	r2, r4
 8014f4a:	462b      	mov	r3, r5
 8014f4c:	f7eb fb74 	bl	8000638 <__aeabi_dmul>
 8014f50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014f54:	4680      	mov	r8, r0
 8014f56:	4689      	mov	r9, r1
 8014f58:	4650      	mov	r0, sl
 8014f5a:	4659      	mov	r1, fp
 8014f5c:	f7eb fb6c 	bl	8000638 <__aeabi_dmul>
 8014f60:	4602      	mov	r2, r0
 8014f62:	460b      	mov	r3, r1
 8014f64:	4640      	mov	r0, r8
 8014f66:	4649      	mov	r1, r9
 8014f68:	f7eb f9b0 	bl	80002cc <__adddf3>
 8014f6c:	4632      	mov	r2, r6
 8014f6e:	463b      	mov	r3, r7
 8014f70:	4680      	mov	r8, r0
 8014f72:	4689      	mov	r9, r1
 8014f74:	4620      	mov	r0, r4
 8014f76:	4629      	mov	r1, r5
 8014f78:	f7eb fb5e 	bl	8000638 <__aeabi_dmul>
 8014f7c:	460b      	mov	r3, r1
 8014f7e:	4604      	mov	r4, r0
 8014f80:	460d      	mov	r5, r1
 8014f82:	4602      	mov	r2, r0
 8014f84:	4649      	mov	r1, r9
 8014f86:	4640      	mov	r0, r8
 8014f88:	f7eb f9a0 	bl	80002cc <__adddf3>
 8014f8c:	4b1d      	ldr	r3, [pc, #116]	; (8015004 <__ieee754_pow+0x3dc>)
 8014f8e:	4299      	cmp	r1, r3
 8014f90:	ec45 4b19 	vmov	d9, r4, r5
 8014f94:	4606      	mov	r6, r0
 8014f96:	460f      	mov	r7, r1
 8014f98:	468b      	mov	fp, r1
 8014f9a:	f340 82fe 	ble.w	801559a <__ieee754_pow+0x972>
 8014f9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014fa2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014fa6:	4303      	orrs	r3, r0
 8014fa8:	f000 81f0 	beq.w	801538c <__ieee754_pow+0x764>
 8014fac:	a310      	add	r3, pc, #64	; (adr r3, 8014ff0 <__ieee754_pow+0x3c8>)
 8014fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fb2:	ec51 0b18 	vmov	r0, r1, d8
 8014fb6:	f7eb fb3f 	bl	8000638 <__aeabi_dmul>
 8014fba:	a30d      	add	r3, pc, #52	; (adr r3, 8014ff0 <__ieee754_pow+0x3c8>)
 8014fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fc0:	e6cb      	b.n	8014d5a <__ieee754_pow+0x132>
 8014fc2:	bf00      	nop
 8014fc4:	f3af 8000 	nop.w
 8014fc8:	60000000 	.word	0x60000000
 8014fcc:	3ff71547 	.word	0x3ff71547
 8014fd0:	f85ddf44 	.word	0xf85ddf44
 8014fd4:	3e54ae0b 	.word	0x3e54ae0b
 8014fd8:	55555555 	.word	0x55555555
 8014fdc:	3fd55555 	.word	0x3fd55555
 8014fe0:	652b82fe 	.word	0x652b82fe
 8014fe4:	3ff71547 	.word	0x3ff71547
 8014fe8:	00000000 	.word	0x00000000
 8014fec:	bff00000 	.word	0xbff00000
 8014ff0:	8800759c 	.word	0x8800759c
 8014ff4:	7e37e43c 	.word	0x7e37e43c
 8014ff8:	3ff00000 	.word	0x3ff00000
 8014ffc:	3fd00000 	.word	0x3fd00000
 8015000:	3fe00000 	.word	0x3fe00000
 8015004:	408fffff 	.word	0x408fffff
 8015008:	4bd7      	ldr	r3, [pc, #860]	; (8015368 <__ieee754_pow+0x740>)
 801500a:	ea03 0309 	and.w	r3, r3, r9
 801500e:	2200      	movs	r2, #0
 8015010:	b92b      	cbnz	r3, 801501e <__ieee754_pow+0x3f6>
 8015012:	4bd6      	ldr	r3, [pc, #856]	; (801536c <__ieee754_pow+0x744>)
 8015014:	f7eb fb10 	bl	8000638 <__aeabi_dmul>
 8015018:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801501c:	460c      	mov	r4, r1
 801501e:	1523      	asrs	r3, r4, #20
 8015020:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015024:	4413      	add	r3, r2
 8015026:	9309      	str	r3, [sp, #36]	; 0x24
 8015028:	4bd1      	ldr	r3, [pc, #836]	; (8015370 <__ieee754_pow+0x748>)
 801502a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801502e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8015032:	429c      	cmp	r4, r3
 8015034:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015038:	dd08      	ble.n	801504c <__ieee754_pow+0x424>
 801503a:	4bce      	ldr	r3, [pc, #824]	; (8015374 <__ieee754_pow+0x74c>)
 801503c:	429c      	cmp	r4, r3
 801503e:	f340 8163 	ble.w	8015308 <__ieee754_pow+0x6e0>
 8015042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015044:	3301      	adds	r3, #1
 8015046:	9309      	str	r3, [sp, #36]	; 0x24
 8015048:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801504c:	2400      	movs	r4, #0
 801504e:	00e3      	lsls	r3, r4, #3
 8015050:	930b      	str	r3, [sp, #44]	; 0x2c
 8015052:	4bc9      	ldr	r3, [pc, #804]	; (8015378 <__ieee754_pow+0x750>)
 8015054:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015058:	ed93 7b00 	vldr	d7, [r3]
 801505c:	4629      	mov	r1, r5
 801505e:	ec53 2b17 	vmov	r2, r3, d7
 8015062:	eeb0 8a47 	vmov.f32	s16, s14
 8015066:	eef0 8a67 	vmov.f32	s17, s15
 801506a:	4682      	mov	sl, r0
 801506c:	f7eb f92c 	bl	80002c8 <__aeabi_dsub>
 8015070:	4652      	mov	r2, sl
 8015072:	4606      	mov	r6, r0
 8015074:	460f      	mov	r7, r1
 8015076:	462b      	mov	r3, r5
 8015078:	ec51 0b18 	vmov	r0, r1, d8
 801507c:	f7eb f926 	bl	80002cc <__adddf3>
 8015080:	4602      	mov	r2, r0
 8015082:	460b      	mov	r3, r1
 8015084:	2000      	movs	r0, #0
 8015086:	49bd      	ldr	r1, [pc, #756]	; (801537c <__ieee754_pow+0x754>)
 8015088:	f7eb fc00 	bl	800088c <__aeabi_ddiv>
 801508c:	ec41 0b19 	vmov	d9, r0, r1
 8015090:	4602      	mov	r2, r0
 8015092:	460b      	mov	r3, r1
 8015094:	4630      	mov	r0, r6
 8015096:	4639      	mov	r1, r7
 8015098:	f7eb face 	bl	8000638 <__aeabi_dmul>
 801509c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80150a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80150a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80150a8:	2300      	movs	r3, #0
 80150aa:	9304      	str	r3, [sp, #16]
 80150ac:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80150b0:	46ab      	mov	fp, r5
 80150b2:	106d      	asrs	r5, r5, #1
 80150b4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80150b8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80150bc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80150c0:	2200      	movs	r2, #0
 80150c2:	4640      	mov	r0, r8
 80150c4:	4649      	mov	r1, r9
 80150c6:	4614      	mov	r4, r2
 80150c8:	461d      	mov	r5, r3
 80150ca:	f7eb fab5 	bl	8000638 <__aeabi_dmul>
 80150ce:	4602      	mov	r2, r0
 80150d0:	460b      	mov	r3, r1
 80150d2:	4630      	mov	r0, r6
 80150d4:	4639      	mov	r1, r7
 80150d6:	f7eb f8f7 	bl	80002c8 <__aeabi_dsub>
 80150da:	ec53 2b18 	vmov	r2, r3, d8
 80150de:	4606      	mov	r6, r0
 80150e0:	460f      	mov	r7, r1
 80150e2:	4620      	mov	r0, r4
 80150e4:	4629      	mov	r1, r5
 80150e6:	f7eb f8ef 	bl	80002c8 <__aeabi_dsub>
 80150ea:	4602      	mov	r2, r0
 80150ec:	460b      	mov	r3, r1
 80150ee:	4650      	mov	r0, sl
 80150f0:	4659      	mov	r1, fp
 80150f2:	f7eb f8e9 	bl	80002c8 <__aeabi_dsub>
 80150f6:	4642      	mov	r2, r8
 80150f8:	464b      	mov	r3, r9
 80150fa:	f7eb fa9d 	bl	8000638 <__aeabi_dmul>
 80150fe:	4602      	mov	r2, r0
 8015100:	460b      	mov	r3, r1
 8015102:	4630      	mov	r0, r6
 8015104:	4639      	mov	r1, r7
 8015106:	f7eb f8df 	bl	80002c8 <__aeabi_dsub>
 801510a:	ec53 2b19 	vmov	r2, r3, d9
 801510e:	f7eb fa93 	bl	8000638 <__aeabi_dmul>
 8015112:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015116:	ec41 0b18 	vmov	d8, r0, r1
 801511a:	4610      	mov	r0, r2
 801511c:	4619      	mov	r1, r3
 801511e:	f7eb fa8b 	bl	8000638 <__aeabi_dmul>
 8015122:	a37d      	add	r3, pc, #500	; (adr r3, 8015318 <__ieee754_pow+0x6f0>)
 8015124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015128:	4604      	mov	r4, r0
 801512a:	460d      	mov	r5, r1
 801512c:	f7eb fa84 	bl	8000638 <__aeabi_dmul>
 8015130:	a37b      	add	r3, pc, #492	; (adr r3, 8015320 <__ieee754_pow+0x6f8>)
 8015132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015136:	f7eb f8c9 	bl	80002cc <__adddf3>
 801513a:	4622      	mov	r2, r4
 801513c:	462b      	mov	r3, r5
 801513e:	f7eb fa7b 	bl	8000638 <__aeabi_dmul>
 8015142:	a379      	add	r3, pc, #484	; (adr r3, 8015328 <__ieee754_pow+0x700>)
 8015144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015148:	f7eb f8c0 	bl	80002cc <__adddf3>
 801514c:	4622      	mov	r2, r4
 801514e:	462b      	mov	r3, r5
 8015150:	f7eb fa72 	bl	8000638 <__aeabi_dmul>
 8015154:	a376      	add	r3, pc, #472	; (adr r3, 8015330 <__ieee754_pow+0x708>)
 8015156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801515a:	f7eb f8b7 	bl	80002cc <__adddf3>
 801515e:	4622      	mov	r2, r4
 8015160:	462b      	mov	r3, r5
 8015162:	f7eb fa69 	bl	8000638 <__aeabi_dmul>
 8015166:	a374      	add	r3, pc, #464	; (adr r3, 8015338 <__ieee754_pow+0x710>)
 8015168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801516c:	f7eb f8ae 	bl	80002cc <__adddf3>
 8015170:	4622      	mov	r2, r4
 8015172:	462b      	mov	r3, r5
 8015174:	f7eb fa60 	bl	8000638 <__aeabi_dmul>
 8015178:	a371      	add	r3, pc, #452	; (adr r3, 8015340 <__ieee754_pow+0x718>)
 801517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801517e:	f7eb f8a5 	bl	80002cc <__adddf3>
 8015182:	4622      	mov	r2, r4
 8015184:	4606      	mov	r6, r0
 8015186:	460f      	mov	r7, r1
 8015188:	462b      	mov	r3, r5
 801518a:	4620      	mov	r0, r4
 801518c:	4629      	mov	r1, r5
 801518e:	f7eb fa53 	bl	8000638 <__aeabi_dmul>
 8015192:	4602      	mov	r2, r0
 8015194:	460b      	mov	r3, r1
 8015196:	4630      	mov	r0, r6
 8015198:	4639      	mov	r1, r7
 801519a:	f7eb fa4d 	bl	8000638 <__aeabi_dmul>
 801519e:	4642      	mov	r2, r8
 80151a0:	4604      	mov	r4, r0
 80151a2:	460d      	mov	r5, r1
 80151a4:	464b      	mov	r3, r9
 80151a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80151aa:	f7eb f88f 	bl	80002cc <__adddf3>
 80151ae:	ec53 2b18 	vmov	r2, r3, d8
 80151b2:	f7eb fa41 	bl	8000638 <__aeabi_dmul>
 80151b6:	4622      	mov	r2, r4
 80151b8:	462b      	mov	r3, r5
 80151ba:	f7eb f887 	bl	80002cc <__adddf3>
 80151be:	4642      	mov	r2, r8
 80151c0:	4682      	mov	sl, r0
 80151c2:	468b      	mov	fp, r1
 80151c4:	464b      	mov	r3, r9
 80151c6:	4640      	mov	r0, r8
 80151c8:	4649      	mov	r1, r9
 80151ca:	f7eb fa35 	bl	8000638 <__aeabi_dmul>
 80151ce:	4b6c      	ldr	r3, [pc, #432]	; (8015380 <__ieee754_pow+0x758>)
 80151d0:	2200      	movs	r2, #0
 80151d2:	4606      	mov	r6, r0
 80151d4:	460f      	mov	r7, r1
 80151d6:	f7eb f879 	bl	80002cc <__adddf3>
 80151da:	4652      	mov	r2, sl
 80151dc:	465b      	mov	r3, fp
 80151de:	f7eb f875 	bl	80002cc <__adddf3>
 80151e2:	9c04      	ldr	r4, [sp, #16]
 80151e4:	460d      	mov	r5, r1
 80151e6:	4622      	mov	r2, r4
 80151e8:	460b      	mov	r3, r1
 80151ea:	4640      	mov	r0, r8
 80151ec:	4649      	mov	r1, r9
 80151ee:	f7eb fa23 	bl	8000638 <__aeabi_dmul>
 80151f2:	4b63      	ldr	r3, [pc, #396]	; (8015380 <__ieee754_pow+0x758>)
 80151f4:	4680      	mov	r8, r0
 80151f6:	4689      	mov	r9, r1
 80151f8:	2200      	movs	r2, #0
 80151fa:	4620      	mov	r0, r4
 80151fc:	4629      	mov	r1, r5
 80151fe:	f7eb f863 	bl	80002c8 <__aeabi_dsub>
 8015202:	4632      	mov	r2, r6
 8015204:	463b      	mov	r3, r7
 8015206:	f7eb f85f 	bl	80002c8 <__aeabi_dsub>
 801520a:	4602      	mov	r2, r0
 801520c:	460b      	mov	r3, r1
 801520e:	4650      	mov	r0, sl
 8015210:	4659      	mov	r1, fp
 8015212:	f7eb f859 	bl	80002c8 <__aeabi_dsub>
 8015216:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801521a:	f7eb fa0d 	bl	8000638 <__aeabi_dmul>
 801521e:	4622      	mov	r2, r4
 8015220:	4606      	mov	r6, r0
 8015222:	460f      	mov	r7, r1
 8015224:	462b      	mov	r3, r5
 8015226:	ec51 0b18 	vmov	r0, r1, d8
 801522a:	f7eb fa05 	bl	8000638 <__aeabi_dmul>
 801522e:	4602      	mov	r2, r0
 8015230:	460b      	mov	r3, r1
 8015232:	4630      	mov	r0, r6
 8015234:	4639      	mov	r1, r7
 8015236:	f7eb f849 	bl	80002cc <__adddf3>
 801523a:	4606      	mov	r6, r0
 801523c:	460f      	mov	r7, r1
 801523e:	4602      	mov	r2, r0
 8015240:	460b      	mov	r3, r1
 8015242:	4640      	mov	r0, r8
 8015244:	4649      	mov	r1, r9
 8015246:	f7eb f841 	bl	80002cc <__adddf3>
 801524a:	9c04      	ldr	r4, [sp, #16]
 801524c:	a33e      	add	r3, pc, #248	; (adr r3, 8015348 <__ieee754_pow+0x720>)
 801524e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015252:	4620      	mov	r0, r4
 8015254:	460d      	mov	r5, r1
 8015256:	f7eb f9ef 	bl	8000638 <__aeabi_dmul>
 801525a:	4642      	mov	r2, r8
 801525c:	ec41 0b18 	vmov	d8, r0, r1
 8015260:	464b      	mov	r3, r9
 8015262:	4620      	mov	r0, r4
 8015264:	4629      	mov	r1, r5
 8015266:	f7eb f82f 	bl	80002c8 <__aeabi_dsub>
 801526a:	4602      	mov	r2, r0
 801526c:	460b      	mov	r3, r1
 801526e:	4630      	mov	r0, r6
 8015270:	4639      	mov	r1, r7
 8015272:	f7eb f829 	bl	80002c8 <__aeabi_dsub>
 8015276:	a336      	add	r3, pc, #216	; (adr r3, 8015350 <__ieee754_pow+0x728>)
 8015278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801527c:	f7eb f9dc 	bl	8000638 <__aeabi_dmul>
 8015280:	a335      	add	r3, pc, #212	; (adr r3, 8015358 <__ieee754_pow+0x730>)
 8015282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015286:	4606      	mov	r6, r0
 8015288:	460f      	mov	r7, r1
 801528a:	4620      	mov	r0, r4
 801528c:	4629      	mov	r1, r5
 801528e:	f7eb f9d3 	bl	8000638 <__aeabi_dmul>
 8015292:	4602      	mov	r2, r0
 8015294:	460b      	mov	r3, r1
 8015296:	4630      	mov	r0, r6
 8015298:	4639      	mov	r1, r7
 801529a:	f7eb f817 	bl	80002cc <__adddf3>
 801529e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80152a0:	4b38      	ldr	r3, [pc, #224]	; (8015384 <__ieee754_pow+0x75c>)
 80152a2:	4413      	add	r3, r2
 80152a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152a8:	f7eb f810 	bl	80002cc <__adddf3>
 80152ac:	4682      	mov	sl, r0
 80152ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80152b0:	468b      	mov	fp, r1
 80152b2:	f7eb f957 	bl	8000564 <__aeabi_i2d>
 80152b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80152b8:	4b33      	ldr	r3, [pc, #204]	; (8015388 <__ieee754_pow+0x760>)
 80152ba:	4413      	add	r3, r2
 80152bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80152c0:	4606      	mov	r6, r0
 80152c2:	460f      	mov	r7, r1
 80152c4:	4652      	mov	r2, sl
 80152c6:	465b      	mov	r3, fp
 80152c8:	ec51 0b18 	vmov	r0, r1, d8
 80152cc:	f7ea fffe 	bl	80002cc <__adddf3>
 80152d0:	4642      	mov	r2, r8
 80152d2:	464b      	mov	r3, r9
 80152d4:	f7ea fffa 	bl	80002cc <__adddf3>
 80152d8:	4632      	mov	r2, r6
 80152da:	463b      	mov	r3, r7
 80152dc:	f7ea fff6 	bl	80002cc <__adddf3>
 80152e0:	9c04      	ldr	r4, [sp, #16]
 80152e2:	4632      	mov	r2, r6
 80152e4:	463b      	mov	r3, r7
 80152e6:	4620      	mov	r0, r4
 80152e8:	460d      	mov	r5, r1
 80152ea:	f7ea ffed 	bl	80002c8 <__aeabi_dsub>
 80152ee:	4642      	mov	r2, r8
 80152f0:	464b      	mov	r3, r9
 80152f2:	f7ea ffe9 	bl	80002c8 <__aeabi_dsub>
 80152f6:	ec53 2b18 	vmov	r2, r3, d8
 80152fa:	f7ea ffe5 	bl	80002c8 <__aeabi_dsub>
 80152fe:	4602      	mov	r2, r0
 8015300:	460b      	mov	r3, r1
 8015302:	4650      	mov	r0, sl
 8015304:	4659      	mov	r1, fp
 8015306:	e606      	b.n	8014f16 <__ieee754_pow+0x2ee>
 8015308:	2401      	movs	r4, #1
 801530a:	e6a0      	b.n	801504e <__ieee754_pow+0x426>
 801530c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8015360 <__ieee754_pow+0x738>
 8015310:	e60d      	b.n	8014f2e <__ieee754_pow+0x306>
 8015312:	bf00      	nop
 8015314:	f3af 8000 	nop.w
 8015318:	4a454eef 	.word	0x4a454eef
 801531c:	3fca7e28 	.word	0x3fca7e28
 8015320:	93c9db65 	.word	0x93c9db65
 8015324:	3fcd864a 	.word	0x3fcd864a
 8015328:	a91d4101 	.word	0xa91d4101
 801532c:	3fd17460 	.word	0x3fd17460
 8015330:	518f264d 	.word	0x518f264d
 8015334:	3fd55555 	.word	0x3fd55555
 8015338:	db6fabff 	.word	0xdb6fabff
 801533c:	3fdb6db6 	.word	0x3fdb6db6
 8015340:	33333303 	.word	0x33333303
 8015344:	3fe33333 	.word	0x3fe33333
 8015348:	e0000000 	.word	0xe0000000
 801534c:	3feec709 	.word	0x3feec709
 8015350:	dc3a03fd 	.word	0xdc3a03fd
 8015354:	3feec709 	.word	0x3feec709
 8015358:	145b01f5 	.word	0x145b01f5
 801535c:	be3e2fe0 	.word	0xbe3e2fe0
 8015360:	00000000 	.word	0x00000000
 8015364:	3ff00000 	.word	0x3ff00000
 8015368:	7ff00000 	.word	0x7ff00000
 801536c:	43400000 	.word	0x43400000
 8015370:	0003988e 	.word	0x0003988e
 8015374:	000bb679 	.word	0x000bb679
 8015378:	080172d0 	.word	0x080172d0
 801537c:	3ff00000 	.word	0x3ff00000
 8015380:	40080000 	.word	0x40080000
 8015384:	080172f0 	.word	0x080172f0
 8015388:	080172e0 	.word	0x080172e0
 801538c:	a3b5      	add	r3, pc, #724	; (adr r3, 8015664 <__ieee754_pow+0xa3c>)
 801538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015392:	4640      	mov	r0, r8
 8015394:	4649      	mov	r1, r9
 8015396:	f7ea ff99 	bl	80002cc <__adddf3>
 801539a:	4622      	mov	r2, r4
 801539c:	ec41 0b1a 	vmov	d10, r0, r1
 80153a0:	462b      	mov	r3, r5
 80153a2:	4630      	mov	r0, r6
 80153a4:	4639      	mov	r1, r7
 80153a6:	f7ea ff8f 	bl	80002c8 <__aeabi_dsub>
 80153aa:	4602      	mov	r2, r0
 80153ac:	460b      	mov	r3, r1
 80153ae:	ec51 0b1a 	vmov	r0, r1, d10
 80153b2:	f7eb fbd1 	bl	8000b58 <__aeabi_dcmpgt>
 80153b6:	2800      	cmp	r0, #0
 80153b8:	f47f adf8 	bne.w	8014fac <__ieee754_pow+0x384>
 80153bc:	4aa4      	ldr	r2, [pc, #656]	; (8015650 <__ieee754_pow+0xa28>)
 80153be:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80153c2:	4293      	cmp	r3, r2
 80153c4:	f340 810b 	ble.w	80155de <__ieee754_pow+0x9b6>
 80153c8:	151b      	asrs	r3, r3, #20
 80153ca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80153ce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80153d2:	fa4a f303 	asr.w	r3, sl, r3
 80153d6:	445b      	add	r3, fp
 80153d8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80153dc:	4e9d      	ldr	r6, [pc, #628]	; (8015654 <__ieee754_pow+0xa2c>)
 80153de:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80153e2:	4116      	asrs	r6, r2
 80153e4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80153e8:	2000      	movs	r0, #0
 80153ea:	ea23 0106 	bic.w	r1, r3, r6
 80153ee:	f1c2 0214 	rsb	r2, r2, #20
 80153f2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80153f6:	fa4a fa02 	asr.w	sl, sl, r2
 80153fa:	f1bb 0f00 	cmp.w	fp, #0
 80153fe:	4602      	mov	r2, r0
 8015400:	460b      	mov	r3, r1
 8015402:	4620      	mov	r0, r4
 8015404:	4629      	mov	r1, r5
 8015406:	bfb8      	it	lt
 8015408:	f1ca 0a00 	rsblt	sl, sl, #0
 801540c:	f7ea ff5c 	bl	80002c8 <__aeabi_dsub>
 8015410:	ec41 0b19 	vmov	d9, r0, r1
 8015414:	4642      	mov	r2, r8
 8015416:	464b      	mov	r3, r9
 8015418:	ec51 0b19 	vmov	r0, r1, d9
 801541c:	f7ea ff56 	bl	80002cc <__adddf3>
 8015420:	2400      	movs	r4, #0
 8015422:	a379      	add	r3, pc, #484	; (adr r3, 8015608 <__ieee754_pow+0x9e0>)
 8015424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015428:	4620      	mov	r0, r4
 801542a:	460d      	mov	r5, r1
 801542c:	f7eb f904 	bl	8000638 <__aeabi_dmul>
 8015430:	ec53 2b19 	vmov	r2, r3, d9
 8015434:	4606      	mov	r6, r0
 8015436:	460f      	mov	r7, r1
 8015438:	4620      	mov	r0, r4
 801543a:	4629      	mov	r1, r5
 801543c:	f7ea ff44 	bl	80002c8 <__aeabi_dsub>
 8015440:	4602      	mov	r2, r0
 8015442:	460b      	mov	r3, r1
 8015444:	4640      	mov	r0, r8
 8015446:	4649      	mov	r1, r9
 8015448:	f7ea ff3e 	bl	80002c8 <__aeabi_dsub>
 801544c:	a370      	add	r3, pc, #448	; (adr r3, 8015610 <__ieee754_pow+0x9e8>)
 801544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015452:	f7eb f8f1 	bl	8000638 <__aeabi_dmul>
 8015456:	a370      	add	r3, pc, #448	; (adr r3, 8015618 <__ieee754_pow+0x9f0>)
 8015458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801545c:	4680      	mov	r8, r0
 801545e:	4689      	mov	r9, r1
 8015460:	4620      	mov	r0, r4
 8015462:	4629      	mov	r1, r5
 8015464:	f7eb f8e8 	bl	8000638 <__aeabi_dmul>
 8015468:	4602      	mov	r2, r0
 801546a:	460b      	mov	r3, r1
 801546c:	4640      	mov	r0, r8
 801546e:	4649      	mov	r1, r9
 8015470:	f7ea ff2c 	bl	80002cc <__adddf3>
 8015474:	4604      	mov	r4, r0
 8015476:	460d      	mov	r5, r1
 8015478:	4602      	mov	r2, r0
 801547a:	460b      	mov	r3, r1
 801547c:	4630      	mov	r0, r6
 801547e:	4639      	mov	r1, r7
 8015480:	f7ea ff24 	bl	80002cc <__adddf3>
 8015484:	4632      	mov	r2, r6
 8015486:	463b      	mov	r3, r7
 8015488:	4680      	mov	r8, r0
 801548a:	4689      	mov	r9, r1
 801548c:	f7ea ff1c 	bl	80002c8 <__aeabi_dsub>
 8015490:	4602      	mov	r2, r0
 8015492:	460b      	mov	r3, r1
 8015494:	4620      	mov	r0, r4
 8015496:	4629      	mov	r1, r5
 8015498:	f7ea ff16 	bl	80002c8 <__aeabi_dsub>
 801549c:	4642      	mov	r2, r8
 801549e:	4606      	mov	r6, r0
 80154a0:	460f      	mov	r7, r1
 80154a2:	464b      	mov	r3, r9
 80154a4:	4640      	mov	r0, r8
 80154a6:	4649      	mov	r1, r9
 80154a8:	f7eb f8c6 	bl	8000638 <__aeabi_dmul>
 80154ac:	a35c      	add	r3, pc, #368	; (adr r3, 8015620 <__ieee754_pow+0x9f8>)
 80154ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154b2:	4604      	mov	r4, r0
 80154b4:	460d      	mov	r5, r1
 80154b6:	f7eb f8bf 	bl	8000638 <__aeabi_dmul>
 80154ba:	a35b      	add	r3, pc, #364	; (adr r3, 8015628 <__ieee754_pow+0xa00>)
 80154bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154c0:	f7ea ff02 	bl	80002c8 <__aeabi_dsub>
 80154c4:	4622      	mov	r2, r4
 80154c6:	462b      	mov	r3, r5
 80154c8:	f7eb f8b6 	bl	8000638 <__aeabi_dmul>
 80154cc:	a358      	add	r3, pc, #352	; (adr r3, 8015630 <__ieee754_pow+0xa08>)
 80154ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154d2:	f7ea fefb 	bl	80002cc <__adddf3>
 80154d6:	4622      	mov	r2, r4
 80154d8:	462b      	mov	r3, r5
 80154da:	f7eb f8ad 	bl	8000638 <__aeabi_dmul>
 80154de:	a356      	add	r3, pc, #344	; (adr r3, 8015638 <__ieee754_pow+0xa10>)
 80154e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154e4:	f7ea fef0 	bl	80002c8 <__aeabi_dsub>
 80154e8:	4622      	mov	r2, r4
 80154ea:	462b      	mov	r3, r5
 80154ec:	f7eb f8a4 	bl	8000638 <__aeabi_dmul>
 80154f0:	a353      	add	r3, pc, #332	; (adr r3, 8015640 <__ieee754_pow+0xa18>)
 80154f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154f6:	f7ea fee9 	bl	80002cc <__adddf3>
 80154fa:	4622      	mov	r2, r4
 80154fc:	462b      	mov	r3, r5
 80154fe:	f7eb f89b 	bl	8000638 <__aeabi_dmul>
 8015502:	4602      	mov	r2, r0
 8015504:	460b      	mov	r3, r1
 8015506:	4640      	mov	r0, r8
 8015508:	4649      	mov	r1, r9
 801550a:	f7ea fedd 	bl	80002c8 <__aeabi_dsub>
 801550e:	4604      	mov	r4, r0
 8015510:	460d      	mov	r5, r1
 8015512:	4602      	mov	r2, r0
 8015514:	460b      	mov	r3, r1
 8015516:	4640      	mov	r0, r8
 8015518:	4649      	mov	r1, r9
 801551a:	f7eb f88d 	bl	8000638 <__aeabi_dmul>
 801551e:	2200      	movs	r2, #0
 8015520:	ec41 0b19 	vmov	d9, r0, r1
 8015524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015528:	4620      	mov	r0, r4
 801552a:	4629      	mov	r1, r5
 801552c:	f7ea fecc 	bl	80002c8 <__aeabi_dsub>
 8015530:	4602      	mov	r2, r0
 8015532:	460b      	mov	r3, r1
 8015534:	ec51 0b19 	vmov	r0, r1, d9
 8015538:	f7eb f9a8 	bl	800088c <__aeabi_ddiv>
 801553c:	4632      	mov	r2, r6
 801553e:	4604      	mov	r4, r0
 8015540:	460d      	mov	r5, r1
 8015542:	463b      	mov	r3, r7
 8015544:	4640      	mov	r0, r8
 8015546:	4649      	mov	r1, r9
 8015548:	f7eb f876 	bl	8000638 <__aeabi_dmul>
 801554c:	4632      	mov	r2, r6
 801554e:	463b      	mov	r3, r7
 8015550:	f7ea febc 	bl	80002cc <__adddf3>
 8015554:	4602      	mov	r2, r0
 8015556:	460b      	mov	r3, r1
 8015558:	4620      	mov	r0, r4
 801555a:	4629      	mov	r1, r5
 801555c:	f7ea feb4 	bl	80002c8 <__aeabi_dsub>
 8015560:	4642      	mov	r2, r8
 8015562:	464b      	mov	r3, r9
 8015564:	f7ea feb0 	bl	80002c8 <__aeabi_dsub>
 8015568:	460b      	mov	r3, r1
 801556a:	4602      	mov	r2, r0
 801556c:	493a      	ldr	r1, [pc, #232]	; (8015658 <__ieee754_pow+0xa30>)
 801556e:	2000      	movs	r0, #0
 8015570:	f7ea feaa 	bl	80002c8 <__aeabi_dsub>
 8015574:	e9cd 0100 	strd	r0, r1, [sp]
 8015578:	9b01      	ldr	r3, [sp, #4]
 801557a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801557e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015582:	da2f      	bge.n	80155e4 <__ieee754_pow+0x9bc>
 8015584:	4650      	mov	r0, sl
 8015586:	ed9d 0b00 	vldr	d0, [sp]
 801558a:	f001 f919 	bl	80167c0 <scalbn>
 801558e:	ec51 0b10 	vmov	r0, r1, d0
 8015592:	ec53 2b18 	vmov	r2, r3, d8
 8015596:	f7ff bbe0 	b.w	8014d5a <__ieee754_pow+0x132>
 801559a:	4b30      	ldr	r3, [pc, #192]	; (801565c <__ieee754_pow+0xa34>)
 801559c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80155a0:	429e      	cmp	r6, r3
 80155a2:	f77f af0b 	ble.w	80153bc <__ieee754_pow+0x794>
 80155a6:	4b2e      	ldr	r3, [pc, #184]	; (8015660 <__ieee754_pow+0xa38>)
 80155a8:	440b      	add	r3, r1
 80155aa:	4303      	orrs	r3, r0
 80155ac:	d00b      	beq.n	80155c6 <__ieee754_pow+0x99e>
 80155ae:	a326      	add	r3, pc, #152	; (adr r3, 8015648 <__ieee754_pow+0xa20>)
 80155b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155b4:	ec51 0b18 	vmov	r0, r1, d8
 80155b8:	f7eb f83e 	bl	8000638 <__aeabi_dmul>
 80155bc:	a322      	add	r3, pc, #136	; (adr r3, 8015648 <__ieee754_pow+0xa20>)
 80155be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155c2:	f7ff bbca 	b.w	8014d5a <__ieee754_pow+0x132>
 80155c6:	4622      	mov	r2, r4
 80155c8:	462b      	mov	r3, r5
 80155ca:	f7ea fe7d 	bl	80002c8 <__aeabi_dsub>
 80155ce:	4642      	mov	r2, r8
 80155d0:	464b      	mov	r3, r9
 80155d2:	f7eb fab7 	bl	8000b44 <__aeabi_dcmpge>
 80155d6:	2800      	cmp	r0, #0
 80155d8:	f43f aef0 	beq.w	80153bc <__ieee754_pow+0x794>
 80155dc:	e7e7      	b.n	80155ae <__ieee754_pow+0x986>
 80155de:	f04f 0a00 	mov.w	sl, #0
 80155e2:	e717      	b.n	8015414 <__ieee754_pow+0x7ec>
 80155e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155e8:	4619      	mov	r1, r3
 80155ea:	e7d2      	b.n	8015592 <__ieee754_pow+0x96a>
 80155ec:	491a      	ldr	r1, [pc, #104]	; (8015658 <__ieee754_pow+0xa30>)
 80155ee:	2000      	movs	r0, #0
 80155f0:	f7ff bb9e 	b.w	8014d30 <__ieee754_pow+0x108>
 80155f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80155f8:	f7ff bb9a 	b.w	8014d30 <__ieee754_pow+0x108>
 80155fc:	9000      	str	r0, [sp, #0]
 80155fe:	f7ff bb76 	b.w	8014cee <__ieee754_pow+0xc6>
 8015602:	2100      	movs	r1, #0
 8015604:	f7ff bb60 	b.w	8014cc8 <__ieee754_pow+0xa0>
 8015608:	00000000 	.word	0x00000000
 801560c:	3fe62e43 	.word	0x3fe62e43
 8015610:	fefa39ef 	.word	0xfefa39ef
 8015614:	3fe62e42 	.word	0x3fe62e42
 8015618:	0ca86c39 	.word	0x0ca86c39
 801561c:	be205c61 	.word	0xbe205c61
 8015620:	72bea4d0 	.word	0x72bea4d0
 8015624:	3e663769 	.word	0x3e663769
 8015628:	c5d26bf1 	.word	0xc5d26bf1
 801562c:	3ebbbd41 	.word	0x3ebbbd41
 8015630:	af25de2c 	.word	0xaf25de2c
 8015634:	3f11566a 	.word	0x3f11566a
 8015638:	16bebd93 	.word	0x16bebd93
 801563c:	3f66c16c 	.word	0x3f66c16c
 8015640:	5555553e 	.word	0x5555553e
 8015644:	3fc55555 	.word	0x3fc55555
 8015648:	c2f8f359 	.word	0xc2f8f359
 801564c:	01a56e1f 	.word	0x01a56e1f
 8015650:	3fe00000 	.word	0x3fe00000
 8015654:	000fffff 	.word	0x000fffff
 8015658:	3ff00000 	.word	0x3ff00000
 801565c:	4090cbff 	.word	0x4090cbff
 8015660:	3f6f3400 	.word	0x3f6f3400
 8015664:	652b82fe 	.word	0x652b82fe
 8015668:	3c971547 	.word	0x3c971547
 801566c:	00000000 	.word	0x00000000

08015670 <__ieee754_rem_pio2>:
 8015670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015674:	ed2d 8b02 	vpush	{d8}
 8015678:	ec55 4b10 	vmov	r4, r5, d0
 801567c:	4bca      	ldr	r3, [pc, #808]	; (80159a8 <__ieee754_rem_pio2+0x338>)
 801567e:	b08b      	sub	sp, #44	; 0x2c
 8015680:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8015684:	4598      	cmp	r8, r3
 8015686:	4682      	mov	sl, r0
 8015688:	9502      	str	r5, [sp, #8]
 801568a:	dc08      	bgt.n	801569e <__ieee754_rem_pio2+0x2e>
 801568c:	2200      	movs	r2, #0
 801568e:	2300      	movs	r3, #0
 8015690:	ed80 0b00 	vstr	d0, [r0]
 8015694:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015698:	f04f 0b00 	mov.w	fp, #0
 801569c:	e028      	b.n	80156f0 <__ieee754_rem_pio2+0x80>
 801569e:	4bc3      	ldr	r3, [pc, #780]	; (80159ac <__ieee754_rem_pio2+0x33c>)
 80156a0:	4598      	cmp	r8, r3
 80156a2:	dc78      	bgt.n	8015796 <__ieee754_rem_pio2+0x126>
 80156a4:	9b02      	ldr	r3, [sp, #8]
 80156a6:	4ec2      	ldr	r6, [pc, #776]	; (80159b0 <__ieee754_rem_pio2+0x340>)
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	ee10 0a10 	vmov	r0, s0
 80156ae:	a3b0      	add	r3, pc, #704	; (adr r3, 8015970 <__ieee754_rem_pio2+0x300>)
 80156b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156b4:	4629      	mov	r1, r5
 80156b6:	dd39      	ble.n	801572c <__ieee754_rem_pio2+0xbc>
 80156b8:	f7ea fe06 	bl	80002c8 <__aeabi_dsub>
 80156bc:	45b0      	cmp	r8, r6
 80156be:	4604      	mov	r4, r0
 80156c0:	460d      	mov	r5, r1
 80156c2:	d01b      	beq.n	80156fc <__ieee754_rem_pio2+0x8c>
 80156c4:	a3ac      	add	r3, pc, #688	; (adr r3, 8015978 <__ieee754_rem_pio2+0x308>)
 80156c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ca:	f7ea fdfd 	bl	80002c8 <__aeabi_dsub>
 80156ce:	4602      	mov	r2, r0
 80156d0:	460b      	mov	r3, r1
 80156d2:	e9ca 2300 	strd	r2, r3, [sl]
 80156d6:	4620      	mov	r0, r4
 80156d8:	4629      	mov	r1, r5
 80156da:	f7ea fdf5 	bl	80002c8 <__aeabi_dsub>
 80156de:	a3a6      	add	r3, pc, #664	; (adr r3, 8015978 <__ieee754_rem_pio2+0x308>)
 80156e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156e4:	f7ea fdf0 	bl	80002c8 <__aeabi_dsub>
 80156e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80156ec:	f04f 0b01 	mov.w	fp, #1
 80156f0:	4658      	mov	r0, fp
 80156f2:	b00b      	add	sp, #44	; 0x2c
 80156f4:	ecbd 8b02 	vpop	{d8}
 80156f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156fc:	a3a0      	add	r3, pc, #640	; (adr r3, 8015980 <__ieee754_rem_pio2+0x310>)
 80156fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015702:	f7ea fde1 	bl	80002c8 <__aeabi_dsub>
 8015706:	a3a0      	add	r3, pc, #640	; (adr r3, 8015988 <__ieee754_rem_pio2+0x318>)
 8015708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801570c:	4604      	mov	r4, r0
 801570e:	460d      	mov	r5, r1
 8015710:	f7ea fdda 	bl	80002c8 <__aeabi_dsub>
 8015714:	4602      	mov	r2, r0
 8015716:	460b      	mov	r3, r1
 8015718:	e9ca 2300 	strd	r2, r3, [sl]
 801571c:	4620      	mov	r0, r4
 801571e:	4629      	mov	r1, r5
 8015720:	f7ea fdd2 	bl	80002c8 <__aeabi_dsub>
 8015724:	a398      	add	r3, pc, #608	; (adr r3, 8015988 <__ieee754_rem_pio2+0x318>)
 8015726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801572a:	e7db      	b.n	80156e4 <__ieee754_rem_pio2+0x74>
 801572c:	f7ea fdce 	bl	80002cc <__adddf3>
 8015730:	45b0      	cmp	r8, r6
 8015732:	4604      	mov	r4, r0
 8015734:	460d      	mov	r5, r1
 8015736:	d016      	beq.n	8015766 <__ieee754_rem_pio2+0xf6>
 8015738:	a38f      	add	r3, pc, #572	; (adr r3, 8015978 <__ieee754_rem_pio2+0x308>)
 801573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801573e:	f7ea fdc5 	bl	80002cc <__adddf3>
 8015742:	4602      	mov	r2, r0
 8015744:	460b      	mov	r3, r1
 8015746:	e9ca 2300 	strd	r2, r3, [sl]
 801574a:	4620      	mov	r0, r4
 801574c:	4629      	mov	r1, r5
 801574e:	f7ea fdbb 	bl	80002c8 <__aeabi_dsub>
 8015752:	a389      	add	r3, pc, #548	; (adr r3, 8015978 <__ieee754_rem_pio2+0x308>)
 8015754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015758:	f7ea fdb8 	bl	80002cc <__adddf3>
 801575c:	f04f 3bff 	mov.w	fp, #4294967295
 8015760:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015764:	e7c4      	b.n	80156f0 <__ieee754_rem_pio2+0x80>
 8015766:	a386      	add	r3, pc, #536	; (adr r3, 8015980 <__ieee754_rem_pio2+0x310>)
 8015768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801576c:	f7ea fdae 	bl	80002cc <__adddf3>
 8015770:	a385      	add	r3, pc, #532	; (adr r3, 8015988 <__ieee754_rem_pio2+0x318>)
 8015772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015776:	4604      	mov	r4, r0
 8015778:	460d      	mov	r5, r1
 801577a:	f7ea fda7 	bl	80002cc <__adddf3>
 801577e:	4602      	mov	r2, r0
 8015780:	460b      	mov	r3, r1
 8015782:	e9ca 2300 	strd	r2, r3, [sl]
 8015786:	4620      	mov	r0, r4
 8015788:	4629      	mov	r1, r5
 801578a:	f7ea fd9d 	bl	80002c8 <__aeabi_dsub>
 801578e:	a37e      	add	r3, pc, #504	; (adr r3, 8015988 <__ieee754_rem_pio2+0x318>)
 8015790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015794:	e7e0      	b.n	8015758 <__ieee754_rem_pio2+0xe8>
 8015796:	4b87      	ldr	r3, [pc, #540]	; (80159b4 <__ieee754_rem_pio2+0x344>)
 8015798:	4598      	cmp	r8, r3
 801579a:	f300 80d9 	bgt.w	8015950 <__ieee754_rem_pio2+0x2e0>
 801579e:	f7fe fcdf 	bl	8014160 <fabs>
 80157a2:	ec55 4b10 	vmov	r4, r5, d0
 80157a6:	ee10 0a10 	vmov	r0, s0
 80157aa:	a379      	add	r3, pc, #484	; (adr r3, 8015990 <__ieee754_rem_pio2+0x320>)
 80157ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157b0:	4629      	mov	r1, r5
 80157b2:	f7ea ff41 	bl	8000638 <__aeabi_dmul>
 80157b6:	4b80      	ldr	r3, [pc, #512]	; (80159b8 <__ieee754_rem_pio2+0x348>)
 80157b8:	2200      	movs	r2, #0
 80157ba:	f7ea fd87 	bl	80002cc <__adddf3>
 80157be:	f7eb f9eb 	bl	8000b98 <__aeabi_d2iz>
 80157c2:	4683      	mov	fp, r0
 80157c4:	f7ea fece 	bl	8000564 <__aeabi_i2d>
 80157c8:	4602      	mov	r2, r0
 80157ca:	460b      	mov	r3, r1
 80157cc:	ec43 2b18 	vmov	d8, r2, r3
 80157d0:	a367      	add	r3, pc, #412	; (adr r3, 8015970 <__ieee754_rem_pio2+0x300>)
 80157d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157d6:	f7ea ff2f 	bl	8000638 <__aeabi_dmul>
 80157da:	4602      	mov	r2, r0
 80157dc:	460b      	mov	r3, r1
 80157de:	4620      	mov	r0, r4
 80157e0:	4629      	mov	r1, r5
 80157e2:	f7ea fd71 	bl	80002c8 <__aeabi_dsub>
 80157e6:	a364      	add	r3, pc, #400	; (adr r3, 8015978 <__ieee754_rem_pio2+0x308>)
 80157e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ec:	4606      	mov	r6, r0
 80157ee:	460f      	mov	r7, r1
 80157f0:	ec51 0b18 	vmov	r0, r1, d8
 80157f4:	f7ea ff20 	bl	8000638 <__aeabi_dmul>
 80157f8:	f1bb 0f1f 	cmp.w	fp, #31
 80157fc:	4604      	mov	r4, r0
 80157fe:	460d      	mov	r5, r1
 8015800:	dc0d      	bgt.n	801581e <__ieee754_rem_pio2+0x1ae>
 8015802:	4b6e      	ldr	r3, [pc, #440]	; (80159bc <__ieee754_rem_pio2+0x34c>)
 8015804:	f10b 32ff 	add.w	r2, fp, #4294967295
 8015808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801580c:	4543      	cmp	r3, r8
 801580e:	d006      	beq.n	801581e <__ieee754_rem_pio2+0x1ae>
 8015810:	4622      	mov	r2, r4
 8015812:	462b      	mov	r3, r5
 8015814:	4630      	mov	r0, r6
 8015816:	4639      	mov	r1, r7
 8015818:	f7ea fd56 	bl	80002c8 <__aeabi_dsub>
 801581c:	e00f      	b.n	801583e <__ieee754_rem_pio2+0x1ce>
 801581e:	462b      	mov	r3, r5
 8015820:	4622      	mov	r2, r4
 8015822:	4630      	mov	r0, r6
 8015824:	4639      	mov	r1, r7
 8015826:	f7ea fd4f 	bl	80002c8 <__aeabi_dsub>
 801582a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801582e:	9303      	str	r3, [sp, #12]
 8015830:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015834:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8015838:	f1b8 0f10 	cmp.w	r8, #16
 801583c:	dc02      	bgt.n	8015844 <__ieee754_rem_pio2+0x1d4>
 801583e:	e9ca 0100 	strd	r0, r1, [sl]
 8015842:	e039      	b.n	80158b8 <__ieee754_rem_pio2+0x248>
 8015844:	a34e      	add	r3, pc, #312	; (adr r3, 8015980 <__ieee754_rem_pio2+0x310>)
 8015846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801584a:	ec51 0b18 	vmov	r0, r1, d8
 801584e:	f7ea fef3 	bl	8000638 <__aeabi_dmul>
 8015852:	4604      	mov	r4, r0
 8015854:	460d      	mov	r5, r1
 8015856:	4602      	mov	r2, r0
 8015858:	460b      	mov	r3, r1
 801585a:	4630      	mov	r0, r6
 801585c:	4639      	mov	r1, r7
 801585e:	f7ea fd33 	bl	80002c8 <__aeabi_dsub>
 8015862:	4602      	mov	r2, r0
 8015864:	460b      	mov	r3, r1
 8015866:	4680      	mov	r8, r0
 8015868:	4689      	mov	r9, r1
 801586a:	4630      	mov	r0, r6
 801586c:	4639      	mov	r1, r7
 801586e:	f7ea fd2b 	bl	80002c8 <__aeabi_dsub>
 8015872:	4622      	mov	r2, r4
 8015874:	462b      	mov	r3, r5
 8015876:	f7ea fd27 	bl	80002c8 <__aeabi_dsub>
 801587a:	a343      	add	r3, pc, #268	; (adr r3, 8015988 <__ieee754_rem_pio2+0x318>)
 801587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015880:	4604      	mov	r4, r0
 8015882:	460d      	mov	r5, r1
 8015884:	ec51 0b18 	vmov	r0, r1, d8
 8015888:	f7ea fed6 	bl	8000638 <__aeabi_dmul>
 801588c:	4622      	mov	r2, r4
 801588e:	462b      	mov	r3, r5
 8015890:	f7ea fd1a 	bl	80002c8 <__aeabi_dsub>
 8015894:	4602      	mov	r2, r0
 8015896:	460b      	mov	r3, r1
 8015898:	4604      	mov	r4, r0
 801589a:	460d      	mov	r5, r1
 801589c:	4640      	mov	r0, r8
 801589e:	4649      	mov	r1, r9
 80158a0:	f7ea fd12 	bl	80002c8 <__aeabi_dsub>
 80158a4:	9a03      	ldr	r2, [sp, #12]
 80158a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80158aa:	1ad3      	subs	r3, r2, r3
 80158ac:	2b31      	cmp	r3, #49	; 0x31
 80158ae:	dc24      	bgt.n	80158fa <__ieee754_rem_pio2+0x28a>
 80158b0:	e9ca 0100 	strd	r0, r1, [sl]
 80158b4:	4646      	mov	r6, r8
 80158b6:	464f      	mov	r7, r9
 80158b8:	e9da 8900 	ldrd	r8, r9, [sl]
 80158bc:	4630      	mov	r0, r6
 80158be:	4642      	mov	r2, r8
 80158c0:	464b      	mov	r3, r9
 80158c2:	4639      	mov	r1, r7
 80158c4:	f7ea fd00 	bl	80002c8 <__aeabi_dsub>
 80158c8:	462b      	mov	r3, r5
 80158ca:	4622      	mov	r2, r4
 80158cc:	f7ea fcfc 	bl	80002c8 <__aeabi_dsub>
 80158d0:	9b02      	ldr	r3, [sp, #8]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80158d8:	f6bf af0a 	bge.w	80156f0 <__ieee754_rem_pio2+0x80>
 80158dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80158e0:	f8ca 3004 	str.w	r3, [sl, #4]
 80158e4:	f8ca 8000 	str.w	r8, [sl]
 80158e8:	f8ca 0008 	str.w	r0, [sl, #8]
 80158ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80158f0:	f8ca 300c 	str.w	r3, [sl, #12]
 80158f4:	f1cb 0b00 	rsb	fp, fp, #0
 80158f8:	e6fa      	b.n	80156f0 <__ieee754_rem_pio2+0x80>
 80158fa:	a327      	add	r3, pc, #156	; (adr r3, 8015998 <__ieee754_rem_pio2+0x328>)
 80158fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015900:	ec51 0b18 	vmov	r0, r1, d8
 8015904:	f7ea fe98 	bl	8000638 <__aeabi_dmul>
 8015908:	4604      	mov	r4, r0
 801590a:	460d      	mov	r5, r1
 801590c:	4602      	mov	r2, r0
 801590e:	460b      	mov	r3, r1
 8015910:	4640      	mov	r0, r8
 8015912:	4649      	mov	r1, r9
 8015914:	f7ea fcd8 	bl	80002c8 <__aeabi_dsub>
 8015918:	4602      	mov	r2, r0
 801591a:	460b      	mov	r3, r1
 801591c:	4606      	mov	r6, r0
 801591e:	460f      	mov	r7, r1
 8015920:	4640      	mov	r0, r8
 8015922:	4649      	mov	r1, r9
 8015924:	f7ea fcd0 	bl	80002c8 <__aeabi_dsub>
 8015928:	4622      	mov	r2, r4
 801592a:	462b      	mov	r3, r5
 801592c:	f7ea fccc 	bl	80002c8 <__aeabi_dsub>
 8015930:	a31b      	add	r3, pc, #108	; (adr r3, 80159a0 <__ieee754_rem_pio2+0x330>)
 8015932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015936:	4604      	mov	r4, r0
 8015938:	460d      	mov	r5, r1
 801593a:	ec51 0b18 	vmov	r0, r1, d8
 801593e:	f7ea fe7b 	bl	8000638 <__aeabi_dmul>
 8015942:	4622      	mov	r2, r4
 8015944:	462b      	mov	r3, r5
 8015946:	f7ea fcbf 	bl	80002c8 <__aeabi_dsub>
 801594a:	4604      	mov	r4, r0
 801594c:	460d      	mov	r5, r1
 801594e:	e75f      	b.n	8015810 <__ieee754_rem_pio2+0x1a0>
 8015950:	4b1b      	ldr	r3, [pc, #108]	; (80159c0 <__ieee754_rem_pio2+0x350>)
 8015952:	4598      	cmp	r8, r3
 8015954:	dd36      	ble.n	80159c4 <__ieee754_rem_pio2+0x354>
 8015956:	ee10 2a10 	vmov	r2, s0
 801595a:	462b      	mov	r3, r5
 801595c:	4620      	mov	r0, r4
 801595e:	4629      	mov	r1, r5
 8015960:	f7ea fcb2 	bl	80002c8 <__aeabi_dsub>
 8015964:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015968:	e9ca 0100 	strd	r0, r1, [sl]
 801596c:	e694      	b.n	8015698 <__ieee754_rem_pio2+0x28>
 801596e:	bf00      	nop
 8015970:	54400000 	.word	0x54400000
 8015974:	3ff921fb 	.word	0x3ff921fb
 8015978:	1a626331 	.word	0x1a626331
 801597c:	3dd0b461 	.word	0x3dd0b461
 8015980:	1a600000 	.word	0x1a600000
 8015984:	3dd0b461 	.word	0x3dd0b461
 8015988:	2e037073 	.word	0x2e037073
 801598c:	3ba3198a 	.word	0x3ba3198a
 8015990:	6dc9c883 	.word	0x6dc9c883
 8015994:	3fe45f30 	.word	0x3fe45f30
 8015998:	2e000000 	.word	0x2e000000
 801599c:	3ba3198a 	.word	0x3ba3198a
 80159a0:	252049c1 	.word	0x252049c1
 80159a4:	397b839a 	.word	0x397b839a
 80159a8:	3fe921fb 	.word	0x3fe921fb
 80159ac:	4002d97b 	.word	0x4002d97b
 80159b0:	3ff921fb 	.word	0x3ff921fb
 80159b4:	413921fb 	.word	0x413921fb
 80159b8:	3fe00000 	.word	0x3fe00000
 80159bc:	08017300 	.word	0x08017300
 80159c0:	7fefffff 	.word	0x7fefffff
 80159c4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80159c8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80159cc:	ee10 0a10 	vmov	r0, s0
 80159d0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80159d4:	ee10 6a10 	vmov	r6, s0
 80159d8:	460f      	mov	r7, r1
 80159da:	f7eb f8dd 	bl	8000b98 <__aeabi_d2iz>
 80159de:	f7ea fdc1 	bl	8000564 <__aeabi_i2d>
 80159e2:	4602      	mov	r2, r0
 80159e4:	460b      	mov	r3, r1
 80159e6:	4630      	mov	r0, r6
 80159e8:	4639      	mov	r1, r7
 80159ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80159ee:	f7ea fc6b 	bl	80002c8 <__aeabi_dsub>
 80159f2:	4b22      	ldr	r3, [pc, #136]	; (8015a7c <__ieee754_rem_pio2+0x40c>)
 80159f4:	2200      	movs	r2, #0
 80159f6:	f7ea fe1f 	bl	8000638 <__aeabi_dmul>
 80159fa:	460f      	mov	r7, r1
 80159fc:	4606      	mov	r6, r0
 80159fe:	f7eb f8cb 	bl	8000b98 <__aeabi_d2iz>
 8015a02:	f7ea fdaf 	bl	8000564 <__aeabi_i2d>
 8015a06:	4602      	mov	r2, r0
 8015a08:	460b      	mov	r3, r1
 8015a0a:	4630      	mov	r0, r6
 8015a0c:	4639      	mov	r1, r7
 8015a0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015a12:	f7ea fc59 	bl	80002c8 <__aeabi_dsub>
 8015a16:	4b19      	ldr	r3, [pc, #100]	; (8015a7c <__ieee754_rem_pio2+0x40c>)
 8015a18:	2200      	movs	r2, #0
 8015a1a:	f7ea fe0d 	bl	8000638 <__aeabi_dmul>
 8015a1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015a22:	ad04      	add	r5, sp, #16
 8015a24:	f04f 0803 	mov.w	r8, #3
 8015a28:	46a9      	mov	r9, r5
 8015a2a:	2600      	movs	r6, #0
 8015a2c:	2700      	movs	r7, #0
 8015a2e:	4632      	mov	r2, r6
 8015a30:	463b      	mov	r3, r7
 8015a32:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8015a36:	46c3      	mov	fp, r8
 8015a38:	3d08      	subs	r5, #8
 8015a3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8015a3e:	f7eb f863 	bl	8000b08 <__aeabi_dcmpeq>
 8015a42:	2800      	cmp	r0, #0
 8015a44:	d1f3      	bne.n	8015a2e <__ieee754_rem_pio2+0x3be>
 8015a46:	4b0e      	ldr	r3, [pc, #56]	; (8015a80 <__ieee754_rem_pio2+0x410>)
 8015a48:	9301      	str	r3, [sp, #4]
 8015a4a:	2302      	movs	r3, #2
 8015a4c:	9300      	str	r3, [sp, #0]
 8015a4e:	4622      	mov	r2, r4
 8015a50:	465b      	mov	r3, fp
 8015a52:	4651      	mov	r1, sl
 8015a54:	4648      	mov	r0, r9
 8015a56:	f000 f993 	bl	8015d80 <__kernel_rem_pio2>
 8015a5a:	9b02      	ldr	r3, [sp, #8]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	4683      	mov	fp, r0
 8015a60:	f6bf ae46 	bge.w	80156f0 <__ieee754_rem_pio2+0x80>
 8015a64:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015a68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015a6c:	f8ca 3004 	str.w	r3, [sl, #4]
 8015a70:	f8da 300c 	ldr.w	r3, [sl, #12]
 8015a74:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015a78:	e73a      	b.n	80158f0 <__ieee754_rem_pio2+0x280>
 8015a7a:	bf00      	nop
 8015a7c:	41700000 	.word	0x41700000
 8015a80:	08017380 	.word	0x08017380

08015a84 <__ieee754_sqrt>:
 8015a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a88:	ec55 4b10 	vmov	r4, r5, d0
 8015a8c:	4e56      	ldr	r6, [pc, #344]	; (8015be8 <__ieee754_sqrt+0x164>)
 8015a8e:	43ae      	bics	r6, r5
 8015a90:	ee10 0a10 	vmov	r0, s0
 8015a94:	ee10 3a10 	vmov	r3, s0
 8015a98:	4629      	mov	r1, r5
 8015a9a:	462a      	mov	r2, r5
 8015a9c:	d110      	bne.n	8015ac0 <__ieee754_sqrt+0x3c>
 8015a9e:	ee10 2a10 	vmov	r2, s0
 8015aa2:	462b      	mov	r3, r5
 8015aa4:	f7ea fdc8 	bl	8000638 <__aeabi_dmul>
 8015aa8:	4602      	mov	r2, r0
 8015aaa:	460b      	mov	r3, r1
 8015aac:	4620      	mov	r0, r4
 8015aae:	4629      	mov	r1, r5
 8015ab0:	f7ea fc0c 	bl	80002cc <__adddf3>
 8015ab4:	4604      	mov	r4, r0
 8015ab6:	460d      	mov	r5, r1
 8015ab8:	ec45 4b10 	vmov	d0, r4, r5
 8015abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ac0:	2d00      	cmp	r5, #0
 8015ac2:	dc10      	bgt.n	8015ae6 <__ieee754_sqrt+0x62>
 8015ac4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015ac8:	4330      	orrs	r0, r6
 8015aca:	d0f5      	beq.n	8015ab8 <__ieee754_sqrt+0x34>
 8015acc:	b15d      	cbz	r5, 8015ae6 <__ieee754_sqrt+0x62>
 8015ace:	ee10 2a10 	vmov	r2, s0
 8015ad2:	462b      	mov	r3, r5
 8015ad4:	ee10 0a10 	vmov	r0, s0
 8015ad8:	f7ea fbf6 	bl	80002c8 <__aeabi_dsub>
 8015adc:	4602      	mov	r2, r0
 8015ade:	460b      	mov	r3, r1
 8015ae0:	f7ea fed4 	bl	800088c <__aeabi_ddiv>
 8015ae4:	e7e6      	b.n	8015ab4 <__ieee754_sqrt+0x30>
 8015ae6:	1509      	asrs	r1, r1, #20
 8015ae8:	d076      	beq.n	8015bd8 <__ieee754_sqrt+0x154>
 8015aea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8015aee:	07ce      	lsls	r6, r1, #31
 8015af0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8015af4:	bf5e      	ittt	pl
 8015af6:	0fda      	lsrpl	r2, r3, #31
 8015af8:	005b      	lslpl	r3, r3, #1
 8015afa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8015afe:	0fda      	lsrs	r2, r3, #31
 8015b00:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8015b04:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8015b08:	2000      	movs	r0, #0
 8015b0a:	106d      	asrs	r5, r5, #1
 8015b0c:	005b      	lsls	r3, r3, #1
 8015b0e:	f04f 0e16 	mov.w	lr, #22
 8015b12:	4684      	mov	ip, r0
 8015b14:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015b18:	eb0c 0401 	add.w	r4, ip, r1
 8015b1c:	4294      	cmp	r4, r2
 8015b1e:	bfde      	ittt	le
 8015b20:	1b12      	suble	r2, r2, r4
 8015b22:	eb04 0c01 	addle.w	ip, r4, r1
 8015b26:	1840      	addle	r0, r0, r1
 8015b28:	0052      	lsls	r2, r2, #1
 8015b2a:	f1be 0e01 	subs.w	lr, lr, #1
 8015b2e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015b32:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015b36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015b3a:	d1ed      	bne.n	8015b18 <__ieee754_sqrt+0x94>
 8015b3c:	4671      	mov	r1, lr
 8015b3e:	2720      	movs	r7, #32
 8015b40:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015b44:	4562      	cmp	r2, ip
 8015b46:	eb04 060e 	add.w	r6, r4, lr
 8015b4a:	dc02      	bgt.n	8015b52 <__ieee754_sqrt+0xce>
 8015b4c:	d113      	bne.n	8015b76 <__ieee754_sqrt+0xf2>
 8015b4e:	429e      	cmp	r6, r3
 8015b50:	d811      	bhi.n	8015b76 <__ieee754_sqrt+0xf2>
 8015b52:	2e00      	cmp	r6, #0
 8015b54:	eb06 0e04 	add.w	lr, r6, r4
 8015b58:	da43      	bge.n	8015be2 <__ieee754_sqrt+0x15e>
 8015b5a:	f1be 0f00 	cmp.w	lr, #0
 8015b5e:	db40      	blt.n	8015be2 <__ieee754_sqrt+0x15e>
 8015b60:	f10c 0801 	add.w	r8, ip, #1
 8015b64:	eba2 020c 	sub.w	r2, r2, ip
 8015b68:	429e      	cmp	r6, r3
 8015b6a:	bf88      	it	hi
 8015b6c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015b70:	1b9b      	subs	r3, r3, r6
 8015b72:	4421      	add	r1, r4
 8015b74:	46c4      	mov	ip, r8
 8015b76:	0052      	lsls	r2, r2, #1
 8015b78:	3f01      	subs	r7, #1
 8015b7a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015b7e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015b82:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015b86:	d1dd      	bne.n	8015b44 <__ieee754_sqrt+0xc0>
 8015b88:	4313      	orrs	r3, r2
 8015b8a:	d006      	beq.n	8015b9a <__ieee754_sqrt+0x116>
 8015b8c:	1c4c      	adds	r4, r1, #1
 8015b8e:	bf13      	iteet	ne
 8015b90:	3101      	addne	r1, #1
 8015b92:	3001      	addeq	r0, #1
 8015b94:	4639      	moveq	r1, r7
 8015b96:	f021 0101 	bicne.w	r1, r1, #1
 8015b9a:	1043      	asrs	r3, r0, #1
 8015b9c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015ba0:	0849      	lsrs	r1, r1, #1
 8015ba2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8015ba6:	07c2      	lsls	r2, r0, #31
 8015ba8:	bf48      	it	mi
 8015baa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8015bae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8015bb2:	460c      	mov	r4, r1
 8015bb4:	463d      	mov	r5, r7
 8015bb6:	e77f      	b.n	8015ab8 <__ieee754_sqrt+0x34>
 8015bb8:	0ada      	lsrs	r2, r3, #11
 8015bba:	3815      	subs	r0, #21
 8015bbc:	055b      	lsls	r3, r3, #21
 8015bbe:	2a00      	cmp	r2, #0
 8015bc0:	d0fa      	beq.n	8015bb8 <__ieee754_sqrt+0x134>
 8015bc2:	02d7      	lsls	r7, r2, #11
 8015bc4:	d50a      	bpl.n	8015bdc <__ieee754_sqrt+0x158>
 8015bc6:	f1c1 0420 	rsb	r4, r1, #32
 8015bca:	fa23 f404 	lsr.w	r4, r3, r4
 8015bce:	1e4d      	subs	r5, r1, #1
 8015bd0:	408b      	lsls	r3, r1
 8015bd2:	4322      	orrs	r2, r4
 8015bd4:	1b41      	subs	r1, r0, r5
 8015bd6:	e788      	b.n	8015aea <__ieee754_sqrt+0x66>
 8015bd8:	4608      	mov	r0, r1
 8015bda:	e7f0      	b.n	8015bbe <__ieee754_sqrt+0x13a>
 8015bdc:	0052      	lsls	r2, r2, #1
 8015bde:	3101      	adds	r1, #1
 8015be0:	e7ef      	b.n	8015bc2 <__ieee754_sqrt+0x13e>
 8015be2:	46e0      	mov	r8, ip
 8015be4:	e7be      	b.n	8015b64 <__ieee754_sqrt+0xe0>
 8015be6:	bf00      	nop
 8015be8:	7ff00000 	.word	0x7ff00000
 8015bec:	00000000 	.word	0x00000000

08015bf0 <__kernel_cos>:
 8015bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bf4:	ec57 6b10 	vmov	r6, r7, d0
 8015bf8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8015bfc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8015c00:	ed8d 1b00 	vstr	d1, [sp]
 8015c04:	da07      	bge.n	8015c16 <__kernel_cos+0x26>
 8015c06:	ee10 0a10 	vmov	r0, s0
 8015c0a:	4639      	mov	r1, r7
 8015c0c:	f7ea ffc4 	bl	8000b98 <__aeabi_d2iz>
 8015c10:	2800      	cmp	r0, #0
 8015c12:	f000 8088 	beq.w	8015d26 <__kernel_cos+0x136>
 8015c16:	4632      	mov	r2, r6
 8015c18:	463b      	mov	r3, r7
 8015c1a:	4630      	mov	r0, r6
 8015c1c:	4639      	mov	r1, r7
 8015c1e:	f7ea fd0b 	bl	8000638 <__aeabi_dmul>
 8015c22:	4b51      	ldr	r3, [pc, #324]	; (8015d68 <__kernel_cos+0x178>)
 8015c24:	2200      	movs	r2, #0
 8015c26:	4604      	mov	r4, r0
 8015c28:	460d      	mov	r5, r1
 8015c2a:	f7ea fd05 	bl	8000638 <__aeabi_dmul>
 8015c2e:	a340      	add	r3, pc, #256	; (adr r3, 8015d30 <__kernel_cos+0x140>)
 8015c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c34:	4682      	mov	sl, r0
 8015c36:	468b      	mov	fp, r1
 8015c38:	4620      	mov	r0, r4
 8015c3a:	4629      	mov	r1, r5
 8015c3c:	f7ea fcfc 	bl	8000638 <__aeabi_dmul>
 8015c40:	a33d      	add	r3, pc, #244	; (adr r3, 8015d38 <__kernel_cos+0x148>)
 8015c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c46:	f7ea fb41 	bl	80002cc <__adddf3>
 8015c4a:	4622      	mov	r2, r4
 8015c4c:	462b      	mov	r3, r5
 8015c4e:	f7ea fcf3 	bl	8000638 <__aeabi_dmul>
 8015c52:	a33b      	add	r3, pc, #236	; (adr r3, 8015d40 <__kernel_cos+0x150>)
 8015c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c58:	f7ea fb36 	bl	80002c8 <__aeabi_dsub>
 8015c5c:	4622      	mov	r2, r4
 8015c5e:	462b      	mov	r3, r5
 8015c60:	f7ea fcea 	bl	8000638 <__aeabi_dmul>
 8015c64:	a338      	add	r3, pc, #224	; (adr r3, 8015d48 <__kernel_cos+0x158>)
 8015c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c6a:	f7ea fb2f 	bl	80002cc <__adddf3>
 8015c6e:	4622      	mov	r2, r4
 8015c70:	462b      	mov	r3, r5
 8015c72:	f7ea fce1 	bl	8000638 <__aeabi_dmul>
 8015c76:	a336      	add	r3, pc, #216	; (adr r3, 8015d50 <__kernel_cos+0x160>)
 8015c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c7c:	f7ea fb24 	bl	80002c8 <__aeabi_dsub>
 8015c80:	4622      	mov	r2, r4
 8015c82:	462b      	mov	r3, r5
 8015c84:	f7ea fcd8 	bl	8000638 <__aeabi_dmul>
 8015c88:	a333      	add	r3, pc, #204	; (adr r3, 8015d58 <__kernel_cos+0x168>)
 8015c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c8e:	f7ea fb1d 	bl	80002cc <__adddf3>
 8015c92:	4622      	mov	r2, r4
 8015c94:	462b      	mov	r3, r5
 8015c96:	f7ea fccf 	bl	8000638 <__aeabi_dmul>
 8015c9a:	4622      	mov	r2, r4
 8015c9c:	462b      	mov	r3, r5
 8015c9e:	f7ea fccb 	bl	8000638 <__aeabi_dmul>
 8015ca2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015ca6:	4604      	mov	r4, r0
 8015ca8:	460d      	mov	r5, r1
 8015caa:	4630      	mov	r0, r6
 8015cac:	4639      	mov	r1, r7
 8015cae:	f7ea fcc3 	bl	8000638 <__aeabi_dmul>
 8015cb2:	460b      	mov	r3, r1
 8015cb4:	4602      	mov	r2, r0
 8015cb6:	4629      	mov	r1, r5
 8015cb8:	4620      	mov	r0, r4
 8015cba:	f7ea fb05 	bl	80002c8 <__aeabi_dsub>
 8015cbe:	4b2b      	ldr	r3, [pc, #172]	; (8015d6c <__kernel_cos+0x17c>)
 8015cc0:	4598      	cmp	r8, r3
 8015cc2:	4606      	mov	r6, r0
 8015cc4:	460f      	mov	r7, r1
 8015cc6:	dc10      	bgt.n	8015cea <__kernel_cos+0xfa>
 8015cc8:	4602      	mov	r2, r0
 8015cca:	460b      	mov	r3, r1
 8015ccc:	4650      	mov	r0, sl
 8015cce:	4659      	mov	r1, fp
 8015cd0:	f7ea fafa 	bl	80002c8 <__aeabi_dsub>
 8015cd4:	460b      	mov	r3, r1
 8015cd6:	4926      	ldr	r1, [pc, #152]	; (8015d70 <__kernel_cos+0x180>)
 8015cd8:	4602      	mov	r2, r0
 8015cda:	2000      	movs	r0, #0
 8015cdc:	f7ea faf4 	bl	80002c8 <__aeabi_dsub>
 8015ce0:	ec41 0b10 	vmov	d0, r0, r1
 8015ce4:	b003      	add	sp, #12
 8015ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cea:	4b22      	ldr	r3, [pc, #136]	; (8015d74 <__kernel_cos+0x184>)
 8015cec:	4920      	ldr	r1, [pc, #128]	; (8015d70 <__kernel_cos+0x180>)
 8015cee:	4598      	cmp	r8, r3
 8015cf0:	bfcc      	ite	gt
 8015cf2:	4d21      	ldrgt	r5, [pc, #132]	; (8015d78 <__kernel_cos+0x188>)
 8015cf4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8015cf8:	2400      	movs	r4, #0
 8015cfa:	4622      	mov	r2, r4
 8015cfc:	462b      	mov	r3, r5
 8015cfe:	2000      	movs	r0, #0
 8015d00:	f7ea fae2 	bl	80002c8 <__aeabi_dsub>
 8015d04:	4622      	mov	r2, r4
 8015d06:	4680      	mov	r8, r0
 8015d08:	4689      	mov	r9, r1
 8015d0a:	462b      	mov	r3, r5
 8015d0c:	4650      	mov	r0, sl
 8015d0e:	4659      	mov	r1, fp
 8015d10:	f7ea fada 	bl	80002c8 <__aeabi_dsub>
 8015d14:	4632      	mov	r2, r6
 8015d16:	463b      	mov	r3, r7
 8015d18:	f7ea fad6 	bl	80002c8 <__aeabi_dsub>
 8015d1c:	4602      	mov	r2, r0
 8015d1e:	460b      	mov	r3, r1
 8015d20:	4640      	mov	r0, r8
 8015d22:	4649      	mov	r1, r9
 8015d24:	e7da      	b.n	8015cdc <__kernel_cos+0xec>
 8015d26:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8015d60 <__kernel_cos+0x170>
 8015d2a:	e7db      	b.n	8015ce4 <__kernel_cos+0xf4>
 8015d2c:	f3af 8000 	nop.w
 8015d30:	be8838d4 	.word	0xbe8838d4
 8015d34:	bda8fae9 	.word	0xbda8fae9
 8015d38:	bdb4b1c4 	.word	0xbdb4b1c4
 8015d3c:	3e21ee9e 	.word	0x3e21ee9e
 8015d40:	809c52ad 	.word	0x809c52ad
 8015d44:	3e927e4f 	.word	0x3e927e4f
 8015d48:	19cb1590 	.word	0x19cb1590
 8015d4c:	3efa01a0 	.word	0x3efa01a0
 8015d50:	16c15177 	.word	0x16c15177
 8015d54:	3f56c16c 	.word	0x3f56c16c
 8015d58:	5555554c 	.word	0x5555554c
 8015d5c:	3fa55555 	.word	0x3fa55555
 8015d60:	00000000 	.word	0x00000000
 8015d64:	3ff00000 	.word	0x3ff00000
 8015d68:	3fe00000 	.word	0x3fe00000
 8015d6c:	3fd33332 	.word	0x3fd33332
 8015d70:	3ff00000 	.word	0x3ff00000
 8015d74:	3fe90000 	.word	0x3fe90000
 8015d78:	3fd20000 	.word	0x3fd20000
 8015d7c:	00000000 	.word	0x00000000

08015d80 <__kernel_rem_pio2>:
 8015d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d84:	ed2d 8b02 	vpush	{d8}
 8015d88:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8015d8c:	f112 0f14 	cmn.w	r2, #20
 8015d90:	9308      	str	r3, [sp, #32]
 8015d92:	9101      	str	r1, [sp, #4]
 8015d94:	4bc6      	ldr	r3, [pc, #792]	; (80160b0 <__kernel_rem_pio2+0x330>)
 8015d96:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8015d98:	9009      	str	r0, [sp, #36]	; 0x24
 8015d9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015d9e:	9304      	str	r3, [sp, #16]
 8015da0:	9b08      	ldr	r3, [sp, #32]
 8015da2:	f103 33ff 	add.w	r3, r3, #4294967295
 8015da6:	bfa8      	it	ge
 8015da8:	1ed4      	subge	r4, r2, #3
 8015daa:	9306      	str	r3, [sp, #24]
 8015dac:	bfb2      	itee	lt
 8015dae:	2400      	movlt	r4, #0
 8015db0:	2318      	movge	r3, #24
 8015db2:	fb94 f4f3 	sdivge	r4, r4, r3
 8015db6:	f06f 0317 	mvn.w	r3, #23
 8015dba:	fb04 3303 	mla	r3, r4, r3, r3
 8015dbe:	eb03 0a02 	add.w	sl, r3, r2
 8015dc2:	9b04      	ldr	r3, [sp, #16]
 8015dc4:	9a06      	ldr	r2, [sp, #24]
 8015dc6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80160a0 <__kernel_rem_pio2+0x320>
 8015dca:	eb03 0802 	add.w	r8, r3, r2
 8015dce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8015dd0:	1aa7      	subs	r7, r4, r2
 8015dd2:	ae20      	add	r6, sp, #128	; 0x80
 8015dd4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8015dd8:	2500      	movs	r5, #0
 8015dda:	4545      	cmp	r5, r8
 8015ddc:	dd18      	ble.n	8015e10 <__kernel_rem_pio2+0x90>
 8015dde:	9b08      	ldr	r3, [sp, #32]
 8015de0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8015de4:	aa20      	add	r2, sp, #128	; 0x80
 8015de6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80160a0 <__kernel_rem_pio2+0x320>
 8015dea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8015dee:	f1c3 0301 	rsb	r3, r3, #1
 8015df2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8015df6:	9307      	str	r3, [sp, #28]
 8015df8:	9b07      	ldr	r3, [sp, #28]
 8015dfa:	9a04      	ldr	r2, [sp, #16]
 8015dfc:	4443      	add	r3, r8
 8015dfe:	429a      	cmp	r2, r3
 8015e00:	db2f      	blt.n	8015e62 <__kernel_rem_pio2+0xe2>
 8015e02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015e06:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8015e0a:	462f      	mov	r7, r5
 8015e0c:	2600      	movs	r6, #0
 8015e0e:	e01b      	b.n	8015e48 <__kernel_rem_pio2+0xc8>
 8015e10:	42ef      	cmn	r7, r5
 8015e12:	d407      	bmi.n	8015e24 <__kernel_rem_pio2+0xa4>
 8015e14:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8015e18:	f7ea fba4 	bl	8000564 <__aeabi_i2d>
 8015e1c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8015e20:	3501      	adds	r5, #1
 8015e22:	e7da      	b.n	8015dda <__kernel_rem_pio2+0x5a>
 8015e24:	ec51 0b18 	vmov	r0, r1, d8
 8015e28:	e7f8      	b.n	8015e1c <__kernel_rem_pio2+0x9c>
 8015e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015e2e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8015e32:	f7ea fc01 	bl	8000638 <__aeabi_dmul>
 8015e36:	4602      	mov	r2, r0
 8015e38:	460b      	mov	r3, r1
 8015e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015e3e:	f7ea fa45 	bl	80002cc <__adddf3>
 8015e42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015e46:	3601      	adds	r6, #1
 8015e48:	9b06      	ldr	r3, [sp, #24]
 8015e4a:	429e      	cmp	r6, r3
 8015e4c:	f1a7 0708 	sub.w	r7, r7, #8
 8015e50:	ddeb      	ble.n	8015e2a <__kernel_rem_pio2+0xaa>
 8015e52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015e56:	3508      	adds	r5, #8
 8015e58:	ecab 7b02 	vstmia	fp!, {d7}
 8015e5c:	f108 0801 	add.w	r8, r8, #1
 8015e60:	e7ca      	b.n	8015df8 <__kernel_rem_pio2+0x78>
 8015e62:	9b04      	ldr	r3, [sp, #16]
 8015e64:	aa0c      	add	r2, sp, #48	; 0x30
 8015e66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015e6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e6c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8015e6e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015e72:	9c04      	ldr	r4, [sp, #16]
 8015e74:	930a      	str	r3, [sp, #40]	; 0x28
 8015e76:	ab98      	add	r3, sp, #608	; 0x260
 8015e78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015e7c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8015e80:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8015e84:	f8cd b008 	str.w	fp, [sp, #8]
 8015e88:	4625      	mov	r5, r4
 8015e8a:	2d00      	cmp	r5, #0
 8015e8c:	dc78      	bgt.n	8015f80 <__kernel_rem_pio2+0x200>
 8015e8e:	ec47 6b10 	vmov	d0, r6, r7
 8015e92:	4650      	mov	r0, sl
 8015e94:	f000 fc94 	bl	80167c0 <scalbn>
 8015e98:	ec57 6b10 	vmov	r6, r7, d0
 8015e9c:	2200      	movs	r2, #0
 8015e9e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8015ea2:	ee10 0a10 	vmov	r0, s0
 8015ea6:	4639      	mov	r1, r7
 8015ea8:	f7ea fbc6 	bl	8000638 <__aeabi_dmul>
 8015eac:	ec41 0b10 	vmov	d0, r0, r1
 8015eb0:	f000 fb72 	bl	8016598 <floor>
 8015eb4:	4b7f      	ldr	r3, [pc, #508]	; (80160b4 <__kernel_rem_pio2+0x334>)
 8015eb6:	ec51 0b10 	vmov	r0, r1, d0
 8015eba:	2200      	movs	r2, #0
 8015ebc:	f7ea fbbc 	bl	8000638 <__aeabi_dmul>
 8015ec0:	4602      	mov	r2, r0
 8015ec2:	460b      	mov	r3, r1
 8015ec4:	4630      	mov	r0, r6
 8015ec6:	4639      	mov	r1, r7
 8015ec8:	f7ea f9fe 	bl	80002c8 <__aeabi_dsub>
 8015ecc:	460f      	mov	r7, r1
 8015ece:	4606      	mov	r6, r0
 8015ed0:	f7ea fe62 	bl	8000b98 <__aeabi_d2iz>
 8015ed4:	9007      	str	r0, [sp, #28]
 8015ed6:	f7ea fb45 	bl	8000564 <__aeabi_i2d>
 8015eda:	4602      	mov	r2, r0
 8015edc:	460b      	mov	r3, r1
 8015ede:	4630      	mov	r0, r6
 8015ee0:	4639      	mov	r1, r7
 8015ee2:	f7ea f9f1 	bl	80002c8 <__aeabi_dsub>
 8015ee6:	f1ba 0f00 	cmp.w	sl, #0
 8015eea:	4606      	mov	r6, r0
 8015eec:	460f      	mov	r7, r1
 8015eee:	dd70      	ble.n	8015fd2 <__kernel_rem_pio2+0x252>
 8015ef0:	1e62      	subs	r2, r4, #1
 8015ef2:	ab0c      	add	r3, sp, #48	; 0x30
 8015ef4:	9d07      	ldr	r5, [sp, #28]
 8015ef6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8015efa:	f1ca 0118 	rsb	r1, sl, #24
 8015efe:	fa40 f301 	asr.w	r3, r0, r1
 8015f02:	441d      	add	r5, r3
 8015f04:	408b      	lsls	r3, r1
 8015f06:	1ac0      	subs	r0, r0, r3
 8015f08:	ab0c      	add	r3, sp, #48	; 0x30
 8015f0a:	9507      	str	r5, [sp, #28]
 8015f0c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8015f10:	f1ca 0317 	rsb	r3, sl, #23
 8015f14:	fa40 f303 	asr.w	r3, r0, r3
 8015f18:	9302      	str	r3, [sp, #8]
 8015f1a:	9b02      	ldr	r3, [sp, #8]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	dd66      	ble.n	8015fee <__kernel_rem_pio2+0x26e>
 8015f20:	9b07      	ldr	r3, [sp, #28]
 8015f22:	2200      	movs	r2, #0
 8015f24:	3301      	adds	r3, #1
 8015f26:	9307      	str	r3, [sp, #28]
 8015f28:	4615      	mov	r5, r2
 8015f2a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8015f2e:	4294      	cmp	r4, r2
 8015f30:	f300 8099 	bgt.w	8016066 <__kernel_rem_pio2+0x2e6>
 8015f34:	f1ba 0f00 	cmp.w	sl, #0
 8015f38:	dd07      	ble.n	8015f4a <__kernel_rem_pio2+0x1ca>
 8015f3a:	f1ba 0f01 	cmp.w	sl, #1
 8015f3e:	f000 80a5 	beq.w	801608c <__kernel_rem_pio2+0x30c>
 8015f42:	f1ba 0f02 	cmp.w	sl, #2
 8015f46:	f000 80c1 	beq.w	80160cc <__kernel_rem_pio2+0x34c>
 8015f4a:	9b02      	ldr	r3, [sp, #8]
 8015f4c:	2b02      	cmp	r3, #2
 8015f4e:	d14e      	bne.n	8015fee <__kernel_rem_pio2+0x26e>
 8015f50:	4632      	mov	r2, r6
 8015f52:	463b      	mov	r3, r7
 8015f54:	4958      	ldr	r1, [pc, #352]	; (80160b8 <__kernel_rem_pio2+0x338>)
 8015f56:	2000      	movs	r0, #0
 8015f58:	f7ea f9b6 	bl	80002c8 <__aeabi_dsub>
 8015f5c:	4606      	mov	r6, r0
 8015f5e:	460f      	mov	r7, r1
 8015f60:	2d00      	cmp	r5, #0
 8015f62:	d044      	beq.n	8015fee <__kernel_rem_pio2+0x26e>
 8015f64:	4650      	mov	r0, sl
 8015f66:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80160a8 <__kernel_rem_pio2+0x328>
 8015f6a:	f000 fc29 	bl	80167c0 <scalbn>
 8015f6e:	4630      	mov	r0, r6
 8015f70:	4639      	mov	r1, r7
 8015f72:	ec53 2b10 	vmov	r2, r3, d0
 8015f76:	f7ea f9a7 	bl	80002c8 <__aeabi_dsub>
 8015f7a:	4606      	mov	r6, r0
 8015f7c:	460f      	mov	r7, r1
 8015f7e:	e036      	b.n	8015fee <__kernel_rem_pio2+0x26e>
 8015f80:	4b4e      	ldr	r3, [pc, #312]	; (80160bc <__kernel_rem_pio2+0x33c>)
 8015f82:	2200      	movs	r2, #0
 8015f84:	4630      	mov	r0, r6
 8015f86:	4639      	mov	r1, r7
 8015f88:	f7ea fb56 	bl	8000638 <__aeabi_dmul>
 8015f8c:	f7ea fe04 	bl	8000b98 <__aeabi_d2iz>
 8015f90:	f7ea fae8 	bl	8000564 <__aeabi_i2d>
 8015f94:	4b4a      	ldr	r3, [pc, #296]	; (80160c0 <__kernel_rem_pio2+0x340>)
 8015f96:	2200      	movs	r2, #0
 8015f98:	4680      	mov	r8, r0
 8015f9a:	4689      	mov	r9, r1
 8015f9c:	f7ea fb4c 	bl	8000638 <__aeabi_dmul>
 8015fa0:	4602      	mov	r2, r0
 8015fa2:	460b      	mov	r3, r1
 8015fa4:	4630      	mov	r0, r6
 8015fa6:	4639      	mov	r1, r7
 8015fa8:	f7ea f98e 	bl	80002c8 <__aeabi_dsub>
 8015fac:	f7ea fdf4 	bl	8000b98 <__aeabi_d2iz>
 8015fb0:	9b02      	ldr	r3, [sp, #8]
 8015fb2:	f843 0b04 	str.w	r0, [r3], #4
 8015fb6:	3d01      	subs	r5, #1
 8015fb8:	9302      	str	r3, [sp, #8]
 8015fba:	ab70      	add	r3, sp, #448	; 0x1c0
 8015fbc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fc4:	4640      	mov	r0, r8
 8015fc6:	4649      	mov	r1, r9
 8015fc8:	f7ea f980 	bl	80002cc <__adddf3>
 8015fcc:	4606      	mov	r6, r0
 8015fce:	460f      	mov	r7, r1
 8015fd0:	e75b      	b.n	8015e8a <__kernel_rem_pio2+0x10a>
 8015fd2:	d105      	bne.n	8015fe0 <__kernel_rem_pio2+0x260>
 8015fd4:	1e63      	subs	r3, r4, #1
 8015fd6:	aa0c      	add	r2, sp, #48	; 0x30
 8015fd8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015fdc:	15c3      	asrs	r3, r0, #23
 8015fde:	e79b      	b.n	8015f18 <__kernel_rem_pio2+0x198>
 8015fe0:	4b38      	ldr	r3, [pc, #224]	; (80160c4 <__kernel_rem_pio2+0x344>)
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	f7ea fdae 	bl	8000b44 <__aeabi_dcmpge>
 8015fe8:	2800      	cmp	r0, #0
 8015fea:	d139      	bne.n	8016060 <__kernel_rem_pio2+0x2e0>
 8015fec:	9002      	str	r0, [sp, #8]
 8015fee:	2200      	movs	r2, #0
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	4630      	mov	r0, r6
 8015ff4:	4639      	mov	r1, r7
 8015ff6:	f7ea fd87 	bl	8000b08 <__aeabi_dcmpeq>
 8015ffa:	2800      	cmp	r0, #0
 8015ffc:	f000 80b4 	beq.w	8016168 <__kernel_rem_pio2+0x3e8>
 8016000:	f104 3bff 	add.w	fp, r4, #4294967295
 8016004:	465b      	mov	r3, fp
 8016006:	2200      	movs	r2, #0
 8016008:	9904      	ldr	r1, [sp, #16]
 801600a:	428b      	cmp	r3, r1
 801600c:	da65      	bge.n	80160da <__kernel_rem_pio2+0x35a>
 801600e:	2a00      	cmp	r2, #0
 8016010:	d07b      	beq.n	801610a <__kernel_rem_pio2+0x38a>
 8016012:	ab0c      	add	r3, sp, #48	; 0x30
 8016014:	f1aa 0a18 	sub.w	sl, sl, #24
 8016018:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801601c:	2b00      	cmp	r3, #0
 801601e:	f000 80a0 	beq.w	8016162 <__kernel_rem_pio2+0x3e2>
 8016022:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80160a8 <__kernel_rem_pio2+0x328>
 8016026:	4650      	mov	r0, sl
 8016028:	f000 fbca 	bl	80167c0 <scalbn>
 801602c:	4f23      	ldr	r7, [pc, #140]	; (80160bc <__kernel_rem_pio2+0x33c>)
 801602e:	ec55 4b10 	vmov	r4, r5, d0
 8016032:	46d8      	mov	r8, fp
 8016034:	2600      	movs	r6, #0
 8016036:	f1b8 0f00 	cmp.w	r8, #0
 801603a:	f280 80cf 	bge.w	80161dc <__kernel_rem_pio2+0x45c>
 801603e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80160a0 <__kernel_rem_pio2+0x320>
 8016042:	465f      	mov	r7, fp
 8016044:	f04f 0800 	mov.w	r8, #0
 8016048:	2f00      	cmp	r7, #0
 801604a:	f2c0 80fd 	blt.w	8016248 <__kernel_rem_pio2+0x4c8>
 801604e:	ab70      	add	r3, sp, #448	; 0x1c0
 8016050:	f8df a074 	ldr.w	sl, [pc, #116]	; 80160c8 <__kernel_rem_pio2+0x348>
 8016054:	ec55 4b18 	vmov	r4, r5, d8
 8016058:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801605c:	2600      	movs	r6, #0
 801605e:	e0e5      	b.n	801622c <__kernel_rem_pio2+0x4ac>
 8016060:	2302      	movs	r3, #2
 8016062:	9302      	str	r3, [sp, #8]
 8016064:	e75c      	b.n	8015f20 <__kernel_rem_pio2+0x1a0>
 8016066:	f8db 3000 	ldr.w	r3, [fp]
 801606a:	b955      	cbnz	r5, 8016082 <__kernel_rem_pio2+0x302>
 801606c:	b123      	cbz	r3, 8016078 <__kernel_rem_pio2+0x2f8>
 801606e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8016072:	f8cb 3000 	str.w	r3, [fp]
 8016076:	2301      	movs	r3, #1
 8016078:	3201      	adds	r2, #1
 801607a:	f10b 0b04 	add.w	fp, fp, #4
 801607e:	461d      	mov	r5, r3
 8016080:	e755      	b.n	8015f2e <__kernel_rem_pio2+0x1ae>
 8016082:	1acb      	subs	r3, r1, r3
 8016084:	f8cb 3000 	str.w	r3, [fp]
 8016088:	462b      	mov	r3, r5
 801608a:	e7f5      	b.n	8016078 <__kernel_rem_pio2+0x2f8>
 801608c:	1e62      	subs	r2, r4, #1
 801608e:	ab0c      	add	r3, sp, #48	; 0x30
 8016090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016094:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016098:	a90c      	add	r1, sp, #48	; 0x30
 801609a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801609e:	e754      	b.n	8015f4a <__kernel_rem_pio2+0x1ca>
	...
 80160ac:	3ff00000 	.word	0x3ff00000
 80160b0:	080174c8 	.word	0x080174c8
 80160b4:	40200000 	.word	0x40200000
 80160b8:	3ff00000 	.word	0x3ff00000
 80160bc:	3e700000 	.word	0x3e700000
 80160c0:	41700000 	.word	0x41700000
 80160c4:	3fe00000 	.word	0x3fe00000
 80160c8:	08017488 	.word	0x08017488
 80160cc:	1e62      	subs	r2, r4, #1
 80160ce:	ab0c      	add	r3, sp, #48	; 0x30
 80160d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80160d8:	e7de      	b.n	8016098 <__kernel_rem_pio2+0x318>
 80160da:	a90c      	add	r1, sp, #48	; 0x30
 80160dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80160e0:	3b01      	subs	r3, #1
 80160e2:	430a      	orrs	r2, r1
 80160e4:	e790      	b.n	8016008 <__kernel_rem_pio2+0x288>
 80160e6:	3301      	adds	r3, #1
 80160e8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80160ec:	2900      	cmp	r1, #0
 80160ee:	d0fa      	beq.n	80160e6 <__kernel_rem_pio2+0x366>
 80160f0:	9a08      	ldr	r2, [sp, #32]
 80160f2:	18e3      	adds	r3, r4, r3
 80160f4:	18a6      	adds	r6, r4, r2
 80160f6:	aa20      	add	r2, sp, #128	; 0x80
 80160f8:	1c65      	adds	r5, r4, #1
 80160fa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80160fe:	9302      	str	r3, [sp, #8]
 8016100:	9b02      	ldr	r3, [sp, #8]
 8016102:	42ab      	cmp	r3, r5
 8016104:	da04      	bge.n	8016110 <__kernel_rem_pio2+0x390>
 8016106:	461c      	mov	r4, r3
 8016108:	e6b5      	b.n	8015e76 <__kernel_rem_pio2+0xf6>
 801610a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801610c:	2301      	movs	r3, #1
 801610e:	e7eb      	b.n	80160e8 <__kernel_rem_pio2+0x368>
 8016110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016112:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016116:	f7ea fa25 	bl	8000564 <__aeabi_i2d>
 801611a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801611e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016120:	46b3      	mov	fp, r6
 8016122:	461c      	mov	r4, r3
 8016124:	2700      	movs	r7, #0
 8016126:	f04f 0800 	mov.w	r8, #0
 801612a:	f04f 0900 	mov.w	r9, #0
 801612e:	9b06      	ldr	r3, [sp, #24]
 8016130:	429f      	cmp	r7, r3
 8016132:	dd06      	ble.n	8016142 <__kernel_rem_pio2+0x3c2>
 8016134:	ab70      	add	r3, sp, #448	; 0x1c0
 8016136:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801613a:	e9c3 8900 	strd	r8, r9, [r3]
 801613e:	3501      	adds	r5, #1
 8016140:	e7de      	b.n	8016100 <__kernel_rem_pio2+0x380>
 8016142:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8016146:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801614a:	f7ea fa75 	bl	8000638 <__aeabi_dmul>
 801614e:	4602      	mov	r2, r0
 8016150:	460b      	mov	r3, r1
 8016152:	4640      	mov	r0, r8
 8016154:	4649      	mov	r1, r9
 8016156:	f7ea f8b9 	bl	80002cc <__adddf3>
 801615a:	3701      	adds	r7, #1
 801615c:	4680      	mov	r8, r0
 801615e:	4689      	mov	r9, r1
 8016160:	e7e5      	b.n	801612e <__kernel_rem_pio2+0x3ae>
 8016162:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016166:	e754      	b.n	8016012 <__kernel_rem_pio2+0x292>
 8016168:	ec47 6b10 	vmov	d0, r6, r7
 801616c:	f1ca 0000 	rsb	r0, sl, #0
 8016170:	f000 fb26 	bl	80167c0 <scalbn>
 8016174:	ec57 6b10 	vmov	r6, r7, d0
 8016178:	4b9f      	ldr	r3, [pc, #636]	; (80163f8 <__kernel_rem_pio2+0x678>)
 801617a:	ee10 0a10 	vmov	r0, s0
 801617e:	2200      	movs	r2, #0
 8016180:	4639      	mov	r1, r7
 8016182:	f7ea fcdf 	bl	8000b44 <__aeabi_dcmpge>
 8016186:	b300      	cbz	r0, 80161ca <__kernel_rem_pio2+0x44a>
 8016188:	4b9c      	ldr	r3, [pc, #624]	; (80163fc <__kernel_rem_pio2+0x67c>)
 801618a:	2200      	movs	r2, #0
 801618c:	4630      	mov	r0, r6
 801618e:	4639      	mov	r1, r7
 8016190:	f7ea fa52 	bl	8000638 <__aeabi_dmul>
 8016194:	f7ea fd00 	bl	8000b98 <__aeabi_d2iz>
 8016198:	4605      	mov	r5, r0
 801619a:	f7ea f9e3 	bl	8000564 <__aeabi_i2d>
 801619e:	4b96      	ldr	r3, [pc, #600]	; (80163f8 <__kernel_rem_pio2+0x678>)
 80161a0:	2200      	movs	r2, #0
 80161a2:	f7ea fa49 	bl	8000638 <__aeabi_dmul>
 80161a6:	460b      	mov	r3, r1
 80161a8:	4602      	mov	r2, r0
 80161aa:	4639      	mov	r1, r7
 80161ac:	4630      	mov	r0, r6
 80161ae:	f7ea f88b 	bl	80002c8 <__aeabi_dsub>
 80161b2:	f7ea fcf1 	bl	8000b98 <__aeabi_d2iz>
 80161b6:	f104 0b01 	add.w	fp, r4, #1
 80161ba:	ab0c      	add	r3, sp, #48	; 0x30
 80161bc:	f10a 0a18 	add.w	sl, sl, #24
 80161c0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80161c4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80161c8:	e72b      	b.n	8016022 <__kernel_rem_pio2+0x2a2>
 80161ca:	4630      	mov	r0, r6
 80161cc:	4639      	mov	r1, r7
 80161ce:	f7ea fce3 	bl	8000b98 <__aeabi_d2iz>
 80161d2:	ab0c      	add	r3, sp, #48	; 0x30
 80161d4:	46a3      	mov	fp, r4
 80161d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80161da:	e722      	b.n	8016022 <__kernel_rem_pio2+0x2a2>
 80161dc:	ab70      	add	r3, sp, #448	; 0x1c0
 80161de:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80161e2:	ab0c      	add	r3, sp, #48	; 0x30
 80161e4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80161e8:	f7ea f9bc 	bl	8000564 <__aeabi_i2d>
 80161ec:	4622      	mov	r2, r4
 80161ee:	462b      	mov	r3, r5
 80161f0:	f7ea fa22 	bl	8000638 <__aeabi_dmul>
 80161f4:	4632      	mov	r2, r6
 80161f6:	e9c9 0100 	strd	r0, r1, [r9]
 80161fa:	463b      	mov	r3, r7
 80161fc:	4620      	mov	r0, r4
 80161fe:	4629      	mov	r1, r5
 8016200:	f7ea fa1a 	bl	8000638 <__aeabi_dmul>
 8016204:	f108 38ff 	add.w	r8, r8, #4294967295
 8016208:	4604      	mov	r4, r0
 801620a:	460d      	mov	r5, r1
 801620c:	e713      	b.n	8016036 <__kernel_rem_pio2+0x2b6>
 801620e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8016212:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8016216:	f7ea fa0f 	bl	8000638 <__aeabi_dmul>
 801621a:	4602      	mov	r2, r0
 801621c:	460b      	mov	r3, r1
 801621e:	4620      	mov	r0, r4
 8016220:	4629      	mov	r1, r5
 8016222:	f7ea f853 	bl	80002cc <__adddf3>
 8016226:	3601      	adds	r6, #1
 8016228:	4604      	mov	r4, r0
 801622a:	460d      	mov	r5, r1
 801622c:	9b04      	ldr	r3, [sp, #16]
 801622e:	429e      	cmp	r6, r3
 8016230:	dc01      	bgt.n	8016236 <__kernel_rem_pio2+0x4b6>
 8016232:	45b0      	cmp	r8, r6
 8016234:	daeb      	bge.n	801620e <__kernel_rem_pio2+0x48e>
 8016236:	ab48      	add	r3, sp, #288	; 0x120
 8016238:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801623c:	e9c3 4500 	strd	r4, r5, [r3]
 8016240:	3f01      	subs	r7, #1
 8016242:	f108 0801 	add.w	r8, r8, #1
 8016246:	e6ff      	b.n	8016048 <__kernel_rem_pio2+0x2c8>
 8016248:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801624a:	2b02      	cmp	r3, #2
 801624c:	dc0b      	bgt.n	8016266 <__kernel_rem_pio2+0x4e6>
 801624e:	2b00      	cmp	r3, #0
 8016250:	dc6e      	bgt.n	8016330 <__kernel_rem_pio2+0x5b0>
 8016252:	d045      	beq.n	80162e0 <__kernel_rem_pio2+0x560>
 8016254:	9b07      	ldr	r3, [sp, #28]
 8016256:	f003 0007 	and.w	r0, r3, #7
 801625a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801625e:	ecbd 8b02 	vpop	{d8}
 8016262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016266:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8016268:	2b03      	cmp	r3, #3
 801626a:	d1f3      	bne.n	8016254 <__kernel_rem_pio2+0x4d4>
 801626c:	ab48      	add	r3, sp, #288	; 0x120
 801626e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8016272:	46d0      	mov	r8, sl
 8016274:	46d9      	mov	r9, fp
 8016276:	f1b9 0f00 	cmp.w	r9, #0
 801627a:	f1a8 0808 	sub.w	r8, r8, #8
 801627e:	dc64      	bgt.n	801634a <__kernel_rem_pio2+0x5ca>
 8016280:	465c      	mov	r4, fp
 8016282:	2c01      	cmp	r4, #1
 8016284:	f1aa 0a08 	sub.w	sl, sl, #8
 8016288:	dc7e      	bgt.n	8016388 <__kernel_rem_pio2+0x608>
 801628a:	2000      	movs	r0, #0
 801628c:	2100      	movs	r1, #0
 801628e:	f1bb 0f01 	cmp.w	fp, #1
 8016292:	f300 8097 	bgt.w	80163c4 <__kernel_rem_pio2+0x644>
 8016296:	9b02      	ldr	r3, [sp, #8]
 8016298:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801629c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	f040 8099 	bne.w	80163d8 <__kernel_rem_pio2+0x658>
 80162a6:	9b01      	ldr	r3, [sp, #4]
 80162a8:	e9c3 5600 	strd	r5, r6, [r3]
 80162ac:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80162b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80162b4:	e7ce      	b.n	8016254 <__kernel_rem_pio2+0x4d4>
 80162b6:	ab48      	add	r3, sp, #288	; 0x120
 80162b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80162bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162c0:	f7ea f804 	bl	80002cc <__adddf3>
 80162c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80162c8:	f1bb 0f00 	cmp.w	fp, #0
 80162cc:	daf3      	bge.n	80162b6 <__kernel_rem_pio2+0x536>
 80162ce:	9b02      	ldr	r3, [sp, #8]
 80162d0:	b113      	cbz	r3, 80162d8 <__kernel_rem_pio2+0x558>
 80162d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80162d6:	4619      	mov	r1, r3
 80162d8:	9b01      	ldr	r3, [sp, #4]
 80162da:	e9c3 0100 	strd	r0, r1, [r3]
 80162de:	e7b9      	b.n	8016254 <__kernel_rem_pio2+0x4d4>
 80162e0:	2000      	movs	r0, #0
 80162e2:	2100      	movs	r1, #0
 80162e4:	e7f0      	b.n	80162c8 <__kernel_rem_pio2+0x548>
 80162e6:	ab48      	add	r3, sp, #288	; 0x120
 80162e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80162ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162f0:	f7e9 ffec 	bl	80002cc <__adddf3>
 80162f4:	3c01      	subs	r4, #1
 80162f6:	2c00      	cmp	r4, #0
 80162f8:	daf5      	bge.n	80162e6 <__kernel_rem_pio2+0x566>
 80162fa:	9b02      	ldr	r3, [sp, #8]
 80162fc:	b1e3      	cbz	r3, 8016338 <__kernel_rem_pio2+0x5b8>
 80162fe:	4602      	mov	r2, r0
 8016300:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016304:	9c01      	ldr	r4, [sp, #4]
 8016306:	e9c4 2300 	strd	r2, r3, [r4]
 801630a:	4602      	mov	r2, r0
 801630c:	460b      	mov	r3, r1
 801630e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8016312:	f7e9 ffd9 	bl	80002c8 <__aeabi_dsub>
 8016316:	ad4a      	add	r5, sp, #296	; 0x128
 8016318:	2401      	movs	r4, #1
 801631a:	45a3      	cmp	fp, r4
 801631c:	da0f      	bge.n	801633e <__kernel_rem_pio2+0x5be>
 801631e:	9b02      	ldr	r3, [sp, #8]
 8016320:	b113      	cbz	r3, 8016328 <__kernel_rem_pio2+0x5a8>
 8016322:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016326:	4619      	mov	r1, r3
 8016328:	9b01      	ldr	r3, [sp, #4]
 801632a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801632e:	e791      	b.n	8016254 <__kernel_rem_pio2+0x4d4>
 8016330:	465c      	mov	r4, fp
 8016332:	2000      	movs	r0, #0
 8016334:	2100      	movs	r1, #0
 8016336:	e7de      	b.n	80162f6 <__kernel_rem_pio2+0x576>
 8016338:	4602      	mov	r2, r0
 801633a:	460b      	mov	r3, r1
 801633c:	e7e2      	b.n	8016304 <__kernel_rem_pio2+0x584>
 801633e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8016342:	f7e9 ffc3 	bl	80002cc <__adddf3>
 8016346:	3401      	adds	r4, #1
 8016348:	e7e7      	b.n	801631a <__kernel_rem_pio2+0x59a>
 801634a:	e9d8 4500 	ldrd	r4, r5, [r8]
 801634e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8016352:	4620      	mov	r0, r4
 8016354:	4632      	mov	r2, r6
 8016356:	463b      	mov	r3, r7
 8016358:	4629      	mov	r1, r5
 801635a:	f7e9 ffb7 	bl	80002cc <__adddf3>
 801635e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016362:	4602      	mov	r2, r0
 8016364:	460b      	mov	r3, r1
 8016366:	4620      	mov	r0, r4
 8016368:	4629      	mov	r1, r5
 801636a:	f7e9 ffad 	bl	80002c8 <__aeabi_dsub>
 801636e:	4632      	mov	r2, r6
 8016370:	463b      	mov	r3, r7
 8016372:	f7e9 ffab 	bl	80002cc <__adddf3>
 8016376:	ed9d 7b04 	vldr	d7, [sp, #16]
 801637a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801637e:	ed88 7b00 	vstr	d7, [r8]
 8016382:	f109 39ff 	add.w	r9, r9, #4294967295
 8016386:	e776      	b.n	8016276 <__kernel_rem_pio2+0x4f6>
 8016388:	e9da 8900 	ldrd	r8, r9, [sl]
 801638c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8016390:	4640      	mov	r0, r8
 8016392:	4632      	mov	r2, r6
 8016394:	463b      	mov	r3, r7
 8016396:	4649      	mov	r1, r9
 8016398:	f7e9 ff98 	bl	80002cc <__adddf3>
 801639c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80163a0:	4602      	mov	r2, r0
 80163a2:	460b      	mov	r3, r1
 80163a4:	4640      	mov	r0, r8
 80163a6:	4649      	mov	r1, r9
 80163a8:	f7e9 ff8e 	bl	80002c8 <__aeabi_dsub>
 80163ac:	4632      	mov	r2, r6
 80163ae:	463b      	mov	r3, r7
 80163b0:	f7e9 ff8c 	bl	80002cc <__adddf3>
 80163b4:	ed9d 7b04 	vldr	d7, [sp, #16]
 80163b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80163bc:	ed8a 7b00 	vstr	d7, [sl]
 80163c0:	3c01      	subs	r4, #1
 80163c2:	e75e      	b.n	8016282 <__kernel_rem_pio2+0x502>
 80163c4:	ab48      	add	r3, sp, #288	; 0x120
 80163c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80163ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163ce:	f7e9 ff7d 	bl	80002cc <__adddf3>
 80163d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80163d6:	e75a      	b.n	801628e <__kernel_rem_pio2+0x50e>
 80163d8:	9b01      	ldr	r3, [sp, #4]
 80163da:	9a01      	ldr	r2, [sp, #4]
 80163dc:	601d      	str	r5, [r3, #0]
 80163de:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80163e2:	605c      	str	r4, [r3, #4]
 80163e4:	609f      	str	r7, [r3, #8]
 80163e6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80163ea:	60d3      	str	r3, [r2, #12]
 80163ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80163f0:	6110      	str	r0, [r2, #16]
 80163f2:	6153      	str	r3, [r2, #20]
 80163f4:	e72e      	b.n	8016254 <__kernel_rem_pio2+0x4d4>
 80163f6:	bf00      	nop
 80163f8:	41700000 	.word	0x41700000
 80163fc:	3e700000 	.word	0x3e700000

08016400 <__kernel_sin>:
 8016400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016404:	ed2d 8b04 	vpush	{d8-d9}
 8016408:	eeb0 8a41 	vmov.f32	s16, s2
 801640c:	eef0 8a61 	vmov.f32	s17, s3
 8016410:	ec55 4b10 	vmov	r4, r5, d0
 8016414:	b083      	sub	sp, #12
 8016416:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801641a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801641e:	9001      	str	r0, [sp, #4]
 8016420:	da06      	bge.n	8016430 <__kernel_sin+0x30>
 8016422:	ee10 0a10 	vmov	r0, s0
 8016426:	4629      	mov	r1, r5
 8016428:	f7ea fbb6 	bl	8000b98 <__aeabi_d2iz>
 801642c:	2800      	cmp	r0, #0
 801642e:	d051      	beq.n	80164d4 <__kernel_sin+0xd4>
 8016430:	4622      	mov	r2, r4
 8016432:	462b      	mov	r3, r5
 8016434:	4620      	mov	r0, r4
 8016436:	4629      	mov	r1, r5
 8016438:	f7ea f8fe 	bl	8000638 <__aeabi_dmul>
 801643c:	4682      	mov	sl, r0
 801643e:	468b      	mov	fp, r1
 8016440:	4602      	mov	r2, r0
 8016442:	460b      	mov	r3, r1
 8016444:	4620      	mov	r0, r4
 8016446:	4629      	mov	r1, r5
 8016448:	f7ea f8f6 	bl	8000638 <__aeabi_dmul>
 801644c:	a341      	add	r3, pc, #260	; (adr r3, 8016554 <__kernel_sin+0x154>)
 801644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016452:	4680      	mov	r8, r0
 8016454:	4689      	mov	r9, r1
 8016456:	4650      	mov	r0, sl
 8016458:	4659      	mov	r1, fp
 801645a:	f7ea f8ed 	bl	8000638 <__aeabi_dmul>
 801645e:	a33f      	add	r3, pc, #252	; (adr r3, 801655c <__kernel_sin+0x15c>)
 8016460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016464:	f7e9 ff30 	bl	80002c8 <__aeabi_dsub>
 8016468:	4652      	mov	r2, sl
 801646a:	465b      	mov	r3, fp
 801646c:	f7ea f8e4 	bl	8000638 <__aeabi_dmul>
 8016470:	a33c      	add	r3, pc, #240	; (adr r3, 8016564 <__kernel_sin+0x164>)
 8016472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016476:	f7e9 ff29 	bl	80002cc <__adddf3>
 801647a:	4652      	mov	r2, sl
 801647c:	465b      	mov	r3, fp
 801647e:	f7ea f8db 	bl	8000638 <__aeabi_dmul>
 8016482:	a33a      	add	r3, pc, #232	; (adr r3, 801656c <__kernel_sin+0x16c>)
 8016484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016488:	f7e9 ff1e 	bl	80002c8 <__aeabi_dsub>
 801648c:	4652      	mov	r2, sl
 801648e:	465b      	mov	r3, fp
 8016490:	f7ea f8d2 	bl	8000638 <__aeabi_dmul>
 8016494:	a337      	add	r3, pc, #220	; (adr r3, 8016574 <__kernel_sin+0x174>)
 8016496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801649a:	f7e9 ff17 	bl	80002cc <__adddf3>
 801649e:	9b01      	ldr	r3, [sp, #4]
 80164a0:	4606      	mov	r6, r0
 80164a2:	460f      	mov	r7, r1
 80164a4:	b9eb      	cbnz	r3, 80164e2 <__kernel_sin+0xe2>
 80164a6:	4602      	mov	r2, r0
 80164a8:	460b      	mov	r3, r1
 80164aa:	4650      	mov	r0, sl
 80164ac:	4659      	mov	r1, fp
 80164ae:	f7ea f8c3 	bl	8000638 <__aeabi_dmul>
 80164b2:	a325      	add	r3, pc, #148	; (adr r3, 8016548 <__kernel_sin+0x148>)
 80164b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164b8:	f7e9 ff06 	bl	80002c8 <__aeabi_dsub>
 80164bc:	4642      	mov	r2, r8
 80164be:	464b      	mov	r3, r9
 80164c0:	f7ea f8ba 	bl	8000638 <__aeabi_dmul>
 80164c4:	4602      	mov	r2, r0
 80164c6:	460b      	mov	r3, r1
 80164c8:	4620      	mov	r0, r4
 80164ca:	4629      	mov	r1, r5
 80164cc:	f7e9 fefe 	bl	80002cc <__adddf3>
 80164d0:	4604      	mov	r4, r0
 80164d2:	460d      	mov	r5, r1
 80164d4:	ec45 4b10 	vmov	d0, r4, r5
 80164d8:	b003      	add	sp, #12
 80164da:	ecbd 8b04 	vpop	{d8-d9}
 80164de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164e2:	4b1b      	ldr	r3, [pc, #108]	; (8016550 <__kernel_sin+0x150>)
 80164e4:	ec51 0b18 	vmov	r0, r1, d8
 80164e8:	2200      	movs	r2, #0
 80164ea:	f7ea f8a5 	bl	8000638 <__aeabi_dmul>
 80164ee:	4632      	mov	r2, r6
 80164f0:	ec41 0b19 	vmov	d9, r0, r1
 80164f4:	463b      	mov	r3, r7
 80164f6:	4640      	mov	r0, r8
 80164f8:	4649      	mov	r1, r9
 80164fa:	f7ea f89d 	bl	8000638 <__aeabi_dmul>
 80164fe:	4602      	mov	r2, r0
 8016500:	460b      	mov	r3, r1
 8016502:	ec51 0b19 	vmov	r0, r1, d9
 8016506:	f7e9 fedf 	bl	80002c8 <__aeabi_dsub>
 801650a:	4652      	mov	r2, sl
 801650c:	465b      	mov	r3, fp
 801650e:	f7ea f893 	bl	8000638 <__aeabi_dmul>
 8016512:	ec53 2b18 	vmov	r2, r3, d8
 8016516:	f7e9 fed7 	bl	80002c8 <__aeabi_dsub>
 801651a:	a30b      	add	r3, pc, #44	; (adr r3, 8016548 <__kernel_sin+0x148>)
 801651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016520:	4606      	mov	r6, r0
 8016522:	460f      	mov	r7, r1
 8016524:	4640      	mov	r0, r8
 8016526:	4649      	mov	r1, r9
 8016528:	f7ea f886 	bl	8000638 <__aeabi_dmul>
 801652c:	4602      	mov	r2, r0
 801652e:	460b      	mov	r3, r1
 8016530:	4630      	mov	r0, r6
 8016532:	4639      	mov	r1, r7
 8016534:	f7e9 feca 	bl	80002cc <__adddf3>
 8016538:	4602      	mov	r2, r0
 801653a:	460b      	mov	r3, r1
 801653c:	4620      	mov	r0, r4
 801653e:	4629      	mov	r1, r5
 8016540:	f7e9 fec2 	bl	80002c8 <__aeabi_dsub>
 8016544:	e7c4      	b.n	80164d0 <__kernel_sin+0xd0>
 8016546:	bf00      	nop
 8016548:	55555549 	.word	0x55555549
 801654c:	3fc55555 	.word	0x3fc55555
 8016550:	3fe00000 	.word	0x3fe00000
 8016554:	5acfd57c 	.word	0x5acfd57c
 8016558:	3de5d93a 	.word	0x3de5d93a
 801655c:	8a2b9ceb 	.word	0x8a2b9ceb
 8016560:	3e5ae5e6 	.word	0x3e5ae5e6
 8016564:	57b1fe7d 	.word	0x57b1fe7d
 8016568:	3ec71de3 	.word	0x3ec71de3
 801656c:	19c161d5 	.word	0x19c161d5
 8016570:	3f2a01a0 	.word	0x3f2a01a0
 8016574:	1110f8a6 	.word	0x1110f8a6
 8016578:	3f811111 	.word	0x3f811111

0801657c <finite>:
 801657c:	b082      	sub	sp, #8
 801657e:	ed8d 0b00 	vstr	d0, [sp]
 8016582:	9801      	ldr	r0, [sp, #4]
 8016584:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8016588:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801658c:	0fc0      	lsrs	r0, r0, #31
 801658e:	b002      	add	sp, #8
 8016590:	4770      	bx	lr
 8016592:	0000      	movs	r0, r0
 8016594:	0000      	movs	r0, r0
	...

08016598 <floor>:
 8016598:	ec51 0b10 	vmov	r0, r1, d0
 801659c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80165a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80165a8:	2e13      	cmp	r6, #19
 80165aa:	ee10 5a10 	vmov	r5, s0
 80165ae:	ee10 8a10 	vmov	r8, s0
 80165b2:	460c      	mov	r4, r1
 80165b4:	dc32      	bgt.n	801661c <floor+0x84>
 80165b6:	2e00      	cmp	r6, #0
 80165b8:	da14      	bge.n	80165e4 <floor+0x4c>
 80165ba:	a333      	add	r3, pc, #204	; (adr r3, 8016688 <floor+0xf0>)
 80165bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165c0:	f7e9 fe84 	bl	80002cc <__adddf3>
 80165c4:	2200      	movs	r2, #0
 80165c6:	2300      	movs	r3, #0
 80165c8:	f7ea fac6 	bl	8000b58 <__aeabi_dcmpgt>
 80165cc:	b138      	cbz	r0, 80165de <floor+0x46>
 80165ce:	2c00      	cmp	r4, #0
 80165d0:	da57      	bge.n	8016682 <floor+0xea>
 80165d2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80165d6:	431d      	orrs	r5, r3
 80165d8:	d001      	beq.n	80165de <floor+0x46>
 80165da:	4c2d      	ldr	r4, [pc, #180]	; (8016690 <floor+0xf8>)
 80165dc:	2500      	movs	r5, #0
 80165de:	4621      	mov	r1, r4
 80165e0:	4628      	mov	r0, r5
 80165e2:	e025      	b.n	8016630 <floor+0x98>
 80165e4:	4f2b      	ldr	r7, [pc, #172]	; (8016694 <floor+0xfc>)
 80165e6:	4137      	asrs	r7, r6
 80165e8:	ea01 0307 	and.w	r3, r1, r7
 80165ec:	4303      	orrs	r3, r0
 80165ee:	d01f      	beq.n	8016630 <floor+0x98>
 80165f0:	a325      	add	r3, pc, #148	; (adr r3, 8016688 <floor+0xf0>)
 80165f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165f6:	f7e9 fe69 	bl	80002cc <__adddf3>
 80165fa:	2200      	movs	r2, #0
 80165fc:	2300      	movs	r3, #0
 80165fe:	f7ea faab 	bl	8000b58 <__aeabi_dcmpgt>
 8016602:	2800      	cmp	r0, #0
 8016604:	d0eb      	beq.n	80165de <floor+0x46>
 8016606:	2c00      	cmp	r4, #0
 8016608:	bfbe      	ittt	lt
 801660a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801660e:	fa43 f606 	asrlt.w	r6, r3, r6
 8016612:	19a4      	addlt	r4, r4, r6
 8016614:	ea24 0407 	bic.w	r4, r4, r7
 8016618:	2500      	movs	r5, #0
 801661a:	e7e0      	b.n	80165de <floor+0x46>
 801661c:	2e33      	cmp	r6, #51	; 0x33
 801661e:	dd0b      	ble.n	8016638 <floor+0xa0>
 8016620:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016624:	d104      	bne.n	8016630 <floor+0x98>
 8016626:	ee10 2a10 	vmov	r2, s0
 801662a:	460b      	mov	r3, r1
 801662c:	f7e9 fe4e 	bl	80002cc <__adddf3>
 8016630:	ec41 0b10 	vmov	d0, r0, r1
 8016634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016638:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801663c:	f04f 33ff 	mov.w	r3, #4294967295
 8016640:	fa23 f707 	lsr.w	r7, r3, r7
 8016644:	4207      	tst	r7, r0
 8016646:	d0f3      	beq.n	8016630 <floor+0x98>
 8016648:	a30f      	add	r3, pc, #60	; (adr r3, 8016688 <floor+0xf0>)
 801664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801664e:	f7e9 fe3d 	bl	80002cc <__adddf3>
 8016652:	2200      	movs	r2, #0
 8016654:	2300      	movs	r3, #0
 8016656:	f7ea fa7f 	bl	8000b58 <__aeabi_dcmpgt>
 801665a:	2800      	cmp	r0, #0
 801665c:	d0bf      	beq.n	80165de <floor+0x46>
 801665e:	2c00      	cmp	r4, #0
 8016660:	da02      	bge.n	8016668 <floor+0xd0>
 8016662:	2e14      	cmp	r6, #20
 8016664:	d103      	bne.n	801666e <floor+0xd6>
 8016666:	3401      	adds	r4, #1
 8016668:	ea25 0507 	bic.w	r5, r5, r7
 801666c:	e7b7      	b.n	80165de <floor+0x46>
 801666e:	2301      	movs	r3, #1
 8016670:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8016674:	fa03 f606 	lsl.w	r6, r3, r6
 8016678:	4435      	add	r5, r6
 801667a:	4545      	cmp	r5, r8
 801667c:	bf38      	it	cc
 801667e:	18e4      	addcc	r4, r4, r3
 8016680:	e7f2      	b.n	8016668 <floor+0xd0>
 8016682:	2500      	movs	r5, #0
 8016684:	462c      	mov	r4, r5
 8016686:	e7aa      	b.n	80165de <floor+0x46>
 8016688:	8800759c 	.word	0x8800759c
 801668c:	7e37e43c 	.word	0x7e37e43c
 8016690:	bff00000 	.word	0xbff00000
 8016694:	000fffff 	.word	0x000fffff

08016698 <nan>:
 8016698:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80166a0 <nan+0x8>
 801669c:	4770      	bx	lr
 801669e:	bf00      	nop
 80166a0:	00000000 	.word	0x00000000
 80166a4:	7ff80000 	.word	0x7ff80000

080166a8 <rint>:
 80166a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80166aa:	ec51 0b10 	vmov	r0, r1, d0
 80166ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80166b2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80166b6:	2e13      	cmp	r6, #19
 80166b8:	ee10 4a10 	vmov	r4, s0
 80166bc:	460b      	mov	r3, r1
 80166be:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80166c2:	dc58      	bgt.n	8016776 <rint+0xce>
 80166c4:	2e00      	cmp	r6, #0
 80166c6:	da2b      	bge.n	8016720 <rint+0x78>
 80166c8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80166cc:	4302      	orrs	r2, r0
 80166ce:	d023      	beq.n	8016718 <rint+0x70>
 80166d0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80166d4:	4302      	orrs	r2, r0
 80166d6:	4254      	negs	r4, r2
 80166d8:	4314      	orrs	r4, r2
 80166da:	0c4b      	lsrs	r3, r1, #17
 80166dc:	0b24      	lsrs	r4, r4, #12
 80166de:	045b      	lsls	r3, r3, #17
 80166e0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80166e4:	ea44 0103 	orr.w	r1, r4, r3
 80166e8:	4b32      	ldr	r3, [pc, #200]	; (80167b4 <rint+0x10c>)
 80166ea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80166ee:	e9d3 6700 	ldrd	r6, r7, [r3]
 80166f2:	4602      	mov	r2, r0
 80166f4:	460b      	mov	r3, r1
 80166f6:	4630      	mov	r0, r6
 80166f8:	4639      	mov	r1, r7
 80166fa:	f7e9 fde7 	bl	80002cc <__adddf3>
 80166fe:	e9cd 0100 	strd	r0, r1, [sp]
 8016702:	463b      	mov	r3, r7
 8016704:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016708:	4632      	mov	r2, r6
 801670a:	f7e9 fddd 	bl	80002c8 <__aeabi_dsub>
 801670e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016712:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8016716:	4639      	mov	r1, r7
 8016718:	ec41 0b10 	vmov	d0, r0, r1
 801671c:	b003      	add	sp, #12
 801671e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016720:	4a25      	ldr	r2, [pc, #148]	; (80167b8 <rint+0x110>)
 8016722:	4132      	asrs	r2, r6
 8016724:	ea01 0702 	and.w	r7, r1, r2
 8016728:	4307      	orrs	r7, r0
 801672a:	d0f5      	beq.n	8016718 <rint+0x70>
 801672c:	0851      	lsrs	r1, r2, #1
 801672e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8016732:	4314      	orrs	r4, r2
 8016734:	d00c      	beq.n	8016750 <rint+0xa8>
 8016736:	ea23 0201 	bic.w	r2, r3, r1
 801673a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801673e:	2e13      	cmp	r6, #19
 8016740:	fa43 f606 	asr.w	r6, r3, r6
 8016744:	bf0c      	ite	eq
 8016746:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801674a:	2400      	movne	r4, #0
 801674c:	ea42 0306 	orr.w	r3, r2, r6
 8016750:	4918      	ldr	r1, [pc, #96]	; (80167b4 <rint+0x10c>)
 8016752:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8016756:	4622      	mov	r2, r4
 8016758:	e9d5 4500 	ldrd	r4, r5, [r5]
 801675c:	4620      	mov	r0, r4
 801675e:	4629      	mov	r1, r5
 8016760:	f7e9 fdb4 	bl	80002cc <__adddf3>
 8016764:	e9cd 0100 	strd	r0, r1, [sp]
 8016768:	e9dd 0100 	ldrd	r0, r1, [sp]
 801676c:	4622      	mov	r2, r4
 801676e:	462b      	mov	r3, r5
 8016770:	f7e9 fdaa 	bl	80002c8 <__aeabi_dsub>
 8016774:	e7d0      	b.n	8016718 <rint+0x70>
 8016776:	2e33      	cmp	r6, #51	; 0x33
 8016778:	dd07      	ble.n	801678a <rint+0xe2>
 801677a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801677e:	d1cb      	bne.n	8016718 <rint+0x70>
 8016780:	ee10 2a10 	vmov	r2, s0
 8016784:	f7e9 fda2 	bl	80002cc <__adddf3>
 8016788:	e7c6      	b.n	8016718 <rint+0x70>
 801678a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801678e:	f04f 36ff 	mov.w	r6, #4294967295
 8016792:	40d6      	lsrs	r6, r2
 8016794:	4230      	tst	r0, r6
 8016796:	d0bf      	beq.n	8016718 <rint+0x70>
 8016798:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801679c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80167a0:	bf1f      	itttt	ne
 80167a2:	ea24 0101 	bicne.w	r1, r4, r1
 80167a6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80167aa:	fa44 f202 	asrne.w	r2, r4, r2
 80167ae:	ea41 0402 	orrne.w	r4, r1, r2
 80167b2:	e7cd      	b.n	8016750 <rint+0xa8>
 80167b4:	080174d8 	.word	0x080174d8
 80167b8:	000fffff 	.word	0x000fffff
 80167bc:	00000000 	.word	0x00000000

080167c0 <scalbn>:
 80167c0:	b570      	push	{r4, r5, r6, lr}
 80167c2:	ec55 4b10 	vmov	r4, r5, d0
 80167c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80167ca:	4606      	mov	r6, r0
 80167cc:	462b      	mov	r3, r5
 80167ce:	b99a      	cbnz	r2, 80167f8 <scalbn+0x38>
 80167d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80167d4:	4323      	orrs	r3, r4
 80167d6:	d036      	beq.n	8016846 <scalbn+0x86>
 80167d8:	4b39      	ldr	r3, [pc, #228]	; (80168c0 <scalbn+0x100>)
 80167da:	4629      	mov	r1, r5
 80167dc:	ee10 0a10 	vmov	r0, s0
 80167e0:	2200      	movs	r2, #0
 80167e2:	f7e9 ff29 	bl	8000638 <__aeabi_dmul>
 80167e6:	4b37      	ldr	r3, [pc, #220]	; (80168c4 <scalbn+0x104>)
 80167e8:	429e      	cmp	r6, r3
 80167ea:	4604      	mov	r4, r0
 80167ec:	460d      	mov	r5, r1
 80167ee:	da10      	bge.n	8016812 <scalbn+0x52>
 80167f0:	a32b      	add	r3, pc, #172	; (adr r3, 80168a0 <scalbn+0xe0>)
 80167f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167f6:	e03a      	b.n	801686e <scalbn+0xae>
 80167f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80167fc:	428a      	cmp	r2, r1
 80167fe:	d10c      	bne.n	801681a <scalbn+0x5a>
 8016800:	ee10 2a10 	vmov	r2, s0
 8016804:	4620      	mov	r0, r4
 8016806:	4629      	mov	r1, r5
 8016808:	f7e9 fd60 	bl	80002cc <__adddf3>
 801680c:	4604      	mov	r4, r0
 801680e:	460d      	mov	r5, r1
 8016810:	e019      	b.n	8016846 <scalbn+0x86>
 8016812:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016816:	460b      	mov	r3, r1
 8016818:	3a36      	subs	r2, #54	; 0x36
 801681a:	4432      	add	r2, r6
 801681c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016820:	428a      	cmp	r2, r1
 8016822:	dd08      	ble.n	8016836 <scalbn+0x76>
 8016824:	2d00      	cmp	r5, #0
 8016826:	a120      	add	r1, pc, #128	; (adr r1, 80168a8 <scalbn+0xe8>)
 8016828:	e9d1 0100 	ldrd	r0, r1, [r1]
 801682c:	da1c      	bge.n	8016868 <scalbn+0xa8>
 801682e:	a120      	add	r1, pc, #128	; (adr r1, 80168b0 <scalbn+0xf0>)
 8016830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016834:	e018      	b.n	8016868 <scalbn+0xa8>
 8016836:	2a00      	cmp	r2, #0
 8016838:	dd08      	ble.n	801684c <scalbn+0x8c>
 801683a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801683e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016842:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016846:	ec45 4b10 	vmov	d0, r4, r5
 801684a:	bd70      	pop	{r4, r5, r6, pc}
 801684c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016850:	da19      	bge.n	8016886 <scalbn+0xc6>
 8016852:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016856:	429e      	cmp	r6, r3
 8016858:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801685c:	dd0a      	ble.n	8016874 <scalbn+0xb4>
 801685e:	a112      	add	r1, pc, #72	; (adr r1, 80168a8 <scalbn+0xe8>)
 8016860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d1e2      	bne.n	801682e <scalbn+0x6e>
 8016868:	a30f      	add	r3, pc, #60	; (adr r3, 80168a8 <scalbn+0xe8>)
 801686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801686e:	f7e9 fee3 	bl	8000638 <__aeabi_dmul>
 8016872:	e7cb      	b.n	801680c <scalbn+0x4c>
 8016874:	a10a      	add	r1, pc, #40	; (adr r1, 80168a0 <scalbn+0xe0>)
 8016876:	e9d1 0100 	ldrd	r0, r1, [r1]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d0b8      	beq.n	80167f0 <scalbn+0x30>
 801687e:	a10e      	add	r1, pc, #56	; (adr r1, 80168b8 <scalbn+0xf8>)
 8016880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016884:	e7b4      	b.n	80167f0 <scalbn+0x30>
 8016886:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801688a:	3236      	adds	r2, #54	; 0x36
 801688c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016890:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8016894:	4620      	mov	r0, r4
 8016896:	4b0c      	ldr	r3, [pc, #48]	; (80168c8 <scalbn+0x108>)
 8016898:	2200      	movs	r2, #0
 801689a:	e7e8      	b.n	801686e <scalbn+0xae>
 801689c:	f3af 8000 	nop.w
 80168a0:	c2f8f359 	.word	0xc2f8f359
 80168a4:	01a56e1f 	.word	0x01a56e1f
 80168a8:	8800759c 	.word	0x8800759c
 80168ac:	7e37e43c 	.word	0x7e37e43c
 80168b0:	8800759c 	.word	0x8800759c
 80168b4:	fe37e43c 	.word	0xfe37e43c
 80168b8:	c2f8f359 	.word	0xc2f8f359
 80168bc:	81a56e1f 	.word	0x81a56e1f
 80168c0:	43500000 	.word	0x43500000
 80168c4:	ffff3cb0 	.word	0xffff3cb0
 80168c8:	3c900000 	.word	0x3c900000

080168cc <_init>:
 80168cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168ce:	bf00      	nop
 80168d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168d2:	bc08      	pop	{r3}
 80168d4:	469e      	mov	lr, r3
 80168d6:	4770      	bx	lr

080168d8 <_fini>:
 80168d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168da:	bf00      	nop
 80168dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168de:	bc08      	pop	{r3}
 80168e0:	469e      	mov	lr, r3
 80168e2:	4770      	bx	lr
