
RobotFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b88  0800f2a0  0800f2a0  0001f2a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe28  0800fe28  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe28  0800fe28  0001fe28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe30  0800fe30  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe30  0800fe30  0001fe30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe34  0800fe34  0001fe34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800fe38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043f4  20000220  08010058  00020220  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004614  08010058  00024614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022fc1  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b2d  00000000  00000000  00043211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00047d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  000492d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f22  00000000  00000000  0004a688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bcbc  00000000  00000000  000715aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc63e  00000000  00000000  0008d266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001698a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007088  00000000  00000000  001698f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f284 	.word	0x0800f284

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0800f284 	.word	0x0800f284

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a4 	b.w	8001048 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468c      	mov	ip, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8083 	bne.w	8000e9a <__udivmoddi4+0x116>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d947      	bls.n	8000e2a <__udivmoddi4+0xa6>
 8000d9a:	fab2 f282 	clz	r2, r2
 8000d9e:	b142      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	f1c2 0020 	rsb	r0, r2, #32
 8000da4:	fa24 f000 	lsr.w	r0, r4, r0
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4097      	lsls	r7, r2
 8000dac:	ea40 0c01 	orr.w	ip, r0, r1
 8000db0:	4094      	lsls	r4, r2
 8000db2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db6:	0c23      	lsrs	r3, r4, #16
 8000db8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dbc:	fa1f fe87 	uxth.w	lr, r7
 8000dc0:	fb08 c116 	mls	r1, r8, r6, ip
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x60>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dd6:	f080 8119 	bcs.w	800100c <__udivmoddi4+0x288>
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	f240 8116 	bls.w	800100c <__udivmoddi4+0x288>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	443b      	add	r3, r7
 8000de4:	1a5b      	subs	r3, r3, r1
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dec:	fb08 3310 	mls	r3, r8, r0, r3
 8000df0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d909      	bls.n	8000e10 <__udivmoddi4+0x8c>
 8000dfc:	193c      	adds	r4, r7, r4
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	f080 8105 	bcs.w	8001010 <__udivmoddi4+0x28c>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f240 8102 	bls.w	8001010 <__udivmoddi4+0x28c>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	443c      	add	r4, r7
 8000e10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e14:	eba4 040e 	sub.w	r4, r4, lr
 8000e18:	2600      	movs	r6, #0
 8000e1a:	b11d      	cbz	r5, 8000e24 <__udivmoddi4+0xa0>
 8000e1c:	40d4      	lsrs	r4, r2
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e9c5 4300 	strd	r4, r3, [r5]
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	b902      	cbnz	r2, 8000e2e <__udivmoddi4+0xaa>
 8000e2c:	deff      	udf	#255	; 0xff
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d150      	bne.n	8000ed8 <__udivmoddi4+0x154>
 8000e36:	1bcb      	subs	r3, r1, r7
 8000e38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3c:	fa1f f887 	uxth.w	r8, r7
 8000e40:	2601      	movs	r6, #1
 8000e42:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e46:	0c21      	lsrs	r1, r4, #16
 8000e48:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e50:	fb08 f30c 	mul.w	r3, r8, ip
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0xe4>
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0xe2>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	f200 80e9 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e66:	4684      	mov	ip, r0
 8000e68:	1ac9      	subs	r1, r1, r3
 8000e6a:	b2a3      	uxth	r3, r4
 8000e6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e74:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e78:	fb08 f800 	mul.w	r8, r8, r0
 8000e7c:	45a0      	cmp	r8, r4
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0x10c>
 8000e80:	193c      	adds	r4, r7, r4
 8000e82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x10a>
 8000e88:	45a0      	cmp	r8, r4
 8000e8a:	f200 80d9 	bhi.w	8001040 <__udivmoddi4+0x2bc>
 8000e8e:	4618      	mov	r0, r3
 8000e90:	eba4 0408 	sub.w	r4, r4, r8
 8000e94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e98:	e7bf      	b.n	8000e1a <__udivmoddi4+0x96>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d909      	bls.n	8000eb2 <__udivmoddi4+0x12e>
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	f000 80b1 	beq.w	8001006 <__udivmoddi4+0x282>
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eaa:	4630      	mov	r0, r6
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	fab3 f683 	clz	r6, r3
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	d14a      	bne.n	8000f50 <__udivmoddi4+0x1cc>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d302      	bcc.n	8000ec4 <__udivmoddi4+0x140>
 8000ebe:	4282      	cmp	r2, r0
 8000ec0:	f200 80b8 	bhi.w	8001034 <__udivmoddi4+0x2b0>
 8000ec4:	1a84      	subs	r4, r0, r2
 8000ec6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eca:	2001      	movs	r0, #1
 8000ecc:	468c      	mov	ip, r1
 8000ece:	2d00      	cmp	r5, #0
 8000ed0:	d0a8      	beq.n	8000e24 <__udivmoddi4+0xa0>
 8000ed2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ed6:	e7a5      	b.n	8000e24 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ee0:	4097      	lsls	r7, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eea:	40d9      	lsrs	r1, r3
 8000eec:	4330      	orrs	r0, r6
 8000eee:	0c03      	lsrs	r3, r0, #16
 8000ef0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ef4:	fa1f f887 	uxth.w	r8, r7
 8000ef8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000efc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f00:	fb06 f108 	mul.w	r1, r6, r8
 8000f04:	4299      	cmp	r1, r3
 8000f06:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0a:	d909      	bls.n	8000f20 <__udivmoddi4+0x19c>
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f12:	f080 808d 	bcs.w	8001030 <__udivmoddi4+0x2ac>
 8000f16:	4299      	cmp	r1, r3
 8000f18:	f240 808a 	bls.w	8001030 <__udivmoddi4+0x2ac>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	443b      	add	r3, r7
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b281      	uxth	r1, r0
 8000f24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f30:	fb00 f308 	mul.w	r3, r0, r8
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d907      	bls.n	8000f48 <__udivmoddi4+0x1c4>
 8000f38:	1879      	adds	r1, r7, r1
 8000f3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3e:	d273      	bcs.n	8001028 <__udivmoddi4+0x2a4>
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d971      	bls.n	8001028 <__udivmoddi4+0x2a4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4439      	add	r1, r7
 8000f48:	1acb      	subs	r3, r1, r3
 8000f4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f4e:	e778      	b.n	8000e42 <__udivmoddi4+0xbe>
 8000f50:	f1c6 0c20 	rsb	ip, r6, #32
 8000f54:	fa03 f406 	lsl.w	r4, r3, r6
 8000f58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f5c:	431c      	orrs	r4, r3
 8000f5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f62:	fa01 f306 	lsl.w	r3, r1, r6
 8000f66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f6e:	431f      	orrs	r7, r3
 8000f70:	0c3b      	lsrs	r3, r7, #16
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fa1f f884 	uxth.w	r8, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f82:	fb09 fa08 	mul.w	sl, r9, r8
 8000f86:	458a      	cmp	sl, r1
 8000f88:	fa02 f206 	lsl.w	r2, r2, r6
 8000f8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x220>
 8000f92:	1861      	adds	r1, r4, r1
 8000f94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f98:	d248      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000f9a:	458a      	cmp	sl, r1
 8000f9c:	d946      	bls.n	800102c <__udivmoddi4+0x2a8>
 8000f9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000fa2:	4421      	add	r1, r4
 8000fa4:	eba1 010a 	sub.w	r1, r1, sl
 8000fa8:	b2bf      	uxth	r7, r7
 8000faa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fb2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fb6:	fb00 f808 	mul.w	r8, r0, r8
 8000fba:	45b8      	cmp	r8, r7
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x24a>
 8000fbe:	19e7      	adds	r7, r4, r7
 8000fc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fc4:	d22e      	bcs.n	8001024 <__udivmoddi4+0x2a0>
 8000fc6:	45b8      	cmp	r8, r7
 8000fc8:	d92c      	bls.n	8001024 <__udivmoddi4+0x2a0>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	4427      	add	r7, r4
 8000fce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fd2:	eba7 0708 	sub.w	r7, r7, r8
 8000fd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fda:	454f      	cmp	r7, r9
 8000fdc:	46c6      	mov	lr, r8
 8000fde:	4649      	mov	r1, r9
 8000fe0:	d31a      	bcc.n	8001018 <__udivmoddi4+0x294>
 8000fe2:	d017      	beq.n	8001014 <__udivmoddi4+0x290>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x27a>
 8000fe6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fea:	eb67 0701 	sbc.w	r7, r7, r1
 8000fee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ff2:	40f2      	lsrs	r2, r6
 8000ff4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ff8:	40f7      	lsrs	r7, r6
 8000ffa:	e9c5 2700 	strd	r2, r7, [r5]
 8000ffe:	2600      	movs	r6, #0
 8001000:	4631      	mov	r1, r6
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e70b      	b.n	8000e24 <__udivmoddi4+0xa0>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e9      	b.n	8000de4 <__udivmoddi4+0x60>
 8001010:	4618      	mov	r0, r3
 8001012:	e6fd      	b.n	8000e10 <__udivmoddi4+0x8c>
 8001014:	4543      	cmp	r3, r8
 8001016:	d2e5      	bcs.n	8000fe4 <__udivmoddi4+0x260>
 8001018:	ebb8 0e02 	subs.w	lr, r8, r2
 800101c:	eb69 0104 	sbc.w	r1, r9, r4
 8001020:	3801      	subs	r0, #1
 8001022:	e7df      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001024:	4608      	mov	r0, r1
 8001026:	e7d2      	b.n	8000fce <__udivmoddi4+0x24a>
 8001028:	4660      	mov	r0, ip
 800102a:	e78d      	b.n	8000f48 <__udivmoddi4+0x1c4>
 800102c:	4681      	mov	r9, r0
 800102e:	e7b9      	b.n	8000fa4 <__udivmoddi4+0x220>
 8001030:	4666      	mov	r6, ip
 8001032:	e775      	b.n	8000f20 <__udivmoddi4+0x19c>
 8001034:	4630      	mov	r0, r6
 8001036:	e74a      	b.n	8000ece <__udivmoddi4+0x14a>
 8001038:	f1ac 0c02 	sub.w	ip, ip, #2
 800103c:	4439      	add	r1, r7
 800103e:	e713      	b.n	8000e68 <__udivmoddi4+0xe4>
 8001040:	3802      	subs	r0, #2
 8001042:	443c      	add	r4, r7
 8001044:	e724      	b.n	8000e90 <__udivmoddi4+0x10c>
 8001046:	bf00      	nop

08001048 <__aeabi_idiv0>:
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <CTRL_Pos2_SetTargetX>:

/**
 * setTargetX : Set new x target coordinate
 * @param x x coordinate
 */
void CTRL_Pos2_SetTargetX(double x){
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	ed87 0b00 	vstr	d0, [r7]
	targetX = x;
 8001056:	4907      	ldr	r1, [pc, #28]	; (8001074 <CTRL_Pos2_SetTargetX+0x28>)
 8001058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800105c:	e9c1 2300 	strd	r2, r3, [r1]
	printf("setTargetX done with %lf\r\n",targetX);
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <CTRL_Pos2_SetTargetX+0x28>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	4804      	ldr	r0, [pc, #16]	; (8001078 <CTRL_Pos2_SetTargetX+0x2c>)
 8001068:	f008 f9ee 	bl	8009448 <iprintf>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000240 	.word	0x20000240
 8001078:	0800f2a0 	.word	0x0800f2a0

0800107c <CTRL_Pos2_SetTargetY>:

/**
 * setTargetY : Set new y target coordinate
 * @param y y coordinate
 */
void CTRL_Pos2_SetTargetY(double y){
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	ed87 0b00 	vstr	d0, [r7]
	targetY = y;
 8001086:	4907      	ldr	r1, [pc, #28]	; (80010a4 <CTRL_Pos2_SetTargetY+0x28>)
 8001088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800108c:	e9c1 2300 	strd	r2, r3, [r1]
	printf("setTargetY done with %lf\r\n",targetY);
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <CTRL_Pos2_SetTargetY+0x28>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	4804      	ldr	r0, [pc, #16]	; (80010a8 <CTRL_Pos2_SetTargetY+0x2c>)
 8001098:	f008 f9d6 	bl	8009448 <iprintf>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000248 	.word	0x20000248
 80010a8:	0800f2bc 	.word	0x0800f2bc

080010ac <CTRL_Pos2_isArrived>:

/**
 * isArrived : Check if the robot is arrvied to its target
 * @return 1 if BOTterfly arrived to its target
 */
uint8_t CTRL_Pos2_isArrived(){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	if(targetX == 0 && targetY == 0){
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <CTRL_Pos2_isArrived+0x40>)
 80010b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	f7ff fd33 	bl	8000b28 <__aeabi_dcmpeq>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00d      	beq.n	80010e4 <CTRL_Pos2_isArrived+0x38>
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <CTRL_Pos2_isArrived+0x44>)
 80010ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	f7ff fd27 	bl	8000b28 <__aeabi_dcmpeq>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <CTRL_Pos2_isArrived+0x38>
		return 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e000      	b.n	80010e6 <CTRL_Pos2_isArrived+0x3a>
	} else{
		return 0;
 80010e4:	2300      	movs	r3, #0
	}
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000240 	.word	0x20000240
 80010f0:	20000248 	.word	0x20000248

080010f4 <toZeroOne>:
/**
 * toZeroOne
 * @param x Value needs to be scaled between 0 and 1
 * @return x Corrected value
 */
double toZeroOne(double x) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	ed87 0b00 	vstr	d0, [r7]
	if (x < 0) return 0;
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	e9d7 0100 	ldrd	r0, r1, [r7]
 800110a:	f7ff fd17 	bl	8000b3c <__aeabi_dcmplt>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d004      	beq.n	800111e <toZeroOne+0x2a>
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	e00f      	b.n	800113e <toZeroOne+0x4a>
	if (x > 1) return 1;
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <toZeroOne+0x5c>)
 8001124:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001128:	f7ff fd26 	bl	8000b78 <__aeabi_dcmpgt>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <toZeroOne+0x46>
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <toZeroOne+0x5c>)
 8001138:	e001      	b.n	800113e <toZeroOne+0x4a>
	return x;
 800113a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800113e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001142:	eeb0 0a47 	vmov.f32	s0, s14
 8001146:	eef0 0a67 	vmov.f32	s1, s15
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	3ff00000 	.word	0x3ff00000
 8001154:	00000000 	.word	0x00000000

08001158 <toZeroTwoPi>:
/**
 * toZeroTwoPi
 * @param angle Angle needs to be scaled between 0 and 2*Pi
 * @return Corrected angle
 */
double toZeroTwoPi(double angle) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	ed87 0b00 	vstr	d0, [r7]
	return fmod(fmod(angle, M_TWOPI) + M_TWOPI, M_TWOPI);
 8001162:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80011b0 <toZeroTwoPi+0x58>
 8001166:	ed97 0b00 	vldr	d0, [r7]
 800116a:	f00b ff47 	bl	800cffc <fmod>
 800116e:	ec51 0b10 	vmov	r0, r1, d0
 8001172:	a30f      	add	r3, pc, #60	; (adr r3, 80011b0 <toZeroTwoPi+0x58>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	f7ff f8b8 	bl	80002ec <__adddf3>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	ec43 2b17 	vmov	d7, r2, r3
 8001184:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 80011b0 <toZeroTwoPi+0x58>
 8001188:	eeb0 0a47 	vmov.f32	s0, s14
 800118c:	eef0 0a67 	vmov.f32	s1, s15
 8001190:	f00b ff34 	bl	800cffc <fmod>
 8001194:	eeb0 7a40 	vmov.f32	s14, s0
 8001198:	eef0 7a60 	vmov.f32	s15, s1
}
 800119c:	eeb0 0a47 	vmov.f32	s0, s14
 80011a0:	eef0 0a67 	vmov.f32	s1, s15
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	f3af 8000 	nop.w
 80011b0:	54442d18 	.word	0x54442d18
 80011b4:	401921fb 	.word	0x401921fb

080011b8 <CTRL_Pos2_PositionControl>:


/**
 * Pos_ControlLoop_2steps
 */
void CTRL_Pos2_PositionControl(){
 80011b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011bc:	ed2d 8b02 	vpush	{d8}
 80011c0:	b096      	sub	sp, #88	; 0x58
 80011c2:	af00      	add	r7, sp, #0
	//printf("%d\t%d\r\n", (int)targetX, (int)targetY);

	/* ODOMETRY ------------------------*/
	int16_t ticksLeft = ENC_GetCnt(&CodeurGauche);
 80011c4:	48b6      	ldr	r0, [pc, #728]	; (80014a0 <CTRL_Pos2_PositionControl+0x2e8>)
 80011c6:	f000 fc42 	bl	8001a4e <ENC_GetCnt>
 80011ca:	4603      	mov	r3, r0
 80011cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
	int16_t ticksRight = ENC_GetCnt(&CodeurDroite);
 80011ce:	48b5      	ldr	r0, [pc, #724]	; (80014a4 <CTRL_Pos2_PositionControl+0x2ec>)
 80011d0:	f000 fc3d 	bl	8001a4e <ENC_GetCnt>
 80011d4:	4603      	mov	r3, r0
 80011d6:	87bb      	strh	r3, [r7, #60]	; 0x3c
	ODO_OdometryUpdate(ticksLeft, ticksRight);
 80011d8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80011dc:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 fdc0 	bl	8001d68 <ODO_OdometryUpdate>

	/* ROTATION ------------------------*/
	double angleToTarget = atan2(targetY - ODO_GetY(), targetX - ODO_GetX());
 80011e8:	4baf      	ldr	r3, [pc, #700]	; (80014a8 <CTRL_Pos2_PositionControl+0x2f0>)
 80011ea:	e9d3 4500 	ldrd	r4, r5, [r3]
 80011ee:	f000 fd95 	bl	8001d1c <ODO_GetY>
 80011f2:	ec53 2b10 	vmov	r2, r3, d0
 80011f6:	4620      	mov	r0, r4
 80011f8:	4629      	mov	r1, r5
 80011fa:	f7ff f875 	bl	80002e8 <__aeabi_dsub>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	ec43 2b18 	vmov	d8, r2, r3
 8001206:	4ba9      	ldr	r3, [pc, #676]	; (80014ac <CTRL_Pos2_PositionControl+0x2f4>)
 8001208:	e9d3 4500 	ldrd	r4, r5, [r3]
 800120c:	f000 fd74 	bl	8001cf8 <ODO_GetX>
 8001210:	ec53 2b10 	vmov	r2, r3, d0
 8001214:	4620      	mov	r0, r4
 8001216:	4629      	mov	r1, r5
 8001218:	f7ff f866 	bl	80002e8 <__aeabi_dsub>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	ec43 2b17 	vmov	d7, r2, r3
 8001224:	eeb0 1a47 	vmov.f32	s2, s14
 8001228:	eef0 1a67 	vmov.f32	s3, s15
 800122c:	eeb0 0a48 	vmov.f32	s0, s16
 8001230:	eef0 0a68 	vmov.f32	s1, s17
 8001234:	f00b fee0 	bl	800cff8 <atan2>
 8001238:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	// Rotation direction
	double angleRelative = toZeroTwoPi(angleToTarget) - toZeroTwoPi(ODO_GetO());
 800123c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8001240:	f7ff ff8a 	bl	8001158 <toZeroTwoPi>
 8001244:	ec55 4b10 	vmov	r4, r5, d0
 8001248:	f000 fd7a 	bl	8001d40 <ODO_GetO>
 800124c:	eeb0 7a40 	vmov.f32	s14, s0
 8001250:	eef0 7a60 	vmov.f32	s15, s1
 8001254:	eeb0 0a47 	vmov.f32	s0, s14
 8001258:	eef0 0a67 	vmov.f32	s1, s15
 800125c:	f7ff ff7c 	bl	8001158 <toZeroTwoPi>
 8001260:	ec53 2b10 	vmov	r2, r3, d0
 8001264:	4620      	mov	r0, r4
 8001266:	4629      	mov	r1, r5
 8001268:	f7ff f83e 	bl	80002e8 <__aeabi_dsub>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	if(angleRelative > M_PI) angleRelative = angleRelative - M_TWOPI;
 8001274:	a382      	add	r3, pc, #520	; (adr r3, 8001480 <CTRL_Pos2_PositionControl+0x2c8>)
 8001276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800127e:	f7ff fc7b 	bl	8000b78 <__aeabi_dcmpgt>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00b      	beq.n	80012a0 <CTRL_Pos2_PositionControl+0xe8>
 8001288:	a37f      	add	r3, pc, #508	; (adr r3, 8001488 <CTRL_Pos2_PositionControl+0x2d0>)
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001292:	f7ff f829 	bl	80002e8 <__aeabi_dsub>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800129e:	e014      	b.n	80012ca <CTRL_Pos2_PositionControl+0x112>
	else if(angleRelative < (-M_PI)) angleRelative = angleRelative + M_TWOPI;
 80012a0:	a37b      	add	r3, pc, #492	; (adr r3, 8001490 <CTRL_Pos2_PositionControl+0x2d8>)
 80012a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80012aa:	f7ff fc47 	bl	8000b3c <__aeabi_dcmplt>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00a      	beq.n	80012ca <CTRL_Pos2_PositionControl+0x112>
 80012b4:	a374      	add	r3, pc, #464	; (adr r3, 8001488 <CTRL_Pos2_PositionControl+0x2d0>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80012be:	f7ff f815 	bl	80002ec <__adddf3>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	if (angleRelativeInitial == 0) angleRelativeInitial = angleRelative;
 80012ca:	4b79      	ldr	r3, [pc, #484]	; (80014b0 <CTRL_Pos2_PositionControl+0x2f8>)
 80012cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	f7ff fc26 	bl	8000b28 <__aeabi_dcmpeq>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d004      	beq.n	80012ec <CTRL_Pos2_PositionControl+0x134>
 80012e2:	4973      	ldr	r1, [pc, #460]	; (80014b0 <CTRL_Pos2_PositionControl+0x2f8>)
 80012e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80012e8:	e9c1 2300 	strd	r2, r3, [r1]
	// Progression
	double rotationProgress = 1 - (fabs(angleRelative) / fabs(angleRelativeInitial));
 80012ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	4b6d      	ldr	r3, [pc, #436]	; (80014b0 <CTRL_Pos2_PositionControl+0x2f8>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	4690      	mov	r8, r2
 8001300:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001304:	4642      	mov	r2, r8
 8001306:	464b      	mov	r3, r9
 8001308:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800130c:	f7ff face 	bl	80008ac <__aeabi_ddiv>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	f04f 0000 	mov.w	r0, #0
 8001318:	4966      	ldr	r1, [pc, #408]	; (80014b4 <CTRL_Pos2_PositionControl+0x2fc>)
 800131a:	f7fe ffe5 	bl	80002e8 <__aeabi_dsub>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	rotationProgress = toZeroOne(rotationProgress);
 8001326:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800132a:	f7ff fee3 	bl	80010f4 <toZeroOne>
 800132e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

	/* MOVE ----------------------------*/
	double distanceToTarget = sqrt(pow(targetX - ODO_GetX(),2) + pow(targetY - ODO_GetY(),2));
 8001332:	4b5e      	ldr	r3, [pc, #376]	; (80014ac <CTRL_Pos2_PositionControl+0x2f4>)
 8001334:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001338:	f000 fcde 	bl	8001cf8 <ODO_GetX>
 800133c:	ec53 2b10 	vmov	r2, r3, d0
 8001340:	4620      	mov	r0, r4
 8001342:	4629      	mov	r1, r5
 8001344:	f7fe ffd0 	bl	80002e8 <__aeabi_dsub>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	ec43 2b17 	vmov	d7, r2, r3
 8001350:	ed9f 1b51 	vldr	d1, [pc, #324]	; 8001498 <CTRL_Pos2_PositionControl+0x2e0>
 8001354:	eeb0 0a47 	vmov.f32	s0, s14
 8001358:	eef0 0a67 	vmov.f32	s1, s15
 800135c:	f00b fe8a 	bl	800d074 <pow>
 8001360:	ec59 8b10 	vmov	r8, r9, d0
 8001364:	4b50      	ldr	r3, [pc, #320]	; (80014a8 <CTRL_Pos2_PositionControl+0x2f0>)
 8001366:	e9d3 4500 	ldrd	r4, r5, [r3]
 800136a:	f000 fcd7 	bl	8001d1c <ODO_GetY>
 800136e:	ec53 2b10 	vmov	r2, r3, d0
 8001372:	4620      	mov	r0, r4
 8001374:	4629      	mov	r1, r5
 8001376:	f7fe ffb7 	bl	80002e8 <__aeabi_dsub>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	ec43 2b17 	vmov	d7, r2, r3
 8001382:	ed9f 1b45 	vldr	d1, [pc, #276]	; 8001498 <CTRL_Pos2_PositionControl+0x2e0>
 8001386:	eeb0 0a47 	vmov.f32	s0, s14
 800138a:	eef0 0a67 	vmov.f32	s1, s15
 800138e:	f00b fe71 	bl	800d074 <pow>
 8001392:	ec53 2b10 	vmov	r2, r3, d0
 8001396:	4640      	mov	r0, r8
 8001398:	4649      	mov	r1, r9
 800139a:	f7fe ffa7 	bl	80002ec <__adddf3>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	ec43 2b17 	vmov	d7, r2, r3
 80013a6:	eeb0 0a47 	vmov.f32	s0, s14
 80013aa:	eef0 0a67 	vmov.f32	s1, s15
 80013ae:	f00b ff0f 	bl	800d1d0 <sqrt>
 80013b2:	ed87 0b08 	vstr	d0, [r7, #32]
	if (distanceToTargetInitial == 0) distanceToTargetInitial = distanceToTarget;
 80013b6:	4b40      	ldr	r3, [pc, #256]	; (80014b8 <CTRL_Pos2_PositionControl+0x300>)
 80013b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	f7ff fbb0 	bl	8000b28 <__aeabi_dcmpeq>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d004      	beq.n	80013d8 <CTRL_Pos2_PositionControl+0x220>
 80013ce:	493a      	ldr	r1, [pc, #232]	; (80014b8 <CTRL_Pos2_PositionControl+0x300>)
 80013d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013d4:	e9c1 2300 	strd	r2, r3, [r1]
	// Progression
	double moveProgress = 1 - toZeroOne(distanceToTarget / distanceToTargetInitial);
 80013d8:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <CTRL_Pos2_PositionControl+0x300>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013e2:	f7ff fa63 	bl	80008ac <__aeabi_ddiv>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	ec43 2b17 	vmov	d7, r2, r3
 80013ee:	eeb0 0a47 	vmov.f32	s0, s14
 80013f2:	eef0 0a67 	vmov.f32	s1, s15
 80013f6:	f7ff fe7d 	bl	80010f4 <toZeroOne>
 80013fa:	ec53 2b10 	vmov	r2, r3, d0
 80013fe:	f04f 0000 	mov.w	r0, #0
 8001402:	492c      	ldr	r1, [pc, #176]	; (80014b4 <CTRL_Pos2_PositionControl+0x2fc>)
 8001404:	f7fe ff70 	bl	80002e8 <__aeabi_dsub>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double rightWheelSpeed = 0;
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double leftWheelSpeed = 0;
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	switch(state){
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <CTRL_Pos2_PositionControl+0x304>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d002      	beq.n	8001436 <CTRL_Pos2_PositionControl+0x27e>
 8001430:	2b01      	cmp	r3, #1
 8001432:	d04b      	beq.n	80014cc <CTRL_Pos2_PositionControl+0x314>
 8001434:	e210      	b.n	8001858 <CTRL_Pos2_PositionControl+0x6a0>

	case POS_STATE_STANDBY:
		MOT_SetDutyCycle(&MoteurGauche, 0);
 8001436:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80014c0 <CTRL_Pos2_PositionControl+0x308>
 800143a:	4822      	ldr	r0, [pc, #136]	; (80014c4 <CTRL_Pos2_PositionControl+0x30c>)
 800143c:	f000 fbcc 	bl	8001bd8 <MOT_SetDutyCycle>
		MOT_SetDutyCycle(&MoteurDroite, 0);
 8001440:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80014c0 <CTRL_Pos2_PositionControl+0x308>
 8001444:	4820      	ldr	r0, [pc, #128]	; (80014c8 <CTRL_Pos2_PositionControl+0x310>)
 8001446:	f000 fbc7 	bl	8001bd8 <MOT_SetDutyCycle>

		distanceToTargetInitial = 0;
 800144a:	491b      	ldr	r1, [pc, #108]	; (80014b8 <CTRL_Pos2_PositionControl+0x300>)
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	e9c1 2300 	strd	r2, r3, [r1]
		angleRelativeInitial = 0;
 8001458:	4915      	ldr	r1, [pc, #84]	; (80014b0 <CTRL_Pos2_PositionControl+0x2f8>)
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	e9c1 2300 	strd	r2, r3, [r1]

		if (!CTRL_Pos2_isArrived()) {
 8001466:	f7ff fe21 	bl	80010ac <CTRL_Pos2_isArrived>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	f040 81f7 	bne.w	8001860 <CTRL_Pos2_PositionControl+0x6a8>
			state = POS_STATE_MOVE;
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <CTRL_Pos2_PositionControl+0x304>)
 8001474:	2201      	movs	r2, #1
 8001476:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001478:	e1f2      	b.n	8001860 <CTRL_Pos2_PositionControl+0x6a8>
 800147a:	bf00      	nop
 800147c:	f3af 8000 	nop.w
 8001480:	54442d18 	.word	0x54442d18
 8001484:	400921fb 	.word	0x400921fb
 8001488:	54442d18 	.word	0x54442d18
 800148c:	401921fb 	.word	0x401921fb
 8001490:	54442d18 	.word	0x54442d18
 8001494:	c00921fb 	.word	0xc00921fb
 8001498:	00000000 	.word	0x00000000
 800149c:	40000000 	.word	0x40000000
 80014a0:	20004400 	.word	0x20004400
 80014a4:	200043e8 	.word	0x200043e8
 80014a8:	20000248 	.word	0x20000248
 80014ac:	20000240 	.word	0x20000240
 80014b0:	20000258 	.word	0x20000258
 80014b4:	3ff00000 	.word	0x3ff00000
 80014b8:	20000250 	.word	0x20000250
 80014bc:	2000023c 	.word	0x2000023c
 80014c0:	00000000 	.word	0x00000000
 80014c4:	20004388 	.word	0x20004388
 80014c8:	200043b8 	.word	0x200043b8
		//speed += POS_LIN_SMAX * (1 - moveProgress) + POS_LIN_SMAX * moveProgress;
		//speed *= 1 - moveProgress;
		//speed += POS_ROT_SMAX * rotationProgress;
		//double spCorrection = 1 - fabs(angleRelative);

		if(moveProgress < 0.8 && rotationProgress > 0.7){
 80014cc:	a3d0      	add	r3, pc, #832	; (adr r3, 8001810 <CTRL_Pos2_PositionControl+0x658>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014d6:	f7ff fb31 	bl	8000b3c <__aeabi_dcmplt>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d07d      	beq.n	80015dc <CTRL_Pos2_PositionControl+0x424>
 80014e0:	a3cd      	add	r3, pc, #820	; (adr r3, 8001818 <CTRL_Pos2_PositionControl+0x660>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014ea:	f7ff fb45 	bl	8000b78 <__aeabi_dcmpgt>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d073      	beq.n	80015dc <CTRL_Pos2_PositionControl+0x424>
			if(angleRelative < 0){
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001500:	f7ff fb1c 	bl	8000b3c <__aeabi_dcmplt>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d034      	beq.n	8001574 <CTRL_Pos2_PositionControl+0x3bc>
				leftWheelSpeed += POS_ROT_SMIN * (1 - rotationProgress);
 800150a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800150e:	f04f 0000 	mov.w	r0, #0
 8001512:	49b5      	ldr	r1, [pc, #724]	; (80017e8 <CTRL_Pos2_PositionControl+0x630>)
 8001514:	f7fe fee8 	bl	80002e8 <__aeabi_dsub>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	4bb1      	ldr	r3, [pc, #708]	; (80017ec <CTRL_Pos2_PositionControl+0x634>)
 8001526:	f7ff f897 	bl	8000658 <__aeabi_dmul>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001532:	f7fe fedb 	bl	80002ec <__adddf3>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				rightWheelSpeed -= POS_ROT_SMIN * (1 - rotationProgress);
 800153e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001542:	f04f 0000 	mov.w	r0, #0
 8001546:	49a8      	ldr	r1, [pc, #672]	; (80017e8 <CTRL_Pos2_PositionControl+0x630>)
 8001548:	f7fe fece 	bl	80002e8 <__aeabi_dsub>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	4ba4      	ldr	r3, [pc, #656]	; (80017ec <CTRL_Pos2_PositionControl+0x634>)
 800155a:	f7ff f87d 	bl	8000658 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001566:	f7fe febf 	bl	80002e8 <__aeabi_dsub>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001572:	e033      	b.n	80015dc <CTRL_Pos2_PositionControl+0x424>
			} else{
				leftWheelSpeed -= POS_ROT_SMIN * (1 - rotationProgress);
 8001574:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001578:	f04f 0000 	mov.w	r0, #0
 800157c:	499a      	ldr	r1, [pc, #616]	; (80017e8 <CTRL_Pos2_PositionControl+0x630>)
 800157e:	f7fe feb3 	bl	80002e8 <__aeabi_dsub>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	4b97      	ldr	r3, [pc, #604]	; (80017ec <CTRL_Pos2_PositionControl+0x634>)
 8001590:	f7ff f862 	bl	8000658 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800159c:	f7fe fea4 	bl	80002e8 <__aeabi_dsub>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				rightWheelSpeed += POS_ROT_SMIN * (1 - rotationProgress);
 80015a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80015ac:	f04f 0000 	mov.w	r0, #0
 80015b0:	498d      	ldr	r1, [pc, #564]	; (80017e8 <CTRL_Pos2_PositionControl+0x630>)
 80015b2:	f7fe fe99 	bl	80002e8 <__aeabi_dsub>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	4b8a      	ldr	r3, [pc, #552]	; (80017ec <CTRL_Pos2_PositionControl+0x634>)
 80015c4:	f7ff f848 	bl	8000658 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80015d0:	f7fe fe8c 	bl	80002ec <__adddf3>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}
		}

		leftWheelSpeed += POS_LIN_SMAX * moveProgress;
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	4b83      	ldr	r3, [pc, #524]	; (80017f0 <CTRL_Pos2_PositionControl+0x638>)
 80015e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015e6:	f7ff f837 	bl	8000658 <__aeabi_dmul>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80015f2:	f7fe fe7b 	bl	80002ec <__adddf3>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		rightWheelSpeed += POS_LIN_SMAX * moveProgress;
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	4b7b      	ldr	r3, [pc, #492]	; (80017f0 <CTRL_Pos2_PositionControl+0x638>)
 8001604:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001608:	f7ff f826 	bl	8000658 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001614:	f7fe fe6a 	bl	80002ec <__adddf3>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		// Choix du sens de rotation
		if(fabs(angleRelative) > 0.5 && moveProgress < 0.5){
 8001620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001626:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	4b70      	ldr	r3, [pc, #448]	; (80017f4 <CTRL_Pos2_PositionControl+0x63c>)
 8001632:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001636:	f7ff fa9f 	bl	8000b78 <__aeabi_dcmpgt>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d06a      	beq.n	8001716 <CTRL_Pos2_PositionControl+0x55e>
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	4b6b      	ldr	r3, [pc, #428]	; (80017f4 <CTRL_Pos2_PositionControl+0x63c>)
 8001646:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800164a:	f7ff fa77 	bl	8000b3c <__aeabi_dcmplt>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d060      	beq.n	8001716 <CTRL_Pos2_PositionControl+0x55e>
			leftWheelSpeed = POS_ROT_SMIN + POS_ROT_SMAX * (1 - rotationProgress);
 8001654:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001658:	f04f 0000 	mov.w	r0, #0
 800165c:	4962      	ldr	r1, [pc, #392]	; (80017e8 <CTRL_Pos2_PositionControl+0x630>)
 800165e:	f7fe fe43 	bl	80002e8 <__aeabi_dsub>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	4b60      	ldr	r3, [pc, #384]	; (80017f0 <CTRL_Pos2_PositionControl+0x638>)
 8001670:	f7fe fff2 	bl	8000658 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	4b5a      	ldr	r3, [pc, #360]	; (80017ec <CTRL_Pos2_PositionControl+0x634>)
 8001682:	f7fe fe33 	bl	80002ec <__adddf3>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			rightWheelSpeed = POS_ROT_SMIN + POS_ROT_SMAX * (1 - rotationProgress);
 800168e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001692:	f04f 0000 	mov.w	r0, #0
 8001696:	4954      	ldr	r1, [pc, #336]	; (80017e8 <CTRL_Pos2_PositionControl+0x630>)
 8001698:	f7fe fe26 	bl	80002e8 <__aeabi_dsub>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	4b51      	ldr	r3, [pc, #324]	; (80017f0 <CTRL_Pos2_PositionControl+0x638>)
 80016aa:	f7fe ffd5 	bl	8000658 <__aeabi_dmul>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b4c      	ldr	r3, [pc, #304]	; (80017ec <CTRL_Pos2_PositionControl+0x634>)
 80016bc:	f7fe fe16 	bl	80002ec <__adddf3>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

			if (angleRelative < M_PI && angleRelative > 0){
 80016c8:	a341      	add	r3, pc, #260	; (adr r3, 80017d0 <CTRL_Pos2_PositionControl+0x618>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016d2:	f7ff fa33 	bl	8000b3c <__aeabi_dcmplt>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d013      	beq.n	8001704 <CTRL_Pos2_PositionControl+0x54c>
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016e8:	f7ff fa46 	bl	8000b78 <__aeabi_dcmpgt>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d008      	beq.n	8001704 <CTRL_Pos2_PositionControl+0x54c>
				MOT_SetDirection(&MoteurGauche, MOT_FUNCTIONS_REVERSE);
 80016f2:	2102      	movs	r1, #2
 80016f4:	4840      	ldr	r0, [pc, #256]	; (80017f8 <CTRL_Pos2_PositionControl+0x640>)
 80016f6:	f000 fa16 	bl	8001b26 <MOT_SetDirection>
				MOT_SetDirection(&MoteurDroite, MOT_FUNCTIONS_FORWARD);
 80016fa:	2101      	movs	r1, #1
 80016fc:	483f      	ldr	r0, [pc, #252]	; (80017fc <CTRL_Pos2_PositionControl+0x644>)
 80016fe:	f000 fa12 	bl	8001b26 <MOT_SetDirection>
			if (angleRelative < M_PI && angleRelative > 0){
 8001702:	e010      	b.n	8001726 <CTRL_Pos2_PositionControl+0x56e>
			} else {
				MOT_SetDirection(&MoteurGauche, MOT_FUNCTIONS_FORWARD);
 8001704:	2101      	movs	r1, #1
 8001706:	483c      	ldr	r0, [pc, #240]	; (80017f8 <CTRL_Pos2_PositionControl+0x640>)
 8001708:	f000 fa0d 	bl	8001b26 <MOT_SetDirection>
				MOT_SetDirection(&MoteurDroite, MOT_FUNCTIONS_REVERSE);
 800170c:	2102      	movs	r1, #2
 800170e:	483b      	ldr	r0, [pc, #236]	; (80017fc <CTRL_Pos2_PositionControl+0x644>)
 8001710:	f000 fa09 	bl	8001b26 <MOT_SetDirection>
			if (angleRelative < M_PI && angleRelative > 0){
 8001714:	e007      	b.n	8001726 <CTRL_Pos2_PositionControl+0x56e>
			}
		} else{
			MOT_SetDirection(&MoteurGauche, MOT_FUNCTIONS_FORWARD);
 8001716:	2101      	movs	r1, #1
 8001718:	4837      	ldr	r0, [pc, #220]	; (80017f8 <CTRL_Pos2_PositionControl+0x640>)
 800171a:	f000 fa04 	bl	8001b26 <MOT_SetDirection>
			MOT_SetDirection(&MoteurDroite, MOT_FUNCTIONS_FORWARD);
 800171e:	2101      	movs	r1, #1
 8001720:	4836      	ldr	r0, [pc, #216]	; (80017fc <CTRL_Pos2_PositionControl+0x644>)
 8001722:	f000 fa00 	bl	8001b26 <MOT_SetDirection>
			//leftWheelSpeed += 20;
			//rightWheelSpeed += 20;
		}

		CTRL_SpeedControl(&MoteurGauche, &CodeurGauche, ticksLeft, leftWheelSpeed);
 8001726:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800172a:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800172e:	461a      	mov	r2, r3
 8001730:	4933      	ldr	r1, [pc, #204]	; (8001800 <CTRL_Pos2_PositionControl+0x648>)
 8001732:	4831      	ldr	r0, [pc, #196]	; (80017f8 <CTRL_Pos2_PositionControl+0x640>)
 8001734:	f000 f8a8 	bl	8001888 <CTRL_SpeedControl>
		CTRL_SpeedControl(&MoteurDroite, &CodeurDroite, ticksRight, rightWheelSpeed);
 8001738:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800173c:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001740:	461a      	mov	r2, r3
 8001742:	4930      	ldr	r1, [pc, #192]	; (8001804 <CTRL_Pos2_PositionControl+0x64c>)
 8001744:	482d      	ldr	r0, [pc, #180]	; (80017fc <CTRL_Pos2_PositionControl+0x644>)
 8001746:	f000 f89f 	bl	8001888 <CTRL_SpeedControl>

		// Stop conditions
		printf("%d\t%d\t%d\r\n", (int)leftWheelSpeed, (int)rightWheelSpeed, (int)(moveProgress*100));
 800174a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800174e:	f7ff fa33 	bl	8000bb8 <__aeabi_d2iz>
 8001752:	4604      	mov	r4, r0
 8001754:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001758:	f7ff fa2e 	bl	8000bb8 <__aeabi_d2iz>
 800175c:	4605      	mov	r5, r0
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	4b29      	ldr	r3, [pc, #164]	; (8001808 <CTRL_Pos2_PositionControl+0x650>)
 8001764:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001768:	f7fe ff76 	bl	8000658 <__aeabi_dmul>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f7ff fa20 	bl	8000bb8 <__aeabi_d2iz>
 8001778:	4603      	mov	r3, r0
 800177a:	462a      	mov	r2, r5
 800177c:	4621      	mov	r1, r4
 800177e:	4823      	ldr	r0, [pc, #140]	; (800180c <CTRL_Pos2_PositionControl+0x654>)
 8001780:	f007 fe62 	bl	8009448 <iprintf>
		if((angleRelative > (M_PI/2) || angleRelative < (-M_PI/2)) && fabs(moveProgress) > 0.5){
 8001784:	a314      	add	r3, pc, #80	; (adr r3, 80017d8 <CTRL_Pos2_PositionControl+0x620>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800178e:	f7ff f9f3 	bl	8000b78 <__aeabi_dcmpgt>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10a      	bne.n	80017ae <CTRL_Pos2_PositionControl+0x5f6>
 8001798:	a311      	add	r3, pc, #68	; (adr r3, 80017e0 <CTRL_Pos2_PositionControl+0x628>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80017a2:	f7ff f9cb 	bl	8000b3c <__aeabi_dcmplt>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d100      	bne.n	80017ae <CTRL_Pos2_PositionControl+0x5f6>
			targetX = 0;
			targetY = 0;
			MOT_SetDutyCycle(&MoteurGauche, 0);
			MOT_SetDutyCycle(&MoteurDroite, 0);
		}
		break;
 80017ac:	e059      	b.n	8001862 <CTRL_Pos2_PositionControl+0x6aa>
		if((angleRelative > (M_PI/2) || angleRelative < (-M_PI/2)) && fabs(moveProgress) > 0.5){
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	603b      	str	r3, [r7, #0]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <CTRL_Pos2_PositionControl+0x63c>)
 80017c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017c4:	f7ff f9d8 	bl	8000b78 <__aeabi_dcmpgt>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d128      	bne.n	8001820 <CTRL_Pos2_PositionControl+0x668>
		break;
 80017ce:	e048      	b.n	8001862 <CTRL_Pos2_PositionControl+0x6aa>
 80017d0:	54442d18 	.word	0x54442d18
 80017d4:	400921fb 	.word	0x400921fb
 80017d8:	54442d18 	.word	0x54442d18
 80017dc:	3ff921fb 	.word	0x3ff921fb
 80017e0:	54442d18 	.word	0x54442d18
 80017e4:	bff921fb 	.word	0xbff921fb
 80017e8:	3ff00000 	.word	0x3ff00000
 80017ec:	40540000 	.word	0x40540000
 80017f0:	405e0000 	.word	0x405e0000
 80017f4:	3fe00000 	.word	0x3fe00000
 80017f8:	20004388 	.word	0x20004388
 80017fc:	200043b8 	.word	0x200043b8
 8001800:	20004400 	.word	0x20004400
 8001804:	200043e8 	.word	0x200043e8
 8001808:	40590000 	.word	0x40590000
 800180c:	0800f2d8 	.word	0x0800f2d8
 8001810:	9999999a 	.word	0x9999999a
 8001814:	3fe99999 	.word	0x3fe99999
 8001818:	66666666 	.word	0x66666666
 800181c:	3fe66666 	.word	0x3fe66666
			state = POS_STATE_STANDBY;
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <CTRL_Pos2_PositionControl+0x6b8>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
			targetX = 0;
 8001826:	4913      	ldr	r1, [pc, #76]	; (8001874 <CTRL_Pos2_PositionControl+0x6bc>)
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	e9c1 2300 	strd	r2, r3, [r1]
			targetY = 0;
 8001834:	4910      	ldr	r1, [pc, #64]	; (8001878 <CTRL_Pos2_PositionControl+0x6c0>)
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	e9c1 2300 	strd	r2, r3, [r1]
			MOT_SetDutyCycle(&MoteurGauche, 0);
 8001842:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800187c <CTRL_Pos2_PositionControl+0x6c4>
 8001846:	480e      	ldr	r0, [pc, #56]	; (8001880 <CTRL_Pos2_PositionControl+0x6c8>)
 8001848:	f000 f9c6 	bl	8001bd8 <MOT_SetDutyCycle>
			MOT_SetDutyCycle(&MoteurDroite, 0);
 800184c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800187c <CTRL_Pos2_PositionControl+0x6c4>
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <CTRL_Pos2_PositionControl+0x6cc>)
 8001852:	f000 f9c1 	bl	8001bd8 <MOT_SetDutyCycle>
		break;
 8001856:	e004      	b.n	8001862 <CTRL_Pos2_PositionControl+0x6aa>

	default:
		state = POS_STATE_STANDBY;
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <CTRL_Pos2_PositionControl+0x6b8>)
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
		break;
 800185e:	e000      	b.n	8001862 <CTRL_Pos2_PositionControl+0x6aa>
		break;
 8001860:	bf00      	nop
	}
}
 8001862:	bf00      	nop
 8001864:	3758      	adds	r7, #88	; 0x58
 8001866:	46bd      	mov	sp, r7
 8001868:	ecbd 8b02 	vpop	{d8}
 800186c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001870:	2000023c 	.word	0x2000023c
 8001874:	20000240 	.word	0x20000240
 8001878:	20000248 	.word	0x20000248
 800187c:	00000000 	.word	0x00000000
 8001880:	20004388 	.word	0x20004388
 8001884:	200043b8 	.word	0x200043b8

08001888 <CTRL_SpeedControl>:
 * @param Motor Motor HandleTypeDef
 * @param Encoder Encoder HandleTypeDef
 * @return TBD
 */
int32_t CTRL_SpeedControl(MOT_HandleTypeDef* Motor, ENC_HandleTypeDef* Encoder,
		int32_t ticks, double consigne){
 8001888:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800188c:	b08a      	sub	sp, #40	; 0x28
 800188e:	af00      	add	r7, sp, #0
 8001890:	6178      	str	r0, [r7, #20]
 8001892:	6139      	str	r1, [r7, #16]
 8001894:	60fa      	str	r2, [r7, #12]
 8001896:	ed87 0b00 	vstr	d0, [r7]

	// Force tick to positive value
	if(ticks < 0) ticks = ticks * (-1);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	da02      	bge.n	80018a6 <CTRL_SpeedControl+0x1e>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	425b      	negs	r3, r3
 80018a4:	60fb      	str	r3, [r7, #12]

	// Speed calculation
	int freq_codeuse = SPEED_CONTROL_FREQUENCY * ticks;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2232      	movs	r2, #50	; 0x32
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	623b      	str	r3, [r7, #32]
	//float speed = ((float)freq_codeuse * ((float)WHEEL_PERIMETER/Encoder->TicksPerRev));
	float speed = ((float)freq_codeuse * Encoder->TicksCoeff); // mm/s
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ba:	ee17 0a90 	vmov	r0, s15
 80018be:	f7fe fe73 	bl	80005a8 <__aeabi_f2d>
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80018c8:	f7fe fec6 	bl	8000658 <__aeabi_dmul>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f9b8 	bl	8000c48 <__aeabi_d2f>
 80018d8:	4603      	mov	r3, r0
 80018da:	61fb      	str	r3, [r7, #28]

	float erreur = consigne - speed;
 80018dc:	69f8      	ldr	r0, [r7, #28]
 80018de:	f7fe fe63 	bl	80005a8 <__aeabi_f2d>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ea:	f7fe fcfd 	bl	80002e8 <__aeabi_dsub>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f9a7 	bl	8000c48 <__aeabi_d2f>
 80018fa:	4603      	mov	r3, r0
 80018fc:	61bb      	str	r3, [r7, #24]
	float s = 60; // Command offset
 80018fe:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <CTRL_SpeedControl+0x150>)
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
	s = s + Motor->Kp * erreur;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	ed93 7a06 	vldr	s14, [r3, #24]
 8001908:	edd7 7a06 	vldr	s15, [r7, #24]
 800190c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001910:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001918:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	s = s + Motor->Ki * (erreur + Motor->err_previous);
 800191c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800191e:	f7fe fe43 	bl	80005a8 <__aeabi_f2d>
 8001922:	4604      	mov	r4, r0
 8001924:	460d      	mov	r5, r1
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fe3c 	bl	80005a8 <__aeabi_f2d>
 8001930:	4680      	mov	r8, r0
 8001932:	4689      	mov	r9, r1
 8001934:	69b8      	ldr	r0, [r7, #24]
 8001936:	f7fe fe37 	bl	80005a8 <__aeabi_f2d>
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001940:	f7fe fcd4 	bl	80002ec <__adddf3>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4640      	mov	r0, r8
 800194a:	4649      	mov	r1, r9
 800194c:	f7fe fe84 	bl	8000658 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fcc8 	bl	80002ec <__adddf3>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	f7ff f970 	bl	8000c48 <__aeabi_d2f>
 8001968:	4603      	mov	r3, r0
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
	//s = s + Motor->s_previous + Motor->Ki * (erreur + Motor->err_previous) * (SPEED_CONTROL_PERIOD/2);

	if(s >= 80) 	s = 80;
 800196c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001970:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80019dc <CTRL_SpeedControl+0x154>
 8001974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197c:	db02      	blt.n	8001984 <CTRL_SpeedControl+0xfc>
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <CTRL_SpeedControl+0x158>)
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
 8001982:	e009      	b.n	8001998 <CTRL_SpeedControl+0x110>
	else if(s < 0) 	s = 0;
 8001984:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001988:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001990:	d502      	bpl.n	8001998 <CTRL_SpeedControl+0x110>
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24

	Motor->s_previous = s;
 8001998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800199a:	f7fe fe05 	bl	80005a8 <__aeabi_f2d>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	6979      	ldr	r1, [r7, #20]
 80019a4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	Motor->err_previous = erreur;
 80019a8:	69b8      	ldr	r0, [r7, #24]
 80019aa:	f7fe fdfd 	bl	80005a8 <__aeabi_f2d>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	6979      	ldr	r1, [r7, #20]
 80019b4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	MOT_SetDutyCycle(Motor,s);
 80019b8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80019bc:	6978      	ldr	r0, [r7, #20]
 80019be:	f000 f90b 	bl	8001bd8 <MOT_SetDutyCycle>

	return speed;
 80019c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80019c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ca:	ee17 3a90 	vmov	r3, s15
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019d8:	42700000 	.word	0x42700000
 80019dc:	42a00000 	.word	0x42a00000
 80019e0:	42a00000 	.word	0x42a00000

080019e4 <ENC_InitTimer>:
 * @param htim TIM_HandleTypeDef
 * @param Channel_A TIM Channel used
 * @param Channel_B TIM Channel used
 * @return HAL_Status
 */
uint8_t ENC_InitTimer(ENC_HandleTypeDef* Encoder, TIM_HandleTypeDef *htim, uint32_t Channel_A, uint32_t Channel_B){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
	Encoder->Timer = htim;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	601a      	str	r2, [r3, #0]
	Encoder->Timer_Channel_A = Channel_A;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	605a      	str	r2, [r3, #4]
	Encoder->Timer_Channel_B = Channel_B;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	609a      	str	r2, [r3, #8]

	if(HAL_OK != HAL_TIM_Encoder_Start(Encoder->Timer, Encoder->Timer_Channel_A & Encoder->Timer_Channel_B))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4013      	ands	r3, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f003 f876 	bl	8004b04 <HAL_TIM_Encoder_Start>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <ENC_InitTimer+0x3e>
		return 1;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <ENC_InitTimer+0x40>

	return 0;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <ENC_SetMillimeterPerTick>:
/**
 * ENC_SetMillimeterPerTick : Set MillimeterPerTick coefficient
 * @param Encoder ENC_HandleTypeDef
 * @param millimeterPerTick
 */
void ENC_SetMillimeterPerTick(ENC_HandleTypeDef* Encoder, double millimeterPerTick){
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	ed87 0b00 	vstr	d0, [r7]
	Encoder->TicksCoeff = millimeterPerTick;
 8001a38:	68f9      	ldr	r1, [r7, #12]
 8001a3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a3e:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <ENC_GetCnt>:
/**
 * ENC_GetCnt : Get CNT value of the timer counter
 * @param Encoder ENC_HandleTypeDef
 * @return ticks CNT value
 */
int32_t ENC_GetCnt(ENC_HandleTypeDef* Encoder){
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
	//uint32_t ticks = __HAL_TIM_GET_COUNTER(Encoder->Timer);
	int32_t ticks = Encoder->Timer->Instance->CNT;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	60fb      	str	r3, [r7, #12]
	ENC_ResetCnt(Encoder);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f805 	bl	8001a70 <ENC_ResetCnt>

	return ticks;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <ENC_ResetCnt>:

/**
 * ENC_ResetCnt : Reset CNT register of the timer counter
 * @param Encoder ENC_HandleTypeDef
 */
void ENC_ResetCnt(ENC_HandleTypeDef* Encoder){
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	Encoder->Timer->Instance->CNT = 0;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <MOT_InitTimer>:
 *	@param	Motor MOT_HandleTypeDef
 *	@param 	htim TIM_HandleTypeDef
 *  @param  Channel TIM Channel used
 *	@retval HAL status
 */
uint8_t MOT_InitTimer(MOT_HandleTypeDef* Motor, TIM_HandleTypeDef *htim, uint32_t Channel){
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
	Motor->Timer_Handle = htim;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	601a      	str	r2, [r3, #0]
	Motor->Timer_Channel = Channel;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	605a      	str	r2, [r3, #4]

	if(HAL_OK != HAL_TIM_PWM_Start(Motor->Timer_Handle, Motor->Timer_Channel))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	f002 feb9 	bl	8004828 <HAL_TIM_PWM_Start>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MOT_InitTimer+0x32>
		return 1;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <MOT_InitTimer+0x34>

	return 0;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <MOT_InitGPIOs>:
 *  @param  IN1_GPIO_Pin GPIO pin
 *	@param 	IN2_GPIOx GPIO port
 *  @param  IN2_GPIO_Pin GPIO pin
 */
void MOT_InitGPIOs(MOT_HandleTypeDef* Motor, GPIO_TypeDef* IN1_GPIOx, uint16_t IN1_GPIO_Pin,
		GPIO_TypeDef* IN2_GPIOx, uint16_t IN2_GPIO_Pin){
 8001aca:	b480      	push	{r7}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	80fb      	strh	r3, [r7, #6]
	Motor->IN1_GPIOx = IN1_GPIOx;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	609a      	str	r2, [r3, #8]
	Motor->IN1_GPIO_Pin = IN1_GPIO_Pin;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	88fa      	ldrh	r2, [r7, #6]
 8001ae4:	819a      	strh	r2, [r3, #12]
	Motor->IN2_GPIOx = IN2_GPIOx;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	611a      	str	r2, [r3, #16]
	Motor->IN2_GPIO_Pin = IN2_GPIO_Pin;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8b3a      	ldrh	r2, [r7, #24]
 8001af0:	829a      	strh	r2, [r3, #20]
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <MOT_SetCoeff>:
/**	MOT_SetCoeff : Set coefficient for the error correction of the motor
 *	@param	Motor MOT_HandleTypeDef
 *	@param 	Kp coefficient
 *	@param 	Ki coefficient
 */
void MOT_SetCoeff(MOT_HandleTypeDef* Motor, float Kp, float Ki){
 8001afe:	b480      	push	{r7}
 8001b00:	b085      	sub	sp, #20
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b0a:	edc7 0a01 	vstr	s1, [r7, #4]
	Motor->Kp = Kp;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	619a      	str	r2, [r3, #24]
	Motor->Ki = Ki;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	61da      	str	r2, [r3, #28]
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <MOT_SetDirection>:
/**
 * MOT_SetDirection : Set the direction of the motor
 * @param Motor MOT_HandleTypeDef
 * @param direction
 */
void MOT_SetDirection(MOT_HandleTypeDef* Motor, uint8_t direction){
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	70fb      	strb	r3, [r7, #3]
	switch(direction){
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d028      	beq.n	8001b8a <MOT_SetDirection+0x64>
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	dc37      	bgt.n	8001bac <MOT_SetDirection+0x86>
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <MOT_SetDirection+0x20>
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d011      	beq.n	8001b68 <MOT_SetDirection+0x42>
 8001b44:	e032      	b.n	8001bac <MOT_SetDirection+0x86>

	case MOT_FUNCTIONS_STOP:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6898      	ldr	r0, [r3, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	899b      	ldrh	r3, [r3, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	4619      	mov	r1, r3
 8001b52:	f001 ff81 	bl	8003a58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6918      	ldr	r0, [r3, #16]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	8a9b      	ldrh	r3, [r3, #20]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	4619      	mov	r1, r3
 8001b62:	f001 ff79 	bl	8003a58 <HAL_GPIO_WritePin>
		break;
 8001b66:	e032      	b.n	8001bce <MOT_SetDirection+0xa8>

	case MOT_FUNCTIONS_FORWARD:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6898      	ldr	r0, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	899b      	ldrh	r3, [r3, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	4619      	mov	r1, r3
 8001b74:	f001 ff70 	bl	8003a58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_SET);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6918      	ldr	r0, [r3, #16]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	8a9b      	ldrh	r3, [r3, #20]
 8001b80:	2201      	movs	r2, #1
 8001b82:	4619      	mov	r1, r3
 8001b84:	f001 ff68 	bl	8003a58 <HAL_GPIO_WritePin>
		break;
 8001b88:	e021      	b.n	8001bce <MOT_SetDirection+0xa8>

	case MOT_FUNCTIONS_REVERSE:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_SET);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6898      	ldr	r0, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	899b      	ldrh	r3, [r3, #12]
 8001b92:	2201      	movs	r2, #1
 8001b94:	4619      	mov	r1, r3
 8001b96:	f001 ff5f 	bl	8003a58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6918      	ldr	r0, [r3, #16]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	8a9b      	ldrh	r3, [r3, #20]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f001 ff57 	bl	8003a58 <HAL_GPIO_WritePin>
		break;
 8001baa:	e010      	b.n	8001bce <MOT_SetDirection+0xa8>

	default:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6898      	ldr	r0, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	899b      	ldrh	r3, [r3, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f001 ff4e 	bl	8003a58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6918      	ldr	r0, [r3, #16]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	8a9b      	ldrh	r3, [r3, #20]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f001 ff46 	bl	8003a58 <HAL_GPIO_WritePin>
	}
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <MOT_SetDutyCycle>:
/**
 * MOT_SetDutyCycle : Set the duty cycle of the PWM signal
 * @param Motor MOT_HandleTypeDef
 * @param duty_cycle Value between 0 and 100
 */
void MOT_SetDutyCycle(MOT_HandleTypeDef* Motor, float duty_cycle){
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	ed87 0a00 	vstr	s0, [r7]
	if(duty_cycle > 80) duty_cycle = 80;
 8001be4:	edd7 7a00 	vldr	s15, [r7]
 8001be8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001ca4 <MOT_SetDutyCycle+0xcc>
 8001bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	dd02      	ble.n	8001bfc <MOT_SetDutyCycle+0x24>
 8001bf6:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <MOT_SetDutyCycle+0xd0>)
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	e009      	b.n	8001c10 <MOT_SetDutyCycle+0x38>
	else if(duty_cycle < 0) duty_cycle = 0;
 8001bfc:	edd7 7a00 	vldr	s15, [r7]
 8001c00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c08:	d502      	bpl.n	8001c10 <MOT_SetDutyCycle+0x38>
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	603b      	str	r3, [r7, #0]

	float pulse = (duty_cycle / 100) * (float)MOT_TIM_PERIOD;
 8001c10:	ed97 7a00 	vldr	s14, [r7]
 8001c14:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001cac <MOT_SetDutyCycle+0xd4>
 8001c18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c1c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001cb0 <MOT_SetDutyCycle+0xd8>
 8001c20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c24:	edc7 7a03 	vstr	s15, [r7, #12]

	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10a      	bne.n	8001c46 <MOT_SetDutyCycle+0x6e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c3e:	ee17 2a90 	vmov	r2, s15
 8001c42:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c44:	e027      	b.n	8001c96 <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d10a      	bne.n	8001c64 <MOT_SetDutyCycle+0x8c>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c5c:	ee17 3a90 	vmov	r3, s15
 8001c60:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001c62:	e018      	b.n	8001c96 <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d10a      	bne.n	8001c82 <MOT_SetDutyCycle+0xaa>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c7a:	ee17 3a90 	vmov	r3, s15
 8001c7e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001c80:	e009      	b.n	8001c96 <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c90:	ee17 3a90 	vmov	r3, s15
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	42a00000 	.word	0x42a00000
 8001ca8:	42a00000 	.word	0x42a00000
 8001cac:	42c80000 	.word	0x42c80000
 8001cb0:	45520000 	.word	0x45520000

08001cb4 <ODO_Init>:
/* Functions -----------------------------------------------------------------*/

/**
 * ODO_Init : Initialization of odometry module
 */
void ODO_Init(){
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
	x = 0;
 8001cb8:	490c      	ldr	r1, [pc, #48]	; (8001cec <ODO_Init+0x38>)
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	e9c1 2300 	strd	r2, r3, [r1]
	y = 0;
 8001cc6:	490a      	ldr	r1, [pc, #40]	; (8001cf0 <ODO_Init+0x3c>)
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	e9c1 2300 	strd	r2, r3, [r1]
	o = 0;
 8001cd4:	4907      	ldr	r1, [pc, #28]	; (8001cf4 <ODO_Init+0x40>)
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	20000260 	.word	0x20000260
 8001cf0:	20000268 	.word	0x20000268
 8001cf4:	20000270 	.word	0x20000270

08001cf8 <ODO_GetX>:

/**
 * ODO_GetX : Get x coordinate of the robot
 * @return x
 */
double ODO_GetX(){
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	return x;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <ODO_GetX+0x20>)
 8001cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d02:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d06:	eeb0 0a47 	vmov.f32	s0, s14
 8001d0a:	eef0 0a67 	vmov.f32	s1, s15
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000260 	.word	0x20000260

08001d1c <ODO_GetY>:

/**
 * ODO_GetY : Get y coordinate of the robot
 * @return y
 */
double ODO_GetY(){
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
	return y;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <ODO_GetY+0x20>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d2e:	eef0 0a67 	vmov.f32	s1, s15
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000268 	.word	0x20000268

08001d40 <ODO_GetO>:

/**
 * ODO_GetO : Get o angle of the robot
 * @return o
 */
double ODO_GetO(){
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
	return o;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <ODO_GetO+0x20>)
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d4e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d52:	eef0 0a67 	vmov.f32	s1, s15
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000270 	.word	0x20000270
 8001d64:	00000000 	.word	0x00000000

08001d68 <ODO_OdometryUpdate>:
/**
 * ODO_OdometryUpdate : Update of robot's coordinate
 * @param leftTicks	Ticks from left encoder
 * @param rightTicks Ticks from right encoder
 */
void ODO_OdometryUpdate(int32_t leftTicks, int32_t rightTicks){
 8001d68:	b5b0      	push	{r4, r5, r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]

	leftTicks = leftTicks * (-1);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	425b      	negs	r3, r3
 8001d76:	607b      	str	r3, [r7, #4]

	float dDistance = ((float)leftTicks * CodeurGauche.TicksCoeff
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	ee07 3a90 	vmov	s15, r3
 8001d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d82:	ee17 0a90 	vmov	r0, s15
 8001d86:	f7fe fc0f 	bl	80005a8 <__aeabi_f2d>
 8001d8a:	4b7f      	ldr	r3, [pc, #508]	; (8001f88 <ODO_OdometryUpdate+0x220>)
 8001d8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d90:	f7fe fc62 	bl	8000658 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4614      	mov	r4, r2
 8001d9a:	461d      	mov	r5, r3
			+ (float)rightTicks * CodeurDroite.TicksCoeff) / 2;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da6:	ee17 0a90 	vmov	r0, s15
 8001daa:	f7fe fbfd 	bl	80005a8 <__aeabi_f2d>
 8001dae:	4b77      	ldr	r3, [pc, #476]	; (8001f8c <ODO_OdometryUpdate+0x224>)
 8001db0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001db4:	f7fe fc50 	bl	8000658 <__aeabi_dmul>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	f7fe fa94 	bl	80002ec <__adddf3>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dd4:	f7fe fd6a 	bl	80008ac <__aeabi_ddiv>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
	float dDistance = ((float)leftTicks * CodeurGauche.TicksCoeff
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	f7fe ff32 	bl	8000c48 <__aeabi_d2f>
 8001de4:	4603      	mov	r3, r0
 8001de6:	60fb      	str	r3, [r7, #12]
	float dAngle = ((float)rightTicks * CodeurDroite.TicksCoeff
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df2:	ee17 0a90 	vmov	r0, s15
 8001df6:	f7fe fbd7 	bl	80005a8 <__aeabi_f2d>
 8001dfa:	4b64      	ldr	r3, [pc, #400]	; (8001f8c <ODO_OdometryUpdate+0x224>)
 8001dfc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e00:	f7fe fc2a 	bl	8000658 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4614      	mov	r4, r2
 8001e0a:	461d      	mov	r5, r3
			- (float)leftTicks * CodeurGauche.TicksCoeff)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e16:	ee17 0a90 	vmov	r0, s15
 8001e1a:	f7fe fbc5 	bl	80005a8 <__aeabi_f2d>
 8001e1e:	4b5a      	ldr	r3, [pc, #360]	; (8001f88 <ODO_OdometryUpdate+0x220>)
 8001e20:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e24:	f7fe fc18 	bl	8000658 <__aeabi_dmul>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	4629      	mov	r1, r5
 8001e30:	f7fe fa5a 	bl	80002e8 <__aeabi_dsub>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
			/ (float)ENTRAXE;
 8001e3c:	a34a      	add	r3, pc, #296	; (adr r3, 8001f68 <ODO_OdometryUpdate+0x200>)
 8001e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e42:	f7fe fd33 	bl	80008ac <__aeabi_ddiv>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
	float dAngle = ((float)rightTicks * CodeurDroite.TicksCoeff
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f7fe fefb 	bl	8000c48 <__aeabi_d2f>
 8001e52:	4603      	mov	r3, r0
 8001e54:	60bb      	str	r3, [r7, #8]

	x += dDistance * cos(o);
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f7fe fba6 	bl	80005a8 <__aeabi_f2d>
 8001e5c:	4604      	mov	r4, r0
 8001e5e:	460d      	mov	r5, r1
 8001e60:	4b4b      	ldr	r3, [pc, #300]	; (8001f90 <ODO_OdometryUpdate+0x228>)
 8001e62:	ed93 7b00 	vldr	d7, [r3]
 8001e66:	eeb0 0a47 	vmov.f32	s0, s14
 8001e6a:	eef0 0a67 	vmov.f32	s1, s15
 8001e6e:	f00b f813 	bl	800ce98 <cos>
 8001e72:	ec53 2b10 	vmov	r2, r3, d0
 8001e76:	4620      	mov	r0, r4
 8001e78:	4629      	mov	r1, r5
 8001e7a:	f7fe fbed 	bl	8000658 <__aeabi_dmul>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	4b43      	ldr	r3, [pc, #268]	; (8001f94 <ODO_OdometryUpdate+0x22c>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fa2e 	bl	80002ec <__adddf3>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	493f      	ldr	r1, [pc, #252]	; (8001f94 <ODO_OdometryUpdate+0x22c>)
 8001e96:	e9c1 2300 	strd	r2, r3, [r1]
	y += dDistance * sin(o);
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f7fe fb84 	bl	80005a8 <__aeabi_f2d>
 8001ea0:	4604      	mov	r4, r0
 8001ea2:	460d      	mov	r5, r1
 8001ea4:	4b3a      	ldr	r3, [pc, #232]	; (8001f90 <ODO_OdometryUpdate+0x228>)
 8001ea6:	ed93 7b00 	vldr	d7, [r3]
 8001eaa:	eeb0 0a47 	vmov.f32	s0, s14
 8001eae:	eef0 0a67 	vmov.f32	s1, s15
 8001eb2:	f00b f84d 	bl	800cf50 <sin>
 8001eb6:	ec53 2b10 	vmov	r2, r3, d0
 8001eba:	4620      	mov	r0, r4
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	f7fe fbcb 	bl	8000658 <__aeabi_dmul>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4b33      	ldr	r3, [pc, #204]	; (8001f98 <ODO_OdometryUpdate+0x230>)
 8001ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed0:	f7fe fa0c 	bl	80002ec <__adddf3>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	492f      	ldr	r1, [pc, #188]	; (8001f98 <ODO_OdometryUpdate+0x230>)
 8001eda:	e9c1 2300 	strd	r2, r3, [r1]
	o += dAngle;
 8001ede:	68b8      	ldr	r0, [r7, #8]
 8001ee0:	f7fe fb62 	bl	80005a8 <__aeabi_f2d>
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <ODO_OdometryUpdate+0x228>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe f9ff 	bl	80002ec <__adddf3>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4927      	ldr	r1, [pc, #156]	; (8001f90 <ODO_OdometryUpdate+0x228>)
 8001ef4:	e9c1 2300 	strd	r2, r3, [r1]

	if(o > M_PI)
 8001ef8:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <ODO_OdometryUpdate+0x228>)
 8001efa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001efe:	a31c      	add	r3, pc, #112	; (adr r3, 8001f70 <ODO_OdometryUpdate+0x208>)
 8001f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f04:	f7fe fe38 	bl	8000b78 <__aeabi_dcmpgt>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00c      	beq.n	8001f28 <ODO_OdometryUpdate+0x1c0>
		o -= M_PI * 2.0f;
 8001f0e:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <ODO_OdometryUpdate+0x228>)
 8001f10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f14:	a318      	add	r3, pc, #96	; (adr r3, 8001f78 <ODO_OdometryUpdate+0x210>)
 8001f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1a:	f7fe f9e5 	bl	80002e8 <__aeabi_dsub>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	491b      	ldr	r1, [pc, #108]	; (8001f90 <ODO_OdometryUpdate+0x228>)
 8001f24:	e9c1 2300 	strd	r2, r3, [r1]

	if(o < (-1) * M_PI)
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <ODO_OdometryUpdate+0x228>)
 8001f2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f2e:	a314      	add	r3, pc, #80	; (adr r3, 8001f80 <ODO_OdometryUpdate+0x218>)
 8001f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f34:	f7fe fe02 	bl	8000b3c <__aeabi_dcmplt>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d100      	bne.n	8001f40 <ODO_OdometryUpdate+0x1d8>
		o += M_PI * 2.0f;
}
 8001f3e:	e00c      	b.n	8001f5a <ODO_OdometryUpdate+0x1f2>
		o += M_PI * 2.0f;
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <ODO_OdometryUpdate+0x228>)
 8001f42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f46:	a30c      	add	r3, pc, #48	; (adr r3, 8001f78 <ODO_OdometryUpdate+0x210>)
 8001f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4c:	f7fe f9ce 	bl	80002ec <__adddf3>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	490e      	ldr	r1, [pc, #56]	; (8001f90 <ODO_OdometryUpdate+0x228>)
 8001f56:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bdb0      	pop	{r4, r5, r7, pc}
 8001f62:	bf00      	nop
 8001f64:	f3af 8000 	nop.w
 8001f68:	00000000 	.word	0x00000000
 8001f6c:	40672000 	.word	0x40672000
 8001f70:	54442d18 	.word	0x54442d18
 8001f74:	400921fb 	.word	0x400921fb
 8001f78:	54442d18 	.word	0x54442d18
 8001f7c:	401921fb 	.word	0x401921fb
 8001f80:	54442d18 	.word	0x54442d18
 8001f84:	c00921fb 	.word	0xc00921fb
 8001f88:	20004400 	.word	0x20004400
 8001f8c:	200043e8 	.word	0x200043e8
 8001f90:	20000270 	.word	0x20000270
 8001f94:	20000260 	.word	0x20000260
 8001f98:	20000268 	.word	0x20000268

08001f9c <__io_putchar>:
/**
 * __io_putchar : Indispensable pour printf() sur la liaison uart
 * @param ch Caractère à écrire sur la liaison uart
 * @return 0 si HAL_OK
 */
uint8_t __io_putchar(int ch) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	if(HAL_OK != HAL_UART_Transmit(shell_huart, (uint8_t *)&ch, 1, HAL_MAX_DELAY)){
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <__io_putchar+0x2c>)
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	1d39      	adds	r1, r7, #4
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f003 fd2f 	bl	8005a12 <HAL_UART_Transmit>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <__io_putchar+0x22>
		return 1;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <__io_putchar+0x24>
	}
	return 0;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000278 	.word	0x20000278

08001fcc <uart_write>:
 * uart_write : Ecrire sur la liaison uart
 * @param s Chaîne de caractères à écrire sur la liaison uart
 * @param size Longueur de la chaîne de caractère
 * @return 0 si HAL_OK
 */
uint8_t uart_write(char *s, uint16_t size) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	807b      	strh	r3, [r7, #2]
	if(HAL_OK != HAL_UART_Transmit(shell_huart, (uint8_t*)s, size, 0xFFFF)){
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <uart_write+0x30>)
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	887a      	ldrh	r2, [r7, #2]
 8001fde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	f003 fd15 	bl	8005a12 <HAL_UART_Transmit>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <uart_write+0x26>
		return 1;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <uart_write+0x28>
	}
	return 0;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000278 	.word	0x20000278

08002000 <sh_help>:
 * sh_help : Menu d'aide du Shell
 * @param argc Nombre d'éléments de la ligne de commande
 * @param argv Eléments sous la forme d'un tableau de chaînes de caractères
 * @return 0
 */
uint8_t sh_help(int argc, char ** argv) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	e017      	b.n	8002040 <sh_help+0x40>
		printf("%s : %s\r\n", shell_func_list[i].cmd, shell_func_list[i].description);
 8002010:	4910      	ldr	r1, [pc, #64]	; (8002054 <sh_help+0x54>)
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	6819      	ldr	r1, [r3, #0]
 8002020:	480c      	ldr	r0, [pc, #48]	; (8002054 <sh_help+0x54>)
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4403      	add	r3, r0
 800202e:	3308      	adds	r3, #8
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	4808      	ldr	r0, [pc, #32]	; (8002058 <sh_help+0x58>)
 8002036:	f007 fa07 	bl	8009448 <iprintf>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	3301      	adds	r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <sh_help+0x5c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	429a      	cmp	r2, r3
 8002048:	dbe2      	blt.n	8002010 <sh_help+0x10>
	}
	return 0;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	200002ac 	.word	0x200002ac
 8002058:	0800f2e4 	.word	0x0800f2e4
 800205c:	200002a8 	.word	0x200002a8

08002060 <sh_example>:
 * sh_example : Fonction d'exemple pour le Shell
 * @param argc Nombre d'éléments de la ligne de commande
 * @param argv Eléments sous la forme d'un tableau de chaînes de caractères
 * @return 0
 */
uint8_t sh_example(int argc, char ** argv) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
	printf("argc = %d\r\n", argc);
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	480d      	ldr	r0, [pc, #52]	; (80020a4 <sh_example+0x44>)
 800206e:	f007 f9eb 	bl	8009448 <iprintf>
	for (int i = 0 ; i < argc ; i++) {
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	e00c      	b.n	8002092 <sh_example+0x32>
		printf("arg numero %d = %s\r\n", i, argv[i]);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	4413      	add	r3, r2
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	68f9      	ldr	r1, [r7, #12]
 8002086:	4808      	ldr	r0, [pc, #32]	; (80020a8 <sh_example+0x48>)
 8002088:	f007 f9de 	bl	8009448 <iprintf>
	for (int i = 0 ; i < argc ; i++) {
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3301      	adds	r3, #1
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	429a      	cmp	r2, r3
 8002098:	dbee      	blt.n	8002078 <sh_example+0x18>
	}
	return 0;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	0800f2f0 	.word	0x0800f2f0
 80020a8:	0800f2fc 	.word	0x0800f2fc

080020ac <shell_init>:
/**
 *shell_init : Initialisation du Shell
 * @param huart UART Handle à utiliser
 * @return 0 si HAL_OK
 */
uint8_t shell_init(UART_HandleTypeDef* huart) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	shell_huart = huart;
 80020b4:	4a16      	ldr	r2, [pc, #88]	; (8002110 <shell_init+0x64>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6013      	str	r3, [r2, #0]

	uart_write(starting,sizeof(starting));
 80020ba:	2118      	movs	r1, #24
 80020bc:	4815      	ldr	r0, [pc, #84]	; (8002114 <shell_init+0x68>)
 80020be:	f7ff ff85 	bl	8001fcc <uart_write>
	uart_write(prompt,sizeof(prompt));
 80020c2:	2111      	movs	r1, #17
 80020c4:	4814      	ldr	r0, [pc, #80]	; (8002118 <shell_init+0x6c>)
 80020c6:	f7ff ff81 	bl	8001fcc <uart_write>

	shell_add("help", sh_help, "Menu d'aide");
 80020ca:	4a14      	ldr	r2, [pc, #80]	; (800211c <shell_init+0x70>)
 80020cc:	4914      	ldr	r1, [pc, #80]	; (8002120 <shell_init+0x74>)
 80020ce:	4815      	ldr	r0, [pc, #84]	; (8002124 <shell_init+0x78>)
 80020d0:	f000 f834 	bl	800213c <shell_add>
	shell_add("f", sh_example, "Exemple de commande");
 80020d4:	4a14      	ldr	r2, [pc, #80]	; (8002128 <shell_init+0x7c>)
 80020d6:	4915      	ldr	r1, [pc, #84]	; (800212c <shell_init+0x80>)
 80020d8:	4815      	ldr	r0, [pc, #84]	; (8002130 <shell_init+0x84>)
 80020da:	f000 f82f 	bl	800213c <shell_add>

	qShell = xQueueCreate(1,sizeof(char));
 80020de:	2200      	movs	r2, #0
 80020e0:	2101      	movs	r1, #1
 80020e2:	2001      	movs	r0, #1
 80020e4:	f004 fdac 	bl	8006c40 <xQueueGenericCreate>
 80020e8:	4603      	mov	r3, r0
 80020ea:	4a12      	ldr	r2, [pc, #72]	; (8002134 <shell_init+0x88>)
 80020ec:	6013      	str	r3, [r2, #0]

	if(HAL_OK != HAL_UART_Receive_IT(shell_huart, (uint8_t*)&c, 1)){
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <shell_init+0x64>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2201      	movs	r2, #1
 80020f4:	4910      	ldr	r1, [pc, #64]	; (8002138 <shell_init+0x8c>)
 80020f6:	4618      	mov	r0, r3
 80020f8:	f003 fd1d 	bl	8005b36 <HAL_UART_Receive_IT>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <shell_init+0x5a>
		return 1;
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <shell_init+0x5c>
	}
	return 0;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000278 	.word	0x20000278
 8002114:	20000000 	.word	0x20000000
 8002118:	20000018 	.word	0x20000018
 800211c:	0800f314 	.word	0x0800f314
 8002120:	08002001 	.word	0x08002001
 8002124:	0800f320 	.word	0x0800f320
 8002128:	0800f328 	.word	0x0800f328
 800212c:	08002061 	.word	0x08002061
 8002130:	0800f33c 	.word	0x0800f33c
 8002134:	20004418 	.word	0x20004418
 8002138:	2000027c 	.word	0x2000027c

0800213c <shell_add>:
 * @param cmd Commande à rentrer
 * @param pfunc Référence vers la fonction à appeler
 * @param description Description de la fonction pour le menu d'aide
 * @return 0 si le nombre de commande est valide
 */
uint8_t shell_add(char * cmd, int (* pfunc)(int argc, char ** argv), char * description) {
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8002148:	4b18      	ldr	r3, [pc, #96]	; (80021ac <shell_add+0x70>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b0f      	cmp	r3, #15
 800214e:	dc26      	bgt.n	800219e <shell_add+0x62>
		shell_func_list[shell_func_list_size].cmd = cmd;
 8002150:	4b16      	ldr	r3, [pc, #88]	; (80021ac <shell_add+0x70>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4916      	ldr	r1, [pc, #88]	; (80021b0 <shell_add+0x74>)
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <shell_add+0x70>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4911      	ldr	r1, [pc, #68]	; (80021b0 <shell_add+0x74>)
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	3304      	adds	r3, #4
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <shell_add+0x70>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	490c      	ldr	r1, [pc, #48]	; (80021b0 <shell_add+0x74>)
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	3308      	adds	r3, #8
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <shell_add+0x70>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3301      	adds	r3, #1
 8002196:	4a05      	ldr	r2, [pc, #20]	; (80021ac <shell_add+0x70>)
 8002198:	6013      	str	r3, [r2, #0]
		return 0;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <shell_add+0x64>
	}

	return -1;
 800219e:	23ff      	movs	r3, #255	; 0xff
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	200002a8 	.word	0x200002a8
 80021b0:	200002ac 	.word	0x200002ac

080021b4 <shell_char_received>:

/**
 * shell_char_received : Traitement du dernier caractère reçu
 * @return 0
 */
uint8_t shell_char_received() {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
	xQueueReceive(qShell, &c, portMAX_DELAY);
 80021b8:	4b26      	ldr	r3, [pc, #152]	; (8002254 <shell_char_received+0xa0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295
 80021c0:	4925      	ldr	r1, [pc, #148]	; (8002258 <shell_char_received+0xa4>)
 80021c2:	4618      	mov	r0, r3
 80021c4:	f004 fe30 	bl	8006e28 <xQueueReceive>

	switch (c) {
 80021c8:	4b23      	ldr	r3, [pc, #140]	; (8002258 <shell_char_received+0xa4>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d019      	beq.n	8002204 <shell_char_received+0x50>
 80021d0:	2b0d      	cmp	r3, #13
 80021d2:	d126      	bne.n	8002222 <shell_char_received+0x6e>
	case '\r':
		// Appui sur la touche ENTER
		printf("\r\n");
 80021d4:	4821      	ldr	r0, [pc, #132]	; (800225c <shell_char_received+0xa8>)
 80021d6:	f007 f9bd 	bl	8009554 <puts>
		buf[pos++] = 0;
 80021da:	4b21      	ldr	r3, [pc, #132]	; (8002260 <shell_char_received+0xac>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	b2d1      	uxtb	r1, r2
 80021e2:	4a1f      	ldr	r2, [pc, #124]	; (8002260 <shell_char_received+0xac>)
 80021e4:	7011      	strb	r1, [r2, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <shell_char_received+0xb0>)
 80021ea:	2100      	movs	r1, #0
 80021ec:	5499      	strb	r1, [r3, r2]
		pos = 0;
 80021ee:	4b1c      	ldr	r3, [pc, #112]	; (8002260 <shell_char_received+0xac>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
		shell_exec(buf);
 80021f4:	481b      	ldr	r0, [pc, #108]	; (8002264 <shell_char_received+0xb0>)
 80021f6:	f000 f83b 	bl	8002270 <shell_exec>
		uart_write(prompt,sizeof(prompt));
 80021fa:	2111      	movs	r1, #17
 80021fc:	481a      	ldr	r0, [pc, #104]	; (8002268 <shell_char_received+0xb4>)
 80021fe:	f7ff fee5 	bl	8001fcc <uart_write>
		break;
 8002202:	e023      	b.n	800224c <shell_char_received+0x98>

	case '\b':
		// Appui sur la touche DELETE
		if (pos > 0) {
 8002204:	4b16      	ldr	r3, [pc, #88]	; (8002260 <shell_char_received+0xac>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01e      	beq.n	800224a <shell_char_received+0x96>
			pos--;
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <shell_char_received+0xac>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	3b01      	subs	r3, #1
 8002212:	b2da      	uxtb	r2, r3
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <shell_char_received+0xac>)
 8002216:	701a      	strb	r2, [r3, #0]
			uart_write(backspace, 3);
 8002218:	2103      	movs	r1, #3
 800221a:	4814      	ldr	r0, [pc, #80]	; (800226c <shell_char_received+0xb8>)
 800221c:	f7ff fed6 	bl	8001fcc <uart_write>
		}
		break;
 8002220:	e013      	b.n	800224a <shell_char_received+0x96>

	default:
		if (pos < SHELL_BUFFER_SIZE) {
 8002222:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <shell_char_received+0xac>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b27      	cmp	r3, #39	; 0x27
 8002228:	d810      	bhi.n	800224c <shell_char_received+0x98>
			uart_write(&c, 1);
 800222a:	2101      	movs	r1, #1
 800222c:	480a      	ldr	r0, [pc, #40]	; (8002258 <shell_char_received+0xa4>)
 800222e:	f7ff fecd 	bl	8001fcc <uart_write>
			buf[pos++] = c;
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <shell_char_received+0xac>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	b2d1      	uxtb	r1, r2
 800223a:	4a09      	ldr	r2, [pc, #36]	; (8002260 <shell_char_received+0xac>)
 800223c:	7011      	strb	r1, [r2, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <shell_char_received+0xa4>)
 8002242:	7819      	ldrb	r1, [r3, #0]
 8002244:	4b07      	ldr	r3, [pc, #28]	; (8002264 <shell_char_received+0xb0>)
 8002246:	5499      	strb	r1, [r3, r2]
 8002248:	e000      	b.n	800224c <shell_char_received+0x98>
		break;
 800224a:	bf00      	nop
		}
	}

	return 0;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20004418 	.word	0x20004418
 8002258:	2000027c 	.word	0x2000027c
 800225c:	0800f340 	.word	0x0800f340
 8002260:	2000027d 	.word	0x2000027d
 8002264:	20000280 	.word	0x20000280
 8002268:	20000018 	.word	0x20000018
 800226c:	2000002c 	.word	0x2000002c

08002270 <shell_exec>:
/**
 * shell_exec : Recherche et execution de la commande
 * @param cmd Commande à traiter
 * @return Référence vers la fonction à exécuter
 */
uint8_t shell_exec(char * cmd) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b092      	sub	sp, #72	; 0x48
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	int argc;
	char * argv[SHELL_ARGC_MAX];
	char *p;

	// Séparation du header et des paramètres
	char header[SHELL_CMD_MAX_SIZE] = "";
 8002278:	2300      	movs	r3, #0
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
	int h = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c

	while(cmd[h] != ' ' && h < SHELL_CMD_MAX_SIZE){
 800228c:	e00c      	b.n	80022a8 <shell_exec+0x38>
		header[h] = cmd[h];
 800228e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	4413      	add	r3, r2
 8002294:	7819      	ldrb	r1, [r3, #0]
 8002296:	f107 0208 	add.w	r2, r7, #8
 800229a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800229c:	4413      	add	r3, r2
 800229e:	460a      	mov	r2, r1
 80022a0:	701a      	strb	r2, [r3, #0]
		h++;
 80022a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a4:	3301      	adds	r3, #1
 80022a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(cmd[h] != ' ' && h < SHELL_CMD_MAX_SIZE){
 80022a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d002      	beq.n	80022ba <shell_exec+0x4a>
 80022b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b6:	2b0f      	cmp	r3, #15
 80022b8:	dde9      	ble.n	800228e <shell_exec+0x1e>
	}
	header[h] = '\0';
 80022ba:	f107 0208 	add.w	r2, r7, #8
 80022be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c0:	4413      	add	r3, r2
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]

	// Recherche de la commande et paramètres
	for(int i = 0 ; i < shell_func_list_size ; i++) {
 80022c6:	2300      	movs	r3, #0
 80022c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80022ca:	e047      	b.n	800235c <shell_exec+0xec>
		if (!strcmp(shell_func_list[i].cmd, header)) {
 80022cc:	492a      	ldr	r1, [pc, #168]	; (8002378 <shell_exec+0x108>)
 80022ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022d0:	4613      	mov	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f107 0208 	add.w	r2, r7, #8
 80022e0:	4611      	mov	r1, r2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fd ff94 	bl	8000210 <strcmp>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d133      	bne.n	8002356 <shell_exec+0xe6>
			argc = 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	647b      	str	r3, [r7, #68]	; 0x44
			argv[0] = cmd;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	61bb      	str	r3, [r7, #24]

			for(p = cmd ; *p != '\0' && argc < SHELL_ARGC_MAX ; p++){
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	643b      	str	r3, [r7, #64]	; 0x40
 80022fa:	e014      	b.n	8002326 <shell_exec+0xb6>
				if(*p == ' ') {
 80022fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b20      	cmp	r3, #32
 8002302:	d10d      	bne.n	8002320 <shell_exec+0xb0>
					*p = '\0';
 8002304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 800230a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	647a      	str	r2, [r7, #68]	; 0x44
 8002310:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002312:	3201      	adds	r2, #1
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800231a:	440b      	add	r3, r1
 800231c:	f843 2c30 	str.w	r2, [r3, #-48]
			for(p = cmd ; *p != '\0' && argc < SHELL_ARGC_MAX ; p++){
 8002320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002322:	3301      	adds	r3, #1
 8002324:	643b      	str	r3, [r7, #64]	; 0x40
 8002326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <shell_exec+0xc4>
 800232e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002330:	2b07      	cmp	r3, #7
 8002332:	dde3      	ble.n	80022fc <shell_exec+0x8c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8002334:	4910      	ldr	r1, [pc, #64]	; (8002378 <shell_exec+0x108>)
 8002336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3304      	adds	r3, #4
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f107 0218 	add.w	r2, r7, #24
 800234a:	4611      	mov	r1, r2
 800234c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800234e:	4798      	blx	r3
 8002350:	4603      	mov	r3, r0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	e00c      	b.n	8002370 <shell_exec+0x100>
	for(int i = 0 ; i < shell_func_list_size ; i++) {
 8002356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002358:	3301      	adds	r3, #1
 800235a:	63bb      	str	r3, [r7, #56]	; 0x38
 800235c:	4b07      	ldr	r3, [pc, #28]	; (800237c <shell_exec+0x10c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002362:	429a      	cmp	r2, r3
 8002364:	dbb2      	blt.n	80022cc <shell_exec+0x5c>
		}
	}
	printf("%s: command not found\r\n", cmd);
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4805      	ldr	r0, [pc, #20]	; (8002380 <shell_exec+0x110>)
 800236a:	f007 f86d 	bl	8009448 <iprintf>
	return -1;
 800236e:	23ff      	movs	r3, #255	; 0xff
}
 8002370:	4618      	mov	r0, r3
 8002372:	3748      	adds	r7, #72	; 0x48
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200002ac 	.word	0x200002ac
 800237c:	200002a8 	.word	0x200002a8
 8002380:	0800f344 	.word	0x0800f344

08002384 <STRAT_strategyInit>:
uint8_t indexStrategy = 1;

/* End of variables ----------------------------------------------------------*/

/* Functions -----------------------------------------------------------------*/
void STRAT_strategyInit(){
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
	strategy[0].x = 0;
 8002388:	492b      	ldr	r1, [pc, #172]	; (8002438 <STRAT_strategyInit+0xb4>)
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	e9c1 2300 	strd	r2, r3, [r1]
	strategy[0].y = 1;
 8002396:	4928      	ldr	r1, [pc, #160]	; (8002438 <STRAT_strategyInit+0xb4>)
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <STRAT_strategyInit+0xb8>)
 800239e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	strategy[0].dir = 1;
 80023a2:	4b25      	ldr	r3, [pc, #148]	; (8002438 <STRAT_strategyInit+0xb4>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	741a      	strb	r2, [r3, #16]

	strategy[1].x = 200;
 80023a8:	4923      	ldr	r1, [pc, #140]	; (8002438 <STRAT_strategyInit+0xb4>)
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	4b24      	ldr	r3, [pc, #144]	; (8002440 <STRAT_strategyInit+0xbc>)
 80023b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	strategy[1].y = 100;
 80023b4:	4920      	ldr	r1, [pc, #128]	; (8002438 <STRAT_strategyInit+0xb4>)
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	4b22      	ldr	r3, [pc, #136]	; (8002444 <STRAT_strategyInit+0xc0>)
 80023bc:	e9c1 2308 	strd	r2, r3, [r1, #32]
	strategy[1].dir = 1;
 80023c0:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <STRAT_strategyInit+0xb4>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	strategy[2].x = 1;
 80023c8:	491b      	ldr	r1, [pc, #108]	; (8002438 <STRAT_strategyInit+0xb4>)
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	4b1b      	ldr	r3, [pc, #108]	; (800243c <STRAT_strategyInit+0xb8>)
 80023d0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	strategy[2].y = 0;
 80023d4:	4918      	ldr	r1, [pc, #96]	; (8002438 <STRAT_strategyInit+0xb4>)
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	strategy[2].dir = 1;
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <STRAT_strategyInit+0xb4>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	strategy[3].x = 0;
 80023ea:	4913      	ldr	r1, [pc, #76]	; (8002438 <STRAT_strategyInit+0xb4>)
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	strategy[3].y = 200;
 80023f8:	490f      	ldr	r1, [pc, #60]	; (8002438 <STRAT_strategyInit+0xb4>)
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <STRAT_strategyInit+0xbc>)
 8002400:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	strategy[3].dir = 1;
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <STRAT_strategyInit+0xb4>)
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	strategy[4].x = 0;
 800240c:	490a      	ldr	r1, [pc, #40]	; (8002438 <STRAT_strategyInit+0xb4>)
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	strategy[4].y = 1;
 800241a:	4907      	ldr	r1, [pc, #28]	; (8002438 <STRAT_strategyInit+0xb4>)
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <STRAT_strategyInit+0xb8>)
 8002422:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	strategy[4].dir = 1;
 8002426:	4b04      	ldr	r3, [pc, #16]	; (8002438 <STRAT_strategyInit+0xb4>)
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	20004420 	.word	0x20004420
 800243c:	3ff00000 	.word	0x3ff00000
 8002440:	40690000 	.word	0x40690000
 8002444:	40590000 	.word	0x40590000

08002448 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4a07      	ldr	r2, [pc, #28]	; (8002474 <vApplicationGetIdleTaskMemory+0x2c>)
 8002458:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	4a06      	ldr	r2, [pc, #24]	; (8002478 <vApplicationGetIdleTaskMemory+0x30>)
 800245e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2280      	movs	r2, #128	; 0x80
 8002464:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	2000036c 	.word	0x2000036c
 8002478:	20000420 	.word	0x20000420

0800247c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800247c:	b5b0      	push	{r4, r5, r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <MX_FREERTOS_Init+0x30>)
 8002484:	1d3c      	adds	r4, r7, #4
 8002486:	461d      	mov	r5, r3
 8002488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800248a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800248c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002490:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f004 fa54 	bl	8006946 <osThreadCreate>
 800249e:	4603      	mov	r3, r0
 80024a0:	4a03      	ldr	r2, [pc, #12]	; (80024b0 <MX_FREERTOS_Init+0x34>)
 80024a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80024a4:	bf00      	nop
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bdb0      	pop	{r4, r5, r7, pc}
 80024ac:	0800f368 	.word	0x0800f368
 80024b0:	20004498 	.word	0x20004498

080024b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80024bc:	2001      	movs	r0, #1
 80024be:	f004 fa8e 	bl	80069de <osDelay>
 80024c2:	e7fb      	b.n	80024bc <StartDefaultTask+0x8>

080024c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]
 80024d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b3c      	ldr	r3, [pc, #240]	; (80025d0 <MX_GPIO_Init+0x10c>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a3b      	ldr	r2, [pc, #236]	; (80025d0 <MX_GPIO_Init+0x10c>)
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <MX_GPIO_Init+0x10c>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	4b35      	ldr	r3, [pc, #212]	; (80025d0 <MX_GPIO_Init+0x10c>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a34      	ldr	r2, [pc, #208]	; (80025d0 <MX_GPIO_Init+0x10c>)
 8002500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b32      	ldr	r3, [pc, #200]	; (80025d0 <MX_GPIO_Init+0x10c>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <MX_GPIO_Init+0x10c>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a2d      	ldr	r2, [pc, #180]	; (80025d0 <MX_GPIO_Init+0x10c>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b2b      	ldr	r3, [pc, #172]	; (80025d0 <MX_GPIO_Init+0x10c>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <MX_GPIO_Init+0x10c>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a26      	ldr	r2, [pc, #152]	; (80025d0 <MX_GPIO_Init+0x10c>)
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <MX_GPIO_Init+0x10c>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTG_IN2_Pin|MOTG_IN1_Pin, GPIO_PIN_RESET);
 800254a:	2200      	movs	r2, #0
 800254c:	2103      	movs	r1, #3
 800254e:	4821      	ldr	r0, [pc, #132]	; (80025d4 <MX_GPIO_Init+0x110>)
 8002550:	f001 fa82 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTD_IN3_Pin|MOTD_IN4_Pin, GPIO_PIN_RESET);
 8002554:	2200      	movs	r2, #0
 8002556:	f44f 7140 	mov.w	r1, #768	; 0x300
 800255a:	481f      	ldr	r0, [pc, #124]	; (80025d8 <MX_GPIO_Init+0x114>)
 800255c:	f001 fa7c 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 8002560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002566:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800256a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	4619      	mov	r1, r3
 8002576:	4817      	ldr	r0, [pc, #92]	; (80025d4 <MX_GPIO_Init+0x110>)
 8002578:	f001 f8da 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTG_IN2_Pin|MOTG_IN1_Pin;
 800257c:	2303      	movs	r3, #3
 800257e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002580:	2301      	movs	r3, #1
 8002582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	4619      	mov	r1, r3
 8002592:	4810      	ldr	r0, [pc, #64]	; (80025d4 <MX_GPIO_Init+0x110>)
 8002594:	f001 f8cc 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOTD_IN3_Pin|MOTD_IN4_Pin;
 8002598:	f44f 7340 	mov.w	r3, #768	; 0x300
 800259c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259e:	2301      	movs	r3, #1
 80025a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	4619      	mov	r1, r3
 80025b0:	4809      	ldr	r0, [pc, #36]	; (80025d8 <MX_GPIO_Init+0x114>)
 80025b2:	f001 f8bd 	bl	8003730 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2105      	movs	r1, #5
 80025ba:	2028      	movs	r0, #40	; 0x28
 80025bc:	f000 fffc 	bl	80035b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025c0:	2028      	movs	r0, #40	; 0x28
 80025c2:	f001 f815 	bl	80035f0 <HAL_NVIC_EnableIRQ>

}
 80025c6:	bf00      	nop
 80025c8:	3728      	adds	r7, #40	; 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40020800 	.word	0x40020800
 80025d8:	40020400 	.word	0x40020400

080025dc <start>:
	printf(" +-------------------------------------+ \r\n");

	return 0;
}

void start(int argc, char ** argv){
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
	printf("Demarrage\r\n");
 80025e6:	4805      	ldr	r0, [pc, #20]	; (80025fc <start+0x20>)
 80025e8:	f006 ffb4 	bl	8009554 <puts>
	bPower = 1;
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <start+0x24>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	0800f5c0 	.word	0x0800f5c0
 8002600:	20000620 	.word	0x20000620

08002604 <stop>:

void stop(int argc, char ** argv){
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
	printf("Arret\r\n");
 800260e:	4805      	ldr	r0, [pc, #20]	; (8002624 <stop+0x20>)
 8002610:	f006 ffa0 	bl	8009554 <puts>
	bPower = 0;
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <stop+0x24>)
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	0800f5cc 	.word	0x0800f5cc
 8002628:	20000620 	.word	0x20000620

0800262c <speed>:

void speed(int argc, char ** argv){
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
	if(argc == 2){
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b02      	cmp	r3, #2
 800263a:	d10c      	bne.n	8002656 <speed+0x2a>
		speedValue = atoi(argv[1]);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	3304      	adds	r3, #4
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f006 f8fd 	bl	8008842 <atoi>
 8002648:	ee07 0a90 	vmov	s15, r0
 800264c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <speed+0x34>)
 8002652:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000034 	.word	0x20000034

08002664 <target>:

void target(int argc, char ** argv){
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
	if(argc == 3){
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b03      	cmp	r3, #3
 8002672:	d12d      	bne.n	80026d0 <target+0x6c>
		float x = atof(argv[1]);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	3304      	adds	r3, #4
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f006 f8de 	bl	800883c <atof>
 8002680:	ec53 2b10 	vmov	r2, r3, d0
 8002684:	4610      	mov	r0, r2
 8002686:	4619      	mov	r1, r3
 8002688:	f7fe fade 	bl	8000c48 <__aeabi_d2f>
 800268c:	4603      	mov	r3, r0
 800268e:	60fb      	str	r3, [r7, #12]
		float y = atof(argv[2]);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	3308      	adds	r3, #8
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f006 f8d0 	bl	800883c <atof>
 800269c:	ec53 2b10 	vmov	r2, r3, d0
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	f7fe fad0 	bl	8000c48 <__aeabi_d2f>
 80026a8:	4603      	mov	r3, r0
 80026aa:	60bb      	str	r3, [r7, #8]
		CTRL_Pos2_SetTargetX((double)x);
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f7fd ff7b 	bl	80005a8 <__aeabi_f2d>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	ec43 2b10 	vmov	d0, r2, r3
 80026ba:	f7fe fcc7 	bl	800104c <CTRL_Pos2_SetTargetX>
		CTRL_Pos2_SetTargetY((double)y);
 80026be:	68b8      	ldr	r0, [r7, #8]
 80026c0:	f7fd ff72 	bl	80005a8 <__aeabi_f2d>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	ec43 2b10 	vmov	d0, r2, r3
 80026cc:	f7fe fcd6 	bl	800107c <CTRL_Pos2_SetTargetY>
	}
}
 80026d0:	bf00      	nop
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <vTaskShell>:

void vTaskShell(void * p) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	shell_init(&(UART_DEVICE));
 80026e0:	480c      	ldr	r0, [pc, #48]	; (8002714 <vTaskShell+0x3c>)
 80026e2:	f7ff fce3 	bl	80020ac <shell_init>
	shell_add("start", start, "Demarrage");
 80026e6:	4a0c      	ldr	r2, [pc, #48]	; (8002718 <vTaskShell+0x40>)
 80026e8:	490c      	ldr	r1, [pc, #48]	; (800271c <vTaskShell+0x44>)
 80026ea:	480d      	ldr	r0, [pc, #52]	; (8002720 <vTaskShell+0x48>)
 80026ec:	f7ff fd26 	bl	800213c <shell_add>
	shell_add("stop", stop, "Arret");
 80026f0:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <vTaskShell+0x4c>)
 80026f2:	490d      	ldr	r1, [pc, #52]	; (8002728 <vTaskShell+0x50>)
 80026f4:	480d      	ldr	r0, [pc, #52]	; (800272c <vTaskShell+0x54>)
 80026f6:	f7ff fd21 	bl	800213c <shell_add>
	shell_add("speed", speed, "Vitesse");
 80026fa:	4a0d      	ldr	r2, [pc, #52]	; (8002730 <vTaskShell+0x58>)
 80026fc:	490d      	ldr	r1, [pc, #52]	; (8002734 <vTaskShell+0x5c>)
 80026fe:	480e      	ldr	r0, [pc, #56]	; (8002738 <vTaskShell+0x60>)
 8002700:	f7ff fd1c 	bl	800213c <shell_add>
	shell_add("target", target, "Mise a jour de la consigne");
 8002704:	4a0d      	ldr	r2, [pc, #52]	; (800273c <vTaskShell+0x64>)
 8002706:	490e      	ldr	r1, [pc, #56]	; (8002740 <vTaskShell+0x68>)
 8002708:	480e      	ldr	r0, [pc, #56]	; (8002744 <vTaskShell+0x6c>)
 800270a:	f7ff fd17 	bl	800213c <shell_add>

	while(1){
		shell_char_received();
 800270e:	f7ff fd51 	bl	80021b4 <shell_char_received>
 8002712:	e7fc      	b.n	800270e <vTaskShell+0x36>
 8002714:	200045bc 	.word	0x200045bc
 8002718:	0800f5d4 	.word	0x0800f5d4
 800271c:	080025dd 	.word	0x080025dd
 8002720:	0800f5e0 	.word	0x0800f5e0
 8002724:	0800f5e8 	.word	0x0800f5e8
 8002728:	08002605 	.word	0x08002605
 800272c:	0800f5f0 	.word	0x0800f5f0
 8002730:	0800f5f8 	.word	0x0800f5f8
 8002734:	0800262d 	.word	0x0800262d
 8002738:	0800f600 	.word	0x0800f600
 800273c:	0800f608 	.word	0x0800f608
 8002740:	08002665 	.word	0x08002665
 8002744:	0800f624 	.word	0x0800f624

08002748 <vTaskAsserv>:
	}
}

void vTaskAsserv(void * p){
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af02      	add	r7, sp, #8
 800274e:	6078      	str	r0, [r7, #4]
	/* Initialisation Moteur Gauche ---------------------*/
	MOT_InitTimer(&MoteurGauche, &htim1, TIM_CHANNEL_1);
 8002750:	2200      	movs	r2, #0
 8002752:	4953      	ldr	r1, [pc, #332]	; (80028a0 <vTaskAsserv+0x158>)
 8002754:	4853      	ldr	r0, [pc, #332]	; (80028a4 <vTaskAsserv+0x15c>)
 8002756:	f7ff f99a 	bl	8001a8e <MOT_InitTimer>
	MOT_InitGPIOs(&MoteurGauche,
 800275a:	2301      	movs	r3, #1
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	4b52      	ldr	r3, [pc, #328]	; (80028a8 <vTaskAsserv+0x160>)
 8002760:	2202      	movs	r2, #2
 8002762:	4951      	ldr	r1, [pc, #324]	; (80028a8 <vTaskAsserv+0x160>)
 8002764:	484f      	ldr	r0, [pc, #316]	; (80028a4 <vTaskAsserv+0x15c>)
 8002766:	f7ff f9b0 	bl	8001aca <MOT_InitGPIOs>
			MOTG_IN1_GPIO_Port, MOTG_IN1_Pin,
			MOTG_IN2_GPIO_Port, MOTG_IN2_Pin);
	MOT_SetCoeff(&MoteurGauche, 1.2, 0.1);
 800276a:	eddf 0a50 	vldr	s1, [pc, #320]	; 80028ac <vTaskAsserv+0x164>
 800276e:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80028b0 <vTaskAsserv+0x168>
 8002772:	484c      	ldr	r0, [pc, #304]	; (80028a4 <vTaskAsserv+0x15c>)
 8002774:	f7ff f9c3 	bl	8001afe <MOT_SetCoeff>
	MOT_SetDirection(&MoteurGauche, MOT_FUNCTIONS_FORWARD);
 8002778:	2101      	movs	r1, #1
 800277a:	484a      	ldr	r0, [pc, #296]	; (80028a4 <vTaskAsserv+0x15c>)
 800277c:	f7ff f9d3 	bl	8001b26 <MOT_SetDirection>
	MOT_SetDutyCycle(&MoteurGauche, 0);
 8002780:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80028b4 <vTaskAsserv+0x16c>
 8002784:	4847      	ldr	r0, [pc, #284]	; (80028a4 <vTaskAsserv+0x15c>)
 8002786:	f7ff fa27 	bl	8001bd8 <MOT_SetDutyCycle>

	/* Initialisation Moteur Droite ---------------------*/
	MOT_InitTimer(&MoteurDroite, &htim1, TIM_CHANNEL_2);
 800278a:	2204      	movs	r2, #4
 800278c:	4944      	ldr	r1, [pc, #272]	; (80028a0 <vTaskAsserv+0x158>)
 800278e:	484a      	ldr	r0, [pc, #296]	; (80028b8 <vTaskAsserv+0x170>)
 8002790:	f7ff f97d 	bl	8001a8e <MOT_InitTimer>
	MOT_InitGPIOs(&MoteurDroite,
 8002794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	4b48      	ldr	r3, [pc, #288]	; (80028bc <vTaskAsserv+0x174>)
 800279c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027a0:	4946      	ldr	r1, [pc, #280]	; (80028bc <vTaskAsserv+0x174>)
 80027a2:	4845      	ldr	r0, [pc, #276]	; (80028b8 <vTaskAsserv+0x170>)
 80027a4:	f7ff f991 	bl	8001aca <MOT_InitGPIOs>
			MOTD_IN3_GPIO_Port, MOTD_IN3_Pin,
			MOTD_IN4_GPIO_Port, MOTD_IN4_Pin);
	MOT_SetCoeff(&MoteurDroite, 1.2, 0.1);
 80027a8:	eddf 0a40 	vldr	s1, [pc, #256]	; 80028ac <vTaskAsserv+0x164>
 80027ac:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80028b0 <vTaskAsserv+0x168>
 80027b0:	4841      	ldr	r0, [pc, #260]	; (80028b8 <vTaskAsserv+0x170>)
 80027b2:	f7ff f9a4 	bl	8001afe <MOT_SetCoeff>
	MOT_SetDirection(&MoteurDroite, MOT_FUNCTIONS_FORWARD);
 80027b6:	2101      	movs	r1, #1
 80027b8:	483f      	ldr	r0, [pc, #252]	; (80028b8 <vTaskAsserv+0x170>)
 80027ba:	f7ff f9b4 	bl	8001b26 <MOT_SetDirection>
	MOT_SetDutyCycle(&MoteurDroite, 0);
 80027be:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80028b4 <vTaskAsserv+0x16c>
 80027c2:	483d      	ldr	r0, [pc, #244]	; (80028b8 <vTaskAsserv+0x170>)
 80027c4:	f7ff fa08 	bl	8001bd8 <MOT_SetDutyCycle>

	/* Initialisation Encodeur Gauche -------------------*/
	ENC_InitTimer(&CodeurGauche, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80027c8:	2304      	movs	r3, #4
 80027ca:	2200      	movs	r2, #0
 80027cc:	493c      	ldr	r1, [pc, #240]	; (80028c0 <vTaskAsserv+0x178>)
 80027ce:	483d      	ldr	r0, [pc, #244]	; (80028c4 <vTaskAsserv+0x17c>)
 80027d0:	f7ff f908 	bl	80019e4 <ENC_InitTimer>
	ENC_SetMillimeterPerTick(&CodeurGauche, 0.08200);
 80027d4:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 8002890 <vTaskAsserv+0x148>
 80027d8:	483a      	ldr	r0, [pc, #232]	; (80028c4 <vTaskAsserv+0x17c>)
 80027da:	f7ff f927 	bl	8001a2c <ENC_SetMillimeterPerTick>

	/* Initialisation Encodeur Droite -------------------*/
	ENC_InitTimer(&CodeurDroite, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80027de:	2304      	movs	r3, #4
 80027e0:	2200      	movs	r2, #0
 80027e2:	4939      	ldr	r1, [pc, #228]	; (80028c8 <vTaskAsserv+0x180>)
 80027e4:	4839      	ldr	r0, [pc, #228]	; (80028cc <vTaskAsserv+0x184>)
 80027e6:	f7ff f8fd 	bl	80019e4 <ENC_InitTimer>
	ENC_SetMillimeterPerTick(&CodeurDroite, 0.08125);
 80027ea:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 8002898 <vTaskAsserv+0x150>
 80027ee:	4837      	ldr	r0, [pc, #220]	; (80028cc <vTaskAsserv+0x184>)
 80027f0:	f7ff f91c 	bl	8001a2c <ENC_SetMillimeterPerTick>

	/* Initialisation Odometrie -------------------------*/
	ODO_Init();
 80027f4:	f7ff fa5e 	bl	8001cb4 <ODO_Init>
	STRAT_strategyInit();
 80027f8:	f7ff fdc4 	bl	8002384 <STRAT_strategyInit>

	while(1){

		if(CTRL_Pos2_isArrived()){
 80027fc:	f7fe fc56 	bl	80010ac <CTRL_Pos2_isArrived>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d02c      	beq.n	8002860 <vTaskAsserv+0x118>
			if(indexStrategy >= (int)3){
 8002806:	4b32      	ldr	r3, [pc, #200]	; (80028d0 <vTaskAsserv+0x188>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d828      	bhi.n	8002860 <vTaskAsserv+0x118>
				//bTypeAsserv = 1;
				//setTargetX(200);
				//setTargetY(100);
			} else {
				CTRL_Pos2_SetTargetX(strategy[indexStrategy].x);
 800280e:	4b30      	ldr	r3, [pc, #192]	; (80028d0 <vTaskAsserv+0x188>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	4619      	mov	r1, r3
 8002814:	4a2f      	ldr	r2, [pc, #188]	; (80028d4 <vTaskAsserv+0x18c>)
 8002816:	460b      	mov	r3, r1
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	440b      	add	r3, r1
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4413      	add	r3, r2
 8002820:	ed93 7b00 	vldr	d7, [r3]
 8002824:	eeb0 0a47 	vmov.f32	s0, s14
 8002828:	eef0 0a67 	vmov.f32	s1, s15
 800282c:	f7fe fc0e 	bl	800104c <CTRL_Pos2_SetTargetX>
				CTRL_Pos2_SetTargetY(strategy[indexStrategy].y);
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <vTaskAsserv+0x188>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	4a27      	ldr	r2, [pc, #156]	; (80028d4 <vTaskAsserv+0x18c>)
 8002838:	460b      	mov	r3, r1
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	440b      	add	r3, r1
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	3308      	adds	r3, #8
 8002844:	ed93 7b00 	vldr	d7, [r3]
 8002848:	eeb0 0a47 	vmov.f32	s0, s14
 800284c:	eef0 0a67 	vmov.f32	s1, s15
 8002850:	f7fe fc14 	bl	800107c <CTRL_Pos2_SetTargetY>
				indexStrategy++;
 8002854:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <vTaskAsserv+0x188>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	3301      	adds	r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <vTaskAsserv+0x188>)
 800285e:	701a      	strb	r2, [r3, #0]
			}

		}

		if(bPower){
 8002860:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <vTaskAsserv+0x190>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <vTaskAsserv+0x126>
			CTRL_Pos2_PositionControl();
 8002868:	f7fe fca6 	bl	80011b8 <CTRL_Pos2_PositionControl>
 800286c:	e009      	b.n	8002882 <vTaskAsserv+0x13a>

			// Debug
			printf("%f;%f\r\n", vitG, vitD);
			 */
		} else {
			MOT_SetDutyCycle(&MoteurGauche, 0);
 800286e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80028b4 <vTaskAsserv+0x16c>
 8002872:	480c      	ldr	r0, [pc, #48]	; (80028a4 <vTaskAsserv+0x15c>)
 8002874:	f7ff f9b0 	bl	8001bd8 <MOT_SetDutyCycle>
			MOT_SetDutyCycle(&MoteurDroite, 0);
 8002878:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80028b4 <vTaskAsserv+0x16c>
 800287c:	480e      	ldr	r0, [pc, #56]	; (80028b8 <vTaskAsserv+0x170>)
 800287e:	f7ff f9ab 	bl	8001bd8 <MOT_SetDutyCycle>
		}

		vTaskDelay(20);
 8002882:	2014      	movs	r0, #20
 8002884:	f004 fe52 	bl	800752c <vTaskDelay>
		if(CTRL_Pos2_isArrived()){
 8002888:	e7b8      	b.n	80027fc <vTaskAsserv+0xb4>
 800288a:	bf00      	nop
 800288c:	f3af 8000 	nop.w
 8002890:	b645a1cb 	.word	0xb645a1cb
 8002894:	3fb4fdf3 	.word	0x3fb4fdf3
 8002898:	cccccccd 	.word	0xcccccccd
 800289c:	3fb4cccc 	.word	0x3fb4cccc
 80028a0:	2000452c 	.word	0x2000452c
 80028a4:	20004388 	.word	0x20004388
 80028a8:	40020800 	.word	0x40020800
 80028ac:	3dcccccd 	.word	0x3dcccccd
 80028b0:	3f99999a 	.word	0x3f99999a
 80028b4:	00000000 	.word	0x00000000
 80028b8:	200043b8 	.word	0x200043b8
 80028bc:	40020400 	.word	0x40020400
 80028c0:	20004574 	.word	0x20004574
 80028c4:	20004400 	.word	0x20004400
 80028c8:	200044e4 	.word	0x200044e4
 80028cc:	200043e8 	.word	0x200043e8
 80028d0:	20000030 	.word	0x20000030
 80028d4:	20004420 	.word	0x20004420
 80028d8:	20000620 	.word	0x20000620

080028dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	BaseType_t xReturned;
	TaskHandle_t xHandle = NULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	603b      	str	r3, [r7, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80028e6:	f000 fd6d 	bl	80033c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80028ea:	f000 f841 	bl	8002970 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80028ee:	f7ff fde9 	bl	80024c4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80028f2:	f000 fcc3 	bl	800327c <MX_USART2_UART_Init>
	MX_TIM1_Init();
 80028f6:	f000 fa97 	bl	8002e28 <MX_TIM1_Init>
	MX_TIM2_Init();
 80028fa:	f000 fb41 	bl	8002f80 <MX_TIM2_Init>
	MX_TIM3_Init();
 80028fe:	f000 fb93 	bl	8003028 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	/* Initialisation de la tâche pour le Shell ---------*/
	xReturned = xTaskCreate(
 8002902:	463b      	mov	r3, r7
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	2301      	movs	r3, #1
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	2300      	movs	r3, #0
 800290c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002910:	4911      	ldr	r1, [pc, #68]	; (8002958 <main+0x7c>)
 8002912:	4812      	ldr	r0, [pc, #72]	; (800295c <main+0x80>)
 8002914:	f004 fcbd 	bl	8007292 <xTaskCreate>
 8002918:	6078      	str	r0, [r7, #4]
			"Shell",         	/* Text name for the task. */
			STACK_SIZE,      	/* Stack size in words, not bytes. */
			(void *) NULL,    	/* Parameter passed into the task. */
			1,					/* Priority at which the task is created. */
			&xHandle);      	/* Used to pass out the created task's handle. */
	if( xReturned == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY ) {
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d102      	bne.n	8002928 <main+0x4c>
		printf("Task Shell creation error: Could not allocate required memory\r\n");
 8002922:	480f      	ldr	r0, [pc, #60]	; (8002960 <main+0x84>)
 8002924:	f006 fe16 	bl	8009554 <puts>
	}

	/* Initialisation de la tâche pour l'asserv ---------*/
	xReturned = xTaskCreate(
 8002928:	463b      	mov	r3, r7
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	2302      	movs	r3, #2
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	2300      	movs	r3, #0
 8002932:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002936:	490b      	ldr	r1, [pc, #44]	; (8002964 <main+0x88>)
 8002938:	480b      	ldr	r0, [pc, #44]	; (8002968 <main+0x8c>)
 800293a:	f004 fcaa 	bl	8007292 <xTaskCreate>
 800293e:	6078      	str	r0, [r7, #4]
			"Asserv",         	/* Text name for the task. */
			STACK_SIZE,      	/* Stack size in words, not bytes. */
			(void *) NULL,    	/* Parameter passed into the task. */
			2,					/* Priority at which the task is created. */
			&xHandle);      	/* Used to pass out the created task's handle. */
	if( xReturned == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY ) {
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002946:	d102      	bne.n	800294e <main+0x72>
		printf("Task Asserv creation error: Could not allocate required memory\r\n");
 8002948:	4808      	ldr	r0, [pc, #32]	; (800296c <main+0x90>)
 800294a:	f006 fe03 	bl	8009554 <puts>
	}

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 800294e:	f7ff fd95 	bl	800247c <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 8002952:	f003 fff1 	bl	8006938 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8002956:	e7fe      	b.n	8002956 <main+0x7a>
 8002958:	0800f62c 	.word	0x0800f62c
 800295c:	080026d9 	.word	0x080026d9
 8002960:	0800f634 	.word	0x0800f634
 8002964:	0800f674 	.word	0x0800f674
 8002968:	08002749 	.word	0x08002749
 800296c:	0800f67c 	.word	0x0800f67c

08002970 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b094      	sub	sp, #80	; 0x50
 8002974:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002976:	f107 031c 	add.w	r3, r7, #28
 800297a:	2234      	movs	r2, #52	; 0x34
 800297c:	2100      	movs	r1, #0
 800297e:	4618      	mov	r0, r3
 8002980:	f006 f895 	bl	8008aae <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002984:	f107 0308 	add.w	r3, r7, #8
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002994:	2300      	movs	r3, #0
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	4b2a      	ldr	r3, [pc, #168]	; (8002a44 <SystemClock_Config+0xd4>)
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	4a29      	ldr	r2, [pc, #164]	; (8002a44 <SystemClock_Config+0xd4>)
 800299e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a2:	6413      	str	r3, [r2, #64]	; 0x40
 80029a4:	4b27      	ldr	r3, [pc, #156]	; (8002a44 <SystemClock_Config+0xd4>)
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80029b0:	2300      	movs	r3, #0
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <SystemClock_Config+0xd8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029bc:	4a22      	ldr	r2, [pc, #136]	; (8002a48 <SystemClock_Config+0xd8>)
 80029be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <SystemClock_Config+0xd8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029d0:	2302      	movs	r3, #2
 80029d2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029d4:	2301      	movs	r3, #1
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029d8:	2310      	movs	r3, #16
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029dc:	2302      	movs	r3, #2
 80029de:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029e0:	2300      	movs	r3, #0
 80029e2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 80029e4:	2310      	movs	r3, #16
 80029e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80029e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80029ec:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80029ee:	2304      	movs	r3, #4
 80029f0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80029f2:	2302      	movs	r3, #2
 80029f4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80029f6:	2302      	movs	r3, #2
 80029f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029fa:	f107 031c 	add.w	r3, r7, #28
 80029fe:	4618      	mov	r0, r3
 8002a00:	f001 fb5a 	bl	80040b8 <HAL_RCC_OscConfig>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8002a0a:	f000 f877 	bl	8002afc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a0e:	230f      	movs	r3, #15
 8002a10:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a12:	2302      	movs	r3, #2
 8002a14:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a1e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a24:	f107 0308 	add.w	r3, r7, #8
 8002a28:	2102      	movs	r1, #2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f001 f846 	bl	8003abc <HAL_RCC_ClockConfig>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <SystemClock_Config+0xca>
	{
		Error_Handler();
 8002a36:	f000 f861 	bl	8002afc <Error_Handler>
	}
}
 8002a3a:	bf00      	nop
 8002a3c:	3750      	adds	r7, #80	; 0x50
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40007000 	.word	0x40007000

08002a4c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a5c:	d110      	bne.n	8002a80 <HAL_GPIO_EXTI_Callback+0x34>
		if(bPower == 0) {
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_GPIO_EXTI_Callback+0x28>
			bPower = 1;
 8002a66:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
			printf("Demarrage\r\n");
 8002a6c:	4807      	ldr	r0, [pc, #28]	; (8002a8c <HAL_GPIO_EXTI_Callback+0x40>)
 8002a6e:	f006 fd71 	bl	8009554 <puts>
		else {
			bPower = 0;
			printf("Arret\r\n");
		}
	}
}
 8002a72:	e005      	b.n	8002a80 <HAL_GPIO_EXTI_Callback+0x34>
			bPower = 0;
 8002a74:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
			printf("Arret\r\n");
 8002a7a:	4805      	ldr	r0, [pc, #20]	; (8002a90 <HAL_GPIO_EXTI_Callback+0x44>)
 8002a7c:	f006 fd6a 	bl	8009554 <puts>
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000620 	.word	0x20000620
 8002a8c:	0800f5c0 	.word	0x0800f5c0
 8002a90:	0800f5cc 	.word	0x0800f5cc

08002a94 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <HAL_UART_RxCpltCallback+0x34>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d10b      	bne.n	8002abe <HAL_UART_RxCpltCallback+0x2a>
		xQueueSendFromISR(qShell, &c, NULL);
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_UART_RxCpltCallback+0x38>)
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	2200      	movs	r2, #0
 8002aae:	4908      	ldr	r1, [pc, #32]	; (8002ad0 <HAL_UART_RxCpltCallback+0x3c>)
 8002ab0:	f004 f91f 	bl	8006cf2 <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(&huart2, (uint8_t*)&c, 1);
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	4906      	ldr	r1, [pc, #24]	; (8002ad0 <HAL_UART_RxCpltCallback+0x3c>)
 8002ab8:	4806      	ldr	r0, [pc, #24]	; (8002ad4 <HAL_UART_RxCpltCallback+0x40>)
 8002aba:	f003 f83c 	bl	8005b36 <HAL_UART_Receive_IT>
	}
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40004400 	.word	0x40004400
 8002acc:	20004418 	.word	0x20004418
 8002ad0:	2000027c 	.word	0x2000027c
 8002ad4:	200045bc 	.word	0x200045bc

08002ad8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002aea:	f000 fc8d 	bl	8003408 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40001000 	.word	0x40001000

08002afc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b00:	b672      	cpsid	i
}
 8002b02:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002b04:	e7fe      	b.n	8002b04 <Error_Handler+0x8>
	...

08002b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <HAL_MspInit+0x54>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	4a11      	ldr	r2, [pc, #68]	; (8002b5c <HAL_MspInit+0x54>)
 8002b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b1e:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <HAL_MspInit+0x54>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_MspInit+0x54>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <HAL_MspInit+0x54>)
 8002b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <HAL_MspInit+0x54>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b46:	2200      	movs	r2, #0
 8002b48:	210f      	movs	r1, #15
 8002b4a:	f06f 0001 	mvn.w	r0, #1
 8002b4e:	f000 fd33 	bl	80035b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800

08002b60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08c      	sub	sp, #48	; 0x30
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002b70:	2200      	movs	r2, #0
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	2036      	movs	r0, #54	; 0x36
 8002b76:	f000 fd1f 	bl	80035b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b7a:	2036      	movs	r0, #54	; 0x36
 8002b7c:	f000 fd38 	bl	80035f0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	4b1f      	ldr	r3, [pc, #124]	; (8002c04 <HAL_InitTick+0xa4>)
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	4a1e      	ldr	r2, [pc, #120]	; (8002c04 <HAL_InitTick+0xa4>)
 8002b8a:	f043 0310 	orr.w	r3, r3, #16
 8002b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b90:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <HAL_InitTick+0xa4>)
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b9c:	f107 0210 	add.w	r2, r7, #16
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 f8a2 	bl	8003cf0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002bac:	f001 f878 	bl	8003ca0 <HAL_RCC_GetPCLK1Freq>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb8:	4a13      	ldr	r2, [pc, #76]	; (8002c08 <HAL_InitTick+0xa8>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	0c9b      	lsrs	r3, r3, #18
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <HAL_InitTick+0xac>)
 8002bc6:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <HAL_InitTick+0xb0>)
 8002bc8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_InitTick+0xac>)
 8002bcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bd0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002bd2:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <HAL_InitTick+0xac>)
 8002bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <HAL_InitTick+0xac>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_InitTick+0xac>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002be4:	4809      	ldr	r0, [pc, #36]	; (8002c0c <HAL_InitTick+0xac>)
 8002be6:	f001 fd05 	bl	80045f4 <HAL_TIM_Base_Init>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d104      	bne.n	8002bfa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002bf0:	4806      	ldr	r0, [pc, #24]	; (8002c0c <HAL_InitTick+0xac>)
 8002bf2:	f001 fd4f 	bl	8004694 <HAL_TIM_Base_Start_IT>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	e000      	b.n	8002bfc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3730      	adds	r7, #48	; 0x30
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40023800 	.word	0x40023800
 8002c08:	431bde83 	.word	0x431bde83
 8002c0c:	2000449c 	.word	0x2000449c
 8002c10:	40001000 	.word	0x40001000

08002c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c18:	e7fe      	b.n	8002c18 <NMI_Handler+0x4>

08002c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c1e:	e7fe      	b.n	8002c1e <HardFault_Handler+0x4>

08002c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c24:	e7fe      	b.n	8002c24 <MemManage_Handler+0x4>

08002c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c2a:	e7fe      	b.n	8002c2a <BusFault_Handler+0x4>

08002c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c30:	e7fe      	b.n	8002c30 <UsageFault_Handler+0x4>

08002c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c44:	4802      	ldr	r0, [pc, #8]	; (8002c50 <USART2_IRQHandler+0x10>)
 8002c46:	f002 ffa7 	bl	8005b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200045bc 	.word	0x200045bc

08002c54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002c58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c5c:	f000 ff16 	bl	8003a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <TIM6_DAC_IRQHandler+0x10>)
 8002c6a:	f001 ffd9 	bl	8004c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	2000449c 	.word	0x2000449c

08002c78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
	return 1;
 8002c7c:	2301      	movs	r3, #1
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <_kill>:

int _kill(int pid, int sig)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c92:	f005 fddb 	bl	800884c <__errno>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2216      	movs	r2, #22
 8002c9a:	601a      	str	r2, [r3, #0]
	return -1;
 8002c9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <_exit>:

void _exit (int status)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ffe7 	bl	8002c88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cba:	e7fe      	b.n	8002cba <_exit+0x12>

08002cbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	e00a      	b.n	8002ce4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cce:	f3af 8000 	nop.w
 8002cd2:	4601      	mov	r1, r0
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	60ba      	str	r2, [r7, #8]
 8002cda:	b2ca      	uxtb	r2, r1
 8002cdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	dbf0      	blt.n	8002cce <_read+0x12>
	}

return len;
 8002cec:	687b      	ldr	r3, [r7, #4]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	e009      	b.n	8002d1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	60ba      	str	r2, [r7, #8]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff f943 	bl	8001f9c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	dbf1      	blt.n	8002d08 <_write+0x12>
	}
	return len;
 8002d24:	687b      	ldr	r3, [r7, #4]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <_close>:

int _close(int file)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
	return -1;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d56:	605a      	str	r2, [r3, #4]
	return 0;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <_isatty>:

int _isatty(int file)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
	return 1;
 8002d6e:	2301      	movs	r3, #1
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
	return 0;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002da0:	4a14      	ldr	r2, [pc, #80]	; (8002df4 <_sbrk+0x5c>)
 8002da2:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <_sbrk+0x60>)
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <_sbrk+0x64>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <_sbrk+0x64>)
 8002db6:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <_sbrk+0x68>)
 8002db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <_sbrk+0x64>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d207      	bcs.n	8002dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dc8:	f005 fd40 	bl	800884c <__errno>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	220c      	movs	r2, #12
 8002dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd6:	e009      	b.n	8002dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dd8:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <_sbrk+0x64>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dde:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <_sbrk+0x64>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	4a05      	ldr	r2, [pc, #20]	; (8002dfc <_sbrk+0x64>)
 8002de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dea:	68fb      	ldr	r3, [r7, #12]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20020000 	.word	0x20020000
 8002df8:	00000400 	.word	0x00000400
 8002dfc:	20000624 	.word	0x20000624
 8002e00:	20004618 	.word	0x20004618

08002e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <SystemInit+0x20>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <SystemInit+0x20>)
 8002e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b096      	sub	sp, #88	; 0x58
 8002e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	609a      	str	r2, [r3, #8]
 8002e52:	60da      	str	r2, [r3, #12]
 8002e54:	611a      	str	r2, [r3, #16]
 8002e56:	615a      	str	r2, [r3, #20]
 8002e58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	2100      	movs	r1, #0
 8002e60:	4618      	mov	r0, r3
 8002e62:	f005 fe24 	bl	8008aae <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e66:	4b44      	ldr	r3, [pc, #272]	; (8002f78 <MX_TIM1_Init+0x150>)
 8002e68:	4a44      	ldr	r2, [pc, #272]	; (8002f7c <MX_TIM1_Init+0x154>)
 8002e6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002e6c:	4b42      	ldr	r3, [pc, #264]	; (8002f78 <MX_TIM1_Init+0x150>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e72:	4b41      	ldr	r3, [pc, #260]	; (8002f78 <MX_TIM1_Init+0x150>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3360-1;
 8002e78:	4b3f      	ldr	r3, [pc, #252]	; (8002f78 <MX_TIM1_Init+0x150>)
 8002e7a:	f640 521f 	movw	r2, #3359	; 0xd1f
 8002e7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e80:	4b3d      	ldr	r3, [pc, #244]	; (8002f78 <MX_TIM1_Init+0x150>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e86:	4b3c      	ldr	r3, [pc, #240]	; (8002f78 <MX_TIM1_Init+0x150>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e8c:	4b3a      	ldr	r3, [pc, #232]	; (8002f78 <MX_TIM1_Init+0x150>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e92:	4839      	ldr	r0, [pc, #228]	; (8002f78 <MX_TIM1_Init+0x150>)
 8002e94:	f001 fbae 	bl	80045f4 <HAL_TIM_Base_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002e9e:	f7ff fe2d 	bl	8002afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ea8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002eac:	4619      	mov	r1, r3
 8002eae:	4832      	ldr	r0, [pc, #200]	; (8002f78 <MX_TIM1_Init+0x150>)
 8002eb0:	f002 f880 	bl	8004fb4 <HAL_TIM_ConfigClockSource>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002eba:	f7ff fe1f 	bl	8002afc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ebe:	482e      	ldr	r0, [pc, #184]	; (8002f78 <MX_TIM1_Init+0x150>)
 8002ec0:	f001 fc58 	bl	8004774 <HAL_TIM_PWM_Init>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002eca:	f7ff fe17 	bl	8002afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ed6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002eda:	4619      	mov	r1, r3
 8002edc:	4826      	ldr	r0, [pc, #152]	; (8002f78 <MX_TIM1_Init+0x150>)
 8002ede:	f002 fc69 	bl	80057b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002ee8:	f7ff fe08 	bl	8002afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002eec:	2360      	movs	r3, #96	; 0x60
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f00:	2300      	movs	r3, #0
 8002f02:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f04:	2300      	movs	r3, #0
 8002f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4819      	ldr	r0, [pc, #100]	; (8002f78 <MX_TIM1_Init+0x150>)
 8002f12:	f001 ff8d 	bl	8004e30 <HAL_TIM_PWM_ConfigChannel>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002f1c:	f7ff fdee 	bl	8002afc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f24:	2204      	movs	r2, #4
 8002f26:	4619      	mov	r1, r3
 8002f28:	4813      	ldr	r0, [pc, #76]	; (8002f78 <MX_TIM1_Init+0x150>)
 8002f2a:	f001 ff81 	bl	8004e30 <HAL_TIM_PWM_ConfigChannel>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002f34:	f7ff fde2 	bl	8002afc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f52:	2300      	movs	r3, #0
 8002f54:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f56:	1d3b      	adds	r3, r7, #4
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4807      	ldr	r0, [pc, #28]	; (8002f78 <MX_TIM1_Init+0x150>)
 8002f5c:	f002 fca6 	bl	80058ac <HAL_TIMEx_ConfigBreakDeadTime>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002f66:	f7ff fdc9 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002f6a:	4803      	ldr	r0, [pc, #12]	; (8002f78 <MX_TIM1_Init+0x150>)
 8002f6c:	f000 f94c 	bl	8003208 <HAL_TIM_MspPostInit>

}
 8002f70:	bf00      	nop
 8002f72:	3758      	adds	r7, #88	; 0x58
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	2000452c 	.word	0x2000452c
 8002f7c:	40010000 	.word	0x40010000

08002f80 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08c      	sub	sp, #48	; 0x30
 8002f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f86:	f107 030c 	add.w	r3, r7, #12
 8002f8a:	2224      	movs	r2, #36	; 0x24
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f005 fd8d 	bl	8008aae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f94:	1d3b      	adds	r3, r7, #4
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f9c:	4b21      	ldr	r3, [pc, #132]	; (8003024 <MX_TIM2_Init+0xa4>)
 8002f9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fa2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002fa4:	4b1f      	ldr	r3, [pc, #124]	; (8003024 <MX_TIM2_Init+0xa4>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002faa:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <MX_TIM2_Init+0xa4>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002fb0:	4b1c      	ldr	r3, [pc, #112]	; (8003024 <MX_TIM2_Init+0xa4>)
 8002fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fb8:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <MX_TIM2_Init+0xa4>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fbe:	4b19      	ldr	r3, [pc, #100]	; (8003024 <MX_TIM2_Init+0xa4>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002fe8:	f107 030c 	add.w	r3, r7, #12
 8002fec:	4619      	mov	r1, r3
 8002fee:	480d      	ldr	r0, [pc, #52]	; (8003024 <MX_TIM2_Init+0xa4>)
 8002ff0:	f001 fce2 	bl	80049b8 <HAL_TIM_Encoder_Init>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002ffa:	f7ff fd7f 	bl	8002afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	4619      	mov	r1, r3
 800300a:	4806      	ldr	r0, [pc, #24]	; (8003024 <MX_TIM2_Init+0xa4>)
 800300c:	f002 fbd2 	bl	80057b4 <HAL_TIMEx_MasterConfigSynchronization>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003016:	f7ff fd71 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800301a:	bf00      	nop
 800301c:	3730      	adds	r7, #48	; 0x30
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20004574 	.word	0x20004574

08003028 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08c      	sub	sp, #48	; 0x30
 800302c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800302e:	f107 030c 	add.w	r3, r7, #12
 8003032:	2224      	movs	r2, #36	; 0x24
 8003034:	2100      	movs	r1, #0
 8003036:	4618      	mov	r0, r3
 8003038:	f005 fd39 	bl	8008aae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800303c:	1d3b      	adds	r3, r7, #4
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003044:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <MX_TIM3_Init+0xa0>)
 8003046:	4a21      	ldr	r2, [pc, #132]	; (80030cc <MX_TIM3_Init+0xa4>)
 8003048:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800304a:	4b1f      	ldr	r3, [pc, #124]	; (80030c8 <MX_TIM3_Init+0xa0>)
 800304c:	2200      	movs	r2, #0
 800304e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003050:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <MX_TIM3_Init+0xa0>)
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003056:	4b1c      	ldr	r3, [pc, #112]	; (80030c8 <MX_TIM3_Init+0xa0>)
 8003058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800305c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800305e:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <MX_TIM3_Init+0xa0>)
 8003060:	2200      	movs	r2, #0
 8003062:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003064:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <MX_TIM3_Init+0xa0>)
 8003066:	2200      	movs	r2, #0
 8003068:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800306a:	2303      	movs	r3, #3
 800306c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800306e:	2300      	movs	r3, #0
 8003070:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003072:	2301      	movs	r3, #1
 8003074:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800307e:	2300      	movs	r3, #0
 8003080:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003082:	2301      	movs	r3, #1
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003086:	2300      	movs	r3, #0
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800308e:	f107 030c 	add.w	r3, r7, #12
 8003092:	4619      	mov	r1, r3
 8003094:	480c      	ldr	r0, [pc, #48]	; (80030c8 <MX_TIM3_Init+0xa0>)
 8003096:	f001 fc8f 	bl	80049b8 <HAL_TIM_Encoder_Init>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80030a0:	f7ff fd2c 	bl	8002afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030a4:	2300      	movs	r3, #0
 80030a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030ac:	1d3b      	adds	r3, r7, #4
 80030ae:	4619      	mov	r1, r3
 80030b0:	4805      	ldr	r0, [pc, #20]	; (80030c8 <MX_TIM3_Init+0xa0>)
 80030b2:	f002 fb7f 	bl	80057b4 <HAL_TIMEx_MasterConfigSynchronization>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80030bc:	f7ff fd1e 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80030c0:	bf00      	nop
 80030c2:	3730      	adds	r7, #48	; 0x30
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	200044e4 	.word	0x200044e4
 80030cc:	40000400 	.word	0x40000400

080030d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a0b      	ldr	r2, [pc, #44]	; (800310c <HAL_TIM_Base_MspInit+0x3c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d10d      	bne.n	80030fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_TIM_Base_MspInit+0x40>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	4a09      	ldr	r2, [pc, #36]	; (8003110 <HAL_TIM_Base_MspInit+0x40>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	6453      	str	r3, [r2, #68]	; 0x44
 80030f2:	4b07      	ldr	r3, [pc, #28]	; (8003110 <HAL_TIM_Base_MspInit+0x40>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40010000 	.word	0x40010000
 8003110:	40023800 	.word	0x40023800

08003114 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08c      	sub	sp, #48	; 0x30
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311c:	f107 031c 	add.w	r3, r7, #28
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	60da      	str	r2, [r3, #12]
 800312a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003134:	d12c      	bne.n	8003190 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
 800313a:	4b30      	ldr	r3, [pc, #192]	; (80031fc <HAL_TIM_Encoder_MspInit+0xe8>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	4a2f      	ldr	r2, [pc, #188]	; (80031fc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	6413      	str	r3, [r2, #64]	; 0x40
 8003146:	4b2d      	ldr	r3, [pc, #180]	; (80031fc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	61bb      	str	r3, [r7, #24]
 8003150:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	4b29      	ldr	r3, [pc, #164]	; (80031fc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	4a28      	ldr	r2, [pc, #160]	; (80031fc <HAL_TIM_Encoder_MspInit+0xe8>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6313      	str	r3, [r2, #48]	; 0x30
 8003162:	4b26      	ldr	r3, [pc, #152]	; (80031fc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCG_A_Pin|ENCG_B_Pin;
 800316e:	2303      	movs	r3, #3
 8003170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003172:	2302      	movs	r3, #2
 8003174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317a:	2300      	movs	r3, #0
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800317e:	2301      	movs	r3, #1
 8003180:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003182:	f107 031c 	add.w	r3, r7, #28
 8003186:	4619      	mov	r1, r3
 8003188:	481d      	ldr	r0, [pc, #116]	; (8003200 <HAL_TIM_Encoder_MspInit+0xec>)
 800318a:	f000 fad1 	bl	8003730 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800318e:	e030      	b.n	80031f2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d12b      	bne.n	80031f2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	4b17      	ldr	r3, [pc, #92]	; (80031fc <HAL_TIM_Encoder_MspInit+0xe8>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	4a16      	ldr	r2, [pc, #88]	; (80031fc <HAL_TIM_Encoder_MspInit+0xe8>)
 80031a4:	f043 0302 	orr.w	r3, r3, #2
 80031a8:	6413      	str	r3, [r2, #64]	; 0x40
 80031aa:	4b14      	ldr	r3, [pc, #80]	; (80031fc <HAL_TIM_Encoder_MspInit+0xe8>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	4b10      	ldr	r3, [pc, #64]	; (80031fc <HAL_TIM_Encoder_MspInit+0xe8>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	4a0f      	ldr	r2, [pc, #60]	; (80031fc <HAL_TIM_Encoder_MspInit+0xe8>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6313      	str	r3, [r2, #48]	; 0x30
 80031c6:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <HAL_TIM_Encoder_MspInit+0xe8>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCD_A_Pin|ENCD_B_Pin;
 80031d2:	23c0      	movs	r3, #192	; 0xc0
 80031d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2302      	movs	r3, #2
 80031d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031de:	2300      	movs	r3, #0
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031e2:	2302      	movs	r3, #2
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e6:	f107 031c 	add.w	r3, r7, #28
 80031ea:	4619      	mov	r1, r3
 80031ec:	4804      	ldr	r0, [pc, #16]	; (8003200 <HAL_TIM_Encoder_MspInit+0xec>)
 80031ee:	f000 fa9f 	bl	8003730 <HAL_GPIO_Init>
}
 80031f2:	bf00      	nop
 80031f4:	3730      	adds	r7, #48	; 0x30
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800
 8003200:	40020000 	.word	0x40020000
 8003204:	40000400 	.word	0x40000400

08003208 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003210:	f107 030c 	add.w	r3, r7, #12
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a12      	ldr	r2, [pc, #72]	; (8003270 <HAL_TIM_MspPostInit+0x68>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d11e      	bne.n	8003268 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_TIM_MspPostInit+0x6c>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a10      	ldr	r2, [pc, #64]	; (8003274 <HAL_TIM_MspPostInit+0x6c>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <HAL_TIM_MspPostInit+0x6c>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTG_PWM_Pin|MOTD_PWM_Pin;
 8003246:	f44f 7340 	mov.w	r3, #768	; 0x300
 800324a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324c:	2302      	movs	r3, #2
 800324e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003258:	2301      	movs	r3, #1
 800325a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325c:	f107 030c 	add.w	r3, r7, #12
 8003260:	4619      	mov	r1, r3
 8003262:	4805      	ldr	r0, [pc, #20]	; (8003278 <HAL_TIM_MspPostInit+0x70>)
 8003264:	f000 fa64 	bl	8003730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003268:	bf00      	nop
 800326a:	3720      	adds	r7, #32
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40010000 	.word	0x40010000
 8003274:	40023800 	.word	0x40023800
 8003278:	40020000 	.word	0x40020000

0800327c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003280:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <MX_USART2_UART_Init+0x4c>)
 8003282:	4a12      	ldr	r2, [pc, #72]	; (80032cc <MX_USART2_UART_Init+0x50>)
 8003284:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003286:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <MX_USART2_UART_Init+0x4c>)
 8003288:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800328c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800328e:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <MX_USART2_UART_Init+0x4c>)
 8003290:	2200      	movs	r2, #0
 8003292:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003294:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <MX_USART2_UART_Init+0x4c>)
 8003296:	2200      	movs	r2, #0
 8003298:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800329a:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <MX_USART2_UART_Init+0x4c>)
 800329c:	2200      	movs	r2, #0
 800329e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032a0:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <MX_USART2_UART_Init+0x4c>)
 80032a2:	220c      	movs	r2, #12
 80032a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032a6:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <MX_USART2_UART_Init+0x4c>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032ac:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <MX_USART2_UART_Init+0x4c>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032b2:	4805      	ldr	r0, [pc, #20]	; (80032c8 <MX_USART2_UART_Init+0x4c>)
 80032b4:	f002 fb60 	bl	8005978 <HAL_UART_Init>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80032be:	f7ff fc1d 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	200045bc 	.word	0x200045bc
 80032cc:	40004400 	.word	0x40004400

080032d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	; 0x28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d8:	f107 0314 	add.w	r3, r7, #20
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1d      	ldr	r2, [pc, #116]	; (8003364 <HAL_UART_MspInit+0x94>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d133      	bne.n	800335a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <HAL_UART_MspInit+0x98>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	4a1b      	ldr	r2, [pc, #108]	; (8003368 <HAL_UART_MspInit+0x98>)
 80032fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003300:	6413      	str	r3, [r2, #64]	; 0x40
 8003302:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_UART_MspInit+0x98>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <HAL_UART_MspInit+0x98>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	4a14      	ldr	r2, [pc, #80]	; (8003368 <HAL_UART_MspInit+0x98>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	6313      	str	r3, [r2, #48]	; 0x30
 800331e:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_UART_MspInit+0x98>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800332a:	230c      	movs	r3, #12
 800332c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332e:	2302      	movs	r3, #2
 8003330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003336:	2303      	movs	r3, #3
 8003338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800333a:	2307      	movs	r3, #7
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333e:	f107 0314 	add.w	r3, r7, #20
 8003342:	4619      	mov	r1, r3
 8003344:	4809      	ldr	r0, [pc, #36]	; (800336c <HAL_UART_MspInit+0x9c>)
 8003346:	f000 f9f3 	bl	8003730 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800334a:	2200      	movs	r2, #0
 800334c:	2105      	movs	r1, #5
 800334e:	2026      	movs	r0, #38	; 0x26
 8003350:	f000 f932 	bl	80035b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003354:	2026      	movs	r0, #38	; 0x26
 8003356:	f000 f94b 	bl	80035f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800335a:	bf00      	nop
 800335c:	3728      	adds	r7, #40	; 0x28
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40004400 	.word	0x40004400
 8003368:	40023800 	.word	0x40023800
 800336c:	40020000 	.word	0x40020000

08003370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003374:	480d      	ldr	r0, [pc, #52]	; (80033ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003376:	490e      	ldr	r1, [pc, #56]	; (80033b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003378:	4a0e      	ldr	r2, [pc, #56]	; (80033b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800337a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800337c:	e002      	b.n	8003384 <LoopCopyDataInit>

0800337e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800337e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003382:	3304      	adds	r3, #4

08003384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003388:	d3f9      	bcc.n	800337e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800338a:	4a0b      	ldr	r2, [pc, #44]	; (80033b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800338c:	4c0b      	ldr	r4, [pc, #44]	; (80033bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800338e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003390:	e001      	b.n	8003396 <LoopFillZerobss>

08003392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003394:	3204      	adds	r2, #4

08003396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003398:	d3fb      	bcc.n	8003392 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800339a:	f7ff fd33 	bl	8002e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800339e:	f005 fb51 	bl	8008a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033a2:	f7ff fa9b 	bl	80028dc <main>
  bx  lr    
 80033a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033b0:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80033b4:	0800fe38 	.word	0x0800fe38
  ldr r2, =_sbss
 80033b8:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80033bc:	20004614 	.word	0x20004614

080033c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033c0:	e7fe      	b.n	80033c0 <ADC_IRQHandler>
	...

080033c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <HAL_Init+0x40>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0d      	ldr	r2, [pc, #52]	; (8003404 <HAL_Init+0x40>)
 80033ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_Init+0x40>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <HAL_Init+0x40>)
 80033da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033e0:	4b08      	ldr	r3, [pc, #32]	; (8003404 <HAL_Init+0x40>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a07      	ldr	r2, [pc, #28]	; (8003404 <HAL_Init+0x40>)
 80033e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033ec:	2003      	movs	r0, #3
 80033ee:	f000 f8d8 	bl	80035a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033f2:	200f      	movs	r0, #15
 80033f4:	f7ff fbb4 	bl	8002b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033f8:	f7ff fb86 	bl	8002b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40023c00 	.word	0x40023c00

08003408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <HAL_IncTick+0x20>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_IncTick+0x24>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4413      	add	r3, r2
 8003418:	4a04      	ldr	r2, [pc, #16]	; (800342c <HAL_IncTick+0x24>)
 800341a:	6013      	str	r3, [r2, #0]
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000040 	.word	0x20000040
 800342c:	20004600 	.word	0x20004600

08003430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return uwTick;
 8003434:	4b03      	ldr	r3, [pc, #12]	; (8003444 <HAL_GetTick+0x14>)
 8003436:	681b      	ldr	r3, [r3, #0]
}
 8003438:	4618      	mov	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20004600 	.word	0x20004600

08003448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <__NVIC_SetPriorityGrouping+0x44>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003464:	4013      	ands	r3, r2
 8003466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800347a:	4a04      	ldr	r2, [pc, #16]	; (800348c <__NVIC_SetPriorityGrouping+0x44>)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	60d3      	str	r3, [r2, #12]
}
 8003480:	bf00      	nop
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003494:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	0a1b      	lsrs	r3, r3, #8
 800349a:	f003 0307 	and.w	r3, r3, #7
}
 800349e:	4618      	mov	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	db0b      	blt.n	80034d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	f003 021f 	and.w	r2, r3, #31
 80034c4:	4907      	ldr	r1, [pc, #28]	; (80034e4 <__NVIC_EnableIRQ+0x38>)
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	2001      	movs	r0, #1
 80034ce:	fa00 f202 	lsl.w	r2, r0, r2
 80034d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	e000e100 	.word	0xe000e100

080034e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	6039      	str	r1, [r7, #0]
 80034f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	db0a      	blt.n	8003512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	490c      	ldr	r1, [pc, #48]	; (8003534 <__NVIC_SetPriority+0x4c>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	0112      	lsls	r2, r2, #4
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	440b      	add	r3, r1
 800350c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003510:	e00a      	b.n	8003528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	b2da      	uxtb	r2, r3
 8003516:	4908      	ldr	r1, [pc, #32]	; (8003538 <__NVIC_SetPriority+0x50>)
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	3b04      	subs	r3, #4
 8003520:	0112      	lsls	r2, r2, #4
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	440b      	add	r3, r1
 8003526:	761a      	strb	r2, [r3, #24]
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	e000e100 	.word	0xe000e100
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800353c:	b480      	push	{r7}
 800353e:	b089      	sub	sp, #36	; 0x24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f1c3 0307 	rsb	r3, r3, #7
 8003556:	2b04      	cmp	r3, #4
 8003558:	bf28      	it	cs
 800355a:	2304      	movcs	r3, #4
 800355c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	3304      	adds	r3, #4
 8003562:	2b06      	cmp	r3, #6
 8003564:	d902      	bls.n	800356c <NVIC_EncodePriority+0x30>
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3b03      	subs	r3, #3
 800356a:	e000      	b.n	800356e <NVIC_EncodePriority+0x32>
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003570:	f04f 32ff 	mov.w	r2, #4294967295
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43da      	mvns	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	401a      	ands	r2, r3
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003584:	f04f 31ff 	mov.w	r1, #4294967295
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	43d9      	mvns	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003594:	4313      	orrs	r3, r2
         );
}
 8003596:	4618      	mov	r0, r3
 8003598:	3724      	adds	r7, #36	; 0x24
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff ff4c 	bl	8003448 <__NVIC_SetPriorityGrouping>
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035ca:	f7ff ff61 	bl	8003490 <__NVIC_GetPriorityGrouping>
 80035ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	6978      	ldr	r0, [r7, #20]
 80035d6:	f7ff ffb1 	bl	800353c <NVIC_EncodePriority>
 80035da:	4602      	mov	r2, r0
 80035dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e0:	4611      	mov	r1, r2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff ff80 	bl	80034e8 <__NVIC_SetPriority>
}
 80035e8:	bf00      	nop
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ff54 	bl	80034ac <__NVIC_EnableIRQ>
}
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003618:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800361a:	f7ff ff09 	bl	8003430 <HAL_GetTick>
 800361e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d008      	beq.n	800363e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e052      	b.n	80036e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0216 	bic.w	r2, r2, #22
 800364c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695a      	ldr	r2, [r3, #20]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800365c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d103      	bne.n	800366e <HAL_DMA_Abort+0x62>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366a:	2b00      	cmp	r3, #0
 800366c:	d007      	beq.n	800367e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0208 	bic.w	r2, r2, #8
 800367c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800368e:	e013      	b.n	80036b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003690:	f7ff fece 	bl	8003430 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b05      	cmp	r3, #5
 800369c:	d90c      	bls.n	80036b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2203      	movs	r2, #3
 80036a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e015      	b.n	80036e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e4      	bne.n	8003690 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	223f      	movs	r2, #63	; 0x3f
 80036cc:	409a      	lsls	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d004      	beq.n	800370a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2280      	movs	r2, #128	; 0x80
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e00c      	b.n	8003724 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2205      	movs	r2, #5
 800370e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003730:	b480      	push	{r7}
 8003732:	b089      	sub	sp, #36	; 0x24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800373e:	2300      	movs	r3, #0
 8003740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003742:	2300      	movs	r3, #0
 8003744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
 800374a:	e165      	b.n	8003a18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800374c:	2201      	movs	r2, #1
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	429a      	cmp	r2, r3
 8003766:	f040 8154 	bne.w	8003a12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b01      	cmp	r3, #1
 8003774:	d005      	beq.n	8003782 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800377e:	2b02      	cmp	r3, #2
 8003780:	d130      	bne.n	80037e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	2203      	movs	r2, #3
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4013      	ands	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037b8:	2201      	movs	r2, #1
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 0201 	and.w	r2, r3, #1
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 0303 	and.w	r3, r3, #3
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d017      	beq.n	8003820 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	2203      	movs	r2, #3
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d123      	bne.n	8003874 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	08da      	lsrs	r2, r3, #3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3208      	adds	r2, #8
 8003834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003838:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	220f      	movs	r2, #15
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4013      	ands	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	08da      	lsrs	r2, r3, #3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3208      	adds	r2, #8
 800386e:	69b9      	ldr	r1, [r7, #24]
 8003870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	2203      	movs	r2, #3
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4013      	ands	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 0203 	and.w	r2, r3, #3
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4313      	orrs	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80ae 	beq.w	8003a12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	4b5d      	ldr	r3, [pc, #372]	; (8003a30 <HAL_GPIO_Init+0x300>)
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	4a5c      	ldr	r2, [pc, #368]	; (8003a30 <HAL_GPIO_Init+0x300>)
 80038c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c4:	6453      	str	r3, [r2, #68]	; 0x44
 80038c6:	4b5a      	ldr	r3, [pc, #360]	; (8003a30 <HAL_GPIO_Init+0x300>)
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038d2:	4a58      	ldr	r2, [pc, #352]	; (8003a34 <HAL_GPIO_Init+0x304>)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	089b      	lsrs	r3, r3, #2
 80038d8:	3302      	adds	r3, #2
 80038da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	220f      	movs	r2, #15
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4013      	ands	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a4f      	ldr	r2, [pc, #316]	; (8003a38 <HAL_GPIO_Init+0x308>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d025      	beq.n	800394a <HAL_GPIO_Init+0x21a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a4e      	ldr	r2, [pc, #312]	; (8003a3c <HAL_GPIO_Init+0x30c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d01f      	beq.n	8003946 <HAL_GPIO_Init+0x216>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a4d      	ldr	r2, [pc, #308]	; (8003a40 <HAL_GPIO_Init+0x310>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d019      	beq.n	8003942 <HAL_GPIO_Init+0x212>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a4c      	ldr	r2, [pc, #304]	; (8003a44 <HAL_GPIO_Init+0x314>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d013      	beq.n	800393e <HAL_GPIO_Init+0x20e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a4b      	ldr	r2, [pc, #300]	; (8003a48 <HAL_GPIO_Init+0x318>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00d      	beq.n	800393a <HAL_GPIO_Init+0x20a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a4a      	ldr	r2, [pc, #296]	; (8003a4c <HAL_GPIO_Init+0x31c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d007      	beq.n	8003936 <HAL_GPIO_Init+0x206>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a49      	ldr	r2, [pc, #292]	; (8003a50 <HAL_GPIO_Init+0x320>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d101      	bne.n	8003932 <HAL_GPIO_Init+0x202>
 800392e:	2306      	movs	r3, #6
 8003930:	e00c      	b.n	800394c <HAL_GPIO_Init+0x21c>
 8003932:	2307      	movs	r3, #7
 8003934:	e00a      	b.n	800394c <HAL_GPIO_Init+0x21c>
 8003936:	2305      	movs	r3, #5
 8003938:	e008      	b.n	800394c <HAL_GPIO_Init+0x21c>
 800393a:	2304      	movs	r3, #4
 800393c:	e006      	b.n	800394c <HAL_GPIO_Init+0x21c>
 800393e:	2303      	movs	r3, #3
 8003940:	e004      	b.n	800394c <HAL_GPIO_Init+0x21c>
 8003942:	2302      	movs	r3, #2
 8003944:	e002      	b.n	800394c <HAL_GPIO_Init+0x21c>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <HAL_GPIO_Init+0x21c>
 800394a:	2300      	movs	r3, #0
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	f002 0203 	and.w	r2, r2, #3
 8003952:	0092      	lsls	r2, r2, #2
 8003954:	4093      	lsls	r3, r2
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800395c:	4935      	ldr	r1, [pc, #212]	; (8003a34 <HAL_GPIO_Init+0x304>)
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	089b      	lsrs	r3, r3, #2
 8003962:	3302      	adds	r3, #2
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800396a:	4b3a      	ldr	r3, [pc, #232]	; (8003a54 <HAL_GPIO_Init+0x324>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	43db      	mvns	r3, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4013      	ands	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800398e:	4a31      	ldr	r2, [pc, #196]	; (8003a54 <HAL_GPIO_Init+0x324>)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003994:	4b2f      	ldr	r3, [pc, #188]	; (8003a54 <HAL_GPIO_Init+0x324>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039b8:	4a26      	ldr	r2, [pc, #152]	; (8003a54 <HAL_GPIO_Init+0x324>)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039be:	4b25      	ldr	r3, [pc, #148]	; (8003a54 <HAL_GPIO_Init+0x324>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4013      	ands	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039e2:	4a1c      	ldr	r2, [pc, #112]	; (8003a54 <HAL_GPIO_Init+0x324>)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039e8:	4b1a      	ldr	r3, [pc, #104]	; (8003a54 <HAL_GPIO_Init+0x324>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a0c:	4a11      	ldr	r2, [pc, #68]	; (8003a54 <HAL_GPIO_Init+0x324>)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3301      	adds	r3, #1
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	2b0f      	cmp	r3, #15
 8003a1c:	f67f ae96 	bls.w	800374c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a20:	bf00      	nop
 8003a22:	bf00      	nop
 8003a24:	3724      	adds	r7, #36	; 0x24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800
 8003a34:	40013800 	.word	0x40013800
 8003a38:	40020000 	.word	0x40020000
 8003a3c:	40020400 	.word	0x40020400
 8003a40:	40020800 	.word	0x40020800
 8003a44:	40020c00 	.word	0x40020c00
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40021400 	.word	0x40021400
 8003a50:	40021800 	.word	0x40021800
 8003a54:	40013c00 	.word	0x40013c00

08003a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]
 8003a64:	4613      	mov	r3, r2
 8003a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a68:	787b      	ldrb	r3, [r7, #1]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a6e:	887a      	ldrh	r2, [r7, #2]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a74:	e003      	b.n	8003a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a76:	887b      	ldrh	r3, [r7, #2]
 8003a78:	041a      	lsls	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	619a      	str	r2, [r3, #24]
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a98:	695a      	ldr	r2, [r3, #20]
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d006      	beq.n	8003ab0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aa2:	4a05      	ldr	r2, [pc, #20]	; (8003ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe ffce 	bl	8002a4c <HAL_GPIO_EXTI_Callback>
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40013c00 	.word	0x40013c00

08003abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0cc      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b68      	ldr	r3, [pc, #416]	; (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d90c      	bls.n	8003af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b65      	ldr	r3, [pc, #404]	; (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b63      	ldr	r3, [pc, #396]	; (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0b8      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d020      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b10:	4b59      	ldr	r3, [pc, #356]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	4a58      	ldr	r2, [pc, #352]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b28:	4b53      	ldr	r3, [pc, #332]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4a52      	ldr	r2, [pc, #328]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b34:	4b50      	ldr	r3, [pc, #320]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	494d      	ldr	r1, [pc, #308]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d044      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d107      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	4b47      	ldr	r3, [pc, #284]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d119      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e07f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d003      	beq.n	8003b7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d107      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7a:	4b3f      	ldr	r3, [pc, #252]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e06f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8a:	4b3b      	ldr	r3, [pc, #236]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e067      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9a:	4b37      	ldr	r3, [pc, #220]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f023 0203 	bic.w	r2, r3, #3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4934      	ldr	r1, [pc, #208]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bac:	f7ff fc40 	bl	8003430 <HAL_GetTick>
 8003bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb2:	e00a      	b.n	8003bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb4:	f7ff fc3c 	bl	8003430 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e04f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bca:	4b2b      	ldr	r3, [pc, #172]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 020c 	and.w	r2, r3, #12
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d1eb      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bdc:	4b25      	ldr	r3, [pc, #148]	; (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 030f 	and.w	r3, r3, #15
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d20c      	bcs.n	8003c04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bea:	4b22      	ldr	r3, [pc, #136]	; (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf2:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e032      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c10:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4916      	ldr	r1, [pc, #88]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c2e:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	490e      	ldr	r1, [pc, #56]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c42:	f000 f887 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 8003c46:	4602      	mov	r2, r0
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	490a      	ldr	r1, [pc, #40]	; (8003c7c <HAL_RCC_ClockConfig+0x1c0>)
 8003c54:	5ccb      	ldrb	r3, [r1, r3]
 8003c56:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5a:	4a09      	ldr	r2, [pc, #36]	; (8003c80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe ff7c 	bl	8002b60 <HAL_InitTick>

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40023c00 	.word	0x40023c00
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	0800f6c4 	.word	0x0800f6c4
 8003c80:	20000038 	.word	0x20000038
 8003c84:	2000003c 	.word	0x2000003c

08003c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c8c:	4b03      	ldr	r3, [pc, #12]	; (8003c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	20000038 	.word	0x20000038

08003ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ca4:	f7ff fff0 	bl	8003c88 <HAL_RCC_GetHCLKFreq>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	0a9b      	lsrs	r3, r3, #10
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	4903      	ldr	r1, [pc, #12]	; (8003cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cb6:	5ccb      	ldrb	r3, [r1, r3]
 8003cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	0800f6d4 	.word	0x0800f6d4

08003cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ccc:	f7ff ffdc 	bl	8003c88 <HAL_RCC_GetHCLKFreq>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	0b5b      	lsrs	r3, r3, #13
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	4903      	ldr	r1, [pc, #12]	; (8003cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cde:	5ccb      	ldrb	r3, [r1, r3]
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	0800f6d4 	.word	0x0800f6d4

08003cf0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	220f      	movs	r2, #15
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d00:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <HAL_RCC_GetClockConfig+0x5c>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 0203 	and.w	r2, r3, #3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <HAL_RCC_GetClockConfig+0x5c>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <HAL_RCC_GetClockConfig+0x5c>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_RCC_GetClockConfig+0x5c>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	08db      	lsrs	r3, r3, #3
 8003d2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d32:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <HAL_RCC_GetClockConfig+0x60>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 020f 	and.w	r2, r3, #15
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	601a      	str	r2, [r3, #0]
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40023c00 	.word	0x40023c00

08003d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d58:	b088      	sub	sp, #32
 8003d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d70:	4bce      	ldr	r3, [pc, #824]	; (80040ac <HAL_RCC_GetSysClockFreq+0x358>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 030c 	and.w	r3, r3, #12
 8003d78:	2b0c      	cmp	r3, #12
 8003d7a:	f200 818d 	bhi.w	8004098 <HAL_RCC_GetSysClockFreq+0x344>
 8003d7e:	a201      	add	r2, pc, #4	; (adr r2, 8003d84 <HAL_RCC_GetSysClockFreq+0x30>)
 8003d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d84:	08003db9 	.word	0x08003db9
 8003d88:	08004099 	.word	0x08004099
 8003d8c:	08004099 	.word	0x08004099
 8003d90:	08004099 	.word	0x08004099
 8003d94:	08003dbf 	.word	0x08003dbf
 8003d98:	08004099 	.word	0x08004099
 8003d9c:	08004099 	.word	0x08004099
 8003da0:	08004099 	.word	0x08004099
 8003da4:	08003dc5 	.word	0x08003dc5
 8003da8:	08004099 	.word	0x08004099
 8003dac:	08004099 	.word	0x08004099
 8003db0:	08004099 	.word	0x08004099
 8003db4:	08003f39 	.word	0x08003f39
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003db8:	4bbd      	ldr	r3, [pc, #756]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003dba:	61bb      	str	r3, [r7, #24]
       break;
 8003dbc:	e16f      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dbe:	4bbd      	ldr	r3, [pc, #756]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x360>)
 8003dc0:	61bb      	str	r3, [r7, #24]
      break;
 8003dc2:	e16c      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dc4:	4bb9      	ldr	r3, [pc, #740]	; (80040ac <HAL_RCC_GetSysClockFreq+0x358>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dcc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dce:	4bb7      	ldr	r3, [pc, #732]	; (80040ac <HAL_RCC_GetSysClockFreq+0x358>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d053      	beq.n	8003e82 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dda:	4bb4      	ldr	r3, [pc, #720]	; (80040ac <HAL_RCC_GetSysClockFreq+0x358>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	099b      	lsrs	r3, r3, #6
 8003de0:	461a      	mov	r2, r3
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003dea:	f04f 0100 	mov.w	r1, #0
 8003dee:	ea02 0400 	and.w	r4, r2, r0
 8003df2:	603c      	str	r4, [r7, #0]
 8003df4:	400b      	ands	r3, r1
 8003df6:	607b      	str	r3, [r7, #4]
 8003df8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	4629      	mov	r1, r5
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	014b      	lsls	r3, r1, #5
 8003e0a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e0e:	0142      	lsls	r2, r0, #5
 8003e10:	4610      	mov	r0, r2
 8003e12:	4619      	mov	r1, r3
 8003e14:	4623      	mov	r3, r4
 8003e16:	1ac0      	subs	r0, r0, r3
 8003e18:	462b      	mov	r3, r5
 8003e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	018b      	lsls	r3, r1, #6
 8003e28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e2c:	0182      	lsls	r2, r0, #6
 8003e2e:	1a12      	subs	r2, r2, r0
 8003e30:	eb63 0301 	sbc.w	r3, r3, r1
 8003e34:	f04f 0000 	mov.w	r0, #0
 8003e38:	f04f 0100 	mov.w	r1, #0
 8003e3c:	00d9      	lsls	r1, r3, #3
 8003e3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e42:	00d0      	lsls	r0, r2, #3
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4621      	mov	r1, r4
 8003e4a:	1852      	adds	r2, r2, r1
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	eb43 0101 	adc.w	r1, r3, r1
 8003e52:	460b      	mov	r3, r1
 8003e54:	f04f 0000 	mov.w	r0, #0
 8003e58:	f04f 0100 	mov.w	r1, #0
 8003e5c:	0259      	lsls	r1, r3, #9
 8003e5e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003e62:	0250      	lsls	r0, r2, #9
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	f7fc ff38 	bl	8000ce8 <__aeabi_uldivmod>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	e04c      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e82:	4b8a      	ldr	r3, [pc, #552]	; (80040ac <HAL_RCC_GetSysClockFreq+0x358>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	099b      	lsrs	r3, r3, #6
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e92:	f04f 0100 	mov.w	r1, #0
 8003e96:	ea02 0a00 	and.w	sl, r2, r0
 8003e9a:	ea03 0b01 	and.w	fp, r3, r1
 8003e9e:	4650      	mov	r0, sl
 8003ea0:	4659      	mov	r1, fp
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	014b      	lsls	r3, r1, #5
 8003eac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003eb0:	0142      	lsls	r2, r0, #5
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	ebb0 000a 	subs.w	r0, r0, sl
 8003eba:	eb61 010b 	sbc.w	r1, r1, fp
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	018b      	lsls	r3, r1, #6
 8003ec8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ecc:	0182      	lsls	r2, r0, #6
 8003ece:	1a12      	subs	r2, r2, r0
 8003ed0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed4:	f04f 0000 	mov.w	r0, #0
 8003ed8:	f04f 0100 	mov.w	r1, #0
 8003edc:	00d9      	lsls	r1, r3, #3
 8003ede:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ee2:	00d0      	lsls	r0, r2, #3
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	eb12 020a 	adds.w	r2, r2, sl
 8003eec:	eb43 030b 	adc.w	r3, r3, fp
 8003ef0:	f04f 0000 	mov.w	r0, #0
 8003ef4:	f04f 0100 	mov.w	r1, #0
 8003ef8:	0299      	lsls	r1, r3, #10
 8003efa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003efe:	0290      	lsls	r0, r2, #10
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4610      	mov	r0, r2
 8003f06:	4619      	mov	r1, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	f7fc feea 	bl	8000ce8 <__aeabi_uldivmod>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4613      	mov	r3, r2
 8003f1a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f1c:	4b63      	ldr	r3, [pc, #396]	; (80040ac <HAL_RCC_GetSysClockFreq+0x358>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	0c1b      	lsrs	r3, r3, #16
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	3301      	adds	r3, #1
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f34:	61bb      	str	r3, [r7, #24]
      break;
 8003f36:	e0b2      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f38:	4b5c      	ldr	r3, [pc, #368]	; (80040ac <HAL_RCC_GetSysClockFreq+0x358>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f40:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f42:	4b5a      	ldr	r3, [pc, #360]	; (80040ac <HAL_RCC_GetSysClockFreq+0x358>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d04d      	beq.n	8003fea <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4e:	4b57      	ldr	r3, [pc, #348]	; (80040ac <HAL_RCC_GetSysClockFreq+0x358>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	099b      	lsrs	r3, r3, #6
 8003f54:	461a      	mov	r2, r3
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f5e:	f04f 0100 	mov.w	r1, #0
 8003f62:	ea02 0800 	and.w	r8, r2, r0
 8003f66:	ea03 0901 	and.w	r9, r3, r1
 8003f6a:	4640      	mov	r0, r8
 8003f6c:	4649      	mov	r1, r9
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	014b      	lsls	r3, r1, #5
 8003f78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f7c:	0142      	lsls	r2, r0, #5
 8003f7e:	4610      	mov	r0, r2
 8003f80:	4619      	mov	r1, r3
 8003f82:	ebb0 0008 	subs.w	r0, r0, r8
 8003f86:	eb61 0109 	sbc.w	r1, r1, r9
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	018b      	lsls	r3, r1, #6
 8003f94:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f98:	0182      	lsls	r2, r0, #6
 8003f9a:	1a12      	subs	r2, r2, r0
 8003f9c:	eb63 0301 	sbc.w	r3, r3, r1
 8003fa0:	f04f 0000 	mov.w	r0, #0
 8003fa4:	f04f 0100 	mov.w	r1, #0
 8003fa8:	00d9      	lsls	r1, r3, #3
 8003faa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fae:	00d0      	lsls	r0, r2, #3
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	eb12 0208 	adds.w	r2, r2, r8
 8003fb8:	eb43 0309 	adc.w	r3, r3, r9
 8003fbc:	f04f 0000 	mov.w	r0, #0
 8003fc0:	f04f 0100 	mov.w	r1, #0
 8003fc4:	0259      	lsls	r1, r3, #9
 8003fc6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003fca:	0250      	lsls	r0, r2, #9
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	f7fc fe84 	bl	8000ce8 <__aeabi_uldivmod>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	61fb      	str	r3, [r7, #28]
 8003fe8:	e04a      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fea:	4b30      	ldr	r3, [pc, #192]	; (80040ac <HAL_RCC_GetSysClockFreq+0x358>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	099b      	lsrs	r3, r3, #6
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ffa:	f04f 0100 	mov.w	r1, #0
 8003ffe:	ea02 0400 	and.w	r4, r2, r0
 8004002:	ea03 0501 	and.w	r5, r3, r1
 8004006:	4620      	mov	r0, r4
 8004008:	4629      	mov	r1, r5
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	014b      	lsls	r3, r1, #5
 8004014:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004018:	0142      	lsls	r2, r0, #5
 800401a:	4610      	mov	r0, r2
 800401c:	4619      	mov	r1, r3
 800401e:	1b00      	subs	r0, r0, r4
 8004020:	eb61 0105 	sbc.w	r1, r1, r5
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	018b      	lsls	r3, r1, #6
 800402e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004032:	0182      	lsls	r2, r0, #6
 8004034:	1a12      	subs	r2, r2, r0
 8004036:	eb63 0301 	sbc.w	r3, r3, r1
 800403a:	f04f 0000 	mov.w	r0, #0
 800403e:	f04f 0100 	mov.w	r1, #0
 8004042:	00d9      	lsls	r1, r3, #3
 8004044:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004048:	00d0      	lsls	r0, r2, #3
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	1912      	adds	r2, r2, r4
 8004050:	eb45 0303 	adc.w	r3, r5, r3
 8004054:	f04f 0000 	mov.w	r0, #0
 8004058:	f04f 0100 	mov.w	r1, #0
 800405c:	0299      	lsls	r1, r3, #10
 800405e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004062:	0290      	lsls	r0, r2, #10
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4610      	mov	r0, r2
 800406a:	4619      	mov	r1, r3
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	461a      	mov	r2, r3
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	f7fc fe38 	bl	8000ce8 <__aeabi_uldivmod>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4613      	mov	r3, r2
 800407e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004080:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <HAL_RCC_GetSysClockFreq+0x358>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	0f1b      	lsrs	r3, r3, #28
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	61bb      	str	r3, [r7, #24]
      break;
 8004096:	e002      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800409a:	61bb      	str	r3, [r7, #24]
      break;
 800409c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800409e:	69bb      	ldr	r3, [r7, #24]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
 80040b0:	00f42400 	.word	0x00f42400
 80040b4:	007a1200 	.word	0x007a1200

080040b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e28d      	b.n	80045e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 8083 	beq.w	80041de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040d8:	4b94      	ldr	r3, [pc, #592]	; (800432c <HAL_RCC_OscConfig+0x274>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 030c 	and.w	r3, r3, #12
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d019      	beq.n	8004118 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040e4:	4b91      	ldr	r3, [pc, #580]	; (800432c <HAL_RCC_OscConfig+0x274>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d106      	bne.n	80040fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040f0:	4b8e      	ldr	r3, [pc, #568]	; (800432c <HAL_RCC_OscConfig+0x274>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040fc:	d00c      	beq.n	8004118 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040fe:	4b8b      	ldr	r3, [pc, #556]	; (800432c <HAL_RCC_OscConfig+0x274>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004106:	2b0c      	cmp	r3, #12
 8004108:	d112      	bne.n	8004130 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800410a:	4b88      	ldr	r3, [pc, #544]	; (800432c <HAL_RCC_OscConfig+0x274>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004116:	d10b      	bne.n	8004130 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004118:	4b84      	ldr	r3, [pc, #528]	; (800432c <HAL_RCC_OscConfig+0x274>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d05b      	beq.n	80041dc <HAL_RCC_OscConfig+0x124>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d157      	bne.n	80041dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e25a      	b.n	80045e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004138:	d106      	bne.n	8004148 <HAL_RCC_OscConfig+0x90>
 800413a:	4b7c      	ldr	r3, [pc, #496]	; (800432c <HAL_RCC_OscConfig+0x274>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a7b      	ldr	r2, [pc, #492]	; (800432c <HAL_RCC_OscConfig+0x274>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	e01d      	b.n	8004184 <HAL_RCC_OscConfig+0xcc>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004150:	d10c      	bne.n	800416c <HAL_RCC_OscConfig+0xb4>
 8004152:	4b76      	ldr	r3, [pc, #472]	; (800432c <HAL_RCC_OscConfig+0x274>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a75      	ldr	r2, [pc, #468]	; (800432c <HAL_RCC_OscConfig+0x274>)
 8004158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	4b73      	ldr	r3, [pc, #460]	; (800432c <HAL_RCC_OscConfig+0x274>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a72      	ldr	r2, [pc, #456]	; (800432c <HAL_RCC_OscConfig+0x274>)
 8004164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	e00b      	b.n	8004184 <HAL_RCC_OscConfig+0xcc>
 800416c:	4b6f      	ldr	r3, [pc, #444]	; (800432c <HAL_RCC_OscConfig+0x274>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a6e      	ldr	r2, [pc, #440]	; (800432c <HAL_RCC_OscConfig+0x274>)
 8004172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004176:	6013      	str	r3, [r2, #0]
 8004178:	4b6c      	ldr	r3, [pc, #432]	; (800432c <HAL_RCC_OscConfig+0x274>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a6b      	ldr	r2, [pc, #428]	; (800432c <HAL_RCC_OscConfig+0x274>)
 800417e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d013      	beq.n	80041b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7ff f950 	bl	8003430 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004194:	f7ff f94c 	bl	8003430 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	; 0x64
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e21f      	b.n	80045e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a6:	4b61      	ldr	r3, [pc, #388]	; (800432c <HAL_RCC_OscConfig+0x274>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0xdc>
 80041b2:	e014      	b.n	80041de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7ff f93c 	bl	8003430 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041bc:	f7ff f938 	bl	8003430 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b64      	cmp	r3, #100	; 0x64
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e20b      	b.n	80045e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ce:	4b57      	ldr	r3, [pc, #348]	; (800432c <HAL_RCC_OscConfig+0x274>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x104>
 80041da:	e000      	b.n	80041de <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d06f      	beq.n	80042ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041ea:	4b50      	ldr	r3, [pc, #320]	; (800432c <HAL_RCC_OscConfig+0x274>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d017      	beq.n	8004226 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041f6:	4b4d      	ldr	r3, [pc, #308]	; (800432c <HAL_RCC_OscConfig+0x274>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d105      	bne.n	800420e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004202:	4b4a      	ldr	r3, [pc, #296]	; (800432c <HAL_RCC_OscConfig+0x274>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00b      	beq.n	8004226 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800420e:	4b47      	ldr	r3, [pc, #284]	; (800432c <HAL_RCC_OscConfig+0x274>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004216:	2b0c      	cmp	r3, #12
 8004218:	d11c      	bne.n	8004254 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800421a:	4b44      	ldr	r3, [pc, #272]	; (800432c <HAL_RCC_OscConfig+0x274>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d116      	bne.n	8004254 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004226:	4b41      	ldr	r3, [pc, #260]	; (800432c <HAL_RCC_OscConfig+0x274>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <HAL_RCC_OscConfig+0x186>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d001      	beq.n	800423e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e1d3      	b.n	80045e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423e:	4b3b      	ldr	r3, [pc, #236]	; (800432c <HAL_RCC_OscConfig+0x274>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4937      	ldr	r1, [pc, #220]	; (800432c <HAL_RCC_OscConfig+0x274>)
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004252:	e03a      	b.n	80042ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d020      	beq.n	800429e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800425c:	4b34      	ldr	r3, [pc, #208]	; (8004330 <HAL_RCC_OscConfig+0x278>)
 800425e:	2201      	movs	r2, #1
 8004260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004262:	f7ff f8e5 	bl	8003430 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800426a:	f7ff f8e1 	bl	8003430 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e1b4      	b.n	80045e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427c:	4b2b      	ldr	r3, [pc, #172]	; (800432c <HAL_RCC_OscConfig+0x274>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f0      	beq.n	800426a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004288:	4b28      	ldr	r3, [pc, #160]	; (800432c <HAL_RCC_OscConfig+0x274>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4925      	ldr	r1, [pc, #148]	; (800432c <HAL_RCC_OscConfig+0x274>)
 8004298:	4313      	orrs	r3, r2
 800429a:	600b      	str	r3, [r1, #0]
 800429c:	e015      	b.n	80042ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800429e:	4b24      	ldr	r3, [pc, #144]	; (8004330 <HAL_RCC_OscConfig+0x278>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a4:	f7ff f8c4 	bl	8003430 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ac:	f7ff f8c0 	bl	8003430 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e193      	b.n	80045e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042be:	4b1b      	ldr	r3, [pc, #108]	; (800432c <HAL_RCC_OscConfig+0x274>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f0      	bne.n	80042ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d036      	beq.n	8004344 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d016      	beq.n	800430c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <HAL_RCC_OscConfig+0x27c>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7ff f8a4 	bl	8003430 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ec:	f7ff f8a0 	bl	8003430 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e173      	b.n	80045e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042fe:	4b0b      	ldr	r3, [pc, #44]	; (800432c <HAL_RCC_OscConfig+0x274>)
 8004300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0x234>
 800430a:	e01b      	b.n	8004344 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <HAL_RCC_OscConfig+0x27c>)
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004312:	f7ff f88d 	bl	8003430 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004318:	e00e      	b.n	8004338 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800431a:	f7ff f889 	bl	8003430 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d907      	bls.n	8004338 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e15c      	b.n	80045e6 <HAL_RCC_OscConfig+0x52e>
 800432c:	40023800 	.word	0x40023800
 8004330:	42470000 	.word	0x42470000
 8004334:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004338:	4b8a      	ldr	r3, [pc, #552]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 800433a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1ea      	bne.n	800431a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 8097 	beq.w	8004480 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004352:	2300      	movs	r3, #0
 8004354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004356:	4b83      	ldr	r3, [pc, #524]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10f      	bne.n	8004382 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004362:	2300      	movs	r3, #0
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	4b7f      	ldr	r3, [pc, #508]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	4a7e      	ldr	r2, [pc, #504]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 800436c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004370:	6413      	str	r3, [r2, #64]	; 0x40
 8004372:	4b7c      	ldr	r3, [pc, #496]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437a:	60bb      	str	r3, [r7, #8]
 800437c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800437e:	2301      	movs	r3, #1
 8004380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004382:	4b79      	ldr	r3, [pc, #484]	; (8004568 <HAL_RCC_OscConfig+0x4b0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d118      	bne.n	80043c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800438e:	4b76      	ldr	r3, [pc, #472]	; (8004568 <HAL_RCC_OscConfig+0x4b0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a75      	ldr	r2, [pc, #468]	; (8004568 <HAL_RCC_OscConfig+0x4b0>)
 8004394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800439a:	f7ff f849 	bl	8003430 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a2:	f7ff f845 	bl	8003430 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e118      	b.n	80045e6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b4:	4b6c      	ldr	r3, [pc, #432]	; (8004568 <HAL_RCC_OscConfig+0x4b0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d106      	bne.n	80043d6 <HAL_RCC_OscConfig+0x31e>
 80043c8:	4b66      	ldr	r3, [pc, #408]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	4a65      	ldr	r2, [pc, #404]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6713      	str	r3, [r2, #112]	; 0x70
 80043d4:	e01c      	b.n	8004410 <HAL_RCC_OscConfig+0x358>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b05      	cmp	r3, #5
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x340>
 80043de:	4b61      	ldr	r3, [pc, #388]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	4a60      	ldr	r2, [pc, #384]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 80043e4:	f043 0304 	orr.w	r3, r3, #4
 80043e8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ea:	4b5e      	ldr	r3, [pc, #376]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	4a5d      	ldr	r2, [pc, #372]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	6713      	str	r3, [r2, #112]	; 0x70
 80043f6:	e00b      	b.n	8004410 <HAL_RCC_OscConfig+0x358>
 80043f8:	4b5a      	ldr	r3, [pc, #360]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fc:	4a59      	ldr	r2, [pc, #356]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	6713      	str	r3, [r2, #112]	; 0x70
 8004404:	4b57      	ldr	r3, [pc, #348]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 8004406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004408:	4a56      	ldr	r2, [pc, #344]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 800440a:	f023 0304 	bic.w	r3, r3, #4
 800440e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d015      	beq.n	8004444 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004418:	f7ff f80a 	bl	8003430 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441e:	e00a      	b.n	8004436 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004420:	f7ff f806 	bl	8003430 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	; 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e0d7      	b.n	80045e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004436:	4b4b      	ldr	r3, [pc, #300]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0ee      	beq.n	8004420 <HAL_RCC_OscConfig+0x368>
 8004442:	e014      	b.n	800446e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004444:	f7fe fff4 	bl	8003430 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800444a:	e00a      	b.n	8004462 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800444c:	f7fe fff0 	bl	8003430 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f241 3288 	movw	r2, #5000	; 0x1388
 800445a:	4293      	cmp	r3, r2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e0c1      	b.n	80045e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004462:	4b40      	ldr	r3, [pc, #256]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1ee      	bne.n	800444c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800446e:	7dfb      	ldrb	r3, [r7, #23]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d105      	bne.n	8004480 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004474:	4b3b      	ldr	r3, [pc, #236]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	4a3a      	ldr	r2, [pc, #232]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 800447a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800447e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80ad 	beq.w	80045e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800448a:	4b36      	ldr	r3, [pc, #216]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b08      	cmp	r3, #8
 8004494:	d060      	beq.n	8004558 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d145      	bne.n	800452a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449e:	4b33      	ldr	r3, [pc, #204]	; (800456c <HAL_RCC_OscConfig+0x4b4>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7fe ffc4 	bl	8003430 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ac:	f7fe ffc0 	bl	8003430 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e093      	b.n	80045e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044be:	4b29      	ldr	r3, [pc, #164]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69da      	ldr	r2, [r3, #28]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	019b      	lsls	r3, r3, #6
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	085b      	lsrs	r3, r3, #1
 80044e2:	3b01      	subs	r3, #1
 80044e4:	041b      	lsls	r3, r3, #16
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	061b      	lsls	r3, r3, #24
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	071b      	lsls	r3, r3, #28
 80044f6:	491b      	ldr	r1, [pc, #108]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044fc:	4b1b      	ldr	r3, [pc, #108]	; (800456c <HAL_RCC_OscConfig+0x4b4>)
 80044fe:	2201      	movs	r2, #1
 8004500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004502:	f7fe ff95 	bl	8003430 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800450a:	f7fe ff91 	bl	8003430 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e064      	b.n	80045e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451c:	4b11      	ldr	r3, [pc, #68]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x452>
 8004528:	e05c      	b.n	80045e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452a:	4b10      	ldr	r3, [pc, #64]	; (800456c <HAL_RCC_OscConfig+0x4b4>)
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fe ff7e 	bl	8003430 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004538:	f7fe ff7a 	bl	8003430 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e04d      	b.n	80045e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454a:	4b06      	ldr	r3, [pc, #24]	; (8004564 <HAL_RCC_OscConfig+0x4ac>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0x480>
 8004556:	e045      	b.n	80045e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d107      	bne.n	8004570 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e040      	b.n	80045e6 <HAL_RCC_OscConfig+0x52e>
 8004564:	40023800 	.word	0x40023800
 8004568:	40007000 	.word	0x40007000
 800456c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004570:	4b1f      	ldr	r3, [pc, #124]	; (80045f0 <HAL_RCC_OscConfig+0x538>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d030      	beq.n	80045e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004588:	429a      	cmp	r2, r3
 800458a:	d129      	bne.n	80045e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004596:	429a      	cmp	r2, r3
 8004598:	d122      	bne.n	80045e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045a0:	4013      	ands	r3, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d119      	bne.n	80045e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	3b01      	subs	r3, #1
 80045ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045bc:	429a      	cmp	r2, r3
 80045be:	d10f      	bne.n	80045e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d107      	bne.n	80045e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045dc:	429a      	cmp	r2, r3
 80045de:	d001      	beq.n	80045e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40023800 	.word	0x40023800

080045f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e041      	b.n	800468a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fe fd58 	bl	80030d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3304      	adds	r3, #4
 8004630:	4619      	mov	r1, r3
 8004632:	4610      	mov	r0, r2
 8004634:	f000 fdae 	bl	8005194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d001      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e04e      	b.n	800474a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a23      	ldr	r2, [pc, #140]	; (8004758 <HAL_TIM_Base_Start_IT+0xc4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d022      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x80>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d6:	d01d      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x80>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1f      	ldr	r2, [pc, #124]	; (800475c <HAL_TIM_Base_Start_IT+0xc8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d018      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x80>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1e      	ldr	r2, [pc, #120]	; (8004760 <HAL_TIM_Base_Start_IT+0xcc>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d013      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x80>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1c      	ldr	r2, [pc, #112]	; (8004764 <HAL_TIM_Base_Start_IT+0xd0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00e      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x80>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1b      	ldr	r2, [pc, #108]	; (8004768 <HAL_TIM_Base_Start_IT+0xd4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d009      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x80>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a19      	ldr	r2, [pc, #100]	; (800476c <HAL_TIM_Base_Start_IT+0xd8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d004      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x80>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a18      	ldr	r2, [pc, #96]	; (8004770 <HAL_TIM_Base_Start_IT+0xdc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d111      	bne.n	8004738 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b06      	cmp	r3, #6
 8004724:	d010      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0201 	orr.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004736:	e007      	b.n	8004748 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0201 	orr.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40010000 	.word	0x40010000
 800475c:	40000400 	.word	0x40000400
 8004760:	40000800 	.word	0x40000800
 8004764:	40000c00 	.word	0x40000c00
 8004768:	40010400 	.word	0x40010400
 800476c:	40014000 	.word	0x40014000
 8004770:	40001800 	.word	0x40001800

08004774 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e041      	b.n	800480a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f839 	bl	8004812 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3304      	adds	r3, #4
 80047b0:	4619      	mov	r1, r3
 80047b2:	4610      	mov	r0, r2
 80047b4:	f000 fcee 	bl	8005194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
	...

08004828 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d109      	bne.n	800484c <HAL_TIM_PWM_Start+0x24>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	bf14      	ite	ne
 8004844:	2301      	movne	r3, #1
 8004846:	2300      	moveq	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	e022      	b.n	8004892 <HAL_TIM_PWM_Start+0x6a>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b04      	cmp	r3, #4
 8004850:	d109      	bne.n	8004866 <HAL_TIM_PWM_Start+0x3e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b01      	cmp	r3, #1
 800485c:	bf14      	ite	ne
 800485e:	2301      	movne	r3, #1
 8004860:	2300      	moveq	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	e015      	b.n	8004892 <HAL_TIM_PWM_Start+0x6a>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b08      	cmp	r3, #8
 800486a:	d109      	bne.n	8004880 <HAL_TIM_PWM_Start+0x58>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b01      	cmp	r3, #1
 8004876:	bf14      	ite	ne
 8004878:	2301      	movne	r3, #1
 800487a:	2300      	moveq	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	e008      	b.n	8004892 <HAL_TIM_PWM_Start+0x6a>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b01      	cmp	r3, #1
 800488a:	bf14      	ite	ne
 800488c:	2301      	movne	r3, #1
 800488e:	2300      	moveq	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e07c      	b.n	8004994 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d104      	bne.n	80048aa <HAL_TIM_PWM_Start+0x82>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048a8:	e013      	b.n	80048d2 <HAL_TIM_PWM_Start+0xaa>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d104      	bne.n	80048ba <HAL_TIM_PWM_Start+0x92>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048b8:	e00b      	b.n	80048d2 <HAL_TIM_PWM_Start+0xaa>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d104      	bne.n	80048ca <HAL_TIM_PWM_Start+0xa2>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c8:	e003      	b.n	80048d2 <HAL_TIM_PWM_Start+0xaa>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2202      	movs	r2, #2
 80048ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2201      	movs	r2, #1
 80048d8:	6839      	ldr	r1, [r7, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 ff44 	bl	8005768 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a2d      	ldr	r2, [pc, #180]	; (800499c <HAL_TIM_PWM_Start+0x174>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d004      	beq.n	80048f4 <HAL_TIM_PWM_Start+0xcc>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a2c      	ldr	r2, [pc, #176]	; (80049a0 <HAL_TIM_PWM_Start+0x178>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d101      	bne.n	80048f8 <HAL_TIM_PWM_Start+0xd0>
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <HAL_TIM_PWM_Start+0xd2>
 80048f8:	2300      	movs	r3, #0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d007      	beq.n	800490e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800490c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a22      	ldr	r2, [pc, #136]	; (800499c <HAL_TIM_PWM_Start+0x174>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d022      	beq.n	800495e <HAL_TIM_PWM_Start+0x136>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004920:	d01d      	beq.n	800495e <HAL_TIM_PWM_Start+0x136>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1f      	ldr	r2, [pc, #124]	; (80049a4 <HAL_TIM_PWM_Start+0x17c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d018      	beq.n	800495e <HAL_TIM_PWM_Start+0x136>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a1d      	ldr	r2, [pc, #116]	; (80049a8 <HAL_TIM_PWM_Start+0x180>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <HAL_TIM_PWM_Start+0x136>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1c      	ldr	r2, [pc, #112]	; (80049ac <HAL_TIM_PWM_Start+0x184>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00e      	beq.n	800495e <HAL_TIM_PWM_Start+0x136>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a16      	ldr	r2, [pc, #88]	; (80049a0 <HAL_TIM_PWM_Start+0x178>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d009      	beq.n	800495e <HAL_TIM_PWM_Start+0x136>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a18      	ldr	r2, [pc, #96]	; (80049b0 <HAL_TIM_PWM_Start+0x188>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d004      	beq.n	800495e <HAL_TIM_PWM_Start+0x136>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a16      	ldr	r2, [pc, #88]	; (80049b4 <HAL_TIM_PWM_Start+0x18c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d111      	bne.n	8004982 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b06      	cmp	r3, #6
 800496e:	d010      	beq.n	8004992 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004980:	e007      	b.n	8004992 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f042 0201 	orr.w	r2, r2, #1
 8004990:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40010000 	.word	0x40010000
 80049a0:	40010400 	.word	0x40010400
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40000800 	.word	0x40000800
 80049ac:	40000c00 	.word	0x40000c00
 80049b0:	40014000 	.word	0x40014000
 80049b4:	40001800 	.word	0x40001800

080049b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e097      	b.n	8004afc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d106      	bne.n	80049e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7fe fb97 	bl	8003114 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2202      	movs	r2, #2
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6812      	ldr	r2, [r2, #0]
 80049f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049fc:	f023 0307 	bic.w	r3, r3, #7
 8004a00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	f000 fbc1 	bl	8005194 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a3a:	f023 0303 	bic.w	r3, r3, #3
 8004a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	021b      	lsls	r3, r3, #8
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a58:	f023 030c 	bic.w	r3, r3, #12
 8004a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	4313      	orrs	r3, r2
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	011a      	lsls	r2, r3, #4
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	031b      	lsls	r3, r3, #12
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a96:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b14:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b1c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b24:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b2c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d110      	bne.n	8004b56 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d102      	bne.n	8004b40 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b3a:	7b7b      	ldrb	r3, [r7, #13]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d001      	beq.n	8004b44 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e069      	b.n	8004c18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b54:	e031      	b.n	8004bba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d110      	bne.n	8004b7e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b5c:	7bbb      	ldrb	r3, [r7, #14]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d102      	bne.n	8004b68 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b62:	7b3b      	ldrb	r3, [r7, #12]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d001      	beq.n	8004b6c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e055      	b.n	8004c18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b7c:	e01d      	b.n	8004bba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d108      	bne.n	8004b96 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b84:	7bbb      	ldrb	r3, [r7, #14]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d105      	bne.n	8004b96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b8a:	7b7b      	ldrb	r3, [r7, #13]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d102      	bne.n	8004b96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b90:	7b3b      	ldrb	r3, [r7, #12]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d001      	beq.n	8004b9a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e03e      	b.n	8004c18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2202      	movs	r2, #2
 8004bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <HAL_TIM_Encoder_Start+0xc4>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d008      	beq.n	8004bd8 <HAL_TIM_Encoder_Start+0xd4>
 8004bc6:	e00f      	b.n	8004be8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	2100      	movs	r1, #0
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fdc9 	bl	8005768 <TIM_CCxChannelCmd>
      break;
 8004bd6:	e016      	b.n	8004c06 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	2104      	movs	r1, #4
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fdc1 	bl	8005768 <TIM_CCxChannelCmd>
      break;
 8004be6:	e00e      	b.n	8004c06 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2201      	movs	r2, #1
 8004bee:	2100      	movs	r1, #0
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fdb9 	bl	8005768 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	2104      	movs	r1, #4
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fdb2 	bl	8005768 <TIM_CCxChannelCmd>
      break;
 8004c04:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f042 0201 	orr.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d122      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d11b      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f06f 0202 	mvn.w	r2, #2
 8004c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fa77 	bl	8005156 <HAL_TIM_IC_CaptureCallback>
 8004c68:	e005      	b.n	8004c76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fa69 	bl	8005142 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fa7a 	bl	800516a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d122      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d11b      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0204 	mvn.w	r2, #4
 8004ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fa4d 	bl	8005156 <HAL_TIM_IC_CaptureCallback>
 8004cbc:	e005      	b.n	8004cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fa3f 	bl	8005142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fa50 	bl	800516a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d122      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d11b      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0208 	mvn.w	r2, #8
 8004cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2204      	movs	r2, #4
 8004cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fa23 	bl	8005156 <HAL_TIM_IC_CaptureCallback>
 8004d10:	e005      	b.n	8004d1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fa15 	bl	8005142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fa26 	bl	800516a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f003 0310 	and.w	r3, r3, #16
 8004d2e:	2b10      	cmp	r3, #16
 8004d30:	d122      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b10      	cmp	r3, #16
 8004d3e:	d11b      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0210 	mvn.w	r2, #16
 8004d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f9f9 	bl	8005156 <HAL_TIM_IC_CaptureCallback>
 8004d64:	e005      	b.n	8004d72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f9eb 	bl	8005142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f9fc 	bl	800516a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d10e      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d107      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f06f 0201 	mvn.w	r2, #1
 8004d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fd fe9a 	bl	8002ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dae:	2b80      	cmp	r3, #128	; 0x80
 8004db0:	d10e      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dbc:	2b80      	cmp	r3, #128	; 0x80
 8004dbe:	d107      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fdca 	bl	8005964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dda:	2b40      	cmp	r3, #64	; 0x40
 8004ddc:	d10e      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d107      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f9c1 	bl	800517e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0320 	and.w	r3, r3, #32
 8004e06:	2b20      	cmp	r3, #32
 8004e08:	d10e      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d107      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f06f 0220 	mvn.w	r2, #32
 8004e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fd94 	bl	8005950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e28:	bf00      	nop
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e0ae      	b.n	8004fac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b0c      	cmp	r3, #12
 8004e5a:	f200 809f 	bhi.w	8004f9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e5e:	a201      	add	r2, pc, #4	; (adr r2, 8004e64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e64:	08004e99 	.word	0x08004e99
 8004e68:	08004f9d 	.word	0x08004f9d
 8004e6c:	08004f9d 	.word	0x08004f9d
 8004e70:	08004f9d 	.word	0x08004f9d
 8004e74:	08004ed9 	.word	0x08004ed9
 8004e78:	08004f9d 	.word	0x08004f9d
 8004e7c:	08004f9d 	.word	0x08004f9d
 8004e80:	08004f9d 	.word	0x08004f9d
 8004e84:	08004f1b 	.word	0x08004f1b
 8004e88:	08004f9d 	.word	0x08004f9d
 8004e8c:	08004f9d 	.word	0x08004f9d
 8004e90:	08004f9d 	.word	0x08004f9d
 8004e94:	08004f5b 	.word	0x08004f5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fa18 	bl	80052d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699a      	ldr	r2, [r3, #24]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0208 	orr.w	r2, r2, #8
 8004eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699a      	ldr	r2, [r3, #24]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0204 	bic.w	r2, r2, #4
 8004ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6999      	ldr	r1, [r3, #24]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	619a      	str	r2, [r3, #24]
      break;
 8004ed6:	e064      	b.n	8004fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fa68 	bl	80053b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699a      	ldr	r2, [r3, #24]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6999      	ldr	r1, [r3, #24]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	021a      	lsls	r2, r3, #8
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	619a      	str	r2, [r3, #24]
      break;
 8004f18:	e043      	b.n	8004fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68b9      	ldr	r1, [r7, #8]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fabd 	bl	80054a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69da      	ldr	r2, [r3, #28]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0208 	orr.w	r2, r2, #8
 8004f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0204 	bic.w	r2, r2, #4
 8004f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69d9      	ldr	r1, [r3, #28]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	61da      	str	r2, [r3, #28]
      break;
 8004f58:	e023      	b.n	8004fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fb11 	bl	8005588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69da      	ldr	r2, [r3, #28]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69da      	ldr	r2, [r3, #28]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69d9      	ldr	r1, [r3, #28]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	021a      	lsls	r2, r3, #8
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	61da      	str	r2, [r3, #28]
      break;
 8004f9a:	e002      	b.n	8004fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_TIM_ConfigClockSource+0x1c>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e0b4      	b.n	800513a <HAL_TIM_ConfigClockSource+0x186>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ff6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005008:	d03e      	beq.n	8005088 <HAL_TIM_ConfigClockSource+0xd4>
 800500a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800500e:	f200 8087 	bhi.w	8005120 <HAL_TIM_ConfigClockSource+0x16c>
 8005012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005016:	f000 8086 	beq.w	8005126 <HAL_TIM_ConfigClockSource+0x172>
 800501a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501e:	d87f      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x16c>
 8005020:	2b70      	cmp	r3, #112	; 0x70
 8005022:	d01a      	beq.n	800505a <HAL_TIM_ConfigClockSource+0xa6>
 8005024:	2b70      	cmp	r3, #112	; 0x70
 8005026:	d87b      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x16c>
 8005028:	2b60      	cmp	r3, #96	; 0x60
 800502a:	d050      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x11a>
 800502c:	2b60      	cmp	r3, #96	; 0x60
 800502e:	d877      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x16c>
 8005030:	2b50      	cmp	r3, #80	; 0x50
 8005032:	d03c      	beq.n	80050ae <HAL_TIM_ConfigClockSource+0xfa>
 8005034:	2b50      	cmp	r3, #80	; 0x50
 8005036:	d873      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x16c>
 8005038:	2b40      	cmp	r3, #64	; 0x40
 800503a:	d058      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x13a>
 800503c:	2b40      	cmp	r3, #64	; 0x40
 800503e:	d86f      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x16c>
 8005040:	2b30      	cmp	r3, #48	; 0x30
 8005042:	d064      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x15a>
 8005044:	2b30      	cmp	r3, #48	; 0x30
 8005046:	d86b      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x16c>
 8005048:	2b20      	cmp	r3, #32
 800504a:	d060      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x15a>
 800504c:	2b20      	cmp	r3, #32
 800504e:	d867      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x16c>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d05c      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x15a>
 8005054:	2b10      	cmp	r3, #16
 8005056:	d05a      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x15a>
 8005058:	e062      	b.n	8005120 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	6899      	ldr	r1, [r3, #8]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f000 fb5d 	bl	8005728 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800507c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	609a      	str	r2, [r3, #8]
      break;
 8005086:	e04f      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	6899      	ldr	r1, [r3, #8]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f000 fb46 	bl	8005728 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050aa:	609a      	str	r2, [r3, #8]
      break;
 80050ac:	e03c      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6818      	ldr	r0, [r3, #0]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6859      	ldr	r1, [r3, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	461a      	mov	r2, r3
 80050bc:	f000 faba 	bl	8005634 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2150      	movs	r1, #80	; 0x50
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fb13 	bl	80056f2 <TIM_ITRx_SetConfig>
      break;
 80050cc:	e02c      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6859      	ldr	r1, [r3, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	461a      	mov	r2, r3
 80050dc:	f000 fad9 	bl	8005692 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2160      	movs	r1, #96	; 0x60
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fb03 	bl	80056f2 <TIM_ITRx_SetConfig>
      break;
 80050ec:	e01c      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6859      	ldr	r1, [r3, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	461a      	mov	r2, r3
 80050fc:	f000 fa9a 	bl	8005634 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2140      	movs	r1, #64	; 0x40
 8005106:	4618      	mov	r0, r3
 8005108:	f000 faf3 	bl	80056f2 <TIM_ITRx_SetConfig>
      break;
 800510c:	e00c      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4619      	mov	r1, r3
 8005118:	4610      	mov	r0, r2
 800511a:	f000 faea 	bl	80056f2 <TIM_ITRx_SetConfig>
      break;
 800511e:	e003      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	73fb      	strb	r3, [r7, #15]
      break;
 8005124:	e000      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005126:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
	...

08005194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a40      	ldr	r2, [pc, #256]	; (80052a8 <TIM_Base_SetConfig+0x114>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <TIM_Base_SetConfig+0x40>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b2:	d00f      	beq.n	80051d4 <TIM_Base_SetConfig+0x40>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a3d      	ldr	r2, [pc, #244]	; (80052ac <TIM_Base_SetConfig+0x118>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d00b      	beq.n	80051d4 <TIM_Base_SetConfig+0x40>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a3c      	ldr	r2, [pc, #240]	; (80052b0 <TIM_Base_SetConfig+0x11c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d007      	beq.n	80051d4 <TIM_Base_SetConfig+0x40>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a3b      	ldr	r2, [pc, #236]	; (80052b4 <TIM_Base_SetConfig+0x120>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d003      	beq.n	80051d4 <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a3a      	ldr	r2, [pc, #232]	; (80052b8 <TIM_Base_SetConfig+0x124>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d108      	bne.n	80051e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a2f      	ldr	r2, [pc, #188]	; (80052a8 <TIM_Base_SetConfig+0x114>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d02b      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f4:	d027      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a2c      	ldr	r2, [pc, #176]	; (80052ac <TIM_Base_SetConfig+0x118>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d023      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a2b      	ldr	r2, [pc, #172]	; (80052b0 <TIM_Base_SetConfig+0x11c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d01f      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a2a      	ldr	r2, [pc, #168]	; (80052b4 <TIM_Base_SetConfig+0x120>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d01b      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a29      	ldr	r2, [pc, #164]	; (80052b8 <TIM_Base_SetConfig+0x124>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d017      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a28      	ldr	r2, [pc, #160]	; (80052bc <TIM_Base_SetConfig+0x128>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d013      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a27      	ldr	r2, [pc, #156]	; (80052c0 <TIM_Base_SetConfig+0x12c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00f      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a26      	ldr	r2, [pc, #152]	; (80052c4 <TIM_Base_SetConfig+0x130>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00b      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a25      	ldr	r2, [pc, #148]	; (80052c8 <TIM_Base_SetConfig+0x134>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d007      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a24      	ldr	r2, [pc, #144]	; (80052cc <TIM_Base_SetConfig+0x138>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d003      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a23      	ldr	r2, [pc, #140]	; (80052d0 <TIM_Base_SetConfig+0x13c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d108      	bne.n	8005258 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a0a      	ldr	r2, [pc, #40]	; (80052a8 <TIM_Base_SetConfig+0x114>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d003      	beq.n	800528c <TIM_Base_SetConfig+0xf8>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a0c      	ldr	r2, [pc, #48]	; (80052b8 <TIM_Base_SetConfig+0x124>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d103      	bne.n	8005294 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	615a      	str	r2, [r3, #20]
}
 800529a:	bf00      	nop
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40010000 	.word	0x40010000
 80052ac:	40000400 	.word	0x40000400
 80052b0:	40000800 	.word	0x40000800
 80052b4:	40000c00 	.word	0x40000c00
 80052b8:	40010400 	.word	0x40010400
 80052bc:	40014000 	.word	0x40014000
 80052c0:	40014400 	.word	0x40014400
 80052c4:	40014800 	.word	0x40014800
 80052c8:	40001800 	.word	0x40001800
 80052cc:	40001c00 	.word	0x40001c00
 80052d0:	40002000 	.word	0x40002000

080052d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f023 0201 	bic.w	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0303 	bic.w	r3, r3, #3
 800530a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f023 0302 	bic.w	r3, r3, #2
 800531c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a20      	ldr	r2, [pc, #128]	; (80053ac <TIM_OC1_SetConfig+0xd8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d003      	beq.n	8005338 <TIM_OC1_SetConfig+0x64>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a1f      	ldr	r2, [pc, #124]	; (80053b0 <TIM_OC1_SetConfig+0xdc>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d10c      	bne.n	8005352 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f023 0308 	bic.w	r3, r3, #8
 800533e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f023 0304 	bic.w	r3, r3, #4
 8005350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a15      	ldr	r2, [pc, #84]	; (80053ac <TIM_OC1_SetConfig+0xd8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d003      	beq.n	8005362 <TIM_OC1_SetConfig+0x8e>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a14      	ldr	r2, [pc, #80]	; (80053b0 <TIM_OC1_SetConfig+0xdc>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d111      	bne.n	8005386 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	4313      	orrs	r3, r2
 8005384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	621a      	str	r2, [r3, #32]
}
 80053a0:	bf00      	nop
 80053a2:	371c      	adds	r7, #28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	40010000 	.word	0x40010000
 80053b0:	40010400 	.word	0x40010400

080053b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	f023 0210 	bic.w	r2, r3, #16
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	021b      	lsls	r3, r3, #8
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f023 0320 	bic.w	r3, r3, #32
 80053fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a22      	ldr	r2, [pc, #136]	; (8005498 <TIM_OC2_SetConfig+0xe4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d003      	beq.n	800541c <TIM_OC2_SetConfig+0x68>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a21      	ldr	r2, [pc, #132]	; (800549c <TIM_OC2_SetConfig+0xe8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d10d      	bne.n	8005438 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005436:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a17      	ldr	r2, [pc, #92]	; (8005498 <TIM_OC2_SetConfig+0xe4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d003      	beq.n	8005448 <TIM_OC2_SetConfig+0x94>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a16      	ldr	r2, [pc, #88]	; (800549c <TIM_OC2_SetConfig+0xe8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d113      	bne.n	8005470 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800544e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005456:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	621a      	str	r2, [r3, #32]
}
 800548a:	bf00      	nop
 800548c:	371c      	adds	r7, #28
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40010000 	.word	0x40010000
 800549c:	40010400 	.word	0x40010400

080054a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0303 	bic.w	r3, r3, #3
 80054d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	021b      	lsls	r3, r3, #8
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a21      	ldr	r2, [pc, #132]	; (8005580 <TIM_OC3_SetConfig+0xe0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d003      	beq.n	8005506 <TIM_OC3_SetConfig+0x66>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a20      	ldr	r2, [pc, #128]	; (8005584 <TIM_OC3_SetConfig+0xe4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d10d      	bne.n	8005522 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800550c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a16      	ldr	r2, [pc, #88]	; (8005580 <TIM_OC3_SetConfig+0xe0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d003      	beq.n	8005532 <TIM_OC3_SetConfig+0x92>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a15      	ldr	r2, [pc, #84]	; (8005584 <TIM_OC3_SetConfig+0xe4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d113      	bne.n	800555a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	4313      	orrs	r3, r2
 800554c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	621a      	str	r2, [r3, #32]
}
 8005574:	bf00      	nop
 8005576:	371c      	adds	r7, #28
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	40010000 	.word	0x40010000
 8005584:	40010400 	.word	0x40010400

08005588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	031b      	lsls	r3, r3, #12
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4313      	orrs	r3, r2
 80055de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a12      	ldr	r2, [pc, #72]	; (800562c <TIM_OC4_SetConfig+0xa4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d003      	beq.n	80055f0 <TIM_OC4_SetConfig+0x68>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a11      	ldr	r2, [pc, #68]	; (8005630 <TIM_OC4_SetConfig+0xa8>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d109      	bne.n	8005604 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	019b      	lsls	r3, r3, #6
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4313      	orrs	r3, r2
 8005602:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	621a      	str	r2, [r3, #32]
}
 800561e:	bf00      	nop
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40010000 	.word	0x40010000
 8005630:	40010400 	.word	0x40010400

08005634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f023 0201 	bic.w	r2, r3, #1
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800565e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4313      	orrs	r3, r2
 8005668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f023 030a 	bic.w	r3, r3, #10
 8005670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4313      	orrs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	621a      	str	r2, [r3, #32]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005692:	b480      	push	{r7}
 8005694:	b087      	sub	sp, #28
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	f023 0210 	bic.w	r2, r3, #16
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	031b      	lsls	r3, r3, #12
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	621a      	str	r2, [r3, #32]
}
 80056e6:	bf00      	nop
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b085      	sub	sp, #20
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005708:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	f043 0307 	orr.w	r3, r3, #7
 8005714:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	609a      	str	r2, [r3, #8]
}
 800571c:	bf00      	nop
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005742:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	021a      	lsls	r2, r3, #8
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	431a      	orrs	r2, r3
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4313      	orrs	r3, r2
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	4313      	orrs	r3, r2
 8005754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	609a      	str	r2, [r3, #8]
}
 800575c:	bf00      	nop
 800575e:	371c      	adds	r7, #28
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f003 031f 	and.w	r3, r3, #31
 800577a:	2201      	movs	r2, #1
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1a      	ldr	r2, [r3, #32]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	43db      	mvns	r3, r3
 800578a:	401a      	ands	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a1a      	ldr	r2, [r3, #32]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f003 031f 	and.w	r3, r3, #31
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	fa01 f303 	lsl.w	r3, r1, r3
 80057a0:	431a      	orrs	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	621a      	str	r2, [r3, #32]
}
 80057a6:	bf00      	nop
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
	...

080057b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e05a      	b.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a21      	ldr	r2, [pc, #132]	; (8005890 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d022      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005818:	d01d      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1d      	ldr	r2, [pc, #116]	; (8005894 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d018      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a1b      	ldr	r2, [pc, #108]	; (8005898 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d013      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1a      	ldr	r2, [pc, #104]	; (800589c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00e      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a18      	ldr	r2, [pc, #96]	; (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d009      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a17      	ldr	r2, [pc, #92]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a15      	ldr	r2, [pc, #84]	; (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d10c      	bne.n	8005870 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800585c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	4313      	orrs	r3, r2
 8005866:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40010000 	.word	0x40010000
 8005894:	40000400 	.word	0x40000400
 8005898:	40000800 	.word	0x40000800
 800589c:	40000c00 	.word	0x40000c00
 80058a0:	40010400 	.word	0x40010400
 80058a4:	40014000 	.word	0x40014000
 80058a8:	40001800 	.word	0x40001800

080058ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e03d      	b.n	8005944 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e03f      	b.n	8005a0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d106      	bne.n	80059a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7fd fc96 	bl	80032d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2224      	movs	r2, #36	; 0x24
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fddb 	bl	8006578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695a      	ldr	r2, [r3, #20]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b08a      	sub	sp, #40	; 0x28
 8005a16:	af02      	add	r7, sp, #8
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	603b      	str	r3, [r7, #0]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b20      	cmp	r3, #32
 8005a30:	d17c      	bne.n	8005b2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <HAL_UART_Transmit+0x2c>
 8005a38:	88fb      	ldrh	r3, [r7, #6]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e075      	b.n	8005b2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d101      	bne.n	8005a50 <HAL_UART_Transmit+0x3e>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	e06e      	b.n	8005b2e <HAL_UART_Transmit+0x11c>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2221      	movs	r2, #33	; 0x21
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a66:	f7fd fce3 	bl	8003430 <HAL_GetTick>
 8005a6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	88fa      	ldrh	r2, [r7, #6]
 8005a70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	88fa      	ldrh	r2, [r7, #6]
 8005a76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a80:	d108      	bne.n	8005a94 <HAL_UART_Transmit+0x82>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	e003      	b.n	8005a9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005aa4:	e02a      	b.n	8005afc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2200      	movs	r2, #0
 8005aae:	2180      	movs	r1, #128	; 0x80
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f000 fb1f 	bl	80060f4 <UART_WaitOnFlagUntilTimeout>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e036      	b.n	8005b2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10b      	bne.n	8005ade <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ad4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	3302      	adds	r3, #2
 8005ada:	61bb      	str	r3, [r7, #24]
 8005adc:	e007      	b.n	8005aee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	781a      	ldrb	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	3301      	adds	r3, #1
 8005aec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1cf      	bne.n	8005aa6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2140      	movs	r1, #64	; 0x40
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 faef 	bl	80060f4 <UART_WaitOnFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e006      	b.n	8005b2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e000      	b.n	8005b2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b2c:	2302      	movs	r3, #2
  }
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3720      	adds	r7, #32
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	4613      	mov	r3, r2
 8005b42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d11d      	bne.n	8005b8c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <HAL_UART_Receive_IT+0x26>
 8005b56:	88fb      	ldrh	r3, [r7, #6]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e016      	b.n	8005b8e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d101      	bne.n	8005b6e <HAL_UART_Receive_IT+0x38>
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	e00f      	b.n	8005b8e <HAL_UART_Receive_IT+0x58>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b7c:	88fb      	ldrh	r3, [r7, #6]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	68b9      	ldr	r1, [r7, #8]
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 fb24 	bl	80061d0 <UART_Start_Receive_IT>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	e000      	b.n	8005b8e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b8c:	2302      	movs	r3, #2
  }
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b0ba      	sub	sp, #232	; 0xe8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10f      	bne.n	8005bfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d009      	beq.n	8005bfe <HAL_UART_IRQHandler+0x66>
 8005bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fc03 	bl	8006402 <UART_Receive_IT>
      return;
 8005bfc:	e256      	b.n	80060ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 80de 	beq.w	8005dc4 <HAL_UART_IRQHandler+0x22c>
 8005c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d106      	bne.n	8005c22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 80d1 	beq.w	8005dc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00b      	beq.n	8005c46 <HAL_UART_IRQHandler+0xae>
 8005c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d005      	beq.n	8005c46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	f043 0201 	orr.w	r2, r3, #1
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4a:	f003 0304 	and.w	r3, r3, #4
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00b      	beq.n	8005c6a <HAL_UART_IRQHandler+0xd2>
 8005c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	f043 0202 	orr.w	r2, r3, #2
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00b      	beq.n	8005c8e <HAL_UART_IRQHandler+0xf6>
 8005c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	f043 0204 	orr.w	r2, r3, #4
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c92:	f003 0308 	and.w	r3, r3, #8
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d011      	beq.n	8005cbe <HAL_UART_IRQHandler+0x126>
 8005c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d105      	bne.n	8005cb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d005      	beq.n	8005cbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	f043 0208 	orr.w	r2, r3, #8
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 81ed 	beq.w	80060a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d008      	beq.n	8005ce6 <HAL_UART_IRQHandler+0x14e>
 8005cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fb8e 	bl	8006402 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf0:	2b40      	cmp	r3, #64	; 0x40
 8005cf2:	bf0c      	ite	eq
 8005cf4:	2301      	moveq	r3, #1
 8005cf6:	2300      	movne	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <HAL_UART_IRQHandler+0x17a>
 8005d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d04f      	beq.n	8005db2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fa96 	bl	8006244 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b40      	cmp	r3, #64	; 0x40
 8005d24:	d141      	bne.n	8005daa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3314      	adds	r3, #20
 8005d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d34:	e853 3f00 	ldrex	r3, [r3]
 8005d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3314      	adds	r3, #20
 8005d4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1d9      	bne.n	8005d26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d013      	beq.n	8005da2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	4a7d      	ldr	r2, [pc, #500]	; (8005f74 <HAL_UART_IRQHandler+0x3dc>)
 8005d80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fd fcb0 	bl	80036ec <HAL_DMA_Abort_IT>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d016      	beq.n	8005dc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da0:	e00e      	b.n	8005dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f990 	bl	80060c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da8:	e00a      	b.n	8005dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f98c 	bl	80060c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db0:	e006      	b.n	8005dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f988 	bl	80060c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005dbe:	e170      	b.n	80060a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc0:	bf00      	nop
    return;
 8005dc2:	e16e      	b.n	80060a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	f040 814a 	bne.w	8006062 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd2:	f003 0310 	and.w	r3, r3, #16
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 8143 	beq.w	8006062 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de0:	f003 0310 	and.w	r3, r3, #16
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 813c 	beq.w	8006062 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dea:	2300      	movs	r3, #0
 8005dec:	60bb      	str	r3, [r7, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60bb      	str	r3, [r7, #8]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	60bb      	str	r3, [r7, #8]
 8005dfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0a:	2b40      	cmp	r3, #64	; 0x40
 8005e0c:	f040 80b4 	bne.w	8005f78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 8140 	beq.w	80060a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	f080 8139 	bcs.w	80060a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e46:	f000 8088 	beq.w	8005f5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	330c      	adds	r3, #12
 8005e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e58:	e853 3f00 	ldrex	r3, [r3]
 8005e5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	330c      	adds	r3, #12
 8005e72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1d9      	bne.n	8005e4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3314      	adds	r3, #20
 8005e9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ea8:	f023 0301 	bic.w	r3, r3, #1
 8005eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3314      	adds	r3, #20
 8005eb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005eba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e1      	bne.n	8005e96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3314      	adds	r3, #20
 8005ed8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005edc:	e853 3f00 	ldrex	r3, [r3]
 8005ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3314      	adds	r3, #20
 8005ef2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ef6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ef8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005efc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005efe:	e841 2300 	strex	r3, r2, [r1]
 8005f02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1e3      	bne.n	8005ed2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	330c      	adds	r3, #12
 8005f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f2a:	f023 0310 	bic.w	r3, r3, #16
 8005f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	330c      	adds	r3, #12
 8005f38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f44:	e841 2300 	strex	r3, r2, [r1]
 8005f48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e3      	bne.n	8005f18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fd fb59 	bl	800360c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	4619      	mov	r1, r3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f8b6 	bl	80060dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f70:	e099      	b.n	80060a6 <HAL_UART_IRQHandler+0x50e>
 8005f72:	bf00      	nop
 8005f74:	0800630b 	.word	0x0800630b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 808b 	beq.w	80060aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005f94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 8086 	beq.w	80060aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	330c      	adds	r3, #12
 8005fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005fc2:	647a      	str	r2, [r7, #68]	; 0x44
 8005fc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e3      	bne.n	8005f9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3314      	adds	r3, #20
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	623b      	str	r3, [r7, #32]
   return(result);
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	f023 0301 	bic.w	r3, r3, #1
 8005fec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3314      	adds	r3, #20
 8005ff6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ffa:	633a      	str	r2, [r7, #48]	; 0x30
 8005ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e3      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2220      	movs	r2, #32
 8006012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	330c      	adds	r3, #12
 8006022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	e853 3f00 	ldrex	r3, [r3]
 800602a:	60fb      	str	r3, [r7, #12]
   return(result);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0310 	bic.w	r3, r3, #16
 8006032:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	330c      	adds	r3, #12
 800603c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006040:	61fa      	str	r2, [r7, #28]
 8006042:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006044:	69b9      	ldr	r1, [r7, #24]
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	e841 2300 	strex	r3, r2, [r1]
 800604c:	617b      	str	r3, [r7, #20]
   return(result);
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1e3      	bne.n	800601c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f83e 	bl	80060dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006060:	e023      	b.n	80060aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606a:	2b00      	cmp	r3, #0
 800606c:	d009      	beq.n	8006082 <HAL_UART_IRQHandler+0x4ea>
 800606e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f959 	bl	8006332 <UART_Transmit_IT>
    return;
 8006080:	e014      	b.n	80060ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00e      	beq.n	80060ac <HAL_UART_IRQHandler+0x514>
 800608e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d008      	beq.n	80060ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f999 	bl	80063d2 <UART_EndTransmit_IT>
    return;
 80060a0:	e004      	b.n	80060ac <HAL_UART_IRQHandler+0x514>
    return;
 80060a2:	bf00      	nop
 80060a4:	e002      	b.n	80060ac <HAL_UART_IRQHandler+0x514>
      return;
 80060a6:	bf00      	nop
 80060a8:	e000      	b.n	80060ac <HAL_UART_IRQHandler+0x514>
      return;
 80060aa:	bf00      	nop
  }
}
 80060ac:	37e8      	adds	r7, #232	; 0xe8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop

080060b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b090      	sub	sp, #64	; 0x40
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	4613      	mov	r3, r2
 8006102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006104:	e050      	b.n	80061a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610c:	d04c      	beq.n	80061a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800610e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006110:	2b00      	cmp	r3, #0
 8006112:	d007      	beq.n	8006124 <UART_WaitOnFlagUntilTimeout+0x30>
 8006114:	f7fd f98c 	bl	8003430 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006120:	429a      	cmp	r2, r3
 8006122:	d241      	bcs.n	80061a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	330c      	adds	r3, #12
 800612a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612e:	e853 3f00 	ldrex	r3, [r3]
 8006132:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800613a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	330c      	adds	r3, #12
 8006142:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006144:	637a      	str	r2, [r7, #52]	; 0x34
 8006146:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006148:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800614a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800614c:	e841 2300 	strex	r3, r2, [r1]
 8006150:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e5      	bne.n	8006124 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3314      	adds	r3, #20
 800615e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	e853 3f00 	ldrex	r3, [r3]
 8006166:	613b      	str	r3, [r7, #16]
   return(result);
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f023 0301 	bic.w	r3, r3, #1
 800616e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3314      	adds	r3, #20
 8006176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006178:	623a      	str	r2, [r7, #32]
 800617a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617c:	69f9      	ldr	r1, [r7, #28]
 800617e:	6a3a      	ldr	r2, [r7, #32]
 8006180:	e841 2300 	strex	r3, r2, [r1]
 8006184:	61bb      	str	r3, [r7, #24]
   return(result);
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1e5      	bne.n	8006158 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e00f      	b.n	80061c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	4013      	ands	r3, r2
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	bf0c      	ite	eq
 80061b8:	2301      	moveq	r3, #1
 80061ba:	2300      	movne	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	461a      	mov	r2, r3
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d09f      	beq.n	8006106 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3740      	adds	r7, #64	; 0x40
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	4613      	mov	r3, r2
 80061dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	88fa      	ldrh	r2, [r7, #6]
 80061e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	88fa      	ldrh	r2, [r7, #6]
 80061ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2222      	movs	r2, #34	; 0x22
 80061fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006214:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	695a      	ldr	r2, [r3, #20]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0201 	orr.w	r2, r2, #1
 8006224:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0220 	orr.w	r2, r2, #32
 8006234:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006244:	b480      	push	{r7}
 8006246:	b095      	sub	sp, #84	; 0x54
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	330c      	adds	r3, #12
 8006252:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	330c      	adds	r3, #12
 800626a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800626c:	643a      	str	r2, [r7, #64]	; 0x40
 800626e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006270:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006272:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006274:	e841 2300 	strex	r3, r2, [r1]
 8006278:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1e5      	bne.n	800624c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3314      	adds	r3, #20
 8006286:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	f023 0301 	bic.w	r3, r3, #1
 8006296:	64bb      	str	r3, [r7, #72]	; 0x48
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3314      	adds	r3, #20
 800629e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062a8:	e841 2300 	strex	r3, r2, [r1]
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1e5      	bne.n	8006280 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d119      	bne.n	80062f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	330c      	adds	r3, #12
 80062c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	e853 3f00 	ldrex	r3, [r3]
 80062ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f023 0310 	bic.w	r3, r3, #16
 80062d2:	647b      	str	r3, [r7, #68]	; 0x44
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	330c      	adds	r3, #12
 80062da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062dc:	61ba      	str	r2, [r7, #24]
 80062de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	6979      	ldr	r1, [r7, #20]
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	e841 2300 	strex	r3, r2, [r1]
 80062e8:	613b      	str	r3, [r7, #16]
   return(result);
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e5      	bne.n	80062bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062fe:	bf00      	nop
 8006300:	3754      	adds	r7, #84	; 0x54
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b084      	sub	sp, #16
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f7ff fecf 	bl	80060c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800632a:	bf00      	nop
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006332:	b480      	push	{r7}
 8006334:	b085      	sub	sp, #20
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b21      	cmp	r3, #33	; 0x21
 8006344:	d13e      	bne.n	80063c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634e:	d114      	bne.n	800637a <UART_Transmit_IT+0x48>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d110      	bne.n	800637a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800636c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	1c9a      	adds	r2, r3, #2
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	621a      	str	r2, [r3, #32]
 8006378:	e008      	b.n	800638c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	1c59      	adds	r1, r3, #1
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6211      	str	r1, [r2, #32]
 8006384:	781a      	ldrb	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29b      	uxth	r3, r3
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	4619      	mov	r1, r3
 800639a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10f      	bne.n	80063c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	e000      	b.n	80063c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063c4:	2302      	movs	r3, #2
  }
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b082      	sub	sp, #8
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7ff fe5e 	bl	80060b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b08c      	sub	sp, #48	; 0x30
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b22      	cmp	r3, #34	; 0x22
 8006414:	f040 80ab 	bne.w	800656e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006420:	d117      	bne.n	8006452 <UART_Receive_IT+0x50>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d113      	bne.n	8006452 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800642a:	2300      	movs	r3, #0
 800642c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006432:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	b29b      	uxth	r3, r3
 800643c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006440:	b29a      	uxth	r2, r3
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006444:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	1c9a      	adds	r2, r3, #2
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	629a      	str	r2, [r3, #40]	; 0x28
 8006450:	e026      	b.n	80064a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006456:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006458:	2300      	movs	r3, #0
 800645a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006464:	d007      	beq.n	8006476 <UART_Receive_IT+0x74>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10a      	bne.n	8006484 <UART_Receive_IT+0x82>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d106      	bne.n	8006484 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	b2da      	uxtb	r2, r3
 800647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006480:	701a      	strb	r2, [r3, #0]
 8006482:	e008      	b.n	8006496 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	b2db      	uxtb	r3, r3
 800648c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006490:	b2da      	uxtb	r2, r3
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	4619      	mov	r1, r3
 80064ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d15a      	bne.n	800656a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0220 	bic.w	r2, r2, #32
 80064c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	695a      	ldr	r2, [r3, #20]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0201 	bic.w	r2, r2, #1
 80064e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d135      	bne.n	8006560 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	330c      	adds	r3, #12
 8006500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	613b      	str	r3, [r7, #16]
   return(result);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f023 0310 	bic.w	r3, r3, #16
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	330c      	adds	r3, #12
 8006518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651a:	623a      	str	r2, [r7, #32]
 800651c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	69f9      	ldr	r1, [r7, #28]
 8006520:	6a3a      	ldr	r2, [r7, #32]
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	61bb      	str	r3, [r7, #24]
   return(result);
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e5      	bne.n	80064fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b10      	cmp	r3, #16
 800653a:	d10a      	bne.n	8006552 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff fdbf 	bl	80060dc <HAL_UARTEx_RxEventCallback>
 800655e:	e002      	b.n	8006566 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7fc fa97 	bl	8002a94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	e002      	b.n	8006570 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	e000      	b.n	8006570 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800656e:	2302      	movs	r3, #2
  }
}
 8006570:	4618      	mov	r0, r3
 8006572:	3730      	adds	r7, #48	; 0x30
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	b09f      	sub	sp, #124	; 0x7c
 800657e:	af00      	add	r7, sp, #0
 8006580:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800658c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800658e:	68d9      	ldr	r1, [r3, #12]
 8006590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	ea40 0301 	orr.w	r3, r0, r1
 8006598:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800659a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	431a      	orrs	r2, r3
 80065a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	431a      	orrs	r2, r3
 80065aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80065b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065bc:	f021 010c 	bic.w	r1, r1, #12
 80065c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065c6:	430b      	orrs	r3, r1
 80065c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d6:	6999      	ldr	r1, [r3, #24]
 80065d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	ea40 0301 	orr.w	r3, r0, r1
 80065e0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	4bc5      	ldr	r3, [pc, #788]	; (80068fc <UART_SetConfig+0x384>)
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d004      	beq.n	80065f6 <UART_SetConfig+0x7e>
 80065ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	4bc3      	ldr	r3, [pc, #780]	; (8006900 <UART_SetConfig+0x388>)
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d103      	bne.n	80065fe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065f6:	f7fd fb67 	bl	8003cc8 <HAL_RCC_GetPCLK2Freq>
 80065fa:	6778      	str	r0, [r7, #116]	; 0x74
 80065fc:	e002      	b.n	8006604 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065fe:	f7fd fb4f 	bl	8003ca0 <HAL_RCC_GetPCLK1Freq>
 8006602:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800660c:	f040 80b6 	bne.w	800677c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006610:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006612:	461c      	mov	r4, r3
 8006614:	f04f 0500 	mov.w	r5, #0
 8006618:	4622      	mov	r2, r4
 800661a:	462b      	mov	r3, r5
 800661c:	1891      	adds	r1, r2, r2
 800661e:	6439      	str	r1, [r7, #64]	; 0x40
 8006620:	415b      	adcs	r3, r3
 8006622:	647b      	str	r3, [r7, #68]	; 0x44
 8006624:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006628:	1912      	adds	r2, r2, r4
 800662a:	eb45 0303 	adc.w	r3, r5, r3
 800662e:	f04f 0000 	mov.w	r0, #0
 8006632:	f04f 0100 	mov.w	r1, #0
 8006636:	00d9      	lsls	r1, r3, #3
 8006638:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800663c:	00d0      	lsls	r0, r2, #3
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	1911      	adds	r1, r2, r4
 8006644:	6639      	str	r1, [r7, #96]	; 0x60
 8006646:	416b      	adcs	r3, r5
 8006648:	667b      	str	r3, [r7, #100]	; 0x64
 800664a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	461a      	mov	r2, r3
 8006650:	f04f 0300 	mov.w	r3, #0
 8006654:	1891      	adds	r1, r2, r2
 8006656:	63b9      	str	r1, [r7, #56]	; 0x38
 8006658:	415b      	adcs	r3, r3
 800665a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800665c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006660:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006664:	f7fa fb40 	bl	8000ce8 <__aeabi_uldivmod>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4ba5      	ldr	r3, [pc, #660]	; (8006904 <UART_SetConfig+0x38c>)
 800666e:	fba3 2302 	umull	r2, r3, r3, r2
 8006672:	095b      	lsrs	r3, r3, #5
 8006674:	011e      	lsls	r6, r3, #4
 8006676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006678:	461c      	mov	r4, r3
 800667a:	f04f 0500 	mov.w	r5, #0
 800667e:	4622      	mov	r2, r4
 8006680:	462b      	mov	r3, r5
 8006682:	1891      	adds	r1, r2, r2
 8006684:	6339      	str	r1, [r7, #48]	; 0x30
 8006686:	415b      	adcs	r3, r3
 8006688:	637b      	str	r3, [r7, #52]	; 0x34
 800668a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800668e:	1912      	adds	r2, r2, r4
 8006690:	eb45 0303 	adc.w	r3, r5, r3
 8006694:	f04f 0000 	mov.w	r0, #0
 8006698:	f04f 0100 	mov.w	r1, #0
 800669c:	00d9      	lsls	r1, r3, #3
 800669e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066a2:	00d0      	lsls	r0, r2, #3
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	1911      	adds	r1, r2, r4
 80066aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80066ac:	416b      	adcs	r3, r5
 80066ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	461a      	mov	r2, r3
 80066b6:	f04f 0300 	mov.w	r3, #0
 80066ba:	1891      	adds	r1, r2, r2
 80066bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80066be:	415b      	adcs	r3, r3
 80066c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80066ca:	f7fa fb0d 	bl	8000ce8 <__aeabi_uldivmod>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4b8c      	ldr	r3, [pc, #560]	; (8006904 <UART_SetConfig+0x38c>)
 80066d4:	fba3 1302 	umull	r1, r3, r3, r2
 80066d8:	095b      	lsrs	r3, r3, #5
 80066da:	2164      	movs	r1, #100	; 0x64
 80066dc:	fb01 f303 	mul.w	r3, r1, r3
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	3332      	adds	r3, #50	; 0x32
 80066e6:	4a87      	ldr	r2, [pc, #540]	; (8006904 <UART_SetConfig+0x38c>)
 80066e8:	fba2 2303 	umull	r2, r3, r2, r3
 80066ec:	095b      	lsrs	r3, r3, #5
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066f4:	441e      	add	r6, r3
 80066f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066f8:	4618      	mov	r0, r3
 80066fa:	f04f 0100 	mov.w	r1, #0
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	1894      	adds	r4, r2, r2
 8006704:	623c      	str	r4, [r7, #32]
 8006706:	415b      	adcs	r3, r3
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
 800670a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800670e:	1812      	adds	r2, r2, r0
 8006710:	eb41 0303 	adc.w	r3, r1, r3
 8006714:	f04f 0400 	mov.w	r4, #0
 8006718:	f04f 0500 	mov.w	r5, #0
 800671c:	00dd      	lsls	r5, r3, #3
 800671e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006722:	00d4      	lsls	r4, r2, #3
 8006724:	4622      	mov	r2, r4
 8006726:	462b      	mov	r3, r5
 8006728:	1814      	adds	r4, r2, r0
 800672a:	653c      	str	r4, [r7, #80]	; 0x50
 800672c:	414b      	adcs	r3, r1
 800672e:	657b      	str	r3, [r7, #84]	; 0x54
 8006730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	461a      	mov	r2, r3
 8006736:	f04f 0300 	mov.w	r3, #0
 800673a:	1891      	adds	r1, r2, r2
 800673c:	61b9      	str	r1, [r7, #24]
 800673e:	415b      	adcs	r3, r3
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006746:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800674a:	f7fa facd 	bl	8000ce8 <__aeabi_uldivmod>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	4b6c      	ldr	r3, [pc, #432]	; (8006904 <UART_SetConfig+0x38c>)
 8006754:	fba3 1302 	umull	r1, r3, r3, r2
 8006758:	095b      	lsrs	r3, r3, #5
 800675a:	2164      	movs	r1, #100	; 0x64
 800675c:	fb01 f303 	mul.w	r3, r1, r3
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	3332      	adds	r3, #50	; 0x32
 8006766:	4a67      	ldr	r2, [pc, #412]	; (8006904 <UART_SetConfig+0x38c>)
 8006768:	fba2 2303 	umull	r2, r3, r2, r3
 800676c:	095b      	lsrs	r3, r3, #5
 800676e:	f003 0207 	and.w	r2, r3, #7
 8006772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4432      	add	r2, r6
 8006778:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800677a:	e0b9      	b.n	80068f0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800677c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800677e:	461c      	mov	r4, r3
 8006780:	f04f 0500 	mov.w	r5, #0
 8006784:	4622      	mov	r2, r4
 8006786:	462b      	mov	r3, r5
 8006788:	1891      	adds	r1, r2, r2
 800678a:	6139      	str	r1, [r7, #16]
 800678c:	415b      	adcs	r3, r3
 800678e:	617b      	str	r3, [r7, #20]
 8006790:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006794:	1912      	adds	r2, r2, r4
 8006796:	eb45 0303 	adc.w	r3, r5, r3
 800679a:	f04f 0000 	mov.w	r0, #0
 800679e:	f04f 0100 	mov.w	r1, #0
 80067a2:	00d9      	lsls	r1, r3, #3
 80067a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067a8:	00d0      	lsls	r0, r2, #3
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	eb12 0804 	adds.w	r8, r2, r4
 80067b2:	eb43 0905 	adc.w	r9, r3, r5
 80067b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f04f 0100 	mov.w	r1, #0
 80067c0:	f04f 0200 	mov.w	r2, #0
 80067c4:	f04f 0300 	mov.w	r3, #0
 80067c8:	008b      	lsls	r3, r1, #2
 80067ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80067ce:	0082      	lsls	r2, r0, #2
 80067d0:	4640      	mov	r0, r8
 80067d2:	4649      	mov	r1, r9
 80067d4:	f7fa fa88 	bl	8000ce8 <__aeabi_uldivmod>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4b49      	ldr	r3, [pc, #292]	; (8006904 <UART_SetConfig+0x38c>)
 80067de:	fba3 2302 	umull	r2, r3, r3, r2
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	011e      	lsls	r6, r3, #4
 80067e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067e8:	4618      	mov	r0, r3
 80067ea:	f04f 0100 	mov.w	r1, #0
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	1894      	adds	r4, r2, r2
 80067f4:	60bc      	str	r4, [r7, #8]
 80067f6:	415b      	adcs	r3, r3
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067fe:	1812      	adds	r2, r2, r0
 8006800:	eb41 0303 	adc.w	r3, r1, r3
 8006804:	f04f 0400 	mov.w	r4, #0
 8006808:	f04f 0500 	mov.w	r5, #0
 800680c:	00dd      	lsls	r5, r3, #3
 800680e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006812:	00d4      	lsls	r4, r2, #3
 8006814:	4622      	mov	r2, r4
 8006816:	462b      	mov	r3, r5
 8006818:	1814      	adds	r4, r2, r0
 800681a:	64bc      	str	r4, [r7, #72]	; 0x48
 800681c:	414b      	adcs	r3, r1
 800681e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	4618      	mov	r0, r3
 8006826:	f04f 0100 	mov.w	r1, #0
 800682a:	f04f 0200 	mov.w	r2, #0
 800682e:	f04f 0300 	mov.w	r3, #0
 8006832:	008b      	lsls	r3, r1, #2
 8006834:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006838:	0082      	lsls	r2, r0, #2
 800683a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800683e:	f7fa fa53 	bl	8000ce8 <__aeabi_uldivmod>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4b2f      	ldr	r3, [pc, #188]	; (8006904 <UART_SetConfig+0x38c>)
 8006848:	fba3 1302 	umull	r1, r3, r3, r2
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	2164      	movs	r1, #100	; 0x64
 8006850:	fb01 f303 	mul.w	r3, r1, r3
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	3332      	adds	r3, #50	; 0x32
 800685a:	4a2a      	ldr	r2, [pc, #168]	; (8006904 <UART_SetConfig+0x38c>)
 800685c:	fba2 2303 	umull	r2, r3, r2, r3
 8006860:	095b      	lsrs	r3, r3, #5
 8006862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006866:	441e      	add	r6, r3
 8006868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800686a:	4618      	mov	r0, r3
 800686c:	f04f 0100 	mov.w	r1, #0
 8006870:	4602      	mov	r2, r0
 8006872:	460b      	mov	r3, r1
 8006874:	1894      	adds	r4, r2, r2
 8006876:	603c      	str	r4, [r7, #0]
 8006878:	415b      	adcs	r3, r3
 800687a:	607b      	str	r3, [r7, #4]
 800687c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006880:	1812      	adds	r2, r2, r0
 8006882:	eb41 0303 	adc.w	r3, r1, r3
 8006886:	f04f 0400 	mov.w	r4, #0
 800688a:	f04f 0500 	mov.w	r5, #0
 800688e:	00dd      	lsls	r5, r3, #3
 8006890:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006894:	00d4      	lsls	r4, r2, #3
 8006896:	4622      	mov	r2, r4
 8006898:	462b      	mov	r3, r5
 800689a:	eb12 0a00 	adds.w	sl, r2, r0
 800689e:	eb43 0b01 	adc.w	fp, r3, r1
 80068a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f04f 0100 	mov.w	r1, #0
 80068ac:	f04f 0200 	mov.w	r2, #0
 80068b0:	f04f 0300 	mov.w	r3, #0
 80068b4:	008b      	lsls	r3, r1, #2
 80068b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068ba:	0082      	lsls	r2, r0, #2
 80068bc:	4650      	mov	r0, sl
 80068be:	4659      	mov	r1, fp
 80068c0:	f7fa fa12 	bl	8000ce8 <__aeabi_uldivmod>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4b0e      	ldr	r3, [pc, #56]	; (8006904 <UART_SetConfig+0x38c>)
 80068ca:	fba3 1302 	umull	r1, r3, r3, r2
 80068ce:	095b      	lsrs	r3, r3, #5
 80068d0:	2164      	movs	r1, #100	; 0x64
 80068d2:	fb01 f303 	mul.w	r3, r1, r3
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	011b      	lsls	r3, r3, #4
 80068da:	3332      	adds	r3, #50	; 0x32
 80068dc:	4a09      	ldr	r2, [pc, #36]	; (8006904 <UART_SetConfig+0x38c>)
 80068de:	fba2 2303 	umull	r2, r3, r2, r3
 80068e2:	095b      	lsrs	r3, r3, #5
 80068e4:	f003 020f 	and.w	r2, r3, #15
 80068e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4432      	add	r2, r6
 80068ee:	609a      	str	r2, [r3, #8]
}
 80068f0:	bf00      	nop
 80068f2:	377c      	adds	r7, #124	; 0x7c
 80068f4:	46bd      	mov	sp, r7
 80068f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fa:	bf00      	nop
 80068fc:	40011000 	.word	0x40011000
 8006900:	40011400 	.word	0x40011400
 8006904:	51eb851f 	.word	0x51eb851f

08006908 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800691a:	2b84      	cmp	r3, #132	; 0x84
 800691c:	d005      	beq.n	800692a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800691e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	3303      	adds	r3, #3
 8006928:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800692a:	68fb      	ldr	r3, [r7, #12]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800693c:	f000 fe2a 	bl	8007594 <vTaskStartScheduler>
  
  return osOK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	bd80      	pop	{r7, pc}

08006946 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006946:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006948:	b089      	sub	sp, #36	; 0x24
 800694a:	af04      	add	r7, sp, #16
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d020      	beq.n	800699a <osThreadCreate+0x54>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d01c      	beq.n	800699a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685c      	ldr	r4, [r3, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681d      	ldr	r5, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691e      	ldr	r6, [r3, #16]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff ffc8 	bl	8006908 <makeFreeRtosPriority>
 8006978:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006982:	9202      	str	r2, [sp, #8]
 8006984:	9301      	str	r3, [sp, #4]
 8006986:	9100      	str	r1, [sp, #0]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	4632      	mov	r2, r6
 800698c:	4629      	mov	r1, r5
 800698e:	4620      	mov	r0, r4
 8006990:	f000 fc22 	bl	80071d8 <xTaskCreateStatic>
 8006994:	4603      	mov	r3, r0
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	e01c      	b.n	80069d4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685c      	ldr	r4, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069a6:	b29e      	uxth	r6, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7ff ffaa 	bl	8006908 <makeFreeRtosPriority>
 80069b4:	4602      	mov	r2, r0
 80069b6:	f107 030c 	add.w	r3, r7, #12
 80069ba:	9301      	str	r3, [sp, #4]
 80069bc:	9200      	str	r2, [sp, #0]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	4632      	mov	r2, r6
 80069c2:	4629      	mov	r1, r5
 80069c4:	4620      	mov	r0, r4
 80069c6:	f000 fc64 	bl	8007292 <xTaskCreate>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d001      	beq.n	80069d4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	e000      	b.n	80069d6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80069d4:	68fb      	ldr	r3, [r7, #12]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080069de <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <osDelay+0x16>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	e000      	b.n	80069f6 <osDelay+0x18>
 80069f4:	2301      	movs	r3, #1
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fd98 	bl	800752c <vTaskDelay>
  
  return osOK;
 80069fc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f103 0208 	add.w	r2, r3, #8
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a1e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f103 0208 	add.w	r2, r3, #8
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f103 0208 	add.w	r2, r3, #8
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a3a:	bf00      	nop
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	601a      	str	r2, [r3, #0]
}
 8006a9c:	bf00      	nop
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abe:	d103      	bne.n	8006ac8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	e00c      	b.n	8006ae2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3308      	adds	r3, #8
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	e002      	b.n	8006ad6 <vListInsert+0x2e>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d2f6      	bcs.n	8006ad0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	601a      	str	r2, [r3, #0]
}
 8006b0e:	bf00      	nop
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b085      	sub	sp, #20
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6892      	ldr	r2, [r2, #8]
 8006b30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6852      	ldr	r2, [r2, #4]
 8006b3a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d103      	bne.n	8006b4e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689a      	ldr	r2, [r3, #8]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	1e5a      	subs	r2, r3, #1
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
	...

08006b70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10a      	bne.n	8006b9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b96:	bf00      	nop
 8006b98:	e7fe      	b.n	8006b98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b9a:	f001 fb43 	bl	8008224 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba6:	68f9      	ldr	r1, [r7, #12]
 8006ba8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006baa:	fb01 f303 	mul.w	r3, r1, r3
 8006bae:	441a      	add	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	68f9      	ldr	r1, [r7, #12]
 8006bce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006bd0:	fb01 f303 	mul.w	r3, r1, r3
 8006bd4:	441a      	add	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	22ff      	movs	r2, #255	; 0xff
 8006bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	22ff      	movs	r2, #255	; 0xff
 8006be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d114      	bne.n	8006c1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01a      	beq.n	8006c2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3310      	adds	r3, #16
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 ff1b 	bl	8007a38 <xTaskRemoveFromEventList>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d012      	beq.n	8006c2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c08:	4b0c      	ldr	r3, [pc, #48]	; (8006c3c <xQueueGenericReset+0xcc>)
 8006c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	e009      	b.n	8006c2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3310      	adds	r3, #16
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff fef1 	bl	8006a06 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3324      	adds	r3, #36	; 0x24
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff feec 	bl	8006a06 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c2e:	f001 fb29 	bl	8008284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c32:	2301      	movs	r3, #1
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	e000ed04 	.word	0xe000ed04

08006c40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08a      	sub	sp, #40	; 0x28
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	613b      	str	r3, [r7, #16]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	fb02 f303 	mul.w	r3, r2, r3
 8006c72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	3348      	adds	r3, #72	; 0x48
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f001 fbf5 	bl	8008468 <pvPortMalloc>
 8006c7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d011      	beq.n	8006caa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	3348      	adds	r3, #72	; 0x48
 8006c8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c98:	79fa      	ldrb	r2, [r7, #7]
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	68b9      	ldr	r1, [r7, #8]
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 f805 	bl	8006cb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006caa:	69bb      	ldr	r3, [r7, #24]
	}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3720      	adds	r7, #32
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d103      	bne.n	8006cd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	e002      	b.n	8006cd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	69b8      	ldr	r0, [r7, #24]
 8006ce6:	f7ff ff43 	bl	8006b70 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006cea:	bf00      	nop
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b090      	sub	sp, #64	; 0x40
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	607a      	str	r2, [r7, #4]
 8006cfe:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10a      	bne.n	8006d20 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d1c:	bf00      	nop
 8006d1e:	e7fe      	b.n	8006d1e <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d103      	bne.n	8006d2e <xQueueGenericSendFromISR+0x3c>
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <xQueueGenericSendFromISR+0x40>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <xQueueGenericSendFromISR+0x42>
 8006d32:	2300      	movs	r3, #0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10a      	bne.n	8006d4e <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d4a:	bf00      	nop
 8006d4c:	e7fe      	b.n	8006d4c <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d103      	bne.n	8006d5c <xQueueGenericSendFromISR+0x6a>
 8006d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d101      	bne.n	8006d60 <xQueueGenericSendFromISR+0x6e>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e000      	b.n	8006d62 <xQueueGenericSendFromISR+0x70>
 8006d60:	2300      	movs	r3, #0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10a      	bne.n	8006d7c <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	623b      	str	r3, [r7, #32]
}
 8006d78:	bf00      	nop
 8006d7a:	e7fe      	b.n	8006d7a <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d7c:	f001 fb34 	bl	80083e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d80:	f3ef 8211 	mrs	r2, BASEPRI
 8006d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	61fa      	str	r2, [r7, #28]
 8006d96:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d98:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d9a:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d302      	bcc.n	8006dae <xQueueGenericSendFromISR+0xbc>
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d12f      	bne.n	8006e0e <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006db4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	68b9      	ldr	r1, [r7, #8]
 8006dc2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006dc4:	f000 f910 	bl	8006fe8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006dc8:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd0:	d112      	bne.n	8006df8 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d016      	beq.n	8006e08 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ddc:	3324      	adds	r3, #36	; 0x24
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fe2a 	bl	8007a38 <xTaskRemoveFromEventList>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00e      	beq.n	8006e08 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00b      	beq.n	8006e08 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	e007      	b.n	8006e08 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006df8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	b25a      	sxtb	r2, r3
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006e0c:	e001      	b.n	8006e12 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e14:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3740      	adds	r7, #64	; 0x40
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08c      	sub	sp, #48	; 0x30
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e34:	2300      	movs	r3, #0
 8006e36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10a      	bne.n	8006e58 <xQueueReceive+0x30>
	__asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	623b      	str	r3, [r7, #32]
}
 8006e54:	bf00      	nop
 8006e56:	e7fe      	b.n	8006e56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d103      	bne.n	8006e66 <xQueueReceive+0x3e>
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <xQueueReceive+0x42>
 8006e66:	2301      	movs	r3, #1
 8006e68:	e000      	b.n	8006e6c <xQueueReceive+0x44>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10a      	bne.n	8006e86 <xQueueReceive+0x5e>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	61fb      	str	r3, [r7, #28]
}
 8006e82:	bf00      	nop
 8006e84:	e7fe      	b.n	8006e84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e86:	f000 ff97 	bl	8007db8 <xTaskGetSchedulerState>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <xQueueReceive+0x6e>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <xQueueReceive+0x72>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e000      	b.n	8006e9c <xQueueReceive+0x74>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <xQueueReceive+0x8e>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	61bb      	str	r3, [r7, #24]
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006eb6:	f001 f9b5 	bl	8008224 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d01f      	beq.n	8006f06 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ec6:	68b9      	ldr	r1, [r7, #8]
 8006ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eca:	f000 f8f7 	bl	80070bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	1e5a      	subs	r2, r3, #1
 8006ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00f      	beq.n	8006efe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee0:	3310      	adds	r3, #16
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 fda8 	bl	8007a38 <xTaskRemoveFromEventList>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d007      	beq.n	8006efe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006eee:	4b3d      	ldr	r3, [pc, #244]	; (8006fe4 <xQueueReceive+0x1bc>)
 8006ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006efe:	f001 f9c1 	bl	8008284 <vPortExitCritical>
				return pdPASS;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e069      	b.n	8006fda <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d103      	bne.n	8006f14 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f0c:	f001 f9ba 	bl	8008284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f10:	2300      	movs	r3, #0
 8006f12:	e062      	b.n	8006fda <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d106      	bne.n	8006f28 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f1a:	f107 0310 	add.w	r3, r7, #16
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 fdec 	bl	8007afc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f24:	2301      	movs	r3, #1
 8006f26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f28:	f001 f9ac 	bl	8008284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f2c:	f000 fb9c 	bl	8007668 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f30:	f001 f978 	bl	8008224 <vPortEnterCritical>
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f3a:	b25b      	sxtb	r3, r3
 8006f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f40:	d103      	bne.n	8006f4a <xQueueReceive+0x122>
 8006f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f50:	b25b      	sxtb	r3, r3
 8006f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f56:	d103      	bne.n	8006f60 <xQueueReceive+0x138>
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f60:	f001 f990 	bl	8008284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f64:	1d3a      	adds	r2, r7, #4
 8006f66:	f107 0310 	add.w	r3, r7, #16
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 fddb 	bl	8007b28 <xTaskCheckForTimeOut>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d123      	bne.n	8006fc0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f7a:	f000 f917 	bl	80071ac <prvIsQueueEmpty>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d017      	beq.n	8006fb4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f86:	3324      	adds	r3, #36	; 0x24
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fd2f 	bl	80079f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f94:	f000 f8b8 	bl	8007108 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f98:	f000 fb74 	bl	8007684 <xTaskResumeAll>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d189      	bne.n	8006eb6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006fa2:	4b10      	ldr	r3, [pc, #64]	; (8006fe4 <xQueueReceive+0x1bc>)
 8006fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	e780      	b.n	8006eb6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fb6:	f000 f8a7 	bl	8007108 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fba:	f000 fb63 	bl	8007684 <xTaskResumeAll>
 8006fbe:	e77a      	b.n	8006eb6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fc2:	f000 f8a1 	bl	8007108 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fc6:	f000 fb5d 	bl	8007684 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fcc:	f000 f8ee 	bl	80071ac <prvIsQueueEmpty>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f43f af6f 	beq.w	8006eb6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3730      	adds	r7, #48	; 0x30
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	e000ed04 	.word	0xe000ed04

08006fe8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10d      	bne.n	8007022 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d14d      	bne.n	80070aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	4618      	mov	r0, r3
 8007014:	f000 feee 	bl	8007df4 <xTaskPriorityDisinherit>
 8007018:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	609a      	str	r2, [r3, #8]
 8007020:	e043      	b.n	80070aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d119      	bne.n	800705c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6858      	ldr	r0, [r3, #4]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007030:	461a      	mov	r2, r3
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	f001 fd2d 	bl	8008a92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	441a      	add	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	429a      	cmp	r2, r3
 8007050:	d32b      	bcc.n	80070aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	605a      	str	r2, [r3, #4]
 800705a:	e026      	b.n	80070aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	68d8      	ldr	r0, [r3, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007064:	461a      	mov	r2, r3
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	f001 fd13 	bl	8008a92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007074:	425b      	negs	r3, r3
 8007076:	441a      	add	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d207      	bcs.n	8007098 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	689a      	ldr	r2, [r3, #8]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	425b      	negs	r3, r3
 8007092:	441a      	add	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b02      	cmp	r3, #2
 800709c:	d105      	bne.n	80070aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80070b2:	697b      	ldr	r3, [r7, #20]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d018      	beq.n	8007100 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	441a      	add	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d303      	bcc.n	80070f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68d9      	ldr	r1, [r3, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	461a      	mov	r2, r3
 80070fa:	6838      	ldr	r0, [r7, #0]
 80070fc:	f001 fcc9 	bl	8008a92 <memcpy>
	}
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007110:	f001 f888 	bl	8008224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800711a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800711c:	e011      	b.n	8007142 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	2b00      	cmp	r3, #0
 8007124:	d012      	beq.n	800714c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3324      	adds	r3, #36	; 0x24
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fc84 	bl	8007a38 <xTaskRemoveFromEventList>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007136:	f000 fd59 	bl	8007bec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	3b01      	subs	r3, #1
 800713e:	b2db      	uxtb	r3, r3
 8007140:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007146:	2b00      	cmp	r3, #0
 8007148:	dce9      	bgt.n	800711e <prvUnlockQueue+0x16>
 800714a:	e000      	b.n	800714e <prvUnlockQueue+0x46>
					break;
 800714c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	22ff      	movs	r2, #255	; 0xff
 8007152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007156:	f001 f895 	bl	8008284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800715a:	f001 f863 	bl	8008224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007164:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007166:	e011      	b.n	800718c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d012      	beq.n	8007196 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3310      	adds	r3, #16
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fc5f 	bl	8007a38 <xTaskRemoveFromEventList>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007180:	f000 fd34 	bl	8007bec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	3b01      	subs	r3, #1
 8007188:	b2db      	uxtb	r3, r3
 800718a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800718c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007190:	2b00      	cmp	r3, #0
 8007192:	dce9      	bgt.n	8007168 <prvUnlockQueue+0x60>
 8007194:	e000      	b.n	8007198 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007196:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	22ff      	movs	r2, #255	; 0xff
 800719c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80071a0:	f001 f870 	bl	8008284 <vPortExitCritical>
}
 80071a4:	bf00      	nop
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071b4:	f001 f836 	bl	8008224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d102      	bne.n	80071c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071c0:	2301      	movs	r3, #1
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	e001      	b.n	80071ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071ca:	f001 f85b 	bl	8008284 <vPortExitCritical>

	return xReturn;
 80071ce:	68fb      	ldr	r3, [r7, #12]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08e      	sub	sp, #56	; 0x38
 80071dc:	af04      	add	r7, sp, #16
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10a      	bne.n	8007202 <xTaskCreateStatic+0x2a>
	__asm volatile
 80071ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	623b      	str	r3, [r7, #32]
}
 80071fe:	bf00      	nop
 8007200:	e7fe      	b.n	8007200 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10a      	bne.n	800721e <xTaskCreateStatic+0x46>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	61fb      	str	r3, [r7, #28]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800721e:	23b4      	movs	r3, #180	; 0xb4
 8007220:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	2bb4      	cmp	r3, #180	; 0xb4
 8007226:	d00a      	beq.n	800723e <xTaskCreateStatic+0x66>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	61bb      	str	r3, [r7, #24]
}
 800723a:	bf00      	nop
 800723c:	e7fe      	b.n	800723c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800723e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007242:	2b00      	cmp	r3, #0
 8007244:	d01e      	beq.n	8007284 <xTaskCreateStatic+0xac>
 8007246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01b      	beq.n	8007284 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800724c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007254:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	2202      	movs	r2, #2
 800725a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800725e:	2300      	movs	r3, #0
 8007260:	9303      	str	r3, [sp, #12]
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	9302      	str	r3, [sp, #8]
 8007266:	f107 0314 	add.w	r3, r7, #20
 800726a:	9301      	str	r3, [sp, #4]
 800726c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	68b9      	ldr	r1, [r7, #8]
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 f850 	bl	800731c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800727c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800727e:	f000 f8eb 	bl	8007458 <prvAddNewTaskToReadyList>
 8007282:	e001      	b.n	8007288 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007284:	2300      	movs	r3, #0
 8007286:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007288:	697b      	ldr	r3, [r7, #20]
	}
 800728a:	4618      	mov	r0, r3
 800728c:	3728      	adds	r7, #40	; 0x28
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007292:	b580      	push	{r7, lr}
 8007294:	b08c      	sub	sp, #48	; 0x30
 8007296:	af04      	add	r7, sp, #16
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	60b9      	str	r1, [r7, #8]
 800729c:	603b      	str	r3, [r7, #0]
 800729e:	4613      	mov	r3, r2
 80072a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072a2:	88fb      	ldrh	r3, [r7, #6]
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4618      	mov	r0, r3
 80072a8:	f001 f8de 	bl	8008468 <pvPortMalloc>
 80072ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00e      	beq.n	80072d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072b4:	20b4      	movs	r0, #180	; 0xb4
 80072b6:	f001 f8d7 	bl	8008468 <pvPortMalloc>
 80072ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	631a      	str	r2, [r3, #48]	; 0x30
 80072c8:	e005      	b.n	80072d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072ca:	6978      	ldr	r0, [r7, #20]
 80072cc:	f001 f998 	bl	8008600 <vPortFree>
 80072d0:	e001      	b.n	80072d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d017      	beq.n	800730c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072e4:	88fa      	ldrh	r2, [r7, #6]
 80072e6:	2300      	movs	r3, #0
 80072e8:	9303      	str	r3, [sp, #12]
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	9302      	str	r3, [sp, #8]
 80072ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f0:	9301      	str	r3, [sp, #4]
 80072f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68b9      	ldr	r1, [r7, #8]
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 f80e 	bl	800731c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007300:	69f8      	ldr	r0, [r7, #28]
 8007302:	f000 f8a9 	bl	8007458 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007306:	2301      	movs	r3, #1
 8007308:	61bb      	str	r3, [r7, #24]
 800730a:	e002      	b.n	8007312 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800730c:	f04f 33ff 	mov.w	r3, #4294967295
 8007310:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007312:	69bb      	ldr	r3, [r7, #24]
	}
 8007314:	4618      	mov	r0, r3
 8007316:	3720      	adds	r7, #32
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b088      	sub	sp, #32
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
 8007328:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007334:	3b01      	subs	r3, #1
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	f023 0307 	bic.w	r3, r3, #7
 8007342:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	f003 0307 	and.w	r3, r3, #7
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <prvInitialiseNewTask+0x48>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	617b      	str	r3, [r7, #20]
}
 8007360:	bf00      	nop
 8007362:	e7fe      	b.n	8007362 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d01f      	beq.n	80073aa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800736a:	2300      	movs	r3, #0
 800736c:	61fb      	str	r3, [r7, #28]
 800736e:	e012      	b.n	8007396 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	4413      	add	r3, r2
 8007376:	7819      	ldrb	r1, [r3, #0]
 8007378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	4413      	add	r3, r2
 800737e:	3334      	adds	r3, #52	; 0x34
 8007380:	460a      	mov	r2, r1
 8007382:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	4413      	add	r3, r2
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d006      	beq.n	800739e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	3301      	adds	r3, #1
 8007394:	61fb      	str	r3, [r7, #28]
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	2b0f      	cmp	r3, #15
 800739a:	d9e9      	bls.n	8007370 <prvInitialiseNewTask+0x54>
 800739c:	e000      	b.n	80073a0 <prvInitialiseNewTask+0x84>
			{
				break;
 800739e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073a8:	e003      	b.n	80073b2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	2b06      	cmp	r3, #6
 80073b6:	d901      	bls.n	80073bc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073b8:	2306      	movs	r3, #6
 80073ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	2200      	movs	r2, #0
 80073cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	3304      	adds	r3, #4
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7ff fb37 	bl	8006a46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073da:	3318      	adds	r3, #24
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff fb32 	bl	8006a46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ea:	f1c3 0207 	rsb	r2, r3, #7
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	2200      	movs	r2, #0
 8007404:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	334c      	adds	r3, #76	; 0x4c
 800740c:	2260      	movs	r2, #96	; 0x60
 800740e:	2100      	movs	r1, #0
 8007410:	4618      	mov	r0, r3
 8007412:	f001 fb4c 	bl	8008aae <memset>
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	4a0c      	ldr	r2, [pc, #48]	; (800744c <prvInitialiseNewTask+0x130>)
 800741a:	651a      	str	r2, [r3, #80]	; 0x50
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	4a0c      	ldr	r2, [pc, #48]	; (8007450 <prvInitialiseNewTask+0x134>)
 8007420:	655a      	str	r2, [r3, #84]	; 0x54
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	4a0b      	ldr	r2, [pc, #44]	; (8007454 <prvInitialiseNewTask+0x138>)
 8007426:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	68f9      	ldr	r1, [r7, #12]
 800742c:	69b8      	ldr	r0, [r7, #24]
 800742e:	f000 fdcd 	bl	8007fcc <pxPortInitialiseStack>
 8007432:	4602      	mov	r2, r0
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007436:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800743e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007442:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007444:	bf00      	nop
 8007446:	3720      	adds	r7, #32
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	0800f6fc 	.word	0x0800f6fc
 8007450:	0800f71c 	.word	0x0800f71c
 8007454:	0800f6dc 	.word	0x0800f6dc

08007458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007460:	f000 fee0 	bl	8008224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007464:	4b2a      	ldr	r3, [pc, #168]	; (8007510 <prvAddNewTaskToReadyList+0xb8>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3301      	adds	r3, #1
 800746a:	4a29      	ldr	r2, [pc, #164]	; (8007510 <prvAddNewTaskToReadyList+0xb8>)
 800746c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800746e:	4b29      	ldr	r3, [pc, #164]	; (8007514 <prvAddNewTaskToReadyList+0xbc>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d109      	bne.n	800748a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007476:	4a27      	ldr	r2, [pc, #156]	; (8007514 <prvAddNewTaskToReadyList+0xbc>)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800747c:	4b24      	ldr	r3, [pc, #144]	; (8007510 <prvAddNewTaskToReadyList+0xb8>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d110      	bne.n	80074a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007484:	f000 fbd6 	bl	8007c34 <prvInitialiseTaskLists>
 8007488:	e00d      	b.n	80074a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800748a:	4b23      	ldr	r3, [pc, #140]	; (8007518 <prvAddNewTaskToReadyList+0xc0>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d109      	bne.n	80074a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007492:	4b20      	ldr	r3, [pc, #128]	; (8007514 <prvAddNewTaskToReadyList+0xbc>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	429a      	cmp	r2, r3
 800749e:	d802      	bhi.n	80074a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074a0:	4a1c      	ldr	r2, [pc, #112]	; (8007514 <prvAddNewTaskToReadyList+0xbc>)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074a6:	4b1d      	ldr	r3, [pc, #116]	; (800751c <prvAddNewTaskToReadyList+0xc4>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3301      	adds	r3, #1
 80074ac:	4a1b      	ldr	r2, [pc, #108]	; (800751c <prvAddNewTaskToReadyList+0xc4>)
 80074ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b4:	2201      	movs	r2, #1
 80074b6:	409a      	lsls	r2, r3
 80074b8:	4b19      	ldr	r3, [pc, #100]	; (8007520 <prvAddNewTaskToReadyList+0xc8>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4313      	orrs	r3, r2
 80074be:	4a18      	ldr	r2, [pc, #96]	; (8007520 <prvAddNewTaskToReadyList+0xc8>)
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4a15      	ldr	r2, [pc, #84]	; (8007524 <prvAddNewTaskToReadyList+0xcc>)
 80074d0:	441a      	add	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3304      	adds	r3, #4
 80074d6:	4619      	mov	r1, r3
 80074d8:	4610      	mov	r0, r2
 80074da:	f7ff fac1 	bl	8006a60 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074de:	f000 fed1 	bl	8008284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074e2:	4b0d      	ldr	r3, [pc, #52]	; (8007518 <prvAddNewTaskToReadyList+0xc0>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00e      	beq.n	8007508 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074ea:	4b0a      	ldr	r3, [pc, #40]	; (8007514 <prvAddNewTaskToReadyList+0xbc>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d207      	bcs.n	8007508 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074f8:	4b0b      	ldr	r3, [pc, #44]	; (8007528 <prvAddNewTaskToReadyList+0xd0>)
 80074fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074fe:	601a      	str	r2, [r3, #0]
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007508:	bf00      	nop
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20000728 	.word	0x20000728
 8007514:	20000628 	.word	0x20000628
 8007518:	20000734 	.word	0x20000734
 800751c:	20000744 	.word	0x20000744
 8007520:	20000730 	.word	0x20000730
 8007524:	2000062c 	.word	0x2000062c
 8007528:	e000ed04 	.word	0xe000ed04

0800752c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007534:	2300      	movs	r3, #0
 8007536:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d017      	beq.n	800756e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800753e:	4b13      	ldr	r3, [pc, #76]	; (800758c <vTaskDelay+0x60>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <vTaskDelay+0x30>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	60bb      	str	r3, [r7, #8]
}
 8007558:	bf00      	nop
 800755a:	e7fe      	b.n	800755a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800755c:	f000 f884 	bl	8007668 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007560:	2100      	movs	r1, #0
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fccc 	bl	8007f00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007568:	f000 f88c 	bl	8007684 <xTaskResumeAll>
 800756c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d107      	bne.n	8007584 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007574:	4b06      	ldr	r3, [pc, #24]	; (8007590 <vTaskDelay+0x64>)
 8007576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007584:	bf00      	nop
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	20000750 	.word	0x20000750
 8007590:	e000ed04 	.word	0xe000ed04

08007594 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b08a      	sub	sp, #40	; 0x28
 8007598:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800759a:	2300      	movs	r3, #0
 800759c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800759e:	2300      	movs	r3, #0
 80075a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075a2:	463a      	mov	r2, r7
 80075a4:	1d39      	adds	r1, r7, #4
 80075a6:	f107 0308 	add.w	r3, r7, #8
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fa ff4c 	bl	8002448 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	9202      	str	r2, [sp, #8]
 80075b8:	9301      	str	r3, [sp, #4]
 80075ba:	2300      	movs	r3, #0
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	2300      	movs	r3, #0
 80075c0:	460a      	mov	r2, r1
 80075c2:	4921      	ldr	r1, [pc, #132]	; (8007648 <vTaskStartScheduler+0xb4>)
 80075c4:	4821      	ldr	r0, [pc, #132]	; (800764c <vTaskStartScheduler+0xb8>)
 80075c6:	f7ff fe07 	bl	80071d8 <xTaskCreateStatic>
 80075ca:	4603      	mov	r3, r0
 80075cc:	4a20      	ldr	r2, [pc, #128]	; (8007650 <vTaskStartScheduler+0xbc>)
 80075ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075d0:	4b1f      	ldr	r3, [pc, #124]	; (8007650 <vTaskStartScheduler+0xbc>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075d8:	2301      	movs	r3, #1
 80075da:	617b      	str	r3, [r7, #20]
 80075dc:	e001      	b.n	80075e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075de:	2300      	movs	r3, #0
 80075e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d11b      	bne.n	8007620 <vTaskStartScheduler+0x8c>
	__asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	613b      	str	r3, [r7, #16]
}
 80075fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80075fc:	4b15      	ldr	r3, [pc, #84]	; (8007654 <vTaskStartScheduler+0xc0>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	334c      	adds	r3, #76	; 0x4c
 8007602:	4a15      	ldr	r2, [pc, #84]	; (8007658 <vTaskStartScheduler+0xc4>)
 8007604:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007606:	4b15      	ldr	r3, [pc, #84]	; (800765c <vTaskStartScheduler+0xc8>)
 8007608:	f04f 32ff 	mov.w	r2, #4294967295
 800760c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800760e:	4b14      	ldr	r3, [pc, #80]	; (8007660 <vTaskStartScheduler+0xcc>)
 8007610:	2201      	movs	r2, #1
 8007612:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007614:	4b13      	ldr	r3, [pc, #76]	; (8007664 <vTaskStartScheduler+0xd0>)
 8007616:	2200      	movs	r2, #0
 8007618:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800761a:	f000 fd61 	bl	80080e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800761e:	e00e      	b.n	800763e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007626:	d10a      	bne.n	800763e <vTaskStartScheduler+0xaa>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	60fb      	str	r3, [r7, #12]
}
 800763a:	bf00      	nop
 800763c:	e7fe      	b.n	800763c <vTaskStartScheduler+0xa8>
}
 800763e:	bf00      	nop
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	0800f6bc 	.word	0x0800f6bc
 800764c:	08007c05 	.word	0x08007c05
 8007650:	2000074c 	.word	0x2000074c
 8007654:	20000628 	.word	0x20000628
 8007658:	20000048 	.word	0x20000048
 800765c:	20000748 	.word	0x20000748
 8007660:	20000734 	.word	0x20000734
 8007664:	2000072c 	.word	0x2000072c

08007668 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007668:	b480      	push	{r7}
 800766a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800766c:	4b04      	ldr	r3, [pc, #16]	; (8007680 <vTaskSuspendAll+0x18>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3301      	adds	r3, #1
 8007672:	4a03      	ldr	r2, [pc, #12]	; (8007680 <vTaskSuspendAll+0x18>)
 8007674:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007676:	bf00      	nop
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	20000750 	.word	0x20000750

08007684 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800768e:	2300      	movs	r3, #0
 8007690:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007692:	4b41      	ldr	r3, [pc, #260]	; (8007798 <xTaskResumeAll+0x114>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10a      	bne.n	80076b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	603b      	str	r3, [r7, #0]
}
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076b0:	f000 fdb8 	bl	8008224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076b4:	4b38      	ldr	r3, [pc, #224]	; (8007798 <xTaskResumeAll+0x114>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3b01      	subs	r3, #1
 80076ba:	4a37      	ldr	r2, [pc, #220]	; (8007798 <xTaskResumeAll+0x114>)
 80076bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076be:	4b36      	ldr	r3, [pc, #216]	; (8007798 <xTaskResumeAll+0x114>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d161      	bne.n	800778a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076c6:	4b35      	ldr	r3, [pc, #212]	; (800779c <xTaskResumeAll+0x118>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d05d      	beq.n	800778a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076ce:	e02e      	b.n	800772e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076d0:	4b33      	ldr	r3, [pc, #204]	; (80077a0 <xTaskResumeAll+0x11c>)
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3318      	adds	r3, #24
 80076dc:	4618      	mov	r0, r3
 80076de:	f7ff fa1c 	bl	8006b1a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3304      	adds	r3, #4
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7ff fa17 	bl	8006b1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	2201      	movs	r2, #1
 80076f2:	409a      	lsls	r2, r3
 80076f4:	4b2b      	ldr	r3, [pc, #172]	; (80077a4 <xTaskResumeAll+0x120>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	4a2a      	ldr	r2, [pc, #168]	; (80077a4 <xTaskResumeAll+0x120>)
 80076fc:	6013      	str	r3, [r2, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007702:	4613      	mov	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4a27      	ldr	r2, [pc, #156]	; (80077a8 <xTaskResumeAll+0x124>)
 800770c:	441a      	add	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	3304      	adds	r3, #4
 8007712:	4619      	mov	r1, r3
 8007714:	4610      	mov	r0, r2
 8007716:	f7ff f9a3 	bl	8006a60 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771e:	4b23      	ldr	r3, [pc, #140]	; (80077ac <xTaskResumeAll+0x128>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007724:	429a      	cmp	r2, r3
 8007726:	d302      	bcc.n	800772e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007728:	4b21      	ldr	r3, [pc, #132]	; (80077b0 <xTaskResumeAll+0x12c>)
 800772a:	2201      	movs	r2, #1
 800772c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800772e:	4b1c      	ldr	r3, [pc, #112]	; (80077a0 <xTaskResumeAll+0x11c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1cc      	bne.n	80076d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800773c:	f000 fb1c 	bl	8007d78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007740:	4b1c      	ldr	r3, [pc, #112]	; (80077b4 <xTaskResumeAll+0x130>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d010      	beq.n	800776e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800774c:	f000 f836 	bl	80077bc <xTaskIncrementTick>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007756:	4b16      	ldr	r3, [pc, #88]	; (80077b0 <xTaskResumeAll+0x12c>)
 8007758:	2201      	movs	r2, #1
 800775a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3b01      	subs	r3, #1
 8007760:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1f1      	bne.n	800774c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007768:	4b12      	ldr	r3, [pc, #72]	; (80077b4 <xTaskResumeAll+0x130>)
 800776a:	2200      	movs	r2, #0
 800776c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800776e:	4b10      	ldr	r3, [pc, #64]	; (80077b0 <xTaskResumeAll+0x12c>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d009      	beq.n	800778a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007776:	2301      	movs	r3, #1
 8007778:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800777a:	4b0f      	ldr	r3, [pc, #60]	; (80077b8 <xTaskResumeAll+0x134>)
 800777c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800778a:	f000 fd7b 	bl	8008284 <vPortExitCritical>

	return xAlreadyYielded;
 800778e:	68bb      	ldr	r3, [r7, #8]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	20000750 	.word	0x20000750
 800779c:	20000728 	.word	0x20000728
 80077a0:	200006e8 	.word	0x200006e8
 80077a4:	20000730 	.word	0x20000730
 80077a8:	2000062c 	.word	0x2000062c
 80077ac:	20000628 	.word	0x20000628
 80077b0:	2000073c 	.word	0x2000073c
 80077b4:	20000738 	.word	0x20000738
 80077b8:	e000ed04 	.word	0xe000ed04

080077bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80077c2:	2300      	movs	r3, #0
 80077c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077c6:	4b4e      	ldr	r3, [pc, #312]	; (8007900 <xTaskIncrementTick+0x144>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f040 808e 	bne.w	80078ec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077d0:	4b4c      	ldr	r3, [pc, #304]	; (8007904 <xTaskIncrementTick+0x148>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3301      	adds	r3, #1
 80077d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077d8:	4a4a      	ldr	r2, [pc, #296]	; (8007904 <xTaskIncrementTick+0x148>)
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d120      	bne.n	8007826 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80077e4:	4b48      	ldr	r3, [pc, #288]	; (8007908 <xTaskIncrementTick+0x14c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00a      	beq.n	8007804 <xTaskIncrementTick+0x48>
	__asm volatile
 80077ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	603b      	str	r3, [r7, #0]
}
 8007800:	bf00      	nop
 8007802:	e7fe      	b.n	8007802 <xTaskIncrementTick+0x46>
 8007804:	4b40      	ldr	r3, [pc, #256]	; (8007908 <xTaskIncrementTick+0x14c>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	4b40      	ldr	r3, [pc, #256]	; (800790c <xTaskIncrementTick+0x150>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a3e      	ldr	r2, [pc, #248]	; (8007908 <xTaskIncrementTick+0x14c>)
 8007810:	6013      	str	r3, [r2, #0]
 8007812:	4a3e      	ldr	r2, [pc, #248]	; (800790c <xTaskIncrementTick+0x150>)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	4b3d      	ldr	r3, [pc, #244]	; (8007910 <xTaskIncrementTick+0x154>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3301      	adds	r3, #1
 800781e:	4a3c      	ldr	r2, [pc, #240]	; (8007910 <xTaskIncrementTick+0x154>)
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	f000 faa9 	bl	8007d78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007826:	4b3b      	ldr	r3, [pc, #236]	; (8007914 <xTaskIncrementTick+0x158>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	429a      	cmp	r2, r3
 800782e:	d348      	bcc.n	80078c2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007830:	4b35      	ldr	r3, [pc, #212]	; (8007908 <xTaskIncrementTick+0x14c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d104      	bne.n	8007844 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800783a:	4b36      	ldr	r3, [pc, #216]	; (8007914 <xTaskIncrementTick+0x158>)
 800783c:	f04f 32ff 	mov.w	r2, #4294967295
 8007840:	601a      	str	r2, [r3, #0]
					break;
 8007842:	e03e      	b.n	80078c2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007844:	4b30      	ldr	r3, [pc, #192]	; (8007908 <xTaskIncrementTick+0x14c>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	429a      	cmp	r2, r3
 800785a:	d203      	bcs.n	8007864 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800785c:	4a2d      	ldr	r2, [pc, #180]	; (8007914 <xTaskIncrementTick+0x158>)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007862:	e02e      	b.n	80078c2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	3304      	adds	r3, #4
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff f956 	bl	8006b1a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007872:	2b00      	cmp	r3, #0
 8007874:	d004      	beq.n	8007880 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	3318      	adds	r3, #24
 800787a:	4618      	mov	r0, r3
 800787c:	f7ff f94d 	bl	8006b1a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007884:	2201      	movs	r2, #1
 8007886:	409a      	lsls	r2, r3
 8007888:	4b23      	ldr	r3, [pc, #140]	; (8007918 <xTaskIncrementTick+0x15c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4313      	orrs	r3, r2
 800788e:	4a22      	ldr	r2, [pc, #136]	; (8007918 <xTaskIncrementTick+0x15c>)
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007896:	4613      	mov	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4a1f      	ldr	r2, [pc, #124]	; (800791c <xTaskIncrementTick+0x160>)
 80078a0:	441a      	add	r2, r3
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	3304      	adds	r3, #4
 80078a6:	4619      	mov	r1, r3
 80078a8:	4610      	mov	r0, r2
 80078aa:	f7ff f8d9 	bl	8006a60 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b2:	4b1b      	ldr	r3, [pc, #108]	; (8007920 <xTaskIncrementTick+0x164>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d3b9      	bcc.n	8007830 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80078bc:	2301      	movs	r3, #1
 80078be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078c0:	e7b6      	b.n	8007830 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078c2:	4b17      	ldr	r3, [pc, #92]	; (8007920 <xTaskIncrementTick+0x164>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c8:	4914      	ldr	r1, [pc, #80]	; (800791c <xTaskIncrementTick+0x160>)
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d901      	bls.n	80078de <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80078da:	2301      	movs	r3, #1
 80078dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80078de:	4b11      	ldr	r3, [pc, #68]	; (8007924 <xTaskIncrementTick+0x168>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d007      	beq.n	80078f6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80078e6:	2301      	movs	r3, #1
 80078e8:	617b      	str	r3, [r7, #20]
 80078ea:	e004      	b.n	80078f6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80078ec:	4b0e      	ldr	r3, [pc, #56]	; (8007928 <xTaskIncrementTick+0x16c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3301      	adds	r3, #1
 80078f2:	4a0d      	ldr	r2, [pc, #52]	; (8007928 <xTaskIncrementTick+0x16c>)
 80078f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80078f6:	697b      	ldr	r3, [r7, #20]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	20000750 	.word	0x20000750
 8007904:	2000072c 	.word	0x2000072c
 8007908:	200006e0 	.word	0x200006e0
 800790c:	200006e4 	.word	0x200006e4
 8007910:	20000740 	.word	0x20000740
 8007914:	20000748 	.word	0x20000748
 8007918:	20000730 	.word	0x20000730
 800791c:	2000062c 	.word	0x2000062c
 8007920:	20000628 	.word	0x20000628
 8007924:	2000073c 	.word	0x2000073c
 8007928:	20000738 	.word	0x20000738

0800792c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800792c:	b480      	push	{r7}
 800792e:	b087      	sub	sp, #28
 8007930:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007932:	4b29      	ldr	r3, [pc, #164]	; (80079d8 <vTaskSwitchContext+0xac>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800793a:	4b28      	ldr	r3, [pc, #160]	; (80079dc <vTaskSwitchContext+0xb0>)
 800793c:	2201      	movs	r2, #1
 800793e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007940:	e044      	b.n	80079cc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007942:	4b26      	ldr	r3, [pc, #152]	; (80079dc <vTaskSwitchContext+0xb0>)
 8007944:	2200      	movs	r2, #0
 8007946:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007948:	4b25      	ldr	r3, [pc, #148]	; (80079e0 <vTaskSwitchContext+0xb4>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	fab3 f383 	clz	r3, r3
 8007954:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007956:	7afb      	ldrb	r3, [r7, #11]
 8007958:	f1c3 031f 	rsb	r3, r3, #31
 800795c:	617b      	str	r3, [r7, #20]
 800795e:	4921      	ldr	r1, [pc, #132]	; (80079e4 <vTaskSwitchContext+0xb8>)
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10a      	bne.n	8007988 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	607b      	str	r3, [r7, #4]
}
 8007984:	bf00      	nop
 8007986:	e7fe      	b.n	8007986 <vTaskSwitchContext+0x5a>
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	4613      	mov	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4a14      	ldr	r2, [pc, #80]	; (80079e4 <vTaskSwitchContext+0xb8>)
 8007994:	4413      	add	r3, r2
 8007996:	613b      	str	r3, [r7, #16]
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	605a      	str	r2, [r3, #4]
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	3308      	adds	r3, #8
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d104      	bne.n	80079b8 <vTaskSwitchContext+0x8c>
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	605a      	str	r2, [r3, #4]
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	4a0a      	ldr	r2, [pc, #40]	; (80079e8 <vTaskSwitchContext+0xbc>)
 80079c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80079c2:	4b09      	ldr	r3, [pc, #36]	; (80079e8 <vTaskSwitchContext+0xbc>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	334c      	adds	r3, #76	; 0x4c
 80079c8:	4a08      	ldr	r2, [pc, #32]	; (80079ec <vTaskSwitchContext+0xc0>)
 80079ca:	6013      	str	r3, [r2, #0]
}
 80079cc:	bf00      	nop
 80079ce:	371c      	adds	r7, #28
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	20000750 	.word	0x20000750
 80079dc:	2000073c 	.word	0x2000073c
 80079e0:	20000730 	.word	0x20000730
 80079e4:	2000062c 	.word	0x2000062c
 80079e8:	20000628 	.word	0x20000628
 80079ec:	20000048 	.word	0x20000048

080079f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10a      	bne.n	8007a16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	60fb      	str	r3, [r7, #12]
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a16:	4b07      	ldr	r3, [pc, #28]	; (8007a34 <vTaskPlaceOnEventList+0x44>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3318      	adds	r3, #24
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7ff f842 	bl	8006aa8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a24:	2101      	movs	r1, #1
 8007a26:	6838      	ldr	r0, [r7, #0]
 8007a28:	f000 fa6a 	bl	8007f00 <prvAddCurrentTaskToDelayedList>
}
 8007a2c:	bf00      	nop
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	20000628 	.word	0x20000628

08007a38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10a      	bne.n	8007a64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	60fb      	str	r3, [r7, #12]
}
 8007a60:	bf00      	nop
 8007a62:	e7fe      	b.n	8007a62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	3318      	adds	r3, #24
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff f856 	bl	8006b1a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a6e:	4b1d      	ldr	r3, [pc, #116]	; (8007ae4 <xTaskRemoveFromEventList+0xac>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d11c      	bne.n	8007ab0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff f84d 	bl	8006b1a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a84:	2201      	movs	r2, #1
 8007a86:	409a      	lsls	r2, r3
 8007a88:	4b17      	ldr	r3, [pc, #92]	; (8007ae8 <xTaskRemoveFromEventList+0xb0>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	4a16      	ldr	r2, [pc, #88]	; (8007ae8 <xTaskRemoveFromEventList+0xb0>)
 8007a90:	6013      	str	r3, [r2, #0]
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4a13      	ldr	r2, [pc, #76]	; (8007aec <xTaskRemoveFromEventList+0xb4>)
 8007aa0:	441a      	add	r2, r3
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	f7fe ffd9 	bl	8006a60 <vListInsertEnd>
 8007aae:	e005      	b.n	8007abc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	3318      	adds	r3, #24
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	480e      	ldr	r0, [pc, #56]	; (8007af0 <xTaskRemoveFromEventList+0xb8>)
 8007ab8:	f7fe ffd2 	bl	8006a60 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac0:	4b0c      	ldr	r3, [pc, #48]	; (8007af4 <xTaskRemoveFromEventList+0xbc>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d905      	bls.n	8007ad6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007aca:	2301      	movs	r3, #1
 8007acc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ace:	4b0a      	ldr	r3, [pc, #40]	; (8007af8 <xTaskRemoveFromEventList+0xc0>)
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	e001      	b.n	8007ada <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ada:	697b      	ldr	r3, [r7, #20]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	20000750 	.word	0x20000750
 8007ae8:	20000730 	.word	0x20000730
 8007aec:	2000062c 	.word	0x2000062c
 8007af0:	200006e8 	.word	0x200006e8
 8007af4:	20000628 	.word	0x20000628
 8007af8:	2000073c 	.word	0x2000073c

08007afc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b04:	4b06      	ldr	r3, [pc, #24]	; (8007b20 <vTaskInternalSetTimeOutState+0x24>)
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b0c:	4b05      	ldr	r3, [pc, #20]	; (8007b24 <vTaskInternalSetTimeOutState+0x28>)
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	605a      	str	r2, [r3, #4]
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	20000740 	.word	0x20000740
 8007b24:	2000072c 	.word	0x2000072c

08007b28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10a      	bne.n	8007b4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	613b      	str	r3, [r7, #16]
}
 8007b4a:	bf00      	nop
 8007b4c:	e7fe      	b.n	8007b4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10a      	bne.n	8007b6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	60fb      	str	r3, [r7, #12]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007b6a:	f000 fb5b 	bl	8008224 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b6e:	4b1d      	ldr	r3, [pc, #116]	; (8007be4 <xTaskCheckForTimeOut+0xbc>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b86:	d102      	bne.n	8007b8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	61fb      	str	r3, [r7, #28]
 8007b8c:	e023      	b.n	8007bd6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	4b15      	ldr	r3, [pc, #84]	; (8007be8 <xTaskCheckForTimeOut+0xc0>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d007      	beq.n	8007baa <xTaskCheckForTimeOut+0x82>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d302      	bcc.n	8007baa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	61fb      	str	r3, [r7, #28]
 8007ba8:	e015      	b.n	8007bd6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d20b      	bcs.n	8007bcc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	1ad2      	subs	r2, r2, r3
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7ff ff9b 	bl	8007afc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	61fb      	str	r3, [r7, #28]
 8007bca:	e004      	b.n	8007bd6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007bd6:	f000 fb55 	bl	8008284 <vPortExitCritical>

	return xReturn;
 8007bda:	69fb      	ldr	r3, [r7, #28]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3720      	adds	r7, #32
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	2000072c 	.word	0x2000072c
 8007be8:	20000740 	.word	0x20000740

08007bec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007bf0:	4b03      	ldr	r3, [pc, #12]	; (8007c00 <vTaskMissedYield+0x14>)
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	601a      	str	r2, [r3, #0]
}
 8007bf6:	bf00      	nop
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	2000073c 	.word	0x2000073c

08007c04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c0c:	f000 f852 	bl	8007cb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c10:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <prvIdleTask+0x28>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d9f9      	bls.n	8007c0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c18:	4b05      	ldr	r3, [pc, #20]	; (8007c30 <prvIdleTask+0x2c>)
 8007c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c28:	e7f0      	b.n	8007c0c <prvIdleTask+0x8>
 8007c2a:	bf00      	nop
 8007c2c:	2000062c 	.word	0x2000062c
 8007c30:	e000ed04 	.word	0xe000ed04

08007c34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	607b      	str	r3, [r7, #4]
 8007c3e:	e00c      	b.n	8007c5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	4613      	mov	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4a12      	ldr	r2, [pc, #72]	; (8007c94 <prvInitialiseTaskLists+0x60>)
 8007c4c:	4413      	add	r3, r2
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fe fed9 	bl	8006a06 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3301      	adds	r3, #1
 8007c58:	607b      	str	r3, [r7, #4]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b06      	cmp	r3, #6
 8007c5e:	d9ef      	bls.n	8007c40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c60:	480d      	ldr	r0, [pc, #52]	; (8007c98 <prvInitialiseTaskLists+0x64>)
 8007c62:	f7fe fed0 	bl	8006a06 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c66:	480d      	ldr	r0, [pc, #52]	; (8007c9c <prvInitialiseTaskLists+0x68>)
 8007c68:	f7fe fecd 	bl	8006a06 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c6c:	480c      	ldr	r0, [pc, #48]	; (8007ca0 <prvInitialiseTaskLists+0x6c>)
 8007c6e:	f7fe feca 	bl	8006a06 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c72:	480c      	ldr	r0, [pc, #48]	; (8007ca4 <prvInitialiseTaskLists+0x70>)
 8007c74:	f7fe fec7 	bl	8006a06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c78:	480b      	ldr	r0, [pc, #44]	; (8007ca8 <prvInitialiseTaskLists+0x74>)
 8007c7a:	f7fe fec4 	bl	8006a06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c7e:	4b0b      	ldr	r3, [pc, #44]	; (8007cac <prvInitialiseTaskLists+0x78>)
 8007c80:	4a05      	ldr	r2, [pc, #20]	; (8007c98 <prvInitialiseTaskLists+0x64>)
 8007c82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c84:	4b0a      	ldr	r3, [pc, #40]	; (8007cb0 <prvInitialiseTaskLists+0x7c>)
 8007c86:	4a05      	ldr	r2, [pc, #20]	; (8007c9c <prvInitialiseTaskLists+0x68>)
 8007c88:	601a      	str	r2, [r3, #0]
}
 8007c8a:	bf00      	nop
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	2000062c 	.word	0x2000062c
 8007c98:	200006b8 	.word	0x200006b8
 8007c9c:	200006cc 	.word	0x200006cc
 8007ca0:	200006e8 	.word	0x200006e8
 8007ca4:	200006fc 	.word	0x200006fc
 8007ca8:	20000714 	.word	0x20000714
 8007cac:	200006e0 	.word	0x200006e0
 8007cb0:	200006e4 	.word	0x200006e4

08007cb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cba:	e019      	b.n	8007cf0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007cbc:	f000 fab2 	bl	8008224 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cc0:	4b10      	ldr	r3, [pc, #64]	; (8007d04 <prvCheckTasksWaitingTermination+0x50>)
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3304      	adds	r3, #4
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fe ff24 	bl	8006b1a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007cd2:	4b0d      	ldr	r3, [pc, #52]	; (8007d08 <prvCheckTasksWaitingTermination+0x54>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	4a0b      	ldr	r2, [pc, #44]	; (8007d08 <prvCheckTasksWaitingTermination+0x54>)
 8007cda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007cdc:	4b0b      	ldr	r3, [pc, #44]	; (8007d0c <prvCheckTasksWaitingTermination+0x58>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	4a0a      	ldr	r2, [pc, #40]	; (8007d0c <prvCheckTasksWaitingTermination+0x58>)
 8007ce4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ce6:	f000 facd 	bl	8008284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f810 	bl	8007d10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cf0:	4b06      	ldr	r3, [pc, #24]	; (8007d0c <prvCheckTasksWaitingTermination+0x58>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1e1      	bne.n	8007cbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007cf8:	bf00      	nop
 8007cfa:	bf00      	nop
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	200006fc 	.word	0x200006fc
 8007d08:	20000728 	.word	0x20000728
 8007d0c:	20000710 	.word	0x20000710

08007d10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	334c      	adds	r3, #76	; 0x4c
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f001 fc2f 	bl	8009580 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d108      	bne.n	8007d3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 fc65 	bl	8008600 <vPortFree>
				vPortFree( pxTCB );
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fc62 	bl	8008600 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d3c:	e018      	b.n	8007d70 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d103      	bne.n	8007d50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fc59 	bl	8008600 <vPortFree>
	}
 8007d4e:	e00f      	b.n	8007d70 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d00a      	beq.n	8007d70 <prvDeleteTCB+0x60>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	60fb      	str	r3, [r7, #12]
}
 8007d6c:	bf00      	nop
 8007d6e:	e7fe      	b.n	8007d6e <prvDeleteTCB+0x5e>
	}
 8007d70:	bf00      	nop
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d7e:	4b0c      	ldr	r3, [pc, #48]	; (8007db0 <prvResetNextTaskUnblockTime+0x38>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d104      	bne.n	8007d92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d88:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <prvResetNextTaskUnblockTime+0x3c>)
 8007d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d90:	e008      	b.n	8007da4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d92:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <prvResetNextTaskUnblockTime+0x38>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	4a04      	ldr	r2, [pc, #16]	; (8007db4 <prvResetNextTaskUnblockTime+0x3c>)
 8007da2:	6013      	str	r3, [r2, #0]
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	200006e0 	.word	0x200006e0
 8007db4:	20000748 	.word	0x20000748

08007db8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007dbe:	4b0b      	ldr	r3, [pc, #44]	; (8007dec <xTaskGetSchedulerState+0x34>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d102      	bne.n	8007dcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	607b      	str	r3, [r7, #4]
 8007dca:	e008      	b.n	8007dde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dcc:	4b08      	ldr	r3, [pc, #32]	; (8007df0 <xTaskGetSchedulerState+0x38>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d102      	bne.n	8007dda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	607b      	str	r3, [r7, #4]
 8007dd8:	e001      	b.n	8007dde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007dde:	687b      	ldr	r3, [r7, #4]
	}
 8007de0:	4618      	mov	r0, r3
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	20000734 	.word	0x20000734
 8007df0:	20000750 	.word	0x20000750

08007df4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e00:	2300      	movs	r3, #0
 8007e02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d06e      	beq.n	8007ee8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e0a:	4b3a      	ldr	r3, [pc, #232]	; (8007ef4 <xTaskPriorityDisinherit+0x100>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d00a      	beq.n	8007e2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	60fb      	str	r3, [r7, #12]
}
 8007e26:	bf00      	nop
 8007e28:	e7fe      	b.n	8007e28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10a      	bne.n	8007e48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	60bb      	str	r3, [r7, #8]
}
 8007e44:	bf00      	nop
 8007e46:	e7fe      	b.n	8007e46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e4c:	1e5a      	subs	r2, r3, #1
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d044      	beq.n	8007ee8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d140      	bne.n	8007ee8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	3304      	adds	r3, #4
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe fe55 	bl	8006b1a <uxListRemove>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d115      	bne.n	8007ea2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7a:	491f      	ldr	r1, [pc, #124]	; (8007ef8 <xTaskPriorityDisinherit+0x104>)
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	440b      	add	r3, r1
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10a      	bne.n	8007ea2 <xTaskPriorityDisinherit+0xae>
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e90:	2201      	movs	r2, #1
 8007e92:	fa02 f303 	lsl.w	r3, r2, r3
 8007e96:	43da      	mvns	r2, r3
 8007e98:	4b18      	ldr	r3, [pc, #96]	; (8007efc <xTaskPriorityDisinherit+0x108>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	4a17      	ldr	r2, [pc, #92]	; (8007efc <xTaskPriorityDisinherit+0x108>)
 8007ea0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	f1c3 0207 	rsb	r2, r3, #7
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eba:	2201      	movs	r2, #1
 8007ebc:	409a      	lsls	r2, r3
 8007ebe:	4b0f      	ldr	r3, [pc, #60]	; (8007efc <xTaskPriorityDisinherit+0x108>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	4a0d      	ldr	r2, [pc, #52]	; (8007efc <xTaskPriorityDisinherit+0x108>)
 8007ec6:	6013      	str	r3, [r2, #0]
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ecc:	4613      	mov	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4a08      	ldr	r2, [pc, #32]	; (8007ef8 <xTaskPriorityDisinherit+0x104>)
 8007ed6:	441a      	add	r2, r3
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	3304      	adds	r3, #4
 8007edc:	4619      	mov	r1, r3
 8007ede:	4610      	mov	r0, r2
 8007ee0:	f7fe fdbe 	bl	8006a60 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ee8:	697b      	ldr	r3, [r7, #20]
	}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000628 	.word	0x20000628
 8007ef8:	2000062c 	.word	0x2000062c
 8007efc:	20000730 	.word	0x20000730

08007f00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f0a:	4b29      	ldr	r3, [pc, #164]	; (8007fb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f10:	4b28      	ldr	r3, [pc, #160]	; (8007fb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	3304      	adds	r3, #4
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe fdff 	bl	8006b1a <uxListRemove>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10b      	bne.n	8007f3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007f22:	4b24      	ldr	r3, [pc, #144]	; (8007fb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f28:	2201      	movs	r2, #1
 8007f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2e:	43da      	mvns	r2, r3
 8007f30:	4b21      	ldr	r3, [pc, #132]	; (8007fb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4013      	ands	r3, r2
 8007f36:	4a20      	ldr	r2, [pc, #128]	; (8007fb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f40:	d10a      	bne.n	8007f58 <prvAddCurrentTaskToDelayedList+0x58>
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d007      	beq.n	8007f58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f48:	4b1a      	ldr	r3, [pc, #104]	; (8007fb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	4619      	mov	r1, r3
 8007f50:	481a      	ldr	r0, [pc, #104]	; (8007fbc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007f52:	f7fe fd85 	bl	8006a60 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f56:	e026      	b.n	8007fa6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f60:	4b14      	ldr	r3, [pc, #80]	; (8007fb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d209      	bcs.n	8007f84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f70:	4b13      	ldr	r3, [pc, #76]	; (8007fc0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	4b0f      	ldr	r3, [pc, #60]	; (8007fb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	3304      	adds	r3, #4
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	f7fe fd93 	bl	8006aa8 <vListInsert>
}
 8007f82:	e010      	b.n	8007fa6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f84:	4b0f      	ldr	r3, [pc, #60]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	4b0a      	ldr	r3, [pc, #40]	; (8007fb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4610      	mov	r0, r2
 8007f92:	f7fe fd89 	bl	8006aa8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f96:	4b0c      	ldr	r3, [pc, #48]	; (8007fc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d202      	bcs.n	8007fa6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007fa0:	4a09      	ldr	r2, [pc, #36]	; (8007fc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	6013      	str	r3, [r2, #0]
}
 8007fa6:	bf00      	nop
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	2000072c 	.word	0x2000072c
 8007fb4:	20000628 	.word	0x20000628
 8007fb8:	20000730 	.word	0x20000730
 8007fbc:	20000714 	.word	0x20000714
 8007fc0:	200006e4 	.word	0x200006e4
 8007fc4:	200006e0 	.word	0x200006e0
 8007fc8:	20000748 	.word	0x20000748

08007fcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	3b04      	subs	r3, #4
 8007fdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007fe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	3b04      	subs	r3, #4
 8007fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	f023 0201 	bic.w	r2, r3, #1
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	3b04      	subs	r3, #4
 8007ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ffc:	4a0c      	ldr	r2, [pc, #48]	; (8008030 <pxPortInitialiseStack+0x64>)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3b14      	subs	r3, #20
 8008006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3b04      	subs	r3, #4
 8008012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f06f 0202 	mvn.w	r2, #2
 800801a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3b20      	subs	r3, #32
 8008020:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008022:	68fb      	ldr	r3, [r7, #12]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr
 8008030:	08008035 	.word	0x08008035

08008034 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800803a:	2300      	movs	r3, #0
 800803c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800803e:	4b12      	ldr	r3, [pc, #72]	; (8008088 <prvTaskExitError+0x54>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008046:	d00a      	beq.n	800805e <prvTaskExitError+0x2a>
	__asm volatile
 8008048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	60fb      	str	r3, [r7, #12]
}
 800805a:	bf00      	nop
 800805c:	e7fe      	b.n	800805c <prvTaskExitError+0x28>
	__asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	60bb      	str	r3, [r7, #8]
}
 8008070:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008072:	bf00      	nop
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d0fc      	beq.n	8008074 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800807a:	bf00      	nop
 800807c:	bf00      	nop
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	20000044 	.word	0x20000044
 800808c:	00000000 	.word	0x00000000

08008090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008090:	4b07      	ldr	r3, [pc, #28]	; (80080b0 <pxCurrentTCBConst2>)
 8008092:	6819      	ldr	r1, [r3, #0]
 8008094:	6808      	ldr	r0, [r1, #0]
 8008096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809a:	f380 8809 	msr	PSP, r0
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f04f 0000 	mov.w	r0, #0
 80080a6:	f380 8811 	msr	BASEPRI, r0
 80080aa:	4770      	bx	lr
 80080ac:	f3af 8000 	nop.w

080080b0 <pxCurrentTCBConst2>:
 80080b0:	20000628 	.word	0x20000628
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080b4:	bf00      	nop
 80080b6:	bf00      	nop

080080b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080b8:	4808      	ldr	r0, [pc, #32]	; (80080dc <prvPortStartFirstTask+0x24>)
 80080ba:	6800      	ldr	r0, [r0, #0]
 80080bc:	6800      	ldr	r0, [r0, #0]
 80080be:	f380 8808 	msr	MSP, r0
 80080c2:	f04f 0000 	mov.w	r0, #0
 80080c6:	f380 8814 	msr	CONTROL, r0
 80080ca:	b662      	cpsie	i
 80080cc:	b661      	cpsie	f
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	df00      	svc	0
 80080d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080da:	bf00      	nop
 80080dc:	e000ed08 	.word	0xe000ed08

080080e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080e6:	4b46      	ldr	r3, [pc, #280]	; (8008200 <xPortStartScheduler+0x120>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a46      	ldr	r2, [pc, #280]	; (8008204 <xPortStartScheduler+0x124>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d10a      	bne.n	8008106 <xPortStartScheduler+0x26>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	613b      	str	r3, [r7, #16]
}
 8008102:	bf00      	nop
 8008104:	e7fe      	b.n	8008104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008106:	4b3e      	ldr	r3, [pc, #248]	; (8008200 <xPortStartScheduler+0x120>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a3f      	ldr	r2, [pc, #252]	; (8008208 <xPortStartScheduler+0x128>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d10a      	bne.n	8008126 <xPortStartScheduler+0x46>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	60fb      	str	r3, [r7, #12]
}
 8008122:	bf00      	nop
 8008124:	e7fe      	b.n	8008124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008126:	4b39      	ldr	r3, [pc, #228]	; (800820c <xPortStartScheduler+0x12c>)
 8008128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	22ff      	movs	r2, #255	; 0xff
 8008136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	b2db      	uxtb	r3, r3
 800813e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008148:	b2da      	uxtb	r2, r3
 800814a:	4b31      	ldr	r3, [pc, #196]	; (8008210 <xPortStartScheduler+0x130>)
 800814c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800814e:	4b31      	ldr	r3, [pc, #196]	; (8008214 <xPortStartScheduler+0x134>)
 8008150:	2207      	movs	r2, #7
 8008152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008154:	e009      	b.n	800816a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008156:	4b2f      	ldr	r3, [pc, #188]	; (8008214 <xPortStartScheduler+0x134>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3b01      	subs	r3, #1
 800815c:	4a2d      	ldr	r2, [pc, #180]	; (8008214 <xPortStartScheduler+0x134>)
 800815e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	b2db      	uxtb	r3, r3
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	b2db      	uxtb	r3, r3
 8008168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	b2db      	uxtb	r3, r3
 800816e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008172:	2b80      	cmp	r3, #128	; 0x80
 8008174:	d0ef      	beq.n	8008156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008176:	4b27      	ldr	r3, [pc, #156]	; (8008214 <xPortStartScheduler+0x134>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f1c3 0307 	rsb	r3, r3, #7
 800817e:	2b04      	cmp	r3, #4
 8008180:	d00a      	beq.n	8008198 <xPortStartScheduler+0xb8>
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	60bb      	str	r3, [r7, #8]
}
 8008194:	bf00      	nop
 8008196:	e7fe      	b.n	8008196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008198:	4b1e      	ldr	r3, [pc, #120]	; (8008214 <xPortStartScheduler+0x134>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	021b      	lsls	r3, r3, #8
 800819e:	4a1d      	ldr	r2, [pc, #116]	; (8008214 <xPortStartScheduler+0x134>)
 80081a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081a2:	4b1c      	ldr	r3, [pc, #112]	; (8008214 <xPortStartScheduler+0x134>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081aa:	4a1a      	ldr	r2, [pc, #104]	; (8008214 <xPortStartScheduler+0x134>)
 80081ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081b6:	4b18      	ldr	r3, [pc, #96]	; (8008218 <xPortStartScheduler+0x138>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a17      	ldr	r2, [pc, #92]	; (8008218 <xPortStartScheduler+0x138>)
 80081bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081c2:	4b15      	ldr	r3, [pc, #84]	; (8008218 <xPortStartScheduler+0x138>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a14      	ldr	r2, [pc, #80]	; (8008218 <xPortStartScheduler+0x138>)
 80081c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80081cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081ce:	f000 f8dd 	bl	800838c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081d2:	4b12      	ldr	r3, [pc, #72]	; (800821c <xPortStartScheduler+0x13c>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081d8:	f000 f8fc 	bl	80083d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081dc:	4b10      	ldr	r3, [pc, #64]	; (8008220 <xPortStartScheduler+0x140>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a0f      	ldr	r2, [pc, #60]	; (8008220 <xPortStartScheduler+0x140>)
 80081e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80081e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081e8:	f7ff ff66 	bl	80080b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081ec:	f7ff fb9e 	bl	800792c <vTaskSwitchContext>
	prvTaskExitError();
 80081f0:	f7ff ff20 	bl	8008034 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	e000ed00 	.word	0xe000ed00
 8008204:	410fc271 	.word	0x410fc271
 8008208:	410fc270 	.word	0x410fc270
 800820c:	e000e400 	.word	0xe000e400
 8008210:	20000754 	.word	0x20000754
 8008214:	20000758 	.word	0x20000758
 8008218:	e000ed20 	.word	0xe000ed20
 800821c:	20000044 	.word	0x20000044
 8008220:	e000ef34 	.word	0xe000ef34

08008224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	607b      	str	r3, [r7, #4]
}
 800823c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800823e:	4b0f      	ldr	r3, [pc, #60]	; (800827c <vPortEnterCritical+0x58>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3301      	adds	r3, #1
 8008244:	4a0d      	ldr	r2, [pc, #52]	; (800827c <vPortEnterCritical+0x58>)
 8008246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008248:	4b0c      	ldr	r3, [pc, #48]	; (800827c <vPortEnterCritical+0x58>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d10f      	bne.n	8008270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008250:	4b0b      	ldr	r3, [pc, #44]	; (8008280 <vPortEnterCritical+0x5c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <vPortEnterCritical+0x4c>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	603b      	str	r3, [r7, #0]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <vPortEnterCritical+0x4a>
	}
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	20000044 	.word	0x20000044
 8008280:	e000ed04 	.word	0xe000ed04

08008284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800828a:	4b12      	ldr	r3, [pc, #72]	; (80082d4 <vPortExitCritical+0x50>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10a      	bne.n	80082a8 <vPortExitCritical+0x24>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	607b      	str	r3, [r7, #4]
}
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082a8:	4b0a      	ldr	r3, [pc, #40]	; (80082d4 <vPortExitCritical+0x50>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3b01      	subs	r3, #1
 80082ae:	4a09      	ldr	r2, [pc, #36]	; (80082d4 <vPortExitCritical+0x50>)
 80082b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082b2:	4b08      	ldr	r3, [pc, #32]	; (80082d4 <vPortExitCritical+0x50>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d105      	bne.n	80082c6 <vPortExitCritical+0x42>
 80082ba:	2300      	movs	r3, #0
 80082bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	f383 8811 	msr	BASEPRI, r3
}
 80082c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	20000044 	.word	0x20000044
	...

080082e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082e0:	f3ef 8009 	mrs	r0, PSP
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	4b15      	ldr	r3, [pc, #84]	; (8008340 <pxCurrentTCBConst>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	f01e 0f10 	tst.w	lr, #16
 80082f0:	bf08      	it	eq
 80082f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fa:	6010      	str	r0, [r2, #0]
 80082fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008304:	f380 8811 	msr	BASEPRI, r0
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f7ff fb0c 	bl	800792c <vTaskSwitchContext>
 8008314:	f04f 0000 	mov.w	r0, #0
 8008318:	f380 8811 	msr	BASEPRI, r0
 800831c:	bc09      	pop	{r0, r3}
 800831e:	6819      	ldr	r1, [r3, #0]
 8008320:	6808      	ldr	r0, [r1, #0]
 8008322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008326:	f01e 0f10 	tst.w	lr, #16
 800832a:	bf08      	it	eq
 800832c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008330:	f380 8809 	msr	PSP, r0
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	f3af 8000 	nop.w

08008340 <pxCurrentTCBConst>:
 8008340:	20000628 	.word	0x20000628
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop

08008348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	607b      	str	r3, [r7, #4]
}
 8008360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008362:	f7ff fa2b 	bl	80077bc <xTaskIncrementTick>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800836c:	4b06      	ldr	r3, [pc, #24]	; (8008388 <SysTick_Handler+0x40>)
 800836e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	2300      	movs	r3, #0
 8008376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	f383 8811 	msr	BASEPRI, r3
}
 800837e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008380:	bf00      	nop
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	e000ed04 	.word	0xe000ed04

0800838c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008390:	4b0b      	ldr	r3, [pc, #44]	; (80083c0 <vPortSetupTimerInterrupt+0x34>)
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008396:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <vPortSetupTimerInterrupt+0x38>)
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800839c:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <vPortSetupTimerInterrupt+0x3c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a0a      	ldr	r2, [pc, #40]	; (80083cc <vPortSetupTimerInterrupt+0x40>)
 80083a2:	fba2 2303 	umull	r2, r3, r2, r3
 80083a6:	099b      	lsrs	r3, r3, #6
 80083a8:	4a09      	ldr	r2, [pc, #36]	; (80083d0 <vPortSetupTimerInterrupt+0x44>)
 80083aa:	3b01      	subs	r3, #1
 80083ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083ae:	4b04      	ldr	r3, [pc, #16]	; (80083c0 <vPortSetupTimerInterrupt+0x34>)
 80083b0:	2207      	movs	r2, #7
 80083b2:	601a      	str	r2, [r3, #0]
}
 80083b4:	bf00      	nop
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	e000e010 	.word	0xe000e010
 80083c4:	e000e018 	.word	0xe000e018
 80083c8:	20000038 	.word	0x20000038
 80083cc:	10624dd3 	.word	0x10624dd3
 80083d0:	e000e014 	.word	0xe000e014

080083d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80083e4 <vPortEnableVFP+0x10>
 80083d8:	6801      	ldr	r1, [r0, #0]
 80083da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083de:	6001      	str	r1, [r0, #0]
 80083e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083e2:	bf00      	nop
 80083e4:	e000ed88 	.word	0xe000ed88

080083e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083ee:	f3ef 8305 	mrs	r3, IPSR
 80083f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b0f      	cmp	r3, #15
 80083f8:	d914      	bls.n	8008424 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083fa:	4a17      	ldr	r2, [pc, #92]	; (8008458 <vPortValidateInterruptPriority+0x70>)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4413      	add	r3, r2
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008404:	4b15      	ldr	r3, [pc, #84]	; (800845c <vPortValidateInterruptPriority+0x74>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	7afa      	ldrb	r2, [r7, #11]
 800840a:	429a      	cmp	r2, r3
 800840c:	d20a      	bcs.n	8008424 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	607b      	str	r3, [r7, #4]
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008424:	4b0e      	ldr	r3, [pc, #56]	; (8008460 <vPortValidateInterruptPriority+0x78>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800842c:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <vPortValidateInterruptPriority+0x7c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	429a      	cmp	r2, r3
 8008432:	d90a      	bls.n	800844a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	603b      	str	r3, [r7, #0]
}
 8008446:	bf00      	nop
 8008448:	e7fe      	b.n	8008448 <vPortValidateInterruptPriority+0x60>
	}
 800844a:	bf00      	nop
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	e000e3f0 	.word	0xe000e3f0
 800845c:	20000754 	.word	0x20000754
 8008460:	e000ed0c 	.word	0xe000ed0c
 8008464:	20000758 	.word	0x20000758

08008468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08a      	sub	sp, #40	; 0x28
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008470:	2300      	movs	r3, #0
 8008472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008474:	f7ff f8f8 	bl	8007668 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008478:	4b5b      	ldr	r3, [pc, #364]	; (80085e8 <pvPortMalloc+0x180>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008480:	f000 f920 	bl	80086c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008484:	4b59      	ldr	r3, [pc, #356]	; (80085ec <pvPortMalloc+0x184>)
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4013      	ands	r3, r2
 800848c:	2b00      	cmp	r3, #0
 800848e:	f040 8093 	bne.w	80085b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01d      	beq.n	80084d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008498:	2208      	movs	r2, #8
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4413      	add	r3, r2
 800849e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d014      	beq.n	80084d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f023 0307 	bic.w	r3, r3, #7
 80084b0:	3308      	adds	r3, #8
 80084b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <pvPortMalloc+0x6c>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	617b      	str	r3, [r7, #20]
}
 80084d0:	bf00      	nop
 80084d2:	e7fe      	b.n	80084d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d06e      	beq.n	80085b8 <pvPortMalloc+0x150>
 80084da:	4b45      	ldr	r3, [pc, #276]	; (80085f0 <pvPortMalloc+0x188>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d869      	bhi.n	80085b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084e4:	4b43      	ldr	r3, [pc, #268]	; (80085f4 <pvPortMalloc+0x18c>)
 80084e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084e8:	4b42      	ldr	r3, [pc, #264]	; (80085f4 <pvPortMalloc+0x18c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084ee:	e004      	b.n	80084fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	429a      	cmp	r2, r3
 8008502:	d903      	bls.n	800850c <pvPortMalloc+0xa4>
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1f1      	bne.n	80084f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800850c:	4b36      	ldr	r3, [pc, #216]	; (80085e8 <pvPortMalloc+0x180>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008512:	429a      	cmp	r2, r3
 8008514:	d050      	beq.n	80085b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2208      	movs	r2, #8
 800851c:	4413      	add	r3, r2
 800851e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	1ad2      	subs	r2, r2, r3
 8008530:	2308      	movs	r3, #8
 8008532:	005b      	lsls	r3, r3, #1
 8008534:	429a      	cmp	r2, r3
 8008536:	d91f      	bls.n	8008578 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4413      	add	r3, r2
 800853e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	f003 0307 	and.w	r3, r3, #7
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <pvPortMalloc+0xf8>
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	613b      	str	r3, [r7, #16]
}
 800855c:	bf00      	nop
 800855e:	e7fe      	b.n	800855e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	1ad2      	subs	r2, r2, r3
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800856c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008572:	69b8      	ldr	r0, [r7, #24]
 8008574:	f000 f908 	bl	8008788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008578:	4b1d      	ldr	r3, [pc, #116]	; (80085f0 <pvPortMalloc+0x188>)
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	4a1b      	ldr	r2, [pc, #108]	; (80085f0 <pvPortMalloc+0x188>)
 8008584:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008586:	4b1a      	ldr	r3, [pc, #104]	; (80085f0 <pvPortMalloc+0x188>)
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	4b1b      	ldr	r3, [pc, #108]	; (80085f8 <pvPortMalloc+0x190>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	429a      	cmp	r2, r3
 8008590:	d203      	bcs.n	800859a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008592:	4b17      	ldr	r3, [pc, #92]	; (80085f0 <pvPortMalloc+0x188>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a18      	ldr	r2, [pc, #96]	; (80085f8 <pvPortMalloc+0x190>)
 8008598:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	4b13      	ldr	r3, [pc, #76]	; (80085ec <pvPortMalloc+0x184>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	431a      	orrs	r2, r3
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085ae:	4b13      	ldr	r3, [pc, #76]	; (80085fc <pvPortMalloc+0x194>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3301      	adds	r3, #1
 80085b4:	4a11      	ldr	r2, [pc, #68]	; (80085fc <pvPortMalloc+0x194>)
 80085b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085b8:	f7ff f864 	bl	8007684 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	f003 0307 	and.w	r3, r3, #7
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <pvPortMalloc+0x174>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	60fb      	str	r3, [r7, #12]
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <pvPortMalloc+0x172>
	return pvReturn;
 80085dc:	69fb      	ldr	r3, [r7, #28]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3728      	adds	r7, #40	; 0x28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20004364 	.word	0x20004364
 80085ec:	20004378 	.word	0x20004378
 80085f0:	20004368 	.word	0x20004368
 80085f4:	2000435c 	.word	0x2000435c
 80085f8:	2000436c 	.word	0x2000436c
 80085fc:	20004370 	.word	0x20004370

08008600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d04d      	beq.n	80086ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008612:	2308      	movs	r3, #8
 8008614:	425b      	negs	r3, r3
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	4413      	add	r3, r2
 800861a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	685a      	ldr	r2, [r3, #4]
 8008624:	4b24      	ldr	r3, [pc, #144]	; (80086b8 <vPortFree+0xb8>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4013      	ands	r3, r2
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10a      	bne.n	8008644 <vPortFree+0x44>
	__asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	60fb      	str	r3, [r7, #12]
}
 8008640:	bf00      	nop
 8008642:	e7fe      	b.n	8008642 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00a      	beq.n	8008662 <vPortFree+0x62>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	60bb      	str	r3, [r7, #8]
}
 800865e:	bf00      	nop
 8008660:	e7fe      	b.n	8008660 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	4b14      	ldr	r3, [pc, #80]	; (80086b8 <vPortFree+0xb8>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4013      	ands	r3, r2
 800866c:	2b00      	cmp	r3, #0
 800866e:	d01e      	beq.n	80086ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d11a      	bne.n	80086ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	685a      	ldr	r2, [r3, #4]
 800867c:	4b0e      	ldr	r3, [pc, #56]	; (80086b8 <vPortFree+0xb8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	43db      	mvns	r3, r3
 8008682:	401a      	ands	r2, r3
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008688:	f7fe ffee 	bl	8007668 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <vPortFree+0xbc>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4413      	add	r3, r2
 8008696:	4a09      	ldr	r2, [pc, #36]	; (80086bc <vPortFree+0xbc>)
 8008698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800869a:	6938      	ldr	r0, [r7, #16]
 800869c:	f000 f874 	bl	8008788 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086a0:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <vPortFree+0xc0>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3301      	adds	r3, #1
 80086a6:	4a06      	ldr	r2, [pc, #24]	; (80086c0 <vPortFree+0xc0>)
 80086a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086aa:	f7fe ffeb 	bl	8007684 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086ae:	bf00      	nop
 80086b0:	3718      	adds	r7, #24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20004378 	.word	0x20004378
 80086bc:	20004368 	.word	0x20004368
 80086c0:	20004374 	.word	0x20004374

080086c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80086ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086d0:	4b27      	ldr	r3, [pc, #156]	; (8008770 <prvHeapInit+0xac>)
 80086d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f003 0307 	and.w	r3, r3, #7
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00c      	beq.n	80086f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3307      	adds	r3, #7
 80086e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f023 0307 	bic.w	r3, r3, #7
 80086ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	4a1f      	ldr	r2, [pc, #124]	; (8008770 <prvHeapInit+0xac>)
 80086f4:	4413      	add	r3, r2
 80086f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086fc:	4a1d      	ldr	r2, [pc, #116]	; (8008774 <prvHeapInit+0xb0>)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008702:	4b1c      	ldr	r3, [pc, #112]	; (8008774 <prvHeapInit+0xb0>)
 8008704:	2200      	movs	r2, #0
 8008706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	4413      	add	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008710:	2208      	movs	r2, #8
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	1a9b      	subs	r3, r3, r2
 8008716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 0307 	bic.w	r3, r3, #7
 800871e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4a15      	ldr	r2, [pc, #84]	; (8008778 <prvHeapInit+0xb4>)
 8008724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008726:	4b14      	ldr	r3, [pc, #80]	; (8008778 <prvHeapInit+0xb4>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2200      	movs	r2, #0
 800872c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800872e:	4b12      	ldr	r3, [pc, #72]	; (8008778 <prvHeapInit+0xb4>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	1ad2      	subs	r2, r2, r3
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008744:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <prvHeapInit+0xb4>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	4a0a      	ldr	r2, [pc, #40]	; (800877c <prvHeapInit+0xb8>)
 8008752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	4a09      	ldr	r2, [pc, #36]	; (8008780 <prvHeapInit+0xbc>)
 800875a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800875c:	4b09      	ldr	r3, [pc, #36]	; (8008784 <prvHeapInit+0xc0>)
 800875e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008762:	601a      	str	r2, [r3, #0]
}
 8008764:	bf00      	nop
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	2000075c 	.word	0x2000075c
 8008774:	2000435c 	.word	0x2000435c
 8008778:	20004364 	.word	0x20004364
 800877c:	2000436c 	.word	0x2000436c
 8008780:	20004368 	.word	0x20004368
 8008784:	20004378 	.word	0x20004378

08008788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008790:	4b28      	ldr	r3, [pc, #160]	; (8008834 <prvInsertBlockIntoFreeList+0xac>)
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	e002      	b.n	800879c <prvInsertBlockIntoFreeList+0x14>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d8f7      	bhi.n	8008796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	4413      	add	r3, r2
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d108      	bne.n	80087ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	441a      	add	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	441a      	add	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d118      	bne.n	8008810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	4b15      	ldr	r3, [pc, #84]	; (8008838 <prvInsertBlockIntoFreeList+0xb0>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d00d      	beq.n	8008806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	441a      	add	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	e008      	b.n	8008818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008806:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <prvInsertBlockIntoFreeList+0xb0>)
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	e003      	b.n	8008818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	429a      	cmp	r2, r3
 800881e:	d002      	beq.n	8008826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008826:	bf00      	nop
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	2000435c 	.word	0x2000435c
 8008838:	20004364 	.word	0x20004364

0800883c <atof>:
 800883c:	2100      	movs	r1, #0
 800883e:	f001 bd75 	b.w	800a32c <strtod>

08008842 <atoi>:
 8008842:	220a      	movs	r2, #10
 8008844:	2100      	movs	r1, #0
 8008846:	f001 be01 	b.w	800a44c <strtol>
	...

0800884c <__errno>:
 800884c:	4b01      	ldr	r3, [pc, #4]	; (8008854 <__errno+0x8>)
 800884e:	6818      	ldr	r0, [r3, #0]
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	20000048 	.word	0x20000048

08008858 <std>:
 8008858:	2300      	movs	r3, #0
 800885a:	b510      	push	{r4, lr}
 800885c:	4604      	mov	r4, r0
 800885e:	e9c0 3300 	strd	r3, r3, [r0]
 8008862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008866:	6083      	str	r3, [r0, #8]
 8008868:	8181      	strh	r1, [r0, #12]
 800886a:	6643      	str	r3, [r0, #100]	; 0x64
 800886c:	81c2      	strh	r2, [r0, #14]
 800886e:	6183      	str	r3, [r0, #24]
 8008870:	4619      	mov	r1, r3
 8008872:	2208      	movs	r2, #8
 8008874:	305c      	adds	r0, #92	; 0x5c
 8008876:	f000 f91a 	bl	8008aae <memset>
 800887a:	4b05      	ldr	r3, [pc, #20]	; (8008890 <std+0x38>)
 800887c:	6263      	str	r3, [r4, #36]	; 0x24
 800887e:	4b05      	ldr	r3, [pc, #20]	; (8008894 <std+0x3c>)
 8008880:	62a3      	str	r3, [r4, #40]	; 0x28
 8008882:	4b05      	ldr	r3, [pc, #20]	; (8008898 <std+0x40>)
 8008884:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008886:	4b05      	ldr	r3, [pc, #20]	; (800889c <std+0x44>)
 8008888:	6224      	str	r4, [r4, #32]
 800888a:	6323      	str	r3, [r4, #48]	; 0x30
 800888c:	bd10      	pop	{r4, pc}
 800888e:	bf00      	nop
 8008890:	08009659 	.word	0x08009659
 8008894:	0800967b 	.word	0x0800967b
 8008898:	080096b3 	.word	0x080096b3
 800889c:	080096d7 	.word	0x080096d7

080088a0 <_cleanup_r>:
 80088a0:	4901      	ldr	r1, [pc, #4]	; (80088a8 <_cleanup_r+0x8>)
 80088a2:	f000 b8af 	b.w	8008a04 <_fwalk_reent>
 80088a6:	bf00      	nop
 80088a8:	0800b425 	.word	0x0800b425

080088ac <__sfmoreglue>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	1e4a      	subs	r2, r1, #1
 80088b0:	2568      	movs	r5, #104	; 0x68
 80088b2:	4355      	muls	r5, r2
 80088b4:	460e      	mov	r6, r1
 80088b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80088ba:	f000 f901 	bl	8008ac0 <_malloc_r>
 80088be:	4604      	mov	r4, r0
 80088c0:	b140      	cbz	r0, 80088d4 <__sfmoreglue+0x28>
 80088c2:	2100      	movs	r1, #0
 80088c4:	e9c0 1600 	strd	r1, r6, [r0]
 80088c8:	300c      	adds	r0, #12
 80088ca:	60a0      	str	r0, [r4, #8]
 80088cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80088d0:	f000 f8ed 	bl	8008aae <memset>
 80088d4:	4620      	mov	r0, r4
 80088d6:	bd70      	pop	{r4, r5, r6, pc}

080088d8 <__sfp_lock_acquire>:
 80088d8:	4801      	ldr	r0, [pc, #4]	; (80088e0 <__sfp_lock_acquire+0x8>)
 80088da:	f000 b8d8 	b.w	8008a8e <__retarget_lock_acquire_recursive>
 80088de:	bf00      	nop
 80088e0:	2000460c 	.word	0x2000460c

080088e4 <__sfp_lock_release>:
 80088e4:	4801      	ldr	r0, [pc, #4]	; (80088ec <__sfp_lock_release+0x8>)
 80088e6:	f000 b8d3 	b.w	8008a90 <__retarget_lock_release_recursive>
 80088ea:	bf00      	nop
 80088ec:	2000460c 	.word	0x2000460c

080088f0 <__sinit_lock_acquire>:
 80088f0:	4801      	ldr	r0, [pc, #4]	; (80088f8 <__sinit_lock_acquire+0x8>)
 80088f2:	f000 b8cc 	b.w	8008a8e <__retarget_lock_acquire_recursive>
 80088f6:	bf00      	nop
 80088f8:	20004607 	.word	0x20004607

080088fc <__sinit_lock_release>:
 80088fc:	4801      	ldr	r0, [pc, #4]	; (8008904 <__sinit_lock_release+0x8>)
 80088fe:	f000 b8c7 	b.w	8008a90 <__retarget_lock_release_recursive>
 8008902:	bf00      	nop
 8008904:	20004607 	.word	0x20004607

08008908 <__sinit>:
 8008908:	b510      	push	{r4, lr}
 800890a:	4604      	mov	r4, r0
 800890c:	f7ff fff0 	bl	80088f0 <__sinit_lock_acquire>
 8008910:	69a3      	ldr	r3, [r4, #24]
 8008912:	b11b      	cbz	r3, 800891c <__sinit+0x14>
 8008914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008918:	f7ff bff0 	b.w	80088fc <__sinit_lock_release>
 800891c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008920:	6523      	str	r3, [r4, #80]	; 0x50
 8008922:	4b13      	ldr	r3, [pc, #76]	; (8008970 <__sinit+0x68>)
 8008924:	4a13      	ldr	r2, [pc, #76]	; (8008974 <__sinit+0x6c>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	62a2      	str	r2, [r4, #40]	; 0x28
 800892a:	42a3      	cmp	r3, r4
 800892c:	bf04      	itt	eq
 800892e:	2301      	moveq	r3, #1
 8008930:	61a3      	streq	r3, [r4, #24]
 8008932:	4620      	mov	r0, r4
 8008934:	f000 f820 	bl	8008978 <__sfp>
 8008938:	6060      	str	r0, [r4, #4]
 800893a:	4620      	mov	r0, r4
 800893c:	f000 f81c 	bl	8008978 <__sfp>
 8008940:	60a0      	str	r0, [r4, #8]
 8008942:	4620      	mov	r0, r4
 8008944:	f000 f818 	bl	8008978 <__sfp>
 8008948:	2200      	movs	r2, #0
 800894a:	60e0      	str	r0, [r4, #12]
 800894c:	2104      	movs	r1, #4
 800894e:	6860      	ldr	r0, [r4, #4]
 8008950:	f7ff ff82 	bl	8008858 <std>
 8008954:	68a0      	ldr	r0, [r4, #8]
 8008956:	2201      	movs	r2, #1
 8008958:	2109      	movs	r1, #9
 800895a:	f7ff ff7d 	bl	8008858 <std>
 800895e:	68e0      	ldr	r0, [r4, #12]
 8008960:	2202      	movs	r2, #2
 8008962:	2112      	movs	r1, #18
 8008964:	f7ff ff78 	bl	8008858 <std>
 8008968:	2301      	movs	r3, #1
 800896a:	61a3      	str	r3, [r4, #24]
 800896c:	e7d2      	b.n	8008914 <__sinit+0xc>
 800896e:	bf00      	nop
 8008970:	0800f73c 	.word	0x0800f73c
 8008974:	080088a1 	.word	0x080088a1

08008978 <__sfp>:
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897a:	4607      	mov	r7, r0
 800897c:	f7ff ffac 	bl	80088d8 <__sfp_lock_acquire>
 8008980:	4b1e      	ldr	r3, [pc, #120]	; (80089fc <__sfp+0x84>)
 8008982:	681e      	ldr	r6, [r3, #0]
 8008984:	69b3      	ldr	r3, [r6, #24]
 8008986:	b913      	cbnz	r3, 800898e <__sfp+0x16>
 8008988:	4630      	mov	r0, r6
 800898a:	f7ff ffbd 	bl	8008908 <__sinit>
 800898e:	3648      	adds	r6, #72	; 0x48
 8008990:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008994:	3b01      	subs	r3, #1
 8008996:	d503      	bpl.n	80089a0 <__sfp+0x28>
 8008998:	6833      	ldr	r3, [r6, #0]
 800899a:	b30b      	cbz	r3, 80089e0 <__sfp+0x68>
 800899c:	6836      	ldr	r6, [r6, #0]
 800899e:	e7f7      	b.n	8008990 <__sfp+0x18>
 80089a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089a4:	b9d5      	cbnz	r5, 80089dc <__sfp+0x64>
 80089a6:	4b16      	ldr	r3, [pc, #88]	; (8008a00 <__sfp+0x88>)
 80089a8:	60e3      	str	r3, [r4, #12]
 80089aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80089ae:	6665      	str	r5, [r4, #100]	; 0x64
 80089b0:	f000 f86c 	bl	8008a8c <__retarget_lock_init_recursive>
 80089b4:	f7ff ff96 	bl	80088e4 <__sfp_lock_release>
 80089b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80089bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80089c0:	6025      	str	r5, [r4, #0]
 80089c2:	61a5      	str	r5, [r4, #24]
 80089c4:	2208      	movs	r2, #8
 80089c6:	4629      	mov	r1, r5
 80089c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089cc:	f000 f86f 	bl	8008aae <memset>
 80089d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80089d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80089d8:	4620      	mov	r0, r4
 80089da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089dc:	3468      	adds	r4, #104	; 0x68
 80089de:	e7d9      	b.n	8008994 <__sfp+0x1c>
 80089e0:	2104      	movs	r1, #4
 80089e2:	4638      	mov	r0, r7
 80089e4:	f7ff ff62 	bl	80088ac <__sfmoreglue>
 80089e8:	4604      	mov	r4, r0
 80089ea:	6030      	str	r0, [r6, #0]
 80089ec:	2800      	cmp	r0, #0
 80089ee:	d1d5      	bne.n	800899c <__sfp+0x24>
 80089f0:	f7ff ff78 	bl	80088e4 <__sfp_lock_release>
 80089f4:	230c      	movs	r3, #12
 80089f6:	603b      	str	r3, [r7, #0]
 80089f8:	e7ee      	b.n	80089d8 <__sfp+0x60>
 80089fa:	bf00      	nop
 80089fc:	0800f73c 	.word	0x0800f73c
 8008a00:	ffff0001 	.word	0xffff0001

08008a04 <_fwalk_reent>:
 8008a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a08:	4606      	mov	r6, r0
 8008a0a:	4688      	mov	r8, r1
 8008a0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a10:	2700      	movs	r7, #0
 8008a12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a16:	f1b9 0901 	subs.w	r9, r9, #1
 8008a1a:	d505      	bpl.n	8008a28 <_fwalk_reent+0x24>
 8008a1c:	6824      	ldr	r4, [r4, #0]
 8008a1e:	2c00      	cmp	r4, #0
 8008a20:	d1f7      	bne.n	8008a12 <_fwalk_reent+0xe>
 8008a22:	4638      	mov	r0, r7
 8008a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a28:	89ab      	ldrh	r3, [r5, #12]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d907      	bls.n	8008a3e <_fwalk_reent+0x3a>
 8008a2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a32:	3301      	adds	r3, #1
 8008a34:	d003      	beq.n	8008a3e <_fwalk_reent+0x3a>
 8008a36:	4629      	mov	r1, r5
 8008a38:	4630      	mov	r0, r6
 8008a3a:	47c0      	blx	r8
 8008a3c:	4307      	orrs	r7, r0
 8008a3e:	3568      	adds	r5, #104	; 0x68
 8008a40:	e7e9      	b.n	8008a16 <_fwalk_reent+0x12>
	...

08008a44 <__libc_init_array>:
 8008a44:	b570      	push	{r4, r5, r6, lr}
 8008a46:	4d0d      	ldr	r5, [pc, #52]	; (8008a7c <__libc_init_array+0x38>)
 8008a48:	4c0d      	ldr	r4, [pc, #52]	; (8008a80 <__libc_init_array+0x3c>)
 8008a4a:	1b64      	subs	r4, r4, r5
 8008a4c:	10a4      	asrs	r4, r4, #2
 8008a4e:	2600      	movs	r6, #0
 8008a50:	42a6      	cmp	r6, r4
 8008a52:	d109      	bne.n	8008a68 <__libc_init_array+0x24>
 8008a54:	4d0b      	ldr	r5, [pc, #44]	; (8008a84 <__libc_init_array+0x40>)
 8008a56:	4c0c      	ldr	r4, [pc, #48]	; (8008a88 <__libc_init_array+0x44>)
 8008a58:	f006 fc14 	bl	800f284 <_init>
 8008a5c:	1b64      	subs	r4, r4, r5
 8008a5e:	10a4      	asrs	r4, r4, #2
 8008a60:	2600      	movs	r6, #0
 8008a62:	42a6      	cmp	r6, r4
 8008a64:	d105      	bne.n	8008a72 <__libc_init_array+0x2e>
 8008a66:	bd70      	pop	{r4, r5, r6, pc}
 8008a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a6c:	4798      	blx	r3
 8008a6e:	3601      	adds	r6, #1
 8008a70:	e7ee      	b.n	8008a50 <__libc_init_array+0xc>
 8008a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a76:	4798      	blx	r3
 8008a78:	3601      	adds	r6, #1
 8008a7a:	e7f2      	b.n	8008a62 <__libc_init_array+0x1e>
 8008a7c:	0800fe30 	.word	0x0800fe30
 8008a80:	0800fe30 	.word	0x0800fe30
 8008a84:	0800fe30 	.word	0x0800fe30
 8008a88:	0800fe34 	.word	0x0800fe34

08008a8c <__retarget_lock_init_recursive>:
 8008a8c:	4770      	bx	lr

08008a8e <__retarget_lock_acquire_recursive>:
 8008a8e:	4770      	bx	lr

08008a90 <__retarget_lock_release_recursive>:
 8008a90:	4770      	bx	lr

08008a92 <memcpy>:
 8008a92:	440a      	add	r2, r1
 8008a94:	4291      	cmp	r1, r2
 8008a96:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a9a:	d100      	bne.n	8008a9e <memcpy+0xc>
 8008a9c:	4770      	bx	lr
 8008a9e:	b510      	push	{r4, lr}
 8008aa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008aa8:	4291      	cmp	r1, r2
 8008aaa:	d1f9      	bne.n	8008aa0 <memcpy+0xe>
 8008aac:	bd10      	pop	{r4, pc}

08008aae <memset>:
 8008aae:	4402      	add	r2, r0
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d100      	bne.n	8008ab8 <memset+0xa>
 8008ab6:	4770      	bx	lr
 8008ab8:	f803 1b01 	strb.w	r1, [r3], #1
 8008abc:	e7f9      	b.n	8008ab2 <memset+0x4>
	...

08008ac0 <_malloc_r>:
 8008ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac2:	1ccd      	adds	r5, r1, #3
 8008ac4:	f025 0503 	bic.w	r5, r5, #3
 8008ac8:	3508      	adds	r5, #8
 8008aca:	2d0c      	cmp	r5, #12
 8008acc:	bf38      	it	cc
 8008ace:	250c      	movcc	r5, #12
 8008ad0:	2d00      	cmp	r5, #0
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	db01      	blt.n	8008ada <_malloc_r+0x1a>
 8008ad6:	42a9      	cmp	r1, r5
 8008ad8:	d903      	bls.n	8008ae2 <_malloc_r+0x22>
 8008ada:	230c      	movs	r3, #12
 8008adc:	6033      	str	r3, [r6, #0]
 8008ade:	2000      	movs	r0, #0
 8008ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ae2:	f003 f8df 	bl	800bca4 <__malloc_lock>
 8008ae6:	4921      	ldr	r1, [pc, #132]	; (8008b6c <_malloc_r+0xac>)
 8008ae8:	680a      	ldr	r2, [r1, #0]
 8008aea:	4614      	mov	r4, r2
 8008aec:	b99c      	cbnz	r4, 8008b16 <_malloc_r+0x56>
 8008aee:	4f20      	ldr	r7, [pc, #128]	; (8008b70 <_malloc_r+0xb0>)
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	b923      	cbnz	r3, 8008afe <_malloc_r+0x3e>
 8008af4:	4621      	mov	r1, r4
 8008af6:	4630      	mov	r0, r6
 8008af8:	f000 fd9e 	bl	8009638 <_sbrk_r>
 8008afc:	6038      	str	r0, [r7, #0]
 8008afe:	4629      	mov	r1, r5
 8008b00:	4630      	mov	r0, r6
 8008b02:	f000 fd99 	bl	8009638 <_sbrk_r>
 8008b06:	1c43      	adds	r3, r0, #1
 8008b08:	d123      	bne.n	8008b52 <_malloc_r+0x92>
 8008b0a:	230c      	movs	r3, #12
 8008b0c:	6033      	str	r3, [r6, #0]
 8008b0e:	4630      	mov	r0, r6
 8008b10:	f003 f8ce 	bl	800bcb0 <__malloc_unlock>
 8008b14:	e7e3      	b.n	8008ade <_malloc_r+0x1e>
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	1b5b      	subs	r3, r3, r5
 8008b1a:	d417      	bmi.n	8008b4c <_malloc_r+0x8c>
 8008b1c:	2b0b      	cmp	r3, #11
 8008b1e:	d903      	bls.n	8008b28 <_malloc_r+0x68>
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	441c      	add	r4, r3
 8008b24:	6025      	str	r5, [r4, #0]
 8008b26:	e004      	b.n	8008b32 <_malloc_r+0x72>
 8008b28:	6863      	ldr	r3, [r4, #4]
 8008b2a:	42a2      	cmp	r2, r4
 8008b2c:	bf0c      	ite	eq
 8008b2e:	600b      	streq	r3, [r1, #0]
 8008b30:	6053      	strne	r3, [r2, #4]
 8008b32:	4630      	mov	r0, r6
 8008b34:	f003 f8bc 	bl	800bcb0 <__malloc_unlock>
 8008b38:	f104 000b 	add.w	r0, r4, #11
 8008b3c:	1d23      	adds	r3, r4, #4
 8008b3e:	f020 0007 	bic.w	r0, r0, #7
 8008b42:	1ac2      	subs	r2, r0, r3
 8008b44:	d0cc      	beq.n	8008ae0 <_malloc_r+0x20>
 8008b46:	1a1b      	subs	r3, r3, r0
 8008b48:	50a3      	str	r3, [r4, r2]
 8008b4a:	e7c9      	b.n	8008ae0 <_malloc_r+0x20>
 8008b4c:	4622      	mov	r2, r4
 8008b4e:	6864      	ldr	r4, [r4, #4]
 8008b50:	e7cc      	b.n	8008aec <_malloc_r+0x2c>
 8008b52:	1cc4      	adds	r4, r0, #3
 8008b54:	f024 0403 	bic.w	r4, r4, #3
 8008b58:	42a0      	cmp	r0, r4
 8008b5a:	d0e3      	beq.n	8008b24 <_malloc_r+0x64>
 8008b5c:	1a21      	subs	r1, r4, r0
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f000 fd6a 	bl	8009638 <_sbrk_r>
 8008b64:	3001      	adds	r0, #1
 8008b66:	d1dd      	bne.n	8008b24 <_malloc_r+0x64>
 8008b68:	e7cf      	b.n	8008b0a <_malloc_r+0x4a>
 8008b6a:	bf00      	nop
 8008b6c:	2000437c 	.word	0x2000437c
 8008b70:	20004380 	.word	0x20004380

08008b74 <__cvt>:
 8008b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b78:	ec55 4b10 	vmov	r4, r5, d0
 8008b7c:	2d00      	cmp	r5, #0
 8008b7e:	460e      	mov	r6, r1
 8008b80:	4619      	mov	r1, r3
 8008b82:	462b      	mov	r3, r5
 8008b84:	bfbb      	ittet	lt
 8008b86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008b8a:	461d      	movlt	r5, r3
 8008b8c:	2300      	movge	r3, #0
 8008b8e:	232d      	movlt	r3, #45	; 0x2d
 8008b90:	700b      	strb	r3, [r1, #0]
 8008b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008b98:	4691      	mov	r9, r2
 8008b9a:	f023 0820 	bic.w	r8, r3, #32
 8008b9e:	bfbc      	itt	lt
 8008ba0:	4622      	movlt	r2, r4
 8008ba2:	4614      	movlt	r4, r2
 8008ba4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ba8:	d005      	beq.n	8008bb6 <__cvt+0x42>
 8008baa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008bae:	d100      	bne.n	8008bb2 <__cvt+0x3e>
 8008bb0:	3601      	adds	r6, #1
 8008bb2:	2102      	movs	r1, #2
 8008bb4:	e000      	b.n	8008bb8 <__cvt+0x44>
 8008bb6:	2103      	movs	r1, #3
 8008bb8:	ab03      	add	r3, sp, #12
 8008bba:	9301      	str	r3, [sp, #4]
 8008bbc:	ab02      	add	r3, sp, #8
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	ec45 4b10 	vmov	d0, r4, r5
 8008bc4:	4653      	mov	r3, sl
 8008bc6:	4632      	mov	r2, r6
 8008bc8:	f001 fdba 	bl	800a740 <_dtoa_r>
 8008bcc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008bd0:	4607      	mov	r7, r0
 8008bd2:	d102      	bne.n	8008bda <__cvt+0x66>
 8008bd4:	f019 0f01 	tst.w	r9, #1
 8008bd8:	d022      	beq.n	8008c20 <__cvt+0xac>
 8008bda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008bde:	eb07 0906 	add.w	r9, r7, r6
 8008be2:	d110      	bne.n	8008c06 <__cvt+0x92>
 8008be4:	783b      	ldrb	r3, [r7, #0]
 8008be6:	2b30      	cmp	r3, #48	; 0x30
 8008be8:	d10a      	bne.n	8008c00 <__cvt+0x8c>
 8008bea:	2200      	movs	r2, #0
 8008bec:	2300      	movs	r3, #0
 8008bee:	4620      	mov	r0, r4
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	f7f7 ff99 	bl	8000b28 <__aeabi_dcmpeq>
 8008bf6:	b918      	cbnz	r0, 8008c00 <__cvt+0x8c>
 8008bf8:	f1c6 0601 	rsb	r6, r6, #1
 8008bfc:	f8ca 6000 	str.w	r6, [sl]
 8008c00:	f8da 3000 	ldr.w	r3, [sl]
 8008c04:	4499      	add	r9, r3
 8008c06:	2200      	movs	r2, #0
 8008c08:	2300      	movs	r3, #0
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	f7f7 ff8b 	bl	8000b28 <__aeabi_dcmpeq>
 8008c12:	b108      	cbz	r0, 8008c18 <__cvt+0xa4>
 8008c14:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c18:	2230      	movs	r2, #48	; 0x30
 8008c1a:	9b03      	ldr	r3, [sp, #12]
 8008c1c:	454b      	cmp	r3, r9
 8008c1e:	d307      	bcc.n	8008c30 <__cvt+0xbc>
 8008c20:	9b03      	ldr	r3, [sp, #12]
 8008c22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c24:	1bdb      	subs	r3, r3, r7
 8008c26:	4638      	mov	r0, r7
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	b004      	add	sp, #16
 8008c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c30:	1c59      	adds	r1, r3, #1
 8008c32:	9103      	str	r1, [sp, #12]
 8008c34:	701a      	strb	r2, [r3, #0]
 8008c36:	e7f0      	b.n	8008c1a <__cvt+0xa6>

08008c38 <__exponent>:
 8008c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2900      	cmp	r1, #0
 8008c3e:	bfb8      	it	lt
 8008c40:	4249      	neglt	r1, r1
 8008c42:	f803 2b02 	strb.w	r2, [r3], #2
 8008c46:	bfb4      	ite	lt
 8008c48:	222d      	movlt	r2, #45	; 0x2d
 8008c4a:	222b      	movge	r2, #43	; 0x2b
 8008c4c:	2909      	cmp	r1, #9
 8008c4e:	7042      	strb	r2, [r0, #1]
 8008c50:	dd2a      	ble.n	8008ca8 <__exponent+0x70>
 8008c52:	f10d 0407 	add.w	r4, sp, #7
 8008c56:	46a4      	mov	ip, r4
 8008c58:	270a      	movs	r7, #10
 8008c5a:	46a6      	mov	lr, r4
 8008c5c:	460a      	mov	r2, r1
 8008c5e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008c62:	fb07 1516 	mls	r5, r7, r6, r1
 8008c66:	3530      	adds	r5, #48	; 0x30
 8008c68:	2a63      	cmp	r2, #99	; 0x63
 8008c6a:	f104 34ff 	add.w	r4, r4, #4294967295
 8008c6e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008c72:	4631      	mov	r1, r6
 8008c74:	dcf1      	bgt.n	8008c5a <__exponent+0x22>
 8008c76:	3130      	adds	r1, #48	; 0x30
 8008c78:	f1ae 0502 	sub.w	r5, lr, #2
 8008c7c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008c80:	1c44      	adds	r4, r0, #1
 8008c82:	4629      	mov	r1, r5
 8008c84:	4561      	cmp	r1, ip
 8008c86:	d30a      	bcc.n	8008c9e <__exponent+0x66>
 8008c88:	f10d 0209 	add.w	r2, sp, #9
 8008c8c:	eba2 020e 	sub.w	r2, r2, lr
 8008c90:	4565      	cmp	r5, ip
 8008c92:	bf88      	it	hi
 8008c94:	2200      	movhi	r2, #0
 8008c96:	4413      	add	r3, r2
 8008c98:	1a18      	subs	r0, r3, r0
 8008c9a:	b003      	add	sp, #12
 8008c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ca2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008ca6:	e7ed      	b.n	8008c84 <__exponent+0x4c>
 8008ca8:	2330      	movs	r3, #48	; 0x30
 8008caa:	3130      	adds	r1, #48	; 0x30
 8008cac:	7083      	strb	r3, [r0, #2]
 8008cae:	70c1      	strb	r1, [r0, #3]
 8008cb0:	1d03      	adds	r3, r0, #4
 8008cb2:	e7f1      	b.n	8008c98 <__exponent+0x60>

08008cb4 <_printf_float>:
 8008cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb8:	ed2d 8b02 	vpush	{d8}
 8008cbc:	b08d      	sub	sp, #52	; 0x34
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008cc4:	4616      	mov	r6, r2
 8008cc6:	461f      	mov	r7, r3
 8008cc8:	4605      	mov	r5, r0
 8008cca:	f002 ff57 	bl	800bb7c <_localeconv_r>
 8008cce:	f8d0 a000 	ldr.w	sl, [r0]
 8008cd2:	4650      	mov	r0, sl
 8008cd4:	f7f7 faa6 	bl	8000224 <strlen>
 8008cd8:	2300      	movs	r3, #0
 8008cda:	930a      	str	r3, [sp, #40]	; 0x28
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	9305      	str	r3, [sp, #20]
 8008ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ce4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008ce8:	3307      	adds	r3, #7
 8008cea:	f023 0307 	bic.w	r3, r3, #7
 8008cee:	f103 0208 	add.w	r2, r3, #8
 8008cf2:	f8c8 2000 	str.w	r2, [r8]
 8008cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008cfe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008d02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d06:	9307      	str	r3, [sp, #28]
 8008d08:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d0c:	ee08 0a10 	vmov	s16, r0
 8008d10:	4b9f      	ldr	r3, [pc, #636]	; (8008f90 <_printf_float+0x2dc>)
 8008d12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d16:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1a:	f7f7 ff37 	bl	8000b8c <__aeabi_dcmpun>
 8008d1e:	bb88      	cbnz	r0, 8008d84 <_printf_float+0xd0>
 8008d20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d24:	4b9a      	ldr	r3, [pc, #616]	; (8008f90 <_printf_float+0x2dc>)
 8008d26:	f04f 32ff 	mov.w	r2, #4294967295
 8008d2a:	f7f7 ff11 	bl	8000b50 <__aeabi_dcmple>
 8008d2e:	bb48      	cbnz	r0, 8008d84 <_printf_float+0xd0>
 8008d30:	2200      	movs	r2, #0
 8008d32:	2300      	movs	r3, #0
 8008d34:	4640      	mov	r0, r8
 8008d36:	4649      	mov	r1, r9
 8008d38:	f7f7 ff00 	bl	8000b3c <__aeabi_dcmplt>
 8008d3c:	b110      	cbz	r0, 8008d44 <_printf_float+0x90>
 8008d3e:	232d      	movs	r3, #45	; 0x2d
 8008d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d44:	4b93      	ldr	r3, [pc, #588]	; (8008f94 <_printf_float+0x2e0>)
 8008d46:	4894      	ldr	r0, [pc, #592]	; (8008f98 <_printf_float+0x2e4>)
 8008d48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008d4c:	bf94      	ite	ls
 8008d4e:	4698      	movls	r8, r3
 8008d50:	4680      	movhi	r8, r0
 8008d52:	2303      	movs	r3, #3
 8008d54:	6123      	str	r3, [r4, #16]
 8008d56:	9b05      	ldr	r3, [sp, #20]
 8008d58:	f023 0204 	bic.w	r2, r3, #4
 8008d5c:	6022      	str	r2, [r4, #0]
 8008d5e:	f04f 0900 	mov.w	r9, #0
 8008d62:	9700      	str	r7, [sp, #0]
 8008d64:	4633      	mov	r3, r6
 8008d66:	aa0b      	add	r2, sp, #44	; 0x2c
 8008d68:	4621      	mov	r1, r4
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f000 f9d8 	bl	8009120 <_printf_common>
 8008d70:	3001      	adds	r0, #1
 8008d72:	f040 8090 	bne.w	8008e96 <_printf_float+0x1e2>
 8008d76:	f04f 30ff 	mov.w	r0, #4294967295
 8008d7a:	b00d      	add	sp, #52	; 0x34
 8008d7c:	ecbd 8b02 	vpop	{d8}
 8008d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d84:	4642      	mov	r2, r8
 8008d86:	464b      	mov	r3, r9
 8008d88:	4640      	mov	r0, r8
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	f7f7 fefe 	bl	8000b8c <__aeabi_dcmpun>
 8008d90:	b140      	cbz	r0, 8008da4 <_printf_float+0xf0>
 8008d92:	464b      	mov	r3, r9
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	bfbc      	itt	lt
 8008d98:	232d      	movlt	r3, #45	; 0x2d
 8008d9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008d9e:	487f      	ldr	r0, [pc, #508]	; (8008f9c <_printf_float+0x2e8>)
 8008da0:	4b7f      	ldr	r3, [pc, #508]	; (8008fa0 <_printf_float+0x2ec>)
 8008da2:	e7d1      	b.n	8008d48 <_printf_float+0x94>
 8008da4:	6863      	ldr	r3, [r4, #4]
 8008da6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008daa:	9206      	str	r2, [sp, #24]
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	d13f      	bne.n	8008e30 <_printf_float+0x17c>
 8008db0:	2306      	movs	r3, #6
 8008db2:	6063      	str	r3, [r4, #4]
 8008db4:	9b05      	ldr	r3, [sp, #20]
 8008db6:	6861      	ldr	r1, [r4, #4]
 8008db8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	9303      	str	r3, [sp, #12]
 8008dc0:	ab0a      	add	r3, sp, #40	; 0x28
 8008dc2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008dc6:	ab09      	add	r3, sp, #36	; 0x24
 8008dc8:	ec49 8b10 	vmov	d0, r8, r9
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	6022      	str	r2, [r4, #0]
 8008dd0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	f7ff fecd 	bl	8008b74 <__cvt>
 8008dda:	9b06      	ldr	r3, [sp, #24]
 8008ddc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dde:	2b47      	cmp	r3, #71	; 0x47
 8008de0:	4680      	mov	r8, r0
 8008de2:	d108      	bne.n	8008df6 <_printf_float+0x142>
 8008de4:	1cc8      	adds	r0, r1, #3
 8008de6:	db02      	blt.n	8008dee <_printf_float+0x13a>
 8008de8:	6863      	ldr	r3, [r4, #4]
 8008dea:	4299      	cmp	r1, r3
 8008dec:	dd41      	ble.n	8008e72 <_printf_float+0x1be>
 8008dee:	f1ab 0b02 	sub.w	fp, fp, #2
 8008df2:	fa5f fb8b 	uxtb.w	fp, fp
 8008df6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008dfa:	d820      	bhi.n	8008e3e <_printf_float+0x18a>
 8008dfc:	3901      	subs	r1, #1
 8008dfe:	465a      	mov	r2, fp
 8008e00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008e04:	9109      	str	r1, [sp, #36]	; 0x24
 8008e06:	f7ff ff17 	bl	8008c38 <__exponent>
 8008e0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e0c:	1813      	adds	r3, r2, r0
 8008e0e:	2a01      	cmp	r2, #1
 8008e10:	4681      	mov	r9, r0
 8008e12:	6123      	str	r3, [r4, #16]
 8008e14:	dc02      	bgt.n	8008e1c <_printf_float+0x168>
 8008e16:	6822      	ldr	r2, [r4, #0]
 8008e18:	07d2      	lsls	r2, r2, #31
 8008e1a:	d501      	bpl.n	8008e20 <_printf_float+0x16c>
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	6123      	str	r3, [r4, #16]
 8008e20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d09c      	beq.n	8008d62 <_printf_float+0xae>
 8008e28:	232d      	movs	r3, #45	; 0x2d
 8008e2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e2e:	e798      	b.n	8008d62 <_printf_float+0xae>
 8008e30:	9a06      	ldr	r2, [sp, #24]
 8008e32:	2a47      	cmp	r2, #71	; 0x47
 8008e34:	d1be      	bne.n	8008db4 <_printf_float+0x100>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1bc      	bne.n	8008db4 <_printf_float+0x100>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e7b9      	b.n	8008db2 <_printf_float+0xfe>
 8008e3e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008e42:	d118      	bne.n	8008e76 <_printf_float+0x1c2>
 8008e44:	2900      	cmp	r1, #0
 8008e46:	6863      	ldr	r3, [r4, #4]
 8008e48:	dd0b      	ble.n	8008e62 <_printf_float+0x1ae>
 8008e4a:	6121      	str	r1, [r4, #16]
 8008e4c:	b913      	cbnz	r3, 8008e54 <_printf_float+0x1a0>
 8008e4e:	6822      	ldr	r2, [r4, #0]
 8008e50:	07d0      	lsls	r0, r2, #31
 8008e52:	d502      	bpl.n	8008e5a <_printf_float+0x1a6>
 8008e54:	3301      	adds	r3, #1
 8008e56:	440b      	add	r3, r1
 8008e58:	6123      	str	r3, [r4, #16]
 8008e5a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e5c:	f04f 0900 	mov.w	r9, #0
 8008e60:	e7de      	b.n	8008e20 <_printf_float+0x16c>
 8008e62:	b913      	cbnz	r3, 8008e6a <_printf_float+0x1b6>
 8008e64:	6822      	ldr	r2, [r4, #0]
 8008e66:	07d2      	lsls	r2, r2, #31
 8008e68:	d501      	bpl.n	8008e6e <_printf_float+0x1ba>
 8008e6a:	3302      	adds	r3, #2
 8008e6c:	e7f4      	b.n	8008e58 <_printf_float+0x1a4>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e7f2      	b.n	8008e58 <_printf_float+0x1a4>
 8008e72:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e78:	4299      	cmp	r1, r3
 8008e7a:	db05      	blt.n	8008e88 <_printf_float+0x1d4>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	6121      	str	r1, [r4, #16]
 8008e80:	07d8      	lsls	r0, r3, #31
 8008e82:	d5ea      	bpl.n	8008e5a <_printf_float+0x1a6>
 8008e84:	1c4b      	adds	r3, r1, #1
 8008e86:	e7e7      	b.n	8008e58 <_printf_float+0x1a4>
 8008e88:	2900      	cmp	r1, #0
 8008e8a:	bfd4      	ite	le
 8008e8c:	f1c1 0202 	rsble	r2, r1, #2
 8008e90:	2201      	movgt	r2, #1
 8008e92:	4413      	add	r3, r2
 8008e94:	e7e0      	b.n	8008e58 <_printf_float+0x1a4>
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	055a      	lsls	r2, r3, #21
 8008e9a:	d407      	bmi.n	8008eac <_printf_float+0x1f8>
 8008e9c:	6923      	ldr	r3, [r4, #16]
 8008e9e:	4642      	mov	r2, r8
 8008ea0:	4631      	mov	r1, r6
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	47b8      	blx	r7
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	d12c      	bne.n	8008f04 <_printf_float+0x250>
 8008eaa:	e764      	b.n	8008d76 <_printf_float+0xc2>
 8008eac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008eb0:	f240 80e0 	bls.w	8009074 <_printf_float+0x3c0>
 8008eb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008eb8:	2200      	movs	r2, #0
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f7f7 fe34 	bl	8000b28 <__aeabi_dcmpeq>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d034      	beq.n	8008f2e <_printf_float+0x27a>
 8008ec4:	4a37      	ldr	r2, [pc, #220]	; (8008fa4 <_printf_float+0x2f0>)
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	4631      	mov	r1, r6
 8008eca:	4628      	mov	r0, r5
 8008ecc:	47b8      	blx	r7
 8008ece:	3001      	adds	r0, #1
 8008ed0:	f43f af51 	beq.w	8008d76 <_printf_float+0xc2>
 8008ed4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	db02      	blt.n	8008ee2 <_printf_float+0x22e>
 8008edc:	6823      	ldr	r3, [r4, #0]
 8008ede:	07d8      	lsls	r0, r3, #31
 8008ee0:	d510      	bpl.n	8008f04 <_printf_float+0x250>
 8008ee2:	ee18 3a10 	vmov	r3, s16
 8008ee6:	4652      	mov	r2, sl
 8008ee8:	4631      	mov	r1, r6
 8008eea:	4628      	mov	r0, r5
 8008eec:	47b8      	blx	r7
 8008eee:	3001      	adds	r0, #1
 8008ef0:	f43f af41 	beq.w	8008d76 <_printf_float+0xc2>
 8008ef4:	f04f 0800 	mov.w	r8, #0
 8008ef8:	f104 091a 	add.w	r9, r4, #26
 8008efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008efe:	3b01      	subs	r3, #1
 8008f00:	4543      	cmp	r3, r8
 8008f02:	dc09      	bgt.n	8008f18 <_printf_float+0x264>
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	079b      	lsls	r3, r3, #30
 8008f08:	f100 8105 	bmi.w	8009116 <_printf_float+0x462>
 8008f0c:	68e0      	ldr	r0, [r4, #12]
 8008f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f10:	4298      	cmp	r0, r3
 8008f12:	bfb8      	it	lt
 8008f14:	4618      	movlt	r0, r3
 8008f16:	e730      	b.n	8008d7a <_printf_float+0xc6>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	464a      	mov	r2, r9
 8008f1c:	4631      	mov	r1, r6
 8008f1e:	4628      	mov	r0, r5
 8008f20:	47b8      	blx	r7
 8008f22:	3001      	adds	r0, #1
 8008f24:	f43f af27 	beq.w	8008d76 <_printf_float+0xc2>
 8008f28:	f108 0801 	add.w	r8, r8, #1
 8008f2c:	e7e6      	b.n	8008efc <_printf_float+0x248>
 8008f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	dc39      	bgt.n	8008fa8 <_printf_float+0x2f4>
 8008f34:	4a1b      	ldr	r2, [pc, #108]	; (8008fa4 <_printf_float+0x2f0>)
 8008f36:	2301      	movs	r3, #1
 8008f38:	4631      	mov	r1, r6
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	47b8      	blx	r7
 8008f3e:	3001      	adds	r0, #1
 8008f40:	f43f af19 	beq.w	8008d76 <_printf_float+0xc2>
 8008f44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	d102      	bne.n	8008f52 <_printf_float+0x29e>
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	07d9      	lsls	r1, r3, #31
 8008f50:	d5d8      	bpl.n	8008f04 <_printf_float+0x250>
 8008f52:	ee18 3a10 	vmov	r3, s16
 8008f56:	4652      	mov	r2, sl
 8008f58:	4631      	mov	r1, r6
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	47b8      	blx	r7
 8008f5e:	3001      	adds	r0, #1
 8008f60:	f43f af09 	beq.w	8008d76 <_printf_float+0xc2>
 8008f64:	f04f 0900 	mov.w	r9, #0
 8008f68:	f104 0a1a 	add.w	sl, r4, #26
 8008f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f6e:	425b      	negs	r3, r3
 8008f70:	454b      	cmp	r3, r9
 8008f72:	dc01      	bgt.n	8008f78 <_printf_float+0x2c4>
 8008f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f76:	e792      	b.n	8008e9e <_printf_float+0x1ea>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	4652      	mov	r2, sl
 8008f7c:	4631      	mov	r1, r6
 8008f7e:	4628      	mov	r0, r5
 8008f80:	47b8      	blx	r7
 8008f82:	3001      	adds	r0, #1
 8008f84:	f43f aef7 	beq.w	8008d76 <_printf_float+0xc2>
 8008f88:	f109 0901 	add.w	r9, r9, #1
 8008f8c:	e7ee      	b.n	8008f6c <_printf_float+0x2b8>
 8008f8e:	bf00      	nop
 8008f90:	7fefffff 	.word	0x7fefffff
 8008f94:	0800f740 	.word	0x0800f740
 8008f98:	0800f744 	.word	0x0800f744
 8008f9c:	0800f74c 	.word	0x0800f74c
 8008fa0:	0800f748 	.word	0x0800f748
 8008fa4:	0800f750 	.word	0x0800f750
 8008fa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008faa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fac:	429a      	cmp	r2, r3
 8008fae:	bfa8      	it	ge
 8008fb0:	461a      	movge	r2, r3
 8008fb2:	2a00      	cmp	r2, #0
 8008fb4:	4691      	mov	r9, r2
 8008fb6:	dc37      	bgt.n	8009028 <_printf_float+0x374>
 8008fb8:	f04f 0b00 	mov.w	fp, #0
 8008fbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fc0:	f104 021a 	add.w	r2, r4, #26
 8008fc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fc6:	9305      	str	r3, [sp, #20]
 8008fc8:	eba3 0309 	sub.w	r3, r3, r9
 8008fcc:	455b      	cmp	r3, fp
 8008fce:	dc33      	bgt.n	8009038 <_printf_float+0x384>
 8008fd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	db3b      	blt.n	8009050 <_printf_float+0x39c>
 8008fd8:	6823      	ldr	r3, [r4, #0]
 8008fda:	07da      	lsls	r2, r3, #31
 8008fdc:	d438      	bmi.n	8009050 <_printf_float+0x39c>
 8008fde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fe0:	9b05      	ldr	r3, [sp, #20]
 8008fe2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	eba2 0901 	sub.w	r9, r2, r1
 8008fea:	4599      	cmp	r9, r3
 8008fec:	bfa8      	it	ge
 8008fee:	4699      	movge	r9, r3
 8008ff0:	f1b9 0f00 	cmp.w	r9, #0
 8008ff4:	dc35      	bgt.n	8009062 <_printf_float+0x3ae>
 8008ff6:	f04f 0800 	mov.w	r8, #0
 8008ffa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ffe:	f104 0a1a 	add.w	sl, r4, #26
 8009002:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009006:	1a9b      	subs	r3, r3, r2
 8009008:	eba3 0309 	sub.w	r3, r3, r9
 800900c:	4543      	cmp	r3, r8
 800900e:	f77f af79 	ble.w	8008f04 <_printf_float+0x250>
 8009012:	2301      	movs	r3, #1
 8009014:	4652      	mov	r2, sl
 8009016:	4631      	mov	r1, r6
 8009018:	4628      	mov	r0, r5
 800901a:	47b8      	blx	r7
 800901c:	3001      	adds	r0, #1
 800901e:	f43f aeaa 	beq.w	8008d76 <_printf_float+0xc2>
 8009022:	f108 0801 	add.w	r8, r8, #1
 8009026:	e7ec      	b.n	8009002 <_printf_float+0x34e>
 8009028:	4613      	mov	r3, r2
 800902a:	4631      	mov	r1, r6
 800902c:	4642      	mov	r2, r8
 800902e:	4628      	mov	r0, r5
 8009030:	47b8      	blx	r7
 8009032:	3001      	adds	r0, #1
 8009034:	d1c0      	bne.n	8008fb8 <_printf_float+0x304>
 8009036:	e69e      	b.n	8008d76 <_printf_float+0xc2>
 8009038:	2301      	movs	r3, #1
 800903a:	4631      	mov	r1, r6
 800903c:	4628      	mov	r0, r5
 800903e:	9205      	str	r2, [sp, #20]
 8009040:	47b8      	blx	r7
 8009042:	3001      	adds	r0, #1
 8009044:	f43f ae97 	beq.w	8008d76 <_printf_float+0xc2>
 8009048:	9a05      	ldr	r2, [sp, #20]
 800904a:	f10b 0b01 	add.w	fp, fp, #1
 800904e:	e7b9      	b.n	8008fc4 <_printf_float+0x310>
 8009050:	ee18 3a10 	vmov	r3, s16
 8009054:	4652      	mov	r2, sl
 8009056:	4631      	mov	r1, r6
 8009058:	4628      	mov	r0, r5
 800905a:	47b8      	blx	r7
 800905c:	3001      	adds	r0, #1
 800905e:	d1be      	bne.n	8008fde <_printf_float+0x32a>
 8009060:	e689      	b.n	8008d76 <_printf_float+0xc2>
 8009062:	9a05      	ldr	r2, [sp, #20]
 8009064:	464b      	mov	r3, r9
 8009066:	4442      	add	r2, r8
 8009068:	4631      	mov	r1, r6
 800906a:	4628      	mov	r0, r5
 800906c:	47b8      	blx	r7
 800906e:	3001      	adds	r0, #1
 8009070:	d1c1      	bne.n	8008ff6 <_printf_float+0x342>
 8009072:	e680      	b.n	8008d76 <_printf_float+0xc2>
 8009074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009076:	2a01      	cmp	r2, #1
 8009078:	dc01      	bgt.n	800907e <_printf_float+0x3ca>
 800907a:	07db      	lsls	r3, r3, #31
 800907c:	d538      	bpl.n	80090f0 <_printf_float+0x43c>
 800907e:	2301      	movs	r3, #1
 8009080:	4642      	mov	r2, r8
 8009082:	4631      	mov	r1, r6
 8009084:	4628      	mov	r0, r5
 8009086:	47b8      	blx	r7
 8009088:	3001      	adds	r0, #1
 800908a:	f43f ae74 	beq.w	8008d76 <_printf_float+0xc2>
 800908e:	ee18 3a10 	vmov	r3, s16
 8009092:	4652      	mov	r2, sl
 8009094:	4631      	mov	r1, r6
 8009096:	4628      	mov	r0, r5
 8009098:	47b8      	blx	r7
 800909a:	3001      	adds	r0, #1
 800909c:	f43f ae6b 	beq.w	8008d76 <_printf_float+0xc2>
 80090a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090a4:	2200      	movs	r2, #0
 80090a6:	2300      	movs	r3, #0
 80090a8:	f7f7 fd3e 	bl	8000b28 <__aeabi_dcmpeq>
 80090ac:	b9d8      	cbnz	r0, 80090e6 <_printf_float+0x432>
 80090ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090b0:	f108 0201 	add.w	r2, r8, #1
 80090b4:	3b01      	subs	r3, #1
 80090b6:	4631      	mov	r1, r6
 80090b8:	4628      	mov	r0, r5
 80090ba:	47b8      	blx	r7
 80090bc:	3001      	adds	r0, #1
 80090be:	d10e      	bne.n	80090de <_printf_float+0x42a>
 80090c0:	e659      	b.n	8008d76 <_printf_float+0xc2>
 80090c2:	2301      	movs	r3, #1
 80090c4:	4652      	mov	r2, sl
 80090c6:	4631      	mov	r1, r6
 80090c8:	4628      	mov	r0, r5
 80090ca:	47b8      	blx	r7
 80090cc:	3001      	adds	r0, #1
 80090ce:	f43f ae52 	beq.w	8008d76 <_printf_float+0xc2>
 80090d2:	f108 0801 	add.w	r8, r8, #1
 80090d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090d8:	3b01      	subs	r3, #1
 80090da:	4543      	cmp	r3, r8
 80090dc:	dcf1      	bgt.n	80090c2 <_printf_float+0x40e>
 80090de:	464b      	mov	r3, r9
 80090e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80090e4:	e6dc      	b.n	8008ea0 <_printf_float+0x1ec>
 80090e6:	f04f 0800 	mov.w	r8, #0
 80090ea:	f104 0a1a 	add.w	sl, r4, #26
 80090ee:	e7f2      	b.n	80090d6 <_printf_float+0x422>
 80090f0:	2301      	movs	r3, #1
 80090f2:	4642      	mov	r2, r8
 80090f4:	e7df      	b.n	80090b6 <_printf_float+0x402>
 80090f6:	2301      	movs	r3, #1
 80090f8:	464a      	mov	r2, r9
 80090fa:	4631      	mov	r1, r6
 80090fc:	4628      	mov	r0, r5
 80090fe:	47b8      	blx	r7
 8009100:	3001      	adds	r0, #1
 8009102:	f43f ae38 	beq.w	8008d76 <_printf_float+0xc2>
 8009106:	f108 0801 	add.w	r8, r8, #1
 800910a:	68e3      	ldr	r3, [r4, #12]
 800910c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800910e:	1a5b      	subs	r3, r3, r1
 8009110:	4543      	cmp	r3, r8
 8009112:	dcf0      	bgt.n	80090f6 <_printf_float+0x442>
 8009114:	e6fa      	b.n	8008f0c <_printf_float+0x258>
 8009116:	f04f 0800 	mov.w	r8, #0
 800911a:	f104 0919 	add.w	r9, r4, #25
 800911e:	e7f4      	b.n	800910a <_printf_float+0x456>

08009120 <_printf_common>:
 8009120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009124:	4616      	mov	r6, r2
 8009126:	4699      	mov	r9, r3
 8009128:	688a      	ldr	r2, [r1, #8]
 800912a:	690b      	ldr	r3, [r1, #16]
 800912c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009130:	4293      	cmp	r3, r2
 8009132:	bfb8      	it	lt
 8009134:	4613      	movlt	r3, r2
 8009136:	6033      	str	r3, [r6, #0]
 8009138:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800913c:	4607      	mov	r7, r0
 800913e:	460c      	mov	r4, r1
 8009140:	b10a      	cbz	r2, 8009146 <_printf_common+0x26>
 8009142:	3301      	adds	r3, #1
 8009144:	6033      	str	r3, [r6, #0]
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	0699      	lsls	r1, r3, #26
 800914a:	bf42      	ittt	mi
 800914c:	6833      	ldrmi	r3, [r6, #0]
 800914e:	3302      	addmi	r3, #2
 8009150:	6033      	strmi	r3, [r6, #0]
 8009152:	6825      	ldr	r5, [r4, #0]
 8009154:	f015 0506 	ands.w	r5, r5, #6
 8009158:	d106      	bne.n	8009168 <_printf_common+0x48>
 800915a:	f104 0a19 	add.w	sl, r4, #25
 800915e:	68e3      	ldr	r3, [r4, #12]
 8009160:	6832      	ldr	r2, [r6, #0]
 8009162:	1a9b      	subs	r3, r3, r2
 8009164:	42ab      	cmp	r3, r5
 8009166:	dc26      	bgt.n	80091b6 <_printf_common+0x96>
 8009168:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800916c:	1e13      	subs	r3, r2, #0
 800916e:	6822      	ldr	r2, [r4, #0]
 8009170:	bf18      	it	ne
 8009172:	2301      	movne	r3, #1
 8009174:	0692      	lsls	r2, r2, #26
 8009176:	d42b      	bmi.n	80091d0 <_printf_common+0xb0>
 8009178:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800917c:	4649      	mov	r1, r9
 800917e:	4638      	mov	r0, r7
 8009180:	47c0      	blx	r8
 8009182:	3001      	adds	r0, #1
 8009184:	d01e      	beq.n	80091c4 <_printf_common+0xa4>
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	68e5      	ldr	r5, [r4, #12]
 800918a:	6832      	ldr	r2, [r6, #0]
 800918c:	f003 0306 	and.w	r3, r3, #6
 8009190:	2b04      	cmp	r3, #4
 8009192:	bf08      	it	eq
 8009194:	1aad      	subeq	r5, r5, r2
 8009196:	68a3      	ldr	r3, [r4, #8]
 8009198:	6922      	ldr	r2, [r4, #16]
 800919a:	bf0c      	ite	eq
 800919c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091a0:	2500      	movne	r5, #0
 80091a2:	4293      	cmp	r3, r2
 80091a4:	bfc4      	itt	gt
 80091a6:	1a9b      	subgt	r3, r3, r2
 80091a8:	18ed      	addgt	r5, r5, r3
 80091aa:	2600      	movs	r6, #0
 80091ac:	341a      	adds	r4, #26
 80091ae:	42b5      	cmp	r5, r6
 80091b0:	d11a      	bne.n	80091e8 <_printf_common+0xc8>
 80091b2:	2000      	movs	r0, #0
 80091b4:	e008      	b.n	80091c8 <_printf_common+0xa8>
 80091b6:	2301      	movs	r3, #1
 80091b8:	4652      	mov	r2, sl
 80091ba:	4649      	mov	r1, r9
 80091bc:	4638      	mov	r0, r7
 80091be:	47c0      	blx	r8
 80091c0:	3001      	adds	r0, #1
 80091c2:	d103      	bne.n	80091cc <_printf_common+0xac>
 80091c4:	f04f 30ff 	mov.w	r0, #4294967295
 80091c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091cc:	3501      	adds	r5, #1
 80091ce:	e7c6      	b.n	800915e <_printf_common+0x3e>
 80091d0:	18e1      	adds	r1, r4, r3
 80091d2:	1c5a      	adds	r2, r3, #1
 80091d4:	2030      	movs	r0, #48	; 0x30
 80091d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091da:	4422      	add	r2, r4
 80091dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091e4:	3302      	adds	r3, #2
 80091e6:	e7c7      	b.n	8009178 <_printf_common+0x58>
 80091e8:	2301      	movs	r3, #1
 80091ea:	4622      	mov	r2, r4
 80091ec:	4649      	mov	r1, r9
 80091ee:	4638      	mov	r0, r7
 80091f0:	47c0      	blx	r8
 80091f2:	3001      	adds	r0, #1
 80091f4:	d0e6      	beq.n	80091c4 <_printf_common+0xa4>
 80091f6:	3601      	adds	r6, #1
 80091f8:	e7d9      	b.n	80091ae <_printf_common+0x8e>
	...

080091fc <_printf_i>:
 80091fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009200:	460c      	mov	r4, r1
 8009202:	4691      	mov	r9, r2
 8009204:	7e27      	ldrb	r7, [r4, #24]
 8009206:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009208:	2f78      	cmp	r7, #120	; 0x78
 800920a:	4680      	mov	r8, r0
 800920c:	469a      	mov	sl, r3
 800920e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009212:	d807      	bhi.n	8009224 <_printf_i+0x28>
 8009214:	2f62      	cmp	r7, #98	; 0x62
 8009216:	d80a      	bhi.n	800922e <_printf_i+0x32>
 8009218:	2f00      	cmp	r7, #0
 800921a:	f000 80d8 	beq.w	80093ce <_printf_i+0x1d2>
 800921e:	2f58      	cmp	r7, #88	; 0x58
 8009220:	f000 80a3 	beq.w	800936a <_printf_i+0x16e>
 8009224:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009228:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800922c:	e03a      	b.n	80092a4 <_printf_i+0xa8>
 800922e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009232:	2b15      	cmp	r3, #21
 8009234:	d8f6      	bhi.n	8009224 <_printf_i+0x28>
 8009236:	a001      	add	r0, pc, #4	; (adr r0, 800923c <_printf_i+0x40>)
 8009238:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800923c:	08009295 	.word	0x08009295
 8009240:	080092a9 	.word	0x080092a9
 8009244:	08009225 	.word	0x08009225
 8009248:	08009225 	.word	0x08009225
 800924c:	08009225 	.word	0x08009225
 8009250:	08009225 	.word	0x08009225
 8009254:	080092a9 	.word	0x080092a9
 8009258:	08009225 	.word	0x08009225
 800925c:	08009225 	.word	0x08009225
 8009260:	08009225 	.word	0x08009225
 8009264:	08009225 	.word	0x08009225
 8009268:	080093b5 	.word	0x080093b5
 800926c:	080092d9 	.word	0x080092d9
 8009270:	08009397 	.word	0x08009397
 8009274:	08009225 	.word	0x08009225
 8009278:	08009225 	.word	0x08009225
 800927c:	080093d7 	.word	0x080093d7
 8009280:	08009225 	.word	0x08009225
 8009284:	080092d9 	.word	0x080092d9
 8009288:	08009225 	.word	0x08009225
 800928c:	08009225 	.word	0x08009225
 8009290:	0800939f 	.word	0x0800939f
 8009294:	680b      	ldr	r3, [r1, #0]
 8009296:	1d1a      	adds	r2, r3, #4
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	600a      	str	r2, [r1, #0]
 800929c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092a4:	2301      	movs	r3, #1
 80092a6:	e0a3      	b.n	80093f0 <_printf_i+0x1f4>
 80092a8:	6825      	ldr	r5, [r4, #0]
 80092aa:	6808      	ldr	r0, [r1, #0]
 80092ac:	062e      	lsls	r6, r5, #24
 80092ae:	f100 0304 	add.w	r3, r0, #4
 80092b2:	d50a      	bpl.n	80092ca <_printf_i+0xce>
 80092b4:	6805      	ldr	r5, [r0, #0]
 80092b6:	600b      	str	r3, [r1, #0]
 80092b8:	2d00      	cmp	r5, #0
 80092ba:	da03      	bge.n	80092c4 <_printf_i+0xc8>
 80092bc:	232d      	movs	r3, #45	; 0x2d
 80092be:	426d      	negs	r5, r5
 80092c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092c4:	485e      	ldr	r0, [pc, #376]	; (8009440 <_printf_i+0x244>)
 80092c6:	230a      	movs	r3, #10
 80092c8:	e019      	b.n	80092fe <_printf_i+0x102>
 80092ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80092ce:	6805      	ldr	r5, [r0, #0]
 80092d0:	600b      	str	r3, [r1, #0]
 80092d2:	bf18      	it	ne
 80092d4:	b22d      	sxthne	r5, r5
 80092d6:	e7ef      	b.n	80092b8 <_printf_i+0xbc>
 80092d8:	680b      	ldr	r3, [r1, #0]
 80092da:	6825      	ldr	r5, [r4, #0]
 80092dc:	1d18      	adds	r0, r3, #4
 80092de:	6008      	str	r0, [r1, #0]
 80092e0:	0628      	lsls	r0, r5, #24
 80092e2:	d501      	bpl.n	80092e8 <_printf_i+0xec>
 80092e4:	681d      	ldr	r5, [r3, #0]
 80092e6:	e002      	b.n	80092ee <_printf_i+0xf2>
 80092e8:	0669      	lsls	r1, r5, #25
 80092ea:	d5fb      	bpl.n	80092e4 <_printf_i+0xe8>
 80092ec:	881d      	ldrh	r5, [r3, #0]
 80092ee:	4854      	ldr	r0, [pc, #336]	; (8009440 <_printf_i+0x244>)
 80092f0:	2f6f      	cmp	r7, #111	; 0x6f
 80092f2:	bf0c      	ite	eq
 80092f4:	2308      	moveq	r3, #8
 80092f6:	230a      	movne	r3, #10
 80092f8:	2100      	movs	r1, #0
 80092fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092fe:	6866      	ldr	r6, [r4, #4]
 8009300:	60a6      	str	r6, [r4, #8]
 8009302:	2e00      	cmp	r6, #0
 8009304:	bfa2      	ittt	ge
 8009306:	6821      	ldrge	r1, [r4, #0]
 8009308:	f021 0104 	bicge.w	r1, r1, #4
 800930c:	6021      	strge	r1, [r4, #0]
 800930e:	b90d      	cbnz	r5, 8009314 <_printf_i+0x118>
 8009310:	2e00      	cmp	r6, #0
 8009312:	d04d      	beq.n	80093b0 <_printf_i+0x1b4>
 8009314:	4616      	mov	r6, r2
 8009316:	fbb5 f1f3 	udiv	r1, r5, r3
 800931a:	fb03 5711 	mls	r7, r3, r1, r5
 800931e:	5dc7      	ldrb	r7, [r0, r7]
 8009320:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009324:	462f      	mov	r7, r5
 8009326:	42bb      	cmp	r3, r7
 8009328:	460d      	mov	r5, r1
 800932a:	d9f4      	bls.n	8009316 <_printf_i+0x11a>
 800932c:	2b08      	cmp	r3, #8
 800932e:	d10b      	bne.n	8009348 <_printf_i+0x14c>
 8009330:	6823      	ldr	r3, [r4, #0]
 8009332:	07df      	lsls	r7, r3, #31
 8009334:	d508      	bpl.n	8009348 <_printf_i+0x14c>
 8009336:	6923      	ldr	r3, [r4, #16]
 8009338:	6861      	ldr	r1, [r4, #4]
 800933a:	4299      	cmp	r1, r3
 800933c:	bfde      	ittt	le
 800933e:	2330      	movle	r3, #48	; 0x30
 8009340:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009344:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009348:	1b92      	subs	r2, r2, r6
 800934a:	6122      	str	r2, [r4, #16]
 800934c:	f8cd a000 	str.w	sl, [sp]
 8009350:	464b      	mov	r3, r9
 8009352:	aa03      	add	r2, sp, #12
 8009354:	4621      	mov	r1, r4
 8009356:	4640      	mov	r0, r8
 8009358:	f7ff fee2 	bl	8009120 <_printf_common>
 800935c:	3001      	adds	r0, #1
 800935e:	d14c      	bne.n	80093fa <_printf_i+0x1fe>
 8009360:	f04f 30ff 	mov.w	r0, #4294967295
 8009364:	b004      	add	sp, #16
 8009366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936a:	4835      	ldr	r0, [pc, #212]	; (8009440 <_printf_i+0x244>)
 800936c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	680e      	ldr	r6, [r1, #0]
 8009374:	061f      	lsls	r7, r3, #24
 8009376:	f856 5b04 	ldr.w	r5, [r6], #4
 800937a:	600e      	str	r6, [r1, #0]
 800937c:	d514      	bpl.n	80093a8 <_printf_i+0x1ac>
 800937e:	07d9      	lsls	r1, r3, #31
 8009380:	bf44      	itt	mi
 8009382:	f043 0320 	orrmi.w	r3, r3, #32
 8009386:	6023      	strmi	r3, [r4, #0]
 8009388:	b91d      	cbnz	r5, 8009392 <_printf_i+0x196>
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	f023 0320 	bic.w	r3, r3, #32
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	2310      	movs	r3, #16
 8009394:	e7b0      	b.n	80092f8 <_printf_i+0xfc>
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	f043 0320 	orr.w	r3, r3, #32
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	2378      	movs	r3, #120	; 0x78
 80093a0:	4828      	ldr	r0, [pc, #160]	; (8009444 <_printf_i+0x248>)
 80093a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093a6:	e7e3      	b.n	8009370 <_printf_i+0x174>
 80093a8:	065e      	lsls	r6, r3, #25
 80093aa:	bf48      	it	mi
 80093ac:	b2ad      	uxthmi	r5, r5
 80093ae:	e7e6      	b.n	800937e <_printf_i+0x182>
 80093b0:	4616      	mov	r6, r2
 80093b2:	e7bb      	b.n	800932c <_printf_i+0x130>
 80093b4:	680b      	ldr	r3, [r1, #0]
 80093b6:	6826      	ldr	r6, [r4, #0]
 80093b8:	6960      	ldr	r0, [r4, #20]
 80093ba:	1d1d      	adds	r5, r3, #4
 80093bc:	600d      	str	r5, [r1, #0]
 80093be:	0635      	lsls	r5, r6, #24
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	d501      	bpl.n	80093c8 <_printf_i+0x1cc>
 80093c4:	6018      	str	r0, [r3, #0]
 80093c6:	e002      	b.n	80093ce <_printf_i+0x1d2>
 80093c8:	0671      	lsls	r1, r6, #25
 80093ca:	d5fb      	bpl.n	80093c4 <_printf_i+0x1c8>
 80093cc:	8018      	strh	r0, [r3, #0]
 80093ce:	2300      	movs	r3, #0
 80093d0:	6123      	str	r3, [r4, #16]
 80093d2:	4616      	mov	r6, r2
 80093d4:	e7ba      	b.n	800934c <_printf_i+0x150>
 80093d6:	680b      	ldr	r3, [r1, #0]
 80093d8:	1d1a      	adds	r2, r3, #4
 80093da:	600a      	str	r2, [r1, #0]
 80093dc:	681e      	ldr	r6, [r3, #0]
 80093de:	6862      	ldr	r2, [r4, #4]
 80093e0:	2100      	movs	r1, #0
 80093e2:	4630      	mov	r0, r6
 80093e4:	f7f6 ff2c 	bl	8000240 <memchr>
 80093e8:	b108      	cbz	r0, 80093ee <_printf_i+0x1f2>
 80093ea:	1b80      	subs	r0, r0, r6
 80093ec:	6060      	str	r0, [r4, #4]
 80093ee:	6863      	ldr	r3, [r4, #4]
 80093f0:	6123      	str	r3, [r4, #16]
 80093f2:	2300      	movs	r3, #0
 80093f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093f8:	e7a8      	b.n	800934c <_printf_i+0x150>
 80093fa:	6923      	ldr	r3, [r4, #16]
 80093fc:	4632      	mov	r2, r6
 80093fe:	4649      	mov	r1, r9
 8009400:	4640      	mov	r0, r8
 8009402:	47d0      	blx	sl
 8009404:	3001      	adds	r0, #1
 8009406:	d0ab      	beq.n	8009360 <_printf_i+0x164>
 8009408:	6823      	ldr	r3, [r4, #0]
 800940a:	079b      	lsls	r3, r3, #30
 800940c:	d413      	bmi.n	8009436 <_printf_i+0x23a>
 800940e:	68e0      	ldr	r0, [r4, #12]
 8009410:	9b03      	ldr	r3, [sp, #12]
 8009412:	4298      	cmp	r0, r3
 8009414:	bfb8      	it	lt
 8009416:	4618      	movlt	r0, r3
 8009418:	e7a4      	b.n	8009364 <_printf_i+0x168>
 800941a:	2301      	movs	r3, #1
 800941c:	4632      	mov	r2, r6
 800941e:	4649      	mov	r1, r9
 8009420:	4640      	mov	r0, r8
 8009422:	47d0      	blx	sl
 8009424:	3001      	adds	r0, #1
 8009426:	d09b      	beq.n	8009360 <_printf_i+0x164>
 8009428:	3501      	adds	r5, #1
 800942a:	68e3      	ldr	r3, [r4, #12]
 800942c:	9903      	ldr	r1, [sp, #12]
 800942e:	1a5b      	subs	r3, r3, r1
 8009430:	42ab      	cmp	r3, r5
 8009432:	dcf2      	bgt.n	800941a <_printf_i+0x21e>
 8009434:	e7eb      	b.n	800940e <_printf_i+0x212>
 8009436:	2500      	movs	r5, #0
 8009438:	f104 0619 	add.w	r6, r4, #25
 800943c:	e7f5      	b.n	800942a <_printf_i+0x22e>
 800943e:	bf00      	nop
 8009440:	0800f752 	.word	0x0800f752
 8009444:	0800f763 	.word	0x0800f763

08009448 <iprintf>:
 8009448:	b40f      	push	{r0, r1, r2, r3}
 800944a:	4b0a      	ldr	r3, [pc, #40]	; (8009474 <iprintf+0x2c>)
 800944c:	b513      	push	{r0, r1, r4, lr}
 800944e:	681c      	ldr	r4, [r3, #0]
 8009450:	b124      	cbz	r4, 800945c <iprintf+0x14>
 8009452:	69a3      	ldr	r3, [r4, #24]
 8009454:	b913      	cbnz	r3, 800945c <iprintf+0x14>
 8009456:	4620      	mov	r0, r4
 8009458:	f7ff fa56 	bl	8008908 <__sinit>
 800945c:	ab05      	add	r3, sp, #20
 800945e:	9a04      	ldr	r2, [sp, #16]
 8009460:	68a1      	ldr	r1, [r4, #8]
 8009462:	9301      	str	r3, [sp, #4]
 8009464:	4620      	mov	r0, r4
 8009466:	f003 f96d 	bl	800c744 <_vfiprintf_r>
 800946a:	b002      	add	sp, #8
 800946c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009470:	b004      	add	sp, #16
 8009472:	4770      	bx	lr
 8009474:	20000048 	.word	0x20000048

08009478 <_puts_r>:
 8009478:	b570      	push	{r4, r5, r6, lr}
 800947a:	460e      	mov	r6, r1
 800947c:	4605      	mov	r5, r0
 800947e:	b118      	cbz	r0, 8009488 <_puts_r+0x10>
 8009480:	6983      	ldr	r3, [r0, #24]
 8009482:	b90b      	cbnz	r3, 8009488 <_puts_r+0x10>
 8009484:	f7ff fa40 	bl	8008908 <__sinit>
 8009488:	69ab      	ldr	r3, [r5, #24]
 800948a:	68ac      	ldr	r4, [r5, #8]
 800948c:	b913      	cbnz	r3, 8009494 <_puts_r+0x1c>
 800948e:	4628      	mov	r0, r5
 8009490:	f7ff fa3a 	bl	8008908 <__sinit>
 8009494:	4b2c      	ldr	r3, [pc, #176]	; (8009548 <_puts_r+0xd0>)
 8009496:	429c      	cmp	r4, r3
 8009498:	d120      	bne.n	80094dc <_puts_r+0x64>
 800949a:	686c      	ldr	r4, [r5, #4]
 800949c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800949e:	07db      	lsls	r3, r3, #31
 80094a0:	d405      	bmi.n	80094ae <_puts_r+0x36>
 80094a2:	89a3      	ldrh	r3, [r4, #12]
 80094a4:	0598      	lsls	r0, r3, #22
 80094a6:	d402      	bmi.n	80094ae <_puts_r+0x36>
 80094a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094aa:	f7ff faf0 	bl	8008a8e <__retarget_lock_acquire_recursive>
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	0719      	lsls	r1, r3, #28
 80094b2:	d51d      	bpl.n	80094f0 <_puts_r+0x78>
 80094b4:	6923      	ldr	r3, [r4, #16]
 80094b6:	b1db      	cbz	r3, 80094f0 <_puts_r+0x78>
 80094b8:	3e01      	subs	r6, #1
 80094ba:	68a3      	ldr	r3, [r4, #8]
 80094bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80094c0:	3b01      	subs	r3, #1
 80094c2:	60a3      	str	r3, [r4, #8]
 80094c4:	bb39      	cbnz	r1, 8009516 <_puts_r+0x9e>
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	da38      	bge.n	800953c <_puts_r+0xc4>
 80094ca:	4622      	mov	r2, r4
 80094cc:	210a      	movs	r1, #10
 80094ce:	4628      	mov	r0, r5
 80094d0:	f000 ffc6 	bl	800a460 <__swbuf_r>
 80094d4:	3001      	adds	r0, #1
 80094d6:	d011      	beq.n	80094fc <_puts_r+0x84>
 80094d8:	250a      	movs	r5, #10
 80094da:	e011      	b.n	8009500 <_puts_r+0x88>
 80094dc:	4b1b      	ldr	r3, [pc, #108]	; (800954c <_puts_r+0xd4>)
 80094de:	429c      	cmp	r4, r3
 80094e0:	d101      	bne.n	80094e6 <_puts_r+0x6e>
 80094e2:	68ac      	ldr	r4, [r5, #8]
 80094e4:	e7da      	b.n	800949c <_puts_r+0x24>
 80094e6:	4b1a      	ldr	r3, [pc, #104]	; (8009550 <_puts_r+0xd8>)
 80094e8:	429c      	cmp	r4, r3
 80094ea:	bf08      	it	eq
 80094ec:	68ec      	ldreq	r4, [r5, #12]
 80094ee:	e7d5      	b.n	800949c <_puts_r+0x24>
 80094f0:	4621      	mov	r1, r4
 80094f2:	4628      	mov	r0, r5
 80094f4:	f001 f818 	bl	800a528 <__swsetup_r>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d0dd      	beq.n	80094b8 <_puts_r+0x40>
 80094fc:	f04f 35ff 	mov.w	r5, #4294967295
 8009500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009502:	07da      	lsls	r2, r3, #31
 8009504:	d405      	bmi.n	8009512 <_puts_r+0x9a>
 8009506:	89a3      	ldrh	r3, [r4, #12]
 8009508:	059b      	lsls	r3, r3, #22
 800950a:	d402      	bmi.n	8009512 <_puts_r+0x9a>
 800950c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800950e:	f7ff fabf 	bl	8008a90 <__retarget_lock_release_recursive>
 8009512:	4628      	mov	r0, r5
 8009514:	bd70      	pop	{r4, r5, r6, pc}
 8009516:	2b00      	cmp	r3, #0
 8009518:	da04      	bge.n	8009524 <_puts_r+0xac>
 800951a:	69a2      	ldr	r2, [r4, #24]
 800951c:	429a      	cmp	r2, r3
 800951e:	dc06      	bgt.n	800952e <_puts_r+0xb6>
 8009520:	290a      	cmp	r1, #10
 8009522:	d004      	beq.n	800952e <_puts_r+0xb6>
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	1c5a      	adds	r2, r3, #1
 8009528:	6022      	str	r2, [r4, #0]
 800952a:	7019      	strb	r1, [r3, #0]
 800952c:	e7c5      	b.n	80094ba <_puts_r+0x42>
 800952e:	4622      	mov	r2, r4
 8009530:	4628      	mov	r0, r5
 8009532:	f000 ff95 	bl	800a460 <__swbuf_r>
 8009536:	3001      	adds	r0, #1
 8009538:	d1bf      	bne.n	80094ba <_puts_r+0x42>
 800953a:	e7df      	b.n	80094fc <_puts_r+0x84>
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	250a      	movs	r5, #10
 8009540:	1c5a      	adds	r2, r3, #1
 8009542:	6022      	str	r2, [r4, #0]
 8009544:	701d      	strb	r5, [r3, #0]
 8009546:	e7db      	b.n	8009500 <_puts_r+0x88>
 8009548:	0800f6fc 	.word	0x0800f6fc
 800954c:	0800f71c 	.word	0x0800f71c
 8009550:	0800f6dc 	.word	0x0800f6dc

08009554 <puts>:
 8009554:	4b02      	ldr	r3, [pc, #8]	; (8009560 <puts+0xc>)
 8009556:	4601      	mov	r1, r0
 8009558:	6818      	ldr	r0, [r3, #0]
 800955a:	f7ff bf8d 	b.w	8009478 <_puts_r>
 800955e:	bf00      	nop
 8009560:	20000048 	.word	0x20000048

08009564 <cleanup_glue>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	460c      	mov	r4, r1
 8009568:	6809      	ldr	r1, [r1, #0]
 800956a:	4605      	mov	r5, r0
 800956c:	b109      	cbz	r1, 8009572 <cleanup_glue+0xe>
 800956e:	f7ff fff9 	bl	8009564 <cleanup_glue>
 8009572:	4621      	mov	r1, r4
 8009574:	4628      	mov	r0, r5
 8009576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800957a:	f003 b869 	b.w	800c650 <_free_r>
	...

08009580 <_reclaim_reent>:
 8009580:	4b2c      	ldr	r3, [pc, #176]	; (8009634 <_reclaim_reent+0xb4>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4283      	cmp	r3, r0
 8009586:	b570      	push	{r4, r5, r6, lr}
 8009588:	4604      	mov	r4, r0
 800958a:	d051      	beq.n	8009630 <_reclaim_reent+0xb0>
 800958c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800958e:	b143      	cbz	r3, 80095a2 <_reclaim_reent+0x22>
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d14a      	bne.n	800962c <_reclaim_reent+0xac>
 8009596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009598:	6819      	ldr	r1, [r3, #0]
 800959a:	b111      	cbz	r1, 80095a2 <_reclaim_reent+0x22>
 800959c:	4620      	mov	r0, r4
 800959e:	f003 f857 	bl	800c650 <_free_r>
 80095a2:	6961      	ldr	r1, [r4, #20]
 80095a4:	b111      	cbz	r1, 80095ac <_reclaim_reent+0x2c>
 80095a6:	4620      	mov	r0, r4
 80095a8:	f003 f852 	bl	800c650 <_free_r>
 80095ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80095ae:	b111      	cbz	r1, 80095b6 <_reclaim_reent+0x36>
 80095b0:	4620      	mov	r0, r4
 80095b2:	f003 f84d 	bl	800c650 <_free_r>
 80095b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80095b8:	b111      	cbz	r1, 80095c0 <_reclaim_reent+0x40>
 80095ba:	4620      	mov	r0, r4
 80095bc:	f003 f848 	bl	800c650 <_free_r>
 80095c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80095c2:	b111      	cbz	r1, 80095ca <_reclaim_reent+0x4a>
 80095c4:	4620      	mov	r0, r4
 80095c6:	f003 f843 	bl	800c650 <_free_r>
 80095ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80095cc:	b111      	cbz	r1, 80095d4 <_reclaim_reent+0x54>
 80095ce:	4620      	mov	r0, r4
 80095d0:	f003 f83e 	bl	800c650 <_free_r>
 80095d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80095d6:	b111      	cbz	r1, 80095de <_reclaim_reent+0x5e>
 80095d8:	4620      	mov	r0, r4
 80095da:	f003 f839 	bl	800c650 <_free_r>
 80095de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80095e0:	b111      	cbz	r1, 80095e8 <_reclaim_reent+0x68>
 80095e2:	4620      	mov	r0, r4
 80095e4:	f003 f834 	bl	800c650 <_free_r>
 80095e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095ea:	b111      	cbz	r1, 80095f2 <_reclaim_reent+0x72>
 80095ec:	4620      	mov	r0, r4
 80095ee:	f003 f82f 	bl	800c650 <_free_r>
 80095f2:	69a3      	ldr	r3, [r4, #24]
 80095f4:	b1e3      	cbz	r3, 8009630 <_reclaim_reent+0xb0>
 80095f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80095f8:	4620      	mov	r0, r4
 80095fa:	4798      	blx	r3
 80095fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80095fe:	b1b9      	cbz	r1, 8009630 <_reclaim_reent+0xb0>
 8009600:	4620      	mov	r0, r4
 8009602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009606:	f7ff bfad 	b.w	8009564 <cleanup_glue>
 800960a:	5949      	ldr	r1, [r1, r5]
 800960c:	b941      	cbnz	r1, 8009620 <_reclaim_reent+0xa0>
 800960e:	3504      	adds	r5, #4
 8009610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009612:	2d80      	cmp	r5, #128	; 0x80
 8009614:	68d9      	ldr	r1, [r3, #12]
 8009616:	d1f8      	bne.n	800960a <_reclaim_reent+0x8a>
 8009618:	4620      	mov	r0, r4
 800961a:	f003 f819 	bl	800c650 <_free_r>
 800961e:	e7ba      	b.n	8009596 <_reclaim_reent+0x16>
 8009620:	680e      	ldr	r6, [r1, #0]
 8009622:	4620      	mov	r0, r4
 8009624:	f003 f814 	bl	800c650 <_free_r>
 8009628:	4631      	mov	r1, r6
 800962a:	e7ef      	b.n	800960c <_reclaim_reent+0x8c>
 800962c:	2500      	movs	r5, #0
 800962e:	e7ef      	b.n	8009610 <_reclaim_reent+0x90>
 8009630:	bd70      	pop	{r4, r5, r6, pc}
 8009632:	bf00      	nop
 8009634:	20000048 	.word	0x20000048

08009638 <_sbrk_r>:
 8009638:	b538      	push	{r3, r4, r5, lr}
 800963a:	4d06      	ldr	r5, [pc, #24]	; (8009654 <_sbrk_r+0x1c>)
 800963c:	2300      	movs	r3, #0
 800963e:	4604      	mov	r4, r0
 8009640:	4608      	mov	r0, r1
 8009642:	602b      	str	r3, [r5, #0]
 8009644:	f7f9 fba8 	bl	8002d98 <_sbrk>
 8009648:	1c43      	adds	r3, r0, #1
 800964a:	d102      	bne.n	8009652 <_sbrk_r+0x1a>
 800964c:	682b      	ldr	r3, [r5, #0]
 800964e:	b103      	cbz	r3, 8009652 <_sbrk_r+0x1a>
 8009650:	6023      	str	r3, [r4, #0]
 8009652:	bd38      	pop	{r3, r4, r5, pc}
 8009654:	20004610 	.word	0x20004610

08009658 <__sread>:
 8009658:	b510      	push	{r4, lr}
 800965a:	460c      	mov	r4, r1
 800965c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009660:	f003 f9a0 	bl	800c9a4 <_read_r>
 8009664:	2800      	cmp	r0, #0
 8009666:	bfab      	itete	ge
 8009668:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800966a:	89a3      	ldrhlt	r3, [r4, #12]
 800966c:	181b      	addge	r3, r3, r0
 800966e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009672:	bfac      	ite	ge
 8009674:	6563      	strge	r3, [r4, #84]	; 0x54
 8009676:	81a3      	strhlt	r3, [r4, #12]
 8009678:	bd10      	pop	{r4, pc}

0800967a <__swrite>:
 800967a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800967e:	461f      	mov	r7, r3
 8009680:	898b      	ldrh	r3, [r1, #12]
 8009682:	05db      	lsls	r3, r3, #23
 8009684:	4605      	mov	r5, r0
 8009686:	460c      	mov	r4, r1
 8009688:	4616      	mov	r6, r2
 800968a:	d505      	bpl.n	8009698 <__swrite+0x1e>
 800968c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009690:	2302      	movs	r3, #2
 8009692:	2200      	movs	r2, #0
 8009694:	f002 fa76 	bl	800bb84 <_lseek_r>
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800969e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096a2:	81a3      	strh	r3, [r4, #12]
 80096a4:	4632      	mov	r2, r6
 80096a6:	463b      	mov	r3, r7
 80096a8:	4628      	mov	r0, r5
 80096aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096ae:	f000 bf29 	b.w	800a504 <_write_r>

080096b2 <__sseek>:
 80096b2:	b510      	push	{r4, lr}
 80096b4:	460c      	mov	r4, r1
 80096b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ba:	f002 fa63 	bl	800bb84 <_lseek_r>
 80096be:	1c43      	adds	r3, r0, #1
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	bf15      	itete	ne
 80096c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80096c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096ce:	81a3      	strheq	r3, [r4, #12]
 80096d0:	bf18      	it	ne
 80096d2:	81a3      	strhne	r3, [r4, #12]
 80096d4:	bd10      	pop	{r4, pc}

080096d6 <__sclose>:
 80096d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096da:	f000 bf93 	b.w	800a604 <_close_r>

080096de <sulp>:
 80096de:	b570      	push	{r4, r5, r6, lr}
 80096e0:	4604      	mov	r4, r0
 80096e2:	460d      	mov	r5, r1
 80096e4:	ec45 4b10 	vmov	d0, r4, r5
 80096e8:	4616      	mov	r6, r2
 80096ea:	f002 fe53 	bl	800c394 <__ulp>
 80096ee:	ec51 0b10 	vmov	r0, r1, d0
 80096f2:	b17e      	cbz	r6, 8009714 <sulp+0x36>
 80096f4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80096f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	dd09      	ble.n	8009714 <sulp+0x36>
 8009700:	051b      	lsls	r3, r3, #20
 8009702:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009706:	2400      	movs	r4, #0
 8009708:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800970c:	4622      	mov	r2, r4
 800970e:	462b      	mov	r3, r5
 8009710:	f7f6 ffa2 	bl	8000658 <__aeabi_dmul>
 8009714:	bd70      	pop	{r4, r5, r6, pc}
	...

08009718 <_strtod_l>:
 8009718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971c:	b0a3      	sub	sp, #140	; 0x8c
 800971e:	461f      	mov	r7, r3
 8009720:	2300      	movs	r3, #0
 8009722:	931e      	str	r3, [sp, #120]	; 0x78
 8009724:	4ba4      	ldr	r3, [pc, #656]	; (80099b8 <_strtod_l+0x2a0>)
 8009726:	9219      	str	r2, [sp, #100]	; 0x64
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	9307      	str	r3, [sp, #28]
 800972c:	4604      	mov	r4, r0
 800972e:	4618      	mov	r0, r3
 8009730:	4688      	mov	r8, r1
 8009732:	f7f6 fd77 	bl	8000224 <strlen>
 8009736:	f04f 0a00 	mov.w	sl, #0
 800973a:	4605      	mov	r5, r0
 800973c:	f04f 0b00 	mov.w	fp, #0
 8009740:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009744:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009746:	781a      	ldrb	r2, [r3, #0]
 8009748:	2a2b      	cmp	r2, #43	; 0x2b
 800974a:	d04c      	beq.n	80097e6 <_strtod_l+0xce>
 800974c:	d839      	bhi.n	80097c2 <_strtod_l+0xaa>
 800974e:	2a0d      	cmp	r2, #13
 8009750:	d832      	bhi.n	80097b8 <_strtod_l+0xa0>
 8009752:	2a08      	cmp	r2, #8
 8009754:	d832      	bhi.n	80097bc <_strtod_l+0xa4>
 8009756:	2a00      	cmp	r2, #0
 8009758:	d03c      	beq.n	80097d4 <_strtod_l+0xbc>
 800975a:	2300      	movs	r3, #0
 800975c:	930e      	str	r3, [sp, #56]	; 0x38
 800975e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009760:	7833      	ldrb	r3, [r6, #0]
 8009762:	2b30      	cmp	r3, #48	; 0x30
 8009764:	f040 80b4 	bne.w	80098d0 <_strtod_l+0x1b8>
 8009768:	7873      	ldrb	r3, [r6, #1]
 800976a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800976e:	2b58      	cmp	r3, #88	; 0x58
 8009770:	d16c      	bne.n	800984c <_strtod_l+0x134>
 8009772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009774:	9301      	str	r3, [sp, #4]
 8009776:	ab1e      	add	r3, sp, #120	; 0x78
 8009778:	9702      	str	r7, [sp, #8]
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	4a8f      	ldr	r2, [pc, #572]	; (80099bc <_strtod_l+0x2a4>)
 800977e:	ab1f      	add	r3, sp, #124	; 0x7c
 8009780:	a91d      	add	r1, sp, #116	; 0x74
 8009782:	4620      	mov	r0, r4
 8009784:	f001 fef2 	bl	800b56c <__gethex>
 8009788:	f010 0707 	ands.w	r7, r0, #7
 800978c:	4605      	mov	r5, r0
 800978e:	d005      	beq.n	800979c <_strtod_l+0x84>
 8009790:	2f06      	cmp	r7, #6
 8009792:	d12a      	bne.n	80097ea <_strtod_l+0xd2>
 8009794:	3601      	adds	r6, #1
 8009796:	2300      	movs	r3, #0
 8009798:	961d      	str	r6, [sp, #116]	; 0x74
 800979a:	930e      	str	r3, [sp, #56]	; 0x38
 800979c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f040 8596 	bne.w	800a2d0 <_strtod_l+0xbb8>
 80097a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097a6:	b1db      	cbz	r3, 80097e0 <_strtod_l+0xc8>
 80097a8:	4652      	mov	r2, sl
 80097aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80097ae:	ec43 2b10 	vmov	d0, r2, r3
 80097b2:	b023      	add	sp, #140	; 0x8c
 80097b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b8:	2a20      	cmp	r2, #32
 80097ba:	d1ce      	bne.n	800975a <_strtod_l+0x42>
 80097bc:	3301      	adds	r3, #1
 80097be:	931d      	str	r3, [sp, #116]	; 0x74
 80097c0:	e7c0      	b.n	8009744 <_strtod_l+0x2c>
 80097c2:	2a2d      	cmp	r2, #45	; 0x2d
 80097c4:	d1c9      	bne.n	800975a <_strtod_l+0x42>
 80097c6:	2201      	movs	r2, #1
 80097c8:	920e      	str	r2, [sp, #56]	; 0x38
 80097ca:	1c5a      	adds	r2, r3, #1
 80097cc:	921d      	str	r2, [sp, #116]	; 0x74
 80097ce:	785b      	ldrb	r3, [r3, #1]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1c4      	bne.n	800975e <_strtod_l+0x46>
 80097d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097d6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f040 8576 	bne.w	800a2cc <_strtod_l+0xbb4>
 80097e0:	4652      	mov	r2, sl
 80097e2:	465b      	mov	r3, fp
 80097e4:	e7e3      	b.n	80097ae <_strtod_l+0x96>
 80097e6:	2200      	movs	r2, #0
 80097e8:	e7ee      	b.n	80097c8 <_strtod_l+0xb0>
 80097ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80097ec:	b13a      	cbz	r2, 80097fe <_strtod_l+0xe6>
 80097ee:	2135      	movs	r1, #53	; 0x35
 80097f0:	a820      	add	r0, sp, #128	; 0x80
 80097f2:	f002 feda 	bl	800c5aa <__copybits>
 80097f6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80097f8:	4620      	mov	r0, r4
 80097fa:	f002 fa9f 	bl	800bd3c <_Bfree>
 80097fe:	3f01      	subs	r7, #1
 8009800:	2f05      	cmp	r7, #5
 8009802:	d807      	bhi.n	8009814 <_strtod_l+0xfc>
 8009804:	e8df f007 	tbb	[pc, r7]
 8009808:	1d180b0e 	.word	0x1d180b0e
 800980c:	030e      	.short	0x030e
 800980e:	f04f 0b00 	mov.w	fp, #0
 8009812:	46da      	mov	sl, fp
 8009814:	0728      	lsls	r0, r5, #28
 8009816:	d5c1      	bpl.n	800979c <_strtod_l+0x84>
 8009818:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800981c:	e7be      	b.n	800979c <_strtod_l+0x84>
 800981e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8009822:	e7f7      	b.n	8009814 <_strtod_l+0xfc>
 8009824:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009828:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800982a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800982e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009832:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009836:	e7ed      	b.n	8009814 <_strtod_l+0xfc>
 8009838:	f8df b184 	ldr.w	fp, [pc, #388]	; 80099c0 <_strtod_l+0x2a8>
 800983c:	f04f 0a00 	mov.w	sl, #0
 8009840:	e7e8      	b.n	8009814 <_strtod_l+0xfc>
 8009842:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009846:	f04f 3aff 	mov.w	sl, #4294967295
 800984a:	e7e3      	b.n	8009814 <_strtod_l+0xfc>
 800984c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800984e:	1c5a      	adds	r2, r3, #1
 8009850:	921d      	str	r2, [sp, #116]	; 0x74
 8009852:	785b      	ldrb	r3, [r3, #1]
 8009854:	2b30      	cmp	r3, #48	; 0x30
 8009856:	d0f9      	beq.n	800984c <_strtod_l+0x134>
 8009858:	2b00      	cmp	r3, #0
 800985a:	d09f      	beq.n	800979c <_strtod_l+0x84>
 800985c:	2301      	movs	r3, #1
 800985e:	f04f 0900 	mov.w	r9, #0
 8009862:	9304      	str	r3, [sp, #16]
 8009864:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009866:	930a      	str	r3, [sp, #40]	; 0x28
 8009868:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800986c:	464f      	mov	r7, r9
 800986e:	220a      	movs	r2, #10
 8009870:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009872:	7806      	ldrb	r6, [r0, #0]
 8009874:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009878:	b2d9      	uxtb	r1, r3
 800987a:	2909      	cmp	r1, #9
 800987c:	d92a      	bls.n	80098d4 <_strtod_l+0x1bc>
 800987e:	9907      	ldr	r1, [sp, #28]
 8009880:	462a      	mov	r2, r5
 8009882:	f003 f8a9 	bl	800c9d8 <strncmp>
 8009886:	b398      	cbz	r0, 80098f0 <_strtod_l+0x1d8>
 8009888:	2000      	movs	r0, #0
 800988a:	4633      	mov	r3, r6
 800988c:	463d      	mov	r5, r7
 800988e:	9007      	str	r0, [sp, #28]
 8009890:	4602      	mov	r2, r0
 8009892:	2b65      	cmp	r3, #101	; 0x65
 8009894:	d001      	beq.n	800989a <_strtod_l+0x182>
 8009896:	2b45      	cmp	r3, #69	; 0x45
 8009898:	d118      	bne.n	80098cc <_strtod_l+0x1b4>
 800989a:	b91d      	cbnz	r5, 80098a4 <_strtod_l+0x18c>
 800989c:	9b04      	ldr	r3, [sp, #16]
 800989e:	4303      	orrs	r3, r0
 80098a0:	d098      	beq.n	80097d4 <_strtod_l+0xbc>
 80098a2:	2500      	movs	r5, #0
 80098a4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80098a8:	f108 0301 	add.w	r3, r8, #1
 80098ac:	931d      	str	r3, [sp, #116]	; 0x74
 80098ae:	f898 3001 	ldrb.w	r3, [r8, #1]
 80098b2:	2b2b      	cmp	r3, #43	; 0x2b
 80098b4:	d075      	beq.n	80099a2 <_strtod_l+0x28a>
 80098b6:	2b2d      	cmp	r3, #45	; 0x2d
 80098b8:	d07b      	beq.n	80099b2 <_strtod_l+0x29a>
 80098ba:	f04f 0c00 	mov.w	ip, #0
 80098be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80098c2:	2909      	cmp	r1, #9
 80098c4:	f240 8082 	bls.w	80099cc <_strtod_l+0x2b4>
 80098c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80098cc:	2600      	movs	r6, #0
 80098ce:	e09d      	b.n	8009a0c <_strtod_l+0x2f4>
 80098d0:	2300      	movs	r3, #0
 80098d2:	e7c4      	b.n	800985e <_strtod_l+0x146>
 80098d4:	2f08      	cmp	r7, #8
 80098d6:	bfd8      	it	le
 80098d8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80098da:	f100 0001 	add.w	r0, r0, #1
 80098de:	bfda      	itte	le
 80098e0:	fb02 3301 	mlale	r3, r2, r1, r3
 80098e4:	9309      	strle	r3, [sp, #36]	; 0x24
 80098e6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80098ea:	3701      	adds	r7, #1
 80098ec:	901d      	str	r0, [sp, #116]	; 0x74
 80098ee:	e7bf      	b.n	8009870 <_strtod_l+0x158>
 80098f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098f2:	195a      	adds	r2, r3, r5
 80098f4:	921d      	str	r2, [sp, #116]	; 0x74
 80098f6:	5d5b      	ldrb	r3, [r3, r5]
 80098f8:	2f00      	cmp	r7, #0
 80098fa:	d037      	beq.n	800996c <_strtod_l+0x254>
 80098fc:	9007      	str	r0, [sp, #28]
 80098fe:	463d      	mov	r5, r7
 8009900:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009904:	2a09      	cmp	r2, #9
 8009906:	d912      	bls.n	800992e <_strtod_l+0x216>
 8009908:	2201      	movs	r2, #1
 800990a:	e7c2      	b.n	8009892 <_strtod_l+0x17a>
 800990c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800990e:	1c5a      	adds	r2, r3, #1
 8009910:	921d      	str	r2, [sp, #116]	; 0x74
 8009912:	785b      	ldrb	r3, [r3, #1]
 8009914:	3001      	adds	r0, #1
 8009916:	2b30      	cmp	r3, #48	; 0x30
 8009918:	d0f8      	beq.n	800990c <_strtod_l+0x1f4>
 800991a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800991e:	2a08      	cmp	r2, #8
 8009920:	f200 84db 	bhi.w	800a2da <_strtod_l+0xbc2>
 8009924:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009926:	9007      	str	r0, [sp, #28]
 8009928:	2000      	movs	r0, #0
 800992a:	920a      	str	r2, [sp, #40]	; 0x28
 800992c:	4605      	mov	r5, r0
 800992e:	3b30      	subs	r3, #48	; 0x30
 8009930:	f100 0201 	add.w	r2, r0, #1
 8009934:	d014      	beq.n	8009960 <_strtod_l+0x248>
 8009936:	9907      	ldr	r1, [sp, #28]
 8009938:	4411      	add	r1, r2
 800993a:	9107      	str	r1, [sp, #28]
 800993c:	462a      	mov	r2, r5
 800993e:	eb00 0e05 	add.w	lr, r0, r5
 8009942:	210a      	movs	r1, #10
 8009944:	4572      	cmp	r2, lr
 8009946:	d113      	bne.n	8009970 <_strtod_l+0x258>
 8009948:	182a      	adds	r2, r5, r0
 800994a:	2a08      	cmp	r2, #8
 800994c:	f105 0501 	add.w	r5, r5, #1
 8009950:	4405      	add	r5, r0
 8009952:	dc1c      	bgt.n	800998e <_strtod_l+0x276>
 8009954:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009956:	220a      	movs	r2, #10
 8009958:	fb02 3301 	mla	r3, r2, r1, r3
 800995c:	9309      	str	r3, [sp, #36]	; 0x24
 800995e:	2200      	movs	r2, #0
 8009960:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009962:	1c59      	adds	r1, r3, #1
 8009964:	911d      	str	r1, [sp, #116]	; 0x74
 8009966:	785b      	ldrb	r3, [r3, #1]
 8009968:	4610      	mov	r0, r2
 800996a:	e7c9      	b.n	8009900 <_strtod_l+0x1e8>
 800996c:	4638      	mov	r0, r7
 800996e:	e7d2      	b.n	8009916 <_strtod_l+0x1fe>
 8009970:	2a08      	cmp	r2, #8
 8009972:	dc04      	bgt.n	800997e <_strtod_l+0x266>
 8009974:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009976:	434e      	muls	r6, r1
 8009978:	9609      	str	r6, [sp, #36]	; 0x24
 800997a:	3201      	adds	r2, #1
 800997c:	e7e2      	b.n	8009944 <_strtod_l+0x22c>
 800997e:	f102 0c01 	add.w	ip, r2, #1
 8009982:	f1bc 0f10 	cmp.w	ip, #16
 8009986:	bfd8      	it	le
 8009988:	fb01 f909 	mulle.w	r9, r1, r9
 800998c:	e7f5      	b.n	800997a <_strtod_l+0x262>
 800998e:	2d10      	cmp	r5, #16
 8009990:	bfdc      	itt	le
 8009992:	220a      	movle	r2, #10
 8009994:	fb02 3909 	mlale	r9, r2, r9, r3
 8009998:	e7e1      	b.n	800995e <_strtod_l+0x246>
 800999a:	2300      	movs	r3, #0
 800999c:	9307      	str	r3, [sp, #28]
 800999e:	2201      	movs	r2, #1
 80099a0:	e77c      	b.n	800989c <_strtod_l+0x184>
 80099a2:	f04f 0c00 	mov.w	ip, #0
 80099a6:	f108 0302 	add.w	r3, r8, #2
 80099aa:	931d      	str	r3, [sp, #116]	; 0x74
 80099ac:	f898 3002 	ldrb.w	r3, [r8, #2]
 80099b0:	e785      	b.n	80098be <_strtod_l+0x1a6>
 80099b2:	f04f 0c01 	mov.w	ip, #1
 80099b6:	e7f6      	b.n	80099a6 <_strtod_l+0x28e>
 80099b8:	0800f9c8 	.word	0x0800f9c8
 80099bc:	0800f774 	.word	0x0800f774
 80099c0:	7ff00000 	.word	0x7ff00000
 80099c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099c6:	1c59      	adds	r1, r3, #1
 80099c8:	911d      	str	r1, [sp, #116]	; 0x74
 80099ca:	785b      	ldrb	r3, [r3, #1]
 80099cc:	2b30      	cmp	r3, #48	; 0x30
 80099ce:	d0f9      	beq.n	80099c4 <_strtod_l+0x2ac>
 80099d0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80099d4:	2908      	cmp	r1, #8
 80099d6:	f63f af79 	bhi.w	80098cc <_strtod_l+0x1b4>
 80099da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80099de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099e0:	9308      	str	r3, [sp, #32]
 80099e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099e4:	1c59      	adds	r1, r3, #1
 80099e6:	911d      	str	r1, [sp, #116]	; 0x74
 80099e8:	785b      	ldrb	r3, [r3, #1]
 80099ea:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80099ee:	2e09      	cmp	r6, #9
 80099f0:	d937      	bls.n	8009a62 <_strtod_l+0x34a>
 80099f2:	9e08      	ldr	r6, [sp, #32]
 80099f4:	1b89      	subs	r1, r1, r6
 80099f6:	2908      	cmp	r1, #8
 80099f8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80099fc:	dc02      	bgt.n	8009a04 <_strtod_l+0x2ec>
 80099fe:	4576      	cmp	r6, lr
 8009a00:	bfa8      	it	ge
 8009a02:	4676      	movge	r6, lr
 8009a04:	f1bc 0f00 	cmp.w	ip, #0
 8009a08:	d000      	beq.n	8009a0c <_strtod_l+0x2f4>
 8009a0a:	4276      	negs	r6, r6
 8009a0c:	2d00      	cmp	r5, #0
 8009a0e:	d14f      	bne.n	8009ab0 <_strtod_l+0x398>
 8009a10:	9904      	ldr	r1, [sp, #16]
 8009a12:	4301      	orrs	r1, r0
 8009a14:	f47f aec2 	bne.w	800979c <_strtod_l+0x84>
 8009a18:	2a00      	cmp	r2, #0
 8009a1a:	f47f aedb 	bne.w	80097d4 <_strtod_l+0xbc>
 8009a1e:	2b69      	cmp	r3, #105	; 0x69
 8009a20:	d027      	beq.n	8009a72 <_strtod_l+0x35a>
 8009a22:	dc24      	bgt.n	8009a6e <_strtod_l+0x356>
 8009a24:	2b49      	cmp	r3, #73	; 0x49
 8009a26:	d024      	beq.n	8009a72 <_strtod_l+0x35a>
 8009a28:	2b4e      	cmp	r3, #78	; 0x4e
 8009a2a:	f47f aed3 	bne.w	80097d4 <_strtod_l+0xbc>
 8009a2e:	499e      	ldr	r1, [pc, #632]	; (8009ca8 <_strtod_l+0x590>)
 8009a30:	a81d      	add	r0, sp, #116	; 0x74
 8009a32:	f001 fff3 	bl	800ba1c <__match>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f43f aecc 	beq.w	80097d4 <_strtod_l+0xbc>
 8009a3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	2b28      	cmp	r3, #40	; 0x28
 8009a42:	d12d      	bne.n	8009aa0 <_strtod_l+0x388>
 8009a44:	4999      	ldr	r1, [pc, #612]	; (8009cac <_strtod_l+0x594>)
 8009a46:	aa20      	add	r2, sp, #128	; 0x80
 8009a48:	a81d      	add	r0, sp, #116	; 0x74
 8009a4a:	f001 fffb 	bl	800ba44 <__hexnan>
 8009a4e:	2805      	cmp	r0, #5
 8009a50:	d126      	bne.n	8009aa0 <_strtod_l+0x388>
 8009a52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a54:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009a58:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009a5c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009a60:	e69c      	b.n	800979c <_strtod_l+0x84>
 8009a62:	210a      	movs	r1, #10
 8009a64:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009a68:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009a6c:	e7b9      	b.n	80099e2 <_strtod_l+0x2ca>
 8009a6e:	2b6e      	cmp	r3, #110	; 0x6e
 8009a70:	e7db      	b.n	8009a2a <_strtod_l+0x312>
 8009a72:	498f      	ldr	r1, [pc, #572]	; (8009cb0 <_strtod_l+0x598>)
 8009a74:	a81d      	add	r0, sp, #116	; 0x74
 8009a76:	f001 ffd1 	bl	800ba1c <__match>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	f43f aeaa 	beq.w	80097d4 <_strtod_l+0xbc>
 8009a80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a82:	498c      	ldr	r1, [pc, #560]	; (8009cb4 <_strtod_l+0x59c>)
 8009a84:	3b01      	subs	r3, #1
 8009a86:	a81d      	add	r0, sp, #116	; 0x74
 8009a88:	931d      	str	r3, [sp, #116]	; 0x74
 8009a8a:	f001 ffc7 	bl	800ba1c <__match>
 8009a8e:	b910      	cbnz	r0, 8009a96 <_strtod_l+0x37e>
 8009a90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a92:	3301      	adds	r3, #1
 8009a94:	931d      	str	r3, [sp, #116]	; 0x74
 8009a96:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009cc4 <_strtod_l+0x5ac>
 8009a9a:	f04f 0a00 	mov.w	sl, #0
 8009a9e:	e67d      	b.n	800979c <_strtod_l+0x84>
 8009aa0:	4885      	ldr	r0, [pc, #532]	; (8009cb8 <_strtod_l+0x5a0>)
 8009aa2:	f002 ff91 	bl	800c9c8 <nan>
 8009aa6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009aaa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009aae:	e675      	b.n	800979c <_strtod_l+0x84>
 8009ab0:	9b07      	ldr	r3, [sp, #28]
 8009ab2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ab4:	1af3      	subs	r3, r6, r3
 8009ab6:	2f00      	cmp	r7, #0
 8009ab8:	bf08      	it	eq
 8009aba:	462f      	moveq	r7, r5
 8009abc:	2d10      	cmp	r5, #16
 8009abe:	9308      	str	r3, [sp, #32]
 8009ac0:	46a8      	mov	r8, r5
 8009ac2:	bfa8      	it	ge
 8009ac4:	f04f 0810 	movge.w	r8, #16
 8009ac8:	f7f6 fd4c 	bl	8000564 <__aeabi_ui2d>
 8009acc:	2d09      	cmp	r5, #9
 8009ace:	4682      	mov	sl, r0
 8009ad0:	468b      	mov	fp, r1
 8009ad2:	dd13      	ble.n	8009afc <_strtod_l+0x3e4>
 8009ad4:	4b79      	ldr	r3, [pc, #484]	; (8009cbc <_strtod_l+0x5a4>)
 8009ad6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009ada:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009ade:	f7f6 fdbb 	bl	8000658 <__aeabi_dmul>
 8009ae2:	4682      	mov	sl, r0
 8009ae4:	4648      	mov	r0, r9
 8009ae6:	468b      	mov	fp, r1
 8009ae8:	f7f6 fd3c 	bl	8000564 <__aeabi_ui2d>
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	4650      	mov	r0, sl
 8009af2:	4659      	mov	r1, fp
 8009af4:	f7f6 fbfa 	bl	80002ec <__adddf3>
 8009af8:	4682      	mov	sl, r0
 8009afa:	468b      	mov	fp, r1
 8009afc:	2d0f      	cmp	r5, #15
 8009afe:	dc38      	bgt.n	8009b72 <_strtod_l+0x45a>
 8009b00:	9b08      	ldr	r3, [sp, #32]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f43f ae4a 	beq.w	800979c <_strtod_l+0x84>
 8009b08:	dd24      	ble.n	8009b54 <_strtod_l+0x43c>
 8009b0a:	2b16      	cmp	r3, #22
 8009b0c:	dc0b      	bgt.n	8009b26 <_strtod_l+0x40e>
 8009b0e:	4d6b      	ldr	r5, [pc, #428]	; (8009cbc <_strtod_l+0x5a4>)
 8009b10:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009b14:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009b18:	4652      	mov	r2, sl
 8009b1a:	465b      	mov	r3, fp
 8009b1c:	f7f6 fd9c 	bl	8000658 <__aeabi_dmul>
 8009b20:	4682      	mov	sl, r0
 8009b22:	468b      	mov	fp, r1
 8009b24:	e63a      	b.n	800979c <_strtod_l+0x84>
 8009b26:	9a08      	ldr	r2, [sp, #32]
 8009b28:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	db20      	blt.n	8009b72 <_strtod_l+0x45a>
 8009b30:	4c62      	ldr	r4, [pc, #392]	; (8009cbc <_strtod_l+0x5a4>)
 8009b32:	f1c5 050f 	rsb	r5, r5, #15
 8009b36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009b3a:	4652      	mov	r2, sl
 8009b3c:	465b      	mov	r3, fp
 8009b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b42:	f7f6 fd89 	bl	8000658 <__aeabi_dmul>
 8009b46:	9b08      	ldr	r3, [sp, #32]
 8009b48:	1b5d      	subs	r5, r3, r5
 8009b4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009b4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009b52:	e7e3      	b.n	8009b1c <_strtod_l+0x404>
 8009b54:	9b08      	ldr	r3, [sp, #32]
 8009b56:	3316      	adds	r3, #22
 8009b58:	db0b      	blt.n	8009b72 <_strtod_l+0x45a>
 8009b5a:	9b07      	ldr	r3, [sp, #28]
 8009b5c:	4a57      	ldr	r2, [pc, #348]	; (8009cbc <_strtod_l+0x5a4>)
 8009b5e:	1b9e      	subs	r6, r3, r6
 8009b60:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009b64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b68:	4650      	mov	r0, sl
 8009b6a:	4659      	mov	r1, fp
 8009b6c:	f7f6 fe9e 	bl	80008ac <__aeabi_ddiv>
 8009b70:	e7d6      	b.n	8009b20 <_strtod_l+0x408>
 8009b72:	9b08      	ldr	r3, [sp, #32]
 8009b74:	eba5 0808 	sub.w	r8, r5, r8
 8009b78:	4498      	add	r8, r3
 8009b7a:	f1b8 0f00 	cmp.w	r8, #0
 8009b7e:	dd71      	ble.n	8009c64 <_strtod_l+0x54c>
 8009b80:	f018 030f 	ands.w	r3, r8, #15
 8009b84:	d00a      	beq.n	8009b9c <_strtod_l+0x484>
 8009b86:	494d      	ldr	r1, [pc, #308]	; (8009cbc <_strtod_l+0x5a4>)
 8009b88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b8c:	4652      	mov	r2, sl
 8009b8e:	465b      	mov	r3, fp
 8009b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b94:	f7f6 fd60 	bl	8000658 <__aeabi_dmul>
 8009b98:	4682      	mov	sl, r0
 8009b9a:	468b      	mov	fp, r1
 8009b9c:	f038 080f 	bics.w	r8, r8, #15
 8009ba0:	d04d      	beq.n	8009c3e <_strtod_l+0x526>
 8009ba2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009ba6:	dd22      	ble.n	8009bee <_strtod_l+0x4d6>
 8009ba8:	2500      	movs	r5, #0
 8009baa:	462e      	mov	r6, r5
 8009bac:	9509      	str	r5, [sp, #36]	; 0x24
 8009bae:	9507      	str	r5, [sp, #28]
 8009bb0:	2322      	movs	r3, #34	; 0x22
 8009bb2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009cc4 <_strtod_l+0x5ac>
 8009bb6:	6023      	str	r3, [r4, #0]
 8009bb8:	f04f 0a00 	mov.w	sl, #0
 8009bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f43f adec 	beq.w	800979c <_strtod_l+0x84>
 8009bc4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f002 f8b8 	bl	800bd3c <_Bfree>
 8009bcc:	9907      	ldr	r1, [sp, #28]
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f002 f8b4 	bl	800bd3c <_Bfree>
 8009bd4:	4631      	mov	r1, r6
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f002 f8b0 	bl	800bd3c <_Bfree>
 8009bdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bde:	4620      	mov	r0, r4
 8009be0:	f002 f8ac 	bl	800bd3c <_Bfree>
 8009be4:	4629      	mov	r1, r5
 8009be6:	4620      	mov	r0, r4
 8009be8:	f002 f8a8 	bl	800bd3c <_Bfree>
 8009bec:	e5d6      	b.n	800979c <_strtod_l+0x84>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009bf4:	4650      	mov	r0, sl
 8009bf6:	4659      	mov	r1, fp
 8009bf8:	4699      	mov	r9, r3
 8009bfa:	f1b8 0f01 	cmp.w	r8, #1
 8009bfe:	dc21      	bgt.n	8009c44 <_strtod_l+0x52c>
 8009c00:	b10b      	cbz	r3, 8009c06 <_strtod_l+0x4ee>
 8009c02:	4682      	mov	sl, r0
 8009c04:	468b      	mov	fp, r1
 8009c06:	4b2e      	ldr	r3, [pc, #184]	; (8009cc0 <_strtod_l+0x5a8>)
 8009c08:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009c0c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009c10:	4652      	mov	r2, sl
 8009c12:	465b      	mov	r3, fp
 8009c14:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009c18:	f7f6 fd1e 	bl	8000658 <__aeabi_dmul>
 8009c1c:	4b29      	ldr	r3, [pc, #164]	; (8009cc4 <_strtod_l+0x5ac>)
 8009c1e:	460a      	mov	r2, r1
 8009c20:	400b      	ands	r3, r1
 8009c22:	4929      	ldr	r1, [pc, #164]	; (8009cc8 <_strtod_l+0x5b0>)
 8009c24:	428b      	cmp	r3, r1
 8009c26:	4682      	mov	sl, r0
 8009c28:	d8be      	bhi.n	8009ba8 <_strtod_l+0x490>
 8009c2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009c2e:	428b      	cmp	r3, r1
 8009c30:	bf86      	itte	hi
 8009c32:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009ccc <_strtod_l+0x5b4>
 8009c36:	f04f 3aff 	movhi.w	sl, #4294967295
 8009c3a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009c3e:	2300      	movs	r3, #0
 8009c40:	9304      	str	r3, [sp, #16]
 8009c42:	e081      	b.n	8009d48 <_strtod_l+0x630>
 8009c44:	f018 0f01 	tst.w	r8, #1
 8009c48:	d007      	beq.n	8009c5a <_strtod_l+0x542>
 8009c4a:	4b1d      	ldr	r3, [pc, #116]	; (8009cc0 <_strtod_l+0x5a8>)
 8009c4c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c54:	f7f6 fd00 	bl	8000658 <__aeabi_dmul>
 8009c58:	2301      	movs	r3, #1
 8009c5a:	f109 0901 	add.w	r9, r9, #1
 8009c5e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009c62:	e7ca      	b.n	8009bfa <_strtod_l+0x4e2>
 8009c64:	d0eb      	beq.n	8009c3e <_strtod_l+0x526>
 8009c66:	f1c8 0800 	rsb	r8, r8, #0
 8009c6a:	f018 020f 	ands.w	r2, r8, #15
 8009c6e:	d00a      	beq.n	8009c86 <_strtod_l+0x56e>
 8009c70:	4b12      	ldr	r3, [pc, #72]	; (8009cbc <_strtod_l+0x5a4>)
 8009c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c76:	4650      	mov	r0, sl
 8009c78:	4659      	mov	r1, fp
 8009c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7e:	f7f6 fe15 	bl	80008ac <__aeabi_ddiv>
 8009c82:	4682      	mov	sl, r0
 8009c84:	468b      	mov	fp, r1
 8009c86:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009c8a:	d0d8      	beq.n	8009c3e <_strtod_l+0x526>
 8009c8c:	f1b8 0f1f 	cmp.w	r8, #31
 8009c90:	dd1e      	ble.n	8009cd0 <_strtod_l+0x5b8>
 8009c92:	2500      	movs	r5, #0
 8009c94:	462e      	mov	r6, r5
 8009c96:	9509      	str	r5, [sp, #36]	; 0x24
 8009c98:	9507      	str	r5, [sp, #28]
 8009c9a:	2322      	movs	r3, #34	; 0x22
 8009c9c:	f04f 0a00 	mov.w	sl, #0
 8009ca0:	f04f 0b00 	mov.w	fp, #0
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	e789      	b.n	8009bbc <_strtod_l+0x4a4>
 8009ca8:	0800f74d 	.word	0x0800f74d
 8009cac:	0800f788 	.word	0x0800f788
 8009cb0:	0800f745 	.word	0x0800f745
 8009cb4:	0800f8cc 	.word	0x0800f8cc
 8009cb8:	0800fb88 	.word	0x0800fb88
 8009cbc:	0800fa68 	.word	0x0800fa68
 8009cc0:	0800fa40 	.word	0x0800fa40
 8009cc4:	7ff00000 	.word	0x7ff00000
 8009cc8:	7ca00000 	.word	0x7ca00000
 8009ccc:	7fefffff 	.word	0x7fefffff
 8009cd0:	f018 0310 	ands.w	r3, r8, #16
 8009cd4:	bf18      	it	ne
 8009cd6:	236a      	movne	r3, #106	; 0x6a
 8009cd8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a090 <_strtod_l+0x978>
 8009cdc:	9304      	str	r3, [sp, #16]
 8009cde:	4650      	mov	r0, sl
 8009ce0:	4659      	mov	r1, fp
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	f018 0f01 	tst.w	r8, #1
 8009ce8:	d004      	beq.n	8009cf4 <_strtod_l+0x5dc>
 8009cea:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009cee:	f7f6 fcb3 	bl	8000658 <__aeabi_dmul>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009cf8:	f109 0908 	add.w	r9, r9, #8
 8009cfc:	d1f2      	bne.n	8009ce4 <_strtod_l+0x5cc>
 8009cfe:	b10b      	cbz	r3, 8009d04 <_strtod_l+0x5ec>
 8009d00:	4682      	mov	sl, r0
 8009d02:	468b      	mov	fp, r1
 8009d04:	9b04      	ldr	r3, [sp, #16]
 8009d06:	b1bb      	cbz	r3, 8009d38 <_strtod_l+0x620>
 8009d08:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009d0c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	4659      	mov	r1, fp
 8009d14:	dd10      	ble.n	8009d38 <_strtod_l+0x620>
 8009d16:	2b1f      	cmp	r3, #31
 8009d18:	f340 8128 	ble.w	8009f6c <_strtod_l+0x854>
 8009d1c:	2b34      	cmp	r3, #52	; 0x34
 8009d1e:	bfde      	ittt	le
 8009d20:	3b20      	suble	r3, #32
 8009d22:	f04f 32ff 	movle.w	r2, #4294967295
 8009d26:	fa02 f303 	lslle.w	r3, r2, r3
 8009d2a:	f04f 0a00 	mov.w	sl, #0
 8009d2e:	bfcc      	ite	gt
 8009d30:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009d34:	ea03 0b01 	andle.w	fp, r3, r1
 8009d38:	2200      	movs	r2, #0
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	4650      	mov	r0, sl
 8009d3e:	4659      	mov	r1, fp
 8009d40:	f7f6 fef2 	bl	8000b28 <__aeabi_dcmpeq>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d1a4      	bne.n	8009c92 <_strtod_l+0x57a>
 8009d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d4e:	462b      	mov	r3, r5
 8009d50:	463a      	mov	r2, r7
 8009d52:	4620      	mov	r0, r4
 8009d54:	f002 f85e 	bl	800be14 <__s2b>
 8009d58:	9009      	str	r0, [sp, #36]	; 0x24
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	f43f af24 	beq.w	8009ba8 <_strtod_l+0x490>
 8009d60:	9b07      	ldr	r3, [sp, #28]
 8009d62:	1b9e      	subs	r6, r3, r6
 8009d64:	9b08      	ldr	r3, [sp, #32]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	bfb4      	ite	lt
 8009d6a:	4633      	movlt	r3, r6
 8009d6c:	2300      	movge	r3, #0
 8009d6e:	9310      	str	r3, [sp, #64]	; 0x40
 8009d70:	9b08      	ldr	r3, [sp, #32]
 8009d72:	2500      	movs	r5, #0
 8009d74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009d78:	9318      	str	r3, [sp, #96]	; 0x60
 8009d7a:	462e      	mov	r6, r5
 8009d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d7e:	4620      	mov	r0, r4
 8009d80:	6859      	ldr	r1, [r3, #4]
 8009d82:	f001 ff9b 	bl	800bcbc <_Balloc>
 8009d86:	9007      	str	r0, [sp, #28]
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	f43f af11 	beq.w	8009bb0 <_strtod_l+0x498>
 8009d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d90:	691a      	ldr	r2, [r3, #16]
 8009d92:	3202      	adds	r2, #2
 8009d94:	f103 010c 	add.w	r1, r3, #12
 8009d98:	0092      	lsls	r2, r2, #2
 8009d9a:	300c      	adds	r0, #12
 8009d9c:	f7fe fe79 	bl	8008a92 <memcpy>
 8009da0:	ec4b ab10 	vmov	d0, sl, fp
 8009da4:	aa20      	add	r2, sp, #128	; 0x80
 8009da6:	a91f      	add	r1, sp, #124	; 0x7c
 8009da8:	4620      	mov	r0, r4
 8009daa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009dae:	f002 fb6d 	bl	800c48c <__d2b>
 8009db2:	901e      	str	r0, [sp, #120]	; 0x78
 8009db4:	2800      	cmp	r0, #0
 8009db6:	f43f aefb 	beq.w	8009bb0 <_strtod_l+0x498>
 8009dba:	2101      	movs	r1, #1
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	f002 f8c3 	bl	800bf48 <__i2b>
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	f43f aef3 	beq.w	8009bb0 <_strtod_l+0x498>
 8009dca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009dcc:	9904      	ldr	r1, [sp, #16]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	bfab      	itete	ge
 8009dd2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009dd4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009dd6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009dd8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009ddc:	bfac      	ite	ge
 8009dde:	eb03 0902 	addge.w	r9, r3, r2
 8009de2:	1ad7      	sublt	r7, r2, r3
 8009de4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009de6:	eba3 0801 	sub.w	r8, r3, r1
 8009dea:	4490      	add	r8, r2
 8009dec:	4ba3      	ldr	r3, [pc, #652]	; (800a07c <_strtod_l+0x964>)
 8009dee:	f108 38ff 	add.w	r8, r8, #4294967295
 8009df2:	4598      	cmp	r8, r3
 8009df4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009df8:	f280 80cc 	bge.w	8009f94 <_strtod_l+0x87c>
 8009dfc:	eba3 0308 	sub.w	r3, r3, r8
 8009e00:	2b1f      	cmp	r3, #31
 8009e02:	eba2 0203 	sub.w	r2, r2, r3
 8009e06:	f04f 0101 	mov.w	r1, #1
 8009e0a:	f300 80b6 	bgt.w	8009f7a <_strtod_l+0x862>
 8009e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e12:	9311      	str	r3, [sp, #68]	; 0x44
 8009e14:	2300      	movs	r3, #0
 8009e16:	930c      	str	r3, [sp, #48]	; 0x30
 8009e18:	eb09 0802 	add.w	r8, r9, r2
 8009e1c:	9b04      	ldr	r3, [sp, #16]
 8009e1e:	45c1      	cmp	r9, r8
 8009e20:	4417      	add	r7, r2
 8009e22:	441f      	add	r7, r3
 8009e24:	464b      	mov	r3, r9
 8009e26:	bfa8      	it	ge
 8009e28:	4643      	movge	r3, r8
 8009e2a:	42bb      	cmp	r3, r7
 8009e2c:	bfa8      	it	ge
 8009e2e:	463b      	movge	r3, r7
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	bfc2      	ittt	gt
 8009e34:	eba8 0803 	subgt.w	r8, r8, r3
 8009e38:	1aff      	subgt	r7, r7, r3
 8009e3a:	eba9 0903 	subgt.w	r9, r9, r3
 8009e3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	dd17      	ble.n	8009e74 <_strtod_l+0x75c>
 8009e44:	4631      	mov	r1, r6
 8009e46:	461a      	mov	r2, r3
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f002 f939 	bl	800c0c0 <__pow5mult>
 8009e4e:	4606      	mov	r6, r0
 8009e50:	2800      	cmp	r0, #0
 8009e52:	f43f aead 	beq.w	8009bb0 <_strtod_l+0x498>
 8009e56:	4601      	mov	r1, r0
 8009e58:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f002 f88a 	bl	800bf74 <__multiply>
 8009e60:	900f      	str	r0, [sp, #60]	; 0x3c
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f43f aea4 	beq.w	8009bb0 <_strtod_l+0x498>
 8009e68:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f001 ff66 	bl	800bd3c <_Bfree>
 8009e70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e72:	931e      	str	r3, [sp, #120]	; 0x78
 8009e74:	f1b8 0f00 	cmp.w	r8, #0
 8009e78:	f300 8091 	bgt.w	8009f9e <_strtod_l+0x886>
 8009e7c:	9b08      	ldr	r3, [sp, #32]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	dd08      	ble.n	8009e94 <_strtod_l+0x77c>
 8009e82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009e84:	9907      	ldr	r1, [sp, #28]
 8009e86:	4620      	mov	r0, r4
 8009e88:	f002 f91a 	bl	800c0c0 <__pow5mult>
 8009e8c:	9007      	str	r0, [sp, #28]
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	f43f ae8e 	beq.w	8009bb0 <_strtod_l+0x498>
 8009e94:	2f00      	cmp	r7, #0
 8009e96:	dd08      	ble.n	8009eaa <_strtod_l+0x792>
 8009e98:	9907      	ldr	r1, [sp, #28]
 8009e9a:	463a      	mov	r2, r7
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f002 f969 	bl	800c174 <__lshift>
 8009ea2:	9007      	str	r0, [sp, #28]
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	f43f ae83 	beq.w	8009bb0 <_strtod_l+0x498>
 8009eaa:	f1b9 0f00 	cmp.w	r9, #0
 8009eae:	dd08      	ble.n	8009ec2 <_strtod_l+0x7aa>
 8009eb0:	4631      	mov	r1, r6
 8009eb2:	464a      	mov	r2, r9
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f002 f95d 	bl	800c174 <__lshift>
 8009eba:	4606      	mov	r6, r0
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	f43f ae77 	beq.w	8009bb0 <_strtod_l+0x498>
 8009ec2:	9a07      	ldr	r2, [sp, #28]
 8009ec4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f002 f9dc 	bl	800c284 <__mdiff>
 8009ecc:	4605      	mov	r5, r0
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	f43f ae6e 	beq.w	8009bb0 <_strtod_l+0x498>
 8009ed4:	68c3      	ldr	r3, [r0, #12]
 8009ed6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ed8:	2300      	movs	r3, #0
 8009eda:	60c3      	str	r3, [r0, #12]
 8009edc:	4631      	mov	r1, r6
 8009ede:	f002 f9b5 	bl	800c24c <__mcmp>
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	da65      	bge.n	8009fb2 <_strtod_l+0x89a>
 8009ee6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ee8:	ea53 030a 	orrs.w	r3, r3, sl
 8009eec:	f040 8087 	bne.w	8009ffe <_strtod_l+0x8e6>
 8009ef0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f040 8082 	bne.w	8009ffe <_strtod_l+0x8e6>
 8009efa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009efe:	0d1b      	lsrs	r3, r3, #20
 8009f00:	051b      	lsls	r3, r3, #20
 8009f02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009f06:	d97a      	bls.n	8009ffe <_strtod_l+0x8e6>
 8009f08:	696b      	ldr	r3, [r5, #20]
 8009f0a:	b913      	cbnz	r3, 8009f12 <_strtod_l+0x7fa>
 8009f0c:	692b      	ldr	r3, [r5, #16]
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	dd75      	ble.n	8009ffe <_strtod_l+0x8e6>
 8009f12:	4629      	mov	r1, r5
 8009f14:	2201      	movs	r2, #1
 8009f16:	4620      	mov	r0, r4
 8009f18:	f002 f92c 	bl	800c174 <__lshift>
 8009f1c:	4631      	mov	r1, r6
 8009f1e:	4605      	mov	r5, r0
 8009f20:	f002 f994 	bl	800c24c <__mcmp>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	dd6a      	ble.n	8009ffe <_strtod_l+0x8e6>
 8009f28:	9904      	ldr	r1, [sp, #16]
 8009f2a:	4a55      	ldr	r2, [pc, #340]	; (800a080 <_strtod_l+0x968>)
 8009f2c:	465b      	mov	r3, fp
 8009f2e:	2900      	cmp	r1, #0
 8009f30:	f000 8085 	beq.w	800a03e <_strtod_l+0x926>
 8009f34:	ea02 010b 	and.w	r1, r2, fp
 8009f38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009f3c:	dc7f      	bgt.n	800a03e <_strtod_l+0x926>
 8009f3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009f42:	f77f aeaa 	ble.w	8009c9a <_strtod_l+0x582>
 8009f46:	4a4f      	ldr	r2, [pc, #316]	; (800a084 <_strtod_l+0x96c>)
 8009f48:	2300      	movs	r3, #0
 8009f4a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8009f4e:	4650      	mov	r0, sl
 8009f50:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009f54:	4659      	mov	r1, fp
 8009f56:	f7f6 fb7f 	bl	8000658 <__aeabi_dmul>
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4303      	orrs	r3, r0
 8009f5e:	bf08      	it	eq
 8009f60:	2322      	moveq	r3, #34	; 0x22
 8009f62:	4682      	mov	sl, r0
 8009f64:	468b      	mov	fp, r1
 8009f66:	bf08      	it	eq
 8009f68:	6023      	streq	r3, [r4, #0]
 8009f6a:	e62b      	b.n	8009bc4 <_strtod_l+0x4ac>
 8009f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f70:	fa02 f303 	lsl.w	r3, r2, r3
 8009f74:	ea03 0a0a 	and.w	sl, r3, sl
 8009f78:	e6de      	b.n	8009d38 <_strtod_l+0x620>
 8009f7a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009f7e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009f82:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009f86:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009f8a:	fa01 f308 	lsl.w	r3, r1, r8
 8009f8e:	930c      	str	r3, [sp, #48]	; 0x30
 8009f90:	9111      	str	r1, [sp, #68]	; 0x44
 8009f92:	e741      	b.n	8009e18 <_strtod_l+0x700>
 8009f94:	2300      	movs	r3, #0
 8009f96:	930c      	str	r3, [sp, #48]	; 0x30
 8009f98:	2301      	movs	r3, #1
 8009f9a:	9311      	str	r3, [sp, #68]	; 0x44
 8009f9c:	e73c      	b.n	8009e18 <_strtod_l+0x700>
 8009f9e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009fa0:	4642      	mov	r2, r8
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f002 f8e6 	bl	800c174 <__lshift>
 8009fa8:	901e      	str	r0, [sp, #120]	; 0x78
 8009faa:	2800      	cmp	r0, #0
 8009fac:	f47f af66 	bne.w	8009e7c <_strtod_l+0x764>
 8009fb0:	e5fe      	b.n	8009bb0 <_strtod_l+0x498>
 8009fb2:	465f      	mov	r7, fp
 8009fb4:	d16e      	bne.n	800a094 <_strtod_l+0x97c>
 8009fb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009fb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fbc:	b342      	cbz	r2, 800a010 <_strtod_l+0x8f8>
 8009fbe:	4a32      	ldr	r2, [pc, #200]	; (800a088 <_strtod_l+0x970>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d128      	bne.n	800a016 <_strtod_l+0x8fe>
 8009fc4:	9b04      	ldr	r3, [sp, #16]
 8009fc6:	4650      	mov	r0, sl
 8009fc8:	b1eb      	cbz	r3, 800a006 <_strtod_l+0x8ee>
 8009fca:	4a2d      	ldr	r2, [pc, #180]	; (800a080 <_strtod_l+0x968>)
 8009fcc:	403a      	ands	r2, r7
 8009fce:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009fd2:	f04f 31ff 	mov.w	r1, #4294967295
 8009fd6:	d819      	bhi.n	800a00c <_strtod_l+0x8f4>
 8009fd8:	0d12      	lsrs	r2, r2, #20
 8009fda:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009fde:	fa01 f303 	lsl.w	r3, r1, r3
 8009fe2:	4298      	cmp	r0, r3
 8009fe4:	d117      	bne.n	800a016 <_strtod_l+0x8fe>
 8009fe6:	4b29      	ldr	r3, [pc, #164]	; (800a08c <_strtod_l+0x974>)
 8009fe8:	429f      	cmp	r7, r3
 8009fea:	d102      	bne.n	8009ff2 <_strtod_l+0x8da>
 8009fec:	3001      	adds	r0, #1
 8009fee:	f43f addf 	beq.w	8009bb0 <_strtod_l+0x498>
 8009ff2:	4b23      	ldr	r3, [pc, #140]	; (800a080 <_strtod_l+0x968>)
 8009ff4:	403b      	ands	r3, r7
 8009ff6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009ffa:	f04f 0a00 	mov.w	sl, #0
 8009ffe:	9b04      	ldr	r3, [sp, #16]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1a0      	bne.n	8009f46 <_strtod_l+0x82e>
 800a004:	e5de      	b.n	8009bc4 <_strtod_l+0x4ac>
 800a006:	f04f 33ff 	mov.w	r3, #4294967295
 800a00a:	e7ea      	b.n	8009fe2 <_strtod_l+0x8ca>
 800a00c:	460b      	mov	r3, r1
 800a00e:	e7e8      	b.n	8009fe2 <_strtod_l+0x8ca>
 800a010:	ea53 030a 	orrs.w	r3, r3, sl
 800a014:	d088      	beq.n	8009f28 <_strtod_l+0x810>
 800a016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a018:	b1db      	cbz	r3, 800a052 <_strtod_l+0x93a>
 800a01a:	423b      	tst	r3, r7
 800a01c:	d0ef      	beq.n	8009ffe <_strtod_l+0x8e6>
 800a01e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a020:	9a04      	ldr	r2, [sp, #16]
 800a022:	4650      	mov	r0, sl
 800a024:	4659      	mov	r1, fp
 800a026:	b1c3      	cbz	r3, 800a05a <_strtod_l+0x942>
 800a028:	f7ff fb59 	bl	80096de <sulp>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a034:	f7f6 f95a 	bl	80002ec <__adddf3>
 800a038:	4682      	mov	sl, r0
 800a03a:	468b      	mov	fp, r1
 800a03c:	e7df      	b.n	8009ffe <_strtod_l+0x8e6>
 800a03e:	4013      	ands	r3, r2
 800a040:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a044:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a048:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a04c:	f04f 3aff 	mov.w	sl, #4294967295
 800a050:	e7d5      	b.n	8009ffe <_strtod_l+0x8e6>
 800a052:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a054:	ea13 0f0a 	tst.w	r3, sl
 800a058:	e7e0      	b.n	800a01c <_strtod_l+0x904>
 800a05a:	f7ff fb40 	bl	80096de <sulp>
 800a05e:	4602      	mov	r2, r0
 800a060:	460b      	mov	r3, r1
 800a062:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a066:	f7f6 f93f 	bl	80002e8 <__aeabi_dsub>
 800a06a:	2200      	movs	r2, #0
 800a06c:	2300      	movs	r3, #0
 800a06e:	4682      	mov	sl, r0
 800a070:	468b      	mov	fp, r1
 800a072:	f7f6 fd59 	bl	8000b28 <__aeabi_dcmpeq>
 800a076:	2800      	cmp	r0, #0
 800a078:	d0c1      	beq.n	8009ffe <_strtod_l+0x8e6>
 800a07a:	e60e      	b.n	8009c9a <_strtod_l+0x582>
 800a07c:	fffffc02 	.word	0xfffffc02
 800a080:	7ff00000 	.word	0x7ff00000
 800a084:	39500000 	.word	0x39500000
 800a088:	000fffff 	.word	0x000fffff
 800a08c:	7fefffff 	.word	0x7fefffff
 800a090:	0800f7a0 	.word	0x0800f7a0
 800a094:	4631      	mov	r1, r6
 800a096:	4628      	mov	r0, r5
 800a098:	f002 fa54 	bl	800c544 <__ratio>
 800a09c:	ec59 8b10 	vmov	r8, r9, d0
 800a0a0:	ee10 0a10 	vmov	r0, s0
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a0aa:	4649      	mov	r1, r9
 800a0ac:	f7f6 fd50 	bl	8000b50 <__aeabi_dcmple>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d07c      	beq.n	800a1ae <_strtod_l+0xa96>
 800a0b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d04c      	beq.n	800a154 <_strtod_l+0xa3c>
 800a0ba:	4b95      	ldr	r3, [pc, #596]	; (800a310 <_strtod_l+0xbf8>)
 800a0bc:	2200      	movs	r2, #0
 800a0be:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a0c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a310 <_strtod_l+0xbf8>
 800a0c6:	f04f 0800 	mov.w	r8, #0
 800a0ca:	4b92      	ldr	r3, [pc, #584]	; (800a314 <_strtod_l+0xbfc>)
 800a0cc:	403b      	ands	r3, r7
 800a0ce:	9311      	str	r3, [sp, #68]	; 0x44
 800a0d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a0d2:	4b91      	ldr	r3, [pc, #580]	; (800a318 <_strtod_l+0xc00>)
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	f040 80b2 	bne.w	800a23e <_strtod_l+0xb26>
 800a0da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a0de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0e2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a0e6:	ec4b ab10 	vmov	d0, sl, fp
 800a0ea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a0ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a0f2:	f002 f94f 	bl	800c394 <__ulp>
 800a0f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0fa:	ec53 2b10 	vmov	r2, r3, d0
 800a0fe:	f7f6 faab 	bl	8000658 <__aeabi_dmul>
 800a102:	4652      	mov	r2, sl
 800a104:	465b      	mov	r3, fp
 800a106:	f7f6 f8f1 	bl	80002ec <__adddf3>
 800a10a:	460b      	mov	r3, r1
 800a10c:	4981      	ldr	r1, [pc, #516]	; (800a314 <_strtod_l+0xbfc>)
 800a10e:	4a83      	ldr	r2, [pc, #524]	; (800a31c <_strtod_l+0xc04>)
 800a110:	4019      	ands	r1, r3
 800a112:	4291      	cmp	r1, r2
 800a114:	4682      	mov	sl, r0
 800a116:	d95e      	bls.n	800a1d6 <_strtod_l+0xabe>
 800a118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a11a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a11e:	4293      	cmp	r3, r2
 800a120:	d103      	bne.n	800a12a <_strtod_l+0xa12>
 800a122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a124:	3301      	adds	r3, #1
 800a126:	f43f ad43 	beq.w	8009bb0 <_strtod_l+0x498>
 800a12a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a328 <_strtod_l+0xc10>
 800a12e:	f04f 3aff 	mov.w	sl, #4294967295
 800a132:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a134:	4620      	mov	r0, r4
 800a136:	f001 fe01 	bl	800bd3c <_Bfree>
 800a13a:	9907      	ldr	r1, [sp, #28]
 800a13c:	4620      	mov	r0, r4
 800a13e:	f001 fdfd 	bl	800bd3c <_Bfree>
 800a142:	4631      	mov	r1, r6
 800a144:	4620      	mov	r0, r4
 800a146:	f001 fdf9 	bl	800bd3c <_Bfree>
 800a14a:	4629      	mov	r1, r5
 800a14c:	4620      	mov	r0, r4
 800a14e:	f001 fdf5 	bl	800bd3c <_Bfree>
 800a152:	e613      	b.n	8009d7c <_strtod_l+0x664>
 800a154:	f1ba 0f00 	cmp.w	sl, #0
 800a158:	d11b      	bne.n	800a192 <_strtod_l+0xa7a>
 800a15a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a15e:	b9f3      	cbnz	r3, 800a19e <_strtod_l+0xa86>
 800a160:	4b6b      	ldr	r3, [pc, #428]	; (800a310 <_strtod_l+0xbf8>)
 800a162:	2200      	movs	r2, #0
 800a164:	4640      	mov	r0, r8
 800a166:	4649      	mov	r1, r9
 800a168:	f7f6 fce8 	bl	8000b3c <__aeabi_dcmplt>
 800a16c:	b9d0      	cbnz	r0, 800a1a4 <_strtod_l+0xa8c>
 800a16e:	4640      	mov	r0, r8
 800a170:	4649      	mov	r1, r9
 800a172:	4b6b      	ldr	r3, [pc, #428]	; (800a320 <_strtod_l+0xc08>)
 800a174:	2200      	movs	r2, #0
 800a176:	f7f6 fa6f 	bl	8000658 <__aeabi_dmul>
 800a17a:	4680      	mov	r8, r0
 800a17c:	4689      	mov	r9, r1
 800a17e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a182:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a186:	931b      	str	r3, [sp, #108]	; 0x6c
 800a188:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a18c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a190:	e79b      	b.n	800a0ca <_strtod_l+0x9b2>
 800a192:	f1ba 0f01 	cmp.w	sl, #1
 800a196:	d102      	bne.n	800a19e <_strtod_l+0xa86>
 800a198:	2f00      	cmp	r7, #0
 800a19a:	f43f ad7e 	beq.w	8009c9a <_strtod_l+0x582>
 800a19e:	4b61      	ldr	r3, [pc, #388]	; (800a324 <_strtod_l+0xc0c>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	e78c      	b.n	800a0be <_strtod_l+0x9a6>
 800a1a4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a320 <_strtod_l+0xc08>
 800a1a8:	f04f 0800 	mov.w	r8, #0
 800a1ac:	e7e7      	b.n	800a17e <_strtod_l+0xa66>
 800a1ae:	4b5c      	ldr	r3, [pc, #368]	; (800a320 <_strtod_l+0xc08>)
 800a1b0:	4640      	mov	r0, r8
 800a1b2:	4649      	mov	r1, r9
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f7f6 fa4f 	bl	8000658 <__aeabi_dmul>
 800a1ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1bc:	4680      	mov	r8, r0
 800a1be:	4689      	mov	r9, r1
 800a1c0:	b933      	cbnz	r3, 800a1d0 <_strtod_l+0xab8>
 800a1c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1c6:	9012      	str	r0, [sp, #72]	; 0x48
 800a1c8:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a1ce:	e7dd      	b.n	800a18c <_strtod_l+0xa74>
 800a1d0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a1d4:	e7f9      	b.n	800a1ca <_strtod_l+0xab2>
 800a1d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a1da:	9b04      	ldr	r3, [sp, #16]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1a8      	bne.n	800a132 <_strtod_l+0xa1a>
 800a1e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a1e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a1e6:	0d1b      	lsrs	r3, r3, #20
 800a1e8:	051b      	lsls	r3, r3, #20
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d1a1      	bne.n	800a132 <_strtod_l+0xa1a>
 800a1ee:	4640      	mov	r0, r8
 800a1f0:	4649      	mov	r1, r9
 800a1f2:	f7f6 fd91 	bl	8000d18 <__aeabi_d2lz>
 800a1f6:	f7f6 fa01 	bl	80005fc <__aeabi_l2d>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	4640      	mov	r0, r8
 800a200:	4649      	mov	r1, r9
 800a202:	f7f6 f871 	bl	80002e8 <__aeabi_dsub>
 800a206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a208:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a20c:	ea43 030a 	orr.w	r3, r3, sl
 800a210:	4313      	orrs	r3, r2
 800a212:	4680      	mov	r8, r0
 800a214:	4689      	mov	r9, r1
 800a216:	d053      	beq.n	800a2c0 <_strtod_l+0xba8>
 800a218:	a335      	add	r3, pc, #212	; (adr r3, 800a2f0 <_strtod_l+0xbd8>)
 800a21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21e:	f7f6 fc8d 	bl	8000b3c <__aeabi_dcmplt>
 800a222:	2800      	cmp	r0, #0
 800a224:	f47f acce 	bne.w	8009bc4 <_strtod_l+0x4ac>
 800a228:	a333      	add	r3, pc, #204	; (adr r3, 800a2f8 <_strtod_l+0xbe0>)
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	4640      	mov	r0, r8
 800a230:	4649      	mov	r1, r9
 800a232:	f7f6 fca1 	bl	8000b78 <__aeabi_dcmpgt>
 800a236:	2800      	cmp	r0, #0
 800a238:	f43f af7b 	beq.w	800a132 <_strtod_l+0xa1a>
 800a23c:	e4c2      	b.n	8009bc4 <_strtod_l+0x4ac>
 800a23e:	9b04      	ldr	r3, [sp, #16]
 800a240:	b333      	cbz	r3, 800a290 <_strtod_l+0xb78>
 800a242:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a244:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a248:	d822      	bhi.n	800a290 <_strtod_l+0xb78>
 800a24a:	a32d      	add	r3, pc, #180	; (adr r3, 800a300 <_strtod_l+0xbe8>)
 800a24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a250:	4640      	mov	r0, r8
 800a252:	4649      	mov	r1, r9
 800a254:	f7f6 fc7c 	bl	8000b50 <__aeabi_dcmple>
 800a258:	b1a0      	cbz	r0, 800a284 <_strtod_l+0xb6c>
 800a25a:	4649      	mov	r1, r9
 800a25c:	4640      	mov	r0, r8
 800a25e:	f7f6 fcd3 	bl	8000c08 <__aeabi_d2uiz>
 800a262:	2801      	cmp	r0, #1
 800a264:	bf38      	it	cc
 800a266:	2001      	movcc	r0, #1
 800a268:	f7f6 f97c 	bl	8000564 <__aeabi_ui2d>
 800a26c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a26e:	4680      	mov	r8, r0
 800a270:	4689      	mov	r9, r1
 800a272:	bb13      	cbnz	r3, 800a2ba <_strtod_l+0xba2>
 800a274:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a278:	9014      	str	r0, [sp, #80]	; 0x50
 800a27a:	9315      	str	r3, [sp, #84]	; 0x54
 800a27c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a280:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a286:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a288:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a28c:	1a9b      	subs	r3, r3, r2
 800a28e:	930d      	str	r3, [sp, #52]	; 0x34
 800a290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a294:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a298:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a29c:	f002 f87a 	bl	800c394 <__ulp>
 800a2a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2a4:	ec53 2b10 	vmov	r2, r3, d0
 800a2a8:	f7f6 f9d6 	bl	8000658 <__aeabi_dmul>
 800a2ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a2b0:	f7f6 f81c 	bl	80002ec <__adddf3>
 800a2b4:	4682      	mov	sl, r0
 800a2b6:	468b      	mov	fp, r1
 800a2b8:	e78f      	b.n	800a1da <_strtod_l+0xac2>
 800a2ba:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a2be:	e7dd      	b.n	800a27c <_strtod_l+0xb64>
 800a2c0:	a311      	add	r3, pc, #68	; (adr r3, 800a308 <_strtod_l+0xbf0>)
 800a2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c6:	f7f6 fc39 	bl	8000b3c <__aeabi_dcmplt>
 800a2ca:	e7b4      	b.n	800a236 <_strtod_l+0xb1e>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	930e      	str	r3, [sp, #56]	; 0x38
 800a2d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a2d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a2d4:	6013      	str	r3, [r2, #0]
 800a2d6:	f7ff ba65 	b.w	80097a4 <_strtod_l+0x8c>
 800a2da:	2b65      	cmp	r3, #101	; 0x65
 800a2dc:	f43f ab5d 	beq.w	800999a <_strtod_l+0x282>
 800a2e0:	2b45      	cmp	r3, #69	; 0x45
 800a2e2:	f43f ab5a 	beq.w	800999a <_strtod_l+0x282>
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f7ff bb92 	b.w	8009a10 <_strtod_l+0x2f8>
 800a2ec:	f3af 8000 	nop.w
 800a2f0:	94a03595 	.word	0x94a03595
 800a2f4:	3fdfffff 	.word	0x3fdfffff
 800a2f8:	35afe535 	.word	0x35afe535
 800a2fc:	3fe00000 	.word	0x3fe00000
 800a300:	ffc00000 	.word	0xffc00000
 800a304:	41dfffff 	.word	0x41dfffff
 800a308:	94a03595 	.word	0x94a03595
 800a30c:	3fcfffff 	.word	0x3fcfffff
 800a310:	3ff00000 	.word	0x3ff00000
 800a314:	7ff00000 	.word	0x7ff00000
 800a318:	7fe00000 	.word	0x7fe00000
 800a31c:	7c9fffff 	.word	0x7c9fffff
 800a320:	3fe00000 	.word	0x3fe00000
 800a324:	bff00000 	.word	0xbff00000
 800a328:	7fefffff 	.word	0x7fefffff

0800a32c <strtod>:
 800a32c:	460a      	mov	r2, r1
 800a32e:	4601      	mov	r1, r0
 800a330:	4802      	ldr	r0, [pc, #8]	; (800a33c <strtod+0x10>)
 800a332:	4b03      	ldr	r3, [pc, #12]	; (800a340 <strtod+0x14>)
 800a334:	6800      	ldr	r0, [r0, #0]
 800a336:	f7ff b9ef 	b.w	8009718 <_strtod_l>
 800a33a:	bf00      	nop
 800a33c:	20000048 	.word	0x20000048
 800a340:	200000b0 	.word	0x200000b0

0800a344 <_strtol_l.isra.0>:
 800a344:	2b01      	cmp	r3, #1
 800a346:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a34a:	d001      	beq.n	800a350 <_strtol_l.isra.0+0xc>
 800a34c:	2b24      	cmp	r3, #36	; 0x24
 800a34e:	d906      	bls.n	800a35e <_strtol_l.isra.0+0x1a>
 800a350:	f7fe fa7c 	bl	800884c <__errno>
 800a354:	2316      	movs	r3, #22
 800a356:	6003      	str	r3, [r0, #0]
 800a358:	2000      	movs	r0, #0
 800a35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a35e:	4f3a      	ldr	r7, [pc, #232]	; (800a448 <_strtol_l.isra.0+0x104>)
 800a360:	468e      	mov	lr, r1
 800a362:	4676      	mov	r6, lr
 800a364:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a368:	5de5      	ldrb	r5, [r4, r7]
 800a36a:	f015 0508 	ands.w	r5, r5, #8
 800a36e:	d1f8      	bne.n	800a362 <_strtol_l.isra.0+0x1e>
 800a370:	2c2d      	cmp	r4, #45	; 0x2d
 800a372:	d134      	bne.n	800a3de <_strtol_l.isra.0+0x9a>
 800a374:	f89e 4000 	ldrb.w	r4, [lr]
 800a378:	f04f 0801 	mov.w	r8, #1
 800a37c:	f106 0e02 	add.w	lr, r6, #2
 800a380:	2b00      	cmp	r3, #0
 800a382:	d05c      	beq.n	800a43e <_strtol_l.isra.0+0xfa>
 800a384:	2b10      	cmp	r3, #16
 800a386:	d10c      	bne.n	800a3a2 <_strtol_l.isra.0+0x5e>
 800a388:	2c30      	cmp	r4, #48	; 0x30
 800a38a:	d10a      	bne.n	800a3a2 <_strtol_l.isra.0+0x5e>
 800a38c:	f89e 4000 	ldrb.w	r4, [lr]
 800a390:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a394:	2c58      	cmp	r4, #88	; 0x58
 800a396:	d14d      	bne.n	800a434 <_strtol_l.isra.0+0xf0>
 800a398:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a39c:	2310      	movs	r3, #16
 800a39e:	f10e 0e02 	add.w	lr, lr, #2
 800a3a2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a3a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a3aa:	2600      	movs	r6, #0
 800a3ac:	fbbc f9f3 	udiv	r9, ip, r3
 800a3b0:	4635      	mov	r5, r6
 800a3b2:	fb03 ca19 	mls	sl, r3, r9, ip
 800a3b6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a3ba:	2f09      	cmp	r7, #9
 800a3bc:	d818      	bhi.n	800a3f0 <_strtol_l.isra.0+0xac>
 800a3be:	463c      	mov	r4, r7
 800a3c0:	42a3      	cmp	r3, r4
 800a3c2:	dd24      	ble.n	800a40e <_strtol_l.isra.0+0xca>
 800a3c4:	2e00      	cmp	r6, #0
 800a3c6:	db1f      	blt.n	800a408 <_strtol_l.isra.0+0xc4>
 800a3c8:	45a9      	cmp	r9, r5
 800a3ca:	d31d      	bcc.n	800a408 <_strtol_l.isra.0+0xc4>
 800a3cc:	d101      	bne.n	800a3d2 <_strtol_l.isra.0+0x8e>
 800a3ce:	45a2      	cmp	sl, r4
 800a3d0:	db1a      	blt.n	800a408 <_strtol_l.isra.0+0xc4>
 800a3d2:	fb05 4503 	mla	r5, r5, r3, r4
 800a3d6:	2601      	movs	r6, #1
 800a3d8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a3dc:	e7eb      	b.n	800a3b6 <_strtol_l.isra.0+0x72>
 800a3de:	2c2b      	cmp	r4, #43	; 0x2b
 800a3e0:	bf08      	it	eq
 800a3e2:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a3e6:	46a8      	mov	r8, r5
 800a3e8:	bf08      	it	eq
 800a3ea:	f106 0e02 	addeq.w	lr, r6, #2
 800a3ee:	e7c7      	b.n	800a380 <_strtol_l.isra.0+0x3c>
 800a3f0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a3f4:	2f19      	cmp	r7, #25
 800a3f6:	d801      	bhi.n	800a3fc <_strtol_l.isra.0+0xb8>
 800a3f8:	3c37      	subs	r4, #55	; 0x37
 800a3fa:	e7e1      	b.n	800a3c0 <_strtol_l.isra.0+0x7c>
 800a3fc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a400:	2f19      	cmp	r7, #25
 800a402:	d804      	bhi.n	800a40e <_strtol_l.isra.0+0xca>
 800a404:	3c57      	subs	r4, #87	; 0x57
 800a406:	e7db      	b.n	800a3c0 <_strtol_l.isra.0+0x7c>
 800a408:	f04f 36ff 	mov.w	r6, #4294967295
 800a40c:	e7e4      	b.n	800a3d8 <_strtol_l.isra.0+0x94>
 800a40e:	2e00      	cmp	r6, #0
 800a410:	da05      	bge.n	800a41e <_strtol_l.isra.0+0xda>
 800a412:	2322      	movs	r3, #34	; 0x22
 800a414:	6003      	str	r3, [r0, #0]
 800a416:	4665      	mov	r5, ip
 800a418:	b942      	cbnz	r2, 800a42c <_strtol_l.isra.0+0xe8>
 800a41a:	4628      	mov	r0, r5
 800a41c:	e79d      	b.n	800a35a <_strtol_l.isra.0+0x16>
 800a41e:	f1b8 0f00 	cmp.w	r8, #0
 800a422:	d000      	beq.n	800a426 <_strtol_l.isra.0+0xe2>
 800a424:	426d      	negs	r5, r5
 800a426:	2a00      	cmp	r2, #0
 800a428:	d0f7      	beq.n	800a41a <_strtol_l.isra.0+0xd6>
 800a42a:	b10e      	cbz	r6, 800a430 <_strtol_l.isra.0+0xec>
 800a42c:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a430:	6011      	str	r1, [r2, #0]
 800a432:	e7f2      	b.n	800a41a <_strtol_l.isra.0+0xd6>
 800a434:	2430      	movs	r4, #48	; 0x30
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1b3      	bne.n	800a3a2 <_strtol_l.isra.0+0x5e>
 800a43a:	2308      	movs	r3, #8
 800a43c:	e7b1      	b.n	800a3a2 <_strtol_l.isra.0+0x5e>
 800a43e:	2c30      	cmp	r4, #48	; 0x30
 800a440:	d0a4      	beq.n	800a38c <_strtol_l.isra.0+0x48>
 800a442:	230a      	movs	r3, #10
 800a444:	e7ad      	b.n	800a3a2 <_strtol_l.isra.0+0x5e>
 800a446:	bf00      	nop
 800a448:	0800f7c9 	.word	0x0800f7c9

0800a44c <strtol>:
 800a44c:	4613      	mov	r3, r2
 800a44e:	460a      	mov	r2, r1
 800a450:	4601      	mov	r1, r0
 800a452:	4802      	ldr	r0, [pc, #8]	; (800a45c <strtol+0x10>)
 800a454:	6800      	ldr	r0, [r0, #0]
 800a456:	f7ff bf75 	b.w	800a344 <_strtol_l.isra.0>
 800a45a:	bf00      	nop
 800a45c:	20000048 	.word	0x20000048

0800a460 <__swbuf_r>:
 800a460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a462:	460e      	mov	r6, r1
 800a464:	4614      	mov	r4, r2
 800a466:	4605      	mov	r5, r0
 800a468:	b118      	cbz	r0, 800a472 <__swbuf_r+0x12>
 800a46a:	6983      	ldr	r3, [r0, #24]
 800a46c:	b90b      	cbnz	r3, 800a472 <__swbuf_r+0x12>
 800a46e:	f7fe fa4b 	bl	8008908 <__sinit>
 800a472:	4b21      	ldr	r3, [pc, #132]	; (800a4f8 <__swbuf_r+0x98>)
 800a474:	429c      	cmp	r4, r3
 800a476:	d12b      	bne.n	800a4d0 <__swbuf_r+0x70>
 800a478:	686c      	ldr	r4, [r5, #4]
 800a47a:	69a3      	ldr	r3, [r4, #24]
 800a47c:	60a3      	str	r3, [r4, #8]
 800a47e:	89a3      	ldrh	r3, [r4, #12]
 800a480:	071a      	lsls	r2, r3, #28
 800a482:	d52f      	bpl.n	800a4e4 <__swbuf_r+0x84>
 800a484:	6923      	ldr	r3, [r4, #16]
 800a486:	b36b      	cbz	r3, 800a4e4 <__swbuf_r+0x84>
 800a488:	6923      	ldr	r3, [r4, #16]
 800a48a:	6820      	ldr	r0, [r4, #0]
 800a48c:	1ac0      	subs	r0, r0, r3
 800a48e:	6963      	ldr	r3, [r4, #20]
 800a490:	b2f6      	uxtb	r6, r6
 800a492:	4283      	cmp	r3, r0
 800a494:	4637      	mov	r7, r6
 800a496:	dc04      	bgt.n	800a4a2 <__swbuf_r+0x42>
 800a498:	4621      	mov	r1, r4
 800a49a:	4628      	mov	r0, r5
 800a49c:	f000 ffc2 	bl	800b424 <_fflush_r>
 800a4a0:	bb30      	cbnz	r0, 800a4f0 <__swbuf_r+0x90>
 800a4a2:	68a3      	ldr	r3, [r4, #8]
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	60a3      	str	r3, [r4, #8]
 800a4a8:	6823      	ldr	r3, [r4, #0]
 800a4aa:	1c5a      	adds	r2, r3, #1
 800a4ac:	6022      	str	r2, [r4, #0]
 800a4ae:	701e      	strb	r6, [r3, #0]
 800a4b0:	6963      	ldr	r3, [r4, #20]
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	4283      	cmp	r3, r0
 800a4b6:	d004      	beq.n	800a4c2 <__swbuf_r+0x62>
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	07db      	lsls	r3, r3, #31
 800a4bc:	d506      	bpl.n	800a4cc <__swbuf_r+0x6c>
 800a4be:	2e0a      	cmp	r6, #10
 800a4c0:	d104      	bne.n	800a4cc <__swbuf_r+0x6c>
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	f000 ffad 	bl	800b424 <_fflush_r>
 800a4ca:	b988      	cbnz	r0, 800a4f0 <__swbuf_r+0x90>
 800a4cc:	4638      	mov	r0, r7
 800a4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4d0:	4b0a      	ldr	r3, [pc, #40]	; (800a4fc <__swbuf_r+0x9c>)
 800a4d2:	429c      	cmp	r4, r3
 800a4d4:	d101      	bne.n	800a4da <__swbuf_r+0x7a>
 800a4d6:	68ac      	ldr	r4, [r5, #8]
 800a4d8:	e7cf      	b.n	800a47a <__swbuf_r+0x1a>
 800a4da:	4b09      	ldr	r3, [pc, #36]	; (800a500 <__swbuf_r+0xa0>)
 800a4dc:	429c      	cmp	r4, r3
 800a4de:	bf08      	it	eq
 800a4e0:	68ec      	ldreq	r4, [r5, #12]
 800a4e2:	e7ca      	b.n	800a47a <__swbuf_r+0x1a>
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	f000 f81e 	bl	800a528 <__swsetup_r>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d0cb      	beq.n	800a488 <__swbuf_r+0x28>
 800a4f0:	f04f 37ff 	mov.w	r7, #4294967295
 800a4f4:	e7ea      	b.n	800a4cc <__swbuf_r+0x6c>
 800a4f6:	bf00      	nop
 800a4f8:	0800f6fc 	.word	0x0800f6fc
 800a4fc:	0800f71c 	.word	0x0800f71c
 800a500:	0800f6dc 	.word	0x0800f6dc

0800a504 <_write_r>:
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	4d07      	ldr	r5, [pc, #28]	; (800a524 <_write_r+0x20>)
 800a508:	4604      	mov	r4, r0
 800a50a:	4608      	mov	r0, r1
 800a50c:	4611      	mov	r1, r2
 800a50e:	2200      	movs	r2, #0
 800a510:	602a      	str	r2, [r5, #0]
 800a512:	461a      	mov	r2, r3
 800a514:	f7f8 fbef 	bl	8002cf6 <_write>
 800a518:	1c43      	adds	r3, r0, #1
 800a51a:	d102      	bne.n	800a522 <_write_r+0x1e>
 800a51c:	682b      	ldr	r3, [r5, #0]
 800a51e:	b103      	cbz	r3, 800a522 <_write_r+0x1e>
 800a520:	6023      	str	r3, [r4, #0]
 800a522:	bd38      	pop	{r3, r4, r5, pc}
 800a524:	20004610 	.word	0x20004610

0800a528 <__swsetup_r>:
 800a528:	4b32      	ldr	r3, [pc, #200]	; (800a5f4 <__swsetup_r+0xcc>)
 800a52a:	b570      	push	{r4, r5, r6, lr}
 800a52c:	681d      	ldr	r5, [r3, #0]
 800a52e:	4606      	mov	r6, r0
 800a530:	460c      	mov	r4, r1
 800a532:	b125      	cbz	r5, 800a53e <__swsetup_r+0x16>
 800a534:	69ab      	ldr	r3, [r5, #24]
 800a536:	b913      	cbnz	r3, 800a53e <__swsetup_r+0x16>
 800a538:	4628      	mov	r0, r5
 800a53a:	f7fe f9e5 	bl	8008908 <__sinit>
 800a53e:	4b2e      	ldr	r3, [pc, #184]	; (800a5f8 <__swsetup_r+0xd0>)
 800a540:	429c      	cmp	r4, r3
 800a542:	d10f      	bne.n	800a564 <__swsetup_r+0x3c>
 800a544:	686c      	ldr	r4, [r5, #4]
 800a546:	89a3      	ldrh	r3, [r4, #12]
 800a548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a54c:	0719      	lsls	r1, r3, #28
 800a54e:	d42c      	bmi.n	800a5aa <__swsetup_r+0x82>
 800a550:	06dd      	lsls	r5, r3, #27
 800a552:	d411      	bmi.n	800a578 <__swsetup_r+0x50>
 800a554:	2309      	movs	r3, #9
 800a556:	6033      	str	r3, [r6, #0]
 800a558:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a55c:	81a3      	strh	r3, [r4, #12]
 800a55e:	f04f 30ff 	mov.w	r0, #4294967295
 800a562:	e03e      	b.n	800a5e2 <__swsetup_r+0xba>
 800a564:	4b25      	ldr	r3, [pc, #148]	; (800a5fc <__swsetup_r+0xd4>)
 800a566:	429c      	cmp	r4, r3
 800a568:	d101      	bne.n	800a56e <__swsetup_r+0x46>
 800a56a:	68ac      	ldr	r4, [r5, #8]
 800a56c:	e7eb      	b.n	800a546 <__swsetup_r+0x1e>
 800a56e:	4b24      	ldr	r3, [pc, #144]	; (800a600 <__swsetup_r+0xd8>)
 800a570:	429c      	cmp	r4, r3
 800a572:	bf08      	it	eq
 800a574:	68ec      	ldreq	r4, [r5, #12]
 800a576:	e7e6      	b.n	800a546 <__swsetup_r+0x1e>
 800a578:	0758      	lsls	r0, r3, #29
 800a57a:	d512      	bpl.n	800a5a2 <__swsetup_r+0x7a>
 800a57c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a57e:	b141      	cbz	r1, 800a592 <__swsetup_r+0x6a>
 800a580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a584:	4299      	cmp	r1, r3
 800a586:	d002      	beq.n	800a58e <__swsetup_r+0x66>
 800a588:	4630      	mov	r0, r6
 800a58a:	f002 f861 	bl	800c650 <_free_r>
 800a58e:	2300      	movs	r3, #0
 800a590:	6363      	str	r3, [r4, #52]	; 0x34
 800a592:	89a3      	ldrh	r3, [r4, #12]
 800a594:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a598:	81a3      	strh	r3, [r4, #12]
 800a59a:	2300      	movs	r3, #0
 800a59c:	6063      	str	r3, [r4, #4]
 800a59e:	6923      	ldr	r3, [r4, #16]
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	f043 0308 	orr.w	r3, r3, #8
 800a5a8:	81a3      	strh	r3, [r4, #12]
 800a5aa:	6923      	ldr	r3, [r4, #16]
 800a5ac:	b94b      	cbnz	r3, 800a5c2 <__swsetup_r+0x9a>
 800a5ae:	89a3      	ldrh	r3, [r4, #12]
 800a5b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5b8:	d003      	beq.n	800a5c2 <__swsetup_r+0x9a>
 800a5ba:	4621      	mov	r1, r4
 800a5bc:	4630      	mov	r0, r6
 800a5be:	f001 fb17 	bl	800bbf0 <__smakebuf_r>
 800a5c2:	89a0      	ldrh	r0, [r4, #12]
 800a5c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5c8:	f010 0301 	ands.w	r3, r0, #1
 800a5cc:	d00a      	beq.n	800a5e4 <__swsetup_r+0xbc>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	60a3      	str	r3, [r4, #8]
 800a5d2:	6963      	ldr	r3, [r4, #20]
 800a5d4:	425b      	negs	r3, r3
 800a5d6:	61a3      	str	r3, [r4, #24]
 800a5d8:	6923      	ldr	r3, [r4, #16]
 800a5da:	b943      	cbnz	r3, 800a5ee <__swsetup_r+0xc6>
 800a5dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5e0:	d1ba      	bne.n	800a558 <__swsetup_r+0x30>
 800a5e2:	bd70      	pop	{r4, r5, r6, pc}
 800a5e4:	0781      	lsls	r1, r0, #30
 800a5e6:	bf58      	it	pl
 800a5e8:	6963      	ldrpl	r3, [r4, #20]
 800a5ea:	60a3      	str	r3, [r4, #8]
 800a5ec:	e7f4      	b.n	800a5d8 <__swsetup_r+0xb0>
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	e7f7      	b.n	800a5e2 <__swsetup_r+0xba>
 800a5f2:	bf00      	nop
 800a5f4:	20000048 	.word	0x20000048
 800a5f8:	0800f6fc 	.word	0x0800f6fc
 800a5fc:	0800f71c 	.word	0x0800f71c
 800a600:	0800f6dc 	.word	0x0800f6dc

0800a604 <_close_r>:
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	4d06      	ldr	r5, [pc, #24]	; (800a620 <_close_r+0x1c>)
 800a608:	2300      	movs	r3, #0
 800a60a:	4604      	mov	r4, r0
 800a60c:	4608      	mov	r0, r1
 800a60e:	602b      	str	r3, [r5, #0]
 800a610:	f7f8 fb8d 	bl	8002d2e <_close>
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	d102      	bne.n	800a61e <_close_r+0x1a>
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	b103      	cbz	r3, 800a61e <_close_r+0x1a>
 800a61c:	6023      	str	r3, [r4, #0]
 800a61e:	bd38      	pop	{r3, r4, r5, pc}
 800a620:	20004610 	.word	0x20004610

0800a624 <quorem>:
 800a624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a628:	6903      	ldr	r3, [r0, #16]
 800a62a:	690c      	ldr	r4, [r1, #16]
 800a62c:	42a3      	cmp	r3, r4
 800a62e:	4607      	mov	r7, r0
 800a630:	f2c0 8081 	blt.w	800a736 <quorem+0x112>
 800a634:	3c01      	subs	r4, #1
 800a636:	f101 0814 	add.w	r8, r1, #20
 800a63a:	f100 0514 	add.w	r5, r0, #20
 800a63e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a642:	9301      	str	r3, [sp, #4]
 800a644:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a648:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a64c:	3301      	adds	r3, #1
 800a64e:	429a      	cmp	r2, r3
 800a650:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a654:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a658:	fbb2 f6f3 	udiv	r6, r2, r3
 800a65c:	d331      	bcc.n	800a6c2 <quorem+0x9e>
 800a65e:	f04f 0e00 	mov.w	lr, #0
 800a662:	4640      	mov	r0, r8
 800a664:	46ac      	mov	ip, r5
 800a666:	46f2      	mov	sl, lr
 800a668:	f850 2b04 	ldr.w	r2, [r0], #4
 800a66c:	b293      	uxth	r3, r2
 800a66e:	fb06 e303 	mla	r3, r6, r3, lr
 800a672:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a676:	b29b      	uxth	r3, r3
 800a678:	ebaa 0303 	sub.w	r3, sl, r3
 800a67c:	0c12      	lsrs	r2, r2, #16
 800a67e:	f8dc a000 	ldr.w	sl, [ip]
 800a682:	fb06 e202 	mla	r2, r6, r2, lr
 800a686:	fa13 f38a 	uxtah	r3, r3, sl
 800a68a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a68e:	fa1f fa82 	uxth.w	sl, r2
 800a692:	f8dc 2000 	ldr.w	r2, [ip]
 800a696:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a69a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6a4:	4581      	cmp	r9, r0
 800a6a6:	f84c 3b04 	str.w	r3, [ip], #4
 800a6aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a6ae:	d2db      	bcs.n	800a668 <quorem+0x44>
 800a6b0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a6b4:	b92b      	cbnz	r3, 800a6c2 <quorem+0x9e>
 800a6b6:	9b01      	ldr	r3, [sp, #4]
 800a6b8:	3b04      	subs	r3, #4
 800a6ba:	429d      	cmp	r5, r3
 800a6bc:	461a      	mov	r2, r3
 800a6be:	d32e      	bcc.n	800a71e <quorem+0xfa>
 800a6c0:	613c      	str	r4, [r7, #16]
 800a6c2:	4638      	mov	r0, r7
 800a6c4:	f001 fdc2 	bl	800c24c <__mcmp>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	db24      	blt.n	800a716 <quorem+0xf2>
 800a6cc:	3601      	adds	r6, #1
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	f04f 0c00 	mov.w	ip, #0
 800a6d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6d8:	f8d0 e000 	ldr.w	lr, [r0]
 800a6dc:	b293      	uxth	r3, r2
 800a6de:	ebac 0303 	sub.w	r3, ip, r3
 800a6e2:	0c12      	lsrs	r2, r2, #16
 800a6e4:	fa13 f38e 	uxtah	r3, r3, lr
 800a6e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a6ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6f6:	45c1      	cmp	r9, r8
 800a6f8:	f840 3b04 	str.w	r3, [r0], #4
 800a6fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a700:	d2e8      	bcs.n	800a6d4 <quorem+0xb0>
 800a702:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a70a:	b922      	cbnz	r2, 800a716 <quorem+0xf2>
 800a70c:	3b04      	subs	r3, #4
 800a70e:	429d      	cmp	r5, r3
 800a710:	461a      	mov	r2, r3
 800a712:	d30a      	bcc.n	800a72a <quorem+0x106>
 800a714:	613c      	str	r4, [r7, #16]
 800a716:	4630      	mov	r0, r6
 800a718:	b003      	add	sp, #12
 800a71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a71e:	6812      	ldr	r2, [r2, #0]
 800a720:	3b04      	subs	r3, #4
 800a722:	2a00      	cmp	r2, #0
 800a724:	d1cc      	bne.n	800a6c0 <quorem+0x9c>
 800a726:	3c01      	subs	r4, #1
 800a728:	e7c7      	b.n	800a6ba <quorem+0x96>
 800a72a:	6812      	ldr	r2, [r2, #0]
 800a72c:	3b04      	subs	r3, #4
 800a72e:	2a00      	cmp	r2, #0
 800a730:	d1f0      	bne.n	800a714 <quorem+0xf0>
 800a732:	3c01      	subs	r4, #1
 800a734:	e7eb      	b.n	800a70e <quorem+0xea>
 800a736:	2000      	movs	r0, #0
 800a738:	e7ee      	b.n	800a718 <quorem+0xf4>
 800a73a:	0000      	movs	r0, r0
 800a73c:	0000      	movs	r0, r0
	...

0800a740 <_dtoa_r>:
 800a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a744:	ed2d 8b02 	vpush	{d8}
 800a748:	ec57 6b10 	vmov	r6, r7, d0
 800a74c:	b095      	sub	sp, #84	; 0x54
 800a74e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a750:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a754:	9105      	str	r1, [sp, #20]
 800a756:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a75a:	4604      	mov	r4, r0
 800a75c:	9209      	str	r2, [sp, #36]	; 0x24
 800a75e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a760:	b975      	cbnz	r5, 800a780 <_dtoa_r+0x40>
 800a762:	2010      	movs	r0, #16
 800a764:	f001 fa84 	bl	800bc70 <malloc>
 800a768:	4602      	mov	r2, r0
 800a76a:	6260      	str	r0, [r4, #36]	; 0x24
 800a76c:	b920      	cbnz	r0, 800a778 <_dtoa_r+0x38>
 800a76e:	4bb2      	ldr	r3, [pc, #712]	; (800aa38 <_dtoa_r+0x2f8>)
 800a770:	21ea      	movs	r1, #234	; 0xea
 800a772:	48b2      	ldr	r0, [pc, #712]	; (800aa3c <_dtoa_r+0x2fc>)
 800a774:	f002 f950 	bl	800ca18 <__assert_func>
 800a778:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a77c:	6005      	str	r5, [r0, #0]
 800a77e:	60c5      	str	r5, [r0, #12]
 800a780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a782:	6819      	ldr	r1, [r3, #0]
 800a784:	b151      	cbz	r1, 800a79c <_dtoa_r+0x5c>
 800a786:	685a      	ldr	r2, [r3, #4]
 800a788:	604a      	str	r2, [r1, #4]
 800a78a:	2301      	movs	r3, #1
 800a78c:	4093      	lsls	r3, r2
 800a78e:	608b      	str	r3, [r1, #8]
 800a790:	4620      	mov	r0, r4
 800a792:	f001 fad3 	bl	800bd3c <_Bfree>
 800a796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a798:	2200      	movs	r2, #0
 800a79a:	601a      	str	r2, [r3, #0]
 800a79c:	1e3b      	subs	r3, r7, #0
 800a79e:	bfb9      	ittee	lt
 800a7a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a7a4:	9303      	strlt	r3, [sp, #12]
 800a7a6:	2300      	movge	r3, #0
 800a7a8:	f8c8 3000 	strge.w	r3, [r8]
 800a7ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a7b0:	4ba3      	ldr	r3, [pc, #652]	; (800aa40 <_dtoa_r+0x300>)
 800a7b2:	bfbc      	itt	lt
 800a7b4:	2201      	movlt	r2, #1
 800a7b6:	f8c8 2000 	strlt.w	r2, [r8]
 800a7ba:	ea33 0309 	bics.w	r3, r3, r9
 800a7be:	d11b      	bne.n	800a7f8 <_dtoa_r+0xb8>
 800a7c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7c6:	6013      	str	r3, [r2, #0]
 800a7c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7cc:	4333      	orrs	r3, r6
 800a7ce:	f000 857a 	beq.w	800b2c6 <_dtoa_r+0xb86>
 800a7d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7d4:	b963      	cbnz	r3, 800a7f0 <_dtoa_r+0xb0>
 800a7d6:	4b9b      	ldr	r3, [pc, #620]	; (800aa44 <_dtoa_r+0x304>)
 800a7d8:	e024      	b.n	800a824 <_dtoa_r+0xe4>
 800a7da:	4b9b      	ldr	r3, [pc, #620]	; (800aa48 <_dtoa_r+0x308>)
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	3308      	adds	r3, #8
 800a7e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7e2:	6013      	str	r3, [r2, #0]
 800a7e4:	9800      	ldr	r0, [sp, #0]
 800a7e6:	b015      	add	sp, #84	; 0x54
 800a7e8:	ecbd 8b02 	vpop	{d8}
 800a7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f0:	4b94      	ldr	r3, [pc, #592]	; (800aa44 <_dtoa_r+0x304>)
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	3303      	adds	r3, #3
 800a7f6:	e7f3      	b.n	800a7e0 <_dtoa_r+0xa0>
 800a7f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	ec51 0b17 	vmov	r0, r1, d7
 800a802:	2300      	movs	r3, #0
 800a804:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a808:	f7f6 f98e 	bl	8000b28 <__aeabi_dcmpeq>
 800a80c:	4680      	mov	r8, r0
 800a80e:	b158      	cbz	r0, 800a828 <_dtoa_r+0xe8>
 800a810:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a812:	2301      	movs	r3, #1
 800a814:	6013      	str	r3, [r2, #0]
 800a816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f000 8551 	beq.w	800b2c0 <_dtoa_r+0xb80>
 800a81e:	488b      	ldr	r0, [pc, #556]	; (800aa4c <_dtoa_r+0x30c>)
 800a820:	6018      	str	r0, [r3, #0]
 800a822:	1e43      	subs	r3, r0, #1
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	e7dd      	b.n	800a7e4 <_dtoa_r+0xa4>
 800a828:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a82c:	aa12      	add	r2, sp, #72	; 0x48
 800a82e:	a913      	add	r1, sp, #76	; 0x4c
 800a830:	4620      	mov	r0, r4
 800a832:	f001 fe2b 	bl	800c48c <__d2b>
 800a836:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a83a:	4683      	mov	fp, r0
 800a83c:	2d00      	cmp	r5, #0
 800a83e:	d07c      	beq.n	800a93a <_dtoa_r+0x1fa>
 800a840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a842:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a846:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a84a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a84e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a852:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a856:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a85a:	4b7d      	ldr	r3, [pc, #500]	; (800aa50 <_dtoa_r+0x310>)
 800a85c:	2200      	movs	r2, #0
 800a85e:	4630      	mov	r0, r6
 800a860:	4639      	mov	r1, r7
 800a862:	f7f5 fd41 	bl	80002e8 <__aeabi_dsub>
 800a866:	a36e      	add	r3, pc, #440	; (adr r3, 800aa20 <_dtoa_r+0x2e0>)
 800a868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86c:	f7f5 fef4 	bl	8000658 <__aeabi_dmul>
 800a870:	a36d      	add	r3, pc, #436	; (adr r3, 800aa28 <_dtoa_r+0x2e8>)
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	f7f5 fd39 	bl	80002ec <__adddf3>
 800a87a:	4606      	mov	r6, r0
 800a87c:	4628      	mov	r0, r5
 800a87e:	460f      	mov	r7, r1
 800a880:	f7f5 fe80 	bl	8000584 <__aeabi_i2d>
 800a884:	a36a      	add	r3, pc, #424	; (adr r3, 800aa30 <_dtoa_r+0x2f0>)
 800a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88a:	f7f5 fee5 	bl	8000658 <__aeabi_dmul>
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	4630      	mov	r0, r6
 800a894:	4639      	mov	r1, r7
 800a896:	f7f5 fd29 	bl	80002ec <__adddf3>
 800a89a:	4606      	mov	r6, r0
 800a89c:	460f      	mov	r7, r1
 800a89e:	f7f6 f98b 	bl	8000bb8 <__aeabi_d2iz>
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	4682      	mov	sl, r0
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	f7f6 f946 	bl	8000b3c <__aeabi_dcmplt>
 800a8b0:	b148      	cbz	r0, 800a8c6 <_dtoa_r+0x186>
 800a8b2:	4650      	mov	r0, sl
 800a8b4:	f7f5 fe66 	bl	8000584 <__aeabi_i2d>
 800a8b8:	4632      	mov	r2, r6
 800a8ba:	463b      	mov	r3, r7
 800a8bc:	f7f6 f934 	bl	8000b28 <__aeabi_dcmpeq>
 800a8c0:	b908      	cbnz	r0, 800a8c6 <_dtoa_r+0x186>
 800a8c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8c6:	f1ba 0f16 	cmp.w	sl, #22
 800a8ca:	d854      	bhi.n	800a976 <_dtoa_r+0x236>
 800a8cc:	4b61      	ldr	r3, [pc, #388]	; (800aa54 <_dtoa_r+0x314>)
 800a8ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a8da:	f7f6 f92f 	bl	8000b3c <__aeabi_dcmplt>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	d04b      	beq.n	800a97a <_dtoa_r+0x23a>
 800a8e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	930e      	str	r3, [sp, #56]	; 0x38
 800a8ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8ec:	1b5d      	subs	r5, r3, r5
 800a8ee:	1e6b      	subs	r3, r5, #1
 800a8f0:	9304      	str	r3, [sp, #16]
 800a8f2:	bf43      	ittte	mi
 800a8f4:	2300      	movmi	r3, #0
 800a8f6:	f1c5 0801 	rsbmi	r8, r5, #1
 800a8fa:	9304      	strmi	r3, [sp, #16]
 800a8fc:	f04f 0800 	movpl.w	r8, #0
 800a900:	f1ba 0f00 	cmp.w	sl, #0
 800a904:	db3b      	blt.n	800a97e <_dtoa_r+0x23e>
 800a906:	9b04      	ldr	r3, [sp, #16]
 800a908:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a90c:	4453      	add	r3, sl
 800a90e:	9304      	str	r3, [sp, #16]
 800a910:	2300      	movs	r3, #0
 800a912:	9306      	str	r3, [sp, #24]
 800a914:	9b05      	ldr	r3, [sp, #20]
 800a916:	2b09      	cmp	r3, #9
 800a918:	d869      	bhi.n	800a9ee <_dtoa_r+0x2ae>
 800a91a:	2b05      	cmp	r3, #5
 800a91c:	bfc4      	itt	gt
 800a91e:	3b04      	subgt	r3, #4
 800a920:	9305      	strgt	r3, [sp, #20]
 800a922:	9b05      	ldr	r3, [sp, #20]
 800a924:	f1a3 0302 	sub.w	r3, r3, #2
 800a928:	bfcc      	ite	gt
 800a92a:	2500      	movgt	r5, #0
 800a92c:	2501      	movle	r5, #1
 800a92e:	2b03      	cmp	r3, #3
 800a930:	d869      	bhi.n	800aa06 <_dtoa_r+0x2c6>
 800a932:	e8df f003 	tbb	[pc, r3]
 800a936:	4e2c      	.short	0x4e2c
 800a938:	5a4c      	.short	0x5a4c
 800a93a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a93e:	441d      	add	r5, r3
 800a940:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a944:	2b20      	cmp	r3, #32
 800a946:	bfc1      	itttt	gt
 800a948:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a94c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a950:	fa09 f303 	lslgt.w	r3, r9, r3
 800a954:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a958:	bfda      	itte	le
 800a95a:	f1c3 0320 	rsble	r3, r3, #32
 800a95e:	fa06 f003 	lslle.w	r0, r6, r3
 800a962:	4318      	orrgt	r0, r3
 800a964:	f7f5 fdfe 	bl	8000564 <__aeabi_ui2d>
 800a968:	2301      	movs	r3, #1
 800a96a:	4606      	mov	r6, r0
 800a96c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a970:	3d01      	subs	r5, #1
 800a972:	9310      	str	r3, [sp, #64]	; 0x40
 800a974:	e771      	b.n	800a85a <_dtoa_r+0x11a>
 800a976:	2301      	movs	r3, #1
 800a978:	e7b6      	b.n	800a8e8 <_dtoa_r+0x1a8>
 800a97a:	900e      	str	r0, [sp, #56]	; 0x38
 800a97c:	e7b5      	b.n	800a8ea <_dtoa_r+0x1aa>
 800a97e:	f1ca 0300 	rsb	r3, sl, #0
 800a982:	9306      	str	r3, [sp, #24]
 800a984:	2300      	movs	r3, #0
 800a986:	eba8 080a 	sub.w	r8, r8, sl
 800a98a:	930d      	str	r3, [sp, #52]	; 0x34
 800a98c:	e7c2      	b.n	800a914 <_dtoa_r+0x1d4>
 800a98e:	2300      	movs	r3, #0
 800a990:	9308      	str	r3, [sp, #32]
 800a992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a994:	2b00      	cmp	r3, #0
 800a996:	dc39      	bgt.n	800aa0c <_dtoa_r+0x2cc>
 800a998:	f04f 0901 	mov.w	r9, #1
 800a99c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a9a0:	464b      	mov	r3, r9
 800a9a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a9a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	6042      	str	r2, [r0, #4]
 800a9ac:	2204      	movs	r2, #4
 800a9ae:	f102 0614 	add.w	r6, r2, #20
 800a9b2:	429e      	cmp	r6, r3
 800a9b4:	6841      	ldr	r1, [r0, #4]
 800a9b6:	d92f      	bls.n	800aa18 <_dtoa_r+0x2d8>
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f001 f97f 	bl	800bcbc <_Balloc>
 800a9be:	9000      	str	r0, [sp, #0]
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	d14b      	bne.n	800aa5c <_dtoa_r+0x31c>
 800a9c4:	4b24      	ldr	r3, [pc, #144]	; (800aa58 <_dtoa_r+0x318>)
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a9cc:	e6d1      	b.n	800a772 <_dtoa_r+0x32>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e7de      	b.n	800a990 <_dtoa_r+0x250>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	9308      	str	r3, [sp, #32]
 800a9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9d8:	eb0a 0903 	add.w	r9, sl, r3
 800a9dc:	f109 0301 	add.w	r3, r9, #1
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	9301      	str	r3, [sp, #4]
 800a9e4:	bfb8      	it	lt
 800a9e6:	2301      	movlt	r3, #1
 800a9e8:	e7dd      	b.n	800a9a6 <_dtoa_r+0x266>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e7f2      	b.n	800a9d4 <_dtoa_r+0x294>
 800a9ee:	2501      	movs	r5, #1
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	9305      	str	r3, [sp, #20]
 800a9f4:	9508      	str	r5, [sp, #32]
 800a9f6:	f04f 39ff 	mov.w	r9, #4294967295
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800aa00:	2312      	movs	r3, #18
 800aa02:	9209      	str	r2, [sp, #36]	; 0x24
 800aa04:	e7cf      	b.n	800a9a6 <_dtoa_r+0x266>
 800aa06:	2301      	movs	r3, #1
 800aa08:	9308      	str	r3, [sp, #32]
 800aa0a:	e7f4      	b.n	800a9f6 <_dtoa_r+0x2b6>
 800aa0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800aa10:	f8cd 9004 	str.w	r9, [sp, #4]
 800aa14:	464b      	mov	r3, r9
 800aa16:	e7c6      	b.n	800a9a6 <_dtoa_r+0x266>
 800aa18:	3101      	adds	r1, #1
 800aa1a:	6041      	str	r1, [r0, #4]
 800aa1c:	0052      	lsls	r2, r2, #1
 800aa1e:	e7c6      	b.n	800a9ae <_dtoa_r+0x26e>
 800aa20:	636f4361 	.word	0x636f4361
 800aa24:	3fd287a7 	.word	0x3fd287a7
 800aa28:	8b60c8b3 	.word	0x8b60c8b3
 800aa2c:	3fc68a28 	.word	0x3fc68a28
 800aa30:	509f79fb 	.word	0x509f79fb
 800aa34:	3fd34413 	.word	0x3fd34413
 800aa38:	0800f8d6 	.word	0x0800f8d6
 800aa3c:	0800f8ed 	.word	0x0800f8ed
 800aa40:	7ff00000 	.word	0x7ff00000
 800aa44:	0800f8d2 	.word	0x0800f8d2
 800aa48:	0800f8c9 	.word	0x0800f8c9
 800aa4c:	0800f751 	.word	0x0800f751
 800aa50:	3ff80000 	.word	0x3ff80000
 800aa54:	0800fa68 	.word	0x0800fa68
 800aa58:	0800f94c 	.word	0x0800f94c
 800aa5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa5e:	9a00      	ldr	r2, [sp, #0]
 800aa60:	601a      	str	r2, [r3, #0]
 800aa62:	9b01      	ldr	r3, [sp, #4]
 800aa64:	2b0e      	cmp	r3, #14
 800aa66:	f200 80ad 	bhi.w	800abc4 <_dtoa_r+0x484>
 800aa6a:	2d00      	cmp	r5, #0
 800aa6c:	f000 80aa 	beq.w	800abc4 <_dtoa_r+0x484>
 800aa70:	f1ba 0f00 	cmp.w	sl, #0
 800aa74:	dd36      	ble.n	800aae4 <_dtoa_r+0x3a4>
 800aa76:	4ac3      	ldr	r2, [pc, #780]	; (800ad84 <_dtoa_r+0x644>)
 800aa78:	f00a 030f 	and.w	r3, sl, #15
 800aa7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa80:	ed93 7b00 	vldr	d7, [r3]
 800aa84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800aa88:	ea4f 172a 	mov.w	r7, sl, asr #4
 800aa8c:	eeb0 8a47 	vmov.f32	s16, s14
 800aa90:	eef0 8a67 	vmov.f32	s17, s15
 800aa94:	d016      	beq.n	800aac4 <_dtoa_r+0x384>
 800aa96:	4bbc      	ldr	r3, [pc, #752]	; (800ad88 <_dtoa_r+0x648>)
 800aa98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aaa0:	f7f5 ff04 	bl	80008ac <__aeabi_ddiv>
 800aaa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaa8:	f007 070f 	and.w	r7, r7, #15
 800aaac:	2503      	movs	r5, #3
 800aaae:	4eb6      	ldr	r6, [pc, #728]	; (800ad88 <_dtoa_r+0x648>)
 800aab0:	b957      	cbnz	r7, 800aac8 <_dtoa_r+0x388>
 800aab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aab6:	ec53 2b18 	vmov	r2, r3, d8
 800aaba:	f7f5 fef7 	bl	80008ac <__aeabi_ddiv>
 800aabe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aac2:	e029      	b.n	800ab18 <_dtoa_r+0x3d8>
 800aac4:	2502      	movs	r5, #2
 800aac6:	e7f2      	b.n	800aaae <_dtoa_r+0x36e>
 800aac8:	07f9      	lsls	r1, r7, #31
 800aaca:	d508      	bpl.n	800aade <_dtoa_r+0x39e>
 800aacc:	ec51 0b18 	vmov	r0, r1, d8
 800aad0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aad4:	f7f5 fdc0 	bl	8000658 <__aeabi_dmul>
 800aad8:	ec41 0b18 	vmov	d8, r0, r1
 800aadc:	3501      	adds	r5, #1
 800aade:	107f      	asrs	r7, r7, #1
 800aae0:	3608      	adds	r6, #8
 800aae2:	e7e5      	b.n	800aab0 <_dtoa_r+0x370>
 800aae4:	f000 80a6 	beq.w	800ac34 <_dtoa_r+0x4f4>
 800aae8:	f1ca 0600 	rsb	r6, sl, #0
 800aaec:	4ba5      	ldr	r3, [pc, #660]	; (800ad84 <_dtoa_r+0x644>)
 800aaee:	4fa6      	ldr	r7, [pc, #664]	; (800ad88 <_dtoa_r+0x648>)
 800aaf0:	f006 020f 	and.w	r2, r6, #15
 800aaf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab00:	f7f5 fdaa 	bl	8000658 <__aeabi_dmul>
 800ab04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab08:	1136      	asrs	r6, r6, #4
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	2502      	movs	r5, #2
 800ab0e:	2e00      	cmp	r6, #0
 800ab10:	f040 8085 	bne.w	800ac1e <_dtoa_r+0x4de>
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d1d2      	bne.n	800aabe <_dtoa_r+0x37e>
 800ab18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f000 808c 	beq.w	800ac38 <_dtoa_r+0x4f8>
 800ab20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ab24:	4b99      	ldr	r3, [pc, #612]	; (800ad8c <_dtoa_r+0x64c>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	4630      	mov	r0, r6
 800ab2a:	4639      	mov	r1, r7
 800ab2c:	f7f6 f806 	bl	8000b3c <__aeabi_dcmplt>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	f000 8081 	beq.w	800ac38 <_dtoa_r+0x4f8>
 800ab36:	9b01      	ldr	r3, [sp, #4]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d07d      	beq.n	800ac38 <_dtoa_r+0x4f8>
 800ab3c:	f1b9 0f00 	cmp.w	r9, #0
 800ab40:	dd3c      	ble.n	800abbc <_dtoa_r+0x47c>
 800ab42:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ab46:	9307      	str	r3, [sp, #28]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	4b91      	ldr	r3, [pc, #580]	; (800ad90 <_dtoa_r+0x650>)
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	4639      	mov	r1, r7
 800ab50:	f7f5 fd82 	bl	8000658 <__aeabi_dmul>
 800ab54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab58:	3501      	adds	r5, #1
 800ab5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ab5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ab62:	4628      	mov	r0, r5
 800ab64:	f7f5 fd0e 	bl	8000584 <__aeabi_i2d>
 800ab68:	4632      	mov	r2, r6
 800ab6a:	463b      	mov	r3, r7
 800ab6c:	f7f5 fd74 	bl	8000658 <__aeabi_dmul>
 800ab70:	4b88      	ldr	r3, [pc, #544]	; (800ad94 <_dtoa_r+0x654>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	f7f5 fbba 	bl	80002ec <__adddf3>
 800ab78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ab7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab80:	9303      	str	r3, [sp, #12]
 800ab82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d15c      	bne.n	800ac42 <_dtoa_r+0x502>
 800ab88:	4b83      	ldr	r3, [pc, #524]	; (800ad98 <_dtoa_r+0x658>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	4639      	mov	r1, r7
 800ab90:	f7f5 fbaa 	bl	80002e8 <__aeabi_dsub>
 800ab94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab98:	4606      	mov	r6, r0
 800ab9a:	460f      	mov	r7, r1
 800ab9c:	f7f5 ffec 	bl	8000b78 <__aeabi_dcmpgt>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	f040 8296 	bne.w	800b0d2 <_dtoa_r+0x992>
 800aba6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800abaa:	4630      	mov	r0, r6
 800abac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abb0:	4639      	mov	r1, r7
 800abb2:	f7f5 ffc3 	bl	8000b3c <__aeabi_dcmplt>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	f040 8288 	bne.w	800b0cc <_dtoa_r+0x98c>
 800abbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800abc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800abc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f2c0 8158 	blt.w	800ae7c <_dtoa_r+0x73c>
 800abcc:	f1ba 0f0e 	cmp.w	sl, #14
 800abd0:	f300 8154 	bgt.w	800ae7c <_dtoa_r+0x73c>
 800abd4:	4b6b      	ldr	r3, [pc, #428]	; (800ad84 <_dtoa_r+0x644>)
 800abd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800abda:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f280 80e3 	bge.w	800adac <_dtoa_r+0x66c>
 800abe6:	9b01      	ldr	r3, [sp, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f300 80df 	bgt.w	800adac <_dtoa_r+0x66c>
 800abee:	f040 826d 	bne.w	800b0cc <_dtoa_r+0x98c>
 800abf2:	4b69      	ldr	r3, [pc, #420]	; (800ad98 <_dtoa_r+0x658>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	4640      	mov	r0, r8
 800abf8:	4649      	mov	r1, r9
 800abfa:	f7f5 fd2d 	bl	8000658 <__aeabi_dmul>
 800abfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac02:	f7f5 ffaf 	bl	8000b64 <__aeabi_dcmpge>
 800ac06:	9e01      	ldr	r6, [sp, #4]
 800ac08:	4637      	mov	r7, r6
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	f040 8243 	bne.w	800b096 <_dtoa_r+0x956>
 800ac10:	9d00      	ldr	r5, [sp, #0]
 800ac12:	2331      	movs	r3, #49	; 0x31
 800ac14:	f805 3b01 	strb.w	r3, [r5], #1
 800ac18:	f10a 0a01 	add.w	sl, sl, #1
 800ac1c:	e23f      	b.n	800b09e <_dtoa_r+0x95e>
 800ac1e:	07f2      	lsls	r2, r6, #31
 800ac20:	d505      	bpl.n	800ac2e <_dtoa_r+0x4ee>
 800ac22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac26:	f7f5 fd17 	bl	8000658 <__aeabi_dmul>
 800ac2a:	3501      	adds	r5, #1
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	1076      	asrs	r6, r6, #1
 800ac30:	3708      	adds	r7, #8
 800ac32:	e76c      	b.n	800ab0e <_dtoa_r+0x3ce>
 800ac34:	2502      	movs	r5, #2
 800ac36:	e76f      	b.n	800ab18 <_dtoa_r+0x3d8>
 800ac38:	9b01      	ldr	r3, [sp, #4]
 800ac3a:	f8cd a01c 	str.w	sl, [sp, #28]
 800ac3e:	930c      	str	r3, [sp, #48]	; 0x30
 800ac40:	e78d      	b.n	800ab5e <_dtoa_r+0x41e>
 800ac42:	9900      	ldr	r1, [sp, #0]
 800ac44:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ac46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac48:	4b4e      	ldr	r3, [pc, #312]	; (800ad84 <_dtoa_r+0x644>)
 800ac4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac4e:	4401      	add	r1, r0
 800ac50:	9102      	str	r1, [sp, #8]
 800ac52:	9908      	ldr	r1, [sp, #32]
 800ac54:	eeb0 8a47 	vmov.f32	s16, s14
 800ac58:	eef0 8a67 	vmov.f32	s17, s15
 800ac5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac64:	2900      	cmp	r1, #0
 800ac66:	d045      	beq.n	800acf4 <_dtoa_r+0x5b4>
 800ac68:	494c      	ldr	r1, [pc, #304]	; (800ad9c <_dtoa_r+0x65c>)
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	f7f5 fe1e 	bl	80008ac <__aeabi_ddiv>
 800ac70:	ec53 2b18 	vmov	r2, r3, d8
 800ac74:	f7f5 fb38 	bl	80002e8 <__aeabi_dsub>
 800ac78:	9d00      	ldr	r5, [sp, #0]
 800ac7a:	ec41 0b18 	vmov	d8, r0, r1
 800ac7e:	4639      	mov	r1, r7
 800ac80:	4630      	mov	r0, r6
 800ac82:	f7f5 ff99 	bl	8000bb8 <__aeabi_d2iz>
 800ac86:	900c      	str	r0, [sp, #48]	; 0x30
 800ac88:	f7f5 fc7c 	bl	8000584 <__aeabi_i2d>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	460b      	mov	r3, r1
 800ac90:	4630      	mov	r0, r6
 800ac92:	4639      	mov	r1, r7
 800ac94:	f7f5 fb28 	bl	80002e8 <__aeabi_dsub>
 800ac98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac9a:	3330      	adds	r3, #48	; 0x30
 800ac9c:	f805 3b01 	strb.w	r3, [r5], #1
 800aca0:	ec53 2b18 	vmov	r2, r3, d8
 800aca4:	4606      	mov	r6, r0
 800aca6:	460f      	mov	r7, r1
 800aca8:	f7f5 ff48 	bl	8000b3c <__aeabi_dcmplt>
 800acac:	2800      	cmp	r0, #0
 800acae:	d165      	bne.n	800ad7c <_dtoa_r+0x63c>
 800acb0:	4632      	mov	r2, r6
 800acb2:	463b      	mov	r3, r7
 800acb4:	4935      	ldr	r1, [pc, #212]	; (800ad8c <_dtoa_r+0x64c>)
 800acb6:	2000      	movs	r0, #0
 800acb8:	f7f5 fb16 	bl	80002e8 <__aeabi_dsub>
 800acbc:	ec53 2b18 	vmov	r2, r3, d8
 800acc0:	f7f5 ff3c 	bl	8000b3c <__aeabi_dcmplt>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	f040 80b9 	bne.w	800ae3c <_dtoa_r+0x6fc>
 800acca:	9b02      	ldr	r3, [sp, #8]
 800accc:	429d      	cmp	r5, r3
 800acce:	f43f af75 	beq.w	800abbc <_dtoa_r+0x47c>
 800acd2:	4b2f      	ldr	r3, [pc, #188]	; (800ad90 <_dtoa_r+0x650>)
 800acd4:	ec51 0b18 	vmov	r0, r1, d8
 800acd8:	2200      	movs	r2, #0
 800acda:	f7f5 fcbd 	bl	8000658 <__aeabi_dmul>
 800acde:	4b2c      	ldr	r3, [pc, #176]	; (800ad90 <_dtoa_r+0x650>)
 800ace0:	ec41 0b18 	vmov	d8, r0, r1
 800ace4:	2200      	movs	r2, #0
 800ace6:	4630      	mov	r0, r6
 800ace8:	4639      	mov	r1, r7
 800acea:	f7f5 fcb5 	bl	8000658 <__aeabi_dmul>
 800acee:	4606      	mov	r6, r0
 800acf0:	460f      	mov	r7, r1
 800acf2:	e7c4      	b.n	800ac7e <_dtoa_r+0x53e>
 800acf4:	ec51 0b17 	vmov	r0, r1, d7
 800acf8:	f7f5 fcae 	bl	8000658 <__aeabi_dmul>
 800acfc:	9b02      	ldr	r3, [sp, #8]
 800acfe:	9d00      	ldr	r5, [sp, #0]
 800ad00:	930c      	str	r3, [sp, #48]	; 0x30
 800ad02:	ec41 0b18 	vmov	d8, r0, r1
 800ad06:	4639      	mov	r1, r7
 800ad08:	4630      	mov	r0, r6
 800ad0a:	f7f5 ff55 	bl	8000bb8 <__aeabi_d2iz>
 800ad0e:	9011      	str	r0, [sp, #68]	; 0x44
 800ad10:	f7f5 fc38 	bl	8000584 <__aeabi_i2d>
 800ad14:	4602      	mov	r2, r0
 800ad16:	460b      	mov	r3, r1
 800ad18:	4630      	mov	r0, r6
 800ad1a:	4639      	mov	r1, r7
 800ad1c:	f7f5 fae4 	bl	80002e8 <__aeabi_dsub>
 800ad20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad22:	3330      	adds	r3, #48	; 0x30
 800ad24:	f805 3b01 	strb.w	r3, [r5], #1
 800ad28:	9b02      	ldr	r3, [sp, #8]
 800ad2a:	429d      	cmp	r5, r3
 800ad2c:	4606      	mov	r6, r0
 800ad2e:	460f      	mov	r7, r1
 800ad30:	f04f 0200 	mov.w	r2, #0
 800ad34:	d134      	bne.n	800ada0 <_dtoa_r+0x660>
 800ad36:	4b19      	ldr	r3, [pc, #100]	; (800ad9c <_dtoa_r+0x65c>)
 800ad38:	ec51 0b18 	vmov	r0, r1, d8
 800ad3c:	f7f5 fad6 	bl	80002ec <__adddf3>
 800ad40:	4602      	mov	r2, r0
 800ad42:	460b      	mov	r3, r1
 800ad44:	4630      	mov	r0, r6
 800ad46:	4639      	mov	r1, r7
 800ad48:	f7f5 ff16 	bl	8000b78 <__aeabi_dcmpgt>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d175      	bne.n	800ae3c <_dtoa_r+0x6fc>
 800ad50:	ec53 2b18 	vmov	r2, r3, d8
 800ad54:	4911      	ldr	r1, [pc, #68]	; (800ad9c <_dtoa_r+0x65c>)
 800ad56:	2000      	movs	r0, #0
 800ad58:	f7f5 fac6 	bl	80002e8 <__aeabi_dsub>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	460b      	mov	r3, r1
 800ad60:	4630      	mov	r0, r6
 800ad62:	4639      	mov	r1, r7
 800ad64:	f7f5 feea 	bl	8000b3c <__aeabi_dcmplt>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	f43f af27 	beq.w	800abbc <_dtoa_r+0x47c>
 800ad6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad70:	1e6b      	subs	r3, r5, #1
 800ad72:	930c      	str	r3, [sp, #48]	; 0x30
 800ad74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad78:	2b30      	cmp	r3, #48	; 0x30
 800ad7a:	d0f8      	beq.n	800ad6e <_dtoa_r+0x62e>
 800ad7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ad80:	e04a      	b.n	800ae18 <_dtoa_r+0x6d8>
 800ad82:	bf00      	nop
 800ad84:	0800fa68 	.word	0x0800fa68
 800ad88:	0800fa40 	.word	0x0800fa40
 800ad8c:	3ff00000 	.word	0x3ff00000
 800ad90:	40240000 	.word	0x40240000
 800ad94:	401c0000 	.word	0x401c0000
 800ad98:	40140000 	.word	0x40140000
 800ad9c:	3fe00000 	.word	0x3fe00000
 800ada0:	4baf      	ldr	r3, [pc, #700]	; (800b060 <_dtoa_r+0x920>)
 800ada2:	f7f5 fc59 	bl	8000658 <__aeabi_dmul>
 800ada6:	4606      	mov	r6, r0
 800ada8:	460f      	mov	r7, r1
 800adaa:	e7ac      	b.n	800ad06 <_dtoa_r+0x5c6>
 800adac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800adb0:	9d00      	ldr	r5, [sp, #0]
 800adb2:	4642      	mov	r2, r8
 800adb4:	464b      	mov	r3, r9
 800adb6:	4630      	mov	r0, r6
 800adb8:	4639      	mov	r1, r7
 800adba:	f7f5 fd77 	bl	80008ac <__aeabi_ddiv>
 800adbe:	f7f5 fefb 	bl	8000bb8 <__aeabi_d2iz>
 800adc2:	9002      	str	r0, [sp, #8]
 800adc4:	f7f5 fbde 	bl	8000584 <__aeabi_i2d>
 800adc8:	4642      	mov	r2, r8
 800adca:	464b      	mov	r3, r9
 800adcc:	f7f5 fc44 	bl	8000658 <__aeabi_dmul>
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	4630      	mov	r0, r6
 800add6:	4639      	mov	r1, r7
 800add8:	f7f5 fa86 	bl	80002e8 <__aeabi_dsub>
 800addc:	9e02      	ldr	r6, [sp, #8]
 800adde:	9f01      	ldr	r7, [sp, #4]
 800ade0:	3630      	adds	r6, #48	; 0x30
 800ade2:	f805 6b01 	strb.w	r6, [r5], #1
 800ade6:	9e00      	ldr	r6, [sp, #0]
 800ade8:	1bae      	subs	r6, r5, r6
 800adea:	42b7      	cmp	r7, r6
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	d137      	bne.n	800ae62 <_dtoa_r+0x722>
 800adf2:	f7f5 fa7b 	bl	80002ec <__adddf3>
 800adf6:	4642      	mov	r2, r8
 800adf8:	464b      	mov	r3, r9
 800adfa:	4606      	mov	r6, r0
 800adfc:	460f      	mov	r7, r1
 800adfe:	f7f5 febb 	bl	8000b78 <__aeabi_dcmpgt>
 800ae02:	b9c8      	cbnz	r0, 800ae38 <_dtoa_r+0x6f8>
 800ae04:	4642      	mov	r2, r8
 800ae06:	464b      	mov	r3, r9
 800ae08:	4630      	mov	r0, r6
 800ae0a:	4639      	mov	r1, r7
 800ae0c:	f7f5 fe8c 	bl	8000b28 <__aeabi_dcmpeq>
 800ae10:	b110      	cbz	r0, 800ae18 <_dtoa_r+0x6d8>
 800ae12:	9b02      	ldr	r3, [sp, #8]
 800ae14:	07d9      	lsls	r1, r3, #31
 800ae16:	d40f      	bmi.n	800ae38 <_dtoa_r+0x6f8>
 800ae18:	4620      	mov	r0, r4
 800ae1a:	4659      	mov	r1, fp
 800ae1c:	f000 ff8e 	bl	800bd3c <_Bfree>
 800ae20:	2300      	movs	r3, #0
 800ae22:	702b      	strb	r3, [r5, #0]
 800ae24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae26:	f10a 0001 	add.w	r0, sl, #1
 800ae2a:	6018      	str	r0, [r3, #0]
 800ae2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f43f acd8 	beq.w	800a7e4 <_dtoa_r+0xa4>
 800ae34:	601d      	str	r5, [r3, #0]
 800ae36:	e4d5      	b.n	800a7e4 <_dtoa_r+0xa4>
 800ae38:	f8cd a01c 	str.w	sl, [sp, #28]
 800ae3c:	462b      	mov	r3, r5
 800ae3e:	461d      	mov	r5, r3
 800ae40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae44:	2a39      	cmp	r2, #57	; 0x39
 800ae46:	d108      	bne.n	800ae5a <_dtoa_r+0x71a>
 800ae48:	9a00      	ldr	r2, [sp, #0]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d1f7      	bne.n	800ae3e <_dtoa_r+0x6fe>
 800ae4e:	9a07      	ldr	r2, [sp, #28]
 800ae50:	9900      	ldr	r1, [sp, #0]
 800ae52:	3201      	adds	r2, #1
 800ae54:	9207      	str	r2, [sp, #28]
 800ae56:	2230      	movs	r2, #48	; 0x30
 800ae58:	700a      	strb	r2, [r1, #0]
 800ae5a:	781a      	ldrb	r2, [r3, #0]
 800ae5c:	3201      	adds	r2, #1
 800ae5e:	701a      	strb	r2, [r3, #0]
 800ae60:	e78c      	b.n	800ad7c <_dtoa_r+0x63c>
 800ae62:	4b7f      	ldr	r3, [pc, #508]	; (800b060 <_dtoa_r+0x920>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	f7f5 fbf7 	bl	8000658 <__aeabi_dmul>
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4606      	mov	r6, r0
 800ae70:	460f      	mov	r7, r1
 800ae72:	f7f5 fe59 	bl	8000b28 <__aeabi_dcmpeq>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	d09b      	beq.n	800adb2 <_dtoa_r+0x672>
 800ae7a:	e7cd      	b.n	800ae18 <_dtoa_r+0x6d8>
 800ae7c:	9a08      	ldr	r2, [sp, #32]
 800ae7e:	2a00      	cmp	r2, #0
 800ae80:	f000 80c4 	beq.w	800b00c <_dtoa_r+0x8cc>
 800ae84:	9a05      	ldr	r2, [sp, #20]
 800ae86:	2a01      	cmp	r2, #1
 800ae88:	f300 80a8 	bgt.w	800afdc <_dtoa_r+0x89c>
 800ae8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae8e:	2a00      	cmp	r2, #0
 800ae90:	f000 80a0 	beq.w	800afd4 <_dtoa_r+0x894>
 800ae94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae98:	9e06      	ldr	r6, [sp, #24]
 800ae9a:	4645      	mov	r5, r8
 800ae9c:	9a04      	ldr	r2, [sp, #16]
 800ae9e:	2101      	movs	r1, #1
 800aea0:	441a      	add	r2, r3
 800aea2:	4620      	mov	r0, r4
 800aea4:	4498      	add	r8, r3
 800aea6:	9204      	str	r2, [sp, #16]
 800aea8:	f001 f84e 	bl	800bf48 <__i2b>
 800aeac:	4607      	mov	r7, r0
 800aeae:	2d00      	cmp	r5, #0
 800aeb0:	dd0b      	ble.n	800aeca <_dtoa_r+0x78a>
 800aeb2:	9b04      	ldr	r3, [sp, #16]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	dd08      	ble.n	800aeca <_dtoa_r+0x78a>
 800aeb8:	42ab      	cmp	r3, r5
 800aeba:	9a04      	ldr	r2, [sp, #16]
 800aebc:	bfa8      	it	ge
 800aebe:	462b      	movge	r3, r5
 800aec0:	eba8 0803 	sub.w	r8, r8, r3
 800aec4:	1aed      	subs	r5, r5, r3
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	9304      	str	r3, [sp, #16]
 800aeca:	9b06      	ldr	r3, [sp, #24]
 800aecc:	b1fb      	cbz	r3, 800af0e <_dtoa_r+0x7ce>
 800aece:	9b08      	ldr	r3, [sp, #32]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f000 809f 	beq.w	800b014 <_dtoa_r+0x8d4>
 800aed6:	2e00      	cmp	r6, #0
 800aed8:	dd11      	ble.n	800aefe <_dtoa_r+0x7be>
 800aeda:	4639      	mov	r1, r7
 800aedc:	4632      	mov	r2, r6
 800aede:	4620      	mov	r0, r4
 800aee0:	f001 f8ee 	bl	800c0c0 <__pow5mult>
 800aee4:	465a      	mov	r2, fp
 800aee6:	4601      	mov	r1, r0
 800aee8:	4607      	mov	r7, r0
 800aeea:	4620      	mov	r0, r4
 800aeec:	f001 f842 	bl	800bf74 <__multiply>
 800aef0:	4659      	mov	r1, fp
 800aef2:	9007      	str	r0, [sp, #28]
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 ff21 	bl	800bd3c <_Bfree>
 800aefa:	9b07      	ldr	r3, [sp, #28]
 800aefc:	469b      	mov	fp, r3
 800aefe:	9b06      	ldr	r3, [sp, #24]
 800af00:	1b9a      	subs	r2, r3, r6
 800af02:	d004      	beq.n	800af0e <_dtoa_r+0x7ce>
 800af04:	4659      	mov	r1, fp
 800af06:	4620      	mov	r0, r4
 800af08:	f001 f8da 	bl	800c0c0 <__pow5mult>
 800af0c:	4683      	mov	fp, r0
 800af0e:	2101      	movs	r1, #1
 800af10:	4620      	mov	r0, r4
 800af12:	f001 f819 	bl	800bf48 <__i2b>
 800af16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af18:	2b00      	cmp	r3, #0
 800af1a:	4606      	mov	r6, r0
 800af1c:	dd7c      	ble.n	800b018 <_dtoa_r+0x8d8>
 800af1e:	461a      	mov	r2, r3
 800af20:	4601      	mov	r1, r0
 800af22:	4620      	mov	r0, r4
 800af24:	f001 f8cc 	bl	800c0c0 <__pow5mult>
 800af28:	9b05      	ldr	r3, [sp, #20]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	4606      	mov	r6, r0
 800af2e:	dd76      	ble.n	800b01e <_dtoa_r+0x8de>
 800af30:	2300      	movs	r3, #0
 800af32:	9306      	str	r3, [sp, #24]
 800af34:	6933      	ldr	r3, [r6, #16]
 800af36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af3a:	6918      	ldr	r0, [r3, #16]
 800af3c:	f000 ffb4 	bl	800bea8 <__hi0bits>
 800af40:	f1c0 0020 	rsb	r0, r0, #32
 800af44:	9b04      	ldr	r3, [sp, #16]
 800af46:	4418      	add	r0, r3
 800af48:	f010 001f 	ands.w	r0, r0, #31
 800af4c:	f000 8086 	beq.w	800b05c <_dtoa_r+0x91c>
 800af50:	f1c0 0320 	rsb	r3, r0, #32
 800af54:	2b04      	cmp	r3, #4
 800af56:	dd7f      	ble.n	800b058 <_dtoa_r+0x918>
 800af58:	f1c0 001c 	rsb	r0, r0, #28
 800af5c:	9b04      	ldr	r3, [sp, #16]
 800af5e:	4403      	add	r3, r0
 800af60:	4480      	add	r8, r0
 800af62:	4405      	add	r5, r0
 800af64:	9304      	str	r3, [sp, #16]
 800af66:	f1b8 0f00 	cmp.w	r8, #0
 800af6a:	dd05      	ble.n	800af78 <_dtoa_r+0x838>
 800af6c:	4659      	mov	r1, fp
 800af6e:	4642      	mov	r2, r8
 800af70:	4620      	mov	r0, r4
 800af72:	f001 f8ff 	bl	800c174 <__lshift>
 800af76:	4683      	mov	fp, r0
 800af78:	9b04      	ldr	r3, [sp, #16]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	dd05      	ble.n	800af8a <_dtoa_r+0x84a>
 800af7e:	4631      	mov	r1, r6
 800af80:	461a      	mov	r2, r3
 800af82:	4620      	mov	r0, r4
 800af84:	f001 f8f6 	bl	800c174 <__lshift>
 800af88:	4606      	mov	r6, r0
 800af8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d069      	beq.n	800b064 <_dtoa_r+0x924>
 800af90:	4631      	mov	r1, r6
 800af92:	4658      	mov	r0, fp
 800af94:	f001 f95a 	bl	800c24c <__mcmp>
 800af98:	2800      	cmp	r0, #0
 800af9a:	da63      	bge.n	800b064 <_dtoa_r+0x924>
 800af9c:	2300      	movs	r3, #0
 800af9e:	4659      	mov	r1, fp
 800afa0:	220a      	movs	r2, #10
 800afa2:	4620      	mov	r0, r4
 800afa4:	f000 feec 	bl	800bd80 <__multadd>
 800afa8:	9b08      	ldr	r3, [sp, #32]
 800afaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afae:	4683      	mov	fp, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f000 818f 	beq.w	800b2d4 <_dtoa_r+0xb94>
 800afb6:	4639      	mov	r1, r7
 800afb8:	2300      	movs	r3, #0
 800afba:	220a      	movs	r2, #10
 800afbc:	4620      	mov	r0, r4
 800afbe:	f000 fedf 	bl	800bd80 <__multadd>
 800afc2:	f1b9 0f00 	cmp.w	r9, #0
 800afc6:	4607      	mov	r7, r0
 800afc8:	f300 808e 	bgt.w	800b0e8 <_dtoa_r+0x9a8>
 800afcc:	9b05      	ldr	r3, [sp, #20]
 800afce:	2b02      	cmp	r3, #2
 800afd0:	dc50      	bgt.n	800b074 <_dtoa_r+0x934>
 800afd2:	e089      	b.n	800b0e8 <_dtoa_r+0x9a8>
 800afd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800afda:	e75d      	b.n	800ae98 <_dtoa_r+0x758>
 800afdc:	9b01      	ldr	r3, [sp, #4]
 800afde:	1e5e      	subs	r6, r3, #1
 800afe0:	9b06      	ldr	r3, [sp, #24]
 800afe2:	42b3      	cmp	r3, r6
 800afe4:	bfbf      	itttt	lt
 800afe6:	9b06      	ldrlt	r3, [sp, #24]
 800afe8:	9606      	strlt	r6, [sp, #24]
 800afea:	1af2      	sublt	r2, r6, r3
 800afec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800afee:	bfb6      	itet	lt
 800aff0:	189b      	addlt	r3, r3, r2
 800aff2:	1b9e      	subge	r6, r3, r6
 800aff4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800aff6:	9b01      	ldr	r3, [sp, #4]
 800aff8:	bfb8      	it	lt
 800affa:	2600      	movlt	r6, #0
 800affc:	2b00      	cmp	r3, #0
 800affe:	bfb5      	itete	lt
 800b000:	eba8 0503 	sublt.w	r5, r8, r3
 800b004:	9b01      	ldrge	r3, [sp, #4]
 800b006:	2300      	movlt	r3, #0
 800b008:	4645      	movge	r5, r8
 800b00a:	e747      	b.n	800ae9c <_dtoa_r+0x75c>
 800b00c:	9e06      	ldr	r6, [sp, #24]
 800b00e:	9f08      	ldr	r7, [sp, #32]
 800b010:	4645      	mov	r5, r8
 800b012:	e74c      	b.n	800aeae <_dtoa_r+0x76e>
 800b014:	9a06      	ldr	r2, [sp, #24]
 800b016:	e775      	b.n	800af04 <_dtoa_r+0x7c4>
 800b018:	9b05      	ldr	r3, [sp, #20]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	dc18      	bgt.n	800b050 <_dtoa_r+0x910>
 800b01e:	9b02      	ldr	r3, [sp, #8]
 800b020:	b9b3      	cbnz	r3, 800b050 <_dtoa_r+0x910>
 800b022:	9b03      	ldr	r3, [sp, #12]
 800b024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b028:	b9a3      	cbnz	r3, 800b054 <_dtoa_r+0x914>
 800b02a:	9b03      	ldr	r3, [sp, #12]
 800b02c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b030:	0d1b      	lsrs	r3, r3, #20
 800b032:	051b      	lsls	r3, r3, #20
 800b034:	b12b      	cbz	r3, 800b042 <_dtoa_r+0x902>
 800b036:	9b04      	ldr	r3, [sp, #16]
 800b038:	3301      	adds	r3, #1
 800b03a:	9304      	str	r3, [sp, #16]
 800b03c:	f108 0801 	add.w	r8, r8, #1
 800b040:	2301      	movs	r3, #1
 800b042:	9306      	str	r3, [sp, #24]
 800b044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b046:	2b00      	cmp	r3, #0
 800b048:	f47f af74 	bne.w	800af34 <_dtoa_r+0x7f4>
 800b04c:	2001      	movs	r0, #1
 800b04e:	e779      	b.n	800af44 <_dtoa_r+0x804>
 800b050:	2300      	movs	r3, #0
 800b052:	e7f6      	b.n	800b042 <_dtoa_r+0x902>
 800b054:	9b02      	ldr	r3, [sp, #8]
 800b056:	e7f4      	b.n	800b042 <_dtoa_r+0x902>
 800b058:	d085      	beq.n	800af66 <_dtoa_r+0x826>
 800b05a:	4618      	mov	r0, r3
 800b05c:	301c      	adds	r0, #28
 800b05e:	e77d      	b.n	800af5c <_dtoa_r+0x81c>
 800b060:	40240000 	.word	0x40240000
 800b064:	9b01      	ldr	r3, [sp, #4]
 800b066:	2b00      	cmp	r3, #0
 800b068:	dc38      	bgt.n	800b0dc <_dtoa_r+0x99c>
 800b06a:	9b05      	ldr	r3, [sp, #20]
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	dd35      	ble.n	800b0dc <_dtoa_r+0x99c>
 800b070:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b074:	f1b9 0f00 	cmp.w	r9, #0
 800b078:	d10d      	bne.n	800b096 <_dtoa_r+0x956>
 800b07a:	4631      	mov	r1, r6
 800b07c:	464b      	mov	r3, r9
 800b07e:	2205      	movs	r2, #5
 800b080:	4620      	mov	r0, r4
 800b082:	f000 fe7d 	bl	800bd80 <__multadd>
 800b086:	4601      	mov	r1, r0
 800b088:	4606      	mov	r6, r0
 800b08a:	4658      	mov	r0, fp
 800b08c:	f001 f8de 	bl	800c24c <__mcmp>
 800b090:	2800      	cmp	r0, #0
 800b092:	f73f adbd 	bgt.w	800ac10 <_dtoa_r+0x4d0>
 800b096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b098:	9d00      	ldr	r5, [sp, #0]
 800b09a:	ea6f 0a03 	mvn.w	sl, r3
 800b09e:	f04f 0800 	mov.w	r8, #0
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f000 fe49 	bl	800bd3c <_Bfree>
 800b0aa:	2f00      	cmp	r7, #0
 800b0ac:	f43f aeb4 	beq.w	800ae18 <_dtoa_r+0x6d8>
 800b0b0:	f1b8 0f00 	cmp.w	r8, #0
 800b0b4:	d005      	beq.n	800b0c2 <_dtoa_r+0x982>
 800b0b6:	45b8      	cmp	r8, r7
 800b0b8:	d003      	beq.n	800b0c2 <_dtoa_r+0x982>
 800b0ba:	4641      	mov	r1, r8
 800b0bc:	4620      	mov	r0, r4
 800b0be:	f000 fe3d 	bl	800bd3c <_Bfree>
 800b0c2:	4639      	mov	r1, r7
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f000 fe39 	bl	800bd3c <_Bfree>
 800b0ca:	e6a5      	b.n	800ae18 <_dtoa_r+0x6d8>
 800b0cc:	2600      	movs	r6, #0
 800b0ce:	4637      	mov	r7, r6
 800b0d0:	e7e1      	b.n	800b096 <_dtoa_r+0x956>
 800b0d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b0d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b0d8:	4637      	mov	r7, r6
 800b0da:	e599      	b.n	800ac10 <_dtoa_r+0x4d0>
 800b0dc:	9b08      	ldr	r3, [sp, #32]
 800b0de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f000 80fd 	beq.w	800b2e2 <_dtoa_r+0xba2>
 800b0e8:	2d00      	cmp	r5, #0
 800b0ea:	dd05      	ble.n	800b0f8 <_dtoa_r+0x9b8>
 800b0ec:	4639      	mov	r1, r7
 800b0ee:	462a      	mov	r2, r5
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	f001 f83f 	bl	800c174 <__lshift>
 800b0f6:	4607      	mov	r7, r0
 800b0f8:	9b06      	ldr	r3, [sp, #24]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d05c      	beq.n	800b1b8 <_dtoa_r+0xa78>
 800b0fe:	6879      	ldr	r1, [r7, #4]
 800b100:	4620      	mov	r0, r4
 800b102:	f000 fddb 	bl	800bcbc <_Balloc>
 800b106:	4605      	mov	r5, r0
 800b108:	b928      	cbnz	r0, 800b116 <_dtoa_r+0x9d6>
 800b10a:	4b80      	ldr	r3, [pc, #512]	; (800b30c <_dtoa_r+0xbcc>)
 800b10c:	4602      	mov	r2, r0
 800b10e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b112:	f7ff bb2e 	b.w	800a772 <_dtoa_r+0x32>
 800b116:	693a      	ldr	r2, [r7, #16]
 800b118:	3202      	adds	r2, #2
 800b11a:	0092      	lsls	r2, r2, #2
 800b11c:	f107 010c 	add.w	r1, r7, #12
 800b120:	300c      	adds	r0, #12
 800b122:	f7fd fcb6 	bl	8008a92 <memcpy>
 800b126:	2201      	movs	r2, #1
 800b128:	4629      	mov	r1, r5
 800b12a:	4620      	mov	r0, r4
 800b12c:	f001 f822 	bl	800c174 <__lshift>
 800b130:	9b00      	ldr	r3, [sp, #0]
 800b132:	3301      	adds	r3, #1
 800b134:	9301      	str	r3, [sp, #4]
 800b136:	9b00      	ldr	r3, [sp, #0]
 800b138:	444b      	add	r3, r9
 800b13a:	9307      	str	r3, [sp, #28]
 800b13c:	9b02      	ldr	r3, [sp, #8]
 800b13e:	f003 0301 	and.w	r3, r3, #1
 800b142:	46b8      	mov	r8, r7
 800b144:	9306      	str	r3, [sp, #24]
 800b146:	4607      	mov	r7, r0
 800b148:	9b01      	ldr	r3, [sp, #4]
 800b14a:	4631      	mov	r1, r6
 800b14c:	3b01      	subs	r3, #1
 800b14e:	4658      	mov	r0, fp
 800b150:	9302      	str	r3, [sp, #8]
 800b152:	f7ff fa67 	bl	800a624 <quorem>
 800b156:	4603      	mov	r3, r0
 800b158:	3330      	adds	r3, #48	; 0x30
 800b15a:	9004      	str	r0, [sp, #16]
 800b15c:	4641      	mov	r1, r8
 800b15e:	4658      	mov	r0, fp
 800b160:	9308      	str	r3, [sp, #32]
 800b162:	f001 f873 	bl	800c24c <__mcmp>
 800b166:	463a      	mov	r2, r7
 800b168:	4681      	mov	r9, r0
 800b16a:	4631      	mov	r1, r6
 800b16c:	4620      	mov	r0, r4
 800b16e:	f001 f889 	bl	800c284 <__mdiff>
 800b172:	68c2      	ldr	r2, [r0, #12]
 800b174:	9b08      	ldr	r3, [sp, #32]
 800b176:	4605      	mov	r5, r0
 800b178:	bb02      	cbnz	r2, 800b1bc <_dtoa_r+0xa7c>
 800b17a:	4601      	mov	r1, r0
 800b17c:	4658      	mov	r0, fp
 800b17e:	f001 f865 	bl	800c24c <__mcmp>
 800b182:	9b08      	ldr	r3, [sp, #32]
 800b184:	4602      	mov	r2, r0
 800b186:	4629      	mov	r1, r5
 800b188:	4620      	mov	r0, r4
 800b18a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b18e:	f000 fdd5 	bl	800bd3c <_Bfree>
 800b192:	9b05      	ldr	r3, [sp, #20]
 800b194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b196:	9d01      	ldr	r5, [sp, #4]
 800b198:	ea43 0102 	orr.w	r1, r3, r2
 800b19c:	9b06      	ldr	r3, [sp, #24]
 800b19e:	430b      	orrs	r3, r1
 800b1a0:	9b08      	ldr	r3, [sp, #32]
 800b1a2:	d10d      	bne.n	800b1c0 <_dtoa_r+0xa80>
 800b1a4:	2b39      	cmp	r3, #57	; 0x39
 800b1a6:	d029      	beq.n	800b1fc <_dtoa_r+0xabc>
 800b1a8:	f1b9 0f00 	cmp.w	r9, #0
 800b1ac:	dd01      	ble.n	800b1b2 <_dtoa_r+0xa72>
 800b1ae:	9b04      	ldr	r3, [sp, #16]
 800b1b0:	3331      	adds	r3, #49	; 0x31
 800b1b2:	9a02      	ldr	r2, [sp, #8]
 800b1b4:	7013      	strb	r3, [r2, #0]
 800b1b6:	e774      	b.n	800b0a2 <_dtoa_r+0x962>
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	e7b9      	b.n	800b130 <_dtoa_r+0x9f0>
 800b1bc:	2201      	movs	r2, #1
 800b1be:	e7e2      	b.n	800b186 <_dtoa_r+0xa46>
 800b1c0:	f1b9 0f00 	cmp.w	r9, #0
 800b1c4:	db06      	blt.n	800b1d4 <_dtoa_r+0xa94>
 800b1c6:	9905      	ldr	r1, [sp, #20]
 800b1c8:	ea41 0909 	orr.w	r9, r1, r9
 800b1cc:	9906      	ldr	r1, [sp, #24]
 800b1ce:	ea59 0101 	orrs.w	r1, r9, r1
 800b1d2:	d120      	bne.n	800b216 <_dtoa_r+0xad6>
 800b1d4:	2a00      	cmp	r2, #0
 800b1d6:	ddec      	ble.n	800b1b2 <_dtoa_r+0xa72>
 800b1d8:	4659      	mov	r1, fp
 800b1da:	2201      	movs	r2, #1
 800b1dc:	4620      	mov	r0, r4
 800b1de:	9301      	str	r3, [sp, #4]
 800b1e0:	f000 ffc8 	bl	800c174 <__lshift>
 800b1e4:	4631      	mov	r1, r6
 800b1e6:	4683      	mov	fp, r0
 800b1e8:	f001 f830 	bl	800c24c <__mcmp>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	9b01      	ldr	r3, [sp, #4]
 800b1f0:	dc02      	bgt.n	800b1f8 <_dtoa_r+0xab8>
 800b1f2:	d1de      	bne.n	800b1b2 <_dtoa_r+0xa72>
 800b1f4:	07da      	lsls	r2, r3, #31
 800b1f6:	d5dc      	bpl.n	800b1b2 <_dtoa_r+0xa72>
 800b1f8:	2b39      	cmp	r3, #57	; 0x39
 800b1fa:	d1d8      	bne.n	800b1ae <_dtoa_r+0xa6e>
 800b1fc:	9a02      	ldr	r2, [sp, #8]
 800b1fe:	2339      	movs	r3, #57	; 0x39
 800b200:	7013      	strb	r3, [r2, #0]
 800b202:	462b      	mov	r3, r5
 800b204:	461d      	mov	r5, r3
 800b206:	3b01      	subs	r3, #1
 800b208:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b20c:	2a39      	cmp	r2, #57	; 0x39
 800b20e:	d050      	beq.n	800b2b2 <_dtoa_r+0xb72>
 800b210:	3201      	adds	r2, #1
 800b212:	701a      	strb	r2, [r3, #0]
 800b214:	e745      	b.n	800b0a2 <_dtoa_r+0x962>
 800b216:	2a00      	cmp	r2, #0
 800b218:	dd03      	ble.n	800b222 <_dtoa_r+0xae2>
 800b21a:	2b39      	cmp	r3, #57	; 0x39
 800b21c:	d0ee      	beq.n	800b1fc <_dtoa_r+0xabc>
 800b21e:	3301      	adds	r3, #1
 800b220:	e7c7      	b.n	800b1b2 <_dtoa_r+0xa72>
 800b222:	9a01      	ldr	r2, [sp, #4]
 800b224:	9907      	ldr	r1, [sp, #28]
 800b226:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b22a:	428a      	cmp	r2, r1
 800b22c:	d02a      	beq.n	800b284 <_dtoa_r+0xb44>
 800b22e:	4659      	mov	r1, fp
 800b230:	2300      	movs	r3, #0
 800b232:	220a      	movs	r2, #10
 800b234:	4620      	mov	r0, r4
 800b236:	f000 fda3 	bl	800bd80 <__multadd>
 800b23a:	45b8      	cmp	r8, r7
 800b23c:	4683      	mov	fp, r0
 800b23e:	f04f 0300 	mov.w	r3, #0
 800b242:	f04f 020a 	mov.w	r2, #10
 800b246:	4641      	mov	r1, r8
 800b248:	4620      	mov	r0, r4
 800b24a:	d107      	bne.n	800b25c <_dtoa_r+0xb1c>
 800b24c:	f000 fd98 	bl	800bd80 <__multadd>
 800b250:	4680      	mov	r8, r0
 800b252:	4607      	mov	r7, r0
 800b254:	9b01      	ldr	r3, [sp, #4]
 800b256:	3301      	adds	r3, #1
 800b258:	9301      	str	r3, [sp, #4]
 800b25a:	e775      	b.n	800b148 <_dtoa_r+0xa08>
 800b25c:	f000 fd90 	bl	800bd80 <__multadd>
 800b260:	4639      	mov	r1, r7
 800b262:	4680      	mov	r8, r0
 800b264:	2300      	movs	r3, #0
 800b266:	220a      	movs	r2, #10
 800b268:	4620      	mov	r0, r4
 800b26a:	f000 fd89 	bl	800bd80 <__multadd>
 800b26e:	4607      	mov	r7, r0
 800b270:	e7f0      	b.n	800b254 <_dtoa_r+0xb14>
 800b272:	f1b9 0f00 	cmp.w	r9, #0
 800b276:	9a00      	ldr	r2, [sp, #0]
 800b278:	bfcc      	ite	gt
 800b27a:	464d      	movgt	r5, r9
 800b27c:	2501      	movle	r5, #1
 800b27e:	4415      	add	r5, r2
 800b280:	f04f 0800 	mov.w	r8, #0
 800b284:	4659      	mov	r1, fp
 800b286:	2201      	movs	r2, #1
 800b288:	4620      	mov	r0, r4
 800b28a:	9301      	str	r3, [sp, #4]
 800b28c:	f000 ff72 	bl	800c174 <__lshift>
 800b290:	4631      	mov	r1, r6
 800b292:	4683      	mov	fp, r0
 800b294:	f000 ffda 	bl	800c24c <__mcmp>
 800b298:	2800      	cmp	r0, #0
 800b29a:	dcb2      	bgt.n	800b202 <_dtoa_r+0xac2>
 800b29c:	d102      	bne.n	800b2a4 <_dtoa_r+0xb64>
 800b29e:	9b01      	ldr	r3, [sp, #4]
 800b2a0:	07db      	lsls	r3, r3, #31
 800b2a2:	d4ae      	bmi.n	800b202 <_dtoa_r+0xac2>
 800b2a4:	462b      	mov	r3, r5
 800b2a6:	461d      	mov	r5, r3
 800b2a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2ac:	2a30      	cmp	r2, #48	; 0x30
 800b2ae:	d0fa      	beq.n	800b2a6 <_dtoa_r+0xb66>
 800b2b0:	e6f7      	b.n	800b0a2 <_dtoa_r+0x962>
 800b2b2:	9a00      	ldr	r2, [sp, #0]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d1a5      	bne.n	800b204 <_dtoa_r+0xac4>
 800b2b8:	f10a 0a01 	add.w	sl, sl, #1
 800b2bc:	2331      	movs	r3, #49	; 0x31
 800b2be:	e779      	b.n	800b1b4 <_dtoa_r+0xa74>
 800b2c0:	4b13      	ldr	r3, [pc, #76]	; (800b310 <_dtoa_r+0xbd0>)
 800b2c2:	f7ff baaf 	b.w	800a824 <_dtoa_r+0xe4>
 800b2c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f47f aa86 	bne.w	800a7da <_dtoa_r+0x9a>
 800b2ce:	4b11      	ldr	r3, [pc, #68]	; (800b314 <_dtoa_r+0xbd4>)
 800b2d0:	f7ff baa8 	b.w	800a824 <_dtoa_r+0xe4>
 800b2d4:	f1b9 0f00 	cmp.w	r9, #0
 800b2d8:	dc03      	bgt.n	800b2e2 <_dtoa_r+0xba2>
 800b2da:	9b05      	ldr	r3, [sp, #20]
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	f73f aec9 	bgt.w	800b074 <_dtoa_r+0x934>
 800b2e2:	9d00      	ldr	r5, [sp, #0]
 800b2e4:	4631      	mov	r1, r6
 800b2e6:	4658      	mov	r0, fp
 800b2e8:	f7ff f99c 	bl	800a624 <quorem>
 800b2ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b2f0:	f805 3b01 	strb.w	r3, [r5], #1
 800b2f4:	9a00      	ldr	r2, [sp, #0]
 800b2f6:	1aaa      	subs	r2, r5, r2
 800b2f8:	4591      	cmp	r9, r2
 800b2fa:	ddba      	ble.n	800b272 <_dtoa_r+0xb32>
 800b2fc:	4659      	mov	r1, fp
 800b2fe:	2300      	movs	r3, #0
 800b300:	220a      	movs	r2, #10
 800b302:	4620      	mov	r0, r4
 800b304:	f000 fd3c 	bl	800bd80 <__multadd>
 800b308:	4683      	mov	fp, r0
 800b30a:	e7eb      	b.n	800b2e4 <_dtoa_r+0xba4>
 800b30c:	0800f94c 	.word	0x0800f94c
 800b310:	0800f750 	.word	0x0800f750
 800b314:	0800f8c9 	.word	0x0800f8c9

0800b318 <__sflush_r>:
 800b318:	898a      	ldrh	r2, [r1, #12]
 800b31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b31e:	4605      	mov	r5, r0
 800b320:	0710      	lsls	r0, r2, #28
 800b322:	460c      	mov	r4, r1
 800b324:	d458      	bmi.n	800b3d8 <__sflush_r+0xc0>
 800b326:	684b      	ldr	r3, [r1, #4]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	dc05      	bgt.n	800b338 <__sflush_r+0x20>
 800b32c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b32e:	2b00      	cmp	r3, #0
 800b330:	dc02      	bgt.n	800b338 <__sflush_r+0x20>
 800b332:	2000      	movs	r0, #0
 800b334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b33a:	2e00      	cmp	r6, #0
 800b33c:	d0f9      	beq.n	800b332 <__sflush_r+0x1a>
 800b33e:	2300      	movs	r3, #0
 800b340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b344:	682f      	ldr	r7, [r5, #0]
 800b346:	602b      	str	r3, [r5, #0]
 800b348:	d032      	beq.n	800b3b0 <__sflush_r+0x98>
 800b34a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b34c:	89a3      	ldrh	r3, [r4, #12]
 800b34e:	075a      	lsls	r2, r3, #29
 800b350:	d505      	bpl.n	800b35e <__sflush_r+0x46>
 800b352:	6863      	ldr	r3, [r4, #4]
 800b354:	1ac0      	subs	r0, r0, r3
 800b356:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b358:	b10b      	cbz	r3, 800b35e <__sflush_r+0x46>
 800b35a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b35c:	1ac0      	subs	r0, r0, r3
 800b35e:	2300      	movs	r3, #0
 800b360:	4602      	mov	r2, r0
 800b362:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b364:	6a21      	ldr	r1, [r4, #32]
 800b366:	4628      	mov	r0, r5
 800b368:	47b0      	blx	r6
 800b36a:	1c43      	adds	r3, r0, #1
 800b36c:	89a3      	ldrh	r3, [r4, #12]
 800b36e:	d106      	bne.n	800b37e <__sflush_r+0x66>
 800b370:	6829      	ldr	r1, [r5, #0]
 800b372:	291d      	cmp	r1, #29
 800b374:	d82c      	bhi.n	800b3d0 <__sflush_r+0xb8>
 800b376:	4a2a      	ldr	r2, [pc, #168]	; (800b420 <__sflush_r+0x108>)
 800b378:	40ca      	lsrs	r2, r1
 800b37a:	07d6      	lsls	r6, r2, #31
 800b37c:	d528      	bpl.n	800b3d0 <__sflush_r+0xb8>
 800b37e:	2200      	movs	r2, #0
 800b380:	6062      	str	r2, [r4, #4]
 800b382:	04d9      	lsls	r1, r3, #19
 800b384:	6922      	ldr	r2, [r4, #16]
 800b386:	6022      	str	r2, [r4, #0]
 800b388:	d504      	bpl.n	800b394 <__sflush_r+0x7c>
 800b38a:	1c42      	adds	r2, r0, #1
 800b38c:	d101      	bne.n	800b392 <__sflush_r+0x7a>
 800b38e:	682b      	ldr	r3, [r5, #0]
 800b390:	b903      	cbnz	r3, 800b394 <__sflush_r+0x7c>
 800b392:	6560      	str	r0, [r4, #84]	; 0x54
 800b394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b396:	602f      	str	r7, [r5, #0]
 800b398:	2900      	cmp	r1, #0
 800b39a:	d0ca      	beq.n	800b332 <__sflush_r+0x1a>
 800b39c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3a0:	4299      	cmp	r1, r3
 800b3a2:	d002      	beq.n	800b3aa <__sflush_r+0x92>
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	f001 f953 	bl	800c650 <_free_r>
 800b3aa:	2000      	movs	r0, #0
 800b3ac:	6360      	str	r0, [r4, #52]	; 0x34
 800b3ae:	e7c1      	b.n	800b334 <__sflush_r+0x1c>
 800b3b0:	6a21      	ldr	r1, [r4, #32]
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	47b0      	blx	r6
 800b3b8:	1c41      	adds	r1, r0, #1
 800b3ba:	d1c7      	bne.n	800b34c <__sflush_r+0x34>
 800b3bc:	682b      	ldr	r3, [r5, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d0c4      	beq.n	800b34c <__sflush_r+0x34>
 800b3c2:	2b1d      	cmp	r3, #29
 800b3c4:	d001      	beq.n	800b3ca <__sflush_r+0xb2>
 800b3c6:	2b16      	cmp	r3, #22
 800b3c8:	d101      	bne.n	800b3ce <__sflush_r+0xb6>
 800b3ca:	602f      	str	r7, [r5, #0]
 800b3cc:	e7b1      	b.n	800b332 <__sflush_r+0x1a>
 800b3ce:	89a3      	ldrh	r3, [r4, #12]
 800b3d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3d4:	81a3      	strh	r3, [r4, #12]
 800b3d6:	e7ad      	b.n	800b334 <__sflush_r+0x1c>
 800b3d8:	690f      	ldr	r7, [r1, #16]
 800b3da:	2f00      	cmp	r7, #0
 800b3dc:	d0a9      	beq.n	800b332 <__sflush_r+0x1a>
 800b3de:	0793      	lsls	r3, r2, #30
 800b3e0:	680e      	ldr	r6, [r1, #0]
 800b3e2:	bf08      	it	eq
 800b3e4:	694b      	ldreq	r3, [r1, #20]
 800b3e6:	600f      	str	r7, [r1, #0]
 800b3e8:	bf18      	it	ne
 800b3ea:	2300      	movne	r3, #0
 800b3ec:	eba6 0807 	sub.w	r8, r6, r7
 800b3f0:	608b      	str	r3, [r1, #8]
 800b3f2:	f1b8 0f00 	cmp.w	r8, #0
 800b3f6:	dd9c      	ble.n	800b332 <__sflush_r+0x1a>
 800b3f8:	6a21      	ldr	r1, [r4, #32]
 800b3fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3fc:	4643      	mov	r3, r8
 800b3fe:	463a      	mov	r2, r7
 800b400:	4628      	mov	r0, r5
 800b402:	47b0      	blx	r6
 800b404:	2800      	cmp	r0, #0
 800b406:	dc06      	bgt.n	800b416 <__sflush_r+0xfe>
 800b408:	89a3      	ldrh	r3, [r4, #12]
 800b40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b40e:	81a3      	strh	r3, [r4, #12]
 800b410:	f04f 30ff 	mov.w	r0, #4294967295
 800b414:	e78e      	b.n	800b334 <__sflush_r+0x1c>
 800b416:	4407      	add	r7, r0
 800b418:	eba8 0800 	sub.w	r8, r8, r0
 800b41c:	e7e9      	b.n	800b3f2 <__sflush_r+0xda>
 800b41e:	bf00      	nop
 800b420:	20400001 	.word	0x20400001

0800b424 <_fflush_r>:
 800b424:	b538      	push	{r3, r4, r5, lr}
 800b426:	690b      	ldr	r3, [r1, #16]
 800b428:	4605      	mov	r5, r0
 800b42a:	460c      	mov	r4, r1
 800b42c:	b913      	cbnz	r3, 800b434 <_fflush_r+0x10>
 800b42e:	2500      	movs	r5, #0
 800b430:	4628      	mov	r0, r5
 800b432:	bd38      	pop	{r3, r4, r5, pc}
 800b434:	b118      	cbz	r0, 800b43e <_fflush_r+0x1a>
 800b436:	6983      	ldr	r3, [r0, #24]
 800b438:	b90b      	cbnz	r3, 800b43e <_fflush_r+0x1a>
 800b43a:	f7fd fa65 	bl	8008908 <__sinit>
 800b43e:	4b14      	ldr	r3, [pc, #80]	; (800b490 <_fflush_r+0x6c>)
 800b440:	429c      	cmp	r4, r3
 800b442:	d11b      	bne.n	800b47c <_fflush_r+0x58>
 800b444:	686c      	ldr	r4, [r5, #4]
 800b446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d0ef      	beq.n	800b42e <_fflush_r+0xa>
 800b44e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b450:	07d0      	lsls	r0, r2, #31
 800b452:	d404      	bmi.n	800b45e <_fflush_r+0x3a>
 800b454:	0599      	lsls	r1, r3, #22
 800b456:	d402      	bmi.n	800b45e <_fflush_r+0x3a>
 800b458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b45a:	f7fd fb18 	bl	8008a8e <__retarget_lock_acquire_recursive>
 800b45e:	4628      	mov	r0, r5
 800b460:	4621      	mov	r1, r4
 800b462:	f7ff ff59 	bl	800b318 <__sflush_r>
 800b466:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b468:	07da      	lsls	r2, r3, #31
 800b46a:	4605      	mov	r5, r0
 800b46c:	d4e0      	bmi.n	800b430 <_fflush_r+0xc>
 800b46e:	89a3      	ldrh	r3, [r4, #12]
 800b470:	059b      	lsls	r3, r3, #22
 800b472:	d4dd      	bmi.n	800b430 <_fflush_r+0xc>
 800b474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b476:	f7fd fb0b 	bl	8008a90 <__retarget_lock_release_recursive>
 800b47a:	e7d9      	b.n	800b430 <_fflush_r+0xc>
 800b47c:	4b05      	ldr	r3, [pc, #20]	; (800b494 <_fflush_r+0x70>)
 800b47e:	429c      	cmp	r4, r3
 800b480:	d101      	bne.n	800b486 <_fflush_r+0x62>
 800b482:	68ac      	ldr	r4, [r5, #8]
 800b484:	e7df      	b.n	800b446 <_fflush_r+0x22>
 800b486:	4b04      	ldr	r3, [pc, #16]	; (800b498 <_fflush_r+0x74>)
 800b488:	429c      	cmp	r4, r3
 800b48a:	bf08      	it	eq
 800b48c:	68ec      	ldreq	r4, [r5, #12]
 800b48e:	e7da      	b.n	800b446 <_fflush_r+0x22>
 800b490:	0800f6fc 	.word	0x0800f6fc
 800b494:	0800f71c 	.word	0x0800f71c
 800b498:	0800f6dc 	.word	0x0800f6dc

0800b49c <rshift>:
 800b49c:	6903      	ldr	r3, [r0, #16]
 800b49e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b4a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b4aa:	f100 0414 	add.w	r4, r0, #20
 800b4ae:	dd45      	ble.n	800b53c <rshift+0xa0>
 800b4b0:	f011 011f 	ands.w	r1, r1, #31
 800b4b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b4b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b4bc:	d10c      	bne.n	800b4d8 <rshift+0x3c>
 800b4be:	f100 0710 	add.w	r7, r0, #16
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	42b1      	cmp	r1, r6
 800b4c6:	d334      	bcc.n	800b532 <rshift+0x96>
 800b4c8:	1a9b      	subs	r3, r3, r2
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	1eea      	subs	r2, r5, #3
 800b4ce:	4296      	cmp	r6, r2
 800b4d0:	bf38      	it	cc
 800b4d2:	2300      	movcc	r3, #0
 800b4d4:	4423      	add	r3, r4
 800b4d6:	e015      	b.n	800b504 <rshift+0x68>
 800b4d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b4dc:	f1c1 0820 	rsb	r8, r1, #32
 800b4e0:	40cf      	lsrs	r7, r1
 800b4e2:	f105 0e04 	add.w	lr, r5, #4
 800b4e6:	46a1      	mov	r9, r4
 800b4e8:	4576      	cmp	r6, lr
 800b4ea:	46f4      	mov	ip, lr
 800b4ec:	d815      	bhi.n	800b51a <rshift+0x7e>
 800b4ee:	1a9b      	subs	r3, r3, r2
 800b4f0:	009a      	lsls	r2, r3, #2
 800b4f2:	3a04      	subs	r2, #4
 800b4f4:	3501      	adds	r5, #1
 800b4f6:	42ae      	cmp	r6, r5
 800b4f8:	bf38      	it	cc
 800b4fa:	2200      	movcc	r2, #0
 800b4fc:	18a3      	adds	r3, r4, r2
 800b4fe:	50a7      	str	r7, [r4, r2]
 800b500:	b107      	cbz	r7, 800b504 <rshift+0x68>
 800b502:	3304      	adds	r3, #4
 800b504:	1b1a      	subs	r2, r3, r4
 800b506:	42a3      	cmp	r3, r4
 800b508:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b50c:	bf08      	it	eq
 800b50e:	2300      	moveq	r3, #0
 800b510:	6102      	str	r2, [r0, #16]
 800b512:	bf08      	it	eq
 800b514:	6143      	streq	r3, [r0, #20]
 800b516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b51a:	f8dc c000 	ldr.w	ip, [ip]
 800b51e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b522:	ea4c 0707 	orr.w	r7, ip, r7
 800b526:	f849 7b04 	str.w	r7, [r9], #4
 800b52a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b52e:	40cf      	lsrs	r7, r1
 800b530:	e7da      	b.n	800b4e8 <rshift+0x4c>
 800b532:	f851 cb04 	ldr.w	ip, [r1], #4
 800b536:	f847 cf04 	str.w	ip, [r7, #4]!
 800b53a:	e7c3      	b.n	800b4c4 <rshift+0x28>
 800b53c:	4623      	mov	r3, r4
 800b53e:	e7e1      	b.n	800b504 <rshift+0x68>

0800b540 <__hexdig_fun>:
 800b540:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b544:	2b09      	cmp	r3, #9
 800b546:	d802      	bhi.n	800b54e <__hexdig_fun+0xe>
 800b548:	3820      	subs	r0, #32
 800b54a:	b2c0      	uxtb	r0, r0
 800b54c:	4770      	bx	lr
 800b54e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b552:	2b05      	cmp	r3, #5
 800b554:	d801      	bhi.n	800b55a <__hexdig_fun+0x1a>
 800b556:	3847      	subs	r0, #71	; 0x47
 800b558:	e7f7      	b.n	800b54a <__hexdig_fun+0xa>
 800b55a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b55e:	2b05      	cmp	r3, #5
 800b560:	d801      	bhi.n	800b566 <__hexdig_fun+0x26>
 800b562:	3827      	subs	r0, #39	; 0x27
 800b564:	e7f1      	b.n	800b54a <__hexdig_fun+0xa>
 800b566:	2000      	movs	r0, #0
 800b568:	4770      	bx	lr
	...

0800b56c <__gethex>:
 800b56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b570:	ed2d 8b02 	vpush	{d8}
 800b574:	b089      	sub	sp, #36	; 0x24
 800b576:	ee08 0a10 	vmov	s16, r0
 800b57a:	9304      	str	r3, [sp, #16]
 800b57c:	4bbc      	ldr	r3, [pc, #752]	; (800b870 <__gethex+0x304>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	9301      	str	r3, [sp, #4]
 800b582:	4618      	mov	r0, r3
 800b584:	468b      	mov	fp, r1
 800b586:	4690      	mov	r8, r2
 800b588:	f7f4 fe4c 	bl	8000224 <strlen>
 800b58c:	9b01      	ldr	r3, [sp, #4]
 800b58e:	f8db 2000 	ldr.w	r2, [fp]
 800b592:	4403      	add	r3, r0
 800b594:	4682      	mov	sl, r0
 800b596:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b59a:	9305      	str	r3, [sp, #20]
 800b59c:	1c93      	adds	r3, r2, #2
 800b59e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b5a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b5a6:	32fe      	adds	r2, #254	; 0xfe
 800b5a8:	18d1      	adds	r1, r2, r3
 800b5aa:	461f      	mov	r7, r3
 800b5ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b5b0:	9100      	str	r1, [sp, #0]
 800b5b2:	2830      	cmp	r0, #48	; 0x30
 800b5b4:	d0f8      	beq.n	800b5a8 <__gethex+0x3c>
 800b5b6:	f7ff ffc3 	bl	800b540 <__hexdig_fun>
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	d13a      	bne.n	800b636 <__gethex+0xca>
 800b5c0:	9901      	ldr	r1, [sp, #4]
 800b5c2:	4652      	mov	r2, sl
 800b5c4:	4638      	mov	r0, r7
 800b5c6:	f001 fa07 	bl	800c9d8 <strncmp>
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	d168      	bne.n	800b6a2 <__gethex+0x136>
 800b5d0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b5d4:	eb07 060a 	add.w	r6, r7, sl
 800b5d8:	f7ff ffb2 	bl	800b540 <__hexdig_fun>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	d062      	beq.n	800b6a6 <__gethex+0x13a>
 800b5e0:	4633      	mov	r3, r6
 800b5e2:	7818      	ldrb	r0, [r3, #0]
 800b5e4:	2830      	cmp	r0, #48	; 0x30
 800b5e6:	461f      	mov	r7, r3
 800b5e8:	f103 0301 	add.w	r3, r3, #1
 800b5ec:	d0f9      	beq.n	800b5e2 <__gethex+0x76>
 800b5ee:	f7ff ffa7 	bl	800b540 <__hexdig_fun>
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	fab0 f480 	clz	r4, r0
 800b5f8:	0964      	lsrs	r4, r4, #5
 800b5fa:	4635      	mov	r5, r6
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	463a      	mov	r2, r7
 800b600:	4616      	mov	r6, r2
 800b602:	3201      	adds	r2, #1
 800b604:	7830      	ldrb	r0, [r6, #0]
 800b606:	f7ff ff9b 	bl	800b540 <__hexdig_fun>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	d1f8      	bne.n	800b600 <__gethex+0x94>
 800b60e:	9901      	ldr	r1, [sp, #4]
 800b610:	4652      	mov	r2, sl
 800b612:	4630      	mov	r0, r6
 800b614:	f001 f9e0 	bl	800c9d8 <strncmp>
 800b618:	b980      	cbnz	r0, 800b63c <__gethex+0xd0>
 800b61a:	b94d      	cbnz	r5, 800b630 <__gethex+0xc4>
 800b61c:	eb06 050a 	add.w	r5, r6, sl
 800b620:	462a      	mov	r2, r5
 800b622:	4616      	mov	r6, r2
 800b624:	3201      	adds	r2, #1
 800b626:	7830      	ldrb	r0, [r6, #0]
 800b628:	f7ff ff8a 	bl	800b540 <__hexdig_fun>
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d1f8      	bne.n	800b622 <__gethex+0xb6>
 800b630:	1bad      	subs	r5, r5, r6
 800b632:	00ad      	lsls	r5, r5, #2
 800b634:	e004      	b.n	800b640 <__gethex+0xd4>
 800b636:	2400      	movs	r4, #0
 800b638:	4625      	mov	r5, r4
 800b63a:	e7e0      	b.n	800b5fe <__gethex+0x92>
 800b63c:	2d00      	cmp	r5, #0
 800b63e:	d1f7      	bne.n	800b630 <__gethex+0xc4>
 800b640:	7833      	ldrb	r3, [r6, #0]
 800b642:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b646:	2b50      	cmp	r3, #80	; 0x50
 800b648:	d13b      	bne.n	800b6c2 <__gethex+0x156>
 800b64a:	7873      	ldrb	r3, [r6, #1]
 800b64c:	2b2b      	cmp	r3, #43	; 0x2b
 800b64e:	d02c      	beq.n	800b6aa <__gethex+0x13e>
 800b650:	2b2d      	cmp	r3, #45	; 0x2d
 800b652:	d02e      	beq.n	800b6b2 <__gethex+0x146>
 800b654:	1c71      	adds	r1, r6, #1
 800b656:	f04f 0900 	mov.w	r9, #0
 800b65a:	7808      	ldrb	r0, [r1, #0]
 800b65c:	f7ff ff70 	bl	800b540 <__hexdig_fun>
 800b660:	1e43      	subs	r3, r0, #1
 800b662:	b2db      	uxtb	r3, r3
 800b664:	2b18      	cmp	r3, #24
 800b666:	d82c      	bhi.n	800b6c2 <__gethex+0x156>
 800b668:	f1a0 0210 	sub.w	r2, r0, #16
 800b66c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b670:	f7ff ff66 	bl	800b540 <__hexdig_fun>
 800b674:	1e43      	subs	r3, r0, #1
 800b676:	b2db      	uxtb	r3, r3
 800b678:	2b18      	cmp	r3, #24
 800b67a:	d91d      	bls.n	800b6b8 <__gethex+0x14c>
 800b67c:	f1b9 0f00 	cmp.w	r9, #0
 800b680:	d000      	beq.n	800b684 <__gethex+0x118>
 800b682:	4252      	negs	r2, r2
 800b684:	4415      	add	r5, r2
 800b686:	f8cb 1000 	str.w	r1, [fp]
 800b68a:	b1e4      	cbz	r4, 800b6c6 <__gethex+0x15a>
 800b68c:	9b00      	ldr	r3, [sp, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	bf14      	ite	ne
 800b692:	2700      	movne	r7, #0
 800b694:	2706      	moveq	r7, #6
 800b696:	4638      	mov	r0, r7
 800b698:	b009      	add	sp, #36	; 0x24
 800b69a:	ecbd 8b02 	vpop	{d8}
 800b69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a2:	463e      	mov	r6, r7
 800b6a4:	4625      	mov	r5, r4
 800b6a6:	2401      	movs	r4, #1
 800b6a8:	e7ca      	b.n	800b640 <__gethex+0xd4>
 800b6aa:	f04f 0900 	mov.w	r9, #0
 800b6ae:	1cb1      	adds	r1, r6, #2
 800b6b0:	e7d3      	b.n	800b65a <__gethex+0xee>
 800b6b2:	f04f 0901 	mov.w	r9, #1
 800b6b6:	e7fa      	b.n	800b6ae <__gethex+0x142>
 800b6b8:	230a      	movs	r3, #10
 800b6ba:	fb03 0202 	mla	r2, r3, r2, r0
 800b6be:	3a10      	subs	r2, #16
 800b6c0:	e7d4      	b.n	800b66c <__gethex+0x100>
 800b6c2:	4631      	mov	r1, r6
 800b6c4:	e7df      	b.n	800b686 <__gethex+0x11a>
 800b6c6:	1bf3      	subs	r3, r6, r7
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	4621      	mov	r1, r4
 800b6cc:	2b07      	cmp	r3, #7
 800b6ce:	dc0b      	bgt.n	800b6e8 <__gethex+0x17c>
 800b6d0:	ee18 0a10 	vmov	r0, s16
 800b6d4:	f000 faf2 	bl	800bcbc <_Balloc>
 800b6d8:	4604      	mov	r4, r0
 800b6da:	b940      	cbnz	r0, 800b6ee <__gethex+0x182>
 800b6dc:	4b65      	ldr	r3, [pc, #404]	; (800b874 <__gethex+0x308>)
 800b6de:	4602      	mov	r2, r0
 800b6e0:	21de      	movs	r1, #222	; 0xde
 800b6e2:	4865      	ldr	r0, [pc, #404]	; (800b878 <__gethex+0x30c>)
 800b6e4:	f001 f998 	bl	800ca18 <__assert_func>
 800b6e8:	3101      	adds	r1, #1
 800b6ea:	105b      	asrs	r3, r3, #1
 800b6ec:	e7ee      	b.n	800b6cc <__gethex+0x160>
 800b6ee:	f100 0914 	add.w	r9, r0, #20
 800b6f2:	f04f 0b00 	mov.w	fp, #0
 800b6f6:	f1ca 0301 	rsb	r3, sl, #1
 800b6fa:	f8cd 9008 	str.w	r9, [sp, #8]
 800b6fe:	f8cd b000 	str.w	fp, [sp]
 800b702:	9306      	str	r3, [sp, #24]
 800b704:	42b7      	cmp	r7, r6
 800b706:	d340      	bcc.n	800b78a <__gethex+0x21e>
 800b708:	9802      	ldr	r0, [sp, #8]
 800b70a:	9b00      	ldr	r3, [sp, #0]
 800b70c:	f840 3b04 	str.w	r3, [r0], #4
 800b710:	eba0 0009 	sub.w	r0, r0, r9
 800b714:	1080      	asrs	r0, r0, #2
 800b716:	0146      	lsls	r6, r0, #5
 800b718:	6120      	str	r0, [r4, #16]
 800b71a:	4618      	mov	r0, r3
 800b71c:	f000 fbc4 	bl	800bea8 <__hi0bits>
 800b720:	1a30      	subs	r0, r6, r0
 800b722:	f8d8 6000 	ldr.w	r6, [r8]
 800b726:	42b0      	cmp	r0, r6
 800b728:	dd63      	ble.n	800b7f2 <__gethex+0x286>
 800b72a:	1b87      	subs	r7, r0, r6
 800b72c:	4639      	mov	r1, r7
 800b72e:	4620      	mov	r0, r4
 800b730:	f000 ff5e 	bl	800c5f0 <__any_on>
 800b734:	4682      	mov	sl, r0
 800b736:	b1a8      	cbz	r0, 800b764 <__gethex+0x1f8>
 800b738:	1e7b      	subs	r3, r7, #1
 800b73a:	1159      	asrs	r1, r3, #5
 800b73c:	f003 021f 	and.w	r2, r3, #31
 800b740:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b744:	f04f 0a01 	mov.w	sl, #1
 800b748:	fa0a f202 	lsl.w	r2, sl, r2
 800b74c:	420a      	tst	r2, r1
 800b74e:	d009      	beq.n	800b764 <__gethex+0x1f8>
 800b750:	4553      	cmp	r3, sl
 800b752:	dd05      	ble.n	800b760 <__gethex+0x1f4>
 800b754:	1eb9      	subs	r1, r7, #2
 800b756:	4620      	mov	r0, r4
 800b758:	f000 ff4a 	bl	800c5f0 <__any_on>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	d145      	bne.n	800b7ec <__gethex+0x280>
 800b760:	f04f 0a02 	mov.w	sl, #2
 800b764:	4639      	mov	r1, r7
 800b766:	4620      	mov	r0, r4
 800b768:	f7ff fe98 	bl	800b49c <rshift>
 800b76c:	443d      	add	r5, r7
 800b76e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b772:	42ab      	cmp	r3, r5
 800b774:	da4c      	bge.n	800b810 <__gethex+0x2a4>
 800b776:	ee18 0a10 	vmov	r0, s16
 800b77a:	4621      	mov	r1, r4
 800b77c:	f000 fade 	bl	800bd3c <_Bfree>
 800b780:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b782:	2300      	movs	r3, #0
 800b784:	6013      	str	r3, [r2, #0]
 800b786:	27a3      	movs	r7, #163	; 0xa3
 800b788:	e785      	b.n	800b696 <__gethex+0x12a>
 800b78a:	1e73      	subs	r3, r6, #1
 800b78c:	9a05      	ldr	r2, [sp, #20]
 800b78e:	9303      	str	r3, [sp, #12]
 800b790:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b794:	4293      	cmp	r3, r2
 800b796:	d019      	beq.n	800b7cc <__gethex+0x260>
 800b798:	f1bb 0f20 	cmp.w	fp, #32
 800b79c:	d107      	bne.n	800b7ae <__gethex+0x242>
 800b79e:	9b02      	ldr	r3, [sp, #8]
 800b7a0:	9a00      	ldr	r2, [sp, #0]
 800b7a2:	f843 2b04 	str.w	r2, [r3], #4
 800b7a6:	9302      	str	r3, [sp, #8]
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	469b      	mov	fp, r3
 800b7ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b7b2:	f7ff fec5 	bl	800b540 <__hexdig_fun>
 800b7b6:	9b00      	ldr	r3, [sp, #0]
 800b7b8:	f000 000f 	and.w	r0, r0, #15
 800b7bc:	fa00 f00b 	lsl.w	r0, r0, fp
 800b7c0:	4303      	orrs	r3, r0
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	f10b 0b04 	add.w	fp, fp, #4
 800b7c8:	9b03      	ldr	r3, [sp, #12]
 800b7ca:	e00d      	b.n	800b7e8 <__gethex+0x27c>
 800b7cc:	9b03      	ldr	r3, [sp, #12]
 800b7ce:	9a06      	ldr	r2, [sp, #24]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	42bb      	cmp	r3, r7
 800b7d4:	d3e0      	bcc.n	800b798 <__gethex+0x22c>
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	9901      	ldr	r1, [sp, #4]
 800b7da:	9307      	str	r3, [sp, #28]
 800b7dc:	4652      	mov	r2, sl
 800b7de:	f001 f8fb 	bl	800c9d8 <strncmp>
 800b7e2:	9b07      	ldr	r3, [sp, #28]
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	d1d7      	bne.n	800b798 <__gethex+0x22c>
 800b7e8:	461e      	mov	r6, r3
 800b7ea:	e78b      	b.n	800b704 <__gethex+0x198>
 800b7ec:	f04f 0a03 	mov.w	sl, #3
 800b7f0:	e7b8      	b.n	800b764 <__gethex+0x1f8>
 800b7f2:	da0a      	bge.n	800b80a <__gethex+0x29e>
 800b7f4:	1a37      	subs	r7, r6, r0
 800b7f6:	4621      	mov	r1, r4
 800b7f8:	ee18 0a10 	vmov	r0, s16
 800b7fc:	463a      	mov	r2, r7
 800b7fe:	f000 fcb9 	bl	800c174 <__lshift>
 800b802:	1bed      	subs	r5, r5, r7
 800b804:	4604      	mov	r4, r0
 800b806:	f100 0914 	add.w	r9, r0, #20
 800b80a:	f04f 0a00 	mov.w	sl, #0
 800b80e:	e7ae      	b.n	800b76e <__gethex+0x202>
 800b810:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b814:	42a8      	cmp	r0, r5
 800b816:	dd72      	ble.n	800b8fe <__gethex+0x392>
 800b818:	1b45      	subs	r5, r0, r5
 800b81a:	42ae      	cmp	r6, r5
 800b81c:	dc36      	bgt.n	800b88c <__gethex+0x320>
 800b81e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b822:	2b02      	cmp	r3, #2
 800b824:	d02a      	beq.n	800b87c <__gethex+0x310>
 800b826:	2b03      	cmp	r3, #3
 800b828:	d02c      	beq.n	800b884 <__gethex+0x318>
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d115      	bne.n	800b85a <__gethex+0x2ee>
 800b82e:	42ae      	cmp	r6, r5
 800b830:	d113      	bne.n	800b85a <__gethex+0x2ee>
 800b832:	2e01      	cmp	r6, #1
 800b834:	d10b      	bne.n	800b84e <__gethex+0x2e2>
 800b836:	9a04      	ldr	r2, [sp, #16]
 800b838:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b83c:	6013      	str	r3, [r2, #0]
 800b83e:	2301      	movs	r3, #1
 800b840:	6123      	str	r3, [r4, #16]
 800b842:	f8c9 3000 	str.w	r3, [r9]
 800b846:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b848:	2762      	movs	r7, #98	; 0x62
 800b84a:	601c      	str	r4, [r3, #0]
 800b84c:	e723      	b.n	800b696 <__gethex+0x12a>
 800b84e:	1e71      	subs	r1, r6, #1
 800b850:	4620      	mov	r0, r4
 800b852:	f000 fecd 	bl	800c5f0 <__any_on>
 800b856:	2800      	cmp	r0, #0
 800b858:	d1ed      	bne.n	800b836 <__gethex+0x2ca>
 800b85a:	ee18 0a10 	vmov	r0, s16
 800b85e:	4621      	mov	r1, r4
 800b860:	f000 fa6c 	bl	800bd3c <_Bfree>
 800b864:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b866:	2300      	movs	r3, #0
 800b868:	6013      	str	r3, [r2, #0]
 800b86a:	2750      	movs	r7, #80	; 0x50
 800b86c:	e713      	b.n	800b696 <__gethex+0x12a>
 800b86e:	bf00      	nop
 800b870:	0800f9c8 	.word	0x0800f9c8
 800b874:	0800f94c 	.word	0x0800f94c
 800b878:	0800f95d 	.word	0x0800f95d
 800b87c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d1eb      	bne.n	800b85a <__gethex+0x2ee>
 800b882:	e7d8      	b.n	800b836 <__gethex+0x2ca>
 800b884:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1d5      	bne.n	800b836 <__gethex+0x2ca>
 800b88a:	e7e6      	b.n	800b85a <__gethex+0x2ee>
 800b88c:	1e6f      	subs	r7, r5, #1
 800b88e:	f1ba 0f00 	cmp.w	sl, #0
 800b892:	d131      	bne.n	800b8f8 <__gethex+0x38c>
 800b894:	b127      	cbz	r7, 800b8a0 <__gethex+0x334>
 800b896:	4639      	mov	r1, r7
 800b898:	4620      	mov	r0, r4
 800b89a:	f000 fea9 	bl	800c5f0 <__any_on>
 800b89e:	4682      	mov	sl, r0
 800b8a0:	117b      	asrs	r3, r7, #5
 800b8a2:	2101      	movs	r1, #1
 800b8a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b8a8:	f007 071f 	and.w	r7, r7, #31
 800b8ac:	fa01 f707 	lsl.w	r7, r1, r7
 800b8b0:	421f      	tst	r7, r3
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	bf18      	it	ne
 800b8b8:	f04a 0a02 	orrne.w	sl, sl, #2
 800b8bc:	1b76      	subs	r6, r6, r5
 800b8be:	f7ff fded 	bl	800b49c <rshift>
 800b8c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b8c6:	2702      	movs	r7, #2
 800b8c8:	f1ba 0f00 	cmp.w	sl, #0
 800b8cc:	d048      	beq.n	800b960 <__gethex+0x3f4>
 800b8ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	d015      	beq.n	800b902 <__gethex+0x396>
 800b8d6:	2b03      	cmp	r3, #3
 800b8d8:	d017      	beq.n	800b90a <__gethex+0x39e>
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d109      	bne.n	800b8f2 <__gethex+0x386>
 800b8de:	f01a 0f02 	tst.w	sl, #2
 800b8e2:	d006      	beq.n	800b8f2 <__gethex+0x386>
 800b8e4:	f8d9 0000 	ldr.w	r0, [r9]
 800b8e8:	ea4a 0a00 	orr.w	sl, sl, r0
 800b8ec:	f01a 0f01 	tst.w	sl, #1
 800b8f0:	d10e      	bne.n	800b910 <__gethex+0x3a4>
 800b8f2:	f047 0710 	orr.w	r7, r7, #16
 800b8f6:	e033      	b.n	800b960 <__gethex+0x3f4>
 800b8f8:	f04f 0a01 	mov.w	sl, #1
 800b8fc:	e7d0      	b.n	800b8a0 <__gethex+0x334>
 800b8fe:	2701      	movs	r7, #1
 800b900:	e7e2      	b.n	800b8c8 <__gethex+0x35c>
 800b902:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b904:	f1c3 0301 	rsb	r3, r3, #1
 800b908:	9315      	str	r3, [sp, #84]	; 0x54
 800b90a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d0f0      	beq.n	800b8f2 <__gethex+0x386>
 800b910:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b914:	f104 0314 	add.w	r3, r4, #20
 800b918:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b91c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b920:	f04f 0c00 	mov.w	ip, #0
 800b924:	4618      	mov	r0, r3
 800b926:	f853 2b04 	ldr.w	r2, [r3], #4
 800b92a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b92e:	d01c      	beq.n	800b96a <__gethex+0x3fe>
 800b930:	3201      	adds	r2, #1
 800b932:	6002      	str	r2, [r0, #0]
 800b934:	2f02      	cmp	r7, #2
 800b936:	f104 0314 	add.w	r3, r4, #20
 800b93a:	d13f      	bne.n	800b9bc <__gethex+0x450>
 800b93c:	f8d8 2000 	ldr.w	r2, [r8]
 800b940:	3a01      	subs	r2, #1
 800b942:	42b2      	cmp	r2, r6
 800b944:	d10a      	bne.n	800b95c <__gethex+0x3f0>
 800b946:	1171      	asrs	r1, r6, #5
 800b948:	2201      	movs	r2, #1
 800b94a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b94e:	f006 061f 	and.w	r6, r6, #31
 800b952:	fa02 f606 	lsl.w	r6, r2, r6
 800b956:	421e      	tst	r6, r3
 800b958:	bf18      	it	ne
 800b95a:	4617      	movne	r7, r2
 800b95c:	f047 0720 	orr.w	r7, r7, #32
 800b960:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b962:	601c      	str	r4, [r3, #0]
 800b964:	9b04      	ldr	r3, [sp, #16]
 800b966:	601d      	str	r5, [r3, #0]
 800b968:	e695      	b.n	800b696 <__gethex+0x12a>
 800b96a:	4299      	cmp	r1, r3
 800b96c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b970:	d8d8      	bhi.n	800b924 <__gethex+0x3b8>
 800b972:	68a3      	ldr	r3, [r4, #8]
 800b974:	459b      	cmp	fp, r3
 800b976:	db19      	blt.n	800b9ac <__gethex+0x440>
 800b978:	6861      	ldr	r1, [r4, #4]
 800b97a:	ee18 0a10 	vmov	r0, s16
 800b97e:	3101      	adds	r1, #1
 800b980:	f000 f99c 	bl	800bcbc <_Balloc>
 800b984:	4681      	mov	r9, r0
 800b986:	b918      	cbnz	r0, 800b990 <__gethex+0x424>
 800b988:	4b1a      	ldr	r3, [pc, #104]	; (800b9f4 <__gethex+0x488>)
 800b98a:	4602      	mov	r2, r0
 800b98c:	2184      	movs	r1, #132	; 0x84
 800b98e:	e6a8      	b.n	800b6e2 <__gethex+0x176>
 800b990:	6922      	ldr	r2, [r4, #16]
 800b992:	3202      	adds	r2, #2
 800b994:	f104 010c 	add.w	r1, r4, #12
 800b998:	0092      	lsls	r2, r2, #2
 800b99a:	300c      	adds	r0, #12
 800b99c:	f7fd f879 	bl	8008a92 <memcpy>
 800b9a0:	4621      	mov	r1, r4
 800b9a2:	ee18 0a10 	vmov	r0, s16
 800b9a6:	f000 f9c9 	bl	800bd3c <_Bfree>
 800b9aa:	464c      	mov	r4, r9
 800b9ac:	6923      	ldr	r3, [r4, #16]
 800b9ae:	1c5a      	adds	r2, r3, #1
 800b9b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9b4:	6122      	str	r2, [r4, #16]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	615a      	str	r2, [r3, #20]
 800b9ba:	e7bb      	b.n	800b934 <__gethex+0x3c8>
 800b9bc:	6922      	ldr	r2, [r4, #16]
 800b9be:	455a      	cmp	r2, fp
 800b9c0:	dd0b      	ble.n	800b9da <__gethex+0x46e>
 800b9c2:	2101      	movs	r1, #1
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	f7ff fd69 	bl	800b49c <rshift>
 800b9ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b9ce:	3501      	adds	r5, #1
 800b9d0:	42ab      	cmp	r3, r5
 800b9d2:	f6ff aed0 	blt.w	800b776 <__gethex+0x20a>
 800b9d6:	2701      	movs	r7, #1
 800b9d8:	e7c0      	b.n	800b95c <__gethex+0x3f0>
 800b9da:	f016 061f 	ands.w	r6, r6, #31
 800b9de:	d0fa      	beq.n	800b9d6 <__gethex+0x46a>
 800b9e0:	449a      	add	sl, r3
 800b9e2:	f1c6 0620 	rsb	r6, r6, #32
 800b9e6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b9ea:	f000 fa5d 	bl	800bea8 <__hi0bits>
 800b9ee:	42b0      	cmp	r0, r6
 800b9f0:	dbe7      	blt.n	800b9c2 <__gethex+0x456>
 800b9f2:	e7f0      	b.n	800b9d6 <__gethex+0x46a>
 800b9f4:	0800f94c 	.word	0x0800f94c

0800b9f8 <L_shift>:
 800b9f8:	f1c2 0208 	rsb	r2, r2, #8
 800b9fc:	0092      	lsls	r2, r2, #2
 800b9fe:	b570      	push	{r4, r5, r6, lr}
 800ba00:	f1c2 0620 	rsb	r6, r2, #32
 800ba04:	6843      	ldr	r3, [r0, #4]
 800ba06:	6804      	ldr	r4, [r0, #0]
 800ba08:	fa03 f506 	lsl.w	r5, r3, r6
 800ba0c:	432c      	orrs	r4, r5
 800ba0e:	40d3      	lsrs	r3, r2
 800ba10:	6004      	str	r4, [r0, #0]
 800ba12:	f840 3f04 	str.w	r3, [r0, #4]!
 800ba16:	4288      	cmp	r0, r1
 800ba18:	d3f4      	bcc.n	800ba04 <L_shift+0xc>
 800ba1a:	bd70      	pop	{r4, r5, r6, pc}

0800ba1c <__match>:
 800ba1c:	b530      	push	{r4, r5, lr}
 800ba1e:	6803      	ldr	r3, [r0, #0]
 800ba20:	3301      	adds	r3, #1
 800ba22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba26:	b914      	cbnz	r4, 800ba2e <__match+0x12>
 800ba28:	6003      	str	r3, [r0, #0]
 800ba2a:	2001      	movs	r0, #1
 800ba2c:	bd30      	pop	{r4, r5, pc}
 800ba2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ba36:	2d19      	cmp	r5, #25
 800ba38:	bf98      	it	ls
 800ba3a:	3220      	addls	r2, #32
 800ba3c:	42a2      	cmp	r2, r4
 800ba3e:	d0f0      	beq.n	800ba22 <__match+0x6>
 800ba40:	2000      	movs	r0, #0
 800ba42:	e7f3      	b.n	800ba2c <__match+0x10>

0800ba44 <__hexnan>:
 800ba44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba48:	680b      	ldr	r3, [r1, #0]
 800ba4a:	6801      	ldr	r1, [r0, #0]
 800ba4c:	115e      	asrs	r6, r3, #5
 800ba4e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ba52:	f013 031f 	ands.w	r3, r3, #31
 800ba56:	b087      	sub	sp, #28
 800ba58:	bf18      	it	ne
 800ba5a:	3604      	addne	r6, #4
 800ba5c:	2500      	movs	r5, #0
 800ba5e:	1f37      	subs	r7, r6, #4
 800ba60:	4682      	mov	sl, r0
 800ba62:	4690      	mov	r8, r2
 800ba64:	9301      	str	r3, [sp, #4]
 800ba66:	f846 5c04 	str.w	r5, [r6, #-4]
 800ba6a:	46b9      	mov	r9, r7
 800ba6c:	463c      	mov	r4, r7
 800ba6e:	9502      	str	r5, [sp, #8]
 800ba70:	46ab      	mov	fp, r5
 800ba72:	784a      	ldrb	r2, [r1, #1]
 800ba74:	1c4b      	adds	r3, r1, #1
 800ba76:	9303      	str	r3, [sp, #12]
 800ba78:	b342      	cbz	r2, 800bacc <__hexnan+0x88>
 800ba7a:	4610      	mov	r0, r2
 800ba7c:	9105      	str	r1, [sp, #20]
 800ba7e:	9204      	str	r2, [sp, #16]
 800ba80:	f7ff fd5e 	bl	800b540 <__hexdig_fun>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	d14f      	bne.n	800bb28 <__hexnan+0xe4>
 800ba88:	9a04      	ldr	r2, [sp, #16]
 800ba8a:	9905      	ldr	r1, [sp, #20]
 800ba8c:	2a20      	cmp	r2, #32
 800ba8e:	d818      	bhi.n	800bac2 <__hexnan+0x7e>
 800ba90:	9b02      	ldr	r3, [sp, #8]
 800ba92:	459b      	cmp	fp, r3
 800ba94:	dd13      	ble.n	800babe <__hexnan+0x7a>
 800ba96:	454c      	cmp	r4, r9
 800ba98:	d206      	bcs.n	800baa8 <__hexnan+0x64>
 800ba9a:	2d07      	cmp	r5, #7
 800ba9c:	dc04      	bgt.n	800baa8 <__hexnan+0x64>
 800ba9e:	462a      	mov	r2, r5
 800baa0:	4649      	mov	r1, r9
 800baa2:	4620      	mov	r0, r4
 800baa4:	f7ff ffa8 	bl	800b9f8 <L_shift>
 800baa8:	4544      	cmp	r4, r8
 800baaa:	d950      	bls.n	800bb4e <__hexnan+0x10a>
 800baac:	2300      	movs	r3, #0
 800baae:	f1a4 0904 	sub.w	r9, r4, #4
 800bab2:	f844 3c04 	str.w	r3, [r4, #-4]
 800bab6:	f8cd b008 	str.w	fp, [sp, #8]
 800baba:	464c      	mov	r4, r9
 800babc:	461d      	mov	r5, r3
 800babe:	9903      	ldr	r1, [sp, #12]
 800bac0:	e7d7      	b.n	800ba72 <__hexnan+0x2e>
 800bac2:	2a29      	cmp	r2, #41	; 0x29
 800bac4:	d156      	bne.n	800bb74 <__hexnan+0x130>
 800bac6:	3102      	adds	r1, #2
 800bac8:	f8ca 1000 	str.w	r1, [sl]
 800bacc:	f1bb 0f00 	cmp.w	fp, #0
 800bad0:	d050      	beq.n	800bb74 <__hexnan+0x130>
 800bad2:	454c      	cmp	r4, r9
 800bad4:	d206      	bcs.n	800bae4 <__hexnan+0xa0>
 800bad6:	2d07      	cmp	r5, #7
 800bad8:	dc04      	bgt.n	800bae4 <__hexnan+0xa0>
 800bada:	462a      	mov	r2, r5
 800badc:	4649      	mov	r1, r9
 800bade:	4620      	mov	r0, r4
 800bae0:	f7ff ff8a 	bl	800b9f8 <L_shift>
 800bae4:	4544      	cmp	r4, r8
 800bae6:	d934      	bls.n	800bb52 <__hexnan+0x10e>
 800bae8:	f1a8 0204 	sub.w	r2, r8, #4
 800baec:	4623      	mov	r3, r4
 800baee:	f853 1b04 	ldr.w	r1, [r3], #4
 800baf2:	f842 1f04 	str.w	r1, [r2, #4]!
 800baf6:	429f      	cmp	r7, r3
 800baf8:	d2f9      	bcs.n	800baee <__hexnan+0xaa>
 800bafa:	1b3b      	subs	r3, r7, r4
 800bafc:	f023 0303 	bic.w	r3, r3, #3
 800bb00:	3304      	adds	r3, #4
 800bb02:	3401      	adds	r4, #1
 800bb04:	3e03      	subs	r6, #3
 800bb06:	42b4      	cmp	r4, r6
 800bb08:	bf88      	it	hi
 800bb0a:	2304      	movhi	r3, #4
 800bb0c:	4443      	add	r3, r8
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f843 2b04 	str.w	r2, [r3], #4
 800bb14:	429f      	cmp	r7, r3
 800bb16:	d2fb      	bcs.n	800bb10 <__hexnan+0xcc>
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	b91b      	cbnz	r3, 800bb24 <__hexnan+0xe0>
 800bb1c:	4547      	cmp	r7, r8
 800bb1e:	d127      	bne.n	800bb70 <__hexnan+0x12c>
 800bb20:	2301      	movs	r3, #1
 800bb22:	603b      	str	r3, [r7, #0]
 800bb24:	2005      	movs	r0, #5
 800bb26:	e026      	b.n	800bb76 <__hexnan+0x132>
 800bb28:	3501      	adds	r5, #1
 800bb2a:	2d08      	cmp	r5, #8
 800bb2c:	f10b 0b01 	add.w	fp, fp, #1
 800bb30:	dd06      	ble.n	800bb40 <__hexnan+0xfc>
 800bb32:	4544      	cmp	r4, r8
 800bb34:	d9c3      	bls.n	800babe <__hexnan+0x7a>
 800bb36:	2300      	movs	r3, #0
 800bb38:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb3c:	2501      	movs	r5, #1
 800bb3e:	3c04      	subs	r4, #4
 800bb40:	6822      	ldr	r2, [r4, #0]
 800bb42:	f000 000f 	and.w	r0, r0, #15
 800bb46:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bb4a:	6022      	str	r2, [r4, #0]
 800bb4c:	e7b7      	b.n	800babe <__hexnan+0x7a>
 800bb4e:	2508      	movs	r5, #8
 800bb50:	e7b5      	b.n	800babe <__hexnan+0x7a>
 800bb52:	9b01      	ldr	r3, [sp, #4]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d0df      	beq.n	800bb18 <__hexnan+0xd4>
 800bb58:	f04f 32ff 	mov.w	r2, #4294967295
 800bb5c:	f1c3 0320 	rsb	r3, r3, #32
 800bb60:	fa22 f303 	lsr.w	r3, r2, r3
 800bb64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bb68:	401a      	ands	r2, r3
 800bb6a:	f846 2c04 	str.w	r2, [r6, #-4]
 800bb6e:	e7d3      	b.n	800bb18 <__hexnan+0xd4>
 800bb70:	3f04      	subs	r7, #4
 800bb72:	e7d1      	b.n	800bb18 <__hexnan+0xd4>
 800bb74:	2004      	movs	r0, #4
 800bb76:	b007      	add	sp, #28
 800bb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb7c <_localeconv_r>:
 800bb7c:	4800      	ldr	r0, [pc, #0]	; (800bb80 <_localeconv_r+0x4>)
 800bb7e:	4770      	bx	lr
 800bb80:	200001a0 	.word	0x200001a0

0800bb84 <_lseek_r>:
 800bb84:	b538      	push	{r3, r4, r5, lr}
 800bb86:	4d07      	ldr	r5, [pc, #28]	; (800bba4 <_lseek_r+0x20>)
 800bb88:	4604      	mov	r4, r0
 800bb8a:	4608      	mov	r0, r1
 800bb8c:	4611      	mov	r1, r2
 800bb8e:	2200      	movs	r2, #0
 800bb90:	602a      	str	r2, [r5, #0]
 800bb92:	461a      	mov	r2, r3
 800bb94:	f7f7 f8f2 	bl	8002d7c <_lseek>
 800bb98:	1c43      	adds	r3, r0, #1
 800bb9a:	d102      	bne.n	800bba2 <_lseek_r+0x1e>
 800bb9c:	682b      	ldr	r3, [r5, #0]
 800bb9e:	b103      	cbz	r3, 800bba2 <_lseek_r+0x1e>
 800bba0:	6023      	str	r3, [r4, #0]
 800bba2:	bd38      	pop	{r3, r4, r5, pc}
 800bba4:	20004610 	.word	0x20004610

0800bba8 <__swhatbuf_r>:
 800bba8:	b570      	push	{r4, r5, r6, lr}
 800bbaa:	460e      	mov	r6, r1
 800bbac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbb0:	2900      	cmp	r1, #0
 800bbb2:	b096      	sub	sp, #88	; 0x58
 800bbb4:	4614      	mov	r4, r2
 800bbb6:	461d      	mov	r5, r3
 800bbb8:	da07      	bge.n	800bbca <__swhatbuf_r+0x22>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	602b      	str	r3, [r5, #0]
 800bbbe:	89b3      	ldrh	r3, [r6, #12]
 800bbc0:	061a      	lsls	r2, r3, #24
 800bbc2:	d410      	bmi.n	800bbe6 <__swhatbuf_r+0x3e>
 800bbc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbc8:	e00e      	b.n	800bbe8 <__swhatbuf_r+0x40>
 800bbca:	466a      	mov	r2, sp
 800bbcc:	f000 ff54 	bl	800ca78 <_fstat_r>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	dbf2      	blt.n	800bbba <__swhatbuf_r+0x12>
 800bbd4:	9a01      	ldr	r2, [sp, #4]
 800bbd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bbda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bbde:	425a      	negs	r2, r3
 800bbe0:	415a      	adcs	r2, r3
 800bbe2:	602a      	str	r2, [r5, #0]
 800bbe4:	e7ee      	b.n	800bbc4 <__swhatbuf_r+0x1c>
 800bbe6:	2340      	movs	r3, #64	; 0x40
 800bbe8:	2000      	movs	r0, #0
 800bbea:	6023      	str	r3, [r4, #0]
 800bbec:	b016      	add	sp, #88	; 0x58
 800bbee:	bd70      	pop	{r4, r5, r6, pc}

0800bbf0 <__smakebuf_r>:
 800bbf0:	898b      	ldrh	r3, [r1, #12]
 800bbf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bbf4:	079d      	lsls	r5, r3, #30
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	460c      	mov	r4, r1
 800bbfa:	d507      	bpl.n	800bc0c <__smakebuf_r+0x1c>
 800bbfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	6123      	str	r3, [r4, #16]
 800bc04:	2301      	movs	r3, #1
 800bc06:	6163      	str	r3, [r4, #20]
 800bc08:	b002      	add	sp, #8
 800bc0a:	bd70      	pop	{r4, r5, r6, pc}
 800bc0c:	ab01      	add	r3, sp, #4
 800bc0e:	466a      	mov	r2, sp
 800bc10:	f7ff ffca 	bl	800bba8 <__swhatbuf_r>
 800bc14:	9900      	ldr	r1, [sp, #0]
 800bc16:	4605      	mov	r5, r0
 800bc18:	4630      	mov	r0, r6
 800bc1a:	f7fc ff51 	bl	8008ac0 <_malloc_r>
 800bc1e:	b948      	cbnz	r0, 800bc34 <__smakebuf_r+0x44>
 800bc20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc24:	059a      	lsls	r2, r3, #22
 800bc26:	d4ef      	bmi.n	800bc08 <__smakebuf_r+0x18>
 800bc28:	f023 0303 	bic.w	r3, r3, #3
 800bc2c:	f043 0302 	orr.w	r3, r3, #2
 800bc30:	81a3      	strh	r3, [r4, #12]
 800bc32:	e7e3      	b.n	800bbfc <__smakebuf_r+0xc>
 800bc34:	4b0d      	ldr	r3, [pc, #52]	; (800bc6c <__smakebuf_r+0x7c>)
 800bc36:	62b3      	str	r3, [r6, #40]	; 0x28
 800bc38:	89a3      	ldrh	r3, [r4, #12]
 800bc3a:	6020      	str	r0, [r4, #0]
 800bc3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc40:	81a3      	strh	r3, [r4, #12]
 800bc42:	9b00      	ldr	r3, [sp, #0]
 800bc44:	6163      	str	r3, [r4, #20]
 800bc46:	9b01      	ldr	r3, [sp, #4]
 800bc48:	6120      	str	r0, [r4, #16]
 800bc4a:	b15b      	cbz	r3, 800bc64 <__smakebuf_r+0x74>
 800bc4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc50:	4630      	mov	r0, r6
 800bc52:	f000 ff23 	bl	800ca9c <_isatty_r>
 800bc56:	b128      	cbz	r0, 800bc64 <__smakebuf_r+0x74>
 800bc58:	89a3      	ldrh	r3, [r4, #12]
 800bc5a:	f023 0303 	bic.w	r3, r3, #3
 800bc5e:	f043 0301 	orr.w	r3, r3, #1
 800bc62:	81a3      	strh	r3, [r4, #12]
 800bc64:	89a0      	ldrh	r0, [r4, #12]
 800bc66:	4305      	orrs	r5, r0
 800bc68:	81a5      	strh	r5, [r4, #12]
 800bc6a:	e7cd      	b.n	800bc08 <__smakebuf_r+0x18>
 800bc6c:	080088a1 	.word	0x080088a1

0800bc70 <malloc>:
 800bc70:	4b02      	ldr	r3, [pc, #8]	; (800bc7c <malloc+0xc>)
 800bc72:	4601      	mov	r1, r0
 800bc74:	6818      	ldr	r0, [r3, #0]
 800bc76:	f7fc bf23 	b.w	8008ac0 <_malloc_r>
 800bc7a:	bf00      	nop
 800bc7c:	20000048 	.word	0x20000048

0800bc80 <__ascii_mbtowc>:
 800bc80:	b082      	sub	sp, #8
 800bc82:	b901      	cbnz	r1, 800bc86 <__ascii_mbtowc+0x6>
 800bc84:	a901      	add	r1, sp, #4
 800bc86:	b142      	cbz	r2, 800bc9a <__ascii_mbtowc+0x1a>
 800bc88:	b14b      	cbz	r3, 800bc9e <__ascii_mbtowc+0x1e>
 800bc8a:	7813      	ldrb	r3, [r2, #0]
 800bc8c:	600b      	str	r3, [r1, #0]
 800bc8e:	7812      	ldrb	r2, [r2, #0]
 800bc90:	1e10      	subs	r0, r2, #0
 800bc92:	bf18      	it	ne
 800bc94:	2001      	movne	r0, #1
 800bc96:	b002      	add	sp, #8
 800bc98:	4770      	bx	lr
 800bc9a:	4610      	mov	r0, r2
 800bc9c:	e7fb      	b.n	800bc96 <__ascii_mbtowc+0x16>
 800bc9e:	f06f 0001 	mvn.w	r0, #1
 800bca2:	e7f8      	b.n	800bc96 <__ascii_mbtowc+0x16>

0800bca4 <__malloc_lock>:
 800bca4:	4801      	ldr	r0, [pc, #4]	; (800bcac <__malloc_lock+0x8>)
 800bca6:	f7fc bef2 	b.w	8008a8e <__retarget_lock_acquire_recursive>
 800bcaa:	bf00      	nop
 800bcac:	20004608 	.word	0x20004608

0800bcb0 <__malloc_unlock>:
 800bcb0:	4801      	ldr	r0, [pc, #4]	; (800bcb8 <__malloc_unlock+0x8>)
 800bcb2:	f7fc beed 	b.w	8008a90 <__retarget_lock_release_recursive>
 800bcb6:	bf00      	nop
 800bcb8:	20004608 	.word	0x20004608

0800bcbc <_Balloc>:
 800bcbc:	b570      	push	{r4, r5, r6, lr}
 800bcbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	460d      	mov	r5, r1
 800bcc4:	b976      	cbnz	r6, 800bce4 <_Balloc+0x28>
 800bcc6:	2010      	movs	r0, #16
 800bcc8:	f7ff ffd2 	bl	800bc70 <malloc>
 800bccc:	4602      	mov	r2, r0
 800bcce:	6260      	str	r0, [r4, #36]	; 0x24
 800bcd0:	b920      	cbnz	r0, 800bcdc <_Balloc+0x20>
 800bcd2:	4b18      	ldr	r3, [pc, #96]	; (800bd34 <_Balloc+0x78>)
 800bcd4:	4818      	ldr	r0, [pc, #96]	; (800bd38 <_Balloc+0x7c>)
 800bcd6:	2166      	movs	r1, #102	; 0x66
 800bcd8:	f000 fe9e 	bl	800ca18 <__assert_func>
 800bcdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bce0:	6006      	str	r6, [r0, #0]
 800bce2:	60c6      	str	r6, [r0, #12]
 800bce4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bce6:	68f3      	ldr	r3, [r6, #12]
 800bce8:	b183      	cbz	r3, 800bd0c <_Balloc+0x50>
 800bcea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bcf2:	b9b8      	cbnz	r0, 800bd24 <_Balloc+0x68>
 800bcf4:	2101      	movs	r1, #1
 800bcf6:	fa01 f605 	lsl.w	r6, r1, r5
 800bcfa:	1d72      	adds	r2, r6, #5
 800bcfc:	0092      	lsls	r2, r2, #2
 800bcfe:	4620      	mov	r0, r4
 800bd00:	f000 fc97 	bl	800c632 <_calloc_r>
 800bd04:	b160      	cbz	r0, 800bd20 <_Balloc+0x64>
 800bd06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd0a:	e00e      	b.n	800bd2a <_Balloc+0x6e>
 800bd0c:	2221      	movs	r2, #33	; 0x21
 800bd0e:	2104      	movs	r1, #4
 800bd10:	4620      	mov	r0, r4
 800bd12:	f000 fc8e 	bl	800c632 <_calloc_r>
 800bd16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd18:	60f0      	str	r0, [r6, #12]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d1e4      	bne.n	800bcea <_Balloc+0x2e>
 800bd20:	2000      	movs	r0, #0
 800bd22:	bd70      	pop	{r4, r5, r6, pc}
 800bd24:	6802      	ldr	r2, [r0, #0]
 800bd26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd30:	e7f7      	b.n	800bd22 <_Balloc+0x66>
 800bd32:	bf00      	nop
 800bd34:	0800f8d6 	.word	0x0800f8d6
 800bd38:	0800f9dc 	.word	0x0800f9dc

0800bd3c <_Bfree>:
 800bd3c:	b570      	push	{r4, r5, r6, lr}
 800bd3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd40:	4605      	mov	r5, r0
 800bd42:	460c      	mov	r4, r1
 800bd44:	b976      	cbnz	r6, 800bd64 <_Bfree+0x28>
 800bd46:	2010      	movs	r0, #16
 800bd48:	f7ff ff92 	bl	800bc70 <malloc>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	6268      	str	r0, [r5, #36]	; 0x24
 800bd50:	b920      	cbnz	r0, 800bd5c <_Bfree+0x20>
 800bd52:	4b09      	ldr	r3, [pc, #36]	; (800bd78 <_Bfree+0x3c>)
 800bd54:	4809      	ldr	r0, [pc, #36]	; (800bd7c <_Bfree+0x40>)
 800bd56:	218a      	movs	r1, #138	; 0x8a
 800bd58:	f000 fe5e 	bl	800ca18 <__assert_func>
 800bd5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd60:	6006      	str	r6, [r0, #0]
 800bd62:	60c6      	str	r6, [r0, #12]
 800bd64:	b13c      	cbz	r4, 800bd76 <_Bfree+0x3a>
 800bd66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bd68:	6862      	ldr	r2, [r4, #4]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd70:	6021      	str	r1, [r4, #0]
 800bd72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd76:	bd70      	pop	{r4, r5, r6, pc}
 800bd78:	0800f8d6 	.word	0x0800f8d6
 800bd7c:	0800f9dc 	.word	0x0800f9dc

0800bd80 <__multadd>:
 800bd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd84:	690e      	ldr	r6, [r1, #16]
 800bd86:	4607      	mov	r7, r0
 800bd88:	4698      	mov	r8, r3
 800bd8a:	460c      	mov	r4, r1
 800bd8c:	f101 0014 	add.w	r0, r1, #20
 800bd90:	2300      	movs	r3, #0
 800bd92:	6805      	ldr	r5, [r0, #0]
 800bd94:	b2a9      	uxth	r1, r5
 800bd96:	fb02 8101 	mla	r1, r2, r1, r8
 800bd9a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bd9e:	0c2d      	lsrs	r5, r5, #16
 800bda0:	fb02 c505 	mla	r5, r2, r5, ip
 800bda4:	b289      	uxth	r1, r1
 800bda6:	3301      	adds	r3, #1
 800bda8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bdac:	429e      	cmp	r6, r3
 800bdae:	f840 1b04 	str.w	r1, [r0], #4
 800bdb2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bdb6:	dcec      	bgt.n	800bd92 <__multadd+0x12>
 800bdb8:	f1b8 0f00 	cmp.w	r8, #0
 800bdbc:	d022      	beq.n	800be04 <__multadd+0x84>
 800bdbe:	68a3      	ldr	r3, [r4, #8]
 800bdc0:	42b3      	cmp	r3, r6
 800bdc2:	dc19      	bgt.n	800bdf8 <__multadd+0x78>
 800bdc4:	6861      	ldr	r1, [r4, #4]
 800bdc6:	4638      	mov	r0, r7
 800bdc8:	3101      	adds	r1, #1
 800bdca:	f7ff ff77 	bl	800bcbc <_Balloc>
 800bdce:	4605      	mov	r5, r0
 800bdd0:	b928      	cbnz	r0, 800bdde <__multadd+0x5e>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	4b0d      	ldr	r3, [pc, #52]	; (800be0c <__multadd+0x8c>)
 800bdd6:	480e      	ldr	r0, [pc, #56]	; (800be10 <__multadd+0x90>)
 800bdd8:	21b5      	movs	r1, #181	; 0xb5
 800bdda:	f000 fe1d 	bl	800ca18 <__assert_func>
 800bdde:	6922      	ldr	r2, [r4, #16]
 800bde0:	3202      	adds	r2, #2
 800bde2:	f104 010c 	add.w	r1, r4, #12
 800bde6:	0092      	lsls	r2, r2, #2
 800bde8:	300c      	adds	r0, #12
 800bdea:	f7fc fe52 	bl	8008a92 <memcpy>
 800bdee:	4621      	mov	r1, r4
 800bdf0:	4638      	mov	r0, r7
 800bdf2:	f7ff ffa3 	bl	800bd3c <_Bfree>
 800bdf6:	462c      	mov	r4, r5
 800bdf8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bdfc:	3601      	adds	r6, #1
 800bdfe:	f8c3 8014 	str.w	r8, [r3, #20]
 800be02:	6126      	str	r6, [r4, #16]
 800be04:	4620      	mov	r0, r4
 800be06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be0a:	bf00      	nop
 800be0c:	0800f94c 	.word	0x0800f94c
 800be10:	0800f9dc 	.word	0x0800f9dc

0800be14 <__s2b>:
 800be14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be18:	460c      	mov	r4, r1
 800be1a:	4615      	mov	r5, r2
 800be1c:	461f      	mov	r7, r3
 800be1e:	2209      	movs	r2, #9
 800be20:	3308      	adds	r3, #8
 800be22:	4606      	mov	r6, r0
 800be24:	fb93 f3f2 	sdiv	r3, r3, r2
 800be28:	2100      	movs	r1, #0
 800be2a:	2201      	movs	r2, #1
 800be2c:	429a      	cmp	r2, r3
 800be2e:	db09      	blt.n	800be44 <__s2b+0x30>
 800be30:	4630      	mov	r0, r6
 800be32:	f7ff ff43 	bl	800bcbc <_Balloc>
 800be36:	b940      	cbnz	r0, 800be4a <__s2b+0x36>
 800be38:	4602      	mov	r2, r0
 800be3a:	4b19      	ldr	r3, [pc, #100]	; (800bea0 <__s2b+0x8c>)
 800be3c:	4819      	ldr	r0, [pc, #100]	; (800bea4 <__s2b+0x90>)
 800be3e:	21ce      	movs	r1, #206	; 0xce
 800be40:	f000 fdea 	bl	800ca18 <__assert_func>
 800be44:	0052      	lsls	r2, r2, #1
 800be46:	3101      	adds	r1, #1
 800be48:	e7f0      	b.n	800be2c <__s2b+0x18>
 800be4a:	9b08      	ldr	r3, [sp, #32]
 800be4c:	6143      	str	r3, [r0, #20]
 800be4e:	2d09      	cmp	r5, #9
 800be50:	f04f 0301 	mov.w	r3, #1
 800be54:	6103      	str	r3, [r0, #16]
 800be56:	dd16      	ble.n	800be86 <__s2b+0x72>
 800be58:	f104 0909 	add.w	r9, r4, #9
 800be5c:	46c8      	mov	r8, r9
 800be5e:	442c      	add	r4, r5
 800be60:	f818 3b01 	ldrb.w	r3, [r8], #1
 800be64:	4601      	mov	r1, r0
 800be66:	3b30      	subs	r3, #48	; 0x30
 800be68:	220a      	movs	r2, #10
 800be6a:	4630      	mov	r0, r6
 800be6c:	f7ff ff88 	bl	800bd80 <__multadd>
 800be70:	45a0      	cmp	r8, r4
 800be72:	d1f5      	bne.n	800be60 <__s2b+0x4c>
 800be74:	f1a5 0408 	sub.w	r4, r5, #8
 800be78:	444c      	add	r4, r9
 800be7a:	1b2d      	subs	r5, r5, r4
 800be7c:	1963      	adds	r3, r4, r5
 800be7e:	42bb      	cmp	r3, r7
 800be80:	db04      	blt.n	800be8c <__s2b+0x78>
 800be82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be86:	340a      	adds	r4, #10
 800be88:	2509      	movs	r5, #9
 800be8a:	e7f6      	b.n	800be7a <__s2b+0x66>
 800be8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800be90:	4601      	mov	r1, r0
 800be92:	3b30      	subs	r3, #48	; 0x30
 800be94:	220a      	movs	r2, #10
 800be96:	4630      	mov	r0, r6
 800be98:	f7ff ff72 	bl	800bd80 <__multadd>
 800be9c:	e7ee      	b.n	800be7c <__s2b+0x68>
 800be9e:	bf00      	nop
 800bea0:	0800f94c 	.word	0x0800f94c
 800bea4:	0800f9dc 	.word	0x0800f9dc

0800bea8 <__hi0bits>:
 800bea8:	0c03      	lsrs	r3, r0, #16
 800beaa:	041b      	lsls	r3, r3, #16
 800beac:	b9d3      	cbnz	r3, 800bee4 <__hi0bits+0x3c>
 800beae:	0400      	lsls	r0, r0, #16
 800beb0:	2310      	movs	r3, #16
 800beb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800beb6:	bf04      	itt	eq
 800beb8:	0200      	lsleq	r0, r0, #8
 800beba:	3308      	addeq	r3, #8
 800bebc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bec0:	bf04      	itt	eq
 800bec2:	0100      	lsleq	r0, r0, #4
 800bec4:	3304      	addeq	r3, #4
 800bec6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800beca:	bf04      	itt	eq
 800becc:	0080      	lsleq	r0, r0, #2
 800bece:	3302      	addeq	r3, #2
 800bed0:	2800      	cmp	r0, #0
 800bed2:	db05      	blt.n	800bee0 <__hi0bits+0x38>
 800bed4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bed8:	f103 0301 	add.w	r3, r3, #1
 800bedc:	bf08      	it	eq
 800bede:	2320      	moveq	r3, #32
 800bee0:	4618      	mov	r0, r3
 800bee2:	4770      	bx	lr
 800bee4:	2300      	movs	r3, #0
 800bee6:	e7e4      	b.n	800beb2 <__hi0bits+0xa>

0800bee8 <__lo0bits>:
 800bee8:	6803      	ldr	r3, [r0, #0]
 800beea:	f013 0207 	ands.w	r2, r3, #7
 800beee:	4601      	mov	r1, r0
 800bef0:	d00b      	beq.n	800bf0a <__lo0bits+0x22>
 800bef2:	07da      	lsls	r2, r3, #31
 800bef4:	d424      	bmi.n	800bf40 <__lo0bits+0x58>
 800bef6:	0798      	lsls	r0, r3, #30
 800bef8:	bf49      	itett	mi
 800befa:	085b      	lsrmi	r3, r3, #1
 800befc:	089b      	lsrpl	r3, r3, #2
 800befe:	2001      	movmi	r0, #1
 800bf00:	600b      	strmi	r3, [r1, #0]
 800bf02:	bf5c      	itt	pl
 800bf04:	600b      	strpl	r3, [r1, #0]
 800bf06:	2002      	movpl	r0, #2
 800bf08:	4770      	bx	lr
 800bf0a:	b298      	uxth	r0, r3
 800bf0c:	b9b0      	cbnz	r0, 800bf3c <__lo0bits+0x54>
 800bf0e:	0c1b      	lsrs	r3, r3, #16
 800bf10:	2010      	movs	r0, #16
 800bf12:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bf16:	bf04      	itt	eq
 800bf18:	0a1b      	lsreq	r3, r3, #8
 800bf1a:	3008      	addeq	r0, #8
 800bf1c:	071a      	lsls	r2, r3, #28
 800bf1e:	bf04      	itt	eq
 800bf20:	091b      	lsreq	r3, r3, #4
 800bf22:	3004      	addeq	r0, #4
 800bf24:	079a      	lsls	r2, r3, #30
 800bf26:	bf04      	itt	eq
 800bf28:	089b      	lsreq	r3, r3, #2
 800bf2a:	3002      	addeq	r0, #2
 800bf2c:	07da      	lsls	r2, r3, #31
 800bf2e:	d403      	bmi.n	800bf38 <__lo0bits+0x50>
 800bf30:	085b      	lsrs	r3, r3, #1
 800bf32:	f100 0001 	add.w	r0, r0, #1
 800bf36:	d005      	beq.n	800bf44 <__lo0bits+0x5c>
 800bf38:	600b      	str	r3, [r1, #0]
 800bf3a:	4770      	bx	lr
 800bf3c:	4610      	mov	r0, r2
 800bf3e:	e7e8      	b.n	800bf12 <__lo0bits+0x2a>
 800bf40:	2000      	movs	r0, #0
 800bf42:	4770      	bx	lr
 800bf44:	2020      	movs	r0, #32
 800bf46:	4770      	bx	lr

0800bf48 <__i2b>:
 800bf48:	b510      	push	{r4, lr}
 800bf4a:	460c      	mov	r4, r1
 800bf4c:	2101      	movs	r1, #1
 800bf4e:	f7ff feb5 	bl	800bcbc <_Balloc>
 800bf52:	4602      	mov	r2, r0
 800bf54:	b928      	cbnz	r0, 800bf62 <__i2b+0x1a>
 800bf56:	4b05      	ldr	r3, [pc, #20]	; (800bf6c <__i2b+0x24>)
 800bf58:	4805      	ldr	r0, [pc, #20]	; (800bf70 <__i2b+0x28>)
 800bf5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bf5e:	f000 fd5b 	bl	800ca18 <__assert_func>
 800bf62:	2301      	movs	r3, #1
 800bf64:	6144      	str	r4, [r0, #20]
 800bf66:	6103      	str	r3, [r0, #16]
 800bf68:	bd10      	pop	{r4, pc}
 800bf6a:	bf00      	nop
 800bf6c:	0800f94c 	.word	0x0800f94c
 800bf70:	0800f9dc 	.word	0x0800f9dc

0800bf74 <__multiply>:
 800bf74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf78:	4614      	mov	r4, r2
 800bf7a:	690a      	ldr	r2, [r1, #16]
 800bf7c:	6923      	ldr	r3, [r4, #16]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	bfb8      	it	lt
 800bf82:	460b      	movlt	r3, r1
 800bf84:	460d      	mov	r5, r1
 800bf86:	bfbc      	itt	lt
 800bf88:	4625      	movlt	r5, r4
 800bf8a:	461c      	movlt	r4, r3
 800bf8c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bf90:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bf94:	68ab      	ldr	r3, [r5, #8]
 800bf96:	6869      	ldr	r1, [r5, #4]
 800bf98:	eb0a 0709 	add.w	r7, sl, r9
 800bf9c:	42bb      	cmp	r3, r7
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	bfb8      	it	lt
 800bfa2:	3101      	addlt	r1, #1
 800bfa4:	f7ff fe8a 	bl	800bcbc <_Balloc>
 800bfa8:	b930      	cbnz	r0, 800bfb8 <__multiply+0x44>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	4b42      	ldr	r3, [pc, #264]	; (800c0b8 <__multiply+0x144>)
 800bfae:	4843      	ldr	r0, [pc, #268]	; (800c0bc <__multiply+0x148>)
 800bfb0:	f240 115d 	movw	r1, #349	; 0x15d
 800bfb4:	f000 fd30 	bl	800ca18 <__assert_func>
 800bfb8:	f100 0614 	add.w	r6, r0, #20
 800bfbc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bfc0:	4633      	mov	r3, r6
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	4543      	cmp	r3, r8
 800bfc6:	d31e      	bcc.n	800c006 <__multiply+0x92>
 800bfc8:	f105 0c14 	add.w	ip, r5, #20
 800bfcc:	f104 0314 	add.w	r3, r4, #20
 800bfd0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bfd4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bfd8:	9202      	str	r2, [sp, #8]
 800bfda:	ebac 0205 	sub.w	r2, ip, r5
 800bfde:	3a15      	subs	r2, #21
 800bfe0:	f022 0203 	bic.w	r2, r2, #3
 800bfe4:	3204      	adds	r2, #4
 800bfe6:	f105 0115 	add.w	r1, r5, #21
 800bfea:	458c      	cmp	ip, r1
 800bfec:	bf38      	it	cc
 800bfee:	2204      	movcc	r2, #4
 800bff0:	9201      	str	r2, [sp, #4]
 800bff2:	9a02      	ldr	r2, [sp, #8]
 800bff4:	9303      	str	r3, [sp, #12]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d808      	bhi.n	800c00c <__multiply+0x98>
 800bffa:	2f00      	cmp	r7, #0
 800bffc:	dc55      	bgt.n	800c0aa <__multiply+0x136>
 800bffe:	6107      	str	r7, [r0, #16]
 800c000:	b005      	add	sp, #20
 800c002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c006:	f843 2b04 	str.w	r2, [r3], #4
 800c00a:	e7db      	b.n	800bfc4 <__multiply+0x50>
 800c00c:	f8b3 a000 	ldrh.w	sl, [r3]
 800c010:	f1ba 0f00 	cmp.w	sl, #0
 800c014:	d020      	beq.n	800c058 <__multiply+0xe4>
 800c016:	f105 0e14 	add.w	lr, r5, #20
 800c01a:	46b1      	mov	r9, r6
 800c01c:	2200      	movs	r2, #0
 800c01e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c022:	f8d9 b000 	ldr.w	fp, [r9]
 800c026:	b2a1      	uxth	r1, r4
 800c028:	fa1f fb8b 	uxth.w	fp, fp
 800c02c:	fb0a b101 	mla	r1, sl, r1, fp
 800c030:	4411      	add	r1, r2
 800c032:	f8d9 2000 	ldr.w	r2, [r9]
 800c036:	0c24      	lsrs	r4, r4, #16
 800c038:	0c12      	lsrs	r2, r2, #16
 800c03a:	fb0a 2404 	mla	r4, sl, r4, r2
 800c03e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c042:	b289      	uxth	r1, r1
 800c044:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c048:	45f4      	cmp	ip, lr
 800c04a:	f849 1b04 	str.w	r1, [r9], #4
 800c04e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c052:	d8e4      	bhi.n	800c01e <__multiply+0xaa>
 800c054:	9901      	ldr	r1, [sp, #4]
 800c056:	5072      	str	r2, [r6, r1]
 800c058:	9a03      	ldr	r2, [sp, #12]
 800c05a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c05e:	3304      	adds	r3, #4
 800c060:	f1b9 0f00 	cmp.w	r9, #0
 800c064:	d01f      	beq.n	800c0a6 <__multiply+0x132>
 800c066:	6834      	ldr	r4, [r6, #0]
 800c068:	f105 0114 	add.w	r1, r5, #20
 800c06c:	46b6      	mov	lr, r6
 800c06e:	f04f 0a00 	mov.w	sl, #0
 800c072:	880a      	ldrh	r2, [r1, #0]
 800c074:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c078:	fb09 b202 	mla	r2, r9, r2, fp
 800c07c:	4492      	add	sl, r2
 800c07e:	b2a4      	uxth	r4, r4
 800c080:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c084:	f84e 4b04 	str.w	r4, [lr], #4
 800c088:	f851 4b04 	ldr.w	r4, [r1], #4
 800c08c:	f8be 2000 	ldrh.w	r2, [lr]
 800c090:	0c24      	lsrs	r4, r4, #16
 800c092:	fb09 2404 	mla	r4, r9, r4, r2
 800c096:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c09a:	458c      	cmp	ip, r1
 800c09c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c0a0:	d8e7      	bhi.n	800c072 <__multiply+0xfe>
 800c0a2:	9a01      	ldr	r2, [sp, #4]
 800c0a4:	50b4      	str	r4, [r6, r2]
 800c0a6:	3604      	adds	r6, #4
 800c0a8:	e7a3      	b.n	800bff2 <__multiply+0x7e>
 800c0aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1a5      	bne.n	800bffe <__multiply+0x8a>
 800c0b2:	3f01      	subs	r7, #1
 800c0b4:	e7a1      	b.n	800bffa <__multiply+0x86>
 800c0b6:	bf00      	nop
 800c0b8:	0800f94c 	.word	0x0800f94c
 800c0bc:	0800f9dc 	.word	0x0800f9dc

0800c0c0 <__pow5mult>:
 800c0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0c4:	4615      	mov	r5, r2
 800c0c6:	f012 0203 	ands.w	r2, r2, #3
 800c0ca:	4606      	mov	r6, r0
 800c0cc:	460f      	mov	r7, r1
 800c0ce:	d007      	beq.n	800c0e0 <__pow5mult+0x20>
 800c0d0:	4c25      	ldr	r4, [pc, #148]	; (800c168 <__pow5mult+0xa8>)
 800c0d2:	3a01      	subs	r2, #1
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c0da:	f7ff fe51 	bl	800bd80 <__multadd>
 800c0de:	4607      	mov	r7, r0
 800c0e0:	10ad      	asrs	r5, r5, #2
 800c0e2:	d03d      	beq.n	800c160 <__pow5mult+0xa0>
 800c0e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c0e6:	b97c      	cbnz	r4, 800c108 <__pow5mult+0x48>
 800c0e8:	2010      	movs	r0, #16
 800c0ea:	f7ff fdc1 	bl	800bc70 <malloc>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	6270      	str	r0, [r6, #36]	; 0x24
 800c0f2:	b928      	cbnz	r0, 800c100 <__pow5mult+0x40>
 800c0f4:	4b1d      	ldr	r3, [pc, #116]	; (800c16c <__pow5mult+0xac>)
 800c0f6:	481e      	ldr	r0, [pc, #120]	; (800c170 <__pow5mult+0xb0>)
 800c0f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c0fc:	f000 fc8c 	bl	800ca18 <__assert_func>
 800c100:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c104:	6004      	str	r4, [r0, #0]
 800c106:	60c4      	str	r4, [r0, #12]
 800c108:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c10c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c110:	b94c      	cbnz	r4, 800c126 <__pow5mult+0x66>
 800c112:	f240 2171 	movw	r1, #625	; 0x271
 800c116:	4630      	mov	r0, r6
 800c118:	f7ff ff16 	bl	800bf48 <__i2b>
 800c11c:	2300      	movs	r3, #0
 800c11e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c122:	4604      	mov	r4, r0
 800c124:	6003      	str	r3, [r0, #0]
 800c126:	f04f 0900 	mov.w	r9, #0
 800c12a:	07eb      	lsls	r3, r5, #31
 800c12c:	d50a      	bpl.n	800c144 <__pow5mult+0x84>
 800c12e:	4639      	mov	r1, r7
 800c130:	4622      	mov	r2, r4
 800c132:	4630      	mov	r0, r6
 800c134:	f7ff ff1e 	bl	800bf74 <__multiply>
 800c138:	4639      	mov	r1, r7
 800c13a:	4680      	mov	r8, r0
 800c13c:	4630      	mov	r0, r6
 800c13e:	f7ff fdfd 	bl	800bd3c <_Bfree>
 800c142:	4647      	mov	r7, r8
 800c144:	106d      	asrs	r5, r5, #1
 800c146:	d00b      	beq.n	800c160 <__pow5mult+0xa0>
 800c148:	6820      	ldr	r0, [r4, #0]
 800c14a:	b938      	cbnz	r0, 800c15c <__pow5mult+0x9c>
 800c14c:	4622      	mov	r2, r4
 800c14e:	4621      	mov	r1, r4
 800c150:	4630      	mov	r0, r6
 800c152:	f7ff ff0f 	bl	800bf74 <__multiply>
 800c156:	6020      	str	r0, [r4, #0]
 800c158:	f8c0 9000 	str.w	r9, [r0]
 800c15c:	4604      	mov	r4, r0
 800c15e:	e7e4      	b.n	800c12a <__pow5mult+0x6a>
 800c160:	4638      	mov	r0, r7
 800c162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c166:	bf00      	nop
 800c168:	0800fb30 	.word	0x0800fb30
 800c16c:	0800f8d6 	.word	0x0800f8d6
 800c170:	0800f9dc 	.word	0x0800f9dc

0800c174 <__lshift>:
 800c174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c178:	460c      	mov	r4, r1
 800c17a:	6849      	ldr	r1, [r1, #4]
 800c17c:	6923      	ldr	r3, [r4, #16]
 800c17e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c182:	68a3      	ldr	r3, [r4, #8]
 800c184:	4607      	mov	r7, r0
 800c186:	4691      	mov	r9, r2
 800c188:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c18c:	f108 0601 	add.w	r6, r8, #1
 800c190:	42b3      	cmp	r3, r6
 800c192:	db0b      	blt.n	800c1ac <__lshift+0x38>
 800c194:	4638      	mov	r0, r7
 800c196:	f7ff fd91 	bl	800bcbc <_Balloc>
 800c19a:	4605      	mov	r5, r0
 800c19c:	b948      	cbnz	r0, 800c1b2 <__lshift+0x3e>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	4b28      	ldr	r3, [pc, #160]	; (800c244 <__lshift+0xd0>)
 800c1a2:	4829      	ldr	r0, [pc, #164]	; (800c248 <__lshift+0xd4>)
 800c1a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c1a8:	f000 fc36 	bl	800ca18 <__assert_func>
 800c1ac:	3101      	adds	r1, #1
 800c1ae:	005b      	lsls	r3, r3, #1
 800c1b0:	e7ee      	b.n	800c190 <__lshift+0x1c>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	f100 0114 	add.w	r1, r0, #20
 800c1b8:	f100 0210 	add.w	r2, r0, #16
 800c1bc:	4618      	mov	r0, r3
 800c1be:	4553      	cmp	r3, sl
 800c1c0:	db33      	blt.n	800c22a <__lshift+0xb6>
 800c1c2:	6920      	ldr	r0, [r4, #16]
 800c1c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1c8:	f104 0314 	add.w	r3, r4, #20
 800c1cc:	f019 091f 	ands.w	r9, r9, #31
 800c1d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c1d8:	d02b      	beq.n	800c232 <__lshift+0xbe>
 800c1da:	f1c9 0e20 	rsb	lr, r9, #32
 800c1de:	468a      	mov	sl, r1
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	6818      	ldr	r0, [r3, #0]
 800c1e4:	fa00 f009 	lsl.w	r0, r0, r9
 800c1e8:	4302      	orrs	r2, r0
 800c1ea:	f84a 2b04 	str.w	r2, [sl], #4
 800c1ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1f2:	459c      	cmp	ip, r3
 800c1f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c1f8:	d8f3      	bhi.n	800c1e2 <__lshift+0x6e>
 800c1fa:	ebac 0304 	sub.w	r3, ip, r4
 800c1fe:	3b15      	subs	r3, #21
 800c200:	f023 0303 	bic.w	r3, r3, #3
 800c204:	3304      	adds	r3, #4
 800c206:	f104 0015 	add.w	r0, r4, #21
 800c20a:	4584      	cmp	ip, r0
 800c20c:	bf38      	it	cc
 800c20e:	2304      	movcc	r3, #4
 800c210:	50ca      	str	r2, [r1, r3]
 800c212:	b10a      	cbz	r2, 800c218 <__lshift+0xa4>
 800c214:	f108 0602 	add.w	r6, r8, #2
 800c218:	3e01      	subs	r6, #1
 800c21a:	4638      	mov	r0, r7
 800c21c:	612e      	str	r6, [r5, #16]
 800c21e:	4621      	mov	r1, r4
 800c220:	f7ff fd8c 	bl	800bd3c <_Bfree>
 800c224:	4628      	mov	r0, r5
 800c226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c22a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c22e:	3301      	adds	r3, #1
 800c230:	e7c5      	b.n	800c1be <__lshift+0x4a>
 800c232:	3904      	subs	r1, #4
 800c234:	f853 2b04 	ldr.w	r2, [r3], #4
 800c238:	f841 2f04 	str.w	r2, [r1, #4]!
 800c23c:	459c      	cmp	ip, r3
 800c23e:	d8f9      	bhi.n	800c234 <__lshift+0xc0>
 800c240:	e7ea      	b.n	800c218 <__lshift+0xa4>
 800c242:	bf00      	nop
 800c244:	0800f94c 	.word	0x0800f94c
 800c248:	0800f9dc 	.word	0x0800f9dc

0800c24c <__mcmp>:
 800c24c:	b530      	push	{r4, r5, lr}
 800c24e:	6902      	ldr	r2, [r0, #16]
 800c250:	690c      	ldr	r4, [r1, #16]
 800c252:	1b12      	subs	r2, r2, r4
 800c254:	d10e      	bne.n	800c274 <__mcmp+0x28>
 800c256:	f100 0314 	add.w	r3, r0, #20
 800c25a:	3114      	adds	r1, #20
 800c25c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c260:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c264:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c268:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c26c:	42a5      	cmp	r5, r4
 800c26e:	d003      	beq.n	800c278 <__mcmp+0x2c>
 800c270:	d305      	bcc.n	800c27e <__mcmp+0x32>
 800c272:	2201      	movs	r2, #1
 800c274:	4610      	mov	r0, r2
 800c276:	bd30      	pop	{r4, r5, pc}
 800c278:	4283      	cmp	r3, r0
 800c27a:	d3f3      	bcc.n	800c264 <__mcmp+0x18>
 800c27c:	e7fa      	b.n	800c274 <__mcmp+0x28>
 800c27e:	f04f 32ff 	mov.w	r2, #4294967295
 800c282:	e7f7      	b.n	800c274 <__mcmp+0x28>

0800c284 <__mdiff>:
 800c284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c288:	460c      	mov	r4, r1
 800c28a:	4606      	mov	r6, r0
 800c28c:	4611      	mov	r1, r2
 800c28e:	4620      	mov	r0, r4
 800c290:	4617      	mov	r7, r2
 800c292:	f7ff ffdb 	bl	800c24c <__mcmp>
 800c296:	1e05      	subs	r5, r0, #0
 800c298:	d110      	bne.n	800c2bc <__mdiff+0x38>
 800c29a:	4629      	mov	r1, r5
 800c29c:	4630      	mov	r0, r6
 800c29e:	f7ff fd0d 	bl	800bcbc <_Balloc>
 800c2a2:	b930      	cbnz	r0, 800c2b2 <__mdiff+0x2e>
 800c2a4:	4b39      	ldr	r3, [pc, #228]	; (800c38c <__mdiff+0x108>)
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	f240 2132 	movw	r1, #562	; 0x232
 800c2ac:	4838      	ldr	r0, [pc, #224]	; (800c390 <__mdiff+0x10c>)
 800c2ae:	f000 fbb3 	bl	800ca18 <__assert_func>
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c2b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2bc:	bfa4      	itt	ge
 800c2be:	463b      	movge	r3, r7
 800c2c0:	4627      	movge	r7, r4
 800c2c2:	4630      	mov	r0, r6
 800c2c4:	6879      	ldr	r1, [r7, #4]
 800c2c6:	bfa6      	itte	ge
 800c2c8:	461c      	movge	r4, r3
 800c2ca:	2500      	movge	r5, #0
 800c2cc:	2501      	movlt	r5, #1
 800c2ce:	f7ff fcf5 	bl	800bcbc <_Balloc>
 800c2d2:	b920      	cbnz	r0, 800c2de <__mdiff+0x5a>
 800c2d4:	4b2d      	ldr	r3, [pc, #180]	; (800c38c <__mdiff+0x108>)
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c2dc:	e7e6      	b.n	800c2ac <__mdiff+0x28>
 800c2de:	693e      	ldr	r6, [r7, #16]
 800c2e0:	60c5      	str	r5, [r0, #12]
 800c2e2:	6925      	ldr	r5, [r4, #16]
 800c2e4:	f107 0114 	add.w	r1, r7, #20
 800c2e8:	f104 0914 	add.w	r9, r4, #20
 800c2ec:	f100 0e14 	add.w	lr, r0, #20
 800c2f0:	f107 0210 	add.w	r2, r7, #16
 800c2f4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c2f8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c2fc:	46f2      	mov	sl, lr
 800c2fe:	2700      	movs	r7, #0
 800c300:	f859 3b04 	ldr.w	r3, [r9], #4
 800c304:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c308:	fa1f f883 	uxth.w	r8, r3
 800c30c:	fa17 f78b 	uxtah	r7, r7, fp
 800c310:	0c1b      	lsrs	r3, r3, #16
 800c312:	eba7 0808 	sub.w	r8, r7, r8
 800c316:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c31a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c31e:	fa1f f888 	uxth.w	r8, r8
 800c322:	141f      	asrs	r7, r3, #16
 800c324:	454d      	cmp	r5, r9
 800c326:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c32a:	f84a 3b04 	str.w	r3, [sl], #4
 800c32e:	d8e7      	bhi.n	800c300 <__mdiff+0x7c>
 800c330:	1b2b      	subs	r3, r5, r4
 800c332:	3b15      	subs	r3, #21
 800c334:	f023 0303 	bic.w	r3, r3, #3
 800c338:	3304      	adds	r3, #4
 800c33a:	3415      	adds	r4, #21
 800c33c:	42a5      	cmp	r5, r4
 800c33e:	bf38      	it	cc
 800c340:	2304      	movcc	r3, #4
 800c342:	4419      	add	r1, r3
 800c344:	4473      	add	r3, lr
 800c346:	469e      	mov	lr, r3
 800c348:	460d      	mov	r5, r1
 800c34a:	4565      	cmp	r5, ip
 800c34c:	d30e      	bcc.n	800c36c <__mdiff+0xe8>
 800c34e:	f10c 0203 	add.w	r2, ip, #3
 800c352:	1a52      	subs	r2, r2, r1
 800c354:	f022 0203 	bic.w	r2, r2, #3
 800c358:	3903      	subs	r1, #3
 800c35a:	458c      	cmp	ip, r1
 800c35c:	bf38      	it	cc
 800c35e:	2200      	movcc	r2, #0
 800c360:	441a      	add	r2, r3
 800c362:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c366:	b17b      	cbz	r3, 800c388 <__mdiff+0x104>
 800c368:	6106      	str	r6, [r0, #16]
 800c36a:	e7a5      	b.n	800c2b8 <__mdiff+0x34>
 800c36c:	f855 8b04 	ldr.w	r8, [r5], #4
 800c370:	fa17 f488 	uxtah	r4, r7, r8
 800c374:	1422      	asrs	r2, r4, #16
 800c376:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c37a:	b2a4      	uxth	r4, r4
 800c37c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c380:	f84e 4b04 	str.w	r4, [lr], #4
 800c384:	1417      	asrs	r7, r2, #16
 800c386:	e7e0      	b.n	800c34a <__mdiff+0xc6>
 800c388:	3e01      	subs	r6, #1
 800c38a:	e7ea      	b.n	800c362 <__mdiff+0xde>
 800c38c:	0800f94c 	.word	0x0800f94c
 800c390:	0800f9dc 	.word	0x0800f9dc

0800c394 <__ulp>:
 800c394:	b082      	sub	sp, #8
 800c396:	ed8d 0b00 	vstr	d0, [sp]
 800c39a:	9b01      	ldr	r3, [sp, #4]
 800c39c:	4912      	ldr	r1, [pc, #72]	; (800c3e8 <__ulp+0x54>)
 800c39e:	4019      	ands	r1, r3
 800c3a0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c3a4:	2900      	cmp	r1, #0
 800c3a6:	dd05      	ble.n	800c3b4 <__ulp+0x20>
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	ec43 2b10 	vmov	d0, r2, r3
 800c3b0:	b002      	add	sp, #8
 800c3b2:	4770      	bx	lr
 800c3b4:	4249      	negs	r1, r1
 800c3b6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c3ba:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c3be:	f04f 0200 	mov.w	r2, #0
 800c3c2:	f04f 0300 	mov.w	r3, #0
 800c3c6:	da04      	bge.n	800c3d2 <__ulp+0x3e>
 800c3c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c3cc:	fa41 f300 	asr.w	r3, r1, r0
 800c3d0:	e7ec      	b.n	800c3ac <__ulp+0x18>
 800c3d2:	f1a0 0114 	sub.w	r1, r0, #20
 800c3d6:	291e      	cmp	r1, #30
 800c3d8:	bfda      	itte	le
 800c3da:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c3de:	fa20 f101 	lsrle.w	r1, r0, r1
 800c3e2:	2101      	movgt	r1, #1
 800c3e4:	460a      	mov	r2, r1
 800c3e6:	e7e1      	b.n	800c3ac <__ulp+0x18>
 800c3e8:	7ff00000 	.word	0x7ff00000

0800c3ec <__b2d>:
 800c3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ee:	6905      	ldr	r5, [r0, #16]
 800c3f0:	f100 0714 	add.w	r7, r0, #20
 800c3f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c3f8:	1f2e      	subs	r6, r5, #4
 800c3fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c3fe:	4620      	mov	r0, r4
 800c400:	f7ff fd52 	bl	800bea8 <__hi0bits>
 800c404:	f1c0 0320 	rsb	r3, r0, #32
 800c408:	280a      	cmp	r0, #10
 800c40a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c488 <__b2d+0x9c>
 800c40e:	600b      	str	r3, [r1, #0]
 800c410:	dc14      	bgt.n	800c43c <__b2d+0x50>
 800c412:	f1c0 0e0b 	rsb	lr, r0, #11
 800c416:	fa24 f10e 	lsr.w	r1, r4, lr
 800c41a:	42b7      	cmp	r7, r6
 800c41c:	ea41 030c 	orr.w	r3, r1, ip
 800c420:	bf34      	ite	cc
 800c422:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c426:	2100      	movcs	r1, #0
 800c428:	3015      	adds	r0, #21
 800c42a:	fa04 f000 	lsl.w	r0, r4, r0
 800c42e:	fa21 f10e 	lsr.w	r1, r1, lr
 800c432:	ea40 0201 	orr.w	r2, r0, r1
 800c436:	ec43 2b10 	vmov	d0, r2, r3
 800c43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c43c:	42b7      	cmp	r7, r6
 800c43e:	bf3a      	itte	cc
 800c440:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c444:	f1a5 0608 	subcc.w	r6, r5, #8
 800c448:	2100      	movcs	r1, #0
 800c44a:	380b      	subs	r0, #11
 800c44c:	d017      	beq.n	800c47e <__b2d+0x92>
 800c44e:	f1c0 0c20 	rsb	ip, r0, #32
 800c452:	fa04 f500 	lsl.w	r5, r4, r0
 800c456:	42be      	cmp	r6, r7
 800c458:	fa21 f40c 	lsr.w	r4, r1, ip
 800c45c:	ea45 0504 	orr.w	r5, r5, r4
 800c460:	bf8c      	ite	hi
 800c462:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c466:	2400      	movls	r4, #0
 800c468:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c46c:	fa01 f000 	lsl.w	r0, r1, r0
 800c470:	fa24 f40c 	lsr.w	r4, r4, ip
 800c474:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c478:	ea40 0204 	orr.w	r2, r0, r4
 800c47c:	e7db      	b.n	800c436 <__b2d+0x4a>
 800c47e:	ea44 030c 	orr.w	r3, r4, ip
 800c482:	460a      	mov	r2, r1
 800c484:	e7d7      	b.n	800c436 <__b2d+0x4a>
 800c486:	bf00      	nop
 800c488:	3ff00000 	.word	0x3ff00000

0800c48c <__d2b>:
 800c48c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c490:	4689      	mov	r9, r1
 800c492:	2101      	movs	r1, #1
 800c494:	ec57 6b10 	vmov	r6, r7, d0
 800c498:	4690      	mov	r8, r2
 800c49a:	f7ff fc0f 	bl	800bcbc <_Balloc>
 800c49e:	4604      	mov	r4, r0
 800c4a0:	b930      	cbnz	r0, 800c4b0 <__d2b+0x24>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	4b25      	ldr	r3, [pc, #148]	; (800c53c <__d2b+0xb0>)
 800c4a6:	4826      	ldr	r0, [pc, #152]	; (800c540 <__d2b+0xb4>)
 800c4a8:	f240 310a 	movw	r1, #778	; 0x30a
 800c4ac:	f000 fab4 	bl	800ca18 <__assert_func>
 800c4b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c4b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c4b8:	bb35      	cbnz	r5, 800c508 <__d2b+0x7c>
 800c4ba:	2e00      	cmp	r6, #0
 800c4bc:	9301      	str	r3, [sp, #4]
 800c4be:	d028      	beq.n	800c512 <__d2b+0x86>
 800c4c0:	4668      	mov	r0, sp
 800c4c2:	9600      	str	r6, [sp, #0]
 800c4c4:	f7ff fd10 	bl	800bee8 <__lo0bits>
 800c4c8:	9900      	ldr	r1, [sp, #0]
 800c4ca:	b300      	cbz	r0, 800c50e <__d2b+0x82>
 800c4cc:	9a01      	ldr	r2, [sp, #4]
 800c4ce:	f1c0 0320 	rsb	r3, r0, #32
 800c4d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c4d6:	430b      	orrs	r3, r1
 800c4d8:	40c2      	lsrs	r2, r0
 800c4da:	6163      	str	r3, [r4, #20]
 800c4dc:	9201      	str	r2, [sp, #4]
 800c4de:	9b01      	ldr	r3, [sp, #4]
 800c4e0:	61a3      	str	r3, [r4, #24]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	bf14      	ite	ne
 800c4e6:	2202      	movne	r2, #2
 800c4e8:	2201      	moveq	r2, #1
 800c4ea:	6122      	str	r2, [r4, #16]
 800c4ec:	b1d5      	cbz	r5, 800c524 <__d2b+0x98>
 800c4ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c4f2:	4405      	add	r5, r0
 800c4f4:	f8c9 5000 	str.w	r5, [r9]
 800c4f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c4fc:	f8c8 0000 	str.w	r0, [r8]
 800c500:	4620      	mov	r0, r4
 800c502:	b003      	add	sp, #12
 800c504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c508:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c50c:	e7d5      	b.n	800c4ba <__d2b+0x2e>
 800c50e:	6161      	str	r1, [r4, #20]
 800c510:	e7e5      	b.n	800c4de <__d2b+0x52>
 800c512:	a801      	add	r0, sp, #4
 800c514:	f7ff fce8 	bl	800bee8 <__lo0bits>
 800c518:	9b01      	ldr	r3, [sp, #4]
 800c51a:	6163      	str	r3, [r4, #20]
 800c51c:	2201      	movs	r2, #1
 800c51e:	6122      	str	r2, [r4, #16]
 800c520:	3020      	adds	r0, #32
 800c522:	e7e3      	b.n	800c4ec <__d2b+0x60>
 800c524:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c528:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c52c:	f8c9 0000 	str.w	r0, [r9]
 800c530:	6918      	ldr	r0, [r3, #16]
 800c532:	f7ff fcb9 	bl	800bea8 <__hi0bits>
 800c536:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c53a:	e7df      	b.n	800c4fc <__d2b+0x70>
 800c53c:	0800f94c 	.word	0x0800f94c
 800c540:	0800f9dc 	.word	0x0800f9dc

0800c544 <__ratio>:
 800c544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c548:	4688      	mov	r8, r1
 800c54a:	4669      	mov	r1, sp
 800c54c:	4681      	mov	r9, r0
 800c54e:	f7ff ff4d 	bl	800c3ec <__b2d>
 800c552:	a901      	add	r1, sp, #4
 800c554:	4640      	mov	r0, r8
 800c556:	ec55 4b10 	vmov	r4, r5, d0
 800c55a:	f7ff ff47 	bl	800c3ec <__b2d>
 800c55e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c562:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c566:	eba3 0c02 	sub.w	ip, r3, r2
 800c56a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c56e:	1a9b      	subs	r3, r3, r2
 800c570:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c574:	ec51 0b10 	vmov	r0, r1, d0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	bfd6      	itet	le
 800c57c:	460a      	movle	r2, r1
 800c57e:	462a      	movgt	r2, r5
 800c580:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c584:	468b      	mov	fp, r1
 800c586:	462f      	mov	r7, r5
 800c588:	bfd4      	ite	le
 800c58a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c58e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c592:	4620      	mov	r0, r4
 800c594:	ee10 2a10 	vmov	r2, s0
 800c598:	465b      	mov	r3, fp
 800c59a:	4639      	mov	r1, r7
 800c59c:	f7f4 f986 	bl	80008ac <__aeabi_ddiv>
 800c5a0:	ec41 0b10 	vmov	d0, r0, r1
 800c5a4:	b003      	add	sp, #12
 800c5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5aa <__copybits>:
 800c5aa:	3901      	subs	r1, #1
 800c5ac:	b570      	push	{r4, r5, r6, lr}
 800c5ae:	1149      	asrs	r1, r1, #5
 800c5b0:	6914      	ldr	r4, [r2, #16]
 800c5b2:	3101      	adds	r1, #1
 800c5b4:	f102 0314 	add.w	r3, r2, #20
 800c5b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c5bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c5c0:	1f05      	subs	r5, r0, #4
 800c5c2:	42a3      	cmp	r3, r4
 800c5c4:	d30c      	bcc.n	800c5e0 <__copybits+0x36>
 800c5c6:	1aa3      	subs	r3, r4, r2
 800c5c8:	3b11      	subs	r3, #17
 800c5ca:	f023 0303 	bic.w	r3, r3, #3
 800c5ce:	3211      	adds	r2, #17
 800c5d0:	42a2      	cmp	r2, r4
 800c5d2:	bf88      	it	hi
 800c5d4:	2300      	movhi	r3, #0
 800c5d6:	4418      	add	r0, r3
 800c5d8:	2300      	movs	r3, #0
 800c5da:	4288      	cmp	r0, r1
 800c5dc:	d305      	bcc.n	800c5ea <__copybits+0x40>
 800c5de:	bd70      	pop	{r4, r5, r6, pc}
 800c5e0:	f853 6b04 	ldr.w	r6, [r3], #4
 800c5e4:	f845 6f04 	str.w	r6, [r5, #4]!
 800c5e8:	e7eb      	b.n	800c5c2 <__copybits+0x18>
 800c5ea:	f840 3b04 	str.w	r3, [r0], #4
 800c5ee:	e7f4      	b.n	800c5da <__copybits+0x30>

0800c5f0 <__any_on>:
 800c5f0:	f100 0214 	add.w	r2, r0, #20
 800c5f4:	6900      	ldr	r0, [r0, #16]
 800c5f6:	114b      	asrs	r3, r1, #5
 800c5f8:	4298      	cmp	r0, r3
 800c5fa:	b510      	push	{r4, lr}
 800c5fc:	db11      	blt.n	800c622 <__any_on+0x32>
 800c5fe:	dd0a      	ble.n	800c616 <__any_on+0x26>
 800c600:	f011 011f 	ands.w	r1, r1, #31
 800c604:	d007      	beq.n	800c616 <__any_on+0x26>
 800c606:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c60a:	fa24 f001 	lsr.w	r0, r4, r1
 800c60e:	fa00 f101 	lsl.w	r1, r0, r1
 800c612:	428c      	cmp	r4, r1
 800c614:	d10b      	bne.n	800c62e <__any_on+0x3e>
 800c616:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d803      	bhi.n	800c626 <__any_on+0x36>
 800c61e:	2000      	movs	r0, #0
 800c620:	bd10      	pop	{r4, pc}
 800c622:	4603      	mov	r3, r0
 800c624:	e7f7      	b.n	800c616 <__any_on+0x26>
 800c626:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c62a:	2900      	cmp	r1, #0
 800c62c:	d0f5      	beq.n	800c61a <__any_on+0x2a>
 800c62e:	2001      	movs	r0, #1
 800c630:	e7f6      	b.n	800c620 <__any_on+0x30>

0800c632 <_calloc_r>:
 800c632:	b513      	push	{r0, r1, r4, lr}
 800c634:	434a      	muls	r2, r1
 800c636:	4611      	mov	r1, r2
 800c638:	9201      	str	r2, [sp, #4]
 800c63a:	f7fc fa41 	bl	8008ac0 <_malloc_r>
 800c63e:	4604      	mov	r4, r0
 800c640:	b118      	cbz	r0, 800c64a <_calloc_r+0x18>
 800c642:	9a01      	ldr	r2, [sp, #4]
 800c644:	2100      	movs	r1, #0
 800c646:	f7fc fa32 	bl	8008aae <memset>
 800c64a:	4620      	mov	r0, r4
 800c64c:	b002      	add	sp, #8
 800c64e:	bd10      	pop	{r4, pc}

0800c650 <_free_r>:
 800c650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c652:	2900      	cmp	r1, #0
 800c654:	d048      	beq.n	800c6e8 <_free_r+0x98>
 800c656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c65a:	9001      	str	r0, [sp, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f1a1 0404 	sub.w	r4, r1, #4
 800c662:	bfb8      	it	lt
 800c664:	18e4      	addlt	r4, r4, r3
 800c666:	f7ff fb1d 	bl	800bca4 <__malloc_lock>
 800c66a:	4a20      	ldr	r2, [pc, #128]	; (800c6ec <_free_r+0x9c>)
 800c66c:	9801      	ldr	r0, [sp, #4]
 800c66e:	6813      	ldr	r3, [r2, #0]
 800c670:	4615      	mov	r5, r2
 800c672:	b933      	cbnz	r3, 800c682 <_free_r+0x32>
 800c674:	6063      	str	r3, [r4, #4]
 800c676:	6014      	str	r4, [r2, #0]
 800c678:	b003      	add	sp, #12
 800c67a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c67e:	f7ff bb17 	b.w	800bcb0 <__malloc_unlock>
 800c682:	42a3      	cmp	r3, r4
 800c684:	d90b      	bls.n	800c69e <_free_r+0x4e>
 800c686:	6821      	ldr	r1, [r4, #0]
 800c688:	1862      	adds	r2, r4, r1
 800c68a:	4293      	cmp	r3, r2
 800c68c:	bf04      	itt	eq
 800c68e:	681a      	ldreq	r2, [r3, #0]
 800c690:	685b      	ldreq	r3, [r3, #4]
 800c692:	6063      	str	r3, [r4, #4]
 800c694:	bf04      	itt	eq
 800c696:	1852      	addeq	r2, r2, r1
 800c698:	6022      	streq	r2, [r4, #0]
 800c69a:	602c      	str	r4, [r5, #0]
 800c69c:	e7ec      	b.n	800c678 <_free_r+0x28>
 800c69e:	461a      	mov	r2, r3
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	b10b      	cbz	r3, 800c6a8 <_free_r+0x58>
 800c6a4:	42a3      	cmp	r3, r4
 800c6a6:	d9fa      	bls.n	800c69e <_free_r+0x4e>
 800c6a8:	6811      	ldr	r1, [r2, #0]
 800c6aa:	1855      	adds	r5, r2, r1
 800c6ac:	42a5      	cmp	r5, r4
 800c6ae:	d10b      	bne.n	800c6c8 <_free_r+0x78>
 800c6b0:	6824      	ldr	r4, [r4, #0]
 800c6b2:	4421      	add	r1, r4
 800c6b4:	1854      	adds	r4, r2, r1
 800c6b6:	42a3      	cmp	r3, r4
 800c6b8:	6011      	str	r1, [r2, #0]
 800c6ba:	d1dd      	bne.n	800c678 <_free_r+0x28>
 800c6bc:	681c      	ldr	r4, [r3, #0]
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	6053      	str	r3, [r2, #4]
 800c6c2:	4421      	add	r1, r4
 800c6c4:	6011      	str	r1, [r2, #0]
 800c6c6:	e7d7      	b.n	800c678 <_free_r+0x28>
 800c6c8:	d902      	bls.n	800c6d0 <_free_r+0x80>
 800c6ca:	230c      	movs	r3, #12
 800c6cc:	6003      	str	r3, [r0, #0]
 800c6ce:	e7d3      	b.n	800c678 <_free_r+0x28>
 800c6d0:	6825      	ldr	r5, [r4, #0]
 800c6d2:	1961      	adds	r1, r4, r5
 800c6d4:	428b      	cmp	r3, r1
 800c6d6:	bf04      	itt	eq
 800c6d8:	6819      	ldreq	r1, [r3, #0]
 800c6da:	685b      	ldreq	r3, [r3, #4]
 800c6dc:	6063      	str	r3, [r4, #4]
 800c6de:	bf04      	itt	eq
 800c6e0:	1949      	addeq	r1, r1, r5
 800c6e2:	6021      	streq	r1, [r4, #0]
 800c6e4:	6054      	str	r4, [r2, #4]
 800c6e6:	e7c7      	b.n	800c678 <_free_r+0x28>
 800c6e8:	b003      	add	sp, #12
 800c6ea:	bd30      	pop	{r4, r5, pc}
 800c6ec:	2000437c 	.word	0x2000437c

0800c6f0 <__sfputc_r>:
 800c6f0:	6893      	ldr	r3, [r2, #8]
 800c6f2:	3b01      	subs	r3, #1
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	b410      	push	{r4}
 800c6f8:	6093      	str	r3, [r2, #8]
 800c6fa:	da08      	bge.n	800c70e <__sfputc_r+0x1e>
 800c6fc:	6994      	ldr	r4, [r2, #24]
 800c6fe:	42a3      	cmp	r3, r4
 800c700:	db01      	blt.n	800c706 <__sfputc_r+0x16>
 800c702:	290a      	cmp	r1, #10
 800c704:	d103      	bne.n	800c70e <__sfputc_r+0x1e>
 800c706:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c70a:	f7fd bea9 	b.w	800a460 <__swbuf_r>
 800c70e:	6813      	ldr	r3, [r2, #0]
 800c710:	1c58      	adds	r0, r3, #1
 800c712:	6010      	str	r0, [r2, #0]
 800c714:	7019      	strb	r1, [r3, #0]
 800c716:	4608      	mov	r0, r1
 800c718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c71c:	4770      	bx	lr

0800c71e <__sfputs_r>:
 800c71e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c720:	4606      	mov	r6, r0
 800c722:	460f      	mov	r7, r1
 800c724:	4614      	mov	r4, r2
 800c726:	18d5      	adds	r5, r2, r3
 800c728:	42ac      	cmp	r4, r5
 800c72a:	d101      	bne.n	800c730 <__sfputs_r+0x12>
 800c72c:	2000      	movs	r0, #0
 800c72e:	e007      	b.n	800c740 <__sfputs_r+0x22>
 800c730:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c734:	463a      	mov	r2, r7
 800c736:	4630      	mov	r0, r6
 800c738:	f7ff ffda 	bl	800c6f0 <__sfputc_r>
 800c73c:	1c43      	adds	r3, r0, #1
 800c73e:	d1f3      	bne.n	800c728 <__sfputs_r+0xa>
 800c740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c744 <_vfiprintf_r>:
 800c744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c748:	460d      	mov	r5, r1
 800c74a:	b09d      	sub	sp, #116	; 0x74
 800c74c:	4614      	mov	r4, r2
 800c74e:	4698      	mov	r8, r3
 800c750:	4606      	mov	r6, r0
 800c752:	b118      	cbz	r0, 800c75c <_vfiprintf_r+0x18>
 800c754:	6983      	ldr	r3, [r0, #24]
 800c756:	b90b      	cbnz	r3, 800c75c <_vfiprintf_r+0x18>
 800c758:	f7fc f8d6 	bl	8008908 <__sinit>
 800c75c:	4b89      	ldr	r3, [pc, #548]	; (800c984 <_vfiprintf_r+0x240>)
 800c75e:	429d      	cmp	r5, r3
 800c760:	d11b      	bne.n	800c79a <_vfiprintf_r+0x56>
 800c762:	6875      	ldr	r5, [r6, #4]
 800c764:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c766:	07d9      	lsls	r1, r3, #31
 800c768:	d405      	bmi.n	800c776 <_vfiprintf_r+0x32>
 800c76a:	89ab      	ldrh	r3, [r5, #12]
 800c76c:	059a      	lsls	r2, r3, #22
 800c76e:	d402      	bmi.n	800c776 <_vfiprintf_r+0x32>
 800c770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c772:	f7fc f98c 	bl	8008a8e <__retarget_lock_acquire_recursive>
 800c776:	89ab      	ldrh	r3, [r5, #12]
 800c778:	071b      	lsls	r3, r3, #28
 800c77a:	d501      	bpl.n	800c780 <_vfiprintf_r+0x3c>
 800c77c:	692b      	ldr	r3, [r5, #16]
 800c77e:	b9eb      	cbnz	r3, 800c7bc <_vfiprintf_r+0x78>
 800c780:	4629      	mov	r1, r5
 800c782:	4630      	mov	r0, r6
 800c784:	f7fd fed0 	bl	800a528 <__swsetup_r>
 800c788:	b1c0      	cbz	r0, 800c7bc <_vfiprintf_r+0x78>
 800c78a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c78c:	07dc      	lsls	r4, r3, #31
 800c78e:	d50e      	bpl.n	800c7ae <_vfiprintf_r+0x6a>
 800c790:	f04f 30ff 	mov.w	r0, #4294967295
 800c794:	b01d      	add	sp, #116	; 0x74
 800c796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c79a:	4b7b      	ldr	r3, [pc, #492]	; (800c988 <_vfiprintf_r+0x244>)
 800c79c:	429d      	cmp	r5, r3
 800c79e:	d101      	bne.n	800c7a4 <_vfiprintf_r+0x60>
 800c7a0:	68b5      	ldr	r5, [r6, #8]
 800c7a2:	e7df      	b.n	800c764 <_vfiprintf_r+0x20>
 800c7a4:	4b79      	ldr	r3, [pc, #484]	; (800c98c <_vfiprintf_r+0x248>)
 800c7a6:	429d      	cmp	r5, r3
 800c7a8:	bf08      	it	eq
 800c7aa:	68f5      	ldreq	r5, [r6, #12]
 800c7ac:	e7da      	b.n	800c764 <_vfiprintf_r+0x20>
 800c7ae:	89ab      	ldrh	r3, [r5, #12]
 800c7b0:	0598      	lsls	r0, r3, #22
 800c7b2:	d4ed      	bmi.n	800c790 <_vfiprintf_r+0x4c>
 800c7b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7b6:	f7fc f96b 	bl	8008a90 <__retarget_lock_release_recursive>
 800c7ba:	e7e9      	b.n	800c790 <_vfiprintf_r+0x4c>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	9309      	str	r3, [sp, #36]	; 0x24
 800c7c0:	2320      	movs	r3, #32
 800c7c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7ca:	2330      	movs	r3, #48	; 0x30
 800c7cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c990 <_vfiprintf_r+0x24c>
 800c7d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7d4:	f04f 0901 	mov.w	r9, #1
 800c7d8:	4623      	mov	r3, r4
 800c7da:	469a      	mov	sl, r3
 800c7dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7e0:	b10a      	cbz	r2, 800c7e6 <_vfiprintf_r+0xa2>
 800c7e2:	2a25      	cmp	r2, #37	; 0x25
 800c7e4:	d1f9      	bne.n	800c7da <_vfiprintf_r+0x96>
 800c7e6:	ebba 0b04 	subs.w	fp, sl, r4
 800c7ea:	d00b      	beq.n	800c804 <_vfiprintf_r+0xc0>
 800c7ec:	465b      	mov	r3, fp
 800c7ee:	4622      	mov	r2, r4
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	f7ff ff93 	bl	800c71e <__sfputs_r>
 800c7f8:	3001      	adds	r0, #1
 800c7fa:	f000 80aa 	beq.w	800c952 <_vfiprintf_r+0x20e>
 800c7fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c800:	445a      	add	r2, fp
 800c802:	9209      	str	r2, [sp, #36]	; 0x24
 800c804:	f89a 3000 	ldrb.w	r3, [sl]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f000 80a2 	beq.w	800c952 <_vfiprintf_r+0x20e>
 800c80e:	2300      	movs	r3, #0
 800c810:	f04f 32ff 	mov.w	r2, #4294967295
 800c814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c818:	f10a 0a01 	add.w	sl, sl, #1
 800c81c:	9304      	str	r3, [sp, #16]
 800c81e:	9307      	str	r3, [sp, #28]
 800c820:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c824:	931a      	str	r3, [sp, #104]	; 0x68
 800c826:	4654      	mov	r4, sl
 800c828:	2205      	movs	r2, #5
 800c82a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c82e:	4858      	ldr	r0, [pc, #352]	; (800c990 <_vfiprintf_r+0x24c>)
 800c830:	f7f3 fd06 	bl	8000240 <memchr>
 800c834:	9a04      	ldr	r2, [sp, #16]
 800c836:	b9d8      	cbnz	r0, 800c870 <_vfiprintf_r+0x12c>
 800c838:	06d1      	lsls	r1, r2, #27
 800c83a:	bf44      	itt	mi
 800c83c:	2320      	movmi	r3, #32
 800c83e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c842:	0713      	lsls	r3, r2, #28
 800c844:	bf44      	itt	mi
 800c846:	232b      	movmi	r3, #43	; 0x2b
 800c848:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c84c:	f89a 3000 	ldrb.w	r3, [sl]
 800c850:	2b2a      	cmp	r3, #42	; 0x2a
 800c852:	d015      	beq.n	800c880 <_vfiprintf_r+0x13c>
 800c854:	9a07      	ldr	r2, [sp, #28]
 800c856:	4654      	mov	r4, sl
 800c858:	2000      	movs	r0, #0
 800c85a:	f04f 0c0a 	mov.w	ip, #10
 800c85e:	4621      	mov	r1, r4
 800c860:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c864:	3b30      	subs	r3, #48	; 0x30
 800c866:	2b09      	cmp	r3, #9
 800c868:	d94e      	bls.n	800c908 <_vfiprintf_r+0x1c4>
 800c86a:	b1b0      	cbz	r0, 800c89a <_vfiprintf_r+0x156>
 800c86c:	9207      	str	r2, [sp, #28]
 800c86e:	e014      	b.n	800c89a <_vfiprintf_r+0x156>
 800c870:	eba0 0308 	sub.w	r3, r0, r8
 800c874:	fa09 f303 	lsl.w	r3, r9, r3
 800c878:	4313      	orrs	r3, r2
 800c87a:	9304      	str	r3, [sp, #16]
 800c87c:	46a2      	mov	sl, r4
 800c87e:	e7d2      	b.n	800c826 <_vfiprintf_r+0xe2>
 800c880:	9b03      	ldr	r3, [sp, #12]
 800c882:	1d19      	adds	r1, r3, #4
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	9103      	str	r1, [sp, #12]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	bfbb      	ittet	lt
 800c88c:	425b      	neglt	r3, r3
 800c88e:	f042 0202 	orrlt.w	r2, r2, #2
 800c892:	9307      	strge	r3, [sp, #28]
 800c894:	9307      	strlt	r3, [sp, #28]
 800c896:	bfb8      	it	lt
 800c898:	9204      	strlt	r2, [sp, #16]
 800c89a:	7823      	ldrb	r3, [r4, #0]
 800c89c:	2b2e      	cmp	r3, #46	; 0x2e
 800c89e:	d10c      	bne.n	800c8ba <_vfiprintf_r+0x176>
 800c8a0:	7863      	ldrb	r3, [r4, #1]
 800c8a2:	2b2a      	cmp	r3, #42	; 0x2a
 800c8a4:	d135      	bne.n	800c912 <_vfiprintf_r+0x1ce>
 800c8a6:	9b03      	ldr	r3, [sp, #12]
 800c8a8:	1d1a      	adds	r2, r3, #4
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	9203      	str	r2, [sp, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	bfb8      	it	lt
 800c8b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8b6:	3402      	adds	r4, #2
 800c8b8:	9305      	str	r3, [sp, #20]
 800c8ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c9a0 <_vfiprintf_r+0x25c>
 800c8be:	7821      	ldrb	r1, [r4, #0]
 800c8c0:	2203      	movs	r2, #3
 800c8c2:	4650      	mov	r0, sl
 800c8c4:	f7f3 fcbc 	bl	8000240 <memchr>
 800c8c8:	b140      	cbz	r0, 800c8dc <_vfiprintf_r+0x198>
 800c8ca:	2340      	movs	r3, #64	; 0x40
 800c8cc:	eba0 000a 	sub.w	r0, r0, sl
 800c8d0:	fa03 f000 	lsl.w	r0, r3, r0
 800c8d4:	9b04      	ldr	r3, [sp, #16]
 800c8d6:	4303      	orrs	r3, r0
 800c8d8:	3401      	adds	r4, #1
 800c8da:	9304      	str	r3, [sp, #16]
 800c8dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8e0:	482c      	ldr	r0, [pc, #176]	; (800c994 <_vfiprintf_r+0x250>)
 800c8e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8e6:	2206      	movs	r2, #6
 800c8e8:	f7f3 fcaa 	bl	8000240 <memchr>
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	d03f      	beq.n	800c970 <_vfiprintf_r+0x22c>
 800c8f0:	4b29      	ldr	r3, [pc, #164]	; (800c998 <_vfiprintf_r+0x254>)
 800c8f2:	bb1b      	cbnz	r3, 800c93c <_vfiprintf_r+0x1f8>
 800c8f4:	9b03      	ldr	r3, [sp, #12]
 800c8f6:	3307      	adds	r3, #7
 800c8f8:	f023 0307 	bic.w	r3, r3, #7
 800c8fc:	3308      	adds	r3, #8
 800c8fe:	9303      	str	r3, [sp, #12]
 800c900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c902:	443b      	add	r3, r7
 800c904:	9309      	str	r3, [sp, #36]	; 0x24
 800c906:	e767      	b.n	800c7d8 <_vfiprintf_r+0x94>
 800c908:	fb0c 3202 	mla	r2, ip, r2, r3
 800c90c:	460c      	mov	r4, r1
 800c90e:	2001      	movs	r0, #1
 800c910:	e7a5      	b.n	800c85e <_vfiprintf_r+0x11a>
 800c912:	2300      	movs	r3, #0
 800c914:	3401      	adds	r4, #1
 800c916:	9305      	str	r3, [sp, #20]
 800c918:	4619      	mov	r1, r3
 800c91a:	f04f 0c0a 	mov.w	ip, #10
 800c91e:	4620      	mov	r0, r4
 800c920:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c924:	3a30      	subs	r2, #48	; 0x30
 800c926:	2a09      	cmp	r2, #9
 800c928:	d903      	bls.n	800c932 <_vfiprintf_r+0x1ee>
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d0c5      	beq.n	800c8ba <_vfiprintf_r+0x176>
 800c92e:	9105      	str	r1, [sp, #20]
 800c930:	e7c3      	b.n	800c8ba <_vfiprintf_r+0x176>
 800c932:	fb0c 2101 	mla	r1, ip, r1, r2
 800c936:	4604      	mov	r4, r0
 800c938:	2301      	movs	r3, #1
 800c93a:	e7f0      	b.n	800c91e <_vfiprintf_r+0x1da>
 800c93c:	ab03      	add	r3, sp, #12
 800c93e:	9300      	str	r3, [sp, #0]
 800c940:	462a      	mov	r2, r5
 800c942:	4b16      	ldr	r3, [pc, #88]	; (800c99c <_vfiprintf_r+0x258>)
 800c944:	a904      	add	r1, sp, #16
 800c946:	4630      	mov	r0, r6
 800c948:	f7fc f9b4 	bl	8008cb4 <_printf_float>
 800c94c:	4607      	mov	r7, r0
 800c94e:	1c78      	adds	r0, r7, #1
 800c950:	d1d6      	bne.n	800c900 <_vfiprintf_r+0x1bc>
 800c952:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c954:	07d9      	lsls	r1, r3, #31
 800c956:	d405      	bmi.n	800c964 <_vfiprintf_r+0x220>
 800c958:	89ab      	ldrh	r3, [r5, #12]
 800c95a:	059a      	lsls	r2, r3, #22
 800c95c:	d402      	bmi.n	800c964 <_vfiprintf_r+0x220>
 800c95e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c960:	f7fc f896 	bl	8008a90 <__retarget_lock_release_recursive>
 800c964:	89ab      	ldrh	r3, [r5, #12]
 800c966:	065b      	lsls	r3, r3, #25
 800c968:	f53f af12 	bmi.w	800c790 <_vfiprintf_r+0x4c>
 800c96c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c96e:	e711      	b.n	800c794 <_vfiprintf_r+0x50>
 800c970:	ab03      	add	r3, sp, #12
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	462a      	mov	r2, r5
 800c976:	4b09      	ldr	r3, [pc, #36]	; (800c99c <_vfiprintf_r+0x258>)
 800c978:	a904      	add	r1, sp, #16
 800c97a:	4630      	mov	r0, r6
 800c97c:	f7fc fc3e 	bl	80091fc <_printf_i>
 800c980:	e7e4      	b.n	800c94c <_vfiprintf_r+0x208>
 800c982:	bf00      	nop
 800c984:	0800f6fc 	.word	0x0800f6fc
 800c988:	0800f71c 	.word	0x0800f71c
 800c98c:	0800f6dc 	.word	0x0800f6dc
 800c990:	0800fb3c 	.word	0x0800fb3c
 800c994:	0800fb46 	.word	0x0800fb46
 800c998:	08008cb5 	.word	0x08008cb5
 800c99c:	0800c71f 	.word	0x0800c71f
 800c9a0:	0800fb42 	.word	0x0800fb42

0800c9a4 <_read_r>:
 800c9a4:	b538      	push	{r3, r4, r5, lr}
 800c9a6:	4d07      	ldr	r5, [pc, #28]	; (800c9c4 <_read_r+0x20>)
 800c9a8:	4604      	mov	r4, r0
 800c9aa:	4608      	mov	r0, r1
 800c9ac:	4611      	mov	r1, r2
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	602a      	str	r2, [r5, #0]
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	f7f6 f982 	bl	8002cbc <_read>
 800c9b8:	1c43      	adds	r3, r0, #1
 800c9ba:	d102      	bne.n	800c9c2 <_read_r+0x1e>
 800c9bc:	682b      	ldr	r3, [r5, #0]
 800c9be:	b103      	cbz	r3, 800c9c2 <_read_r+0x1e>
 800c9c0:	6023      	str	r3, [r4, #0]
 800c9c2:	bd38      	pop	{r3, r4, r5, pc}
 800c9c4:	20004610 	.word	0x20004610

0800c9c8 <nan>:
 800c9c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c9d0 <nan+0x8>
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	00000000 	.word	0x00000000
 800c9d4:	7ff80000 	.word	0x7ff80000

0800c9d8 <strncmp>:
 800c9d8:	b510      	push	{r4, lr}
 800c9da:	b16a      	cbz	r2, 800c9f8 <strncmp+0x20>
 800c9dc:	3901      	subs	r1, #1
 800c9de:	1884      	adds	r4, r0, r2
 800c9e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c9e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d103      	bne.n	800c9f4 <strncmp+0x1c>
 800c9ec:	42a0      	cmp	r0, r4
 800c9ee:	d001      	beq.n	800c9f4 <strncmp+0x1c>
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d1f5      	bne.n	800c9e0 <strncmp+0x8>
 800c9f4:	1a98      	subs	r0, r3, r2
 800c9f6:	bd10      	pop	{r4, pc}
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	e7fc      	b.n	800c9f6 <strncmp+0x1e>

0800c9fc <__ascii_wctomb>:
 800c9fc:	b149      	cbz	r1, 800ca12 <__ascii_wctomb+0x16>
 800c9fe:	2aff      	cmp	r2, #255	; 0xff
 800ca00:	bf85      	ittet	hi
 800ca02:	238a      	movhi	r3, #138	; 0x8a
 800ca04:	6003      	strhi	r3, [r0, #0]
 800ca06:	700a      	strbls	r2, [r1, #0]
 800ca08:	f04f 30ff 	movhi.w	r0, #4294967295
 800ca0c:	bf98      	it	ls
 800ca0e:	2001      	movls	r0, #1
 800ca10:	4770      	bx	lr
 800ca12:	4608      	mov	r0, r1
 800ca14:	4770      	bx	lr
	...

0800ca18 <__assert_func>:
 800ca18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca1a:	4614      	mov	r4, r2
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	4b09      	ldr	r3, [pc, #36]	; (800ca44 <__assert_func+0x2c>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4605      	mov	r5, r0
 800ca24:	68d8      	ldr	r0, [r3, #12]
 800ca26:	b14c      	cbz	r4, 800ca3c <__assert_func+0x24>
 800ca28:	4b07      	ldr	r3, [pc, #28]	; (800ca48 <__assert_func+0x30>)
 800ca2a:	9100      	str	r1, [sp, #0]
 800ca2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca30:	4906      	ldr	r1, [pc, #24]	; (800ca4c <__assert_func+0x34>)
 800ca32:	462b      	mov	r3, r5
 800ca34:	f000 f80e 	bl	800ca54 <fiprintf>
 800ca38:	f000 f840 	bl	800cabc <abort>
 800ca3c:	4b04      	ldr	r3, [pc, #16]	; (800ca50 <__assert_func+0x38>)
 800ca3e:	461c      	mov	r4, r3
 800ca40:	e7f3      	b.n	800ca2a <__assert_func+0x12>
 800ca42:	bf00      	nop
 800ca44:	20000048 	.word	0x20000048
 800ca48:	0800fb4d 	.word	0x0800fb4d
 800ca4c:	0800fb5a 	.word	0x0800fb5a
 800ca50:	0800fb88 	.word	0x0800fb88

0800ca54 <fiprintf>:
 800ca54:	b40e      	push	{r1, r2, r3}
 800ca56:	b503      	push	{r0, r1, lr}
 800ca58:	4601      	mov	r1, r0
 800ca5a:	ab03      	add	r3, sp, #12
 800ca5c:	4805      	ldr	r0, [pc, #20]	; (800ca74 <fiprintf+0x20>)
 800ca5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca62:	6800      	ldr	r0, [r0, #0]
 800ca64:	9301      	str	r3, [sp, #4]
 800ca66:	f7ff fe6d 	bl	800c744 <_vfiprintf_r>
 800ca6a:	b002      	add	sp, #8
 800ca6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca70:	b003      	add	sp, #12
 800ca72:	4770      	bx	lr
 800ca74:	20000048 	.word	0x20000048

0800ca78 <_fstat_r>:
 800ca78:	b538      	push	{r3, r4, r5, lr}
 800ca7a:	4d07      	ldr	r5, [pc, #28]	; (800ca98 <_fstat_r+0x20>)
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	4604      	mov	r4, r0
 800ca80:	4608      	mov	r0, r1
 800ca82:	4611      	mov	r1, r2
 800ca84:	602b      	str	r3, [r5, #0]
 800ca86:	f7f6 f95e 	bl	8002d46 <_fstat>
 800ca8a:	1c43      	adds	r3, r0, #1
 800ca8c:	d102      	bne.n	800ca94 <_fstat_r+0x1c>
 800ca8e:	682b      	ldr	r3, [r5, #0]
 800ca90:	b103      	cbz	r3, 800ca94 <_fstat_r+0x1c>
 800ca92:	6023      	str	r3, [r4, #0]
 800ca94:	bd38      	pop	{r3, r4, r5, pc}
 800ca96:	bf00      	nop
 800ca98:	20004610 	.word	0x20004610

0800ca9c <_isatty_r>:
 800ca9c:	b538      	push	{r3, r4, r5, lr}
 800ca9e:	4d06      	ldr	r5, [pc, #24]	; (800cab8 <_isatty_r+0x1c>)
 800caa0:	2300      	movs	r3, #0
 800caa2:	4604      	mov	r4, r0
 800caa4:	4608      	mov	r0, r1
 800caa6:	602b      	str	r3, [r5, #0]
 800caa8:	f7f6 f95d 	bl	8002d66 <_isatty>
 800caac:	1c43      	adds	r3, r0, #1
 800caae:	d102      	bne.n	800cab6 <_isatty_r+0x1a>
 800cab0:	682b      	ldr	r3, [r5, #0]
 800cab2:	b103      	cbz	r3, 800cab6 <_isatty_r+0x1a>
 800cab4:	6023      	str	r3, [r4, #0]
 800cab6:	bd38      	pop	{r3, r4, r5, pc}
 800cab8:	20004610 	.word	0x20004610

0800cabc <abort>:
 800cabc:	b508      	push	{r3, lr}
 800cabe:	2006      	movs	r0, #6
 800cac0:	f000 f82c 	bl	800cb1c <raise>
 800cac4:	2001      	movs	r0, #1
 800cac6:	f7f6 f8ef 	bl	8002ca8 <_exit>

0800caca <_raise_r>:
 800caca:	291f      	cmp	r1, #31
 800cacc:	b538      	push	{r3, r4, r5, lr}
 800cace:	4604      	mov	r4, r0
 800cad0:	460d      	mov	r5, r1
 800cad2:	d904      	bls.n	800cade <_raise_r+0x14>
 800cad4:	2316      	movs	r3, #22
 800cad6:	6003      	str	r3, [r0, #0]
 800cad8:	f04f 30ff 	mov.w	r0, #4294967295
 800cadc:	bd38      	pop	{r3, r4, r5, pc}
 800cade:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cae0:	b112      	cbz	r2, 800cae8 <_raise_r+0x1e>
 800cae2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cae6:	b94b      	cbnz	r3, 800cafc <_raise_r+0x32>
 800cae8:	4620      	mov	r0, r4
 800caea:	f000 f831 	bl	800cb50 <_getpid_r>
 800caee:	462a      	mov	r2, r5
 800caf0:	4601      	mov	r1, r0
 800caf2:	4620      	mov	r0, r4
 800caf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caf8:	f000 b818 	b.w	800cb2c <_kill_r>
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d00a      	beq.n	800cb16 <_raise_r+0x4c>
 800cb00:	1c59      	adds	r1, r3, #1
 800cb02:	d103      	bne.n	800cb0c <_raise_r+0x42>
 800cb04:	2316      	movs	r3, #22
 800cb06:	6003      	str	r3, [r0, #0]
 800cb08:	2001      	movs	r0, #1
 800cb0a:	e7e7      	b.n	800cadc <_raise_r+0x12>
 800cb0c:	2400      	movs	r4, #0
 800cb0e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb12:	4628      	mov	r0, r5
 800cb14:	4798      	blx	r3
 800cb16:	2000      	movs	r0, #0
 800cb18:	e7e0      	b.n	800cadc <_raise_r+0x12>
	...

0800cb1c <raise>:
 800cb1c:	4b02      	ldr	r3, [pc, #8]	; (800cb28 <raise+0xc>)
 800cb1e:	4601      	mov	r1, r0
 800cb20:	6818      	ldr	r0, [r3, #0]
 800cb22:	f7ff bfd2 	b.w	800caca <_raise_r>
 800cb26:	bf00      	nop
 800cb28:	20000048 	.word	0x20000048

0800cb2c <_kill_r>:
 800cb2c:	b538      	push	{r3, r4, r5, lr}
 800cb2e:	4d07      	ldr	r5, [pc, #28]	; (800cb4c <_kill_r+0x20>)
 800cb30:	2300      	movs	r3, #0
 800cb32:	4604      	mov	r4, r0
 800cb34:	4608      	mov	r0, r1
 800cb36:	4611      	mov	r1, r2
 800cb38:	602b      	str	r3, [r5, #0]
 800cb3a:	f7f6 f8a5 	bl	8002c88 <_kill>
 800cb3e:	1c43      	adds	r3, r0, #1
 800cb40:	d102      	bne.n	800cb48 <_kill_r+0x1c>
 800cb42:	682b      	ldr	r3, [r5, #0]
 800cb44:	b103      	cbz	r3, 800cb48 <_kill_r+0x1c>
 800cb46:	6023      	str	r3, [r4, #0]
 800cb48:	bd38      	pop	{r3, r4, r5, pc}
 800cb4a:	bf00      	nop
 800cb4c:	20004610 	.word	0x20004610

0800cb50 <_getpid_r>:
 800cb50:	f7f6 b892 	b.w	8002c78 <_getpid>
 800cb54:	0000      	movs	r0, r0
	...

0800cb58 <atan>:
 800cb58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb5c:	ec55 4b10 	vmov	r4, r5, d0
 800cb60:	4bc3      	ldr	r3, [pc, #780]	; (800ce70 <atan+0x318>)
 800cb62:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cb66:	429e      	cmp	r6, r3
 800cb68:	46ab      	mov	fp, r5
 800cb6a:	dd18      	ble.n	800cb9e <atan+0x46>
 800cb6c:	4bc1      	ldr	r3, [pc, #772]	; (800ce74 <atan+0x31c>)
 800cb6e:	429e      	cmp	r6, r3
 800cb70:	dc01      	bgt.n	800cb76 <atan+0x1e>
 800cb72:	d109      	bne.n	800cb88 <atan+0x30>
 800cb74:	b144      	cbz	r4, 800cb88 <atan+0x30>
 800cb76:	4622      	mov	r2, r4
 800cb78:	462b      	mov	r3, r5
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	f7f3 fbb5 	bl	80002ec <__adddf3>
 800cb82:	4604      	mov	r4, r0
 800cb84:	460d      	mov	r5, r1
 800cb86:	e006      	b.n	800cb96 <atan+0x3e>
 800cb88:	f1bb 0f00 	cmp.w	fp, #0
 800cb8c:	f300 8131 	bgt.w	800cdf2 <atan+0x29a>
 800cb90:	a59b      	add	r5, pc, #620	; (adr r5, 800ce00 <atan+0x2a8>)
 800cb92:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb96:	ec45 4b10 	vmov	d0, r4, r5
 800cb9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb9e:	4bb6      	ldr	r3, [pc, #728]	; (800ce78 <atan+0x320>)
 800cba0:	429e      	cmp	r6, r3
 800cba2:	dc14      	bgt.n	800cbce <atan+0x76>
 800cba4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cba8:	429e      	cmp	r6, r3
 800cbaa:	dc0d      	bgt.n	800cbc8 <atan+0x70>
 800cbac:	a396      	add	r3, pc, #600	; (adr r3, 800ce08 <atan+0x2b0>)
 800cbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb2:	ee10 0a10 	vmov	r0, s0
 800cbb6:	4629      	mov	r1, r5
 800cbb8:	f7f3 fb98 	bl	80002ec <__adddf3>
 800cbbc:	4baf      	ldr	r3, [pc, #700]	; (800ce7c <atan+0x324>)
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f7f3 ffda 	bl	8000b78 <__aeabi_dcmpgt>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d1e6      	bne.n	800cb96 <atan+0x3e>
 800cbc8:	f04f 3aff 	mov.w	sl, #4294967295
 800cbcc:	e02b      	b.n	800cc26 <atan+0xce>
 800cbce:	f000 f9b3 	bl	800cf38 <fabs>
 800cbd2:	4bab      	ldr	r3, [pc, #684]	; (800ce80 <atan+0x328>)
 800cbd4:	429e      	cmp	r6, r3
 800cbd6:	ec55 4b10 	vmov	r4, r5, d0
 800cbda:	f300 80bf 	bgt.w	800cd5c <atan+0x204>
 800cbde:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cbe2:	429e      	cmp	r6, r3
 800cbe4:	f300 80a0 	bgt.w	800cd28 <atan+0x1d0>
 800cbe8:	ee10 2a10 	vmov	r2, s0
 800cbec:	ee10 0a10 	vmov	r0, s0
 800cbf0:	462b      	mov	r3, r5
 800cbf2:	4629      	mov	r1, r5
 800cbf4:	f7f3 fb7a 	bl	80002ec <__adddf3>
 800cbf8:	4ba0      	ldr	r3, [pc, #640]	; (800ce7c <atan+0x324>)
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f7f3 fb74 	bl	80002e8 <__aeabi_dsub>
 800cc00:	2200      	movs	r2, #0
 800cc02:	4606      	mov	r6, r0
 800cc04:	460f      	mov	r7, r1
 800cc06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	4629      	mov	r1, r5
 800cc0e:	f7f3 fb6d 	bl	80002ec <__adddf3>
 800cc12:	4602      	mov	r2, r0
 800cc14:	460b      	mov	r3, r1
 800cc16:	4630      	mov	r0, r6
 800cc18:	4639      	mov	r1, r7
 800cc1a:	f7f3 fe47 	bl	80008ac <__aeabi_ddiv>
 800cc1e:	f04f 0a00 	mov.w	sl, #0
 800cc22:	4604      	mov	r4, r0
 800cc24:	460d      	mov	r5, r1
 800cc26:	4622      	mov	r2, r4
 800cc28:	462b      	mov	r3, r5
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	4629      	mov	r1, r5
 800cc2e:	f7f3 fd13 	bl	8000658 <__aeabi_dmul>
 800cc32:	4602      	mov	r2, r0
 800cc34:	460b      	mov	r3, r1
 800cc36:	4680      	mov	r8, r0
 800cc38:	4689      	mov	r9, r1
 800cc3a:	f7f3 fd0d 	bl	8000658 <__aeabi_dmul>
 800cc3e:	a374      	add	r3, pc, #464	; (adr r3, 800ce10 <atan+0x2b8>)
 800cc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc44:	4606      	mov	r6, r0
 800cc46:	460f      	mov	r7, r1
 800cc48:	f7f3 fd06 	bl	8000658 <__aeabi_dmul>
 800cc4c:	a372      	add	r3, pc, #456	; (adr r3, 800ce18 <atan+0x2c0>)
 800cc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc52:	f7f3 fb4b 	bl	80002ec <__adddf3>
 800cc56:	4632      	mov	r2, r6
 800cc58:	463b      	mov	r3, r7
 800cc5a:	f7f3 fcfd 	bl	8000658 <__aeabi_dmul>
 800cc5e:	a370      	add	r3, pc, #448	; (adr r3, 800ce20 <atan+0x2c8>)
 800cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc64:	f7f3 fb42 	bl	80002ec <__adddf3>
 800cc68:	4632      	mov	r2, r6
 800cc6a:	463b      	mov	r3, r7
 800cc6c:	f7f3 fcf4 	bl	8000658 <__aeabi_dmul>
 800cc70:	a36d      	add	r3, pc, #436	; (adr r3, 800ce28 <atan+0x2d0>)
 800cc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc76:	f7f3 fb39 	bl	80002ec <__adddf3>
 800cc7a:	4632      	mov	r2, r6
 800cc7c:	463b      	mov	r3, r7
 800cc7e:	f7f3 fceb 	bl	8000658 <__aeabi_dmul>
 800cc82:	a36b      	add	r3, pc, #428	; (adr r3, 800ce30 <atan+0x2d8>)
 800cc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc88:	f7f3 fb30 	bl	80002ec <__adddf3>
 800cc8c:	4632      	mov	r2, r6
 800cc8e:	463b      	mov	r3, r7
 800cc90:	f7f3 fce2 	bl	8000658 <__aeabi_dmul>
 800cc94:	a368      	add	r3, pc, #416	; (adr r3, 800ce38 <atan+0x2e0>)
 800cc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9a:	f7f3 fb27 	bl	80002ec <__adddf3>
 800cc9e:	4642      	mov	r2, r8
 800cca0:	464b      	mov	r3, r9
 800cca2:	f7f3 fcd9 	bl	8000658 <__aeabi_dmul>
 800cca6:	a366      	add	r3, pc, #408	; (adr r3, 800ce40 <atan+0x2e8>)
 800cca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccac:	4680      	mov	r8, r0
 800ccae:	4689      	mov	r9, r1
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	4639      	mov	r1, r7
 800ccb4:	f7f3 fcd0 	bl	8000658 <__aeabi_dmul>
 800ccb8:	a363      	add	r3, pc, #396	; (adr r3, 800ce48 <atan+0x2f0>)
 800ccba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbe:	f7f3 fb13 	bl	80002e8 <__aeabi_dsub>
 800ccc2:	4632      	mov	r2, r6
 800ccc4:	463b      	mov	r3, r7
 800ccc6:	f7f3 fcc7 	bl	8000658 <__aeabi_dmul>
 800ccca:	a361      	add	r3, pc, #388	; (adr r3, 800ce50 <atan+0x2f8>)
 800cccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd0:	f7f3 fb0a 	bl	80002e8 <__aeabi_dsub>
 800ccd4:	4632      	mov	r2, r6
 800ccd6:	463b      	mov	r3, r7
 800ccd8:	f7f3 fcbe 	bl	8000658 <__aeabi_dmul>
 800ccdc:	a35e      	add	r3, pc, #376	; (adr r3, 800ce58 <atan+0x300>)
 800ccde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce2:	f7f3 fb01 	bl	80002e8 <__aeabi_dsub>
 800cce6:	4632      	mov	r2, r6
 800cce8:	463b      	mov	r3, r7
 800ccea:	f7f3 fcb5 	bl	8000658 <__aeabi_dmul>
 800ccee:	a35c      	add	r3, pc, #368	; (adr r3, 800ce60 <atan+0x308>)
 800ccf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf4:	f7f3 faf8 	bl	80002e8 <__aeabi_dsub>
 800ccf8:	4632      	mov	r2, r6
 800ccfa:	463b      	mov	r3, r7
 800ccfc:	f7f3 fcac 	bl	8000658 <__aeabi_dmul>
 800cd00:	4602      	mov	r2, r0
 800cd02:	460b      	mov	r3, r1
 800cd04:	4640      	mov	r0, r8
 800cd06:	4649      	mov	r1, r9
 800cd08:	f7f3 faf0 	bl	80002ec <__adddf3>
 800cd0c:	4622      	mov	r2, r4
 800cd0e:	462b      	mov	r3, r5
 800cd10:	f7f3 fca2 	bl	8000658 <__aeabi_dmul>
 800cd14:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cd18:	4602      	mov	r2, r0
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	d14b      	bne.n	800cdb6 <atan+0x25e>
 800cd1e:	4620      	mov	r0, r4
 800cd20:	4629      	mov	r1, r5
 800cd22:	f7f3 fae1 	bl	80002e8 <__aeabi_dsub>
 800cd26:	e72c      	b.n	800cb82 <atan+0x2a>
 800cd28:	ee10 0a10 	vmov	r0, s0
 800cd2c:	4b53      	ldr	r3, [pc, #332]	; (800ce7c <atan+0x324>)
 800cd2e:	2200      	movs	r2, #0
 800cd30:	4629      	mov	r1, r5
 800cd32:	f7f3 fad9 	bl	80002e8 <__aeabi_dsub>
 800cd36:	4b51      	ldr	r3, [pc, #324]	; (800ce7c <atan+0x324>)
 800cd38:	4606      	mov	r6, r0
 800cd3a:	460f      	mov	r7, r1
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	4620      	mov	r0, r4
 800cd40:	4629      	mov	r1, r5
 800cd42:	f7f3 fad3 	bl	80002ec <__adddf3>
 800cd46:	4602      	mov	r2, r0
 800cd48:	460b      	mov	r3, r1
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	4639      	mov	r1, r7
 800cd4e:	f7f3 fdad 	bl	80008ac <__aeabi_ddiv>
 800cd52:	f04f 0a01 	mov.w	sl, #1
 800cd56:	4604      	mov	r4, r0
 800cd58:	460d      	mov	r5, r1
 800cd5a:	e764      	b.n	800cc26 <atan+0xce>
 800cd5c:	4b49      	ldr	r3, [pc, #292]	; (800ce84 <atan+0x32c>)
 800cd5e:	429e      	cmp	r6, r3
 800cd60:	da1d      	bge.n	800cd9e <atan+0x246>
 800cd62:	ee10 0a10 	vmov	r0, s0
 800cd66:	4b48      	ldr	r3, [pc, #288]	; (800ce88 <atan+0x330>)
 800cd68:	2200      	movs	r2, #0
 800cd6a:	4629      	mov	r1, r5
 800cd6c:	f7f3 fabc 	bl	80002e8 <__aeabi_dsub>
 800cd70:	4b45      	ldr	r3, [pc, #276]	; (800ce88 <atan+0x330>)
 800cd72:	4606      	mov	r6, r0
 800cd74:	460f      	mov	r7, r1
 800cd76:	2200      	movs	r2, #0
 800cd78:	4620      	mov	r0, r4
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	f7f3 fc6c 	bl	8000658 <__aeabi_dmul>
 800cd80:	4b3e      	ldr	r3, [pc, #248]	; (800ce7c <atan+0x324>)
 800cd82:	2200      	movs	r2, #0
 800cd84:	f7f3 fab2 	bl	80002ec <__adddf3>
 800cd88:	4602      	mov	r2, r0
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	4630      	mov	r0, r6
 800cd8e:	4639      	mov	r1, r7
 800cd90:	f7f3 fd8c 	bl	80008ac <__aeabi_ddiv>
 800cd94:	f04f 0a02 	mov.w	sl, #2
 800cd98:	4604      	mov	r4, r0
 800cd9a:	460d      	mov	r5, r1
 800cd9c:	e743      	b.n	800cc26 <atan+0xce>
 800cd9e:	462b      	mov	r3, r5
 800cda0:	ee10 2a10 	vmov	r2, s0
 800cda4:	4939      	ldr	r1, [pc, #228]	; (800ce8c <atan+0x334>)
 800cda6:	2000      	movs	r0, #0
 800cda8:	f7f3 fd80 	bl	80008ac <__aeabi_ddiv>
 800cdac:	f04f 0a03 	mov.w	sl, #3
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	460d      	mov	r5, r1
 800cdb4:	e737      	b.n	800cc26 <atan+0xce>
 800cdb6:	4b36      	ldr	r3, [pc, #216]	; (800ce90 <atan+0x338>)
 800cdb8:	4e36      	ldr	r6, [pc, #216]	; (800ce94 <atan+0x33c>)
 800cdba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cdbe:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800cdc2:	e9da 2300 	ldrd	r2, r3, [sl]
 800cdc6:	f7f3 fa8f 	bl	80002e8 <__aeabi_dsub>
 800cdca:	4622      	mov	r2, r4
 800cdcc:	462b      	mov	r3, r5
 800cdce:	f7f3 fa8b 	bl	80002e8 <__aeabi_dsub>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cdda:	f7f3 fa85 	bl	80002e8 <__aeabi_dsub>
 800cdde:	f1bb 0f00 	cmp.w	fp, #0
 800cde2:	4604      	mov	r4, r0
 800cde4:	460d      	mov	r5, r1
 800cde6:	f6bf aed6 	bge.w	800cb96 <atan+0x3e>
 800cdea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cdee:	461d      	mov	r5, r3
 800cdf0:	e6d1      	b.n	800cb96 <atan+0x3e>
 800cdf2:	a51d      	add	r5, pc, #116	; (adr r5, 800ce68 <atan+0x310>)
 800cdf4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cdf8:	e6cd      	b.n	800cb96 <atan+0x3e>
 800cdfa:	bf00      	nop
 800cdfc:	f3af 8000 	nop.w
 800ce00:	54442d18 	.word	0x54442d18
 800ce04:	bff921fb 	.word	0xbff921fb
 800ce08:	8800759c 	.word	0x8800759c
 800ce0c:	7e37e43c 	.word	0x7e37e43c
 800ce10:	e322da11 	.word	0xe322da11
 800ce14:	3f90ad3a 	.word	0x3f90ad3a
 800ce18:	24760deb 	.word	0x24760deb
 800ce1c:	3fa97b4b 	.word	0x3fa97b4b
 800ce20:	a0d03d51 	.word	0xa0d03d51
 800ce24:	3fb10d66 	.word	0x3fb10d66
 800ce28:	c54c206e 	.word	0xc54c206e
 800ce2c:	3fb745cd 	.word	0x3fb745cd
 800ce30:	920083ff 	.word	0x920083ff
 800ce34:	3fc24924 	.word	0x3fc24924
 800ce38:	5555550d 	.word	0x5555550d
 800ce3c:	3fd55555 	.word	0x3fd55555
 800ce40:	2c6a6c2f 	.word	0x2c6a6c2f
 800ce44:	bfa2b444 	.word	0xbfa2b444
 800ce48:	52defd9a 	.word	0x52defd9a
 800ce4c:	3fadde2d 	.word	0x3fadde2d
 800ce50:	af749a6d 	.word	0xaf749a6d
 800ce54:	3fb3b0f2 	.word	0x3fb3b0f2
 800ce58:	fe231671 	.word	0xfe231671
 800ce5c:	3fbc71c6 	.word	0x3fbc71c6
 800ce60:	9998ebc4 	.word	0x9998ebc4
 800ce64:	3fc99999 	.word	0x3fc99999
 800ce68:	54442d18 	.word	0x54442d18
 800ce6c:	3ff921fb 	.word	0x3ff921fb
 800ce70:	440fffff 	.word	0x440fffff
 800ce74:	7ff00000 	.word	0x7ff00000
 800ce78:	3fdbffff 	.word	0x3fdbffff
 800ce7c:	3ff00000 	.word	0x3ff00000
 800ce80:	3ff2ffff 	.word	0x3ff2ffff
 800ce84:	40038000 	.word	0x40038000
 800ce88:	3ff80000 	.word	0x3ff80000
 800ce8c:	bff00000 	.word	0xbff00000
 800ce90:	0800fbb0 	.word	0x0800fbb0
 800ce94:	0800fb90 	.word	0x0800fb90

0800ce98 <cos>:
 800ce98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce9a:	ec53 2b10 	vmov	r2, r3, d0
 800ce9e:	4824      	ldr	r0, [pc, #144]	; (800cf30 <cos+0x98>)
 800cea0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cea4:	4281      	cmp	r1, r0
 800cea6:	dc06      	bgt.n	800ceb6 <cos+0x1e>
 800cea8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800cf28 <cos+0x90>
 800ceac:	f001 fb84 	bl	800e5b8 <__kernel_cos>
 800ceb0:	ec51 0b10 	vmov	r0, r1, d0
 800ceb4:	e007      	b.n	800cec6 <cos+0x2e>
 800ceb6:	481f      	ldr	r0, [pc, #124]	; (800cf34 <cos+0x9c>)
 800ceb8:	4281      	cmp	r1, r0
 800ceba:	dd09      	ble.n	800ced0 <cos+0x38>
 800cebc:	ee10 0a10 	vmov	r0, s0
 800cec0:	4619      	mov	r1, r3
 800cec2:	f7f3 fa11 	bl	80002e8 <__aeabi_dsub>
 800cec6:	ec41 0b10 	vmov	d0, r0, r1
 800ceca:	b005      	add	sp, #20
 800cecc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ced0:	4668      	mov	r0, sp
 800ced2:	f001 f8b1 	bl	800e038 <__ieee754_rem_pio2>
 800ced6:	f000 0003 	and.w	r0, r0, #3
 800ceda:	2801      	cmp	r0, #1
 800cedc:	d007      	beq.n	800ceee <cos+0x56>
 800cede:	2802      	cmp	r0, #2
 800cee0:	d012      	beq.n	800cf08 <cos+0x70>
 800cee2:	b9c0      	cbnz	r0, 800cf16 <cos+0x7e>
 800cee4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cee8:	ed9d 0b00 	vldr	d0, [sp]
 800ceec:	e7de      	b.n	800ceac <cos+0x14>
 800ceee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cef2:	ed9d 0b00 	vldr	d0, [sp]
 800cef6:	f001 ff67 	bl	800edc8 <__kernel_sin>
 800cefa:	ec53 2b10 	vmov	r2, r3, d0
 800cefe:	ee10 0a10 	vmov	r0, s0
 800cf02:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cf06:	e7de      	b.n	800cec6 <cos+0x2e>
 800cf08:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf0c:	ed9d 0b00 	vldr	d0, [sp]
 800cf10:	f001 fb52 	bl	800e5b8 <__kernel_cos>
 800cf14:	e7f1      	b.n	800cefa <cos+0x62>
 800cf16:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf1a:	ed9d 0b00 	vldr	d0, [sp]
 800cf1e:	2001      	movs	r0, #1
 800cf20:	f001 ff52 	bl	800edc8 <__kernel_sin>
 800cf24:	e7c4      	b.n	800ceb0 <cos+0x18>
 800cf26:	bf00      	nop
	...
 800cf30:	3fe921fb 	.word	0x3fe921fb
 800cf34:	7fefffff 	.word	0x7fefffff

0800cf38 <fabs>:
 800cf38:	ec51 0b10 	vmov	r0, r1, d0
 800cf3c:	ee10 2a10 	vmov	r2, s0
 800cf40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cf44:	ec43 2b10 	vmov	d0, r2, r3
 800cf48:	4770      	bx	lr
 800cf4a:	0000      	movs	r0, r0
 800cf4c:	0000      	movs	r0, r0
	...

0800cf50 <sin>:
 800cf50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf52:	ec53 2b10 	vmov	r2, r3, d0
 800cf56:	4826      	ldr	r0, [pc, #152]	; (800cff0 <sin+0xa0>)
 800cf58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cf5c:	4281      	cmp	r1, r0
 800cf5e:	dc07      	bgt.n	800cf70 <sin+0x20>
 800cf60:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800cfe8 <sin+0x98>
 800cf64:	2000      	movs	r0, #0
 800cf66:	f001 ff2f 	bl	800edc8 <__kernel_sin>
 800cf6a:	ec51 0b10 	vmov	r0, r1, d0
 800cf6e:	e007      	b.n	800cf80 <sin+0x30>
 800cf70:	4820      	ldr	r0, [pc, #128]	; (800cff4 <sin+0xa4>)
 800cf72:	4281      	cmp	r1, r0
 800cf74:	dd09      	ble.n	800cf8a <sin+0x3a>
 800cf76:	ee10 0a10 	vmov	r0, s0
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	f7f3 f9b4 	bl	80002e8 <__aeabi_dsub>
 800cf80:	ec41 0b10 	vmov	d0, r0, r1
 800cf84:	b005      	add	sp, #20
 800cf86:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf8a:	4668      	mov	r0, sp
 800cf8c:	f001 f854 	bl	800e038 <__ieee754_rem_pio2>
 800cf90:	f000 0003 	and.w	r0, r0, #3
 800cf94:	2801      	cmp	r0, #1
 800cf96:	d008      	beq.n	800cfaa <sin+0x5a>
 800cf98:	2802      	cmp	r0, #2
 800cf9a:	d00d      	beq.n	800cfb8 <sin+0x68>
 800cf9c:	b9d0      	cbnz	r0, 800cfd4 <sin+0x84>
 800cf9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfa2:	ed9d 0b00 	vldr	d0, [sp]
 800cfa6:	2001      	movs	r0, #1
 800cfa8:	e7dd      	b.n	800cf66 <sin+0x16>
 800cfaa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfae:	ed9d 0b00 	vldr	d0, [sp]
 800cfb2:	f001 fb01 	bl	800e5b8 <__kernel_cos>
 800cfb6:	e7d8      	b.n	800cf6a <sin+0x1a>
 800cfb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfbc:	ed9d 0b00 	vldr	d0, [sp]
 800cfc0:	2001      	movs	r0, #1
 800cfc2:	f001 ff01 	bl	800edc8 <__kernel_sin>
 800cfc6:	ec53 2b10 	vmov	r2, r3, d0
 800cfca:	ee10 0a10 	vmov	r0, s0
 800cfce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cfd2:	e7d5      	b.n	800cf80 <sin+0x30>
 800cfd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfd8:	ed9d 0b00 	vldr	d0, [sp]
 800cfdc:	f001 faec 	bl	800e5b8 <__kernel_cos>
 800cfe0:	e7f1      	b.n	800cfc6 <sin+0x76>
 800cfe2:	bf00      	nop
 800cfe4:	f3af 8000 	nop.w
	...
 800cff0:	3fe921fb 	.word	0x3fe921fb
 800cff4:	7fefffff 	.word	0x7fefffff

0800cff8 <atan2>:
 800cff8:	f000 b91e 	b.w	800d238 <__ieee754_atan2>

0800cffc <fmod>:
 800cffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffe:	ed2d 8b02 	vpush	{d8}
 800d002:	ec57 6b10 	vmov	r6, r7, d0
 800d006:	ec55 4b11 	vmov	r4, r5, d1
 800d00a:	f000 f9df 	bl	800d3cc <__ieee754_fmod>
 800d00e:	4b18      	ldr	r3, [pc, #96]	; (800d070 <fmod+0x74>)
 800d010:	eeb0 8a40 	vmov.f32	s16, s0
 800d014:	eef0 8a60 	vmov.f32	s17, s1
 800d018:	f993 3000 	ldrsb.w	r3, [r3]
 800d01c:	3301      	adds	r3, #1
 800d01e:	d020      	beq.n	800d062 <fmod+0x66>
 800d020:	4622      	mov	r2, r4
 800d022:	462b      	mov	r3, r5
 800d024:	4620      	mov	r0, r4
 800d026:	4629      	mov	r1, r5
 800d028:	f7f3 fdb0 	bl	8000b8c <__aeabi_dcmpun>
 800d02c:	b9c8      	cbnz	r0, 800d062 <fmod+0x66>
 800d02e:	4632      	mov	r2, r6
 800d030:	463b      	mov	r3, r7
 800d032:	4630      	mov	r0, r6
 800d034:	4639      	mov	r1, r7
 800d036:	f7f3 fda9 	bl	8000b8c <__aeabi_dcmpun>
 800d03a:	b990      	cbnz	r0, 800d062 <fmod+0x66>
 800d03c:	2200      	movs	r2, #0
 800d03e:	2300      	movs	r3, #0
 800d040:	4620      	mov	r0, r4
 800d042:	4629      	mov	r1, r5
 800d044:	f7f3 fd70 	bl	8000b28 <__aeabi_dcmpeq>
 800d048:	b158      	cbz	r0, 800d062 <fmod+0x66>
 800d04a:	f7fb fbff 	bl	800884c <__errno>
 800d04e:	2321      	movs	r3, #33	; 0x21
 800d050:	6003      	str	r3, [r0, #0]
 800d052:	2200      	movs	r2, #0
 800d054:	2300      	movs	r3, #0
 800d056:	4610      	mov	r0, r2
 800d058:	4619      	mov	r1, r3
 800d05a:	f7f3 fc27 	bl	80008ac <__aeabi_ddiv>
 800d05e:	ec41 0b18 	vmov	d8, r0, r1
 800d062:	eeb0 0a48 	vmov.f32	s0, s16
 800d066:	eef0 0a68 	vmov.f32	s1, s17
 800d06a:	ecbd 8b02 	vpop	{d8}
 800d06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d070:	2000021c 	.word	0x2000021c

0800d074 <pow>:
 800d074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d078:	ec59 8b10 	vmov	r8, r9, d0
 800d07c:	ec57 6b11 	vmov	r6, r7, d1
 800d080:	f000 fab6 	bl	800d5f0 <__ieee754_pow>
 800d084:	4b4e      	ldr	r3, [pc, #312]	; (800d1c0 <pow+0x14c>)
 800d086:	f993 3000 	ldrsb.w	r3, [r3]
 800d08a:	3301      	adds	r3, #1
 800d08c:	ec55 4b10 	vmov	r4, r5, d0
 800d090:	d015      	beq.n	800d0be <pow+0x4a>
 800d092:	4632      	mov	r2, r6
 800d094:	463b      	mov	r3, r7
 800d096:	4630      	mov	r0, r6
 800d098:	4639      	mov	r1, r7
 800d09a:	f7f3 fd77 	bl	8000b8c <__aeabi_dcmpun>
 800d09e:	b970      	cbnz	r0, 800d0be <pow+0x4a>
 800d0a0:	4642      	mov	r2, r8
 800d0a2:	464b      	mov	r3, r9
 800d0a4:	4640      	mov	r0, r8
 800d0a6:	4649      	mov	r1, r9
 800d0a8:	f7f3 fd70 	bl	8000b8c <__aeabi_dcmpun>
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	b148      	cbz	r0, 800d0c6 <pow+0x52>
 800d0b2:	4630      	mov	r0, r6
 800d0b4:	4639      	mov	r1, r7
 800d0b6:	f7f3 fd37 	bl	8000b28 <__aeabi_dcmpeq>
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	d17d      	bne.n	800d1ba <pow+0x146>
 800d0be:	ec45 4b10 	vmov	d0, r4, r5
 800d0c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0c6:	4640      	mov	r0, r8
 800d0c8:	4649      	mov	r1, r9
 800d0ca:	f7f3 fd2d 	bl	8000b28 <__aeabi_dcmpeq>
 800d0ce:	b1e0      	cbz	r0, 800d10a <pow+0x96>
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	4630      	mov	r0, r6
 800d0d6:	4639      	mov	r1, r7
 800d0d8:	f7f3 fd26 	bl	8000b28 <__aeabi_dcmpeq>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	d16c      	bne.n	800d1ba <pow+0x146>
 800d0e0:	ec47 6b10 	vmov	d0, r6, r7
 800d0e4:	f001 ff2e 	bl	800ef44 <finite>
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	d0e8      	beq.n	800d0be <pow+0x4a>
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	4639      	mov	r1, r7
 800d0f4:	f7f3 fd22 	bl	8000b3c <__aeabi_dcmplt>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	d0e0      	beq.n	800d0be <pow+0x4a>
 800d0fc:	f7fb fba6 	bl	800884c <__errno>
 800d100:	2321      	movs	r3, #33	; 0x21
 800d102:	6003      	str	r3, [r0, #0]
 800d104:	2400      	movs	r4, #0
 800d106:	4d2f      	ldr	r5, [pc, #188]	; (800d1c4 <pow+0x150>)
 800d108:	e7d9      	b.n	800d0be <pow+0x4a>
 800d10a:	ec45 4b10 	vmov	d0, r4, r5
 800d10e:	f001 ff19 	bl	800ef44 <finite>
 800d112:	bbb8      	cbnz	r0, 800d184 <pow+0x110>
 800d114:	ec49 8b10 	vmov	d0, r8, r9
 800d118:	f001 ff14 	bl	800ef44 <finite>
 800d11c:	b390      	cbz	r0, 800d184 <pow+0x110>
 800d11e:	ec47 6b10 	vmov	d0, r6, r7
 800d122:	f001 ff0f 	bl	800ef44 <finite>
 800d126:	b368      	cbz	r0, 800d184 <pow+0x110>
 800d128:	4622      	mov	r2, r4
 800d12a:	462b      	mov	r3, r5
 800d12c:	4620      	mov	r0, r4
 800d12e:	4629      	mov	r1, r5
 800d130:	f7f3 fd2c 	bl	8000b8c <__aeabi_dcmpun>
 800d134:	b160      	cbz	r0, 800d150 <pow+0xdc>
 800d136:	f7fb fb89 	bl	800884c <__errno>
 800d13a:	2321      	movs	r3, #33	; 0x21
 800d13c:	6003      	str	r3, [r0, #0]
 800d13e:	2200      	movs	r2, #0
 800d140:	2300      	movs	r3, #0
 800d142:	4610      	mov	r0, r2
 800d144:	4619      	mov	r1, r3
 800d146:	f7f3 fbb1 	bl	80008ac <__aeabi_ddiv>
 800d14a:	4604      	mov	r4, r0
 800d14c:	460d      	mov	r5, r1
 800d14e:	e7b6      	b.n	800d0be <pow+0x4a>
 800d150:	f7fb fb7c 	bl	800884c <__errno>
 800d154:	2322      	movs	r3, #34	; 0x22
 800d156:	6003      	str	r3, [r0, #0]
 800d158:	2200      	movs	r2, #0
 800d15a:	2300      	movs	r3, #0
 800d15c:	4640      	mov	r0, r8
 800d15e:	4649      	mov	r1, r9
 800d160:	f7f3 fcec 	bl	8000b3c <__aeabi_dcmplt>
 800d164:	2400      	movs	r4, #0
 800d166:	b158      	cbz	r0, 800d180 <pow+0x10c>
 800d168:	ec47 6b10 	vmov	d0, r6, r7
 800d16c:	f001 ff78 	bl	800f060 <rint>
 800d170:	4632      	mov	r2, r6
 800d172:	ec51 0b10 	vmov	r0, r1, d0
 800d176:	463b      	mov	r3, r7
 800d178:	f7f3 fcd6 	bl	8000b28 <__aeabi_dcmpeq>
 800d17c:	2800      	cmp	r0, #0
 800d17e:	d0c2      	beq.n	800d106 <pow+0x92>
 800d180:	4d11      	ldr	r5, [pc, #68]	; (800d1c8 <pow+0x154>)
 800d182:	e79c      	b.n	800d0be <pow+0x4a>
 800d184:	2200      	movs	r2, #0
 800d186:	2300      	movs	r3, #0
 800d188:	4620      	mov	r0, r4
 800d18a:	4629      	mov	r1, r5
 800d18c:	f7f3 fccc 	bl	8000b28 <__aeabi_dcmpeq>
 800d190:	2800      	cmp	r0, #0
 800d192:	d094      	beq.n	800d0be <pow+0x4a>
 800d194:	ec49 8b10 	vmov	d0, r8, r9
 800d198:	f001 fed4 	bl	800ef44 <finite>
 800d19c:	2800      	cmp	r0, #0
 800d19e:	d08e      	beq.n	800d0be <pow+0x4a>
 800d1a0:	ec47 6b10 	vmov	d0, r6, r7
 800d1a4:	f001 fece 	bl	800ef44 <finite>
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	d088      	beq.n	800d0be <pow+0x4a>
 800d1ac:	f7fb fb4e 	bl	800884c <__errno>
 800d1b0:	2322      	movs	r3, #34	; 0x22
 800d1b2:	6003      	str	r3, [r0, #0]
 800d1b4:	2400      	movs	r4, #0
 800d1b6:	2500      	movs	r5, #0
 800d1b8:	e781      	b.n	800d0be <pow+0x4a>
 800d1ba:	4d04      	ldr	r5, [pc, #16]	; (800d1cc <pow+0x158>)
 800d1bc:	2400      	movs	r4, #0
 800d1be:	e77e      	b.n	800d0be <pow+0x4a>
 800d1c0:	2000021c 	.word	0x2000021c
 800d1c4:	fff00000 	.word	0xfff00000
 800d1c8:	7ff00000 	.word	0x7ff00000
 800d1cc:	3ff00000 	.word	0x3ff00000

0800d1d0 <sqrt>:
 800d1d0:	b538      	push	{r3, r4, r5, lr}
 800d1d2:	ed2d 8b02 	vpush	{d8}
 800d1d6:	ec55 4b10 	vmov	r4, r5, d0
 800d1da:	f001 f937 	bl	800e44c <__ieee754_sqrt>
 800d1de:	4b15      	ldr	r3, [pc, #84]	; (800d234 <sqrt+0x64>)
 800d1e0:	eeb0 8a40 	vmov.f32	s16, s0
 800d1e4:	eef0 8a60 	vmov.f32	s17, s1
 800d1e8:	f993 3000 	ldrsb.w	r3, [r3]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	d019      	beq.n	800d224 <sqrt+0x54>
 800d1f0:	4622      	mov	r2, r4
 800d1f2:	462b      	mov	r3, r5
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	4629      	mov	r1, r5
 800d1f8:	f7f3 fcc8 	bl	8000b8c <__aeabi_dcmpun>
 800d1fc:	b990      	cbnz	r0, 800d224 <sqrt+0x54>
 800d1fe:	2200      	movs	r2, #0
 800d200:	2300      	movs	r3, #0
 800d202:	4620      	mov	r0, r4
 800d204:	4629      	mov	r1, r5
 800d206:	f7f3 fc99 	bl	8000b3c <__aeabi_dcmplt>
 800d20a:	b158      	cbz	r0, 800d224 <sqrt+0x54>
 800d20c:	f7fb fb1e 	bl	800884c <__errno>
 800d210:	2321      	movs	r3, #33	; 0x21
 800d212:	6003      	str	r3, [r0, #0]
 800d214:	2200      	movs	r2, #0
 800d216:	2300      	movs	r3, #0
 800d218:	4610      	mov	r0, r2
 800d21a:	4619      	mov	r1, r3
 800d21c:	f7f3 fb46 	bl	80008ac <__aeabi_ddiv>
 800d220:	ec41 0b18 	vmov	d8, r0, r1
 800d224:	eeb0 0a48 	vmov.f32	s0, s16
 800d228:	eef0 0a68 	vmov.f32	s1, s17
 800d22c:	ecbd 8b02 	vpop	{d8}
 800d230:	bd38      	pop	{r3, r4, r5, pc}
 800d232:	bf00      	nop
 800d234:	2000021c 	.word	0x2000021c

0800d238 <__ieee754_atan2>:
 800d238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d23c:	ec57 6b11 	vmov	r6, r7, d1
 800d240:	4273      	negs	r3, r6
 800d242:	f8df e184 	ldr.w	lr, [pc, #388]	; 800d3c8 <__ieee754_atan2+0x190>
 800d246:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d24a:	4333      	orrs	r3, r6
 800d24c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d250:	4573      	cmp	r3, lr
 800d252:	ec51 0b10 	vmov	r0, r1, d0
 800d256:	ee11 8a10 	vmov	r8, s2
 800d25a:	d80a      	bhi.n	800d272 <__ieee754_atan2+0x3a>
 800d25c:	4244      	negs	r4, r0
 800d25e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d262:	4304      	orrs	r4, r0
 800d264:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d268:	4574      	cmp	r4, lr
 800d26a:	ee10 9a10 	vmov	r9, s0
 800d26e:	468c      	mov	ip, r1
 800d270:	d907      	bls.n	800d282 <__ieee754_atan2+0x4a>
 800d272:	4632      	mov	r2, r6
 800d274:	463b      	mov	r3, r7
 800d276:	f7f3 f839 	bl	80002ec <__adddf3>
 800d27a:	ec41 0b10 	vmov	d0, r0, r1
 800d27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d282:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d286:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d28a:	4334      	orrs	r4, r6
 800d28c:	d103      	bne.n	800d296 <__ieee754_atan2+0x5e>
 800d28e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d292:	f7ff bc61 	b.w	800cb58 <atan>
 800d296:	17bc      	asrs	r4, r7, #30
 800d298:	f004 0402 	and.w	r4, r4, #2
 800d29c:	ea53 0909 	orrs.w	r9, r3, r9
 800d2a0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d2a4:	d107      	bne.n	800d2b6 <__ieee754_atan2+0x7e>
 800d2a6:	2c02      	cmp	r4, #2
 800d2a8:	d060      	beq.n	800d36c <__ieee754_atan2+0x134>
 800d2aa:	2c03      	cmp	r4, #3
 800d2ac:	d1e5      	bne.n	800d27a <__ieee754_atan2+0x42>
 800d2ae:	a142      	add	r1, pc, #264	; (adr r1, 800d3b8 <__ieee754_atan2+0x180>)
 800d2b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2b4:	e7e1      	b.n	800d27a <__ieee754_atan2+0x42>
 800d2b6:	ea52 0808 	orrs.w	r8, r2, r8
 800d2ba:	d106      	bne.n	800d2ca <__ieee754_atan2+0x92>
 800d2bc:	f1bc 0f00 	cmp.w	ip, #0
 800d2c0:	da5f      	bge.n	800d382 <__ieee754_atan2+0x14a>
 800d2c2:	a13f      	add	r1, pc, #252	; (adr r1, 800d3c0 <__ieee754_atan2+0x188>)
 800d2c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2c8:	e7d7      	b.n	800d27a <__ieee754_atan2+0x42>
 800d2ca:	4572      	cmp	r2, lr
 800d2cc:	d10f      	bne.n	800d2ee <__ieee754_atan2+0xb6>
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	f104 34ff 	add.w	r4, r4, #4294967295
 800d2d4:	d107      	bne.n	800d2e6 <__ieee754_atan2+0xae>
 800d2d6:	2c02      	cmp	r4, #2
 800d2d8:	d84c      	bhi.n	800d374 <__ieee754_atan2+0x13c>
 800d2da:	4b35      	ldr	r3, [pc, #212]	; (800d3b0 <__ieee754_atan2+0x178>)
 800d2dc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d2e0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d2e4:	e7c9      	b.n	800d27a <__ieee754_atan2+0x42>
 800d2e6:	2c02      	cmp	r4, #2
 800d2e8:	d848      	bhi.n	800d37c <__ieee754_atan2+0x144>
 800d2ea:	4b32      	ldr	r3, [pc, #200]	; (800d3b4 <__ieee754_atan2+0x17c>)
 800d2ec:	e7f6      	b.n	800d2dc <__ieee754_atan2+0xa4>
 800d2ee:	4573      	cmp	r3, lr
 800d2f0:	d0e4      	beq.n	800d2bc <__ieee754_atan2+0x84>
 800d2f2:	1a9b      	subs	r3, r3, r2
 800d2f4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d2f8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d2fc:	da1e      	bge.n	800d33c <__ieee754_atan2+0x104>
 800d2fe:	2f00      	cmp	r7, #0
 800d300:	da01      	bge.n	800d306 <__ieee754_atan2+0xce>
 800d302:	323c      	adds	r2, #60	; 0x3c
 800d304:	db1e      	blt.n	800d344 <__ieee754_atan2+0x10c>
 800d306:	4632      	mov	r2, r6
 800d308:	463b      	mov	r3, r7
 800d30a:	f7f3 facf 	bl	80008ac <__aeabi_ddiv>
 800d30e:	ec41 0b10 	vmov	d0, r0, r1
 800d312:	f7ff fe11 	bl	800cf38 <fabs>
 800d316:	f7ff fc1f 	bl	800cb58 <atan>
 800d31a:	ec51 0b10 	vmov	r0, r1, d0
 800d31e:	2c01      	cmp	r4, #1
 800d320:	d013      	beq.n	800d34a <__ieee754_atan2+0x112>
 800d322:	2c02      	cmp	r4, #2
 800d324:	d015      	beq.n	800d352 <__ieee754_atan2+0x11a>
 800d326:	2c00      	cmp	r4, #0
 800d328:	d0a7      	beq.n	800d27a <__ieee754_atan2+0x42>
 800d32a:	a319      	add	r3, pc, #100	; (adr r3, 800d390 <__ieee754_atan2+0x158>)
 800d32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d330:	f7f2 ffda 	bl	80002e8 <__aeabi_dsub>
 800d334:	a318      	add	r3, pc, #96	; (adr r3, 800d398 <__ieee754_atan2+0x160>)
 800d336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33a:	e014      	b.n	800d366 <__ieee754_atan2+0x12e>
 800d33c:	a118      	add	r1, pc, #96	; (adr r1, 800d3a0 <__ieee754_atan2+0x168>)
 800d33e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d342:	e7ec      	b.n	800d31e <__ieee754_atan2+0xe6>
 800d344:	2000      	movs	r0, #0
 800d346:	2100      	movs	r1, #0
 800d348:	e7e9      	b.n	800d31e <__ieee754_atan2+0xe6>
 800d34a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d34e:	4619      	mov	r1, r3
 800d350:	e793      	b.n	800d27a <__ieee754_atan2+0x42>
 800d352:	a30f      	add	r3, pc, #60	; (adr r3, 800d390 <__ieee754_atan2+0x158>)
 800d354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d358:	f7f2 ffc6 	bl	80002e8 <__aeabi_dsub>
 800d35c:	4602      	mov	r2, r0
 800d35e:	460b      	mov	r3, r1
 800d360:	a10d      	add	r1, pc, #52	; (adr r1, 800d398 <__ieee754_atan2+0x160>)
 800d362:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d366:	f7f2 ffbf 	bl	80002e8 <__aeabi_dsub>
 800d36a:	e786      	b.n	800d27a <__ieee754_atan2+0x42>
 800d36c:	a10a      	add	r1, pc, #40	; (adr r1, 800d398 <__ieee754_atan2+0x160>)
 800d36e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d372:	e782      	b.n	800d27a <__ieee754_atan2+0x42>
 800d374:	a10c      	add	r1, pc, #48	; (adr r1, 800d3a8 <__ieee754_atan2+0x170>)
 800d376:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d37a:	e77e      	b.n	800d27a <__ieee754_atan2+0x42>
 800d37c:	2000      	movs	r0, #0
 800d37e:	2100      	movs	r1, #0
 800d380:	e77b      	b.n	800d27a <__ieee754_atan2+0x42>
 800d382:	a107      	add	r1, pc, #28	; (adr r1, 800d3a0 <__ieee754_atan2+0x168>)
 800d384:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d388:	e777      	b.n	800d27a <__ieee754_atan2+0x42>
 800d38a:	bf00      	nop
 800d38c:	f3af 8000 	nop.w
 800d390:	33145c07 	.word	0x33145c07
 800d394:	3ca1a626 	.word	0x3ca1a626
 800d398:	54442d18 	.word	0x54442d18
 800d39c:	400921fb 	.word	0x400921fb
 800d3a0:	54442d18 	.word	0x54442d18
 800d3a4:	3ff921fb 	.word	0x3ff921fb
 800d3a8:	54442d18 	.word	0x54442d18
 800d3ac:	3fe921fb 	.word	0x3fe921fb
 800d3b0:	0800fbd0 	.word	0x0800fbd0
 800d3b4:	0800fbe8 	.word	0x0800fbe8
 800d3b8:	54442d18 	.word	0x54442d18
 800d3bc:	c00921fb 	.word	0xc00921fb
 800d3c0:	54442d18 	.word	0x54442d18
 800d3c4:	bff921fb 	.word	0xbff921fb
 800d3c8:	7ff00000 	.word	0x7ff00000

0800d3cc <__ieee754_fmod>:
 800d3cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d0:	ec53 2b11 	vmov	r2, r3, d1
 800d3d4:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800d3d8:	ea5e 0402 	orrs.w	r4, lr, r2
 800d3dc:	ec51 0b10 	vmov	r0, r1, d0
 800d3e0:	ee11 7a10 	vmov	r7, s2
 800d3e4:	ee11 ca10 	vmov	ip, s2
 800d3e8:	461e      	mov	r6, r3
 800d3ea:	d00d      	beq.n	800d408 <__ieee754_fmod+0x3c>
 800d3ec:	4c7a      	ldr	r4, [pc, #488]	; (800d5d8 <__ieee754_fmod+0x20c>)
 800d3ee:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800d3f2:	45a0      	cmp	r8, r4
 800d3f4:	4689      	mov	r9, r1
 800d3f6:	dc07      	bgt.n	800d408 <__ieee754_fmod+0x3c>
 800d3f8:	4254      	negs	r4, r2
 800d3fa:	4d78      	ldr	r5, [pc, #480]	; (800d5dc <__ieee754_fmod+0x210>)
 800d3fc:	4314      	orrs	r4, r2
 800d3fe:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800d402:	42ac      	cmp	r4, r5
 800d404:	46ab      	mov	fp, r5
 800d406:	d909      	bls.n	800d41c <__ieee754_fmod+0x50>
 800d408:	f7f3 f926 	bl	8000658 <__aeabi_dmul>
 800d40c:	4602      	mov	r2, r0
 800d40e:	460b      	mov	r3, r1
 800d410:	f7f3 fa4c 	bl	80008ac <__aeabi_ddiv>
 800d414:	ec41 0b10 	vmov	d0, r0, r1
 800d418:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d41c:	45f0      	cmp	r8, lr
 800d41e:	ee10 aa10 	vmov	sl, s0
 800d422:	ee10 4a10 	vmov	r4, s0
 800d426:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d42a:	dc0a      	bgt.n	800d442 <__ieee754_fmod+0x76>
 800d42c:	dbf2      	blt.n	800d414 <__ieee754_fmod+0x48>
 800d42e:	4290      	cmp	r0, r2
 800d430:	d3f0      	bcc.n	800d414 <__ieee754_fmod+0x48>
 800d432:	d106      	bne.n	800d442 <__ieee754_fmod+0x76>
 800d434:	4a6a      	ldr	r2, [pc, #424]	; (800d5e0 <__ieee754_fmod+0x214>)
 800d436:	0fed      	lsrs	r5, r5, #31
 800d438:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d43c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d440:	e7e8      	b.n	800d414 <__ieee754_fmod+0x48>
 800d442:	ea19 0f0b 	tst.w	r9, fp
 800d446:	d14a      	bne.n	800d4de <__ieee754_fmod+0x112>
 800d448:	f1b8 0f00 	cmp.w	r8, #0
 800d44c:	d13f      	bne.n	800d4ce <__ieee754_fmod+0x102>
 800d44e:	4965      	ldr	r1, [pc, #404]	; (800d5e4 <__ieee754_fmod+0x218>)
 800d450:	4653      	mov	r3, sl
 800d452:	2b00      	cmp	r3, #0
 800d454:	dc38      	bgt.n	800d4c8 <__ieee754_fmod+0xfc>
 800d456:	4b61      	ldr	r3, [pc, #388]	; (800d5dc <__ieee754_fmod+0x210>)
 800d458:	4033      	ands	r3, r6
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d14f      	bne.n	800d4fe <__ieee754_fmod+0x132>
 800d45e:	f1be 0f00 	cmp.w	lr, #0
 800d462:	d144      	bne.n	800d4ee <__ieee754_fmod+0x122>
 800d464:	4a5f      	ldr	r2, [pc, #380]	; (800d5e4 <__ieee754_fmod+0x218>)
 800d466:	463b      	mov	r3, r7
 800d468:	2b00      	cmp	r3, #0
 800d46a:	dc3d      	bgt.n	800d4e8 <__ieee754_fmod+0x11c>
 800d46c:	4b5e      	ldr	r3, [pc, #376]	; (800d5e8 <__ieee754_fmod+0x21c>)
 800d46e:	4299      	cmp	r1, r3
 800d470:	db4a      	blt.n	800d508 <__ieee754_fmod+0x13c>
 800d472:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d47a:	485b      	ldr	r0, [pc, #364]	; (800d5e8 <__ieee754_fmod+0x21c>)
 800d47c:	4282      	cmp	r2, r0
 800d47e:	db57      	blt.n	800d530 <__ieee754_fmod+0x164>
 800d480:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800d484:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800d488:	1a89      	subs	r1, r1, r2
 800d48a:	1b98      	subs	r0, r3, r6
 800d48c:	eba4 070c 	sub.w	r7, r4, ip
 800d490:	2900      	cmp	r1, #0
 800d492:	d164      	bne.n	800d55e <__ieee754_fmod+0x192>
 800d494:	4564      	cmp	r4, ip
 800d496:	bf38      	it	cc
 800d498:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800d49c:	2800      	cmp	r0, #0
 800d49e:	bfa4      	itt	ge
 800d4a0:	463c      	movge	r4, r7
 800d4a2:	4603      	movge	r3, r0
 800d4a4:	ea53 0104 	orrs.w	r1, r3, r4
 800d4a8:	d0c4      	beq.n	800d434 <__ieee754_fmod+0x68>
 800d4aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4ae:	db6b      	blt.n	800d588 <__ieee754_fmod+0x1bc>
 800d4b0:	494d      	ldr	r1, [pc, #308]	; (800d5e8 <__ieee754_fmod+0x21c>)
 800d4b2:	428a      	cmp	r2, r1
 800d4b4:	db6e      	blt.n	800d594 <__ieee754_fmod+0x1c8>
 800d4b6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d4ba:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800d4be:	431d      	orrs	r5, r3
 800d4c0:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	e7a5      	b.n	800d414 <__ieee754_fmod+0x48>
 800d4c8:	3901      	subs	r1, #1
 800d4ca:	005b      	lsls	r3, r3, #1
 800d4cc:	e7c1      	b.n	800d452 <__ieee754_fmod+0x86>
 800d4ce:	4946      	ldr	r1, [pc, #280]	; (800d5e8 <__ieee754_fmod+0x21c>)
 800d4d0:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	ddbe      	ble.n	800d456 <__ieee754_fmod+0x8a>
 800d4d8:	3901      	subs	r1, #1
 800d4da:	005b      	lsls	r3, r3, #1
 800d4dc:	e7fa      	b.n	800d4d4 <__ieee754_fmod+0x108>
 800d4de:	ea4f 5128 	mov.w	r1, r8, asr #20
 800d4e2:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d4e6:	e7b6      	b.n	800d456 <__ieee754_fmod+0x8a>
 800d4e8:	3a01      	subs	r2, #1
 800d4ea:	005b      	lsls	r3, r3, #1
 800d4ec:	e7bc      	b.n	800d468 <__ieee754_fmod+0x9c>
 800d4ee:	4a3e      	ldr	r2, [pc, #248]	; (800d5e8 <__ieee754_fmod+0x21c>)
 800d4f0:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	ddb9      	ble.n	800d46c <__ieee754_fmod+0xa0>
 800d4f8:	3a01      	subs	r2, #1
 800d4fa:	005b      	lsls	r3, r3, #1
 800d4fc:	e7fa      	b.n	800d4f4 <__ieee754_fmod+0x128>
 800d4fe:	ea4f 522e 	mov.w	r2, lr, asr #20
 800d502:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d506:	e7b1      	b.n	800d46c <__ieee754_fmod+0xa0>
 800d508:	1a5c      	subs	r4, r3, r1
 800d50a:	2c1f      	cmp	r4, #31
 800d50c:	dc0a      	bgt.n	800d524 <__ieee754_fmod+0x158>
 800d50e:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800d512:	fa08 f804 	lsl.w	r8, r8, r4
 800d516:	fa2a f303 	lsr.w	r3, sl, r3
 800d51a:	ea43 0308 	orr.w	r3, r3, r8
 800d51e:	fa0a f404 	lsl.w	r4, sl, r4
 800d522:	e7aa      	b.n	800d47a <__ieee754_fmod+0xae>
 800d524:	4b31      	ldr	r3, [pc, #196]	; (800d5ec <__ieee754_fmod+0x220>)
 800d526:	1a5b      	subs	r3, r3, r1
 800d528:	fa0a f303 	lsl.w	r3, sl, r3
 800d52c:	2400      	movs	r4, #0
 800d52e:	e7a4      	b.n	800d47a <__ieee754_fmod+0xae>
 800d530:	eba0 0c02 	sub.w	ip, r0, r2
 800d534:	f1bc 0f1f 	cmp.w	ip, #31
 800d538:	dc0a      	bgt.n	800d550 <__ieee754_fmod+0x184>
 800d53a:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800d53e:	fa0e fe0c 	lsl.w	lr, lr, ip
 800d542:	fa27 f606 	lsr.w	r6, r7, r6
 800d546:	ea46 060e 	orr.w	r6, r6, lr
 800d54a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800d54e:	e79b      	b.n	800d488 <__ieee754_fmod+0xbc>
 800d550:	4e26      	ldr	r6, [pc, #152]	; (800d5ec <__ieee754_fmod+0x220>)
 800d552:	1ab6      	subs	r6, r6, r2
 800d554:	fa07 f606 	lsl.w	r6, r7, r6
 800d558:	f04f 0c00 	mov.w	ip, #0
 800d55c:	e794      	b.n	800d488 <__ieee754_fmod+0xbc>
 800d55e:	4564      	cmp	r4, ip
 800d560:	bf38      	it	cc
 800d562:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800d566:	2800      	cmp	r0, #0
 800d568:	da05      	bge.n	800d576 <__ieee754_fmod+0x1aa>
 800d56a:	0fe0      	lsrs	r0, r4, #31
 800d56c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800d570:	0064      	lsls	r4, r4, #1
 800d572:	3901      	subs	r1, #1
 800d574:	e789      	b.n	800d48a <__ieee754_fmod+0xbe>
 800d576:	ea50 0307 	orrs.w	r3, r0, r7
 800d57a:	f43f af5b 	beq.w	800d434 <__ieee754_fmod+0x68>
 800d57e:	0ffb      	lsrs	r3, r7, #31
 800d580:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800d584:	007c      	lsls	r4, r7, #1
 800d586:	e7f4      	b.n	800d572 <__ieee754_fmod+0x1a6>
 800d588:	0fe1      	lsrs	r1, r4, #31
 800d58a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800d58e:	0064      	lsls	r4, r4, #1
 800d590:	3a01      	subs	r2, #1
 800d592:	e78a      	b.n	800d4aa <__ieee754_fmod+0xde>
 800d594:	1a89      	subs	r1, r1, r2
 800d596:	2914      	cmp	r1, #20
 800d598:	dc0a      	bgt.n	800d5b0 <__ieee754_fmod+0x1e4>
 800d59a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d59e:	fa03 f202 	lsl.w	r2, r3, r2
 800d5a2:	40cc      	lsrs	r4, r1
 800d5a4:	4322      	orrs	r2, r4
 800d5a6:	410b      	asrs	r3, r1
 800d5a8:	ea43 0105 	orr.w	r1, r3, r5
 800d5ac:	4610      	mov	r0, r2
 800d5ae:	e731      	b.n	800d414 <__ieee754_fmod+0x48>
 800d5b0:	291f      	cmp	r1, #31
 800d5b2:	dc07      	bgt.n	800d5c4 <__ieee754_fmod+0x1f8>
 800d5b4:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d5b8:	40cc      	lsrs	r4, r1
 800d5ba:	fa03 f202 	lsl.w	r2, r3, r2
 800d5be:	4322      	orrs	r2, r4
 800d5c0:	462b      	mov	r3, r5
 800d5c2:	e7f1      	b.n	800d5a8 <__ieee754_fmod+0x1dc>
 800d5c4:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800d5c8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d5cc:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800d5d0:	32e2      	adds	r2, #226	; 0xe2
 800d5d2:	fa43 f202 	asr.w	r2, r3, r2
 800d5d6:	e7f3      	b.n	800d5c0 <__ieee754_fmod+0x1f4>
 800d5d8:	7fefffff 	.word	0x7fefffff
 800d5dc:	7ff00000 	.word	0x7ff00000
 800d5e0:	0800fc00 	.word	0x0800fc00
 800d5e4:	fffffbed 	.word	0xfffffbed
 800d5e8:	fffffc02 	.word	0xfffffc02
 800d5ec:	fffffbe2 	.word	0xfffffbe2

0800d5f0 <__ieee754_pow>:
 800d5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f4:	ed2d 8b06 	vpush	{d8-d10}
 800d5f8:	b08d      	sub	sp, #52	; 0x34
 800d5fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d5fe:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800d602:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800d606:	ea56 0100 	orrs.w	r1, r6, r0
 800d60a:	ec53 2b10 	vmov	r2, r3, d0
 800d60e:	f000 84d1 	beq.w	800dfb4 <__ieee754_pow+0x9c4>
 800d612:	497f      	ldr	r1, [pc, #508]	; (800d810 <__ieee754_pow+0x220>)
 800d614:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d618:	428c      	cmp	r4, r1
 800d61a:	ee10 8a10 	vmov	r8, s0
 800d61e:	4699      	mov	r9, r3
 800d620:	dc09      	bgt.n	800d636 <__ieee754_pow+0x46>
 800d622:	d103      	bne.n	800d62c <__ieee754_pow+0x3c>
 800d624:	b97a      	cbnz	r2, 800d646 <__ieee754_pow+0x56>
 800d626:	42a6      	cmp	r6, r4
 800d628:	dd02      	ble.n	800d630 <__ieee754_pow+0x40>
 800d62a:	e00c      	b.n	800d646 <__ieee754_pow+0x56>
 800d62c:	428e      	cmp	r6, r1
 800d62e:	dc02      	bgt.n	800d636 <__ieee754_pow+0x46>
 800d630:	428e      	cmp	r6, r1
 800d632:	d110      	bne.n	800d656 <__ieee754_pow+0x66>
 800d634:	b178      	cbz	r0, 800d656 <__ieee754_pow+0x66>
 800d636:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d63a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d63e:	ea54 0308 	orrs.w	r3, r4, r8
 800d642:	f000 84b7 	beq.w	800dfb4 <__ieee754_pow+0x9c4>
 800d646:	4873      	ldr	r0, [pc, #460]	; (800d814 <__ieee754_pow+0x224>)
 800d648:	b00d      	add	sp, #52	; 0x34
 800d64a:	ecbd 8b06 	vpop	{d8-d10}
 800d64e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d652:	f7ff b9b9 	b.w	800c9c8 <nan>
 800d656:	f1b9 0f00 	cmp.w	r9, #0
 800d65a:	da36      	bge.n	800d6ca <__ieee754_pow+0xda>
 800d65c:	496e      	ldr	r1, [pc, #440]	; (800d818 <__ieee754_pow+0x228>)
 800d65e:	428e      	cmp	r6, r1
 800d660:	dc51      	bgt.n	800d706 <__ieee754_pow+0x116>
 800d662:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800d666:	428e      	cmp	r6, r1
 800d668:	f340 84af 	ble.w	800dfca <__ieee754_pow+0x9da>
 800d66c:	1531      	asrs	r1, r6, #20
 800d66e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d672:	2914      	cmp	r1, #20
 800d674:	dd0f      	ble.n	800d696 <__ieee754_pow+0xa6>
 800d676:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800d67a:	fa20 fc01 	lsr.w	ip, r0, r1
 800d67e:	fa0c f101 	lsl.w	r1, ip, r1
 800d682:	4281      	cmp	r1, r0
 800d684:	f040 84a1 	bne.w	800dfca <__ieee754_pow+0x9da>
 800d688:	f00c 0c01 	and.w	ip, ip, #1
 800d68c:	f1cc 0102 	rsb	r1, ip, #2
 800d690:	9100      	str	r1, [sp, #0]
 800d692:	b180      	cbz	r0, 800d6b6 <__ieee754_pow+0xc6>
 800d694:	e059      	b.n	800d74a <__ieee754_pow+0x15a>
 800d696:	2800      	cmp	r0, #0
 800d698:	d155      	bne.n	800d746 <__ieee754_pow+0x156>
 800d69a:	f1c1 0114 	rsb	r1, r1, #20
 800d69e:	fa46 fc01 	asr.w	ip, r6, r1
 800d6a2:	fa0c f101 	lsl.w	r1, ip, r1
 800d6a6:	42b1      	cmp	r1, r6
 800d6a8:	f040 848c 	bne.w	800dfc4 <__ieee754_pow+0x9d4>
 800d6ac:	f00c 0c01 	and.w	ip, ip, #1
 800d6b0:	f1cc 0102 	rsb	r1, ip, #2
 800d6b4:	9100      	str	r1, [sp, #0]
 800d6b6:	4959      	ldr	r1, [pc, #356]	; (800d81c <__ieee754_pow+0x22c>)
 800d6b8:	428e      	cmp	r6, r1
 800d6ba:	d12d      	bne.n	800d718 <__ieee754_pow+0x128>
 800d6bc:	2f00      	cmp	r7, #0
 800d6be:	da79      	bge.n	800d7b4 <__ieee754_pow+0x1c4>
 800d6c0:	4956      	ldr	r1, [pc, #344]	; (800d81c <__ieee754_pow+0x22c>)
 800d6c2:	2000      	movs	r0, #0
 800d6c4:	f7f3 f8f2 	bl	80008ac <__aeabi_ddiv>
 800d6c8:	e016      	b.n	800d6f8 <__ieee754_pow+0x108>
 800d6ca:	2100      	movs	r1, #0
 800d6cc:	9100      	str	r1, [sp, #0]
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	d13b      	bne.n	800d74a <__ieee754_pow+0x15a>
 800d6d2:	494f      	ldr	r1, [pc, #316]	; (800d810 <__ieee754_pow+0x220>)
 800d6d4:	428e      	cmp	r6, r1
 800d6d6:	d1ee      	bne.n	800d6b6 <__ieee754_pow+0xc6>
 800d6d8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d6dc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d6e0:	ea53 0308 	orrs.w	r3, r3, r8
 800d6e4:	f000 8466 	beq.w	800dfb4 <__ieee754_pow+0x9c4>
 800d6e8:	4b4d      	ldr	r3, [pc, #308]	; (800d820 <__ieee754_pow+0x230>)
 800d6ea:	429c      	cmp	r4, r3
 800d6ec:	dd0d      	ble.n	800d70a <__ieee754_pow+0x11a>
 800d6ee:	2f00      	cmp	r7, #0
 800d6f0:	f280 8464 	bge.w	800dfbc <__ieee754_pow+0x9cc>
 800d6f4:	2000      	movs	r0, #0
 800d6f6:	2100      	movs	r1, #0
 800d6f8:	ec41 0b10 	vmov	d0, r0, r1
 800d6fc:	b00d      	add	sp, #52	; 0x34
 800d6fe:	ecbd 8b06 	vpop	{d8-d10}
 800d702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d706:	2102      	movs	r1, #2
 800d708:	e7e0      	b.n	800d6cc <__ieee754_pow+0xdc>
 800d70a:	2f00      	cmp	r7, #0
 800d70c:	daf2      	bge.n	800d6f4 <__ieee754_pow+0x104>
 800d70e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800d712:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d716:	e7ef      	b.n	800d6f8 <__ieee754_pow+0x108>
 800d718:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800d71c:	d104      	bne.n	800d728 <__ieee754_pow+0x138>
 800d71e:	4610      	mov	r0, r2
 800d720:	4619      	mov	r1, r3
 800d722:	f7f2 ff99 	bl	8000658 <__aeabi_dmul>
 800d726:	e7e7      	b.n	800d6f8 <__ieee754_pow+0x108>
 800d728:	493e      	ldr	r1, [pc, #248]	; (800d824 <__ieee754_pow+0x234>)
 800d72a:	428f      	cmp	r7, r1
 800d72c:	d10d      	bne.n	800d74a <__ieee754_pow+0x15a>
 800d72e:	f1b9 0f00 	cmp.w	r9, #0
 800d732:	db0a      	blt.n	800d74a <__ieee754_pow+0x15a>
 800d734:	ec43 2b10 	vmov	d0, r2, r3
 800d738:	b00d      	add	sp, #52	; 0x34
 800d73a:	ecbd 8b06 	vpop	{d8-d10}
 800d73e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d742:	f000 be83 	b.w	800e44c <__ieee754_sqrt>
 800d746:	2100      	movs	r1, #0
 800d748:	9100      	str	r1, [sp, #0]
 800d74a:	ec43 2b10 	vmov	d0, r2, r3
 800d74e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d752:	f7ff fbf1 	bl	800cf38 <fabs>
 800d756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d75a:	ec51 0b10 	vmov	r0, r1, d0
 800d75e:	f1b8 0f00 	cmp.w	r8, #0
 800d762:	d12a      	bne.n	800d7ba <__ieee754_pow+0x1ca>
 800d764:	b12c      	cbz	r4, 800d772 <__ieee754_pow+0x182>
 800d766:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800d81c <__ieee754_pow+0x22c>
 800d76a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800d76e:	45e6      	cmp	lr, ip
 800d770:	d123      	bne.n	800d7ba <__ieee754_pow+0x1ca>
 800d772:	2f00      	cmp	r7, #0
 800d774:	da05      	bge.n	800d782 <__ieee754_pow+0x192>
 800d776:	4602      	mov	r2, r0
 800d778:	460b      	mov	r3, r1
 800d77a:	2000      	movs	r0, #0
 800d77c:	4927      	ldr	r1, [pc, #156]	; (800d81c <__ieee754_pow+0x22c>)
 800d77e:	f7f3 f895 	bl	80008ac <__aeabi_ddiv>
 800d782:	f1b9 0f00 	cmp.w	r9, #0
 800d786:	dab7      	bge.n	800d6f8 <__ieee754_pow+0x108>
 800d788:	9b00      	ldr	r3, [sp, #0]
 800d78a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d78e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d792:	4323      	orrs	r3, r4
 800d794:	d108      	bne.n	800d7a8 <__ieee754_pow+0x1b8>
 800d796:	4602      	mov	r2, r0
 800d798:	460b      	mov	r3, r1
 800d79a:	4610      	mov	r0, r2
 800d79c:	4619      	mov	r1, r3
 800d79e:	f7f2 fda3 	bl	80002e8 <__aeabi_dsub>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	e78d      	b.n	800d6c4 <__ieee754_pow+0xd4>
 800d7a8:	9b00      	ldr	r3, [sp, #0]
 800d7aa:	2b01      	cmp	r3, #1
 800d7ac:	d1a4      	bne.n	800d6f8 <__ieee754_pow+0x108>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7b4:	4610      	mov	r0, r2
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	e79e      	b.n	800d6f8 <__ieee754_pow+0x108>
 800d7ba:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800d7be:	f10c 35ff 	add.w	r5, ip, #4294967295
 800d7c2:	950a      	str	r5, [sp, #40]	; 0x28
 800d7c4:	9d00      	ldr	r5, [sp, #0]
 800d7c6:	46ac      	mov	ip, r5
 800d7c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d7ca:	ea5c 0505 	orrs.w	r5, ip, r5
 800d7ce:	d0e4      	beq.n	800d79a <__ieee754_pow+0x1aa>
 800d7d0:	4b15      	ldr	r3, [pc, #84]	; (800d828 <__ieee754_pow+0x238>)
 800d7d2:	429e      	cmp	r6, r3
 800d7d4:	f340 80fc 	ble.w	800d9d0 <__ieee754_pow+0x3e0>
 800d7d8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d7dc:	429e      	cmp	r6, r3
 800d7de:	4b10      	ldr	r3, [pc, #64]	; (800d820 <__ieee754_pow+0x230>)
 800d7e0:	dd07      	ble.n	800d7f2 <__ieee754_pow+0x202>
 800d7e2:	429c      	cmp	r4, r3
 800d7e4:	dc0a      	bgt.n	800d7fc <__ieee754_pow+0x20c>
 800d7e6:	2f00      	cmp	r7, #0
 800d7e8:	da84      	bge.n	800d6f4 <__ieee754_pow+0x104>
 800d7ea:	a307      	add	r3, pc, #28	; (adr r3, 800d808 <__ieee754_pow+0x218>)
 800d7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f0:	e795      	b.n	800d71e <__ieee754_pow+0x12e>
 800d7f2:	429c      	cmp	r4, r3
 800d7f4:	dbf7      	blt.n	800d7e6 <__ieee754_pow+0x1f6>
 800d7f6:	4b09      	ldr	r3, [pc, #36]	; (800d81c <__ieee754_pow+0x22c>)
 800d7f8:	429c      	cmp	r4, r3
 800d7fa:	dd17      	ble.n	800d82c <__ieee754_pow+0x23c>
 800d7fc:	2f00      	cmp	r7, #0
 800d7fe:	dcf4      	bgt.n	800d7ea <__ieee754_pow+0x1fa>
 800d800:	e778      	b.n	800d6f4 <__ieee754_pow+0x104>
 800d802:	bf00      	nop
 800d804:	f3af 8000 	nop.w
 800d808:	8800759c 	.word	0x8800759c
 800d80c:	7e37e43c 	.word	0x7e37e43c
 800d810:	7ff00000 	.word	0x7ff00000
 800d814:	0800fb88 	.word	0x0800fb88
 800d818:	433fffff 	.word	0x433fffff
 800d81c:	3ff00000 	.word	0x3ff00000
 800d820:	3fefffff 	.word	0x3fefffff
 800d824:	3fe00000 	.word	0x3fe00000
 800d828:	41e00000 	.word	0x41e00000
 800d82c:	4b64      	ldr	r3, [pc, #400]	; (800d9c0 <__ieee754_pow+0x3d0>)
 800d82e:	2200      	movs	r2, #0
 800d830:	f7f2 fd5a 	bl	80002e8 <__aeabi_dsub>
 800d834:	a356      	add	r3, pc, #344	; (adr r3, 800d990 <__ieee754_pow+0x3a0>)
 800d836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83a:	4604      	mov	r4, r0
 800d83c:	460d      	mov	r5, r1
 800d83e:	f7f2 ff0b 	bl	8000658 <__aeabi_dmul>
 800d842:	a355      	add	r3, pc, #340	; (adr r3, 800d998 <__ieee754_pow+0x3a8>)
 800d844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d848:	4606      	mov	r6, r0
 800d84a:	460f      	mov	r7, r1
 800d84c:	4620      	mov	r0, r4
 800d84e:	4629      	mov	r1, r5
 800d850:	f7f2 ff02 	bl	8000658 <__aeabi_dmul>
 800d854:	4b5b      	ldr	r3, [pc, #364]	; (800d9c4 <__ieee754_pow+0x3d4>)
 800d856:	4682      	mov	sl, r0
 800d858:	468b      	mov	fp, r1
 800d85a:	2200      	movs	r2, #0
 800d85c:	4620      	mov	r0, r4
 800d85e:	4629      	mov	r1, r5
 800d860:	f7f2 fefa 	bl	8000658 <__aeabi_dmul>
 800d864:	4602      	mov	r2, r0
 800d866:	460b      	mov	r3, r1
 800d868:	a14d      	add	r1, pc, #308	; (adr r1, 800d9a0 <__ieee754_pow+0x3b0>)
 800d86a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d86e:	f7f2 fd3b 	bl	80002e8 <__aeabi_dsub>
 800d872:	4622      	mov	r2, r4
 800d874:	462b      	mov	r3, r5
 800d876:	f7f2 feef 	bl	8000658 <__aeabi_dmul>
 800d87a:	4602      	mov	r2, r0
 800d87c:	460b      	mov	r3, r1
 800d87e:	2000      	movs	r0, #0
 800d880:	4951      	ldr	r1, [pc, #324]	; (800d9c8 <__ieee754_pow+0x3d8>)
 800d882:	f7f2 fd31 	bl	80002e8 <__aeabi_dsub>
 800d886:	4622      	mov	r2, r4
 800d888:	4680      	mov	r8, r0
 800d88a:	4689      	mov	r9, r1
 800d88c:	462b      	mov	r3, r5
 800d88e:	4620      	mov	r0, r4
 800d890:	4629      	mov	r1, r5
 800d892:	f7f2 fee1 	bl	8000658 <__aeabi_dmul>
 800d896:	4602      	mov	r2, r0
 800d898:	460b      	mov	r3, r1
 800d89a:	4640      	mov	r0, r8
 800d89c:	4649      	mov	r1, r9
 800d89e:	f7f2 fedb 	bl	8000658 <__aeabi_dmul>
 800d8a2:	a341      	add	r3, pc, #260	; (adr r3, 800d9a8 <__ieee754_pow+0x3b8>)
 800d8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a8:	f7f2 fed6 	bl	8000658 <__aeabi_dmul>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	4650      	mov	r0, sl
 800d8b2:	4659      	mov	r1, fp
 800d8b4:	f7f2 fd18 	bl	80002e8 <__aeabi_dsub>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	4680      	mov	r8, r0
 800d8be:	4689      	mov	r9, r1
 800d8c0:	4630      	mov	r0, r6
 800d8c2:	4639      	mov	r1, r7
 800d8c4:	f7f2 fd12 	bl	80002ec <__adddf3>
 800d8c8:	2400      	movs	r4, #0
 800d8ca:	4632      	mov	r2, r6
 800d8cc:	463b      	mov	r3, r7
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	460d      	mov	r5, r1
 800d8d2:	f7f2 fd09 	bl	80002e8 <__aeabi_dsub>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	460b      	mov	r3, r1
 800d8da:	4640      	mov	r0, r8
 800d8dc:	4649      	mov	r1, r9
 800d8de:	f7f2 fd03 	bl	80002e8 <__aeabi_dsub>
 800d8e2:	9b00      	ldr	r3, [sp, #0]
 800d8e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8e6:	3b01      	subs	r3, #1
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	4682      	mov	sl, r0
 800d8ec:	468b      	mov	fp, r1
 800d8ee:	f040 81f1 	bne.w	800dcd4 <__ieee754_pow+0x6e4>
 800d8f2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800d9b0 <__ieee754_pow+0x3c0>
 800d8f6:	eeb0 8a47 	vmov.f32	s16, s14
 800d8fa:	eef0 8a67 	vmov.f32	s17, s15
 800d8fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d902:	2600      	movs	r6, #0
 800d904:	4632      	mov	r2, r6
 800d906:	463b      	mov	r3, r7
 800d908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d90c:	f7f2 fcec 	bl	80002e8 <__aeabi_dsub>
 800d910:	4622      	mov	r2, r4
 800d912:	462b      	mov	r3, r5
 800d914:	f7f2 fea0 	bl	8000658 <__aeabi_dmul>
 800d918:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d91c:	4680      	mov	r8, r0
 800d91e:	4689      	mov	r9, r1
 800d920:	4650      	mov	r0, sl
 800d922:	4659      	mov	r1, fp
 800d924:	f7f2 fe98 	bl	8000658 <__aeabi_dmul>
 800d928:	4602      	mov	r2, r0
 800d92a:	460b      	mov	r3, r1
 800d92c:	4640      	mov	r0, r8
 800d92e:	4649      	mov	r1, r9
 800d930:	f7f2 fcdc 	bl	80002ec <__adddf3>
 800d934:	4632      	mov	r2, r6
 800d936:	463b      	mov	r3, r7
 800d938:	4680      	mov	r8, r0
 800d93a:	4689      	mov	r9, r1
 800d93c:	4620      	mov	r0, r4
 800d93e:	4629      	mov	r1, r5
 800d940:	f7f2 fe8a 	bl	8000658 <__aeabi_dmul>
 800d944:	460b      	mov	r3, r1
 800d946:	4604      	mov	r4, r0
 800d948:	460d      	mov	r5, r1
 800d94a:	4602      	mov	r2, r0
 800d94c:	4649      	mov	r1, r9
 800d94e:	4640      	mov	r0, r8
 800d950:	f7f2 fccc 	bl	80002ec <__adddf3>
 800d954:	4b1d      	ldr	r3, [pc, #116]	; (800d9cc <__ieee754_pow+0x3dc>)
 800d956:	4299      	cmp	r1, r3
 800d958:	ec45 4b19 	vmov	d9, r4, r5
 800d95c:	4606      	mov	r6, r0
 800d95e:	460f      	mov	r7, r1
 800d960:	468b      	mov	fp, r1
 800d962:	f340 82fe 	ble.w	800df62 <__ieee754_pow+0x972>
 800d966:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d96a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d96e:	4303      	orrs	r3, r0
 800d970:	f000 81f0 	beq.w	800dd54 <__ieee754_pow+0x764>
 800d974:	a310      	add	r3, pc, #64	; (adr r3, 800d9b8 <__ieee754_pow+0x3c8>)
 800d976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97a:	ec51 0b18 	vmov	r0, r1, d8
 800d97e:	f7f2 fe6b 	bl	8000658 <__aeabi_dmul>
 800d982:	a30d      	add	r3, pc, #52	; (adr r3, 800d9b8 <__ieee754_pow+0x3c8>)
 800d984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d988:	e6cb      	b.n	800d722 <__ieee754_pow+0x132>
 800d98a:	bf00      	nop
 800d98c:	f3af 8000 	nop.w
 800d990:	60000000 	.word	0x60000000
 800d994:	3ff71547 	.word	0x3ff71547
 800d998:	f85ddf44 	.word	0xf85ddf44
 800d99c:	3e54ae0b 	.word	0x3e54ae0b
 800d9a0:	55555555 	.word	0x55555555
 800d9a4:	3fd55555 	.word	0x3fd55555
 800d9a8:	652b82fe 	.word	0x652b82fe
 800d9ac:	3ff71547 	.word	0x3ff71547
 800d9b0:	00000000 	.word	0x00000000
 800d9b4:	bff00000 	.word	0xbff00000
 800d9b8:	8800759c 	.word	0x8800759c
 800d9bc:	7e37e43c 	.word	0x7e37e43c
 800d9c0:	3ff00000 	.word	0x3ff00000
 800d9c4:	3fd00000 	.word	0x3fd00000
 800d9c8:	3fe00000 	.word	0x3fe00000
 800d9cc:	408fffff 	.word	0x408fffff
 800d9d0:	4bd7      	ldr	r3, [pc, #860]	; (800dd30 <__ieee754_pow+0x740>)
 800d9d2:	ea03 0309 	and.w	r3, r3, r9
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	b92b      	cbnz	r3, 800d9e6 <__ieee754_pow+0x3f6>
 800d9da:	4bd6      	ldr	r3, [pc, #856]	; (800dd34 <__ieee754_pow+0x744>)
 800d9dc:	f7f2 fe3c 	bl	8000658 <__aeabi_dmul>
 800d9e0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d9e4:	460c      	mov	r4, r1
 800d9e6:	1523      	asrs	r3, r4, #20
 800d9e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d9ec:	4413      	add	r3, r2
 800d9ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d9f0:	4bd1      	ldr	r3, [pc, #836]	; (800dd38 <__ieee754_pow+0x748>)
 800d9f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d9f6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d9fa:	429c      	cmp	r4, r3
 800d9fc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800da00:	dd08      	ble.n	800da14 <__ieee754_pow+0x424>
 800da02:	4bce      	ldr	r3, [pc, #824]	; (800dd3c <__ieee754_pow+0x74c>)
 800da04:	429c      	cmp	r4, r3
 800da06:	f340 8163 	ble.w	800dcd0 <__ieee754_pow+0x6e0>
 800da0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da0c:	3301      	adds	r3, #1
 800da0e:	9309      	str	r3, [sp, #36]	; 0x24
 800da10:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800da14:	2400      	movs	r4, #0
 800da16:	00e3      	lsls	r3, r4, #3
 800da18:	930b      	str	r3, [sp, #44]	; 0x2c
 800da1a:	4bc9      	ldr	r3, [pc, #804]	; (800dd40 <__ieee754_pow+0x750>)
 800da1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da20:	ed93 7b00 	vldr	d7, [r3]
 800da24:	4629      	mov	r1, r5
 800da26:	ec53 2b17 	vmov	r2, r3, d7
 800da2a:	eeb0 8a47 	vmov.f32	s16, s14
 800da2e:	eef0 8a67 	vmov.f32	s17, s15
 800da32:	4682      	mov	sl, r0
 800da34:	f7f2 fc58 	bl	80002e8 <__aeabi_dsub>
 800da38:	4652      	mov	r2, sl
 800da3a:	4606      	mov	r6, r0
 800da3c:	460f      	mov	r7, r1
 800da3e:	462b      	mov	r3, r5
 800da40:	ec51 0b18 	vmov	r0, r1, d8
 800da44:	f7f2 fc52 	bl	80002ec <__adddf3>
 800da48:	4602      	mov	r2, r0
 800da4a:	460b      	mov	r3, r1
 800da4c:	2000      	movs	r0, #0
 800da4e:	49bd      	ldr	r1, [pc, #756]	; (800dd44 <__ieee754_pow+0x754>)
 800da50:	f7f2 ff2c 	bl	80008ac <__aeabi_ddiv>
 800da54:	ec41 0b19 	vmov	d9, r0, r1
 800da58:	4602      	mov	r2, r0
 800da5a:	460b      	mov	r3, r1
 800da5c:	4630      	mov	r0, r6
 800da5e:	4639      	mov	r1, r7
 800da60:	f7f2 fdfa 	bl	8000658 <__aeabi_dmul>
 800da64:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800da68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800da70:	2300      	movs	r3, #0
 800da72:	9304      	str	r3, [sp, #16]
 800da74:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800da78:	46ab      	mov	fp, r5
 800da7a:	106d      	asrs	r5, r5, #1
 800da7c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800da80:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800da84:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800da88:	2200      	movs	r2, #0
 800da8a:	4640      	mov	r0, r8
 800da8c:	4649      	mov	r1, r9
 800da8e:	4614      	mov	r4, r2
 800da90:	461d      	mov	r5, r3
 800da92:	f7f2 fde1 	bl	8000658 <__aeabi_dmul>
 800da96:	4602      	mov	r2, r0
 800da98:	460b      	mov	r3, r1
 800da9a:	4630      	mov	r0, r6
 800da9c:	4639      	mov	r1, r7
 800da9e:	f7f2 fc23 	bl	80002e8 <__aeabi_dsub>
 800daa2:	ec53 2b18 	vmov	r2, r3, d8
 800daa6:	4606      	mov	r6, r0
 800daa8:	460f      	mov	r7, r1
 800daaa:	4620      	mov	r0, r4
 800daac:	4629      	mov	r1, r5
 800daae:	f7f2 fc1b 	bl	80002e8 <__aeabi_dsub>
 800dab2:	4602      	mov	r2, r0
 800dab4:	460b      	mov	r3, r1
 800dab6:	4650      	mov	r0, sl
 800dab8:	4659      	mov	r1, fp
 800daba:	f7f2 fc15 	bl	80002e8 <__aeabi_dsub>
 800dabe:	4642      	mov	r2, r8
 800dac0:	464b      	mov	r3, r9
 800dac2:	f7f2 fdc9 	bl	8000658 <__aeabi_dmul>
 800dac6:	4602      	mov	r2, r0
 800dac8:	460b      	mov	r3, r1
 800daca:	4630      	mov	r0, r6
 800dacc:	4639      	mov	r1, r7
 800dace:	f7f2 fc0b 	bl	80002e8 <__aeabi_dsub>
 800dad2:	ec53 2b19 	vmov	r2, r3, d9
 800dad6:	f7f2 fdbf 	bl	8000658 <__aeabi_dmul>
 800dada:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dade:	ec41 0b18 	vmov	d8, r0, r1
 800dae2:	4610      	mov	r0, r2
 800dae4:	4619      	mov	r1, r3
 800dae6:	f7f2 fdb7 	bl	8000658 <__aeabi_dmul>
 800daea:	a37d      	add	r3, pc, #500	; (adr r3, 800dce0 <__ieee754_pow+0x6f0>)
 800daec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf0:	4604      	mov	r4, r0
 800daf2:	460d      	mov	r5, r1
 800daf4:	f7f2 fdb0 	bl	8000658 <__aeabi_dmul>
 800daf8:	a37b      	add	r3, pc, #492	; (adr r3, 800dce8 <__ieee754_pow+0x6f8>)
 800dafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafe:	f7f2 fbf5 	bl	80002ec <__adddf3>
 800db02:	4622      	mov	r2, r4
 800db04:	462b      	mov	r3, r5
 800db06:	f7f2 fda7 	bl	8000658 <__aeabi_dmul>
 800db0a:	a379      	add	r3, pc, #484	; (adr r3, 800dcf0 <__ieee754_pow+0x700>)
 800db0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db10:	f7f2 fbec 	bl	80002ec <__adddf3>
 800db14:	4622      	mov	r2, r4
 800db16:	462b      	mov	r3, r5
 800db18:	f7f2 fd9e 	bl	8000658 <__aeabi_dmul>
 800db1c:	a376      	add	r3, pc, #472	; (adr r3, 800dcf8 <__ieee754_pow+0x708>)
 800db1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db22:	f7f2 fbe3 	bl	80002ec <__adddf3>
 800db26:	4622      	mov	r2, r4
 800db28:	462b      	mov	r3, r5
 800db2a:	f7f2 fd95 	bl	8000658 <__aeabi_dmul>
 800db2e:	a374      	add	r3, pc, #464	; (adr r3, 800dd00 <__ieee754_pow+0x710>)
 800db30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db34:	f7f2 fbda 	bl	80002ec <__adddf3>
 800db38:	4622      	mov	r2, r4
 800db3a:	462b      	mov	r3, r5
 800db3c:	f7f2 fd8c 	bl	8000658 <__aeabi_dmul>
 800db40:	a371      	add	r3, pc, #452	; (adr r3, 800dd08 <__ieee754_pow+0x718>)
 800db42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db46:	f7f2 fbd1 	bl	80002ec <__adddf3>
 800db4a:	4622      	mov	r2, r4
 800db4c:	4606      	mov	r6, r0
 800db4e:	460f      	mov	r7, r1
 800db50:	462b      	mov	r3, r5
 800db52:	4620      	mov	r0, r4
 800db54:	4629      	mov	r1, r5
 800db56:	f7f2 fd7f 	bl	8000658 <__aeabi_dmul>
 800db5a:	4602      	mov	r2, r0
 800db5c:	460b      	mov	r3, r1
 800db5e:	4630      	mov	r0, r6
 800db60:	4639      	mov	r1, r7
 800db62:	f7f2 fd79 	bl	8000658 <__aeabi_dmul>
 800db66:	4642      	mov	r2, r8
 800db68:	4604      	mov	r4, r0
 800db6a:	460d      	mov	r5, r1
 800db6c:	464b      	mov	r3, r9
 800db6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db72:	f7f2 fbbb 	bl	80002ec <__adddf3>
 800db76:	ec53 2b18 	vmov	r2, r3, d8
 800db7a:	f7f2 fd6d 	bl	8000658 <__aeabi_dmul>
 800db7e:	4622      	mov	r2, r4
 800db80:	462b      	mov	r3, r5
 800db82:	f7f2 fbb3 	bl	80002ec <__adddf3>
 800db86:	4642      	mov	r2, r8
 800db88:	4682      	mov	sl, r0
 800db8a:	468b      	mov	fp, r1
 800db8c:	464b      	mov	r3, r9
 800db8e:	4640      	mov	r0, r8
 800db90:	4649      	mov	r1, r9
 800db92:	f7f2 fd61 	bl	8000658 <__aeabi_dmul>
 800db96:	4b6c      	ldr	r3, [pc, #432]	; (800dd48 <__ieee754_pow+0x758>)
 800db98:	2200      	movs	r2, #0
 800db9a:	4606      	mov	r6, r0
 800db9c:	460f      	mov	r7, r1
 800db9e:	f7f2 fba5 	bl	80002ec <__adddf3>
 800dba2:	4652      	mov	r2, sl
 800dba4:	465b      	mov	r3, fp
 800dba6:	f7f2 fba1 	bl	80002ec <__adddf3>
 800dbaa:	9c04      	ldr	r4, [sp, #16]
 800dbac:	460d      	mov	r5, r1
 800dbae:	4622      	mov	r2, r4
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	4640      	mov	r0, r8
 800dbb4:	4649      	mov	r1, r9
 800dbb6:	f7f2 fd4f 	bl	8000658 <__aeabi_dmul>
 800dbba:	4b63      	ldr	r3, [pc, #396]	; (800dd48 <__ieee754_pow+0x758>)
 800dbbc:	4680      	mov	r8, r0
 800dbbe:	4689      	mov	r9, r1
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	4629      	mov	r1, r5
 800dbc6:	f7f2 fb8f 	bl	80002e8 <__aeabi_dsub>
 800dbca:	4632      	mov	r2, r6
 800dbcc:	463b      	mov	r3, r7
 800dbce:	f7f2 fb8b 	bl	80002e8 <__aeabi_dsub>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	4650      	mov	r0, sl
 800dbd8:	4659      	mov	r1, fp
 800dbda:	f7f2 fb85 	bl	80002e8 <__aeabi_dsub>
 800dbde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dbe2:	f7f2 fd39 	bl	8000658 <__aeabi_dmul>
 800dbe6:	4622      	mov	r2, r4
 800dbe8:	4606      	mov	r6, r0
 800dbea:	460f      	mov	r7, r1
 800dbec:	462b      	mov	r3, r5
 800dbee:	ec51 0b18 	vmov	r0, r1, d8
 800dbf2:	f7f2 fd31 	bl	8000658 <__aeabi_dmul>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	4639      	mov	r1, r7
 800dbfe:	f7f2 fb75 	bl	80002ec <__adddf3>
 800dc02:	4606      	mov	r6, r0
 800dc04:	460f      	mov	r7, r1
 800dc06:	4602      	mov	r2, r0
 800dc08:	460b      	mov	r3, r1
 800dc0a:	4640      	mov	r0, r8
 800dc0c:	4649      	mov	r1, r9
 800dc0e:	f7f2 fb6d 	bl	80002ec <__adddf3>
 800dc12:	9c04      	ldr	r4, [sp, #16]
 800dc14:	a33e      	add	r3, pc, #248	; (adr r3, 800dd10 <__ieee754_pow+0x720>)
 800dc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	460d      	mov	r5, r1
 800dc1e:	f7f2 fd1b 	bl	8000658 <__aeabi_dmul>
 800dc22:	4642      	mov	r2, r8
 800dc24:	ec41 0b18 	vmov	d8, r0, r1
 800dc28:	464b      	mov	r3, r9
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	4629      	mov	r1, r5
 800dc2e:	f7f2 fb5b 	bl	80002e8 <__aeabi_dsub>
 800dc32:	4602      	mov	r2, r0
 800dc34:	460b      	mov	r3, r1
 800dc36:	4630      	mov	r0, r6
 800dc38:	4639      	mov	r1, r7
 800dc3a:	f7f2 fb55 	bl	80002e8 <__aeabi_dsub>
 800dc3e:	a336      	add	r3, pc, #216	; (adr r3, 800dd18 <__ieee754_pow+0x728>)
 800dc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc44:	f7f2 fd08 	bl	8000658 <__aeabi_dmul>
 800dc48:	a335      	add	r3, pc, #212	; (adr r3, 800dd20 <__ieee754_pow+0x730>)
 800dc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4e:	4606      	mov	r6, r0
 800dc50:	460f      	mov	r7, r1
 800dc52:	4620      	mov	r0, r4
 800dc54:	4629      	mov	r1, r5
 800dc56:	f7f2 fcff 	bl	8000658 <__aeabi_dmul>
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	4630      	mov	r0, r6
 800dc60:	4639      	mov	r1, r7
 800dc62:	f7f2 fb43 	bl	80002ec <__adddf3>
 800dc66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc68:	4b38      	ldr	r3, [pc, #224]	; (800dd4c <__ieee754_pow+0x75c>)
 800dc6a:	4413      	add	r3, r2
 800dc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc70:	f7f2 fb3c 	bl	80002ec <__adddf3>
 800dc74:	4682      	mov	sl, r0
 800dc76:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc78:	468b      	mov	fp, r1
 800dc7a:	f7f2 fc83 	bl	8000584 <__aeabi_i2d>
 800dc7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc80:	4b33      	ldr	r3, [pc, #204]	; (800dd50 <__ieee754_pow+0x760>)
 800dc82:	4413      	add	r3, r2
 800dc84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc88:	4606      	mov	r6, r0
 800dc8a:	460f      	mov	r7, r1
 800dc8c:	4652      	mov	r2, sl
 800dc8e:	465b      	mov	r3, fp
 800dc90:	ec51 0b18 	vmov	r0, r1, d8
 800dc94:	f7f2 fb2a 	bl	80002ec <__adddf3>
 800dc98:	4642      	mov	r2, r8
 800dc9a:	464b      	mov	r3, r9
 800dc9c:	f7f2 fb26 	bl	80002ec <__adddf3>
 800dca0:	4632      	mov	r2, r6
 800dca2:	463b      	mov	r3, r7
 800dca4:	f7f2 fb22 	bl	80002ec <__adddf3>
 800dca8:	9c04      	ldr	r4, [sp, #16]
 800dcaa:	4632      	mov	r2, r6
 800dcac:	463b      	mov	r3, r7
 800dcae:	4620      	mov	r0, r4
 800dcb0:	460d      	mov	r5, r1
 800dcb2:	f7f2 fb19 	bl	80002e8 <__aeabi_dsub>
 800dcb6:	4642      	mov	r2, r8
 800dcb8:	464b      	mov	r3, r9
 800dcba:	f7f2 fb15 	bl	80002e8 <__aeabi_dsub>
 800dcbe:	ec53 2b18 	vmov	r2, r3, d8
 800dcc2:	f7f2 fb11 	bl	80002e8 <__aeabi_dsub>
 800dcc6:	4602      	mov	r2, r0
 800dcc8:	460b      	mov	r3, r1
 800dcca:	4650      	mov	r0, sl
 800dccc:	4659      	mov	r1, fp
 800dcce:	e606      	b.n	800d8de <__ieee754_pow+0x2ee>
 800dcd0:	2401      	movs	r4, #1
 800dcd2:	e6a0      	b.n	800da16 <__ieee754_pow+0x426>
 800dcd4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800dd28 <__ieee754_pow+0x738>
 800dcd8:	e60d      	b.n	800d8f6 <__ieee754_pow+0x306>
 800dcda:	bf00      	nop
 800dcdc:	f3af 8000 	nop.w
 800dce0:	4a454eef 	.word	0x4a454eef
 800dce4:	3fca7e28 	.word	0x3fca7e28
 800dce8:	93c9db65 	.word	0x93c9db65
 800dcec:	3fcd864a 	.word	0x3fcd864a
 800dcf0:	a91d4101 	.word	0xa91d4101
 800dcf4:	3fd17460 	.word	0x3fd17460
 800dcf8:	518f264d 	.word	0x518f264d
 800dcfc:	3fd55555 	.word	0x3fd55555
 800dd00:	db6fabff 	.word	0xdb6fabff
 800dd04:	3fdb6db6 	.word	0x3fdb6db6
 800dd08:	33333303 	.word	0x33333303
 800dd0c:	3fe33333 	.word	0x3fe33333
 800dd10:	e0000000 	.word	0xe0000000
 800dd14:	3feec709 	.word	0x3feec709
 800dd18:	dc3a03fd 	.word	0xdc3a03fd
 800dd1c:	3feec709 	.word	0x3feec709
 800dd20:	145b01f5 	.word	0x145b01f5
 800dd24:	be3e2fe0 	.word	0xbe3e2fe0
 800dd28:	00000000 	.word	0x00000000
 800dd2c:	3ff00000 	.word	0x3ff00000
 800dd30:	7ff00000 	.word	0x7ff00000
 800dd34:	43400000 	.word	0x43400000
 800dd38:	0003988e 	.word	0x0003988e
 800dd3c:	000bb679 	.word	0x000bb679
 800dd40:	0800fc10 	.word	0x0800fc10
 800dd44:	3ff00000 	.word	0x3ff00000
 800dd48:	40080000 	.word	0x40080000
 800dd4c:	0800fc30 	.word	0x0800fc30
 800dd50:	0800fc20 	.word	0x0800fc20
 800dd54:	a3b5      	add	r3, pc, #724	; (adr r3, 800e02c <__ieee754_pow+0xa3c>)
 800dd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5a:	4640      	mov	r0, r8
 800dd5c:	4649      	mov	r1, r9
 800dd5e:	f7f2 fac5 	bl	80002ec <__adddf3>
 800dd62:	4622      	mov	r2, r4
 800dd64:	ec41 0b1a 	vmov	d10, r0, r1
 800dd68:	462b      	mov	r3, r5
 800dd6a:	4630      	mov	r0, r6
 800dd6c:	4639      	mov	r1, r7
 800dd6e:	f7f2 fabb 	bl	80002e8 <__aeabi_dsub>
 800dd72:	4602      	mov	r2, r0
 800dd74:	460b      	mov	r3, r1
 800dd76:	ec51 0b1a 	vmov	r0, r1, d10
 800dd7a:	f7f2 fefd 	bl	8000b78 <__aeabi_dcmpgt>
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	f47f adf8 	bne.w	800d974 <__ieee754_pow+0x384>
 800dd84:	4aa4      	ldr	r2, [pc, #656]	; (800e018 <__ieee754_pow+0xa28>)
 800dd86:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	f340 810b 	ble.w	800dfa6 <__ieee754_pow+0x9b6>
 800dd90:	151b      	asrs	r3, r3, #20
 800dd92:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800dd96:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dd9a:	fa4a f303 	asr.w	r3, sl, r3
 800dd9e:	445b      	add	r3, fp
 800dda0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dda4:	4e9d      	ldr	r6, [pc, #628]	; (800e01c <__ieee754_pow+0xa2c>)
 800dda6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ddaa:	4116      	asrs	r6, r2
 800ddac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	ea23 0106 	bic.w	r1, r3, r6
 800ddb6:	f1c2 0214 	rsb	r2, r2, #20
 800ddba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ddbe:	fa4a fa02 	asr.w	sl, sl, r2
 800ddc2:	f1bb 0f00 	cmp.w	fp, #0
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	460b      	mov	r3, r1
 800ddca:	4620      	mov	r0, r4
 800ddcc:	4629      	mov	r1, r5
 800ddce:	bfb8      	it	lt
 800ddd0:	f1ca 0a00 	rsblt	sl, sl, #0
 800ddd4:	f7f2 fa88 	bl	80002e8 <__aeabi_dsub>
 800ddd8:	ec41 0b19 	vmov	d9, r0, r1
 800dddc:	4642      	mov	r2, r8
 800ddde:	464b      	mov	r3, r9
 800dde0:	ec51 0b19 	vmov	r0, r1, d9
 800dde4:	f7f2 fa82 	bl	80002ec <__adddf3>
 800dde8:	2400      	movs	r4, #0
 800ddea:	a379      	add	r3, pc, #484	; (adr r3, 800dfd0 <__ieee754_pow+0x9e0>)
 800ddec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	460d      	mov	r5, r1
 800ddf4:	f7f2 fc30 	bl	8000658 <__aeabi_dmul>
 800ddf8:	ec53 2b19 	vmov	r2, r3, d9
 800ddfc:	4606      	mov	r6, r0
 800ddfe:	460f      	mov	r7, r1
 800de00:	4620      	mov	r0, r4
 800de02:	4629      	mov	r1, r5
 800de04:	f7f2 fa70 	bl	80002e8 <__aeabi_dsub>
 800de08:	4602      	mov	r2, r0
 800de0a:	460b      	mov	r3, r1
 800de0c:	4640      	mov	r0, r8
 800de0e:	4649      	mov	r1, r9
 800de10:	f7f2 fa6a 	bl	80002e8 <__aeabi_dsub>
 800de14:	a370      	add	r3, pc, #448	; (adr r3, 800dfd8 <__ieee754_pow+0x9e8>)
 800de16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1a:	f7f2 fc1d 	bl	8000658 <__aeabi_dmul>
 800de1e:	a370      	add	r3, pc, #448	; (adr r3, 800dfe0 <__ieee754_pow+0x9f0>)
 800de20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de24:	4680      	mov	r8, r0
 800de26:	4689      	mov	r9, r1
 800de28:	4620      	mov	r0, r4
 800de2a:	4629      	mov	r1, r5
 800de2c:	f7f2 fc14 	bl	8000658 <__aeabi_dmul>
 800de30:	4602      	mov	r2, r0
 800de32:	460b      	mov	r3, r1
 800de34:	4640      	mov	r0, r8
 800de36:	4649      	mov	r1, r9
 800de38:	f7f2 fa58 	bl	80002ec <__adddf3>
 800de3c:	4604      	mov	r4, r0
 800de3e:	460d      	mov	r5, r1
 800de40:	4602      	mov	r2, r0
 800de42:	460b      	mov	r3, r1
 800de44:	4630      	mov	r0, r6
 800de46:	4639      	mov	r1, r7
 800de48:	f7f2 fa50 	bl	80002ec <__adddf3>
 800de4c:	4632      	mov	r2, r6
 800de4e:	463b      	mov	r3, r7
 800de50:	4680      	mov	r8, r0
 800de52:	4689      	mov	r9, r1
 800de54:	f7f2 fa48 	bl	80002e8 <__aeabi_dsub>
 800de58:	4602      	mov	r2, r0
 800de5a:	460b      	mov	r3, r1
 800de5c:	4620      	mov	r0, r4
 800de5e:	4629      	mov	r1, r5
 800de60:	f7f2 fa42 	bl	80002e8 <__aeabi_dsub>
 800de64:	4642      	mov	r2, r8
 800de66:	4606      	mov	r6, r0
 800de68:	460f      	mov	r7, r1
 800de6a:	464b      	mov	r3, r9
 800de6c:	4640      	mov	r0, r8
 800de6e:	4649      	mov	r1, r9
 800de70:	f7f2 fbf2 	bl	8000658 <__aeabi_dmul>
 800de74:	a35c      	add	r3, pc, #368	; (adr r3, 800dfe8 <__ieee754_pow+0x9f8>)
 800de76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7a:	4604      	mov	r4, r0
 800de7c:	460d      	mov	r5, r1
 800de7e:	f7f2 fbeb 	bl	8000658 <__aeabi_dmul>
 800de82:	a35b      	add	r3, pc, #364	; (adr r3, 800dff0 <__ieee754_pow+0xa00>)
 800de84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de88:	f7f2 fa2e 	bl	80002e8 <__aeabi_dsub>
 800de8c:	4622      	mov	r2, r4
 800de8e:	462b      	mov	r3, r5
 800de90:	f7f2 fbe2 	bl	8000658 <__aeabi_dmul>
 800de94:	a358      	add	r3, pc, #352	; (adr r3, 800dff8 <__ieee754_pow+0xa08>)
 800de96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9a:	f7f2 fa27 	bl	80002ec <__adddf3>
 800de9e:	4622      	mov	r2, r4
 800dea0:	462b      	mov	r3, r5
 800dea2:	f7f2 fbd9 	bl	8000658 <__aeabi_dmul>
 800dea6:	a356      	add	r3, pc, #344	; (adr r3, 800e000 <__ieee754_pow+0xa10>)
 800dea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deac:	f7f2 fa1c 	bl	80002e8 <__aeabi_dsub>
 800deb0:	4622      	mov	r2, r4
 800deb2:	462b      	mov	r3, r5
 800deb4:	f7f2 fbd0 	bl	8000658 <__aeabi_dmul>
 800deb8:	a353      	add	r3, pc, #332	; (adr r3, 800e008 <__ieee754_pow+0xa18>)
 800deba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debe:	f7f2 fa15 	bl	80002ec <__adddf3>
 800dec2:	4622      	mov	r2, r4
 800dec4:	462b      	mov	r3, r5
 800dec6:	f7f2 fbc7 	bl	8000658 <__aeabi_dmul>
 800deca:	4602      	mov	r2, r0
 800decc:	460b      	mov	r3, r1
 800dece:	4640      	mov	r0, r8
 800ded0:	4649      	mov	r1, r9
 800ded2:	f7f2 fa09 	bl	80002e8 <__aeabi_dsub>
 800ded6:	4604      	mov	r4, r0
 800ded8:	460d      	mov	r5, r1
 800deda:	4602      	mov	r2, r0
 800dedc:	460b      	mov	r3, r1
 800dede:	4640      	mov	r0, r8
 800dee0:	4649      	mov	r1, r9
 800dee2:	f7f2 fbb9 	bl	8000658 <__aeabi_dmul>
 800dee6:	2200      	movs	r2, #0
 800dee8:	ec41 0b19 	vmov	d9, r0, r1
 800deec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800def0:	4620      	mov	r0, r4
 800def2:	4629      	mov	r1, r5
 800def4:	f7f2 f9f8 	bl	80002e8 <__aeabi_dsub>
 800def8:	4602      	mov	r2, r0
 800defa:	460b      	mov	r3, r1
 800defc:	ec51 0b19 	vmov	r0, r1, d9
 800df00:	f7f2 fcd4 	bl	80008ac <__aeabi_ddiv>
 800df04:	4632      	mov	r2, r6
 800df06:	4604      	mov	r4, r0
 800df08:	460d      	mov	r5, r1
 800df0a:	463b      	mov	r3, r7
 800df0c:	4640      	mov	r0, r8
 800df0e:	4649      	mov	r1, r9
 800df10:	f7f2 fba2 	bl	8000658 <__aeabi_dmul>
 800df14:	4632      	mov	r2, r6
 800df16:	463b      	mov	r3, r7
 800df18:	f7f2 f9e8 	bl	80002ec <__adddf3>
 800df1c:	4602      	mov	r2, r0
 800df1e:	460b      	mov	r3, r1
 800df20:	4620      	mov	r0, r4
 800df22:	4629      	mov	r1, r5
 800df24:	f7f2 f9e0 	bl	80002e8 <__aeabi_dsub>
 800df28:	4642      	mov	r2, r8
 800df2a:	464b      	mov	r3, r9
 800df2c:	f7f2 f9dc 	bl	80002e8 <__aeabi_dsub>
 800df30:	460b      	mov	r3, r1
 800df32:	4602      	mov	r2, r0
 800df34:	493a      	ldr	r1, [pc, #232]	; (800e020 <__ieee754_pow+0xa30>)
 800df36:	2000      	movs	r0, #0
 800df38:	f7f2 f9d6 	bl	80002e8 <__aeabi_dsub>
 800df3c:	e9cd 0100 	strd	r0, r1, [sp]
 800df40:	9b01      	ldr	r3, [sp, #4]
 800df42:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800df46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df4a:	da2f      	bge.n	800dfac <__ieee754_pow+0x9bc>
 800df4c:	4650      	mov	r0, sl
 800df4e:	ed9d 0b00 	vldr	d0, [sp]
 800df52:	f001 f911 	bl	800f178 <scalbn>
 800df56:	ec51 0b10 	vmov	r0, r1, d0
 800df5a:	ec53 2b18 	vmov	r2, r3, d8
 800df5e:	f7ff bbe0 	b.w	800d722 <__ieee754_pow+0x132>
 800df62:	4b30      	ldr	r3, [pc, #192]	; (800e024 <__ieee754_pow+0xa34>)
 800df64:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800df68:	429e      	cmp	r6, r3
 800df6a:	f77f af0b 	ble.w	800dd84 <__ieee754_pow+0x794>
 800df6e:	4b2e      	ldr	r3, [pc, #184]	; (800e028 <__ieee754_pow+0xa38>)
 800df70:	440b      	add	r3, r1
 800df72:	4303      	orrs	r3, r0
 800df74:	d00b      	beq.n	800df8e <__ieee754_pow+0x99e>
 800df76:	a326      	add	r3, pc, #152	; (adr r3, 800e010 <__ieee754_pow+0xa20>)
 800df78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7c:	ec51 0b18 	vmov	r0, r1, d8
 800df80:	f7f2 fb6a 	bl	8000658 <__aeabi_dmul>
 800df84:	a322      	add	r3, pc, #136	; (adr r3, 800e010 <__ieee754_pow+0xa20>)
 800df86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8a:	f7ff bbca 	b.w	800d722 <__ieee754_pow+0x132>
 800df8e:	4622      	mov	r2, r4
 800df90:	462b      	mov	r3, r5
 800df92:	f7f2 f9a9 	bl	80002e8 <__aeabi_dsub>
 800df96:	4642      	mov	r2, r8
 800df98:	464b      	mov	r3, r9
 800df9a:	f7f2 fde3 	bl	8000b64 <__aeabi_dcmpge>
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	f43f aef0 	beq.w	800dd84 <__ieee754_pow+0x794>
 800dfa4:	e7e7      	b.n	800df76 <__ieee754_pow+0x986>
 800dfa6:	f04f 0a00 	mov.w	sl, #0
 800dfaa:	e717      	b.n	800dddc <__ieee754_pow+0x7ec>
 800dfac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	e7d2      	b.n	800df5a <__ieee754_pow+0x96a>
 800dfb4:	491a      	ldr	r1, [pc, #104]	; (800e020 <__ieee754_pow+0xa30>)
 800dfb6:	2000      	movs	r0, #0
 800dfb8:	f7ff bb9e 	b.w	800d6f8 <__ieee754_pow+0x108>
 800dfbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfc0:	f7ff bb9a 	b.w	800d6f8 <__ieee754_pow+0x108>
 800dfc4:	9000      	str	r0, [sp, #0]
 800dfc6:	f7ff bb76 	b.w	800d6b6 <__ieee754_pow+0xc6>
 800dfca:	2100      	movs	r1, #0
 800dfcc:	f7ff bb60 	b.w	800d690 <__ieee754_pow+0xa0>
 800dfd0:	00000000 	.word	0x00000000
 800dfd4:	3fe62e43 	.word	0x3fe62e43
 800dfd8:	fefa39ef 	.word	0xfefa39ef
 800dfdc:	3fe62e42 	.word	0x3fe62e42
 800dfe0:	0ca86c39 	.word	0x0ca86c39
 800dfe4:	be205c61 	.word	0xbe205c61
 800dfe8:	72bea4d0 	.word	0x72bea4d0
 800dfec:	3e663769 	.word	0x3e663769
 800dff0:	c5d26bf1 	.word	0xc5d26bf1
 800dff4:	3ebbbd41 	.word	0x3ebbbd41
 800dff8:	af25de2c 	.word	0xaf25de2c
 800dffc:	3f11566a 	.word	0x3f11566a
 800e000:	16bebd93 	.word	0x16bebd93
 800e004:	3f66c16c 	.word	0x3f66c16c
 800e008:	5555553e 	.word	0x5555553e
 800e00c:	3fc55555 	.word	0x3fc55555
 800e010:	c2f8f359 	.word	0xc2f8f359
 800e014:	01a56e1f 	.word	0x01a56e1f
 800e018:	3fe00000 	.word	0x3fe00000
 800e01c:	000fffff 	.word	0x000fffff
 800e020:	3ff00000 	.word	0x3ff00000
 800e024:	4090cbff 	.word	0x4090cbff
 800e028:	3f6f3400 	.word	0x3f6f3400
 800e02c:	652b82fe 	.word	0x652b82fe
 800e030:	3c971547 	.word	0x3c971547
 800e034:	00000000 	.word	0x00000000

0800e038 <__ieee754_rem_pio2>:
 800e038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e03c:	ed2d 8b02 	vpush	{d8}
 800e040:	ec55 4b10 	vmov	r4, r5, d0
 800e044:	4bca      	ldr	r3, [pc, #808]	; (800e370 <__ieee754_rem_pio2+0x338>)
 800e046:	b08b      	sub	sp, #44	; 0x2c
 800e048:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e04c:	4598      	cmp	r8, r3
 800e04e:	4682      	mov	sl, r0
 800e050:	9502      	str	r5, [sp, #8]
 800e052:	dc08      	bgt.n	800e066 <__ieee754_rem_pio2+0x2e>
 800e054:	2200      	movs	r2, #0
 800e056:	2300      	movs	r3, #0
 800e058:	ed80 0b00 	vstr	d0, [r0]
 800e05c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e060:	f04f 0b00 	mov.w	fp, #0
 800e064:	e028      	b.n	800e0b8 <__ieee754_rem_pio2+0x80>
 800e066:	4bc3      	ldr	r3, [pc, #780]	; (800e374 <__ieee754_rem_pio2+0x33c>)
 800e068:	4598      	cmp	r8, r3
 800e06a:	dc78      	bgt.n	800e15e <__ieee754_rem_pio2+0x126>
 800e06c:	9b02      	ldr	r3, [sp, #8]
 800e06e:	4ec2      	ldr	r6, [pc, #776]	; (800e378 <__ieee754_rem_pio2+0x340>)
 800e070:	2b00      	cmp	r3, #0
 800e072:	ee10 0a10 	vmov	r0, s0
 800e076:	a3b0      	add	r3, pc, #704	; (adr r3, 800e338 <__ieee754_rem_pio2+0x300>)
 800e078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07c:	4629      	mov	r1, r5
 800e07e:	dd39      	ble.n	800e0f4 <__ieee754_rem_pio2+0xbc>
 800e080:	f7f2 f932 	bl	80002e8 <__aeabi_dsub>
 800e084:	45b0      	cmp	r8, r6
 800e086:	4604      	mov	r4, r0
 800e088:	460d      	mov	r5, r1
 800e08a:	d01b      	beq.n	800e0c4 <__ieee754_rem_pio2+0x8c>
 800e08c:	a3ac      	add	r3, pc, #688	; (adr r3, 800e340 <__ieee754_rem_pio2+0x308>)
 800e08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e092:	f7f2 f929 	bl	80002e8 <__aeabi_dsub>
 800e096:	4602      	mov	r2, r0
 800e098:	460b      	mov	r3, r1
 800e09a:	e9ca 2300 	strd	r2, r3, [sl]
 800e09e:	4620      	mov	r0, r4
 800e0a0:	4629      	mov	r1, r5
 800e0a2:	f7f2 f921 	bl	80002e8 <__aeabi_dsub>
 800e0a6:	a3a6      	add	r3, pc, #664	; (adr r3, 800e340 <__ieee754_rem_pio2+0x308>)
 800e0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ac:	f7f2 f91c 	bl	80002e8 <__aeabi_dsub>
 800e0b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e0b4:	f04f 0b01 	mov.w	fp, #1
 800e0b8:	4658      	mov	r0, fp
 800e0ba:	b00b      	add	sp, #44	; 0x2c
 800e0bc:	ecbd 8b02 	vpop	{d8}
 800e0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0c4:	a3a0      	add	r3, pc, #640	; (adr r3, 800e348 <__ieee754_rem_pio2+0x310>)
 800e0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ca:	f7f2 f90d 	bl	80002e8 <__aeabi_dsub>
 800e0ce:	a3a0      	add	r3, pc, #640	; (adr r3, 800e350 <__ieee754_rem_pio2+0x318>)
 800e0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	460d      	mov	r5, r1
 800e0d8:	f7f2 f906 	bl	80002e8 <__aeabi_dsub>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	460b      	mov	r3, r1
 800e0e0:	e9ca 2300 	strd	r2, r3, [sl]
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	4629      	mov	r1, r5
 800e0e8:	f7f2 f8fe 	bl	80002e8 <__aeabi_dsub>
 800e0ec:	a398      	add	r3, pc, #608	; (adr r3, 800e350 <__ieee754_rem_pio2+0x318>)
 800e0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f2:	e7db      	b.n	800e0ac <__ieee754_rem_pio2+0x74>
 800e0f4:	f7f2 f8fa 	bl	80002ec <__adddf3>
 800e0f8:	45b0      	cmp	r8, r6
 800e0fa:	4604      	mov	r4, r0
 800e0fc:	460d      	mov	r5, r1
 800e0fe:	d016      	beq.n	800e12e <__ieee754_rem_pio2+0xf6>
 800e100:	a38f      	add	r3, pc, #572	; (adr r3, 800e340 <__ieee754_rem_pio2+0x308>)
 800e102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e106:	f7f2 f8f1 	bl	80002ec <__adddf3>
 800e10a:	4602      	mov	r2, r0
 800e10c:	460b      	mov	r3, r1
 800e10e:	e9ca 2300 	strd	r2, r3, [sl]
 800e112:	4620      	mov	r0, r4
 800e114:	4629      	mov	r1, r5
 800e116:	f7f2 f8e7 	bl	80002e8 <__aeabi_dsub>
 800e11a:	a389      	add	r3, pc, #548	; (adr r3, 800e340 <__ieee754_rem_pio2+0x308>)
 800e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e120:	f7f2 f8e4 	bl	80002ec <__adddf3>
 800e124:	f04f 3bff 	mov.w	fp, #4294967295
 800e128:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e12c:	e7c4      	b.n	800e0b8 <__ieee754_rem_pio2+0x80>
 800e12e:	a386      	add	r3, pc, #536	; (adr r3, 800e348 <__ieee754_rem_pio2+0x310>)
 800e130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e134:	f7f2 f8da 	bl	80002ec <__adddf3>
 800e138:	a385      	add	r3, pc, #532	; (adr r3, 800e350 <__ieee754_rem_pio2+0x318>)
 800e13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13e:	4604      	mov	r4, r0
 800e140:	460d      	mov	r5, r1
 800e142:	f7f2 f8d3 	bl	80002ec <__adddf3>
 800e146:	4602      	mov	r2, r0
 800e148:	460b      	mov	r3, r1
 800e14a:	e9ca 2300 	strd	r2, r3, [sl]
 800e14e:	4620      	mov	r0, r4
 800e150:	4629      	mov	r1, r5
 800e152:	f7f2 f8c9 	bl	80002e8 <__aeabi_dsub>
 800e156:	a37e      	add	r3, pc, #504	; (adr r3, 800e350 <__ieee754_rem_pio2+0x318>)
 800e158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15c:	e7e0      	b.n	800e120 <__ieee754_rem_pio2+0xe8>
 800e15e:	4b87      	ldr	r3, [pc, #540]	; (800e37c <__ieee754_rem_pio2+0x344>)
 800e160:	4598      	cmp	r8, r3
 800e162:	f300 80d9 	bgt.w	800e318 <__ieee754_rem_pio2+0x2e0>
 800e166:	f7fe fee7 	bl	800cf38 <fabs>
 800e16a:	ec55 4b10 	vmov	r4, r5, d0
 800e16e:	ee10 0a10 	vmov	r0, s0
 800e172:	a379      	add	r3, pc, #484	; (adr r3, 800e358 <__ieee754_rem_pio2+0x320>)
 800e174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e178:	4629      	mov	r1, r5
 800e17a:	f7f2 fa6d 	bl	8000658 <__aeabi_dmul>
 800e17e:	4b80      	ldr	r3, [pc, #512]	; (800e380 <__ieee754_rem_pio2+0x348>)
 800e180:	2200      	movs	r2, #0
 800e182:	f7f2 f8b3 	bl	80002ec <__adddf3>
 800e186:	f7f2 fd17 	bl	8000bb8 <__aeabi_d2iz>
 800e18a:	4683      	mov	fp, r0
 800e18c:	f7f2 f9fa 	bl	8000584 <__aeabi_i2d>
 800e190:	4602      	mov	r2, r0
 800e192:	460b      	mov	r3, r1
 800e194:	ec43 2b18 	vmov	d8, r2, r3
 800e198:	a367      	add	r3, pc, #412	; (adr r3, 800e338 <__ieee754_rem_pio2+0x300>)
 800e19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19e:	f7f2 fa5b 	bl	8000658 <__aeabi_dmul>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	f7f2 f89d 	bl	80002e8 <__aeabi_dsub>
 800e1ae:	a364      	add	r3, pc, #400	; (adr r3, 800e340 <__ieee754_rem_pio2+0x308>)
 800e1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b4:	4606      	mov	r6, r0
 800e1b6:	460f      	mov	r7, r1
 800e1b8:	ec51 0b18 	vmov	r0, r1, d8
 800e1bc:	f7f2 fa4c 	bl	8000658 <__aeabi_dmul>
 800e1c0:	f1bb 0f1f 	cmp.w	fp, #31
 800e1c4:	4604      	mov	r4, r0
 800e1c6:	460d      	mov	r5, r1
 800e1c8:	dc0d      	bgt.n	800e1e6 <__ieee754_rem_pio2+0x1ae>
 800e1ca:	4b6e      	ldr	r3, [pc, #440]	; (800e384 <__ieee754_rem_pio2+0x34c>)
 800e1cc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e1d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1d4:	4543      	cmp	r3, r8
 800e1d6:	d006      	beq.n	800e1e6 <__ieee754_rem_pio2+0x1ae>
 800e1d8:	4622      	mov	r2, r4
 800e1da:	462b      	mov	r3, r5
 800e1dc:	4630      	mov	r0, r6
 800e1de:	4639      	mov	r1, r7
 800e1e0:	f7f2 f882 	bl	80002e8 <__aeabi_dsub>
 800e1e4:	e00f      	b.n	800e206 <__ieee754_rem_pio2+0x1ce>
 800e1e6:	462b      	mov	r3, r5
 800e1e8:	4622      	mov	r2, r4
 800e1ea:	4630      	mov	r0, r6
 800e1ec:	4639      	mov	r1, r7
 800e1ee:	f7f2 f87b 	bl	80002e8 <__aeabi_dsub>
 800e1f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e1f6:	9303      	str	r3, [sp, #12]
 800e1f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e1fc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e200:	f1b8 0f10 	cmp.w	r8, #16
 800e204:	dc02      	bgt.n	800e20c <__ieee754_rem_pio2+0x1d4>
 800e206:	e9ca 0100 	strd	r0, r1, [sl]
 800e20a:	e039      	b.n	800e280 <__ieee754_rem_pio2+0x248>
 800e20c:	a34e      	add	r3, pc, #312	; (adr r3, 800e348 <__ieee754_rem_pio2+0x310>)
 800e20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e212:	ec51 0b18 	vmov	r0, r1, d8
 800e216:	f7f2 fa1f 	bl	8000658 <__aeabi_dmul>
 800e21a:	4604      	mov	r4, r0
 800e21c:	460d      	mov	r5, r1
 800e21e:	4602      	mov	r2, r0
 800e220:	460b      	mov	r3, r1
 800e222:	4630      	mov	r0, r6
 800e224:	4639      	mov	r1, r7
 800e226:	f7f2 f85f 	bl	80002e8 <__aeabi_dsub>
 800e22a:	4602      	mov	r2, r0
 800e22c:	460b      	mov	r3, r1
 800e22e:	4680      	mov	r8, r0
 800e230:	4689      	mov	r9, r1
 800e232:	4630      	mov	r0, r6
 800e234:	4639      	mov	r1, r7
 800e236:	f7f2 f857 	bl	80002e8 <__aeabi_dsub>
 800e23a:	4622      	mov	r2, r4
 800e23c:	462b      	mov	r3, r5
 800e23e:	f7f2 f853 	bl	80002e8 <__aeabi_dsub>
 800e242:	a343      	add	r3, pc, #268	; (adr r3, 800e350 <__ieee754_rem_pio2+0x318>)
 800e244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e248:	4604      	mov	r4, r0
 800e24a:	460d      	mov	r5, r1
 800e24c:	ec51 0b18 	vmov	r0, r1, d8
 800e250:	f7f2 fa02 	bl	8000658 <__aeabi_dmul>
 800e254:	4622      	mov	r2, r4
 800e256:	462b      	mov	r3, r5
 800e258:	f7f2 f846 	bl	80002e8 <__aeabi_dsub>
 800e25c:	4602      	mov	r2, r0
 800e25e:	460b      	mov	r3, r1
 800e260:	4604      	mov	r4, r0
 800e262:	460d      	mov	r5, r1
 800e264:	4640      	mov	r0, r8
 800e266:	4649      	mov	r1, r9
 800e268:	f7f2 f83e 	bl	80002e8 <__aeabi_dsub>
 800e26c:	9a03      	ldr	r2, [sp, #12]
 800e26e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e272:	1ad3      	subs	r3, r2, r3
 800e274:	2b31      	cmp	r3, #49	; 0x31
 800e276:	dc24      	bgt.n	800e2c2 <__ieee754_rem_pio2+0x28a>
 800e278:	e9ca 0100 	strd	r0, r1, [sl]
 800e27c:	4646      	mov	r6, r8
 800e27e:	464f      	mov	r7, r9
 800e280:	e9da 8900 	ldrd	r8, r9, [sl]
 800e284:	4630      	mov	r0, r6
 800e286:	4642      	mov	r2, r8
 800e288:	464b      	mov	r3, r9
 800e28a:	4639      	mov	r1, r7
 800e28c:	f7f2 f82c 	bl	80002e8 <__aeabi_dsub>
 800e290:	462b      	mov	r3, r5
 800e292:	4622      	mov	r2, r4
 800e294:	f7f2 f828 	bl	80002e8 <__aeabi_dsub>
 800e298:	9b02      	ldr	r3, [sp, #8]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e2a0:	f6bf af0a 	bge.w	800e0b8 <__ieee754_rem_pio2+0x80>
 800e2a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e2a8:	f8ca 3004 	str.w	r3, [sl, #4]
 800e2ac:	f8ca 8000 	str.w	r8, [sl]
 800e2b0:	f8ca 0008 	str.w	r0, [sl, #8]
 800e2b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2b8:	f8ca 300c 	str.w	r3, [sl, #12]
 800e2bc:	f1cb 0b00 	rsb	fp, fp, #0
 800e2c0:	e6fa      	b.n	800e0b8 <__ieee754_rem_pio2+0x80>
 800e2c2:	a327      	add	r3, pc, #156	; (adr r3, 800e360 <__ieee754_rem_pio2+0x328>)
 800e2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c8:	ec51 0b18 	vmov	r0, r1, d8
 800e2cc:	f7f2 f9c4 	bl	8000658 <__aeabi_dmul>
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	460d      	mov	r5, r1
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	4640      	mov	r0, r8
 800e2da:	4649      	mov	r1, r9
 800e2dc:	f7f2 f804 	bl	80002e8 <__aeabi_dsub>
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	460b      	mov	r3, r1
 800e2e4:	4606      	mov	r6, r0
 800e2e6:	460f      	mov	r7, r1
 800e2e8:	4640      	mov	r0, r8
 800e2ea:	4649      	mov	r1, r9
 800e2ec:	f7f1 fffc 	bl	80002e8 <__aeabi_dsub>
 800e2f0:	4622      	mov	r2, r4
 800e2f2:	462b      	mov	r3, r5
 800e2f4:	f7f1 fff8 	bl	80002e8 <__aeabi_dsub>
 800e2f8:	a31b      	add	r3, pc, #108	; (adr r3, 800e368 <__ieee754_rem_pio2+0x330>)
 800e2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fe:	4604      	mov	r4, r0
 800e300:	460d      	mov	r5, r1
 800e302:	ec51 0b18 	vmov	r0, r1, d8
 800e306:	f7f2 f9a7 	bl	8000658 <__aeabi_dmul>
 800e30a:	4622      	mov	r2, r4
 800e30c:	462b      	mov	r3, r5
 800e30e:	f7f1 ffeb 	bl	80002e8 <__aeabi_dsub>
 800e312:	4604      	mov	r4, r0
 800e314:	460d      	mov	r5, r1
 800e316:	e75f      	b.n	800e1d8 <__ieee754_rem_pio2+0x1a0>
 800e318:	4b1b      	ldr	r3, [pc, #108]	; (800e388 <__ieee754_rem_pio2+0x350>)
 800e31a:	4598      	cmp	r8, r3
 800e31c:	dd36      	ble.n	800e38c <__ieee754_rem_pio2+0x354>
 800e31e:	ee10 2a10 	vmov	r2, s0
 800e322:	462b      	mov	r3, r5
 800e324:	4620      	mov	r0, r4
 800e326:	4629      	mov	r1, r5
 800e328:	f7f1 ffde 	bl	80002e8 <__aeabi_dsub>
 800e32c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e330:	e9ca 0100 	strd	r0, r1, [sl]
 800e334:	e694      	b.n	800e060 <__ieee754_rem_pio2+0x28>
 800e336:	bf00      	nop
 800e338:	54400000 	.word	0x54400000
 800e33c:	3ff921fb 	.word	0x3ff921fb
 800e340:	1a626331 	.word	0x1a626331
 800e344:	3dd0b461 	.word	0x3dd0b461
 800e348:	1a600000 	.word	0x1a600000
 800e34c:	3dd0b461 	.word	0x3dd0b461
 800e350:	2e037073 	.word	0x2e037073
 800e354:	3ba3198a 	.word	0x3ba3198a
 800e358:	6dc9c883 	.word	0x6dc9c883
 800e35c:	3fe45f30 	.word	0x3fe45f30
 800e360:	2e000000 	.word	0x2e000000
 800e364:	3ba3198a 	.word	0x3ba3198a
 800e368:	252049c1 	.word	0x252049c1
 800e36c:	397b839a 	.word	0x397b839a
 800e370:	3fe921fb 	.word	0x3fe921fb
 800e374:	4002d97b 	.word	0x4002d97b
 800e378:	3ff921fb 	.word	0x3ff921fb
 800e37c:	413921fb 	.word	0x413921fb
 800e380:	3fe00000 	.word	0x3fe00000
 800e384:	0800fc40 	.word	0x0800fc40
 800e388:	7fefffff 	.word	0x7fefffff
 800e38c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e390:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e394:	ee10 0a10 	vmov	r0, s0
 800e398:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e39c:	ee10 6a10 	vmov	r6, s0
 800e3a0:	460f      	mov	r7, r1
 800e3a2:	f7f2 fc09 	bl	8000bb8 <__aeabi_d2iz>
 800e3a6:	f7f2 f8ed 	bl	8000584 <__aeabi_i2d>
 800e3aa:	4602      	mov	r2, r0
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	4630      	mov	r0, r6
 800e3b0:	4639      	mov	r1, r7
 800e3b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e3b6:	f7f1 ff97 	bl	80002e8 <__aeabi_dsub>
 800e3ba:	4b22      	ldr	r3, [pc, #136]	; (800e444 <__ieee754_rem_pio2+0x40c>)
 800e3bc:	2200      	movs	r2, #0
 800e3be:	f7f2 f94b 	bl	8000658 <__aeabi_dmul>
 800e3c2:	460f      	mov	r7, r1
 800e3c4:	4606      	mov	r6, r0
 800e3c6:	f7f2 fbf7 	bl	8000bb8 <__aeabi_d2iz>
 800e3ca:	f7f2 f8db 	bl	8000584 <__aeabi_i2d>
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	4639      	mov	r1, r7
 800e3d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e3da:	f7f1 ff85 	bl	80002e8 <__aeabi_dsub>
 800e3de:	4b19      	ldr	r3, [pc, #100]	; (800e444 <__ieee754_rem_pio2+0x40c>)
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f7f2 f939 	bl	8000658 <__aeabi_dmul>
 800e3e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e3ea:	ad04      	add	r5, sp, #16
 800e3ec:	f04f 0803 	mov.w	r8, #3
 800e3f0:	46a9      	mov	r9, r5
 800e3f2:	2600      	movs	r6, #0
 800e3f4:	2700      	movs	r7, #0
 800e3f6:	4632      	mov	r2, r6
 800e3f8:	463b      	mov	r3, r7
 800e3fa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e3fe:	46c3      	mov	fp, r8
 800e400:	3d08      	subs	r5, #8
 800e402:	f108 38ff 	add.w	r8, r8, #4294967295
 800e406:	f7f2 fb8f 	bl	8000b28 <__aeabi_dcmpeq>
 800e40a:	2800      	cmp	r0, #0
 800e40c:	d1f3      	bne.n	800e3f6 <__ieee754_rem_pio2+0x3be>
 800e40e:	4b0e      	ldr	r3, [pc, #56]	; (800e448 <__ieee754_rem_pio2+0x410>)
 800e410:	9301      	str	r3, [sp, #4]
 800e412:	2302      	movs	r3, #2
 800e414:	9300      	str	r3, [sp, #0]
 800e416:	4622      	mov	r2, r4
 800e418:	465b      	mov	r3, fp
 800e41a:	4651      	mov	r1, sl
 800e41c:	4648      	mov	r0, r9
 800e41e:	f000 f993 	bl	800e748 <__kernel_rem_pio2>
 800e422:	9b02      	ldr	r3, [sp, #8]
 800e424:	2b00      	cmp	r3, #0
 800e426:	4683      	mov	fp, r0
 800e428:	f6bf ae46 	bge.w	800e0b8 <__ieee754_rem_pio2+0x80>
 800e42c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e430:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e434:	f8ca 3004 	str.w	r3, [sl, #4]
 800e438:	f8da 300c 	ldr.w	r3, [sl, #12]
 800e43c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e440:	e73a      	b.n	800e2b8 <__ieee754_rem_pio2+0x280>
 800e442:	bf00      	nop
 800e444:	41700000 	.word	0x41700000
 800e448:	0800fcc0 	.word	0x0800fcc0

0800e44c <__ieee754_sqrt>:
 800e44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e450:	ec55 4b10 	vmov	r4, r5, d0
 800e454:	4e56      	ldr	r6, [pc, #344]	; (800e5b0 <__ieee754_sqrt+0x164>)
 800e456:	43ae      	bics	r6, r5
 800e458:	ee10 0a10 	vmov	r0, s0
 800e45c:	ee10 3a10 	vmov	r3, s0
 800e460:	4629      	mov	r1, r5
 800e462:	462a      	mov	r2, r5
 800e464:	d110      	bne.n	800e488 <__ieee754_sqrt+0x3c>
 800e466:	ee10 2a10 	vmov	r2, s0
 800e46a:	462b      	mov	r3, r5
 800e46c:	f7f2 f8f4 	bl	8000658 <__aeabi_dmul>
 800e470:	4602      	mov	r2, r0
 800e472:	460b      	mov	r3, r1
 800e474:	4620      	mov	r0, r4
 800e476:	4629      	mov	r1, r5
 800e478:	f7f1 ff38 	bl	80002ec <__adddf3>
 800e47c:	4604      	mov	r4, r0
 800e47e:	460d      	mov	r5, r1
 800e480:	ec45 4b10 	vmov	d0, r4, r5
 800e484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e488:	2d00      	cmp	r5, #0
 800e48a:	dc10      	bgt.n	800e4ae <__ieee754_sqrt+0x62>
 800e48c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e490:	4330      	orrs	r0, r6
 800e492:	d0f5      	beq.n	800e480 <__ieee754_sqrt+0x34>
 800e494:	b15d      	cbz	r5, 800e4ae <__ieee754_sqrt+0x62>
 800e496:	ee10 2a10 	vmov	r2, s0
 800e49a:	462b      	mov	r3, r5
 800e49c:	ee10 0a10 	vmov	r0, s0
 800e4a0:	f7f1 ff22 	bl	80002e8 <__aeabi_dsub>
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	f7f2 fa00 	bl	80008ac <__aeabi_ddiv>
 800e4ac:	e7e6      	b.n	800e47c <__ieee754_sqrt+0x30>
 800e4ae:	1509      	asrs	r1, r1, #20
 800e4b0:	d076      	beq.n	800e5a0 <__ieee754_sqrt+0x154>
 800e4b2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e4b6:	07ce      	lsls	r6, r1, #31
 800e4b8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800e4bc:	bf5e      	ittt	pl
 800e4be:	0fda      	lsrpl	r2, r3, #31
 800e4c0:	005b      	lslpl	r3, r3, #1
 800e4c2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800e4c6:	0fda      	lsrs	r2, r3, #31
 800e4c8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800e4cc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800e4d0:	2000      	movs	r0, #0
 800e4d2:	106d      	asrs	r5, r5, #1
 800e4d4:	005b      	lsls	r3, r3, #1
 800e4d6:	f04f 0e16 	mov.w	lr, #22
 800e4da:	4684      	mov	ip, r0
 800e4dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e4e0:	eb0c 0401 	add.w	r4, ip, r1
 800e4e4:	4294      	cmp	r4, r2
 800e4e6:	bfde      	ittt	le
 800e4e8:	1b12      	suble	r2, r2, r4
 800e4ea:	eb04 0c01 	addle.w	ip, r4, r1
 800e4ee:	1840      	addle	r0, r0, r1
 800e4f0:	0052      	lsls	r2, r2, #1
 800e4f2:	f1be 0e01 	subs.w	lr, lr, #1
 800e4f6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e4fa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e4fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e502:	d1ed      	bne.n	800e4e0 <__ieee754_sqrt+0x94>
 800e504:	4671      	mov	r1, lr
 800e506:	2720      	movs	r7, #32
 800e508:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e50c:	4562      	cmp	r2, ip
 800e50e:	eb04 060e 	add.w	r6, r4, lr
 800e512:	dc02      	bgt.n	800e51a <__ieee754_sqrt+0xce>
 800e514:	d113      	bne.n	800e53e <__ieee754_sqrt+0xf2>
 800e516:	429e      	cmp	r6, r3
 800e518:	d811      	bhi.n	800e53e <__ieee754_sqrt+0xf2>
 800e51a:	2e00      	cmp	r6, #0
 800e51c:	eb06 0e04 	add.w	lr, r6, r4
 800e520:	da43      	bge.n	800e5aa <__ieee754_sqrt+0x15e>
 800e522:	f1be 0f00 	cmp.w	lr, #0
 800e526:	db40      	blt.n	800e5aa <__ieee754_sqrt+0x15e>
 800e528:	f10c 0801 	add.w	r8, ip, #1
 800e52c:	eba2 020c 	sub.w	r2, r2, ip
 800e530:	429e      	cmp	r6, r3
 800e532:	bf88      	it	hi
 800e534:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e538:	1b9b      	subs	r3, r3, r6
 800e53a:	4421      	add	r1, r4
 800e53c:	46c4      	mov	ip, r8
 800e53e:	0052      	lsls	r2, r2, #1
 800e540:	3f01      	subs	r7, #1
 800e542:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e546:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e54a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e54e:	d1dd      	bne.n	800e50c <__ieee754_sqrt+0xc0>
 800e550:	4313      	orrs	r3, r2
 800e552:	d006      	beq.n	800e562 <__ieee754_sqrt+0x116>
 800e554:	1c4c      	adds	r4, r1, #1
 800e556:	bf13      	iteet	ne
 800e558:	3101      	addne	r1, #1
 800e55a:	3001      	addeq	r0, #1
 800e55c:	4639      	moveq	r1, r7
 800e55e:	f021 0101 	bicne.w	r1, r1, #1
 800e562:	1043      	asrs	r3, r0, #1
 800e564:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e568:	0849      	lsrs	r1, r1, #1
 800e56a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e56e:	07c2      	lsls	r2, r0, #31
 800e570:	bf48      	it	mi
 800e572:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e576:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800e57a:	460c      	mov	r4, r1
 800e57c:	463d      	mov	r5, r7
 800e57e:	e77f      	b.n	800e480 <__ieee754_sqrt+0x34>
 800e580:	0ada      	lsrs	r2, r3, #11
 800e582:	3815      	subs	r0, #21
 800e584:	055b      	lsls	r3, r3, #21
 800e586:	2a00      	cmp	r2, #0
 800e588:	d0fa      	beq.n	800e580 <__ieee754_sqrt+0x134>
 800e58a:	02d7      	lsls	r7, r2, #11
 800e58c:	d50a      	bpl.n	800e5a4 <__ieee754_sqrt+0x158>
 800e58e:	f1c1 0420 	rsb	r4, r1, #32
 800e592:	fa23 f404 	lsr.w	r4, r3, r4
 800e596:	1e4d      	subs	r5, r1, #1
 800e598:	408b      	lsls	r3, r1
 800e59a:	4322      	orrs	r2, r4
 800e59c:	1b41      	subs	r1, r0, r5
 800e59e:	e788      	b.n	800e4b2 <__ieee754_sqrt+0x66>
 800e5a0:	4608      	mov	r0, r1
 800e5a2:	e7f0      	b.n	800e586 <__ieee754_sqrt+0x13a>
 800e5a4:	0052      	lsls	r2, r2, #1
 800e5a6:	3101      	adds	r1, #1
 800e5a8:	e7ef      	b.n	800e58a <__ieee754_sqrt+0x13e>
 800e5aa:	46e0      	mov	r8, ip
 800e5ac:	e7be      	b.n	800e52c <__ieee754_sqrt+0xe0>
 800e5ae:	bf00      	nop
 800e5b0:	7ff00000 	.word	0x7ff00000
 800e5b4:	00000000 	.word	0x00000000

0800e5b8 <__kernel_cos>:
 800e5b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5bc:	ec57 6b10 	vmov	r6, r7, d0
 800e5c0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e5c4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e5c8:	ed8d 1b00 	vstr	d1, [sp]
 800e5cc:	da07      	bge.n	800e5de <__kernel_cos+0x26>
 800e5ce:	ee10 0a10 	vmov	r0, s0
 800e5d2:	4639      	mov	r1, r7
 800e5d4:	f7f2 faf0 	bl	8000bb8 <__aeabi_d2iz>
 800e5d8:	2800      	cmp	r0, #0
 800e5da:	f000 8088 	beq.w	800e6ee <__kernel_cos+0x136>
 800e5de:	4632      	mov	r2, r6
 800e5e0:	463b      	mov	r3, r7
 800e5e2:	4630      	mov	r0, r6
 800e5e4:	4639      	mov	r1, r7
 800e5e6:	f7f2 f837 	bl	8000658 <__aeabi_dmul>
 800e5ea:	4b51      	ldr	r3, [pc, #324]	; (800e730 <__kernel_cos+0x178>)
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	460d      	mov	r5, r1
 800e5f2:	f7f2 f831 	bl	8000658 <__aeabi_dmul>
 800e5f6:	a340      	add	r3, pc, #256	; (adr r3, 800e6f8 <__kernel_cos+0x140>)
 800e5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5fc:	4682      	mov	sl, r0
 800e5fe:	468b      	mov	fp, r1
 800e600:	4620      	mov	r0, r4
 800e602:	4629      	mov	r1, r5
 800e604:	f7f2 f828 	bl	8000658 <__aeabi_dmul>
 800e608:	a33d      	add	r3, pc, #244	; (adr r3, 800e700 <__kernel_cos+0x148>)
 800e60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e60e:	f7f1 fe6d 	bl	80002ec <__adddf3>
 800e612:	4622      	mov	r2, r4
 800e614:	462b      	mov	r3, r5
 800e616:	f7f2 f81f 	bl	8000658 <__aeabi_dmul>
 800e61a:	a33b      	add	r3, pc, #236	; (adr r3, 800e708 <__kernel_cos+0x150>)
 800e61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e620:	f7f1 fe62 	bl	80002e8 <__aeabi_dsub>
 800e624:	4622      	mov	r2, r4
 800e626:	462b      	mov	r3, r5
 800e628:	f7f2 f816 	bl	8000658 <__aeabi_dmul>
 800e62c:	a338      	add	r3, pc, #224	; (adr r3, 800e710 <__kernel_cos+0x158>)
 800e62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e632:	f7f1 fe5b 	bl	80002ec <__adddf3>
 800e636:	4622      	mov	r2, r4
 800e638:	462b      	mov	r3, r5
 800e63a:	f7f2 f80d 	bl	8000658 <__aeabi_dmul>
 800e63e:	a336      	add	r3, pc, #216	; (adr r3, 800e718 <__kernel_cos+0x160>)
 800e640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e644:	f7f1 fe50 	bl	80002e8 <__aeabi_dsub>
 800e648:	4622      	mov	r2, r4
 800e64a:	462b      	mov	r3, r5
 800e64c:	f7f2 f804 	bl	8000658 <__aeabi_dmul>
 800e650:	a333      	add	r3, pc, #204	; (adr r3, 800e720 <__kernel_cos+0x168>)
 800e652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e656:	f7f1 fe49 	bl	80002ec <__adddf3>
 800e65a:	4622      	mov	r2, r4
 800e65c:	462b      	mov	r3, r5
 800e65e:	f7f1 fffb 	bl	8000658 <__aeabi_dmul>
 800e662:	4622      	mov	r2, r4
 800e664:	462b      	mov	r3, r5
 800e666:	f7f1 fff7 	bl	8000658 <__aeabi_dmul>
 800e66a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e66e:	4604      	mov	r4, r0
 800e670:	460d      	mov	r5, r1
 800e672:	4630      	mov	r0, r6
 800e674:	4639      	mov	r1, r7
 800e676:	f7f1 ffef 	bl	8000658 <__aeabi_dmul>
 800e67a:	460b      	mov	r3, r1
 800e67c:	4602      	mov	r2, r0
 800e67e:	4629      	mov	r1, r5
 800e680:	4620      	mov	r0, r4
 800e682:	f7f1 fe31 	bl	80002e8 <__aeabi_dsub>
 800e686:	4b2b      	ldr	r3, [pc, #172]	; (800e734 <__kernel_cos+0x17c>)
 800e688:	4598      	cmp	r8, r3
 800e68a:	4606      	mov	r6, r0
 800e68c:	460f      	mov	r7, r1
 800e68e:	dc10      	bgt.n	800e6b2 <__kernel_cos+0xfa>
 800e690:	4602      	mov	r2, r0
 800e692:	460b      	mov	r3, r1
 800e694:	4650      	mov	r0, sl
 800e696:	4659      	mov	r1, fp
 800e698:	f7f1 fe26 	bl	80002e8 <__aeabi_dsub>
 800e69c:	460b      	mov	r3, r1
 800e69e:	4926      	ldr	r1, [pc, #152]	; (800e738 <__kernel_cos+0x180>)
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	2000      	movs	r0, #0
 800e6a4:	f7f1 fe20 	bl	80002e8 <__aeabi_dsub>
 800e6a8:	ec41 0b10 	vmov	d0, r0, r1
 800e6ac:	b003      	add	sp, #12
 800e6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b2:	4b22      	ldr	r3, [pc, #136]	; (800e73c <__kernel_cos+0x184>)
 800e6b4:	4920      	ldr	r1, [pc, #128]	; (800e738 <__kernel_cos+0x180>)
 800e6b6:	4598      	cmp	r8, r3
 800e6b8:	bfcc      	ite	gt
 800e6ba:	4d21      	ldrgt	r5, [pc, #132]	; (800e740 <__kernel_cos+0x188>)
 800e6bc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e6c0:	2400      	movs	r4, #0
 800e6c2:	4622      	mov	r2, r4
 800e6c4:	462b      	mov	r3, r5
 800e6c6:	2000      	movs	r0, #0
 800e6c8:	f7f1 fe0e 	bl	80002e8 <__aeabi_dsub>
 800e6cc:	4622      	mov	r2, r4
 800e6ce:	4680      	mov	r8, r0
 800e6d0:	4689      	mov	r9, r1
 800e6d2:	462b      	mov	r3, r5
 800e6d4:	4650      	mov	r0, sl
 800e6d6:	4659      	mov	r1, fp
 800e6d8:	f7f1 fe06 	bl	80002e8 <__aeabi_dsub>
 800e6dc:	4632      	mov	r2, r6
 800e6de:	463b      	mov	r3, r7
 800e6e0:	f7f1 fe02 	bl	80002e8 <__aeabi_dsub>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	4640      	mov	r0, r8
 800e6ea:	4649      	mov	r1, r9
 800e6ec:	e7da      	b.n	800e6a4 <__kernel_cos+0xec>
 800e6ee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e728 <__kernel_cos+0x170>
 800e6f2:	e7db      	b.n	800e6ac <__kernel_cos+0xf4>
 800e6f4:	f3af 8000 	nop.w
 800e6f8:	be8838d4 	.word	0xbe8838d4
 800e6fc:	bda8fae9 	.word	0xbda8fae9
 800e700:	bdb4b1c4 	.word	0xbdb4b1c4
 800e704:	3e21ee9e 	.word	0x3e21ee9e
 800e708:	809c52ad 	.word	0x809c52ad
 800e70c:	3e927e4f 	.word	0x3e927e4f
 800e710:	19cb1590 	.word	0x19cb1590
 800e714:	3efa01a0 	.word	0x3efa01a0
 800e718:	16c15177 	.word	0x16c15177
 800e71c:	3f56c16c 	.word	0x3f56c16c
 800e720:	5555554c 	.word	0x5555554c
 800e724:	3fa55555 	.word	0x3fa55555
 800e728:	00000000 	.word	0x00000000
 800e72c:	3ff00000 	.word	0x3ff00000
 800e730:	3fe00000 	.word	0x3fe00000
 800e734:	3fd33332 	.word	0x3fd33332
 800e738:	3ff00000 	.word	0x3ff00000
 800e73c:	3fe90000 	.word	0x3fe90000
 800e740:	3fd20000 	.word	0x3fd20000
 800e744:	00000000 	.word	0x00000000

0800e748 <__kernel_rem_pio2>:
 800e748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e74c:	ed2d 8b02 	vpush	{d8}
 800e750:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e754:	f112 0f14 	cmn.w	r2, #20
 800e758:	9308      	str	r3, [sp, #32]
 800e75a:	9101      	str	r1, [sp, #4]
 800e75c:	4bc6      	ldr	r3, [pc, #792]	; (800ea78 <__kernel_rem_pio2+0x330>)
 800e75e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e760:	9009      	str	r0, [sp, #36]	; 0x24
 800e762:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e766:	9304      	str	r3, [sp, #16]
 800e768:	9b08      	ldr	r3, [sp, #32]
 800e76a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e76e:	bfa8      	it	ge
 800e770:	1ed4      	subge	r4, r2, #3
 800e772:	9306      	str	r3, [sp, #24]
 800e774:	bfb2      	itee	lt
 800e776:	2400      	movlt	r4, #0
 800e778:	2318      	movge	r3, #24
 800e77a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e77e:	f06f 0317 	mvn.w	r3, #23
 800e782:	fb04 3303 	mla	r3, r4, r3, r3
 800e786:	eb03 0a02 	add.w	sl, r3, r2
 800e78a:	9b04      	ldr	r3, [sp, #16]
 800e78c:	9a06      	ldr	r2, [sp, #24]
 800e78e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800ea68 <__kernel_rem_pio2+0x320>
 800e792:	eb03 0802 	add.w	r8, r3, r2
 800e796:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e798:	1aa7      	subs	r7, r4, r2
 800e79a:	ae20      	add	r6, sp, #128	; 0x80
 800e79c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e7a0:	2500      	movs	r5, #0
 800e7a2:	4545      	cmp	r5, r8
 800e7a4:	dd18      	ble.n	800e7d8 <__kernel_rem_pio2+0x90>
 800e7a6:	9b08      	ldr	r3, [sp, #32]
 800e7a8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e7ac:	aa20      	add	r2, sp, #128	; 0x80
 800e7ae:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800ea68 <__kernel_rem_pio2+0x320>
 800e7b2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e7b6:	f1c3 0301 	rsb	r3, r3, #1
 800e7ba:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e7be:	9307      	str	r3, [sp, #28]
 800e7c0:	9b07      	ldr	r3, [sp, #28]
 800e7c2:	9a04      	ldr	r2, [sp, #16]
 800e7c4:	4443      	add	r3, r8
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	db2f      	blt.n	800e82a <__kernel_rem_pio2+0xe2>
 800e7ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e7ce:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e7d2:	462f      	mov	r7, r5
 800e7d4:	2600      	movs	r6, #0
 800e7d6:	e01b      	b.n	800e810 <__kernel_rem_pio2+0xc8>
 800e7d8:	42ef      	cmn	r7, r5
 800e7da:	d407      	bmi.n	800e7ec <__kernel_rem_pio2+0xa4>
 800e7dc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e7e0:	f7f1 fed0 	bl	8000584 <__aeabi_i2d>
 800e7e4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e7e8:	3501      	adds	r5, #1
 800e7ea:	e7da      	b.n	800e7a2 <__kernel_rem_pio2+0x5a>
 800e7ec:	ec51 0b18 	vmov	r0, r1, d8
 800e7f0:	e7f8      	b.n	800e7e4 <__kernel_rem_pio2+0x9c>
 800e7f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7f6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e7fa:	f7f1 ff2d 	bl	8000658 <__aeabi_dmul>
 800e7fe:	4602      	mov	r2, r0
 800e800:	460b      	mov	r3, r1
 800e802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e806:	f7f1 fd71 	bl	80002ec <__adddf3>
 800e80a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e80e:	3601      	adds	r6, #1
 800e810:	9b06      	ldr	r3, [sp, #24]
 800e812:	429e      	cmp	r6, r3
 800e814:	f1a7 0708 	sub.w	r7, r7, #8
 800e818:	ddeb      	ble.n	800e7f2 <__kernel_rem_pio2+0xaa>
 800e81a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e81e:	3508      	adds	r5, #8
 800e820:	ecab 7b02 	vstmia	fp!, {d7}
 800e824:	f108 0801 	add.w	r8, r8, #1
 800e828:	e7ca      	b.n	800e7c0 <__kernel_rem_pio2+0x78>
 800e82a:	9b04      	ldr	r3, [sp, #16]
 800e82c:	aa0c      	add	r2, sp, #48	; 0x30
 800e82e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e832:	930b      	str	r3, [sp, #44]	; 0x2c
 800e834:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e836:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e83a:	9c04      	ldr	r4, [sp, #16]
 800e83c:	930a      	str	r3, [sp, #40]	; 0x28
 800e83e:	ab98      	add	r3, sp, #608	; 0x260
 800e840:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e844:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e848:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800e84c:	f8cd b008 	str.w	fp, [sp, #8]
 800e850:	4625      	mov	r5, r4
 800e852:	2d00      	cmp	r5, #0
 800e854:	dc78      	bgt.n	800e948 <__kernel_rem_pio2+0x200>
 800e856:	ec47 6b10 	vmov	d0, r6, r7
 800e85a:	4650      	mov	r0, sl
 800e85c:	f000 fc8c 	bl	800f178 <scalbn>
 800e860:	ec57 6b10 	vmov	r6, r7, d0
 800e864:	2200      	movs	r2, #0
 800e866:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e86a:	ee10 0a10 	vmov	r0, s0
 800e86e:	4639      	mov	r1, r7
 800e870:	f7f1 fef2 	bl	8000658 <__aeabi_dmul>
 800e874:	ec41 0b10 	vmov	d0, r0, r1
 800e878:	f000 fb72 	bl	800ef60 <floor>
 800e87c:	4b7f      	ldr	r3, [pc, #508]	; (800ea7c <__kernel_rem_pio2+0x334>)
 800e87e:	ec51 0b10 	vmov	r0, r1, d0
 800e882:	2200      	movs	r2, #0
 800e884:	f7f1 fee8 	bl	8000658 <__aeabi_dmul>
 800e888:	4602      	mov	r2, r0
 800e88a:	460b      	mov	r3, r1
 800e88c:	4630      	mov	r0, r6
 800e88e:	4639      	mov	r1, r7
 800e890:	f7f1 fd2a 	bl	80002e8 <__aeabi_dsub>
 800e894:	460f      	mov	r7, r1
 800e896:	4606      	mov	r6, r0
 800e898:	f7f2 f98e 	bl	8000bb8 <__aeabi_d2iz>
 800e89c:	9007      	str	r0, [sp, #28]
 800e89e:	f7f1 fe71 	bl	8000584 <__aeabi_i2d>
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	460b      	mov	r3, r1
 800e8a6:	4630      	mov	r0, r6
 800e8a8:	4639      	mov	r1, r7
 800e8aa:	f7f1 fd1d 	bl	80002e8 <__aeabi_dsub>
 800e8ae:	f1ba 0f00 	cmp.w	sl, #0
 800e8b2:	4606      	mov	r6, r0
 800e8b4:	460f      	mov	r7, r1
 800e8b6:	dd70      	ble.n	800e99a <__kernel_rem_pio2+0x252>
 800e8b8:	1e62      	subs	r2, r4, #1
 800e8ba:	ab0c      	add	r3, sp, #48	; 0x30
 800e8bc:	9d07      	ldr	r5, [sp, #28]
 800e8be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e8c2:	f1ca 0118 	rsb	r1, sl, #24
 800e8c6:	fa40 f301 	asr.w	r3, r0, r1
 800e8ca:	441d      	add	r5, r3
 800e8cc:	408b      	lsls	r3, r1
 800e8ce:	1ac0      	subs	r0, r0, r3
 800e8d0:	ab0c      	add	r3, sp, #48	; 0x30
 800e8d2:	9507      	str	r5, [sp, #28]
 800e8d4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e8d8:	f1ca 0317 	rsb	r3, sl, #23
 800e8dc:	fa40 f303 	asr.w	r3, r0, r3
 800e8e0:	9302      	str	r3, [sp, #8]
 800e8e2:	9b02      	ldr	r3, [sp, #8]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	dd66      	ble.n	800e9b6 <__kernel_rem_pio2+0x26e>
 800e8e8:	9b07      	ldr	r3, [sp, #28]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	3301      	adds	r3, #1
 800e8ee:	9307      	str	r3, [sp, #28]
 800e8f0:	4615      	mov	r5, r2
 800e8f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e8f6:	4294      	cmp	r4, r2
 800e8f8:	f300 8099 	bgt.w	800ea2e <__kernel_rem_pio2+0x2e6>
 800e8fc:	f1ba 0f00 	cmp.w	sl, #0
 800e900:	dd07      	ble.n	800e912 <__kernel_rem_pio2+0x1ca>
 800e902:	f1ba 0f01 	cmp.w	sl, #1
 800e906:	f000 80a5 	beq.w	800ea54 <__kernel_rem_pio2+0x30c>
 800e90a:	f1ba 0f02 	cmp.w	sl, #2
 800e90e:	f000 80c1 	beq.w	800ea94 <__kernel_rem_pio2+0x34c>
 800e912:	9b02      	ldr	r3, [sp, #8]
 800e914:	2b02      	cmp	r3, #2
 800e916:	d14e      	bne.n	800e9b6 <__kernel_rem_pio2+0x26e>
 800e918:	4632      	mov	r2, r6
 800e91a:	463b      	mov	r3, r7
 800e91c:	4958      	ldr	r1, [pc, #352]	; (800ea80 <__kernel_rem_pio2+0x338>)
 800e91e:	2000      	movs	r0, #0
 800e920:	f7f1 fce2 	bl	80002e8 <__aeabi_dsub>
 800e924:	4606      	mov	r6, r0
 800e926:	460f      	mov	r7, r1
 800e928:	2d00      	cmp	r5, #0
 800e92a:	d044      	beq.n	800e9b6 <__kernel_rem_pio2+0x26e>
 800e92c:	4650      	mov	r0, sl
 800e92e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800ea70 <__kernel_rem_pio2+0x328>
 800e932:	f000 fc21 	bl	800f178 <scalbn>
 800e936:	4630      	mov	r0, r6
 800e938:	4639      	mov	r1, r7
 800e93a:	ec53 2b10 	vmov	r2, r3, d0
 800e93e:	f7f1 fcd3 	bl	80002e8 <__aeabi_dsub>
 800e942:	4606      	mov	r6, r0
 800e944:	460f      	mov	r7, r1
 800e946:	e036      	b.n	800e9b6 <__kernel_rem_pio2+0x26e>
 800e948:	4b4e      	ldr	r3, [pc, #312]	; (800ea84 <__kernel_rem_pio2+0x33c>)
 800e94a:	2200      	movs	r2, #0
 800e94c:	4630      	mov	r0, r6
 800e94e:	4639      	mov	r1, r7
 800e950:	f7f1 fe82 	bl	8000658 <__aeabi_dmul>
 800e954:	f7f2 f930 	bl	8000bb8 <__aeabi_d2iz>
 800e958:	f7f1 fe14 	bl	8000584 <__aeabi_i2d>
 800e95c:	4b4a      	ldr	r3, [pc, #296]	; (800ea88 <__kernel_rem_pio2+0x340>)
 800e95e:	2200      	movs	r2, #0
 800e960:	4680      	mov	r8, r0
 800e962:	4689      	mov	r9, r1
 800e964:	f7f1 fe78 	bl	8000658 <__aeabi_dmul>
 800e968:	4602      	mov	r2, r0
 800e96a:	460b      	mov	r3, r1
 800e96c:	4630      	mov	r0, r6
 800e96e:	4639      	mov	r1, r7
 800e970:	f7f1 fcba 	bl	80002e8 <__aeabi_dsub>
 800e974:	f7f2 f920 	bl	8000bb8 <__aeabi_d2iz>
 800e978:	9b02      	ldr	r3, [sp, #8]
 800e97a:	f843 0b04 	str.w	r0, [r3], #4
 800e97e:	3d01      	subs	r5, #1
 800e980:	9302      	str	r3, [sp, #8]
 800e982:	ab70      	add	r3, sp, #448	; 0x1c0
 800e984:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98c:	4640      	mov	r0, r8
 800e98e:	4649      	mov	r1, r9
 800e990:	f7f1 fcac 	bl	80002ec <__adddf3>
 800e994:	4606      	mov	r6, r0
 800e996:	460f      	mov	r7, r1
 800e998:	e75b      	b.n	800e852 <__kernel_rem_pio2+0x10a>
 800e99a:	d105      	bne.n	800e9a8 <__kernel_rem_pio2+0x260>
 800e99c:	1e63      	subs	r3, r4, #1
 800e99e:	aa0c      	add	r2, sp, #48	; 0x30
 800e9a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e9a4:	15c3      	asrs	r3, r0, #23
 800e9a6:	e79b      	b.n	800e8e0 <__kernel_rem_pio2+0x198>
 800e9a8:	4b38      	ldr	r3, [pc, #224]	; (800ea8c <__kernel_rem_pio2+0x344>)
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	f7f2 f8da 	bl	8000b64 <__aeabi_dcmpge>
 800e9b0:	2800      	cmp	r0, #0
 800e9b2:	d139      	bne.n	800ea28 <__kernel_rem_pio2+0x2e0>
 800e9b4:	9002      	str	r0, [sp, #8]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	4630      	mov	r0, r6
 800e9bc:	4639      	mov	r1, r7
 800e9be:	f7f2 f8b3 	bl	8000b28 <__aeabi_dcmpeq>
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	f000 80b4 	beq.w	800eb30 <__kernel_rem_pio2+0x3e8>
 800e9c8:	f104 3bff 	add.w	fp, r4, #4294967295
 800e9cc:	465b      	mov	r3, fp
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	9904      	ldr	r1, [sp, #16]
 800e9d2:	428b      	cmp	r3, r1
 800e9d4:	da65      	bge.n	800eaa2 <__kernel_rem_pio2+0x35a>
 800e9d6:	2a00      	cmp	r2, #0
 800e9d8:	d07b      	beq.n	800ead2 <__kernel_rem_pio2+0x38a>
 800e9da:	ab0c      	add	r3, sp, #48	; 0x30
 800e9dc:	f1aa 0a18 	sub.w	sl, sl, #24
 800e9e0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	f000 80a0 	beq.w	800eb2a <__kernel_rem_pio2+0x3e2>
 800e9ea:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800ea70 <__kernel_rem_pio2+0x328>
 800e9ee:	4650      	mov	r0, sl
 800e9f0:	f000 fbc2 	bl	800f178 <scalbn>
 800e9f4:	4f23      	ldr	r7, [pc, #140]	; (800ea84 <__kernel_rem_pio2+0x33c>)
 800e9f6:	ec55 4b10 	vmov	r4, r5, d0
 800e9fa:	46d8      	mov	r8, fp
 800e9fc:	2600      	movs	r6, #0
 800e9fe:	f1b8 0f00 	cmp.w	r8, #0
 800ea02:	f280 80cf 	bge.w	800eba4 <__kernel_rem_pio2+0x45c>
 800ea06:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800ea68 <__kernel_rem_pio2+0x320>
 800ea0a:	465f      	mov	r7, fp
 800ea0c:	f04f 0800 	mov.w	r8, #0
 800ea10:	2f00      	cmp	r7, #0
 800ea12:	f2c0 80fd 	blt.w	800ec10 <__kernel_rem_pio2+0x4c8>
 800ea16:	ab70      	add	r3, sp, #448	; 0x1c0
 800ea18:	f8df a074 	ldr.w	sl, [pc, #116]	; 800ea90 <__kernel_rem_pio2+0x348>
 800ea1c:	ec55 4b18 	vmov	r4, r5, d8
 800ea20:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800ea24:	2600      	movs	r6, #0
 800ea26:	e0e5      	b.n	800ebf4 <__kernel_rem_pio2+0x4ac>
 800ea28:	2302      	movs	r3, #2
 800ea2a:	9302      	str	r3, [sp, #8]
 800ea2c:	e75c      	b.n	800e8e8 <__kernel_rem_pio2+0x1a0>
 800ea2e:	f8db 3000 	ldr.w	r3, [fp]
 800ea32:	b955      	cbnz	r5, 800ea4a <__kernel_rem_pio2+0x302>
 800ea34:	b123      	cbz	r3, 800ea40 <__kernel_rem_pio2+0x2f8>
 800ea36:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ea3a:	f8cb 3000 	str.w	r3, [fp]
 800ea3e:	2301      	movs	r3, #1
 800ea40:	3201      	adds	r2, #1
 800ea42:	f10b 0b04 	add.w	fp, fp, #4
 800ea46:	461d      	mov	r5, r3
 800ea48:	e755      	b.n	800e8f6 <__kernel_rem_pio2+0x1ae>
 800ea4a:	1acb      	subs	r3, r1, r3
 800ea4c:	f8cb 3000 	str.w	r3, [fp]
 800ea50:	462b      	mov	r3, r5
 800ea52:	e7f5      	b.n	800ea40 <__kernel_rem_pio2+0x2f8>
 800ea54:	1e62      	subs	r2, r4, #1
 800ea56:	ab0c      	add	r3, sp, #48	; 0x30
 800ea58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea5c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ea60:	a90c      	add	r1, sp, #48	; 0x30
 800ea62:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ea66:	e754      	b.n	800e912 <__kernel_rem_pio2+0x1ca>
	...
 800ea74:	3ff00000 	.word	0x3ff00000
 800ea78:	0800fe08 	.word	0x0800fe08
 800ea7c:	40200000 	.word	0x40200000
 800ea80:	3ff00000 	.word	0x3ff00000
 800ea84:	3e700000 	.word	0x3e700000
 800ea88:	41700000 	.word	0x41700000
 800ea8c:	3fe00000 	.word	0x3fe00000
 800ea90:	0800fdc8 	.word	0x0800fdc8
 800ea94:	1e62      	subs	r2, r4, #1
 800ea96:	ab0c      	add	r3, sp, #48	; 0x30
 800ea98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea9c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800eaa0:	e7de      	b.n	800ea60 <__kernel_rem_pio2+0x318>
 800eaa2:	a90c      	add	r1, sp, #48	; 0x30
 800eaa4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800eaa8:	3b01      	subs	r3, #1
 800eaaa:	430a      	orrs	r2, r1
 800eaac:	e790      	b.n	800e9d0 <__kernel_rem_pio2+0x288>
 800eaae:	3301      	adds	r3, #1
 800eab0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800eab4:	2900      	cmp	r1, #0
 800eab6:	d0fa      	beq.n	800eaae <__kernel_rem_pio2+0x366>
 800eab8:	9a08      	ldr	r2, [sp, #32]
 800eaba:	18e3      	adds	r3, r4, r3
 800eabc:	18a6      	adds	r6, r4, r2
 800eabe:	aa20      	add	r2, sp, #128	; 0x80
 800eac0:	1c65      	adds	r5, r4, #1
 800eac2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800eac6:	9302      	str	r3, [sp, #8]
 800eac8:	9b02      	ldr	r3, [sp, #8]
 800eaca:	42ab      	cmp	r3, r5
 800eacc:	da04      	bge.n	800ead8 <__kernel_rem_pio2+0x390>
 800eace:	461c      	mov	r4, r3
 800ead0:	e6b5      	b.n	800e83e <__kernel_rem_pio2+0xf6>
 800ead2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ead4:	2301      	movs	r3, #1
 800ead6:	e7eb      	b.n	800eab0 <__kernel_rem_pio2+0x368>
 800ead8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eada:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eade:	f7f1 fd51 	bl	8000584 <__aeabi_i2d>
 800eae2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800eae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eae8:	46b3      	mov	fp, r6
 800eaea:	461c      	mov	r4, r3
 800eaec:	2700      	movs	r7, #0
 800eaee:	f04f 0800 	mov.w	r8, #0
 800eaf2:	f04f 0900 	mov.w	r9, #0
 800eaf6:	9b06      	ldr	r3, [sp, #24]
 800eaf8:	429f      	cmp	r7, r3
 800eafa:	dd06      	ble.n	800eb0a <__kernel_rem_pio2+0x3c2>
 800eafc:	ab70      	add	r3, sp, #448	; 0x1c0
 800eafe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800eb02:	e9c3 8900 	strd	r8, r9, [r3]
 800eb06:	3501      	adds	r5, #1
 800eb08:	e7de      	b.n	800eac8 <__kernel_rem_pio2+0x380>
 800eb0a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800eb0e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800eb12:	f7f1 fda1 	bl	8000658 <__aeabi_dmul>
 800eb16:	4602      	mov	r2, r0
 800eb18:	460b      	mov	r3, r1
 800eb1a:	4640      	mov	r0, r8
 800eb1c:	4649      	mov	r1, r9
 800eb1e:	f7f1 fbe5 	bl	80002ec <__adddf3>
 800eb22:	3701      	adds	r7, #1
 800eb24:	4680      	mov	r8, r0
 800eb26:	4689      	mov	r9, r1
 800eb28:	e7e5      	b.n	800eaf6 <__kernel_rem_pio2+0x3ae>
 800eb2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eb2e:	e754      	b.n	800e9da <__kernel_rem_pio2+0x292>
 800eb30:	ec47 6b10 	vmov	d0, r6, r7
 800eb34:	f1ca 0000 	rsb	r0, sl, #0
 800eb38:	f000 fb1e 	bl	800f178 <scalbn>
 800eb3c:	ec57 6b10 	vmov	r6, r7, d0
 800eb40:	4b9f      	ldr	r3, [pc, #636]	; (800edc0 <__kernel_rem_pio2+0x678>)
 800eb42:	ee10 0a10 	vmov	r0, s0
 800eb46:	2200      	movs	r2, #0
 800eb48:	4639      	mov	r1, r7
 800eb4a:	f7f2 f80b 	bl	8000b64 <__aeabi_dcmpge>
 800eb4e:	b300      	cbz	r0, 800eb92 <__kernel_rem_pio2+0x44a>
 800eb50:	4b9c      	ldr	r3, [pc, #624]	; (800edc4 <__kernel_rem_pio2+0x67c>)
 800eb52:	2200      	movs	r2, #0
 800eb54:	4630      	mov	r0, r6
 800eb56:	4639      	mov	r1, r7
 800eb58:	f7f1 fd7e 	bl	8000658 <__aeabi_dmul>
 800eb5c:	f7f2 f82c 	bl	8000bb8 <__aeabi_d2iz>
 800eb60:	4605      	mov	r5, r0
 800eb62:	f7f1 fd0f 	bl	8000584 <__aeabi_i2d>
 800eb66:	4b96      	ldr	r3, [pc, #600]	; (800edc0 <__kernel_rem_pio2+0x678>)
 800eb68:	2200      	movs	r2, #0
 800eb6a:	f7f1 fd75 	bl	8000658 <__aeabi_dmul>
 800eb6e:	460b      	mov	r3, r1
 800eb70:	4602      	mov	r2, r0
 800eb72:	4639      	mov	r1, r7
 800eb74:	4630      	mov	r0, r6
 800eb76:	f7f1 fbb7 	bl	80002e8 <__aeabi_dsub>
 800eb7a:	f7f2 f81d 	bl	8000bb8 <__aeabi_d2iz>
 800eb7e:	f104 0b01 	add.w	fp, r4, #1
 800eb82:	ab0c      	add	r3, sp, #48	; 0x30
 800eb84:	f10a 0a18 	add.w	sl, sl, #24
 800eb88:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800eb8c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800eb90:	e72b      	b.n	800e9ea <__kernel_rem_pio2+0x2a2>
 800eb92:	4630      	mov	r0, r6
 800eb94:	4639      	mov	r1, r7
 800eb96:	f7f2 f80f 	bl	8000bb8 <__aeabi_d2iz>
 800eb9a:	ab0c      	add	r3, sp, #48	; 0x30
 800eb9c:	46a3      	mov	fp, r4
 800eb9e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800eba2:	e722      	b.n	800e9ea <__kernel_rem_pio2+0x2a2>
 800eba4:	ab70      	add	r3, sp, #448	; 0x1c0
 800eba6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800ebaa:	ab0c      	add	r3, sp, #48	; 0x30
 800ebac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ebb0:	f7f1 fce8 	bl	8000584 <__aeabi_i2d>
 800ebb4:	4622      	mov	r2, r4
 800ebb6:	462b      	mov	r3, r5
 800ebb8:	f7f1 fd4e 	bl	8000658 <__aeabi_dmul>
 800ebbc:	4632      	mov	r2, r6
 800ebbe:	e9c9 0100 	strd	r0, r1, [r9]
 800ebc2:	463b      	mov	r3, r7
 800ebc4:	4620      	mov	r0, r4
 800ebc6:	4629      	mov	r1, r5
 800ebc8:	f7f1 fd46 	bl	8000658 <__aeabi_dmul>
 800ebcc:	f108 38ff 	add.w	r8, r8, #4294967295
 800ebd0:	4604      	mov	r4, r0
 800ebd2:	460d      	mov	r5, r1
 800ebd4:	e713      	b.n	800e9fe <__kernel_rem_pio2+0x2b6>
 800ebd6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ebda:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ebde:	f7f1 fd3b 	bl	8000658 <__aeabi_dmul>
 800ebe2:	4602      	mov	r2, r0
 800ebe4:	460b      	mov	r3, r1
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	4629      	mov	r1, r5
 800ebea:	f7f1 fb7f 	bl	80002ec <__adddf3>
 800ebee:	3601      	adds	r6, #1
 800ebf0:	4604      	mov	r4, r0
 800ebf2:	460d      	mov	r5, r1
 800ebf4:	9b04      	ldr	r3, [sp, #16]
 800ebf6:	429e      	cmp	r6, r3
 800ebf8:	dc01      	bgt.n	800ebfe <__kernel_rem_pio2+0x4b6>
 800ebfa:	45b0      	cmp	r8, r6
 800ebfc:	daeb      	bge.n	800ebd6 <__kernel_rem_pio2+0x48e>
 800ebfe:	ab48      	add	r3, sp, #288	; 0x120
 800ec00:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ec04:	e9c3 4500 	strd	r4, r5, [r3]
 800ec08:	3f01      	subs	r7, #1
 800ec0a:	f108 0801 	add.w	r8, r8, #1
 800ec0e:	e6ff      	b.n	800ea10 <__kernel_rem_pio2+0x2c8>
 800ec10:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ec12:	2b02      	cmp	r3, #2
 800ec14:	dc0b      	bgt.n	800ec2e <__kernel_rem_pio2+0x4e6>
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	dc6e      	bgt.n	800ecf8 <__kernel_rem_pio2+0x5b0>
 800ec1a:	d045      	beq.n	800eca8 <__kernel_rem_pio2+0x560>
 800ec1c:	9b07      	ldr	r3, [sp, #28]
 800ec1e:	f003 0007 	and.w	r0, r3, #7
 800ec22:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ec26:	ecbd 8b02 	vpop	{d8}
 800ec2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec2e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ec30:	2b03      	cmp	r3, #3
 800ec32:	d1f3      	bne.n	800ec1c <__kernel_rem_pio2+0x4d4>
 800ec34:	ab48      	add	r3, sp, #288	; 0x120
 800ec36:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800ec3a:	46d0      	mov	r8, sl
 800ec3c:	46d9      	mov	r9, fp
 800ec3e:	f1b9 0f00 	cmp.w	r9, #0
 800ec42:	f1a8 0808 	sub.w	r8, r8, #8
 800ec46:	dc64      	bgt.n	800ed12 <__kernel_rem_pio2+0x5ca>
 800ec48:	465c      	mov	r4, fp
 800ec4a:	2c01      	cmp	r4, #1
 800ec4c:	f1aa 0a08 	sub.w	sl, sl, #8
 800ec50:	dc7e      	bgt.n	800ed50 <__kernel_rem_pio2+0x608>
 800ec52:	2000      	movs	r0, #0
 800ec54:	2100      	movs	r1, #0
 800ec56:	f1bb 0f01 	cmp.w	fp, #1
 800ec5a:	f300 8097 	bgt.w	800ed8c <__kernel_rem_pio2+0x644>
 800ec5e:	9b02      	ldr	r3, [sp, #8]
 800ec60:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800ec64:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	f040 8099 	bne.w	800eda0 <__kernel_rem_pio2+0x658>
 800ec6e:	9b01      	ldr	r3, [sp, #4]
 800ec70:	e9c3 5600 	strd	r5, r6, [r3]
 800ec74:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ec78:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ec7c:	e7ce      	b.n	800ec1c <__kernel_rem_pio2+0x4d4>
 800ec7e:	ab48      	add	r3, sp, #288	; 0x120
 800ec80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ec84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec88:	f7f1 fb30 	bl	80002ec <__adddf3>
 800ec8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ec90:	f1bb 0f00 	cmp.w	fp, #0
 800ec94:	daf3      	bge.n	800ec7e <__kernel_rem_pio2+0x536>
 800ec96:	9b02      	ldr	r3, [sp, #8]
 800ec98:	b113      	cbz	r3, 800eca0 <__kernel_rem_pio2+0x558>
 800ec9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec9e:	4619      	mov	r1, r3
 800eca0:	9b01      	ldr	r3, [sp, #4]
 800eca2:	e9c3 0100 	strd	r0, r1, [r3]
 800eca6:	e7b9      	b.n	800ec1c <__kernel_rem_pio2+0x4d4>
 800eca8:	2000      	movs	r0, #0
 800ecaa:	2100      	movs	r1, #0
 800ecac:	e7f0      	b.n	800ec90 <__kernel_rem_pio2+0x548>
 800ecae:	ab48      	add	r3, sp, #288	; 0x120
 800ecb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ecb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb8:	f7f1 fb18 	bl	80002ec <__adddf3>
 800ecbc:	3c01      	subs	r4, #1
 800ecbe:	2c00      	cmp	r4, #0
 800ecc0:	daf5      	bge.n	800ecae <__kernel_rem_pio2+0x566>
 800ecc2:	9b02      	ldr	r3, [sp, #8]
 800ecc4:	b1e3      	cbz	r3, 800ed00 <__kernel_rem_pio2+0x5b8>
 800ecc6:	4602      	mov	r2, r0
 800ecc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eccc:	9c01      	ldr	r4, [sp, #4]
 800ecce:	e9c4 2300 	strd	r2, r3, [r4]
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ecda:	f7f1 fb05 	bl	80002e8 <__aeabi_dsub>
 800ecde:	ad4a      	add	r5, sp, #296	; 0x128
 800ece0:	2401      	movs	r4, #1
 800ece2:	45a3      	cmp	fp, r4
 800ece4:	da0f      	bge.n	800ed06 <__kernel_rem_pio2+0x5be>
 800ece6:	9b02      	ldr	r3, [sp, #8]
 800ece8:	b113      	cbz	r3, 800ecf0 <__kernel_rem_pio2+0x5a8>
 800ecea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecee:	4619      	mov	r1, r3
 800ecf0:	9b01      	ldr	r3, [sp, #4]
 800ecf2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ecf6:	e791      	b.n	800ec1c <__kernel_rem_pio2+0x4d4>
 800ecf8:	465c      	mov	r4, fp
 800ecfa:	2000      	movs	r0, #0
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	e7de      	b.n	800ecbe <__kernel_rem_pio2+0x576>
 800ed00:	4602      	mov	r2, r0
 800ed02:	460b      	mov	r3, r1
 800ed04:	e7e2      	b.n	800eccc <__kernel_rem_pio2+0x584>
 800ed06:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ed0a:	f7f1 faef 	bl	80002ec <__adddf3>
 800ed0e:	3401      	adds	r4, #1
 800ed10:	e7e7      	b.n	800ece2 <__kernel_rem_pio2+0x59a>
 800ed12:	e9d8 4500 	ldrd	r4, r5, [r8]
 800ed16:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800ed1a:	4620      	mov	r0, r4
 800ed1c:	4632      	mov	r2, r6
 800ed1e:	463b      	mov	r3, r7
 800ed20:	4629      	mov	r1, r5
 800ed22:	f7f1 fae3 	bl	80002ec <__adddf3>
 800ed26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	4620      	mov	r0, r4
 800ed30:	4629      	mov	r1, r5
 800ed32:	f7f1 fad9 	bl	80002e8 <__aeabi_dsub>
 800ed36:	4632      	mov	r2, r6
 800ed38:	463b      	mov	r3, r7
 800ed3a:	f7f1 fad7 	bl	80002ec <__adddf3>
 800ed3e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ed42:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800ed46:	ed88 7b00 	vstr	d7, [r8]
 800ed4a:	f109 39ff 	add.w	r9, r9, #4294967295
 800ed4e:	e776      	b.n	800ec3e <__kernel_rem_pio2+0x4f6>
 800ed50:	e9da 8900 	ldrd	r8, r9, [sl]
 800ed54:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ed58:	4640      	mov	r0, r8
 800ed5a:	4632      	mov	r2, r6
 800ed5c:	463b      	mov	r3, r7
 800ed5e:	4649      	mov	r1, r9
 800ed60:	f7f1 fac4 	bl	80002ec <__adddf3>
 800ed64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed68:	4602      	mov	r2, r0
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	4640      	mov	r0, r8
 800ed6e:	4649      	mov	r1, r9
 800ed70:	f7f1 faba 	bl	80002e8 <__aeabi_dsub>
 800ed74:	4632      	mov	r2, r6
 800ed76:	463b      	mov	r3, r7
 800ed78:	f7f1 fab8 	bl	80002ec <__adddf3>
 800ed7c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ed80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ed84:	ed8a 7b00 	vstr	d7, [sl]
 800ed88:	3c01      	subs	r4, #1
 800ed8a:	e75e      	b.n	800ec4a <__kernel_rem_pio2+0x502>
 800ed8c:	ab48      	add	r3, sp, #288	; 0x120
 800ed8e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ed92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed96:	f7f1 faa9 	bl	80002ec <__adddf3>
 800ed9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ed9e:	e75a      	b.n	800ec56 <__kernel_rem_pio2+0x50e>
 800eda0:	9b01      	ldr	r3, [sp, #4]
 800eda2:	9a01      	ldr	r2, [sp, #4]
 800eda4:	601d      	str	r5, [r3, #0]
 800eda6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800edaa:	605c      	str	r4, [r3, #4]
 800edac:	609f      	str	r7, [r3, #8]
 800edae:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800edb2:	60d3      	str	r3, [r2, #12]
 800edb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edb8:	6110      	str	r0, [r2, #16]
 800edba:	6153      	str	r3, [r2, #20]
 800edbc:	e72e      	b.n	800ec1c <__kernel_rem_pio2+0x4d4>
 800edbe:	bf00      	nop
 800edc0:	41700000 	.word	0x41700000
 800edc4:	3e700000 	.word	0x3e700000

0800edc8 <__kernel_sin>:
 800edc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edcc:	ed2d 8b04 	vpush	{d8-d9}
 800edd0:	eeb0 8a41 	vmov.f32	s16, s2
 800edd4:	eef0 8a61 	vmov.f32	s17, s3
 800edd8:	ec55 4b10 	vmov	r4, r5, d0
 800eddc:	b083      	sub	sp, #12
 800edde:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ede2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ede6:	9001      	str	r0, [sp, #4]
 800ede8:	da06      	bge.n	800edf8 <__kernel_sin+0x30>
 800edea:	ee10 0a10 	vmov	r0, s0
 800edee:	4629      	mov	r1, r5
 800edf0:	f7f1 fee2 	bl	8000bb8 <__aeabi_d2iz>
 800edf4:	2800      	cmp	r0, #0
 800edf6:	d051      	beq.n	800ee9c <__kernel_sin+0xd4>
 800edf8:	4622      	mov	r2, r4
 800edfa:	462b      	mov	r3, r5
 800edfc:	4620      	mov	r0, r4
 800edfe:	4629      	mov	r1, r5
 800ee00:	f7f1 fc2a 	bl	8000658 <__aeabi_dmul>
 800ee04:	4682      	mov	sl, r0
 800ee06:	468b      	mov	fp, r1
 800ee08:	4602      	mov	r2, r0
 800ee0a:	460b      	mov	r3, r1
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	4629      	mov	r1, r5
 800ee10:	f7f1 fc22 	bl	8000658 <__aeabi_dmul>
 800ee14:	a341      	add	r3, pc, #260	; (adr r3, 800ef1c <__kernel_sin+0x154>)
 800ee16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1a:	4680      	mov	r8, r0
 800ee1c:	4689      	mov	r9, r1
 800ee1e:	4650      	mov	r0, sl
 800ee20:	4659      	mov	r1, fp
 800ee22:	f7f1 fc19 	bl	8000658 <__aeabi_dmul>
 800ee26:	a33f      	add	r3, pc, #252	; (adr r3, 800ef24 <__kernel_sin+0x15c>)
 800ee28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee2c:	f7f1 fa5c 	bl	80002e8 <__aeabi_dsub>
 800ee30:	4652      	mov	r2, sl
 800ee32:	465b      	mov	r3, fp
 800ee34:	f7f1 fc10 	bl	8000658 <__aeabi_dmul>
 800ee38:	a33c      	add	r3, pc, #240	; (adr r3, 800ef2c <__kernel_sin+0x164>)
 800ee3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3e:	f7f1 fa55 	bl	80002ec <__adddf3>
 800ee42:	4652      	mov	r2, sl
 800ee44:	465b      	mov	r3, fp
 800ee46:	f7f1 fc07 	bl	8000658 <__aeabi_dmul>
 800ee4a:	a33a      	add	r3, pc, #232	; (adr r3, 800ef34 <__kernel_sin+0x16c>)
 800ee4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee50:	f7f1 fa4a 	bl	80002e8 <__aeabi_dsub>
 800ee54:	4652      	mov	r2, sl
 800ee56:	465b      	mov	r3, fp
 800ee58:	f7f1 fbfe 	bl	8000658 <__aeabi_dmul>
 800ee5c:	a337      	add	r3, pc, #220	; (adr r3, 800ef3c <__kernel_sin+0x174>)
 800ee5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee62:	f7f1 fa43 	bl	80002ec <__adddf3>
 800ee66:	9b01      	ldr	r3, [sp, #4]
 800ee68:	4606      	mov	r6, r0
 800ee6a:	460f      	mov	r7, r1
 800ee6c:	b9eb      	cbnz	r3, 800eeaa <__kernel_sin+0xe2>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	460b      	mov	r3, r1
 800ee72:	4650      	mov	r0, sl
 800ee74:	4659      	mov	r1, fp
 800ee76:	f7f1 fbef 	bl	8000658 <__aeabi_dmul>
 800ee7a:	a325      	add	r3, pc, #148	; (adr r3, 800ef10 <__kernel_sin+0x148>)
 800ee7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee80:	f7f1 fa32 	bl	80002e8 <__aeabi_dsub>
 800ee84:	4642      	mov	r2, r8
 800ee86:	464b      	mov	r3, r9
 800ee88:	f7f1 fbe6 	bl	8000658 <__aeabi_dmul>
 800ee8c:	4602      	mov	r2, r0
 800ee8e:	460b      	mov	r3, r1
 800ee90:	4620      	mov	r0, r4
 800ee92:	4629      	mov	r1, r5
 800ee94:	f7f1 fa2a 	bl	80002ec <__adddf3>
 800ee98:	4604      	mov	r4, r0
 800ee9a:	460d      	mov	r5, r1
 800ee9c:	ec45 4b10 	vmov	d0, r4, r5
 800eea0:	b003      	add	sp, #12
 800eea2:	ecbd 8b04 	vpop	{d8-d9}
 800eea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeaa:	4b1b      	ldr	r3, [pc, #108]	; (800ef18 <__kernel_sin+0x150>)
 800eeac:	ec51 0b18 	vmov	r0, r1, d8
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	f7f1 fbd1 	bl	8000658 <__aeabi_dmul>
 800eeb6:	4632      	mov	r2, r6
 800eeb8:	ec41 0b19 	vmov	d9, r0, r1
 800eebc:	463b      	mov	r3, r7
 800eebe:	4640      	mov	r0, r8
 800eec0:	4649      	mov	r1, r9
 800eec2:	f7f1 fbc9 	bl	8000658 <__aeabi_dmul>
 800eec6:	4602      	mov	r2, r0
 800eec8:	460b      	mov	r3, r1
 800eeca:	ec51 0b19 	vmov	r0, r1, d9
 800eece:	f7f1 fa0b 	bl	80002e8 <__aeabi_dsub>
 800eed2:	4652      	mov	r2, sl
 800eed4:	465b      	mov	r3, fp
 800eed6:	f7f1 fbbf 	bl	8000658 <__aeabi_dmul>
 800eeda:	ec53 2b18 	vmov	r2, r3, d8
 800eede:	f7f1 fa03 	bl	80002e8 <__aeabi_dsub>
 800eee2:	a30b      	add	r3, pc, #44	; (adr r3, 800ef10 <__kernel_sin+0x148>)
 800eee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee8:	4606      	mov	r6, r0
 800eeea:	460f      	mov	r7, r1
 800eeec:	4640      	mov	r0, r8
 800eeee:	4649      	mov	r1, r9
 800eef0:	f7f1 fbb2 	bl	8000658 <__aeabi_dmul>
 800eef4:	4602      	mov	r2, r0
 800eef6:	460b      	mov	r3, r1
 800eef8:	4630      	mov	r0, r6
 800eefa:	4639      	mov	r1, r7
 800eefc:	f7f1 f9f6 	bl	80002ec <__adddf3>
 800ef00:	4602      	mov	r2, r0
 800ef02:	460b      	mov	r3, r1
 800ef04:	4620      	mov	r0, r4
 800ef06:	4629      	mov	r1, r5
 800ef08:	f7f1 f9ee 	bl	80002e8 <__aeabi_dsub>
 800ef0c:	e7c4      	b.n	800ee98 <__kernel_sin+0xd0>
 800ef0e:	bf00      	nop
 800ef10:	55555549 	.word	0x55555549
 800ef14:	3fc55555 	.word	0x3fc55555
 800ef18:	3fe00000 	.word	0x3fe00000
 800ef1c:	5acfd57c 	.word	0x5acfd57c
 800ef20:	3de5d93a 	.word	0x3de5d93a
 800ef24:	8a2b9ceb 	.word	0x8a2b9ceb
 800ef28:	3e5ae5e6 	.word	0x3e5ae5e6
 800ef2c:	57b1fe7d 	.word	0x57b1fe7d
 800ef30:	3ec71de3 	.word	0x3ec71de3
 800ef34:	19c161d5 	.word	0x19c161d5
 800ef38:	3f2a01a0 	.word	0x3f2a01a0
 800ef3c:	1110f8a6 	.word	0x1110f8a6
 800ef40:	3f811111 	.word	0x3f811111

0800ef44 <finite>:
 800ef44:	b082      	sub	sp, #8
 800ef46:	ed8d 0b00 	vstr	d0, [sp]
 800ef4a:	9801      	ldr	r0, [sp, #4]
 800ef4c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ef50:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ef54:	0fc0      	lsrs	r0, r0, #31
 800ef56:	b002      	add	sp, #8
 800ef58:	4770      	bx	lr
 800ef5a:	0000      	movs	r0, r0
 800ef5c:	0000      	movs	r0, r0
	...

0800ef60 <floor>:
 800ef60:	ec51 0b10 	vmov	r0, r1, d0
 800ef64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ef6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ef70:	2e13      	cmp	r6, #19
 800ef72:	ee10 5a10 	vmov	r5, s0
 800ef76:	ee10 8a10 	vmov	r8, s0
 800ef7a:	460c      	mov	r4, r1
 800ef7c:	dc32      	bgt.n	800efe4 <floor+0x84>
 800ef7e:	2e00      	cmp	r6, #0
 800ef80:	da14      	bge.n	800efac <floor+0x4c>
 800ef82:	a333      	add	r3, pc, #204	; (adr r3, 800f050 <floor+0xf0>)
 800ef84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef88:	f7f1 f9b0 	bl	80002ec <__adddf3>
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	2300      	movs	r3, #0
 800ef90:	f7f1 fdf2 	bl	8000b78 <__aeabi_dcmpgt>
 800ef94:	b138      	cbz	r0, 800efa6 <floor+0x46>
 800ef96:	2c00      	cmp	r4, #0
 800ef98:	da57      	bge.n	800f04a <floor+0xea>
 800ef9a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ef9e:	431d      	orrs	r5, r3
 800efa0:	d001      	beq.n	800efa6 <floor+0x46>
 800efa2:	4c2d      	ldr	r4, [pc, #180]	; (800f058 <floor+0xf8>)
 800efa4:	2500      	movs	r5, #0
 800efa6:	4621      	mov	r1, r4
 800efa8:	4628      	mov	r0, r5
 800efaa:	e025      	b.n	800eff8 <floor+0x98>
 800efac:	4f2b      	ldr	r7, [pc, #172]	; (800f05c <floor+0xfc>)
 800efae:	4137      	asrs	r7, r6
 800efb0:	ea01 0307 	and.w	r3, r1, r7
 800efb4:	4303      	orrs	r3, r0
 800efb6:	d01f      	beq.n	800eff8 <floor+0x98>
 800efb8:	a325      	add	r3, pc, #148	; (adr r3, 800f050 <floor+0xf0>)
 800efba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efbe:	f7f1 f995 	bl	80002ec <__adddf3>
 800efc2:	2200      	movs	r2, #0
 800efc4:	2300      	movs	r3, #0
 800efc6:	f7f1 fdd7 	bl	8000b78 <__aeabi_dcmpgt>
 800efca:	2800      	cmp	r0, #0
 800efcc:	d0eb      	beq.n	800efa6 <floor+0x46>
 800efce:	2c00      	cmp	r4, #0
 800efd0:	bfbe      	ittt	lt
 800efd2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800efd6:	fa43 f606 	asrlt.w	r6, r3, r6
 800efda:	19a4      	addlt	r4, r4, r6
 800efdc:	ea24 0407 	bic.w	r4, r4, r7
 800efe0:	2500      	movs	r5, #0
 800efe2:	e7e0      	b.n	800efa6 <floor+0x46>
 800efe4:	2e33      	cmp	r6, #51	; 0x33
 800efe6:	dd0b      	ble.n	800f000 <floor+0xa0>
 800efe8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800efec:	d104      	bne.n	800eff8 <floor+0x98>
 800efee:	ee10 2a10 	vmov	r2, s0
 800eff2:	460b      	mov	r3, r1
 800eff4:	f7f1 f97a 	bl	80002ec <__adddf3>
 800eff8:	ec41 0b10 	vmov	d0, r0, r1
 800effc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f000:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f004:	f04f 33ff 	mov.w	r3, #4294967295
 800f008:	fa23 f707 	lsr.w	r7, r3, r7
 800f00c:	4207      	tst	r7, r0
 800f00e:	d0f3      	beq.n	800eff8 <floor+0x98>
 800f010:	a30f      	add	r3, pc, #60	; (adr r3, 800f050 <floor+0xf0>)
 800f012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f016:	f7f1 f969 	bl	80002ec <__adddf3>
 800f01a:	2200      	movs	r2, #0
 800f01c:	2300      	movs	r3, #0
 800f01e:	f7f1 fdab 	bl	8000b78 <__aeabi_dcmpgt>
 800f022:	2800      	cmp	r0, #0
 800f024:	d0bf      	beq.n	800efa6 <floor+0x46>
 800f026:	2c00      	cmp	r4, #0
 800f028:	da02      	bge.n	800f030 <floor+0xd0>
 800f02a:	2e14      	cmp	r6, #20
 800f02c:	d103      	bne.n	800f036 <floor+0xd6>
 800f02e:	3401      	adds	r4, #1
 800f030:	ea25 0507 	bic.w	r5, r5, r7
 800f034:	e7b7      	b.n	800efa6 <floor+0x46>
 800f036:	2301      	movs	r3, #1
 800f038:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f03c:	fa03 f606 	lsl.w	r6, r3, r6
 800f040:	4435      	add	r5, r6
 800f042:	4545      	cmp	r5, r8
 800f044:	bf38      	it	cc
 800f046:	18e4      	addcc	r4, r4, r3
 800f048:	e7f2      	b.n	800f030 <floor+0xd0>
 800f04a:	2500      	movs	r5, #0
 800f04c:	462c      	mov	r4, r5
 800f04e:	e7aa      	b.n	800efa6 <floor+0x46>
 800f050:	8800759c 	.word	0x8800759c
 800f054:	7e37e43c 	.word	0x7e37e43c
 800f058:	bff00000 	.word	0xbff00000
 800f05c:	000fffff 	.word	0x000fffff

0800f060 <rint>:
 800f060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f062:	ec51 0b10 	vmov	r0, r1, d0
 800f066:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f06a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f06e:	2e13      	cmp	r6, #19
 800f070:	ee10 4a10 	vmov	r4, s0
 800f074:	460b      	mov	r3, r1
 800f076:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800f07a:	dc58      	bgt.n	800f12e <rint+0xce>
 800f07c:	2e00      	cmp	r6, #0
 800f07e:	da2b      	bge.n	800f0d8 <rint+0x78>
 800f080:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800f084:	4302      	orrs	r2, r0
 800f086:	d023      	beq.n	800f0d0 <rint+0x70>
 800f088:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800f08c:	4302      	orrs	r2, r0
 800f08e:	4254      	negs	r4, r2
 800f090:	4314      	orrs	r4, r2
 800f092:	0c4b      	lsrs	r3, r1, #17
 800f094:	0b24      	lsrs	r4, r4, #12
 800f096:	045b      	lsls	r3, r3, #17
 800f098:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800f09c:	ea44 0103 	orr.w	r1, r4, r3
 800f0a0:	4b32      	ldr	r3, [pc, #200]	; (800f16c <rint+0x10c>)
 800f0a2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f0a6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f0aa:	4602      	mov	r2, r0
 800f0ac:	460b      	mov	r3, r1
 800f0ae:	4630      	mov	r0, r6
 800f0b0:	4639      	mov	r1, r7
 800f0b2:	f7f1 f91b 	bl	80002ec <__adddf3>
 800f0b6:	e9cd 0100 	strd	r0, r1, [sp]
 800f0ba:	463b      	mov	r3, r7
 800f0bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f0c0:	4632      	mov	r2, r6
 800f0c2:	f7f1 f911 	bl	80002e8 <__aeabi_dsub>
 800f0c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f0ca:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800f0ce:	4639      	mov	r1, r7
 800f0d0:	ec41 0b10 	vmov	d0, r0, r1
 800f0d4:	b003      	add	sp, #12
 800f0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0d8:	4a25      	ldr	r2, [pc, #148]	; (800f170 <rint+0x110>)
 800f0da:	4132      	asrs	r2, r6
 800f0dc:	ea01 0702 	and.w	r7, r1, r2
 800f0e0:	4307      	orrs	r7, r0
 800f0e2:	d0f5      	beq.n	800f0d0 <rint+0x70>
 800f0e4:	0851      	lsrs	r1, r2, #1
 800f0e6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800f0ea:	4314      	orrs	r4, r2
 800f0ec:	d00c      	beq.n	800f108 <rint+0xa8>
 800f0ee:	ea23 0201 	bic.w	r2, r3, r1
 800f0f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f0f6:	2e13      	cmp	r6, #19
 800f0f8:	fa43 f606 	asr.w	r6, r3, r6
 800f0fc:	bf0c      	ite	eq
 800f0fe:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800f102:	2400      	movne	r4, #0
 800f104:	ea42 0306 	orr.w	r3, r2, r6
 800f108:	4918      	ldr	r1, [pc, #96]	; (800f16c <rint+0x10c>)
 800f10a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800f10e:	4622      	mov	r2, r4
 800f110:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f114:	4620      	mov	r0, r4
 800f116:	4629      	mov	r1, r5
 800f118:	f7f1 f8e8 	bl	80002ec <__adddf3>
 800f11c:	e9cd 0100 	strd	r0, r1, [sp]
 800f120:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f124:	4622      	mov	r2, r4
 800f126:	462b      	mov	r3, r5
 800f128:	f7f1 f8de 	bl	80002e8 <__aeabi_dsub>
 800f12c:	e7d0      	b.n	800f0d0 <rint+0x70>
 800f12e:	2e33      	cmp	r6, #51	; 0x33
 800f130:	dd07      	ble.n	800f142 <rint+0xe2>
 800f132:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f136:	d1cb      	bne.n	800f0d0 <rint+0x70>
 800f138:	ee10 2a10 	vmov	r2, s0
 800f13c:	f7f1 f8d6 	bl	80002ec <__adddf3>
 800f140:	e7c6      	b.n	800f0d0 <rint+0x70>
 800f142:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800f146:	f04f 36ff 	mov.w	r6, #4294967295
 800f14a:	40d6      	lsrs	r6, r2
 800f14c:	4230      	tst	r0, r6
 800f14e:	d0bf      	beq.n	800f0d0 <rint+0x70>
 800f150:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800f154:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800f158:	bf1f      	itttt	ne
 800f15a:	ea24 0101 	bicne.w	r1, r4, r1
 800f15e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800f162:	fa44 f202 	asrne.w	r2, r4, r2
 800f166:	ea41 0402 	orrne.w	r4, r1, r2
 800f16a:	e7cd      	b.n	800f108 <rint+0xa8>
 800f16c:	0800fe18 	.word	0x0800fe18
 800f170:	000fffff 	.word	0x000fffff
 800f174:	00000000 	.word	0x00000000

0800f178 <scalbn>:
 800f178:	b570      	push	{r4, r5, r6, lr}
 800f17a:	ec55 4b10 	vmov	r4, r5, d0
 800f17e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f182:	4606      	mov	r6, r0
 800f184:	462b      	mov	r3, r5
 800f186:	b99a      	cbnz	r2, 800f1b0 <scalbn+0x38>
 800f188:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f18c:	4323      	orrs	r3, r4
 800f18e:	d036      	beq.n	800f1fe <scalbn+0x86>
 800f190:	4b39      	ldr	r3, [pc, #228]	; (800f278 <scalbn+0x100>)
 800f192:	4629      	mov	r1, r5
 800f194:	ee10 0a10 	vmov	r0, s0
 800f198:	2200      	movs	r2, #0
 800f19a:	f7f1 fa5d 	bl	8000658 <__aeabi_dmul>
 800f19e:	4b37      	ldr	r3, [pc, #220]	; (800f27c <scalbn+0x104>)
 800f1a0:	429e      	cmp	r6, r3
 800f1a2:	4604      	mov	r4, r0
 800f1a4:	460d      	mov	r5, r1
 800f1a6:	da10      	bge.n	800f1ca <scalbn+0x52>
 800f1a8:	a32b      	add	r3, pc, #172	; (adr r3, 800f258 <scalbn+0xe0>)
 800f1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ae:	e03a      	b.n	800f226 <scalbn+0xae>
 800f1b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f1b4:	428a      	cmp	r2, r1
 800f1b6:	d10c      	bne.n	800f1d2 <scalbn+0x5a>
 800f1b8:	ee10 2a10 	vmov	r2, s0
 800f1bc:	4620      	mov	r0, r4
 800f1be:	4629      	mov	r1, r5
 800f1c0:	f7f1 f894 	bl	80002ec <__adddf3>
 800f1c4:	4604      	mov	r4, r0
 800f1c6:	460d      	mov	r5, r1
 800f1c8:	e019      	b.n	800f1fe <scalbn+0x86>
 800f1ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f1ce:	460b      	mov	r3, r1
 800f1d0:	3a36      	subs	r2, #54	; 0x36
 800f1d2:	4432      	add	r2, r6
 800f1d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f1d8:	428a      	cmp	r2, r1
 800f1da:	dd08      	ble.n	800f1ee <scalbn+0x76>
 800f1dc:	2d00      	cmp	r5, #0
 800f1de:	a120      	add	r1, pc, #128	; (adr r1, 800f260 <scalbn+0xe8>)
 800f1e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1e4:	da1c      	bge.n	800f220 <scalbn+0xa8>
 800f1e6:	a120      	add	r1, pc, #128	; (adr r1, 800f268 <scalbn+0xf0>)
 800f1e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1ec:	e018      	b.n	800f220 <scalbn+0xa8>
 800f1ee:	2a00      	cmp	r2, #0
 800f1f0:	dd08      	ble.n	800f204 <scalbn+0x8c>
 800f1f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f1f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f1fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f1fe:	ec45 4b10 	vmov	d0, r4, r5
 800f202:	bd70      	pop	{r4, r5, r6, pc}
 800f204:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f208:	da19      	bge.n	800f23e <scalbn+0xc6>
 800f20a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f20e:	429e      	cmp	r6, r3
 800f210:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f214:	dd0a      	ble.n	800f22c <scalbn+0xb4>
 800f216:	a112      	add	r1, pc, #72	; (adr r1, 800f260 <scalbn+0xe8>)
 800f218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d1e2      	bne.n	800f1e6 <scalbn+0x6e>
 800f220:	a30f      	add	r3, pc, #60	; (adr r3, 800f260 <scalbn+0xe8>)
 800f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f226:	f7f1 fa17 	bl	8000658 <__aeabi_dmul>
 800f22a:	e7cb      	b.n	800f1c4 <scalbn+0x4c>
 800f22c:	a10a      	add	r1, pc, #40	; (adr r1, 800f258 <scalbn+0xe0>)
 800f22e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d0b8      	beq.n	800f1a8 <scalbn+0x30>
 800f236:	a10e      	add	r1, pc, #56	; (adr r1, 800f270 <scalbn+0xf8>)
 800f238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f23c:	e7b4      	b.n	800f1a8 <scalbn+0x30>
 800f23e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f242:	3236      	adds	r2, #54	; 0x36
 800f244:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f248:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f24c:	4620      	mov	r0, r4
 800f24e:	4b0c      	ldr	r3, [pc, #48]	; (800f280 <scalbn+0x108>)
 800f250:	2200      	movs	r2, #0
 800f252:	e7e8      	b.n	800f226 <scalbn+0xae>
 800f254:	f3af 8000 	nop.w
 800f258:	c2f8f359 	.word	0xc2f8f359
 800f25c:	01a56e1f 	.word	0x01a56e1f
 800f260:	8800759c 	.word	0x8800759c
 800f264:	7e37e43c 	.word	0x7e37e43c
 800f268:	8800759c 	.word	0x8800759c
 800f26c:	fe37e43c 	.word	0xfe37e43c
 800f270:	c2f8f359 	.word	0xc2f8f359
 800f274:	81a56e1f 	.word	0x81a56e1f
 800f278:	43500000 	.word	0x43500000
 800f27c:	ffff3cb0 	.word	0xffff3cb0
 800f280:	3c900000 	.word	0x3c900000

0800f284 <_init>:
 800f284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f286:	bf00      	nop
 800f288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f28a:	bc08      	pop	{r3}
 800f28c:	469e      	mov	lr, r3
 800f28e:	4770      	bx	lr

0800f290 <_fini>:
 800f290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f292:	bf00      	nop
 800f294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f296:	bc08      	pop	{r3}
 800f298:	469e      	mov	lr, r3
 800f29a:	4770      	bx	lr
