
RobotFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd0c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e4  0800bee0  0800bee0  0001bee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7c4  0800c7c4  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7c4  0800c7c4  0001c7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7cc  0800c7cc  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7cc  0800c7cc  0001c7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7d0  0800c7d0  0001c7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800c7d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043e4  20000218  0800c9ec  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200045fc  0800c9ec  000245fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023070  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b36  00000000  00000000  000432b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00047df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  00049388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f28  00000000  00000000  0004a738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc99  00000000  00000000  00071660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc67c  00000000  00000000  0008d2f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00169975  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bc8  00000000  00000000  001699c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bec4 	.word	0x0800bec4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	0800bec4 	.word	0x0800bec4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a4 	b.w	8001048 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468c      	mov	ip, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8083 	bne.w	8000e9a <__udivmoddi4+0x116>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d947      	bls.n	8000e2a <__udivmoddi4+0xa6>
 8000d9a:	fab2 f282 	clz	r2, r2
 8000d9e:	b142      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	f1c2 0020 	rsb	r0, r2, #32
 8000da4:	fa24 f000 	lsr.w	r0, r4, r0
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4097      	lsls	r7, r2
 8000dac:	ea40 0c01 	orr.w	ip, r0, r1
 8000db0:	4094      	lsls	r4, r2
 8000db2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db6:	0c23      	lsrs	r3, r4, #16
 8000db8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dbc:	fa1f fe87 	uxth.w	lr, r7
 8000dc0:	fb08 c116 	mls	r1, r8, r6, ip
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x60>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dd6:	f080 8119 	bcs.w	800100c <__udivmoddi4+0x288>
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	f240 8116 	bls.w	800100c <__udivmoddi4+0x288>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	443b      	add	r3, r7
 8000de4:	1a5b      	subs	r3, r3, r1
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dec:	fb08 3310 	mls	r3, r8, r0, r3
 8000df0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d909      	bls.n	8000e10 <__udivmoddi4+0x8c>
 8000dfc:	193c      	adds	r4, r7, r4
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	f080 8105 	bcs.w	8001010 <__udivmoddi4+0x28c>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f240 8102 	bls.w	8001010 <__udivmoddi4+0x28c>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	443c      	add	r4, r7
 8000e10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e14:	eba4 040e 	sub.w	r4, r4, lr
 8000e18:	2600      	movs	r6, #0
 8000e1a:	b11d      	cbz	r5, 8000e24 <__udivmoddi4+0xa0>
 8000e1c:	40d4      	lsrs	r4, r2
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e9c5 4300 	strd	r4, r3, [r5]
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	b902      	cbnz	r2, 8000e2e <__udivmoddi4+0xaa>
 8000e2c:	deff      	udf	#255	; 0xff
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d150      	bne.n	8000ed8 <__udivmoddi4+0x154>
 8000e36:	1bcb      	subs	r3, r1, r7
 8000e38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3c:	fa1f f887 	uxth.w	r8, r7
 8000e40:	2601      	movs	r6, #1
 8000e42:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e46:	0c21      	lsrs	r1, r4, #16
 8000e48:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e50:	fb08 f30c 	mul.w	r3, r8, ip
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0xe4>
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0xe2>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	f200 80e9 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e66:	4684      	mov	ip, r0
 8000e68:	1ac9      	subs	r1, r1, r3
 8000e6a:	b2a3      	uxth	r3, r4
 8000e6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e74:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e78:	fb08 f800 	mul.w	r8, r8, r0
 8000e7c:	45a0      	cmp	r8, r4
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0x10c>
 8000e80:	193c      	adds	r4, r7, r4
 8000e82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x10a>
 8000e88:	45a0      	cmp	r8, r4
 8000e8a:	f200 80d9 	bhi.w	8001040 <__udivmoddi4+0x2bc>
 8000e8e:	4618      	mov	r0, r3
 8000e90:	eba4 0408 	sub.w	r4, r4, r8
 8000e94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e98:	e7bf      	b.n	8000e1a <__udivmoddi4+0x96>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d909      	bls.n	8000eb2 <__udivmoddi4+0x12e>
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	f000 80b1 	beq.w	8001006 <__udivmoddi4+0x282>
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eaa:	4630      	mov	r0, r6
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	fab3 f683 	clz	r6, r3
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	d14a      	bne.n	8000f50 <__udivmoddi4+0x1cc>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d302      	bcc.n	8000ec4 <__udivmoddi4+0x140>
 8000ebe:	4282      	cmp	r2, r0
 8000ec0:	f200 80b8 	bhi.w	8001034 <__udivmoddi4+0x2b0>
 8000ec4:	1a84      	subs	r4, r0, r2
 8000ec6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eca:	2001      	movs	r0, #1
 8000ecc:	468c      	mov	ip, r1
 8000ece:	2d00      	cmp	r5, #0
 8000ed0:	d0a8      	beq.n	8000e24 <__udivmoddi4+0xa0>
 8000ed2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ed6:	e7a5      	b.n	8000e24 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ee0:	4097      	lsls	r7, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eea:	40d9      	lsrs	r1, r3
 8000eec:	4330      	orrs	r0, r6
 8000eee:	0c03      	lsrs	r3, r0, #16
 8000ef0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ef4:	fa1f f887 	uxth.w	r8, r7
 8000ef8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000efc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f00:	fb06 f108 	mul.w	r1, r6, r8
 8000f04:	4299      	cmp	r1, r3
 8000f06:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0a:	d909      	bls.n	8000f20 <__udivmoddi4+0x19c>
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f12:	f080 808d 	bcs.w	8001030 <__udivmoddi4+0x2ac>
 8000f16:	4299      	cmp	r1, r3
 8000f18:	f240 808a 	bls.w	8001030 <__udivmoddi4+0x2ac>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	443b      	add	r3, r7
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b281      	uxth	r1, r0
 8000f24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f30:	fb00 f308 	mul.w	r3, r0, r8
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d907      	bls.n	8000f48 <__udivmoddi4+0x1c4>
 8000f38:	1879      	adds	r1, r7, r1
 8000f3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3e:	d273      	bcs.n	8001028 <__udivmoddi4+0x2a4>
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d971      	bls.n	8001028 <__udivmoddi4+0x2a4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4439      	add	r1, r7
 8000f48:	1acb      	subs	r3, r1, r3
 8000f4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f4e:	e778      	b.n	8000e42 <__udivmoddi4+0xbe>
 8000f50:	f1c6 0c20 	rsb	ip, r6, #32
 8000f54:	fa03 f406 	lsl.w	r4, r3, r6
 8000f58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f5c:	431c      	orrs	r4, r3
 8000f5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f62:	fa01 f306 	lsl.w	r3, r1, r6
 8000f66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f6e:	431f      	orrs	r7, r3
 8000f70:	0c3b      	lsrs	r3, r7, #16
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fa1f f884 	uxth.w	r8, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f82:	fb09 fa08 	mul.w	sl, r9, r8
 8000f86:	458a      	cmp	sl, r1
 8000f88:	fa02 f206 	lsl.w	r2, r2, r6
 8000f8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x220>
 8000f92:	1861      	adds	r1, r4, r1
 8000f94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f98:	d248      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000f9a:	458a      	cmp	sl, r1
 8000f9c:	d946      	bls.n	800102c <__udivmoddi4+0x2a8>
 8000f9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000fa2:	4421      	add	r1, r4
 8000fa4:	eba1 010a 	sub.w	r1, r1, sl
 8000fa8:	b2bf      	uxth	r7, r7
 8000faa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fb2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fb6:	fb00 f808 	mul.w	r8, r0, r8
 8000fba:	45b8      	cmp	r8, r7
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x24a>
 8000fbe:	19e7      	adds	r7, r4, r7
 8000fc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fc4:	d22e      	bcs.n	8001024 <__udivmoddi4+0x2a0>
 8000fc6:	45b8      	cmp	r8, r7
 8000fc8:	d92c      	bls.n	8001024 <__udivmoddi4+0x2a0>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	4427      	add	r7, r4
 8000fce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fd2:	eba7 0708 	sub.w	r7, r7, r8
 8000fd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fda:	454f      	cmp	r7, r9
 8000fdc:	46c6      	mov	lr, r8
 8000fde:	4649      	mov	r1, r9
 8000fe0:	d31a      	bcc.n	8001018 <__udivmoddi4+0x294>
 8000fe2:	d017      	beq.n	8001014 <__udivmoddi4+0x290>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x27a>
 8000fe6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fea:	eb67 0701 	sbc.w	r7, r7, r1
 8000fee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ff2:	40f2      	lsrs	r2, r6
 8000ff4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ff8:	40f7      	lsrs	r7, r6
 8000ffa:	e9c5 2700 	strd	r2, r7, [r5]
 8000ffe:	2600      	movs	r6, #0
 8001000:	4631      	mov	r1, r6
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e70b      	b.n	8000e24 <__udivmoddi4+0xa0>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e9      	b.n	8000de4 <__udivmoddi4+0x60>
 8001010:	4618      	mov	r0, r3
 8001012:	e6fd      	b.n	8000e10 <__udivmoddi4+0x8c>
 8001014:	4543      	cmp	r3, r8
 8001016:	d2e5      	bcs.n	8000fe4 <__udivmoddi4+0x260>
 8001018:	ebb8 0e02 	subs.w	lr, r8, r2
 800101c:	eb69 0104 	sbc.w	r1, r9, r4
 8001020:	3801      	subs	r0, #1
 8001022:	e7df      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001024:	4608      	mov	r0, r1
 8001026:	e7d2      	b.n	8000fce <__udivmoddi4+0x24a>
 8001028:	4660      	mov	r0, ip
 800102a:	e78d      	b.n	8000f48 <__udivmoddi4+0x1c4>
 800102c:	4681      	mov	r9, r0
 800102e:	e7b9      	b.n	8000fa4 <__udivmoddi4+0x220>
 8001030:	4666      	mov	r6, ip
 8001032:	e775      	b.n	8000f20 <__udivmoddi4+0x19c>
 8001034:	4630      	mov	r0, r6
 8001036:	e74a      	b.n	8000ece <__udivmoddi4+0x14a>
 8001038:	f1ac 0c02 	sub.w	ip, ip, #2
 800103c:	4439      	add	r1, r7
 800103e:	e713      	b.n	8000e68 <__udivmoddi4+0xe4>
 8001040:	3802      	subs	r0, #2
 8001042:	443c      	add	r4, r7
 8001044:	e724      	b.n	8000e90 <__udivmoddi4+0x10c>
 8001046:	bf00      	nop

08001048 <__aeabi_idiv0>:
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <CTRL_Pos1_SetTargetX>:

/**
 * setTargetX : Set new x target coordinate
 * @param x x coordinate
 */
void CTRL_Pos1_SetTargetX(double x){
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	ed87 0b00 	vstr	d0, [r7]
	targetX = x;
 8001056:	4907      	ldr	r1, [pc, #28]	; (8001074 <CTRL_Pos1_SetTargetX+0x28>)
 8001058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800105c:	e9c1 2300 	strd	r2, r3, [r1]
	printf("setTargetX done with %lf\r\n",targetX);
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <CTRL_Pos1_SetTargetX+0x28>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	4804      	ldr	r0, [pc, #16]	; (8001078 <CTRL_Pos1_SetTargetX+0x2c>)
 8001068:	f007 fba6 	bl	80087b8 <iprintf>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000238 	.word	0x20000238
 8001078:	0800bee0 	.word	0x0800bee0

0800107c <CTRL_Pos1_SetTargetY>:

/**
 * setTargetY : Set new y target coordinate
 * @param y y coordinate
 */
void CTRL_Pos1_SetTargetY(double y){
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	ed87 0b00 	vstr	d0, [r7]
	targetY = y;
 8001086:	4907      	ldr	r1, [pc, #28]	; (80010a4 <CTRL_Pos1_SetTargetY+0x28>)
 8001088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800108c:	e9c1 2300 	strd	r2, r3, [r1]
	printf("setTargetY done with %lf\r\n",targetY);
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <CTRL_Pos1_SetTargetY+0x28>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	4804      	ldr	r0, [pc, #16]	; (80010a8 <CTRL_Pos1_SetTargetY+0x2c>)
 8001098:	f007 fb8e 	bl	80087b8 <iprintf>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000240 	.word	0x20000240
 80010a8:	0800befc 	.word	0x0800befc

080010ac <CTRL_Pos1_isArrived>:

/**
 * isArrived : Check if the robot is arrvied to its target
 * @return 1 if BOTterfly arrived to its target
 */
uint8_t CTRL_Pos1_isArrived(){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	if(targetX == 0 && targetY == 0){
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <CTRL_Pos1_isArrived+0x40>)
 80010b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	f7ff fd33 	bl	8000b28 <__aeabi_dcmpeq>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00d      	beq.n	80010e4 <CTRL_Pos1_isArrived+0x38>
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <CTRL_Pos1_isArrived+0x44>)
 80010ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	f7ff fd27 	bl	8000b28 <__aeabi_dcmpeq>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <CTRL_Pos1_isArrived+0x38>
		return 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e000      	b.n	80010e6 <CTRL_Pos1_isArrived+0x3a>
	} else{
		return 0;
 80010e4:	2300      	movs	r3, #0
	}
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000238 	.word	0x20000238
 80010f0:	20000240 	.word	0x20000240

080010f4 <CTRL_SpeedControl>:
 * @param Motor Motor HandleTypeDef
 * @param Encoder Encoder HandleTypeDef
 * @return TBD
 */
int32_t CTRL_SpeedControl(MOT_HandleTypeDef* Motor, ENC_HandleTypeDef* Encoder,
		int32_t ticks, double consigne){
 80010f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010f8:	b08a      	sub	sp, #40	; 0x28
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6178      	str	r0, [r7, #20]
 80010fe:	6139      	str	r1, [r7, #16]
 8001100:	60fa      	str	r2, [r7, #12]
 8001102:	ed87 0b00 	vstr	d0, [r7]

	// Force tick to positive value
	if(ticks < 0) ticks = ticks * (-1);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2b00      	cmp	r3, #0
 800110a:	da02      	bge.n	8001112 <CTRL_SpeedControl+0x1e>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	425b      	negs	r3, r3
 8001110:	60fb      	str	r3, [r7, #12]

	// Speed calculation
	int freq_codeuse = SPEED_CONTROL_FREQUENCY * ticks;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2232      	movs	r2, #50	; 0x32
 8001116:	fb02 f303 	mul.w	r3, r2, r3
 800111a:	623b      	str	r3, [r7, #32]
	//float speed = ((float)freq_codeuse * ((float)WHEEL_PERIMETER/Encoder->TicksPerRev));
	float speed = ((float)freq_codeuse * Encoder->TicksCoeff); // mm/s
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001126:	ee17 0a90 	vmov	r0, s15
 800112a:	f7ff fa3d 	bl	80005a8 <__aeabi_f2d>
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001134:	f7ff fa90 	bl	8000658 <__aeabi_dmul>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	f7ff fd82 	bl	8000c48 <__aeabi_d2f>
 8001144:	4603      	mov	r3, r0
 8001146:	61fb      	str	r3, [r7, #28]

	float erreur = consigne - speed;
 8001148:	69f8      	ldr	r0, [r7, #28]
 800114a:	f7ff fa2d 	bl	80005a8 <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001156:	f7ff f8c7 	bl	80002e8 <__aeabi_dsub>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	f7ff fd71 	bl	8000c48 <__aeabi_d2f>
 8001166:	4603      	mov	r3, r0
 8001168:	61bb      	str	r3, [r7, #24]
	float s = 60; // Command offset
 800116a:	4b36      	ldr	r3, [pc, #216]	; (8001244 <CTRL_SpeedControl+0x150>)
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
	s = s + Motor->Kp * erreur;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	ed93 7a06 	vldr	s14, [r3, #24]
 8001174:	edd7 7a06 	vldr	s15, [r7, #24]
 8001178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001184:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	s = s + Motor->Ki * (erreur + Motor->err_previous);
 8001188:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800118a:	f7ff fa0d 	bl	80005a8 <__aeabi_f2d>
 800118e:	4604      	mov	r4, r0
 8001190:	460d      	mov	r5, r1
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fa06 	bl	80005a8 <__aeabi_f2d>
 800119c:	4680      	mov	r8, r0
 800119e:	4689      	mov	r9, r1
 80011a0:	69b8      	ldr	r0, [r7, #24]
 80011a2:	f7ff fa01 	bl	80005a8 <__aeabi_f2d>
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80011ac:	f7ff f89e 	bl	80002ec <__adddf3>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4640      	mov	r0, r8
 80011b6:	4649      	mov	r1, r9
 80011b8:	f7ff fa4e 	bl	8000658 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff f892 	bl	80002ec <__adddf3>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fd3a 	bl	8000c48 <__aeabi_d2f>
 80011d4:	4603      	mov	r3, r0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
	//s = s + Motor->s_previous + Motor->Ki * (erreur + Motor->err_previous) * (SPEED_CONTROL_PERIOD/2);

	if(s >= 80) 	s = 80;
 80011d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80011dc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001248 <CTRL_SpeedControl+0x154>
 80011e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e8:	db02      	blt.n	80011f0 <CTRL_SpeedControl+0xfc>
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <CTRL_SpeedControl+0x158>)
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
 80011ee:	e009      	b.n	8001204 <CTRL_SpeedControl+0x110>
	else if(s < 0) 	s = 0;
 80011f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80011f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	d502      	bpl.n	8001204 <CTRL_SpeedControl+0x110>
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24

	Motor->s_previous = s;
 8001204:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001206:	f7ff f9cf 	bl	80005a8 <__aeabi_f2d>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	6979      	ldr	r1, [r7, #20]
 8001210:	e9c1 2308 	strd	r2, r3, [r1, #32]
	Motor->err_previous = erreur;
 8001214:	69b8      	ldr	r0, [r7, #24]
 8001216:	f7ff f9c7 	bl	80005a8 <__aeabi_f2d>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	6979      	ldr	r1, [r7, #20]
 8001220:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	MOT_SetDutyCycle(Motor,s);
 8001224:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001228:	6978      	ldr	r0, [r7, #20]
 800122a:	f000 f90b 	bl	8001444 <MOT_SetDutyCycle>

	return speed;
 800122e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001236:	ee17 3a90 	vmov	r3, s15
}
 800123a:	4618      	mov	r0, r3
 800123c:	3728      	adds	r7, #40	; 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001244:	42700000 	.word	0x42700000
 8001248:	42a00000 	.word	0x42a00000
 800124c:	42a00000 	.word	0x42a00000

08001250 <ENC_InitTimer>:
 * @param htim TIM_HandleTypeDef
 * @param Channel_A TIM Channel used
 * @param Channel_B TIM Channel used
 * @return HAL_Status
 */
uint8_t ENC_InitTimer(ENC_HandleTypeDef* Encoder, TIM_HandleTypeDef *htim, uint32_t Channel_A, uint32_t Channel_B){
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	603b      	str	r3, [r7, #0]
	Encoder->Timer = htim;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	601a      	str	r2, [r3, #0]
	Encoder->Timer_Channel_A = Channel_A;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	605a      	str	r2, [r3, #4]
	Encoder->Timer_Channel_B = Channel_B;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	609a      	str	r2, [r3, #8]

	if(HAL_OK != HAL_TIM_Encoder_Start(Encoder->Timer, Encoder->Timer_Channel_A & Encoder->Timer_Channel_B))
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6818      	ldr	r0, [r3, #0]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	4013      	ands	r3, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f002 ff3a 	bl	80040f8 <HAL_TIM_Encoder_Start>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <ENC_InitTimer+0x3e>
		return 1;
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <ENC_InitTimer+0x40>

	return 0;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <ENC_SetMillimeterPerTick>:
/**
 * ENC_SetMillimeterPerTick : Set MillimeterPerTick coefficient
 * @param Encoder ENC_HandleTypeDef
 * @param millimeterPerTick
 */
void ENC_SetMillimeterPerTick(ENC_HandleTypeDef* Encoder, double millimeterPerTick){
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	ed87 0b00 	vstr	d0, [r7]
	Encoder->TicksCoeff = millimeterPerTick;
 80012a4:	68f9      	ldr	r1, [r7, #12]
 80012a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012aa:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <ENC_GetCnt>:
/**
 * ENC_GetCnt : Get CNT value of the timer counter
 * @param Encoder ENC_HandleTypeDef
 * @return ticks CNT value
 */
int16_t ENC_GetCnt(ENC_HandleTypeDef* Encoder){
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b084      	sub	sp, #16
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
	int32_t ticks = __HAL_TIM_GET_COUNTER(Encoder->Timer);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	60fb      	str	r3, [r7, #12]
	//int32_t ticks = Encoder->Timer->Instance->CNT;
	ENC_ResetCnt(Encoder);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 f806 	bl	80012de <ENC_ResetCnt>

	return ticks;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	b21b      	sxth	r3, r3
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <ENC_ResetCnt>:

/**
 * ENC_ResetCnt : Reset CNT register of the timer counter
 * @param Encoder ENC_HandleTypeDef
 */
void ENC_ResetCnt(ENC_HandleTypeDef* Encoder){
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
	Encoder->Timer->Instance->CNT = 0;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2200      	movs	r2, #0
 80012ee:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <MOT_InitTimer>:
 *	@param	Motor MOT_HandleTypeDef
 *	@param 	htim TIM_HandleTypeDef
 *  @param  Channel TIM Channel used
 *	@retval HAL status
 */
uint8_t MOT_InitTimer(MOT_HandleTypeDef* Motor, TIM_HandleTypeDef *htim, uint32_t Channel){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
	Motor->Timer_Handle = htim;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	601a      	str	r2, [r3, #0]
	Motor->Timer_Channel = Channel;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	605a      	str	r2, [r3, #4]

	if(HAL_OK != HAL_TIM_PWM_Start(Motor->Timer_Handle, Motor->Timer_Channel))
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4619      	mov	r1, r3
 800131e:	4610      	mov	r0, r2
 8001320:	f002 fd7c 	bl	8003e1c <HAL_TIM_PWM_Start>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MOT_InitTimer+0x32>
		return 1;
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <MOT_InitTimer+0x34>

	return 0;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <MOT_InitGPIOs>:
 *  @param  IN1_GPIO_Pin GPIO pin
 *	@param 	IN2_GPIOx GPIO port
 *  @param  IN2_GPIO_Pin GPIO pin
 */
void MOT_InitGPIOs(MOT_HandleTypeDef* Motor, GPIO_TypeDef* IN1_GPIOx, uint16_t IN1_GPIO_Pin,
		GPIO_TypeDef* IN2_GPIOx, uint16_t IN2_GPIO_Pin){
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	4613      	mov	r3, r2
 8001346:	80fb      	strh	r3, [r7, #6]
	Motor->IN1_GPIOx = IN1_GPIOx;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	609a      	str	r2, [r3, #8]
	Motor->IN1_GPIO_Pin = IN1_GPIO_Pin;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	88fa      	ldrh	r2, [r7, #6]
 8001352:	819a      	strh	r2, [r3, #12]
	Motor->IN2_GPIOx = IN2_GPIOx;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	611a      	str	r2, [r3, #16]
	Motor->IN2_GPIO_Pin = IN2_GPIO_Pin;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	8b3a      	ldrh	r2, [r7, #24]
 800135e:	829a      	strh	r2, [r3, #20]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <MOT_SetCoeff>:
/**	MOT_SetCoeff : Set coefficient for the error correction of the motor
 *	@param	Motor MOT_HandleTypeDef
 *	@param 	Kp coefficient
 *	@param 	Ki coefficient
 */
void MOT_SetCoeff(MOT_HandleTypeDef* Motor, float Kp, float Ki){
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	ed87 0a02 	vstr	s0, [r7, #8]
 8001378:	edc7 0a01 	vstr	s1, [r7, #4]
	Motor->Kp = Kp;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	619a      	str	r2, [r3, #24]
	Motor->Ki = Ki;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	61da      	str	r2, [r3, #28]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <MOT_SetDirection>:
/**
 * MOT_SetDirection : Set the direction of the motor
 * @param Motor MOT_HandleTypeDef
 * @param direction
 */
void MOT_SetDirection(MOT_HandleTypeDef* Motor, uint8_t direction){
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	70fb      	strb	r3, [r7, #3]
	switch(direction){
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d028      	beq.n	80013f8 <MOT_SetDirection+0x64>
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	dc37      	bgt.n	800141a <MOT_SetDirection+0x86>
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <MOT_SetDirection+0x20>
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d011      	beq.n	80013d6 <MOT_SetDirection+0x42>
 80013b2:	e032      	b.n	800141a <MOT_SetDirection+0x86>

	case MOT_FUNCTIONS_STOP:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6898      	ldr	r0, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	899b      	ldrh	r3, [r3, #12]
 80013bc:	2200      	movs	r2, #0
 80013be:	4619      	mov	r1, r3
 80013c0:	f001 fe44 	bl	800304c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6918      	ldr	r0, [r3, #16]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	8a9b      	ldrh	r3, [r3, #20]
 80013cc:	2200      	movs	r2, #0
 80013ce:	4619      	mov	r1, r3
 80013d0:	f001 fe3c 	bl	800304c <HAL_GPIO_WritePin>
		break;
 80013d4:	e032      	b.n	800143c <MOT_SetDirection+0xa8>

	case MOT_FUNCTIONS_FORWARD:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6898      	ldr	r0, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	899b      	ldrh	r3, [r3, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	4619      	mov	r1, r3
 80013e2:	f001 fe33 	bl	800304c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_SET);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6918      	ldr	r0, [r3, #16]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	8a9b      	ldrh	r3, [r3, #20]
 80013ee:	2201      	movs	r2, #1
 80013f0:	4619      	mov	r1, r3
 80013f2:	f001 fe2b 	bl	800304c <HAL_GPIO_WritePin>
		break;
 80013f6:	e021      	b.n	800143c <MOT_SetDirection+0xa8>

	case MOT_FUNCTIONS_REVERSE:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_SET);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6898      	ldr	r0, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	899b      	ldrh	r3, [r3, #12]
 8001400:	2201      	movs	r2, #1
 8001402:	4619      	mov	r1, r3
 8001404:	f001 fe22 	bl	800304c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6918      	ldr	r0, [r3, #16]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	8a9b      	ldrh	r3, [r3, #20]
 8001410:	2200      	movs	r2, #0
 8001412:	4619      	mov	r1, r3
 8001414:	f001 fe1a 	bl	800304c <HAL_GPIO_WritePin>
		break;
 8001418:	e010      	b.n	800143c <MOT_SetDirection+0xa8>

	default:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6898      	ldr	r0, [r3, #8]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	899b      	ldrh	r3, [r3, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	f001 fe11 	bl	800304c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6918      	ldr	r0, [r3, #16]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	8a9b      	ldrh	r3, [r3, #20]
 8001432:	2200      	movs	r2, #0
 8001434:	4619      	mov	r1, r3
 8001436:	f001 fe09 	bl	800304c <HAL_GPIO_WritePin>
	}
}
 800143a:	bf00      	nop
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <MOT_SetDutyCycle>:
/**
 * MOT_SetDutyCycle : Set the duty cycle of the PWM signal
 * @param Motor MOT_HandleTypeDef
 * @param duty_cycle Value between 0 and 100
 */
void MOT_SetDutyCycle(MOT_HandleTypeDef* Motor, float duty_cycle){
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	ed87 0a00 	vstr	s0, [r7]
	if(duty_cycle > 80) duty_cycle = 80;
 8001450:	edd7 7a00 	vldr	s15, [r7]
 8001454:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001510 <MOT_SetDutyCycle+0xcc>
 8001458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	dd02      	ble.n	8001468 <MOT_SetDutyCycle+0x24>
 8001462:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <MOT_SetDutyCycle+0xd0>)
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	e009      	b.n	800147c <MOT_SetDutyCycle+0x38>
	else if(duty_cycle < 0) duty_cycle = 0;
 8001468:	edd7 7a00 	vldr	s15, [r7]
 800146c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	d502      	bpl.n	800147c <MOT_SetDutyCycle+0x38>
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	603b      	str	r3, [r7, #0]

	float pulse = (duty_cycle / 100) * (float)MOT_TIM_PERIOD;
 800147c:	ed97 7a00 	vldr	s14, [r7]
 8001480:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001518 <MOT_SetDutyCycle+0xd4>
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800151c <MOT_SetDutyCycle+0xd8>
 800148c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001490:	edc7 7a03 	vstr	s15, [r7, #12]

	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10a      	bne.n	80014b2 <MOT_SetDutyCycle+0x6e>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014aa:	ee17 2a90 	vmov	r2, s15
 80014ae:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014b0:	e027      	b.n	8001502 <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d10a      	bne.n	80014d0 <MOT_SetDutyCycle+0x8c>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80014c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014c8:	ee17 3a90 	vmov	r3, s15
 80014cc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80014ce:	e018      	b.n	8001502 <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d10a      	bne.n	80014ee <MOT_SetDutyCycle+0xaa>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e6:	ee17 3a90 	vmov	r3, s15
 80014ea:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80014ec:	e009      	b.n	8001502 <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014fc:	ee17 3a90 	vmov	r3, s15
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001502:	bf00      	nop
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	42a00000 	.word	0x42a00000
 8001514:	42a00000 	.word	0x42a00000
 8001518:	42c80000 	.word	0x42c80000
 800151c:	45520000 	.word	0x45520000

08001520 <ODO_Init>:
/* Functions -----------------------------------------------------------------*/

/**
 * ODO_Init : Initialization of odometry module
 */
void ODO_Init(){
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
	x = 0;
 8001524:	490c      	ldr	r1, [pc, #48]	; (8001558 <ODO_Init+0x38>)
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	e9c1 2300 	strd	r2, r3, [r1]
	y = 0;
 8001532:	490a      	ldr	r1, [pc, #40]	; (800155c <ODO_Init+0x3c>)
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	e9c1 2300 	strd	r2, r3, [r1]
	o = 0;
 8001540:	4907      	ldr	r1, [pc, #28]	; (8001560 <ODO_Init+0x40>)
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	20000248 	.word	0x20000248
 800155c:	20000250 	.word	0x20000250
 8001560:	20000258 	.word	0x20000258

08001564 <__io_putchar>:
/**
 * __io_putchar : Indispensable pour printf() sur la liaison uart
 * @param ch Caractère à écrire sur la liaison uart
 * @return 0 si HAL_OK
 */
uint8_t __io_putchar(int ch) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	if(HAL_OK != HAL_UART_Transmit(shell_huart, (uint8_t *)&ch, 1, HAL_MAX_DELAY)){
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <__io_putchar+0x2c>)
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	1d39      	adds	r1, r7, #4
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	2201      	movs	r2, #1
 8001578:	f003 fc01 	bl	8004d7e <HAL_UART_Transmit>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <__io_putchar+0x22>
		return 1;
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <__io_putchar+0x24>
	}
	return 0;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000260 	.word	0x20000260

08001594 <uart_write>:
 * uart_write : Ecrire sur la liaison uart
 * @param s Chaîne de caractères à écrire sur la liaison uart
 * @param size Longueur de la chaîne de caractère
 * @return 0 si HAL_OK
 */
uint8_t uart_write(char *s, uint16_t size) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
	if(HAL_OK != HAL_UART_Transmit(shell_huart, (uint8_t*)s, size, 0xFFFF)){
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <uart_write+0x30>)
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	887a      	ldrh	r2, [r7, #2]
 80015a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f003 fbe7 	bl	8004d7e <HAL_UART_Transmit>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <uart_write+0x26>
		return 1;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <uart_write+0x28>
	}
	return 0;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000260 	.word	0x20000260

080015c8 <sh_help>:
 * sh_help : Menu d'aide du Shell
 * @param argc Nombre d'éléments de la ligne de commande
 * @param argv Eléments sous la forme d'un tableau de chaînes de caractères
 * @return 0
 */
uint8_t sh_help(int argc, char ** argv) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	e017      	b.n	8001608 <sh_help+0x40>
		printf("%s : %s\r\n", shell_func_list[i].cmd, shell_func_list[i].description);
 80015d8:	4910      	ldr	r1, [pc, #64]	; (800161c <sh_help+0x54>)
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	6819      	ldr	r1, [r3, #0]
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <sh_help+0x54>)
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4403      	add	r3, r0
 80015f6:	3308      	adds	r3, #8
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4808      	ldr	r0, [pc, #32]	; (8001620 <sh_help+0x58>)
 80015fe:	f007 f8db 	bl	80087b8 <iprintf>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3301      	adds	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <sh_help+0x5c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	429a      	cmp	r2, r3
 8001610:	dbe2      	blt.n	80015d8 <sh_help+0x10>
	}
	return 0;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000294 	.word	0x20000294
 8001620:	0800bf18 	.word	0x0800bf18
 8001624:	20000290 	.word	0x20000290

08001628 <sh_example>:
 * sh_example : Fonction d'exemple pour le Shell
 * @param argc Nombre d'éléments de la ligne de commande
 * @param argv Eléments sous la forme d'un tableau de chaînes de caractères
 * @return 0
 */
uint8_t sh_example(int argc, char ** argv) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
	printf("argc = %d\r\n", argc);
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	480d      	ldr	r0, [pc, #52]	; (800166c <sh_example+0x44>)
 8001636:	f007 f8bf 	bl	80087b8 <iprintf>
	for (int i = 0 ; i < argc ; i++) {
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	e00c      	b.n	800165a <sh_example+0x32>
		printf("arg numero %d = %s\r\n", i, argv[i]);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	4413      	add	r3, r2
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	68f9      	ldr	r1, [r7, #12]
 800164e:	4808      	ldr	r0, [pc, #32]	; (8001670 <sh_example+0x48>)
 8001650:	f007 f8b2 	bl	80087b8 <iprintf>
	for (int i = 0 ; i < argc ; i++) {
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	3301      	adds	r3, #1
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	dbee      	blt.n	8001640 <sh_example+0x18>
	}
	return 0;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	0800bf24 	.word	0x0800bf24
 8001670:	0800bf30 	.word	0x0800bf30

08001674 <shell_init>:
/**
 *shell_init : Initialisation du Shell
 * @param huart UART Handle à utiliser
 * @return 0 si HAL_OK
 */
uint8_t shell_init(UART_HandleTypeDef* huart) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	shell_huart = huart;
 800167c:	4a16      	ldr	r2, [pc, #88]	; (80016d8 <shell_init+0x64>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]

	uart_write(starting,sizeof(starting));
 8001682:	2118      	movs	r1, #24
 8001684:	4815      	ldr	r0, [pc, #84]	; (80016dc <shell_init+0x68>)
 8001686:	f7ff ff85 	bl	8001594 <uart_write>
	uart_write(prompt,sizeof(prompt));
 800168a:	2111      	movs	r1, #17
 800168c:	4814      	ldr	r0, [pc, #80]	; (80016e0 <shell_init+0x6c>)
 800168e:	f7ff ff81 	bl	8001594 <uart_write>

	shell_add("help", sh_help, "Menu d'aide");
 8001692:	4a14      	ldr	r2, [pc, #80]	; (80016e4 <shell_init+0x70>)
 8001694:	4914      	ldr	r1, [pc, #80]	; (80016e8 <shell_init+0x74>)
 8001696:	4815      	ldr	r0, [pc, #84]	; (80016ec <shell_init+0x78>)
 8001698:	f000 f834 	bl	8001704 <shell_add>
	shell_add("f", sh_example, "Exemple de commande");
 800169c:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <shell_init+0x7c>)
 800169e:	4915      	ldr	r1, [pc, #84]	; (80016f4 <shell_init+0x80>)
 80016a0:	4815      	ldr	r0, [pc, #84]	; (80016f8 <shell_init+0x84>)
 80016a2:	f000 f82f 	bl	8001704 <shell_add>

	qShell = xQueueCreate(1,sizeof(char));
 80016a6:	2200      	movs	r2, #0
 80016a8:	2101      	movs	r1, #1
 80016aa:	2001      	movs	r0, #1
 80016ac:	f004 fc7e 	bl	8005fac <xQueueGenericCreate>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <shell_init+0x88>)
 80016b4:	6013      	str	r3, [r2, #0]

	if(HAL_OK != HAL_UART_Receive_IT(shell_huart, (uint8_t*)&c, 1)){
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <shell_init+0x64>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2201      	movs	r2, #1
 80016bc:	4910      	ldr	r1, [pc, #64]	; (8001700 <shell_init+0x8c>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f003 fbef 	bl	8004ea2 <HAL_UART_Receive_IT>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <shell_init+0x5a>
		return 1;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <shell_init+0x5c>
	}
	return 0;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000260 	.word	0x20000260
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000018 	.word	0x20000018
 80016e4:	0800bf48 	.word	0x0800bf48
 80016e8:	080015c9 	.word	0x080015c9
 80016ec:	0800bf54 	.word	0x0800bf54
 80016f0:	0800bf5c 	.word	0x0800bf5c
 80016f4:	08001629 	.word	0x08001629
 80016f8:	0800bf70 	.word	0x0800bf70
 80016fc:	20004400 	.word	0x20004400
 8001700:	20000264 	.word	0x20000264

08001704 <shell_add>:
 * @param cmd Commande à rentrer
 * @param pfunc Référence vers la fonction à appeler
 * @param description Description de la fonction pour le menu d'aide
 * @return 0 si le nombre de commande est valide
 */
uint8_t shell_add(char * cmd, int (* pfunc)(int argc, char ** argv), char * description) {
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <shell_add+0x70>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	dc26      	bgt.n	8001766 <shell_add+0x62>
		shell_func_list[shell_func_list_size].cmd = cmd;
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <shell_add+0x70>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4916      	ldr	r1, [pc, #88]	; (8001778 <shell_add+0x74>)
 800171e:	4613      	mov	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <shell_add+0x70>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4911      	ldr	r1, [pc, #68]	; (8001778 <shell_add+0x74>)
 8001732:	4613      	mov	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	3304      	adds	r3, #4
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <shell_add+0x70>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	490c      	ldr	r1, [pc, #48]	; (8001778 <shell_add+0x74>)
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	3308      	adds	r3, #8
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <shell_add+0x70>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <shell_add+0x70>)
 8001760:	6013      	str	r3, [r2, #0]
		return 0;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <shell_add+0x64>
	}

	return -1;
 8001766:	23ff      	movs	r3, #255	; 0xff
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	20000290 	.word	0x20000290
 8001778:	20000294 	.word	0x20000294

0800177c <shell_char_received>:

/**
 * shell_char_received : Traitement du dernier caractère reçu
 * @return 0
 */
uint8_t shell_char_received() {
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	xQueueReceive(qShell, &c, portMAX_DELAY);
 8001780:	4b26      	ldr	r3, [pc, #152]	; (800181c <shell_char_received+0xa0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
 8001788:	4925      	ldr	r1, [pc, #148]	; (8001820 <shell_char_received+0xa4>)
 800178a:	4618      	mov	r0, r3
 800178c:	f004 fd02 	bl	8006194 <xQueueReceive>

	switch (c) {
 8001790:	4b23      	ldr	r3, [pc, #140]	; (8001820 <shell_char_received+0xa4>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b08      	cmp	r3, #8
 8001796:	d019      	beq.n	80017cc <shell_char_received+0x50>
 8001798:	2b0d      	cmp	r3, #13
 800179a:	d126      	bne.n	80017ea <shell_char_received+0x6e>
	case '\r':
		// Appui sur la touche ENTER
		printf("\r\n");
 800179c:	4821      	ldr	r0, [pc, #132]	; (8001824 <shell_char_received+0xa8>)
 800179e:	f007 f891 	bl	80088c4 <puts>
		buf[pos++] = 0;
 80017a2:	4b21      	ldr	r3, [pc, #132]	; (8001828 <shell_char_received+0xac>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	b2d1      	uxtb	r1, r2
 80017aa:	4a1f      	ldr	r2, [pc, #124]	; (8001828 <shell_char_received+0xac>)
 80017ac:	7011      	strb	r1, [r2, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <shell_char_received+0xb0>)
 80017b2:	2100      	movs	r1, #0
 80017b4:	5499      	strb	r1, [r3, r2]
		pos = 0;
 80017b6:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <shell_char_received+0xac>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
		shell_exec(buf);
 80017bc:	481b      	ldr	r0, [pc, #108]	; (800182c <shell_char_received+0xb0>)
 80017be:	f000 f83b 	bl	8001838 <shell_exec>
		uart_write(prompt,sizeof(prompt));
 80017c2:	2111      	movs	r1, #17
 80017c4:	481a      	ldr	r0, [pc, #104]	; (8001830 <shell_char_received+0xb4>)
 80017c6:	f7ff fee5 	bl	8001594 <uart_write>
		break;
 80017ca:	e023      	b.n	8001814 <shell_char_received+0x98>

	case '\b':
		// Appui sur la touche DELETE
		if (pos > 0) {
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <shell_char_received+0xac>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d01e      	beq.n	8001812 <shell_char_received+0x96>
			pos--;
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <shell_char_received+0xac>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	3b01      	subs	r3, #1
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <shell_char_received+0xac>)
 80017de:	701a      	strb	r2, [r3, #0]
			uart_write(backspace, 3);
 80017e0:	2103      	movs	r1, #3
 80017e2:	4814      	ldr	r0, [pc, #80]	; (8001834 <shell_char_received+0xb8>)
 80017e4:	f7ff fed6 	bl	8001594 <uart_write>
		}
		break;
 80017e8:	e013      	b.n	8001812 <shell_char_received+0x96>

	default:
		if (pos < SHELL_BUFFER_SIZE) {
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <shell_char_received+0xac>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b27      	cmp	r3, #39	; 0x27
 80017f0:	d810      	bhi.n	8001814 <shell_char_received+0x98>
			uart_write(&c, 1);
 80017f2:	2101      	movs	r1, #1
 80017f4:	480a      	ldr	r0, [pc, #40]	; (8001820 <shell_char_received+0xa4>)
 80017f6:	f7ff fecd 	bl	8001594 <uart_write>
			buf[pos++] = c;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <shell_char_received+0xac>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	b2d1      	uxtb	r1, r2
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <shell_char_received+0xac>)
 8001804:	7011      	strb	r1, [r2, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <shell_char_received+0xa4>)
 800180a:	7819      	ldrb	r1, [r3, #0]
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <shell_char_received+0xb0>)
 800180e:	5499      	strb	r1, [r3, r2]
 8001810:	e000      	b.n	8001814 <shell_char_received+0x98>
		break;
 8001812:	bf00      	nop
		}
	}

	return 0;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20004400 	.word	0x20004400
 8001820:	20000264 	.word	0x20000264
 8001824:	0800bf74 	.word	0x0800bf74
 8001828:	20000265 	.word	0x20000265
 800182c:	20000268 	.word	0x20000268
 8001830:	20000018 	.word	0x20000018
 8001834:	2000002c 	.word	0x2000002c

08001838 <shell_exec>:
/**
 * shell_exec : Recherche et execution de la commande
 * @param cmd Commande à traiter
 * @return Référence vers la fonction à exécuter
 */
uint8_t shell_exec(char * cmd) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b092      	sub	sp, #72	; 0x48
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	int argc;
	char * argv[SHELL_ARGC_MAX];
	char *p;

	// Séparation du header et des paramètres
	char header[SHELL_CMD_MAX_SIZE] = "";
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
	int h = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	63fb      	str	r3, [r7, #60]	; 0x3c

	while(cmd[h] != ' ' && h < SHELL_CMD_MAX_SIZE){
 8001854:	e00c      	b.n	8001870 <shell_exec+0x38>
		header[h] = cmd[h];
 8001856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	4413      	add	r3, r2
 800185c:	7819      	ldrb	r1, [r3, #0]
 800185e:	f107 0208 	add.w	r2, r7, #8
 8001862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001864:	4413      	add	r3, r2
 8001866:	460a      	mov	r2, r1
 8001868:	701a      	strb	r2, [r3, #0]
		h++;
 800186a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800186c:	3301      	adds	r3, #1
 800186e:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(cmd[h] != ' ' && h < SHELL_CMD_MAX_SIZE){
 8001870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b20      	cmp	r3, #32
 800187a:	d002      	beq.n	8001882 <shell_exec+0x4a>
 800187c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800187e:	2b0f      	cmp	r3, #15
 8001880:	dde9      	ble.n	8001856 <shell_exec+0x1e>
	}
	header[h] = '\0';
 8001882:	f107 0208 	add.w	r2, r7, #8
 8001886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001888:	4413      	add	r3, r2
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]

	// Recherche de la commande et paramètres
	for(int i = 0 ; i < shell_func_list_size ; i++) {
 800188e:	2300      	movs	r3, #0
 8001890:	63bb      	str	r3, [r7, #56]	; 0x38
 8001892:	e047      	b.n	8001924 <shell_exec+0xec>
		if (!strcmp(shell_func_list[i].cmd, header)) {
 8001894:	492a      	ldr	r1, [pc, #168]	; (8001940 <shell_exec+0x108>)
 8001896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f107 0208 	add.w	r2, r7, #8
 80018a8:	4611      	mov	r1, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fcb0 	bl	8000210 <strcmp>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d133      	bne.n	800191e <shell_exec+0xe6>
			argc = 1;
 80018b6:	2301      	movs	r3, #1
 80018b8:	647b      	str	r3, [r7, #68]	; 0x44
			argv[0] = cmd;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	61bb      	str	r3, [r7, #24]

			for(p = cmd ; *p != '\0' && argc < SHELL_ARGC_MAX ; p++){
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	643b      	str	r3, [r7, #64]	; 0x40
 80018c2:	e014      	b.n	80018ee <shell_exec+0xb6>
				if(*p == ' ') {
 80018c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b20      	cmp	r3, #32
 80018ca:	d10d      	bne.n	80018e8 <shell_exec+0xb0>
					*p = '\0';
 80018cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80018d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	647a      	str	r2, [r7, #68]	; 0x44
 80018d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018da:	3201      	adds	r2, #1
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80018e2:	440b      	add	r3, r1
 80018e4:	f843 2c30 	str.w	r2, [r3, #-48]
			for(p = cmd ; *p != '\0' && argc < SHELL_ARGC_MAX ; p++){
 80018e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ea:	3301      	adds	r3, #1
 80018ec:	643b      	str	r3, [r7, #64]	; 0x40
 80018ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <shell_exec+0xc4>
 80018f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018f8:	2b07      	cmp	r3, #7
 80018fa:	dde3      	ble.n	80018c4 <shell_exec+0x8c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 80018fc:	4910      	ldr	r1, [pc, #64]	; (8001940 <shell_exec+0x108>)
 80018fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	3304      	adds	r3, #4
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f107 0218 	add.w	r2, r7, #24
 8001912:	4611      	mov	r1, r2
 8001914:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001916:	4798      	blx	r3
 8001918:	4603      	mov	r3, r0
 800191a:	b2db      	uxtb	r3, r3
 800191c:	e00c      	b.n	8001938 <shell_exec+0x100>
	for(int i = 0 ; i < shell_func_list_size ; i++) {
 800191e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001920:	3301      	adds	r3, #1
 8001922:	63bb      	str	r3, [r7, #56]	; 0x38
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <shell_exec+0x10c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800192a:	429a      	cmp	r2, r3
 800192c:	dbb2      	blt.n	8001894 <shell_exec+0x5c>
		}
	}
	printf("%s: command not found\r\n", cmd);
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4805      	ldr	r0, [pc, #20]	; (8001948 <shell_exec+0x110>)
 8001932:	f006 ff41 	bl	80087b8 <iprintf>
	return -1;
 8001936:	23ff      	movs	r3, #255	; 0xff
}
 8001938:	4618      	mov	r0, r3
 800193a:	3748      	adds	r7, #72	; 0x48
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000294 	.word	0x20000294
 8001944:	20000290 	.word	0x20000290
 8001948:	0800bf78 	.word	0x0800bf78

0800194c <STRAT_strategyInit>:
uint8_t indexStrategy = 1;

/* End of variables ----------------------------------------------------------*/

/* Functions -----------------------------------------------------------------*/
void STRAT_strategyInit(){
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
	strategy[0].x = 0;
 8001950:	492b      	ldr	r1, [pc, #172]	; (8001a00 <STRAT_strategyInit+0xb4>)
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9c1 2300 	strd	r2, r3, [r1]
	strategy[0].y = 1;
 800195e:	4928      	ldr	r1, [pc, #160]	; (8001a00 <STRAT_strategyInit+0xb4>)
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <STRAT_strategyInit+0xb8>)
 8001966:	e9c1 2302 	strd	r2, r3, [r1, #8]
	strategy[0].dir = 1;
 800196a:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <STRAT_strategyInit+0xb4>)
 800196c:	2201      	movs	r2, #1
 800196e:	741a      	strb	r2, [r3, #16]

	strategy[1].x = 200;
 8001970:	4923      	ldr	r1, [pc, #140]	; (8001a00 <STRAT_strategyInit+0xb4>)
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <STRAT_strategyInit+0xbc>)
 8001978:	e9c1 2306 	strd	r2, r3, [r1, #24]
	strategy[1].y = 100;
 800197c:	4920      	ldr	r1, [pc, #128]	; (8001a00 <STRAT_strategyInit+0xb4>)
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <STRAT_strategyInit+0xc0>)
 8001984:	e9c1 2308 	strd	r2, r3, [r1, #32]
	strategy[1].dir = 1;
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <STRAT_strategyInit+0xb4>)
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	strategy[2].x = 1;
 8001990:	491b      	ldr	r1, [pc, #108]	; (8001a00 <STRAT_strategyInit+0xb4>)
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <STRAT_strategyInit+0xb8>)
 8001998:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	strategy[2].y = 0;
 800199c:	4918      	ldr	r1, [pc, #96]	; (8001a00 <STRAT_strategyInit+0xb4>)
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	strategy[2].dir = 1;
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <STRAT_strategyInit+0xb4>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	strategy[3].x = 0;
 80019b2:	4913      	ldr	r1, [pc, #76]	; (8001a00 <STRAT_strategyInit+0xb4>)
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	strategy[3].y = 200;
 80019c0:	490f      	ldr	r1, [pc, #60]	; (8001a00 <STRAT_strategyInit+0xb4>)
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <STRAT_strategyInit+0xbc>)
 80019c8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	strategy[3].dir = 1;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <STRAT_strategyInit+0xb4>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	strategy[4].x = 0;
 80019d4:	490a      	ldr	r1, [pc, #40]	; (8001a00 <STRAT_strategyInit+0xb4>)
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	strategy[4].y = 1;
 80019e2:	4907      	ldr	r1, [pc, #28]	; (8001a00 <STRAT_strategyInit+0xb4>)
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <STRAT_strategyInit+0xb8>)
 80019ea:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	strategy[4].dir = 1;
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <STRAT_strategyInit+0xb4>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	20004408 	.word	0x20004408
 8001a04:	3ff00000 	.word	0x3ff00000
 8001a08:	40690000 	.word	0x40690000
 8001a0c:	40590000 	.word	0x40590000

08001a10 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <vApplicationGetIdleTaskMemory+0x2c>)
 8001a20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	4a06      	ldr	r2, [pc, #24]	; (8001a40 <vApplicationGetIdleTaskMemory+0x30>)
 8001a26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000354 	.word	0x20000354
 8001a40:	20000408 	.word	0x20000408

08001a44 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001a44:	b5b0      	push	{r4, r5, r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <MX_FREERTOS_Init+0x30>)
 8001a4c:	1d3c      	adds	r4, r7, #4
 8001a4e:	461d      	mov	r5, r3
 8001a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f004 f926 	bl	8005cb2 <osThreadCreate>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4a03      	ldr	r2, [pc, #12]	; (8001a78 <MX_FREERTOS_Init+0x34>)
 8001a6a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001a6c:	bf00      	nop
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bdb0      	pop	{r4, r5, r7, pc}
 8001a74:	0800bf9c 	.word	0x0800bf9c
 8001a78:	20004480 	.word	0x20004480

08001a7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a84:	2001      	movs	r0, #1
 8001a86:	f004 f960 	bl	8005d4a <osDelay>
 8001a8a:	e7fb      	b.n	8001a84 <StartDefaultTask+0x8>

08001a8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b3c      	ldr	r3, [pc, #240]	; (8001b98 <MX_GPIO_Init+0x10c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a3b      	ldr	r2, [pc, #236]	; (8001b98 <MX_GPIO_Init+0x10c>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <MX_GPIO_Init+0x10c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b35      	ldr	r3, [pc, #212]	; (8001b98 <MX_GPIO_Init+0x10c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a34      	ldr	r2, [pc, #208]	; (8001b98 <MX_GPIO_Init+0x10c>)
 8001ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b32      	ldr	r3, [pc, #200]	; (8001b98 <MX_GPIO_Init+0x10c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <MX_GPIO_Init+0x10c>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a2d      	ldr	r2, [pc, #180]	; (8001b98 <MX_GPIO_Init+0x10c>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <MX_GPIO_Init+0x10c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <MX_GPIO_Init+0x10c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a26      	ldr	r2, [pc, #152]	; (8001b98 <MX_GPIO_Init+0x10c>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <MX_GPIO_Init+0x10c>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTG_IN2_Pin|MOTG_IN1_Pin, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2103      	movs	r1, #3
 8001b16:	4821      	ldr	r0, [pc, #132]	; (8001b9c <MX_GPIO_Init+0x110>)
 8001b18:	f001 fa98 	bl	800304c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTD_IN3_Pin|MOTD_IN4_Pin, GPIO_PIN_RESET);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001b22:	481f      	ldr	r0, [pc, #124]	; (8001ba0 <MX_GPIO_Init+0x114>)
 8001b24:	f001 fa92 	bl	800304c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 8001b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4817      	ldr	r0, [pc, #92]	; (8001b9c <MX_GPIO_Init+0x110>)
 8001b40:	f001 f8f0 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTG_IN2_Pin|MOTG_IN1_Pin;
 8001b44:	2303      	movs	r3, #3
 8001b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4810      	ldr	r0, [pc, #64]	; (8001b9c <MX_GPIO_Init+0x110>)
 8001b5c:	f001 f8e2 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOTD_IN3_Pin|MOTD_IN4_Pin;
 8001b60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b66:	2301      	movs	r3, #1
 8001b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <MX_GPIO_Init+0x114>)
 8001b7a:	f001 f8d3 	bl	8002d24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2105      	movs	r1, #5
 8001b82:	2028      	movs	r0, #40	; 0x28
 8001b84:	f001 f812 	bl	8002bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b88:	2028      	movs	r0, #40	; 0x28
 8001b8a:	f001 f82b 	bl	8002be4 <HAL_NVIC_EnableIRQ>

}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	; 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	40020400 	.word	0x40020400

08001ba4 <start>:
	printf(" +-------------------------------------+ \r\n");

	return 0;
}

void start(int argc, char ** argv){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
	printf("Demarrage\r\n");
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <start+0x20>)
 8001bb0:	f006 fe88 	bl	80088c4 <puts>
	bPower = 1;
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <start+0x24>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	0800c1f4 	.word	0x0800c1f4
 8001bc8:	20000608 	.word	0x20000608

08001bcc <stop>:

void stop(int argc, char ** argv){
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	printf("Arret\r\n");
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <stop+0x20>)
 8001bd8:	f006 fe74 	bl	80088c4 <puts>
	bPower = 0;
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <stop+0x24>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	0800c200 	.word	0x0800c200
 8001bf0:	20000608 	.word	0x20000608

08001bf4 <speed>:

void speed(int argc, char ** argv){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
	if(argc == 2){
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d10c      	bne.n	8001c1e <speed+0x2a>
		speedValue = atoi(argv[1]);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	3304      	adds	r3, #4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f005 ffd1 	bl	8007bb2 <atoi>
 8001c10:	ee07 0a90 	vmov	s15, r0
 8001c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <speed+0x34>)
 8001c1a:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000034 	.word	0x20000034

08001c2c <target>:

void target(int argc, char ** argv){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
	if(argc == 3){
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d12d      	bne.n	8001c98 <target+0x6c>
		float x = atof(argv[1]);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f005 ffb2 	bl	8007bac <atof>
 8001c48:	ec53 2b10 	vmov	r2, r3, d0
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f7fe fffa 	bl	8000c48 <__aeabi_d2f>
 8001c54:	4603      	mov	r3, r0
 8001c56:	60fb      	str	r3, [r7, #12]
		float y = atof(argv[2]);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	3308      	adds	r3, #8
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f005 ffa4 	bl	8007bac <atof>
 8001c64:	ec53 2b10 	vmov	r2, r3, d0
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f7fe ffec 	bl	8000c48 <__aeabi_d2f>
 8001c70:	4603      	mov	r3, r0
 8001c72:	60bb      	str	r3, [r7, #8]
		CTRL_Pos1_SetTargetX((double)x);
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f7fe fc97 	bl	80005a8 <__aeabi_f2d>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	ec43 2b10 	vmov	d0, r2, r3
 8001c82:	f7ff f9e3 	bl	800104c <CTRL_Pos1_SetTargetX>
		CTRL_Pos1_SetTargetY((double)y);
 8001c86:	68b8      	ldr	r0, [r7, #8]
 8001c88:	f7fe fc8e 	bl	80005a8 <__aeabi_f2d>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	ec43 2b10 	vmov	d0, r2, r3
 8001c94:	f7ff f9f2 	bl	800107c <CTRL_Pos1_SetTargetY>
	}
}
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <vTaskShell>:

void vTaskShell(void * p) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	shell_init(&(UART_DEVICE));
 8001ca8:	480c      	ldr	r0, [pc, #48]	; (8001cdc <vTaskShell+0x3c>)
 8001caa:	f7ff fce3 	bl	8001674 <shell_init>
	shell_add("start", start, "Demarrage");
 8001cae:	4a0c      	ldr	r2, [pc, #48]	; (8001ce0 <vTaskShell+0x40>)
 8001cb0:	490c      	ldr	r1, [pc, #48]	; (8001ce4 <vTaskShell+0x44>)
 8001cb2:	480d      	ldr	r0, [pc, #52]	; (8001ce8 <vTaskShell+0x48>)
 8001cb4:	f7ff fd26 	bl	8001704 <shell_add>
	shell_add("stop", stop, "Arret");
 8001cb8:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <vTaskShell+0x4c>)
 8001cba:	490d      	ldr	r1, [pc, #52]	; (8001cf0 <vTaskShell+0x50>)
 8001cbc:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <vTaskShell+0x54>)
 8001cbe:	f7ff fd21 	bl	8001704 <shell_add>
	shell_add("speed", speed, "Vitesse");
 8001cc2:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <vTaskShell+0x58>)
 8001cc4:	490d      	ldr	r1, [pc, #52]	; (8001cfc <vTaskShell+0x5c>)
 8001cc6:	480e      	ldr	r0, [pc, #56]	; (8001d00 <vTaskShell+0x60>)
 8001cc8:	f7ff fd1c 	bl	8001704 <shell_add>
	shell_add("target", target, "Mise a jour de la consigne");
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <vTaskShell+0x64>)
 8001cce:	490e      	ldr	r1, [pc, #56]	; (8001d08 <vTaskShell+0x68>)
 8001cd0:	480e      	ldr	r0, [pc, #56]	; (8001d0c <vTaskShell+0x6c>)
 8001cd2:	f7ff fd17 	bl	8001704 <shell_add>

	while(1){
		shell_char_received();
 8001cd6:	f7ff fd51 	bl	800177c <shell_char_received>
 8001cda:	e7fc      	b.n	8001cd6 <vTaskShell+0x36>
 8001cdc:	200045a4 	.word	0x200045a4
 8001ce0:	0800c208 	.word	0x0800c208
 8001ce4:	08001ba5 	.word	0x08001ba5
 8001ce8:	0800c214 	.word	0x0800c214
 8001cec:	0800c21c 	.word	0x0800c21c
 8001cf0:	08001bcd 	.word	0x08001bcd
 8001cf4:	0800c224 	.word	0x0800c224
 8001cf8:	0800c22c 	.word	0x0800c22c
 8001cfc:	08001bf5 	.word	0x08001bf5
 8001d00:	0800c234 	.word	0x0800c234
 8001d04:	0800c23c 	.word	0x0800c23c
 8001d08:	08001c2d 	.word	0x08001c2d
 8001d0c:	0800c258 	.word	0x0800c258

08001d10 <vTaskAsserv>:
	}
}

void vTaskAsserv(void * p){
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	6078      	str	r0, [r7, #4]
	/* Initialisation Moteur Gauche ---------------------*/
	MOT_InitTimer(&MoteurGauche, &htim1, TIM_CHANNEL_1);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4971      	ldr	r1, [pc, #452]	; (8001ee0 <vTaskAsserv+0x1d0>)
 8001d1c:	4871      	ldr	r0, [pc, #452]	; (8001ee4 <vTaskAsserv+0x1d4>)
 8001d1e:	f7ff faed 	bl	80012fc <MOT_InitTimer>
	MOT_InitGPIOs(&MoteurGauche,
 8001d22:	2301      	movs	r3, #1
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	4b70      	ldr	r3, [pc, #448]	; (8001ee8 <vTaskAsserv+0x1d8>)
 8001d28:	2202      	movs	r2, #2
 8001d2a:	496f      	ldr	r1, [pc, #444]	; (8001ee8 <vTaskAsserv+0x1d8>)
 8001d2c:	486d      	ldr	r0, [pc, #436]	; (8001ee4 <vTaskAsserv+0x1d4>)
 8001d2e:	f7ff fb03 	bl	8001338 <MOT_InitGPIOs>
			MOTG_IN1_GPIO_Port, MOTG_IN1_Pin,
			MOTG_IN2_GPIO_Port, MOTG_IN2_Pin);
	MOT_SetCoeff(&MoteurGauche, 1.2, 0.1);
 8001d32:	eddf 0a6e 	vldr	s1, [pc, #440]	; 8001eec <vTaskAsserv+0x1dc>
 8001d36:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8001ef0 <vTaskAsserv+0x1e0>
 8001d3a:	486a      	ldr	r0, [pc, #424]	; (8001ee4 <vTaskAsserv+0x1d4>)
 8001d3c:	f7ff fb16 	bl	800136c <MOT_SetCoeff>
	MOT_SetDirection(&MoteurGauche, MOT_FUNCTIONS_REVERSE);
 8001d40:	2102      	movs	r1, #2
 8001d42:	4868      	ldr	r0, [pc, #416]	; (8001ee4 <vTaskAsserv+0x1d4>)
 8001d44:	f7ff fb26 	bl	8001394 <MOT_SetDirection>
	MOT_SetDutyCycle(&MoteurGauche, 0);
 8001d48:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8001ef4 <vTaskAsserv+0x1e4>
 8001d4c:	4865      	ldr	r0, [pc, #404]	; (8001ee4 <vTaskAsserv+0x1d4>)
 8001d4e:	f7ff fb79 	bl	8001444 <MOT_SetDutyCycle>

	/* Initialisation Moteur Droite ---------------------*/
	MOT_InitTimer(&MoteurDroite, &htim1, TIM_CHANNEL_2);
 8001d52:	2204      	movs	r2, #4
 8001d54:	4962      	ldr	r1, [pc, #392]	; (8001ee0 <vTaskAsserv+0x1d0>)
 8001d56:	4868      	ldr	r0, [pc, #416]	; (8001ef8 <vTaskAsserv+0x1e8>)
 8001d58:	f7ff fad0 	bl	80012fc <MOT_InitTimer>
	MOT_InitGPIOs(&MoteurDroite,
 8001d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	4b66      	ldr	r3, [pc, #408]	; (8001efc <vTaskAsserv+0x1ec>)
 8001d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d68:	4964      	ldr	r1, [pc, #400]	; (8001efc <vTaskAsserv+0x1ec>)
 8001d6a:	4863      	ldr	r0, [pc, #396]	; (8001ef8 <vTaskAsserv+0x1e8>)
 8001d6c:	f7ff fae4 	bl	8001338 <MOT_InitGPIOs>
			MOTD_IN3_GPIO_Port, MOTD_IN3_Pin,
			MOTD_IN4_GPIO_Port, MOTD_IN4_Pin);
	MOT_SetCoeff(&MoteurDroite, 1.2, 0.1);
 8001d70:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8001eec <vTaskAsserv+0x1dc>
 8001d74:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8001ef0 <vTaskAsserv+0x1e0>
 8001d78:	485f      	ldr	r0, [pc, #380]	; (8001ef8 <vTaskAsserv+0x1e8>)
 8001d7a:	f7ff faf7 	bl	800136c <MOT_SetCoeff>
	MOT_SetDirection(&MoteurDroite, MOT_FUNCTIONS_FORWARD);
 8001d7e:	2101      	movs	r1, #1
 8001d80:	485d      	ldr	r0, [pc, #372]	; (8001ef8 <vTaskAsserv+0x1e8>)
 8001d82:	f7ff fb07 	bl	8001394 <MOT_SetDirection>
	MOT_SetDutyCycle(&MoteurDroite, 0);
 8001d86:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8001ef4 <vTaskAsserv+0x1e4>
 8001d8a:	485b      	ldr	r0, [pc, #364]	; (8001ef8 <vTaskAsserv+0x1e8>)
 8001d8c:	f7ff fb5a 	bl	8001444 <MOT_SetDutyCycle>

	/* Initialisation Encodeur Gauche -------------------*/
	ENC_InitTimer(&CodeurGauche, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001d90:	2304      	movs	r3, #4
 8001d92:	2200      	movs	r2, #0
 8001d94:	495a      	ldr	r1, [pc, #360]	; (8001f00 <vTaskAsserv+0x1f0>)
 8001d96:	485b      	ldr	r0, [pc, #364]	; (8001f04 <vTaskAsserv+0x1f4>)
 8001d98:	f7ff fa5a 	bl	8001250 <ENC_InitTimer>
	ENC_SetMillimeterPerTick(&CodeurGauche, 0.08200);
 8001d9c:	ed9f 0b4c 	vldr	d0, [pc, #304]	; 8001ed0 <vTaskAsserv+0x1c0>
 8001da0:	4858      	ldr	r0, [pc, #352]	; (8001f04 <vTaskAsserv+0x1f4>)
 8001da2:	f7ff fa79 	bl	8001298 <ENC_SetMillimeterPerTick>

	/* Initialisation Encodeur Droite -------------------*/
	ENC_InitTimer(&CodeurDroite, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001da6:	2304      	movs	r3, #4
 8001da8:	2200      	movs	r2, #0
 8001daa:	4957      	ldr	r1, [pc, #348]	; (8001f08 <vTaskAsserv+0x1f8>)
 8001dac:	4857      	ldr	r0, [pc, #348]	; (8001f0c <vTaskAsserv+0x1fc>)
 8001dae:	f7ff fa4f 	bl	8001250 <ENC_InitTimer>
	ENC_SetMillimeterPerTick(&CodeurDroite, 0.08125);
 8001db2:	ed9f 0b49 	vldr	d0, [pc, #292]	; 8001ed8 <vTaskAsserv+0x1c8>
 8001db6:	4855      	ldr	r0, [pc, #340]	; (8001f0c <vTaskAsserv+0x1fc>)
 8001db8:	f7ff fa6e 	bl	8001298 <ENC_SetMillimeterPerTick>

	/* Initialisation Odometrie -------------------------*/
	ODO_Init();
 8001dbc:	f7ff fbb0 	bl	8001520 <ODO_Init>
	STRAT_strategyInit();
 8001dc0:	f7ff fdc4 	bl	800194c <STRAT_strategyInit>

	while(1){

		if(CTRL_Pos1_isArrived()){
 8001dc4:	f7ff f972 	bl	80010ac <CTRL_Pos1_isArrived>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d02c      	beq.n	8001e28 <vTaskAsserv+0x118>
			if(indexStrategy >= (int)3){
 8001dce:	4b50      	ldr	r3, [pc, #320]	; (8001f10 <vTaskAsserv+0x200>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d828      	bhi.n	8001e28 <vTaskAsserv+0x118>
				//bTypeAsserv = 1;
				//setTargetX(200);
				//setTargetY(100);
			} else {
				CTRL_Pos1_SetTargetX(strategy[indexStrategy].x);
 8001dd6:	4b4e      	ldr	r3, [pc, #312]	; (8001f10 <vTaskAsserv+0x200>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4a4d      	ldr	r2, [pc, #308]	; (8001f14 <vTaskAsserv+0x204>)
 8001dde:	460b      	mov	r3, r1
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	440b      	add	r3, r1
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	ed93 7b00 	vldr	d7, [r3]
 8001dec:	eeb0 0a47 	vmov.f32	s0, s14
 8001df0:	eef0 0a67 	vmov.f32	s1, s15
 8001df4:	f7ff f92a 	bl	800104c <CTRL_Pos1_SetTargetX>
				CTRL_Pos1_SetTargetY(strategy[indexStrategy].y);
 8001df8:	4b45      	ldr	r3, [pc, #276]	; (8001f10 <vTaskAsserv+0x200>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4a45      	ldr	r2, [pc, #276]	; (8001f14 <vTaskAsserv+0x204>)
 8001e00:	460b      	mov	r3, r1
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	440b      	add	r3, r1
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	3308      	adds	r3, #8
 8001e0c:	ed93 7b00 	vldr	d7, [r3]
 8001e10:	eeb0 0a47 	vmov.f32	s0, s14
 8001e14:	eef0 0a67 	vmov.f32	s1, s15
 8001e18:	f7ff f930 	bl	800107c <CTRL_Pos1_SetTargetY>
				indexStrategy++;
 8001e1c:	4b3c      	ldr	r3, [pc, #240]	; (8001f10 <vTaskAsserv+0x200>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b3a      	ldr	r3, [pc, #232]	; (8001f10 <vTaskAsserv+0x200>)
 8001e26:	701a      	strb	r2, [r3, #0]
			}

		}

		if(bPower){
 8001e28:	4b3b      	ldr	r3, [pc, #236]	; (8001f18 <vTaskAsserv+0x208>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d03e      	beq.n	8001eae <vTaskAsserv+0x19e>
			//CTRL_Pos1_PositionControl();
			//CTRL_Pos2_PositionControl();


			// Get ticks from encoders
			int16_t ticksG = ENC_GetCnt(&CodeurGauche);
 8001e30:	4834      	ldr	r0, [pc, #208]	; (8001f04 <vTaskAsserv+0x1f4>)
 8001e32:	f7ff fa42 	bl	80012ba <ENC_GetCnt>
 8001e36:	4603      	mov	r3, r0
 8001e38:	82fb      	strh	r3, [r7, #22]
			int16_t ticksD = ENC_GetCnt(&CodeurDroite);
 8001e3a:	4834      	ldr	r0, [pc, #208]	; (8001f0c <vTaskAsserv+0x1fc>)
 8001e3c:	f7ff fa3d 	bl	80012ba <ENC_GetCnt>
 8001e40:	4603      	mov	r3, r0
 8001e42:	82bb      	strh	r3, [r7, #20]

			// Odometry and speed calculations
			//Odo_OdometryUpdate(ticksG, ticksD);

			// Speed Control Update
			float vitG = CTRL_SpeedControl(&MoteurGauche, &CodeurGauche, ticksG, speedValue);
 8001e44:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8001e48:	4b34      	ldr	r3, [pc, #208]	; (8001f1c <vTaskAsserv+0x20c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe fbab 	bl	80005a8 <__aeabi_f2d>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	ec43 2b10 	vmov	d0, r2, r3
 8001e5a:	4622      	mov	r2, r4
 8001e5c:	4929      	ldr	r1, [pc, #164]	; (8001f04 <vTaskAsserv+0x1f4>)
 8001e5e:	4821      	ldr	r0, [pc, #132]	; (8001ee4 <vTaskAsserv+0x1d4>)
 8001e60:	f7ff f948 	bl	80010f4 <CTRL_SpeedControl>
 8001e64:	ee07 0a90 	vmov	s15, r0
 8001e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6c:	edc7 7a04 	vstr	s15, [r7, #16]
			float vitD = CTRL_SpeedControl(&MoteurDroite, &CodeurDroite, ticksD, speedValue);
 8001e70:	f9b7 4014 	ldrsh.w	r4, [r7, #20]
 8001e74:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <vTaskAsserv+0x20c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb95 	bl	80005a8 <__aeabi_f2d>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	ec43 2b10 	vmov	d0, r2, r3
 8001e86:	4622      	mov	r2, r4
 8001e88:	4920      	ldr	r1, [pc, #128]	; (8001f0c <vTaskAsserv+0x1fc>)
 8001e8a:	481b      	ldr	r0, [pc, #108]	; (8001ef8 <vTaskAsserv+0x1e8>)
 8001e8c:	f7ff f932 	bl	80010f4 <CTRL_SpeedControl>
 8001e90:	ee07 0a90 	vmov	s15, r0
 8001e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e98:	edc7 7a03 	vstr	s15, [r7, #12]

			// Debug
			printf("%d;%d\r\n", (int)ticksG, (int)ticksD);
 8001e9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ea0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	481e      	ldr	r0, [pc, #120]	; (8001f20 <vTaskAsserv+0x210>)
 8001ea8:	f006 fc86 	bl	80087b8 <iprintf>
 8001eac:	e009      	b.n	8001ec2 <vTaskAsserv+0x1b2>
			//printf("%f;%f\r\n", vitG, vitD);

		} else {
			MOT_SetDutyCycle(&MoteurGauche, 0);
 8001eae:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001ef4 <vTaskAsserv+0x1e4>
 8001eb2:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <vTaskAsserv+0x1d4>)
 8001eb4:	f7ff fac6 	bl	8001444 <MOT_SetDutyCycle>
			MOT_SetDutyCycle(&MoteurDroite, 0);
 8001eb8:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001ef4 <vTaskAsserv+0x1e4>
 8001ebc:	480e      	ldr	r0, [pc, #56]	; (8001ef8 <vTaskAsserv+0x1e8>)
 8001ebe:	f7ff fac1 	bl	8001444 <MOT_SetDutyCycle>
		}


		vTaskDelay(20);
 8001ec2:	2014      	movs	r0, #20
 8001ec4:	f004 fce8 	bl	8006898 <vTaskDelay>
		if(CTRL_Pos1_isArrived()){
 8001ec8:	e77c      	b.n	8001dc4 <vTaskAsserv+0xb4>
 8001eca:	bf00      	nop
 8001ecc:	f3af 8000 	nop.w
 8001ed0:	b645a1cb 	.word	0xb645a1cb
 8001ed4:	3fb4fdf3 	.word	0x3fb4fdf3
 8001ed8:	cccccccd 	.word	0xcccccccd
 8001edc:	3fb4cccc 	.word	0x3fb4cccc
 8001ee0:	20004514 	.word	0x20004514
 8001ee4:	20004370 	.word	0x20004370
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	3dcccccd 	.word	0x3dcccccd
 8001ef0:	3f99999a 	.word	0x3f99999a
 8001ef4:	00000000 	.word	0x00000000
 8001ef8:	200043a0 	.word	0x200043a0
 8001efc:	40020400 	.word	0x40020400
 8001f00:	2000455c 	.word	0x2000455c
 8001f04:	200043e8 	.word	0x200043e8
 8001f08:	200044cc 	.word	0x200044cc
 8001f0c:	200043d0 	.word	0x200043d0
 8001f10:	20000030 	.word	0x20000030
 8001f14:	20004408 	.word	0x20004408
 8001f18:	20000608 	.word	0x20000608
 8001f1c:	20000034 	.word	0x20000034
 8001f20:	0800c260 	.word	0x0800c260

08001f24 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	BaseType_t xReturned;
	TaskHandle_t xHandle = NULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	603b      	str	r3, [r7, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001f2e:	f000 fd57 	bl	80029e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001f32:	f000 f841 	bl	8001fb8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001f36:	f7ff fda9 	bl	8001a8c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001f3a:	f000 fcad 	bl	8002898 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001f3e:	f000 fa81 	bl	8002444 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001f42:	f000 fb2b 	bl	800259c <MX_TIM2_Init>
	MX_TIM3_Init();
 8001f46:	f000 fb7d 	bl	8002644 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	/* Initialisation de la tâche pour le Shell ---------*/
	xReturned = xTaskCreate(
 8001f4a:	463b      	mov	r3, r7
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	2301      	movs	r3, #1
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2300      	movs	r3, #0
 8001f54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f58:	4911      	ldr	r1, [pc, #68]	; (8001fa0 <main+0x7c>)
 8001f5a:	4812      	ldr	r0, [pc, #72]	; (8001fa4 <main+0x80>)
 8001f5c:	f004 fb4f 	bl	80065fe <xTaskCreate>
 8001f60:	6078      	str	r0, [r7, #4]
			"Shell",         	/* Text name for the task. */
			STACK_SIZE,      	/* Stack size in words, not bytes. */
			(void *) NULL,    	/* Parameter passed into the task. */
			1,					/* Priority at which the task is created. */
			&xHandle);      	/* Used to pass out the created task's handle. */
	if( xReturned == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY ) {
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d102      	bne.n	8001f70 <main+0x4c>
		printf("Task Shell creation error: Could not allocate required memory\r\n");
 8001f6a:	480f      	ldr	r0, [pc, #60]	; (8001fa8 <main+0x84>)
 8001f6c:	f006 fcaa 	bl	80088c4 <puts>
	}

	/* Initialisation de la tâche pour l'asserv ---------*/
	xReturned = xTaskCreate(
 8001f70:	463b      	mov	r3, r7
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	2302      	movs	r3, #2
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f7e:	490b      	ldr	r1, [pc, #44]	; (8001fac <main+0x88>)
 8001f80:	480b      	ldr	r0, [pc, #44]	; (8001fb0 <main+0x8c>)
 8001f82:	f004 fb3c 	bl	80065fe <xTaskCreate>
 8001f86:	6078      	str	r0, [r7, #4]
			"Asserv",         	// Text name for the task.
			STACK_SIZE,      	// Stack size in words, not bytes.
			(void *) NULL,    	// Parameter passed into the task.
			2,					// Priority at which the task is created.
			&xHandle);      	// Used to pass out the created task's handle.
	if( xReturned == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY ) {
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8e:	d102      	bne.n	8001f96 <main+0x72>
		printf("Task Asserv creation error: Could not allocate required memory\r\n");
 8001f90:	4808      	ldr	r0, [pc, #32]	; (8001fb4 <main+0x90>)
 8001f92:	f006 fc97 	bl	80088c4 <puts>
	}

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8001f96:	f7ff fd55 	bl	8001a44 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 8001f9a:	f003 fe83 	bl	8005ca4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001f9e:	e7fe      	b.n	8001f9e <main+0x7a>
 8001fa0:	0800c268 	.word	0x0800c268
 8001fa4:	08001ca1 	.word	0x08001ca1
 8001fa8:	0800c270 	.word	0x0800c270
 8001fac:	0800c2b0 	.word	0x0800c2b0
 8001fb0:	08001d11 	.word	0x08001d11
 8001fb4:	0800c2b8 	.word	0x0800c2b8

08001fb8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b094      	sub	sp, #80	; 0x50
 8001fbc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fbe:	f107 031c 	add.w	r3, r7, #28
 8001fc2:	2234      	movs	r2, #52	; 0x34
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f005 ff29 	bl	8007e1e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fcc:	f107 0308 	add.w	r3, r7, #8
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001fdc:	2300      	movs	r3, #0
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	; (800208c <SystemClock_Config+0xd4>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	4a29      	ldr	r2, [pc, #164]	; (800208c <SystemClock_Config+0xd4>)
 8001fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fea:	6413      	str	r3, [r2, #64]	; 0x40
 8001fec:	4b27      	ldr	r3, [pc, #156]	; (800208c <SystemClock_Config+0xd4>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	4b24      	ldr	r3, [pc, #144]	; (8002090 <SystemClock_Config+0xd8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002004:	4a22      	ldr	r2, [pc, #136]	; (8002090 <SystemClock_Config+0xd8>)
 8002006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4b20      	ldr	r3, [pc, #128]	; (8002090 <SystemClock_Config+0xd8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002018:	2302      	movs	r3, #2
 800201a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800201c:	2301      	movs	r3, #1
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002020:	2310      	movs	r3, #16
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002024:	2302      	movs	r3, #2
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002028:	2300      	movs	r3, #0
 800202a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 800202c:	2310      	movs	r3, #16
 800202e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002030:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002034:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002036:	2304      	movs	r3, #4
 8002038:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800203a:	2302      	movs	r3, #2
 800203c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800203e:	2302      	movs	r3, #2
 8002040:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002042:	f107 031c 	add.w	r3, r7, #28
 8002046:	4618      	mov	r0, r3
 8002048:	f001 fb30 	bl	80036ac <HAL_RCC_OscConfig>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8002052:	f000 f865 	bl	8002120 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002056:	230f      	movs	r3, #15
 8002058:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800205a:	2302      	movs	r3, #2
 800205c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002066:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800206c:	f107 0308 	add.w	r3, r7, #8
 8002070:	2102      	movs	r1, #2
 8002072:	4618      	mov	r0, r3
 8002074:	f001 f81c 	bl	80030b0 <HAL_RCC_ClockConfig>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <SystemClock_Config+0xca>
	{
		Error_Handler();
 800207e:	f000 f84f 	bl	8002120 <Error_Handler>
	}
}
 8002082:	bf00      	nop
 8002084:	3750      	adds	r7, #80	; 0x50
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800
 8002090:	40007000 	.word	0x40007000

08002094 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020a4:	d110      	bne.n	80020c8 <HAL_GPIO_EXTI_Callback+0x34>
		if(bPower == 0) {
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_GPIO_EXTI_Callback+0x28>
			bPower = 1;
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
			printf("Demarrage\r\n");
 80020b4:	4807      	ldr	r0, [pc, #28]	; (80020d4 <HAL_GPIO_EXTI_Callback+0x40>)
 80020b6:	f006 fc05 	bl	80088c4 <puts>
		else {
			bPower = 0;
			printf("Arret\r\n");
		}
	}
}
 80020ba:	e005      	b.n	80020c8 <HAL_GPIO_EXTI_Callback+0x34>
			bPower = 0;
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
			printf("Arret\r\n");
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <HAL_GPIO_EXTI_Callback+0x44>)
 80020c4:	f006 fbfe 	bl	80088c4 <puts>
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000608 	.word	0x20000608
 80020d4:	0800c1f4 	.word	0x0800c1f4
 80020d8:	0800c200 	.word	0x0800c200

080020dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a09      	ldr	r2, [pc, #36]	; (8002110 <HAL_UART_RxCpltCallback+0x34>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d10b      	bne.n	8002106 <HAL_UART_RxCpltCallback+0x2a>
		xQueueSendFromISR(qShell, &c, NULL);
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_UART_RxCpltCallback+0x38>)
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	2300      	movs	r3, #0
 80020f4:	2200      	movs	r2, #0
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <HAL_UART_RxCpltCallback+0x3c>)
 80020f8:	f003 ffb1 	bl	800605e <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(&huart2, (uint8_t*)&c, 1);
 80020fc:	2201      	movs	r2, #1
 80020fe:	4906      	ldr	r1, [pc, #24]	; (8002118 <HAL_UART_RxCpltCallback+0x3c>)
 8002100:	4806      	ldr	r0, [pc, #24]	; (800211c <HAL_UART_RxCpltCallback+0x40>)
 8002102:	f002 fece 	bl	8004ea2 <HAL_UART_Receive_IT>
	}
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40004400 	.word	0x40004400
 8002114:	20004400 	.word	0x20004400
 8002118:	20000264 	.word	0x20000264
 800211c:	200045a4 	.word	0x200045a4

08002120 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002124:	b672      	cpsid	i
}
 8002126:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002128:	e7fe      	b.n	8002128 <Error_Handler+0x8>
	...

0800212c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_MspInit+0x54>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a11      	ldr	r2, [pc, #68]	; (8002180 <HAL_MspInit+0x54>)
 800213c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_MspInit+0x54>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_MspInit+0x54>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <HAL_MspInit+0x54>)
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215c:	6413      	str	r3, [r2, #64]	; 0x40
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <HAL_MspInit+0x54>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	210f      	movs	r1, #15
 800216e:	f06f 0001 	mvn.w	r0, #1
 8002172:	f000 fd1b 	bl	8002bac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800

08002184 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08c      	sub	sp, #48	; 0x30
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002194:	2200      	movs	r2, #0
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	2036      	movs	r0, #54	; 0x36
 800219a:	f000 fd07 	bl	8002bac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800219e:	2036      	movs	r0, #54	; 0x36
 80021a0:	f000 fd20 	bl	8002be4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <HAL_InitTick+0xa4>)
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	4a1e      	ldr	r2, [pc, #120]	; (8002228 <HAL_InitTick+0xa4>)
 80021ae:	f043 0310 	orr.w	r3, r3, #16
 80021b2:	6413      	str	r3, [r2, #64]	; 0x40
 80021b4:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <HAL_InitTick+0xa4>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021c0:	f107 0210 	add.w	r2, r7, #16
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f001 f88a 	bl	80032e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80021d0:	f001 f860 	bl	8003294 <HAL_RCC_GetPCLK1Freq>
 80021d4:	4603      	mov	r3, r0
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021dc:	4a13      	ldr	r2, [pc, #76]	; (800222c <HAL_InitTick+0xa8>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	0c9b      	lsrs	r3, r3, #18
 80021e4:	3b01      	subs	r3, #1
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_InitTick+0xac>)
 80021ea:	4a12      	ldr	r2, [pc, #72]	; (8002234 <HAL_InitTick+0xb0>)
 80021ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <HAL_InitTick+0xac>)
 80021f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021f6:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <HAL_InitTick+0xac>)
 80021f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <HAL_InitTick+0xac>)
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_InitTick+0xac>)
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002208:	4809      	ldr	r0, [pc, #36]	; (8002230 <HAL_InitTick+0xac>)
 800220a:	f001 fced 	bl	8003be8 <HAL_TIM_Base_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d104      	bne.n	800221e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002214:	4806      	ldr	r0, [pc, #24]	; (8002230 <HAL_InitTick+0xac>)
 8002216:	f001 fd37 	bl	8003c88 <HAL_TIM_Base_Start_IT>
 800221a:	4603      	mov	r3, r0
 800221c:	e000      	b.n	8002220 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	3730      	adds	r7, #48	; 0x30
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40023800 	.word	0x40023800
 800222c:	431bde83 	.word	0x431bde83
 8002230:	20004484 	.word	0x20004484
 8002234:	40001000 	.word	0x40001000

08002238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800223c:	e7fe      	b.n	800223c <NMI_Handler+0x4>

0800223e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002242:	e7fe      	b.n	8002242 <HardFault_Handler+0x4>

08002244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <MemManage_Handler+0x4>

0800224a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800224e:	e7fe      	b.n	800224e <BusFault_Handler+0x4>

08002250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <UsageFault_Handler+0x4>

08002256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <USART2_IRQHandler+0x10>)
 800226a:	f002 fe4b 	bl	8004f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200045a4 	.word	0x200045a4

08002278 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800227c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002280:	f000 fefe 	bl	8003080 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}

08002288 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0

  /* USER CODE END TIM6_DAC_IRQn 0 */
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0
	return 1;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <_kill>:

int _kill(int pid, int sig)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022b0:	f005 fc84 	bl	8007bbc <__errno>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2216      	movs	r2, #22
 80022b8:	601a      	str	r2, [r3, #0]
	return -1;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <_exit>:

void _exit (int status)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022ce:	f04f 31ff 	mov.w	r1, #4294967295
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffe7 	bl	80022a6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022d8:	e7fe      	b.n	80022d8 <_exit+0x12>

080022da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	e00a      	b.n	8002302 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022ec:	f3af 8000 	nop.w
 80022f0:	4601      	mov	r1, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	60ba      	str	r2, [r7, #8]
 80022f8:	b2ca      	uxtb	r2, r1
 80022fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3301      	adds	r3, #1
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	429a      	cmp	r2, r3
 8002308:	dbf0      	blt.n	80022ec <_read+0x12>
	}

return len;
 800230a:	687b      	ldr	r3, [r7, #4]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	e009      	b.n	800233a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	60ba      	str	r2, [r7, #8]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f918 	bl	8001564 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3301      	adds	r3, #1
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	dbf1      	blt.n	8002326 <_write+0x12>
	}
	return len;
 8002342:	687b      	ldr	r3, [r7, #4]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <_close>:

int _close(int file)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	return -1;
 8002354:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002374:	605a      	str	r2, [r3, #4]
	return 0;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_isatty>:

int _isatty(int file)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	return 1;
 800238c:	2301      	movs	r3, #1
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
	return 0;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023bc:	4a14      	ldr	r2, [pc, #80]	; (8002410 <_sbrk+0x5c>)
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <_sbrk+0x60>)
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <_sbrk+0x64>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <_sbrk+0x64>)
 80023d2:	4a12      	ldr	r2, [pc, #72]	; (800241c <_sbrk+0x68>)
 80023d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <_sbrk+0x64>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d207      	bcs.n	80023f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e4:	f005 fbea 	bl	8007bbc <__errno>
 80023e8:	4603      	mov	r3, r0
 80023ea:	220c      	movs	r2, #12
 80023ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
 80023f2:	e009      	b.n	8002408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <_sbrk+0x64>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <_sbrk+0x64>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	4a05      	ldr	r2, [pc, #20]	; (8002418 <_sbrk+0x64>)
 8002404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20020000 	.word	0x20020000
 8002414:	00000400 	.word	0x00000400
 8002418:	2000060c 	.word	0x2000060c
 800241c:	20004600 	.word	0x20004600

08002420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <SystemInit+0x20>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	4a05      	ldr	r2, [pc, #20]	; (8002440 <SystemInit+0x20>)
 800242c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b096      	sub	sp, #88	; 0x58
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002458:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	60da      	str	r2, [r3, #12]
 8002470:	611a      	str	r2, [r3, #16]
 8002472:	615a      	str	r2, [r3, #20]
 8002474:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	2220      	movs	r2, #32
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f005 fcce 	bl	8007e1e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002482:	4b44      	ldr	r3, [pc, #272]	; (8002594 <MX_TIM1_Init+0x150>)
 8002484:	4a44      	ldr	r2, [pc, #272]	; (8002598 <MX_TIM1_Init+0x154>)
 8002486:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002488:	4b42      	ldr	r3, [pc, #264]	; (8002594 <MX_TIM1_Init+0x150>)
 800248a:	2200      	movs	r2, #0
 800248c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248e:	4b41      	ldr	r3, [pc, #260]	; (8002594 <MX_TIM1_Init+0x150>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3360-1;
 8002494:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <MX_TIM1_Init+0x150>)
 8002496:	f640 521f 	movw	r2, #3359	; 0xd1f
 800249a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249c:	4b3d      	ldr	r3, [pc, #244]	; (8002594 <MX_TIM1_Init+0x150>)
 800249e:	2200      	movs	r2, #0
 80024a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024a2:	4b3c      	ldr	r3, [pc, #240]	; (8002594 <MX_TIM1_Init+0x150>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a8:	4b3a      	ldr	r3, [pc, #232]	; (8002594 <MX_TIM1_Init+0x150>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024ae:	4839      	ldr	r0, [pc, #228]	; (8002594 <MX_TIM1_Init+0x150>)
 80024b0:	f001 fb9a 	bl	8003be8 <HAL_TIM_Base_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80024ba:	f7ff fe31 	bl	8002120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024c8:	4619      	mov	r1, r3
 80024ca:	4832      	ldr	r0, [pc, #200]	; (8002594 <MX_TIM1_Init+0x150>)
 80024cc:	f001 ff64 	bl	8004398 <HAL_TIM_ConfigClockSource>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80024d6:	f7ff fe23 	bl	8002120 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024da:	482e      	ldr	r0, [pc, #184]	; (8002594 <MX_TIM1_Init+0x150>)
 80024dc:	f001 fc44 	bl	8003d68 <HAL_TIM_PWM_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80024e6:	f7ff fe1b 	bl	8002120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024f6:	4619      	mov	r1, r3
 80024f8:	4826      	ldr	r0, [pc, #152]	; (8002594 <MX_TIM1_Init+0x150>)
 80024fa:	f002 fb25 	bl	8004b48 <HAL_TIMEx_MasterConfigSynchronization>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002504:	f7ff fe0c 	bl	8002120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002508:	2360      	movs	r3, #96	; 0x60
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002510:	2300      	movs	r3, #0
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002514:	2300      	movs	r3, #0
 8002516:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800251c:	2300      	movs	r3, #0
 800251e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002520:	2300      	movs	r3, #0
 8002522:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002528:	2200      	movs	r2, #0
 800252a:	4619      	mov	r1, r3
 800252c:	4819      	ldr	r0, [pc, #100]	; (8002594 <MX_TIM1_Init+0x150>)
 800252e:	f001 fe71 	bl	8004214 <HAL_TIM_PWM_ConfigChannel>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002538:	f7ff fdf2 	bl	8002120 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800253c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002540:	2204      	movs	r2, #4
 8002542:	4619      	mov	r1, r3
 8002544:	4813      	ldr	r0, [pc, #76]	; (8002594 <MX_TIM1_Init+0x150>)
 8002546:	f001 fe65 	bl	8004214 <HAL_TIM_PWM_ConfigChannel>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002550:	f7ff fde6 	bl	8002120 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002554:	2300      	movs	r3, #0
 8002556:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002558:	2300      	movs	r3, #0
 800255a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800256c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	4619      	mov	r1, r3
 8002576:	4807      	ldr	r0, [pc, #28]	; (8002594 <MX_TIM1_Init+0x150>)
 8002578:	f002 fb62 	bl	8004c40 <HAL_TIMEx_ConfigBreakDeadTime>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002582:	f7ff fdcd 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002586:	4803      	ldr	r0, [pc, #12]	; (8002594 <MX_TIM1_Init+0x150>)
 8002588:	f000 f94c 	bl	8002824 <HAL_TIM_MspPostInit>

}
 800258c:	bf00      	nop
 800258e:	3758      	adds	r7, #88	; 0x58
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20004514 	.word	0x20004514
 8002598:	40010000 	.word	0x40010000

0800259c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08c      	sub	sp, #48	; 0x30
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025a2:	f107 030c 	add.w	r3, r7, #12
 80025a6:	2224      	movs	r2, #36	; 0x24
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f005 fc37 	bl	8007e1e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025b8:	4b21      	ldr	r3, [pc, #132]	; (8002640 <MX_TIM2_Init+0xa4>)
 80025ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80025c0:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <MX_TIM2_Init+0xa4>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c6:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <MX_TIM2_Init+0xa4>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80025cc:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <MX_TIM2_Init+0xa4>)
 80025ce:	f04f 32ff 	mov.w	r2, #4294967295
 80025d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d4:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <MX_TIM2_Init+0xa4>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025da:	4b19      	ldr	r3, [pc, #100]	; (8002640 <MX_TIM2_Init+0xa4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025e0:	2303      	movs	r3, #3
 80025e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025e8:	2301      	movs	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025f8:	2301      	movs	r3, #1
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	4619      	mov	r1, r3
 800260a:	480d      	ldr	r0, [pc, #52]	; (8002640 <MX_TIM2_Init+0xa4>)
 800260c:	f001 fcce 	bl	8003fac <HAL_TIM_Encoder_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002616:	f7ff fd83 	bl	8002120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	4619      	mov	r1, r3
 8002626:	4806      	ldr	r0, [pc, #24]	; (8002640 <MX_TIM2_Init+0xa4>)
 8002628:	f002 fa8e 	bl	8004b48 <HAL_TIMEx_MasterConfigSynchronization>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002632:	f7ff fd75 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002636:	bf00      	nop
 8002638:	3730      	adds	r7, #48	; 0x30
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	2000455c 	.word	0x2000455c

08002644 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08c      	sub	sp, #48	; 0x30
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800264a:	f107 030c 	add.w	r3, r7, #12
 800264e:	2224      	movs	r2, #36	; 0x24
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f005 fbe3 	bl	8007e1e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002660:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <MX_TIM3_Init+0xa0>)
 8002662:	4a21      	ldr	r2, [pc, #132]	; (80026e8 <MX_TIM3_Init+0xa4>)
 8002664:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002666:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <MX_TIM3_Init+0xa0>)
 8002668:	2200      	movs	r2, #0
 800266a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266c:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <MX_TIM3_Init+0xa0>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002672:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <MX_TIM3_Init+0xa0>)
 8002674:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002678:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800267a:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <MX_TIM3_Init+0xa0>)
 800267c:	2200      	movs	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002680:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <MX_TIM3_Init+0xa0>)
 8002682:	2200      	movs	r2, #0
 8002684:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002686:	2303      	movs	r3, #3
 8002688:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800268e:	2301      	movs	r3, #1
 8002690:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800269a:	2300      	movs	r3, #0
 800269c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800269e:	2301      	movs	r3, #1
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026a2:	2300      	movs	r3, #0
 80026a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80026aa:	f107 030c 	add.w	r3, r7, #12
 80026ae:	4619      	mov	r1, r3
 80026b0:	480c      	ldr	r0, [pc, #48]	; (80026e4 <MX_TIM3_Init+0xa0>)
 80026b2:	f001 fc7b 	bl	8003fac <HAL_TIM_Encoder_Init>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80026bc:	f7ff fd30 	bl	8002120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c0:	2300      	movs	r3, #0
 80026c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	4619      	mov	r1, r3
 80026cc:	4805      	ldr	r0, [pc, #20]	; (80026e4 <MX_TIM3_Init+0xa0>)
 80026ce:	f002 fa3b 	bl	8004b48 <HAL_TIMEx_MasterConfigSynchronization>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80026d8:	f7ff fd22 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026dc:	bf00      	nop
 80026de:	3730      	adds	r7, #48	; 0x30
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	200044cc 	.word	0x200044cc
 80026e8:	40000400 	.word	0x40000400

080026ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <HAL_TIM_Base_MspInit+0x3c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d10d      	bne.n	800271a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <HAL_TIM_Base_MspInit+0x40>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <HAL_TIM_Base_MspInit+0x40>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6453      	str	r3, [r2, #68]	; 0x44
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <HAL_TIM_Base_MspInit+0x40>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40010000 	.word	0x40010000
 800272c:	40023800 	.word	0x40023800

08002730 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08c      	sub	sp, #48	; 0x30
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 031c 	add.w	r3, r7, #28
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002750:	d12c      	bne.n	80027ac <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	4b30      	ldr	r3, [pc, #192]	; (8002818 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	4a2f      	ldr	r2, [pc, #188]	; (8002818 <HAL_TIM_Encoder_MspInit+0xe8>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6413      	str	r3, [r2, #64]	; 0x40
 8002762:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	4b29      	ldr	r3, [pc, #164]	; (8002818 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a28      	ldr	r2, [pc, #160]	; (8002818 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b26      	ldr	r3, [pc, #152]	; (8002818 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCG_A_Pin|ENCG_B_Pin;
 800278a:	2303      	movs	r3, #3
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	2300      	movs	r3, #0
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800279a:	2301      	movs	r3, #1
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279e:	f107 031c 	add.w	r3, r7, #28
 80027a2:	4619      	mov	r1, r3
 80027a4:	481d      	ldr	r0, [pc, #116]	; (800281c <HAL_TIM_Encoder_MspInit+0xec>)
 80027a6:	f000 fabd 	bl	8002d24 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80027aa:	e030      	b.n	800280e <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1b      	ldr	r2, [pc, #108]	; (8002820 <HAL_TIM_Encoder_MspInit+0xf0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d12b      	bne.n	800280e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	4b17      	ldr	r3, [pc, #92]	; (8002818 <HAL_TIM_Encoder_MspInit+0xe8>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a16      	ldr	r2, [pc, #88]	; (8002818 <HAL_TIM_Encoder_MspInit+0xe8>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
 80027c6:	4b14      	ldr	r3, [pc, #80]	; (8002818 <HAL_TIM_Encoder_MspInit+0xe8>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <HAL_TIM_Encoder_MspInit+0xe8>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a0f      	ldr	r2, [pc, #60]	; (8002818 <HAL_TIM_Encoder_MspInit+0xe8>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <HAL_TIM_Encoder_MspInit+0xe8>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCD_A_Pin|ENCD_B_Pin;
 80027ee:	23c0      	movs	r3, #192	; 0xc0
 80027f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fa:	2300      	movs	r3, #0
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027fe:	2302      	movs	r3, #2
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002802:	f107 031c 	add.w	r3, r7, #28
 8002806:	4619      	mov	r1, r3
 8002808:	4804      	ldr	r0, [pc, #16]	; (800281c <HAL_TIM_Encoder_MspInit+0xec>)
 800280a:	f000 fa8b 	bl	8002d24 <HAL_GPIO_Init>
}
 800280e:	bf00      	nop
 8002810:	3730      	adds	r7, #48	; 0x30
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800
 800281c:	40020000 	.word	0x40020000
 8002820:	40000400 	.word	0x40000400

08002824 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282c:	f107 030c 	add.w	r3, r7, #12
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a12      	ldr	r2, [pc, #72]	; (800288c <HAL_TIM_MspPostInit+0x68>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d11e      	bne.n	8002884 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_TIM_MspPostInit+0x6c>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a10      	ldr	r2, [pc, #64]	; (8002890 <HAL_TIM_MspPostInit+0x6c>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_TIM_MspPostInit+0x6c>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTG_PWM_Pin|MOTD_PWM_Pin;
 8002862:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002866:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2300      	movs	r3, #0
 8002872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002874:	2301      	movs	r3, #1
 8002876:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002878:	f107 030c 	add.w	r3, r7, #12
 800287c:	4619      	mov	r1, r3
 800287e:	4805      	ldr	r0, [pc, #20]	; (8002894 <HAL_TIM_MspPostInit+0x70>)
 8002880:	f000 fa50 	bl	8002d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002884:	bf00      	nop
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40010000 	.word	0x40010000
 8002890:	40023800 	.word	0x40023800
 8002894:	40020000 	.word	0x40020000

08002898 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <MX_USART2_UART_Init+0x4c>)
 800289e:	4a12      	ldr	r2, [pc, #72]	; (80028e8 <MX_USART2_UART_Init+0x50>)
 80028a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <MX_USART2_UART_Init+0x4c>)
 80028a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <MX_USART2_UART_Init+0x4c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <MX_USART2_UART_Init+0x4c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <MX_USART2_UART_Init+0x4c>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <MX_USART2_UART_Init+0x4c>)
 80028be:	220c      	movs	r2, #12
 80028c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <MX_USART2_UART_Init+0x4c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <MX_USART2_UART_Init+0x4c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028ce:	4805      	ldr	r0, [pc, #20]	; (80028e4 <MX_USART2_UART_Init+0x4c>)
 80028d0:	f002 fa08 	bl	8004ce4 <HAL_UART_Init>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028da:	f7ff fc21 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200045a4 	.word	0x200045a4
 80028e8:	40004400 	.word	0x40004400

080028ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a1d      	ldr	r2, [pc, #116]	; (8002980 <HAL_UART_MspInit+0x94>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d133      	bne.n	8002976 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <HAL_UART_MspInit+0x98>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	4a1b      	ldr	r2, [pc, #108]	; (8002984 <HAL_UART_MspInit+0x98>)
 8002918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291c:	6413      	str	r3, [r2, #64]	; 0x40
 800291e:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_UART_MspInit+0x98>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <HAL_UART_MspInit+0x98>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a14      	ldr	r2, [pc, #80]	; (8002984 <HAL_UART_MspInit+0x98>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_UART_MspInit+0x98>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002946:	230c      	movs	r3, #12
 8002948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	2302      	movs	r3, #2
 800294c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002952:	2303      	movs	r3, #3
 8002954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002956:	2307      	movs	r3, #7
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	4619      	mov	r1, r3
 8002960:	4809      	ldr	r0, [pc, #36]	; (8002988 <HAL_UART_MspInit+0x9c>)
 8002962:	f000 f9df 	bl	8002d24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	2105      	movs	r1, #5
 800296a:	2026      	movs	r0, #38	; 0x26
 800296c:	f000 f91e 	bl	8002bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002970:	2026      	movs	r0, #38	; 0x26
 8002972:	f000 f937 	bl	8002be4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002976:	bf00      	nop
 8002978:	3728      	adds	r7, #40	; 0x28
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40004400 	.word	0x40004400
 8002984:	40023800 	.word	0x40023800
 8002988:	40020000 	.word	0x40020000

0800298c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800298c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002990:	480d      	ldr	r0, [pc, #52]	; (80029c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002992:	490e      	ldr	r1, [pc, #56]	; (80029cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002994:	4a0e      	ldr	r2, [pc, #56]	; (80029d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002998:	e002      	b.n	80029a0 <LoopCopyDataInit>

0800299a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800299a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800299c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800299e:	3304      	adds	r3, #4

080029a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a4:	d3f9      	bcc.n	800299a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029a6:	4a0b      	ldr	r2, [pc, #44]	; (80029d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029a8:	4c0b      	ldr	r4, [pc, #44]	; (80029d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029ac:	e001      	b.n	80029b2 <LoopFillZerobss>

080029ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029b0:	3204      	adds	r2, #4

080029b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b4:	d3fb      	bcc.n	80029ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029b6:	f7ff fd33 	bl	8002420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ba:	f005 f9fb 	bl	8007db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029be:	f7ff fab1 	bl	8001f24 <main>
  bx  lr    
 80029c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029cc:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80029d0:	0800c7d4 	.word	0x0800c7d4
  ldr r2, =_sbss
 80029d4:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80029d8:	200045fc 	.word	0x200045fc

080029dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029dc:	e7fe      	b.n	80029dc <ADC_IRQHandler>
	...

080029e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <HAL_Init+0x40>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a0d      	ldr	r2, [pc, #52]	; (8002a20 <HAL_Init+0x40>)
 80029ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_Init+0x40>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <HAL_Init+0x40>)
 80029f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <HAL_Init+0x40>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <HAL_Init+0x40>)
 8002a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a08:	2003      	movs	r0, #3
 8002a0a:	f000 f8c4 	bl	8002b96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a0e:	200f      	movs	r0, #15
 8002a10:	f7ff fbb8 	bl	8002184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a14:	f7ff fb8a 	bl	800212c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023c00 	.word	0x40023c00

08002a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return uwTick;
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <HAL_GetTick+0x14>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	200045e8 	.word	0x200045e8

08002a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	60d3      	str	r3, [r2, #12]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <__NVIC_GetPriorityGrouping+0x18>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 0307 	and.w	r3, r3, #7
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	db0b      	blt.n	8002aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4907      	ldr	r1, [pc, #28]	; (8002ad8 <__NVIC_EnableIRQ+0x38>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000e100 	.word	0xe000e100

08002adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	6039      	str	r1, [r7, #0]
 8002ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db0a      	blt.n	8002b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	490c      	ldr	r1, [pc, #48]	; (8002b28 <__NVIC_SetPriority+0x4c>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	0112      	lsls	r2, r2, #4
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	440b      	add	r3, r1
 8002b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b04:	e00a      	b.n	8002b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4908      	ldr	r1, [pc, #32]	; (8002b2c <__NVIC_SetPriority+0x50>)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	3b04      	subs	r3, #4
 8002b14:	0112      	lsls	r2, r2, #4
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	440b      	add	r3, r1
 8002b1a:	761a      	strb	r2, [r3, #24]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000e100 	.word	0xe000e100
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f1c3 0307 	rsb	r3, r3, #7
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	bf28      	it	cs
 8002b4e:	2304      	movcs	r3, #4
 8002b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d902      	bls.n	8002b60 <NVIC_EncodePriority+0x30>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3b03      	subs	r3, #3
 8002b5e:	e000      	b.n	8002b62 <NVIC_EncodePriority+0x32>
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	401a      	ands	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b78:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b82:	43d9      	mvns	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	4313      	orrs	r3, r2
         );
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ff4c 	bl	8002a3c <__NVIC_SetPriorityGrouping>
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bbe:	f7ff ff61 	bl	8002a84 <__NVIC_GetPriorityGrouping>
 8002bc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	6978      	ldr	r0, [r7, #20]
 8002bca:	f7ff ffb1 	bl	8002b30 <NVIC_EncodePriority>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ff80 	bl	8002adc <__NVIC_SetPriority>
}
 8002bdc:	bf00      	nop
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff ff54 	bl	8002aa0 <__NVIC_EnableIRQ>
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c0e:	f7ff ff09 	bl	8002a24 <HAL_GetTick>
 8002c12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d008      	beq.n	8002c32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e052      	b.n	8002cd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0216 	bic.w	r2, r2, #22
 8002c40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d103      	bne.n	8002c62 <HAL_DMA_Abort+0x62>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0208 	bic.w	r2, r2, #8
 8002c70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0201 	bic.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c82:	e013      	b.n	8002cac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c84:	f7ff fece 	bl	8002a24 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b05      	cmp	r3, #5
 8002c90:	d90c      	bls.n	8002cac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e015      	b.n	8002cd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1e4      	bne.n	8002c84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	223f      	movs	r2, #63	; 0x3f
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d004      	beq.n	8002cfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e00c      	b.n	8002d18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2205      	movs	r2, #5
 8002d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0201 	bic.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b089      	sub	sp, #36	; 0x24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	e165      	b.n	800300c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d40:	2201      	movs	r2, #1
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	f040 8154 	bne.w	8003006 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d005      	beq.n	8002d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d130      	bne.n	8002dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	2203      	movs	r2, #3
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dac:	2201      	movs	r2, #1
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 0201 	and.w	r2, r3, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d017      	beq.n	8002e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	2203      	movs	r2, #3
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d123      	bne.n	8002e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	08da      	lsrs	r2, r3, #3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3208      	adds	r2, #8
 8002e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	220f      	movs	r2, #15
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	08da      	lsrs	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3208      	adds	r2, #8
 8002e62:	69b9      	ldr	r1, [r7, #24]
 8002e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 0203 	and.w	r2, r3, #3
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80ae 	beq.w	8003006 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	4b5d      	ldr	r3, [pc, #372]	; (8003024 <HAL_GPIO_Init+0x300>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	4a5c      	ldr	r2, [pc, #368]	; (8003024 <HAL_GPIO_Init+0x300>)
 8002eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eba:	4b5a      	ldr	r3, [pc, #360]	; (8003024 <HAL_GPIO_Init+0x300>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ec6:	4a58      	ldr	r2, [pc, #352]	; (8003028 <HAL_GPIO_Init+0x304>)
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	3302      	adds	r3, #2
 8002ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	220f      	movs	r2, #15
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a4f      	ldr	r2, [pc, #316]	; (800302c <HAL_GPIO_Init+0x308>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d025      	beq.n	8002f3e <HAL_GPIO_Init+0x21a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a4e      	ldr	r2, [pc, #312]	; (8003030 <HAL_GPIO_Init+0x30c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d01f      	beq.n	8002f3a <HAL_GPIO_Init+0x216>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4d      	ldr	r2, [pc, #308]	; (8003034 <HAL_GPIO_Init+0x310>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d019      	beq.n	8002f36 <HAL_GPIO_Init+0x212>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4c      	ldr	r2, [pc, #304]	; (8003038 <HAL_GPIO_Init+0x314>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d013      	beq.n	8002f32 <HAL_GPIO_Init+0x20e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4b      	ldr	r2, [pc, #300]	; (800303c <HAL_GPIO_Init+0x318>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00d      	beq.n	8002f2e <HAL_GPIO_Init+0x20a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4a      	ldr	r2, [pc, #296]	; (8003040 <HAL_GPIO_Init+0x31c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <HAL_GPIO_Init+0x206>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a49      	ldr	r2, [pc, #292]	; (8003044 <HAL_GPIO_Init+0x320>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d101      	bne.n	8002f26 <HAL_GPIO_Init+0x202>
 8002f22:	2306      	movs	r3, #6
 8002f24:	e00c      	b.n	8002f40 <HAL_GPIO_Init+0x21c>
 8002f26:	2307      	movs	r3, #7
 8002f28:	e00a      	b.n	8002f40 <HAL_GPIO_Init+0x21c>
 8002f2a:	2305      	movs	r3, #5
 8002f2c:	e008      	b.n	8002f40 <HAL_GPIO_Init+0x21c>
 8002f2e:	2304      	movs	r3, #4
 8002f30:	e006      	b.n	8002f40 <HAL_GPIO_Init+0x21c>
 8002f32:	2303      	movs	r3, #3
 8002f34:	e004      	b.n	8002f40 <HAL_GPIO_Init+0x21c>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e002      	b.n	8002f40 <HAL_GPIO_Init+0x21c>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <HAL_GPIO_Init+0x21c>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	69fa      	ldr	r2, [r7, #28]
 8002f42:	f002 0203 	and.w	r2, r2, #3
 8002f46:	0092      	lsls	r2, r2, #2
 8002f48:	4093      	lsls	r3, r2
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f50:	4935      	ldr	r1, [pc, #212]	; (8003028 <HAL_GPIO_Init+0x304>)
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	089b      	lsrs	r3, r3, #2
 8002f56:	3302      	adds	r3, #2
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f5e:	4b3a      	ldr	r3, [pc, #232]	; (8003048 <HAL_GPIO_Init+0x324>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f82:	4a31      	ldr	r2, [pc, #196]	; (8003048 <HAL_GPIO_Init+0x324>)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f88:	4b2f      	ldr	r3, [pc, #188]	; (8003048 <HAL_GPIO_Init+0x324>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fac:	4a26      	ldr	r2, [pc, #152]	; (8003048 <HAL_GPIO_Init+0x324>)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fb2:	4b25      	ldr	r3, [pc, #148]	; (8003048 <HAL_GPIO_Init+0x324>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fd6:	4a1c      	ldr	r2, [pc, #112]	; (8003048 <HAL_GPIO_Init+0x324>)
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fdc:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <HAL_GPIO_Init+0x324>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003000:	4a11      	ldr	r2, [pc, #68]	; (8003048 <HAL_GPIO_Init+0x324>)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3301      	adds	r3, #1
 800300a:	61fb      	str	r3, [r7, #28]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	2b0f      	cmp	r3, #15
 8003010:	f67f ae96 	bls.w	8002d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	3724      	adds	r7, #36	; 0x24
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800
 8003028:	40013800 	.word	0x40013800
 800302c:	40020000 	.word	0x40020000
 8003030:	40020400 	.word	0x40020400
 8003034:	40020800 	.word	0x40020800
 8003038:	40020c00 	.word	0x40020c00
 800303c:	40021000 	.word	0x40021000
 8003040:	40021400 	.word	0x40021400
 8003044:	40021800 	.word	0x40021800
 8003048:	40013c00 	.word	0x40013c00

0800304c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	807b      	strh	r3, [r7, #2]
 8003058:	4613      	mov	r3, r2
 800305a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800305c:	787b      	ldrb	r3, [r7, #1]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003062:	887a      	ldrh	r2, [r7, #2]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003068:	e003      	b.n	8003072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800306a:	887b      	ldrh	r3, [r7, #2]
 800306c:	041a      	lsls	r2, r3, #16
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	619a      	str	r2, [r3, #24]
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800308a:	4b08      	ldr	r3, [pc, #32]	; (80030ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d006      	beq.n	80030a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003096:	4a05      	ldr	r2, [pc, #20]	; (80030ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe fff8 	bl	8002094 <HAL_GPIO_EXTI_Callback>
  }
}
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40013c00 	.word	0x40013c00

080030b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0cc      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c4:	4b68      	ldr	r3, [pc, #416]	; (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d90c      	bls.n	80030ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d2:	4b65      	ldr	r3, [pc, #404]	; (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030da:	4b63      	ldr	r3, [pc, #396]	; (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0b8      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d020      	beq.n	800313a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003104:	4b59      	ldr	r3, [pc, #356]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	4a58      	ldr	r2, [pc, #352]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800310e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800311c:	4b53      	ldr	r3, [pc, #332]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	4a52      	ldr	r2, [pc, #328]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003126:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003128:	4b50      	ldr	r3, [pc, #320]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	494d      	ldr	r1, [pc, #308]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d044      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d107      	bne.n	800315e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314e:	4b47      	ldr	r3, [pc, #284]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d119      	bne.n	800318e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e07f      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d003      	beq.n	800316e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800316a:	2b03      	cmp	r3, #3
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316e:	4b3f      	ldr	r3, [pc, #252]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e06f      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317e:	4b3b      	ldr	r3, [pc, #236]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e067      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800318e:	4b37      	ldr	r3, [pc, #220]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f023 0203 	bic.w	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4934      	ldr	r1, [pc, #208]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	4313      	orrs	r3, r2
 800319e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a0:	f7ff fc40 	bl	8002a24 <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	e00a      	b.n	80031be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a8:	f7ff fc3c 	bl	8002a24 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e04f      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	4b2b      	ldr	r3, [pc, #172]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 020c 	and.w	r2, r3, #12
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d1eb      	bne.n	80031a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031d0:	4b25      	ldr	r3, [pc, #148]	; (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d20c      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b22      	ldr	r3, [pc, #136]	; (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	4b20      	ldr	r3, [pc, #128]	; (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e032      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003204:	4b19      	ldr	r3, [pc, #100]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4916      	ldr	r1, [pc, #88]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003222:	4b12      	ldr	r3, [pc, #72]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	490e      	ldr	r1, [pc, #56]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003236:	f000 f887 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 800323a:	4602      	mov	r2, r0
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	490a      	ldr	r1, [pc, #40]	; (8003270 <HAL_RCC_ClockConfig+0x1c0>)
 8003248:	5ccb      	ldrb	r3, [r1, r3]
 800324a:	fa22 f303 	lsr.w	r3, r2, r3
 800324e:	4a09      	ldr	r2, [pc, #36]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003252:	4b09      	ldr	r3, [pc, #36]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe ff94 	bl	8002184 <HAL_InitTick>

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40023c00 	.word	0x40023c00
 800326c:	40023800 	.word	0x40023800
 8003270:	0800c300 	.word	0x0800c300
 8003274:	20000038 	.word	0x20000038
 8003278:	2000003c 	.word	0x2000003c

0800327c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003280:	4b03      	ldr	r3, [pc, #12]	; (8003290 <HAL_RCC_GetHCLKFreq+0x14>)
 8003282:	681b      	ldr	r3, [r3, #0]
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20000038 	.word	0x20000038

08003294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003298:	f7ff fff0 	bl	800327c <HAL_RCC_GetHCLKFreq>
 800329c:	4602      	mov	r2, r0
 800329e:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	0a9b      	lsrs	r3, r3, #10
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	4903      	ldr	r1, [pc, #12]	; (80032b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032aa:	5ccb      	ldrb	r3, [r1, r3]
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40023800 	.word	0x40023800
 80032b8:	0800c310 	.word	0x0800c310

080032bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032c0:	f7ff ffdc 	bl	800327c <HAL_RCC_GetHCLKFreq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	0b5b      	lsrs	r3, r3, #13
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	4903      	ldr	r1, [pc, #12]	; (80032e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032d2:	5ccb      	ldrb	r3, [r1, r3]
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40023800 	.word	0x40023800
 80032e0:	0800c310 	.word	0x0800c310

080032e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	220f      	movs	r2, #15
 80032f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032f4:	4b12      	ldr	r3, [pc, #72]	; (8003340 <HAL_RCC_GetClockConfig+0x5c>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 0203 	and.w	r2, r3, #3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003300:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <HAL_RCC_GetClockConfig+0x5c>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <HAL_RCC_GetClockConfig+0x5c>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003318:	4b09      	ldr	r3, [pc, #36]	; (8003340 <HAL_RCC_GetClockConfig+0x5c>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	08db      	lsrs	r3, r3, #3
 800331e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003326:	4b07      	ldr	r3, [pc, #28]	; (8003344 <HAL_RCC_GetClockConfig+0x60>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 020f 	and.w	r2, r3, #15
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	601a      	str	r2, [r3, #0]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40023800 	.word	0x40023800
 8003344:	40023c00 	.word	0x40023c00

08003348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800334c:	b088      	sub	sp, #32
 800334e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003364:	4bce      	ldr	r3, [pc, #824]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 030c 	and.w	r3, r3, #12
 800336c:	2b0c      	cmp	r3, #12
 800336e:	f200 818d 	bhi.w	800368c <HAL_RCC_GetSysClockFreq+0x344>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <HAL_RCC_GetSysClockFreq+0x30>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	080033ad 	.word	0x080033ad
 800337c:	0800368d 	.word	0x0800368d
 8003380:	0800368d 	.word	0x0800368d
 8003384:	0800368d 	.word	0x0800368d
 8003388:	080033b3 	.word	0x080033b3
 800338c:	0800368d 	.word	0x0800368d
 8003390:	0800368d 	.word	0x0800368d
 8003394:	0800368d 	.word	0x0800368d
 8003398:	080033b9 	.word	0x080033b9
 800339c:	0800368d 	.word	0x0800368d
 80033a0:	0800368d 	.word	0x0800368d
 80033a4:	0800368d 	.word	0x0800368d
 80033a8:	0800352d 	.word	0x0800352d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033ac:	4bbd      	ldr	r3, [pc, #756]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80033ae:	61bb      	str	r3, [r7, #24]
       break;
 80033b0:	e16f      	b.n	8003692 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033b2:	4bbd      	ldr	r3, [pc, #756]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x360>)
 80033b4:	61bb      	str	r3, [r7, #24]
      break;
 80033b6:	e16c      	b.n	8003692 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b8:	4bb9      	ldr	r3, [pc, #740]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033c2:	4bb7      	ldr	r3, [pc, #732]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d053      	beq.n	8003476 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ce:	4bb4      	ldr	r3, [pc, #720]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	099b      	lsrs	r3, r3, #6
 80033d4:	461a      	mov	r2, r3
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033de:	f04f 0100 	mov.w	r1, #0
 80033e2:	ea02 0400 	and.w	r4, r2, r0
 80033e6:	603c      	str	r4, [r7, #0]
 80033e8:	400b      	ands	r3, r1
 80033ea:	607b      	str	r3, [r7, #4]
 80033ec:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033f0:	4620      	mov	r0, r4
 80033f2:	4629      	mov	r1, r5
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	014b      	lsls	r3, r1, #5
 80033fe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003402:	0142      	lsls	r2, r0, #5
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	4623      	mov	r3, r4
 800340a:	1ac0      	subs	r0, r0, r3
 800340c:	462b      	mov	r3, r5
 800340e:	eb61 0103 	sbc.w	r1, r1, r3
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	018b      	lsls	r3, r1, #6
 800341c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003420:	0182      	lsls	r2, r0, #6
 8003422:	1a12      	subs	r2, r2, r0
 8003424:	eb63 0301 	sbc.w	r3, r3, r1
 8003428:	f04f 0000 	mov.w	r0, #0
 800342c:	f04f 0100 	mov.w	r1, #0
 8003430:	00d9      	lsls	r1, r3, #3
 8003432:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003436:	00d0      	lsls	r0, r2, #3
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4621      	mov	r1, r4
 800343e:	1852      	adds	r2, r2, r1
 8003440:	4629      	mov	r1, r5
 8003442:	eb43 0101 	adc.w	r1, r3, r1
 8003446:	460b      	mov	r3, r1
 8003448:	f04f 0000 	mov.w	r0, #0
 800344c:	f04f 0100 	mov.w	r1, #0
 8003450:	0259      	lsls	r1, r3, #9
 8003452:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003456:	0250      	lsls	r0, r2, #9
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	461a      	mov	r2, r3
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	f7fd fc3e 	bl	8000ce8 <__aeabi_uldivmod>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4613      	mov	r3, r2
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	e04c      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003476:	4b8a      	ldr	r3, [pc, #552]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	099b      	lsrs	r3, r3, #6
 800347c:	461a      	mov	r2, r3
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003486:	f04f 0100 	mov.w	r1, #0
 800348a:	ea02 0a00 	and.w	sl, r2, r0
 800348e:	ea03 0b01 	and.w	fp, r3, r1
 8003492:	4650      	mov	r0, sl
 8003494:	4659      	mov	r1, fp
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	014b      	lsls	r3, r1, #5
 80034a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034a4:	0142      	lsls	r2, r0, #5
 80034a6:	4610      	mov	r0, r2
 80034a8:	4619      	mov	r1, r3
 80034aa:	ebb0 000a 	subs.w	r0, r0, sl
 80034ae:	eb61 010b 	sbc.w	r1, r1, fp
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	018b      	lsls	r3, r1, #6
 80034bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034c0:	0182      	lsls	r2, r0, #6
 80034c2:	1a12      	subs	r2, r2, r0
 80034c4:	eb63 0301 	sbc.w	r3, r3, r1
 80034c8:	f04f 0000 	mov.w	r0, #0
 80034cc:	f04f 0100 	mov.w	r1, #0
 80034d0:	00d9      	lsls	r1, r3, #3
 80034d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034d6:	00d0      	lsls	r0, r2, #3
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	eb12 020a 	adds.w	r2, r2, sl
 80034e0:	eb43 030b 	adc.w	r3, r3, fp
 80034e4:	f04f 0000 	mov.w	r0, #0
 80034e8:	f04f 0100 	mov.w	r1, #0
 80034ec:	0299      	lsls	r1, r3, #10
 80034ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034f2:	0290      	lsls	r0, r2, #10
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4610      	mov	r0, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	461a      	mov	r2, r3
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	f7fd fbf0 	bl	8000ce8 <__aeabi_uldivmod>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4613      	mov	r3, r2
 800350e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003510:	4b63      	ldr	r3, [pc, #396]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	0c1b      	lsrs	r3, r3, #16
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	3301      	adds	r3, #1
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	61bb      	str	r3, [r7, #24]
      break;
 800352a:	e0b2      	b.n	8003692 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800352c:	4b5c      	ldr	r3, [pc, #368]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x358>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003534:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003536:	4b5a      	ldr	r3, [pc, #360]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d04d      	beq.n	80035de <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003542:	4b57      	ldr	r3, [pc, #348]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	099b      	lsrs	r3, r3, #6
 8003548:	461a      	mov	r2, r3
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	ea02 0800 	and.w	r8, r2, r0
 800355a:	ea03 0901 	and.w	r9, r3, r1
 800355e:	4640      	mov	r0, r8
 8003560:	4649      	mov	r1, r9
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	014b      	lsls	r3, r1, #5
 800356c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003570:	0142      	lsls	r2, r0, #5
 8003572:	4610      	mov	r0, r2
 8003574:	4619      	mov	r1, r3
 8003576:	ebb0 0008 	subs.w	r0, r0, r8
 800357a:	eb61 0109 	sbc.w	r1, r1, r9
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	018b      	lsls	r3, r1, #6
 8003588:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800358c:	0182      	lsls	r2, r0, #6
 800358e:	1a12      	subs	r2, r2, r0
 8003590:	eb63 0301 	sbc.w	r3, r3, r1
 8003594:	f04f 0000 	mov.w	r0, #0
 8003598:	f04f 0100 	mov.w	r1, #0
 800359c:	00d9      	lsls	r1, r3, #3
 800359e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035a2:	00d0      	lsls	r0, r2, #3
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	eb12 0208 	adds.w	r2, r2, r8
 80035ac:	eb43 0309 	adc.w	r3, r3, r9
 80035b0:	f04f 0000 	mov.w	r0, #0
 80035b4:	f04f 0100 	mov.w	r1, #0
 80035b8:	0259      	lsls	r1, r3, #9
 80035ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80035be:	0250      	lsls	r0, r2, #9
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4610      	mov	r0, r2
 80035c6:	4619      	mov	r1, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	f7fd fb8a 	bl	8000ce8 <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4613      	mov	r3, r2
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	e04a      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035de:	4b30      	ldr	r3, [pc, #192]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	099b      	lsrs	r3, r3, #6
 80035e4:	461a      	mov	r2, r3
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035ee:	f04f 0100 	mov.w	r1, #0
 80035f2:	ea02 0400 	and.w	r4, r2, r0
 80035f6:	ea03 0501 	and.w	r5, r3, r1
 80035fa:	4620      	mov	r0, r4
 80035fc:	4629      	mov	r1, r5
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	014b      	lsls	r3, r1, #5
 8003608:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800360c:	0142      	lsls	r2, r0, #5
 800360e:	4610      	mov	r0, r2
 8003610:	4619      	mov	r1, r3
 8003612:	1b00      	subs	r0, r0, r4
 8003614:	eb61 0105 	sbc.w	r1, r1, r5
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	018b      	lsls	r3, r1, #6
 8003622:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003626:	0182      	lsls	r2, r0, #6
 8003628:	1a12      	subs	r2, r2, r0
 800362a:	eb63 0301 	sbc.w	r3, r3, r1
 800362e:	f04f 0000 	mov.w	r0, #0
 8003632:	f04f 0100 	mov.w	r1, #0
 8003636:	00d9      	lsls	r1, r3, #3
 8003638:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800363c:	00d0      	lsls	r0, r2, #3
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	1912      	adds	r2, r2, r4
 8003644:	eb45 0303 	adc.w	r3, r5, r3
 8003648:	f04f 0000 	mov.w	r0, #0
 800364c:	f04f 0100 	mov.w	r1, #0
 8003650:	0299      	lsls	r1, r3, #10
 8003652:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003656:	0290      	lsls	r0, r2, #10
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4610      	mov	r0, r2
 800365e:	4619      	mov	r1, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	461a      	mov	r2, r3
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	f7fd fb3e 	bl	8000ce8 <__aeabi_uldivmod>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4613      	mov	r3, r2
 8003672:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	0f1b      	lsrs	r3, r3, #28
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003680:	69fa      	ldr	r2, [r7, #28]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	fbb2 f3f3 	udiv	r3, r2, r3
 8003688:	61bb      	str	r3, [r7, #24]
      break;
 800368a:	e002      	b.n	8003692 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 800368e:	61bb      	str	r3, [r7, #24]
      break;
 8003690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003692:	69bb      	ldr	r3, [r7, #24]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3720      	adds	r7, #32
 8003698:	46bd      	mov	sp, r7
 800369a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800
 80036a4:	00f42400 	.word	0x00f42400
 80036a8:	007a1200 	.word	0x007a1200

080036ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e28d      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8083 	beq.w	80037d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036cc:	4b94      	ldr	r3, [pc, #592]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 030c 	and.w	r3, r3, #12
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d019      	beq.n	800370c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036d8:	4b91      	ldr	r3, [pc, #580]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d106      	bne.n	80036f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036e4:	4b8e      	ldr	r3, [pc, #568]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f0:	d00c      	beq.n	800370c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036f2:	4b8b      	ldr	r3, [pc, #556]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036fa:	2b0c      	cmp	r3, #12
 80036fc:	d112      	bne.n	8003724 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fe:	4b88      	ldr	r3, [pc, #544]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800370a:	d10b      	bne.n	8003724 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370c:	4b84      	ldr	r3, [pc, #528]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d05b      	beq.n	80037d0 <HAL_RCC_OscConfig+0x124>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d157      	bne.n	80037d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e25a      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372c:	d106      	bne.n	800373c <HAL_RCC_OscConfig+0x90>
 800372e:	4b7c      	ldr	r3, [pc, #496]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a7b      	ldr	r2, [pc, #492]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e01d      	b.n	8003778 <HAL_RCC_OscConfig+0xcc>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003744:	d10c      	bne.n	8003760 <HAL_RCC_OscConfig+0xb4>
 8003746:	4b76      	ldr	r3, [pc, #472]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a75      	ldr	r2, [pc, #468]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 800374c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	4b73      	ldr	r3, [pc, #460]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a72      	ldr	r2, [pc, #456]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	e00b      	b.n	8003778 <HAL_RCC_OscConfig+0xcc>
 8003760:	4b6f      	ldr	r3, [pc, #444]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a6e      	ldr	r2, [pc, #440]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	4b6c      	ldr	r3, [pc, #432]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a6b      	ldr	r2, [pc, #428]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d013      	beq.n	80037a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7ff f950 	bl	8002a24 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003788:	f7ff f94c 	bl	8002a24 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	; 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e21f      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379a:	4b61      	ldr	r3, [pc, #388]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0xdc>
 80037a6:	e014      	b.n	80037d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7ff f93c 	bl	8002a24 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037b0:	f7ff f938 	bl	8002a24 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e20b      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c2:	4b57      	ldr	r3, [pc, #348]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x104>
 80037ce:	e000      	b.n	80037d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d06f      	beq.n	80038be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037de:	4b50      	ldr	r3, [pc, #320]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d017      	beq.n	800381a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037ea:	4b4d      	ldr	r3, [pc, #308]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d105      	bne.n	8003802 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037f6:	4b4a      	ldr	r3, [pc, #296]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003802:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800380a:	2b0c      	cmp	r3, #12
 800380c:	d11c      	bne.n	8003848 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380e:	4b44      	ldr	r3, [pc, #272]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d116      	bne.n	8003848 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381a:	4b41      	ldr	r3, [pc, #260]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <HAL_RCC_OscConfig+0x186>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d001      	beq.n	8003832 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e1d3      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003832:	4b3b      	ldr	r3, [pc, #236]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4937      	ldr	r1, [pc, #220]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003846:	e03a      	b.n	80038be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d020      	beq.n	8003892 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003850:	4b34      	ldr	r3, [pc, #208]	; (8003924 <HAL_RCC_OscConfig+0x278>)
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003856:	f7ff f8e5 	bl	8002a24 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800385e:	f7ff f8e1 	bl	8002a24 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e1b4      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003870:	4b2b      	ldr	r3, [pc, #172]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387c:	4b28      	ldr	r3, [pc, #160]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4925      	ldr	r1, [pc, #148]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 800388c:	4313      	orrs	r3, r2
 800388e:	600b      	str	r3, [r1, #0]
 8003890:	e015      	b.n	80038be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003892:	4b24      	ldr	r3, [pc, #144]	; (8003924 <HAL_RCC_OscConfig+0x278>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7ff f8c4 	bl	8002a24 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a0:	f7ff f8c0 	bl	8002a24 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e193      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b2:	4b1b      	ldr	r3, [pc, #108]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d036      	beq.n	8003938 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d016      	beq.n	8003900 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <HAL_RCC_OscConfig+0x27c>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d8:	f7ff f8a4 	bl	8002a24 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e0:	f7ff f8a0 	bl	8002a24 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e173      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80038f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x234>
 80038fe:	e01b      	b.n	8003938 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003900:	4b09      	ldr	r3, [pc, #36]	; (8003928 <HAL_RCC_OscConfig+0x27c>)
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003906:	f7ff f88d 	bl	8002a24 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390c:	e00e      	b.n	800392c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800390e:	f7ff f889 	bl	8002a24 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d907      	bls.n	800392c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e15c      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
 8003920:	40023800 	.word	0x40023800
 8003924:	42470000 	.word	0x42470000
 8003928:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392c:	4b8a      	ldr	r3, [pc, #552]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 800392e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1ea      	bne.n	800390e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8097 	beq.w	8003a74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003946:	2300      	movs	r3, #0
 8003948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394a:	4b83      	ldr	r3, [pc, #524]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10f      	bne.n	8003976 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	4b7f      	ldr	r3, [pc, #508]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	4a7e      	ldr	r2, [pc, #504]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003964:	6413      	str	r3, [r2, #64]	; 0x40
 8003966:	4b7c      	ldr	r3, [pc, #496]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003976:	4b79      	ldr	r3, [pc, #484]	; (8003b5c <HAL_RCC_OscConfig+0x4b0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d118      	bne.n	80039b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003982:	4b76      	ldr	r3, [pc, #472]	; (8003b5c <HAL_RCC_OscConfig+0x4b0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a75      	ldr	r2, [pc, #468]	; (8003b5c <HAL_RCC_OscConfig+0x4b0>)
 8003988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398e:	f7ff f849 	bl	8002a24 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003996:	f7ff f845 	bl	8002a24 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e118      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a8:	4b6c      	ldr	r3, [pc, #432]	; (8003b5c <HAL_RCC_OscConfig+0x4b0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d106      	bne.n	80039ca <HAL_RCC_OscConfig+0x31e>
 80039bc:	4b66      	ldr	r3, [pc, #408]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	4a65      	ldr	r2, [pc, #404]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	6713      	str	r3, [r2, #112]	; 0x70
 80039c8:	e01c      	b.n	8003a04 <HAL_RCC_OscConfig+0x358>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b05      	cmp	r3, #5
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x340>
 80039d2:	4b61      	ldr	r3, [pc, #388]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	4a60      	ldr	r2, [pc, #384]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039d8:	f043 0304 	orr.w	r3, r3, #4
 80039dc:	6713      	str	r3, [r2, #112]	; 0x70
 80039de:	4b5e      	ldr	r3, [pc, #376]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	4a5d      	ldr	r2, [pc, #372]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6713      	str	r3, [r2, #112]	; 0x70
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0x358>
 80039ec:	4b5a      	ldr	r3, [pc, #360]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	4a59      	ldr	r2, [pc, #356]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039f2:	f023 0301 	bic.w	r3, r3, #1
 80039f6:	6713      	str	r3, [r2, #112]	; 0x70
 80039f8:	4b57      	ldr	r3, [pc, #348]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fc:	4a56      	ldr	r2, [pc, #344]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039fe:	f023 0304 	bic.w	r3, r3, #4
 8003a02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d015      	beq.n	8003a38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0c:	f7ff f80a 	bl	8002a24 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a14:	f7ff f806 	bl	8002a24 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e0d7      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2a:	4b4b      	ldr	r3, [pc, #300]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0ee      	beq.n	8003a14 <HAL_RCC_OscConfig+0x368>
 8003a36:	e014      	b.n	8003a62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fe fff4 	bl	8002a24 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a40:	f7fe fff0 	bl	8002a24 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0c1      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a56:	4b40      	ldr	r3, [pc, #256]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1ee      	bne.n	8003a40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d105      	bne.n	8003a74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a68:	4b3b      	ldr	r3, [pc, #236]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	4a3a      	ldr	r2, [pc, #232]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80ad 	beq.w	8003bd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a7e:	4b36      	ldr	r3, [pc, #216]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d060      	beq.n	8003b4c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d145      	bne.n	8003b1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a92:	4b33      	ldr	r3, [pc, #204]	; (8003b60 <HAL_RCC_OscConfig+0x4b4>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fe ffc4 	bl	8002a24 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa0:	f7fe ffc0 	bl	8002a24 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e093      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab2:	4b29      	ldr	r3, [pc, #164]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69da      	ldr	r2, [r3, #28]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	019b      	lsls	r3, r3, #6
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	085b      	lsrs	r3, r3, #1
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	041b      	lsls	r3, r3, #16
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	061b      	lsls	r3, r3, #24
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	071b      	lsls	r3, r3, #28
 8003aea:	491b      	ldr	r1, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <HAL_RCC_OscConfig+0x4b4>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7fe ff95 	bl	8002a24 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afe:	f7fe ff91 	bl	8002a24 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e064      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b10:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x452>
 8003b1c:	e05c      	b.n	8003bd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <HAL_RCC_OscConfig+0x4b4>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fe ff7e 	bl	8002a24 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fe ff7a 	bl	8002a24 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e04d      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x480>
 8003b4a:	e045      	b.n	8003bd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d107      	bne.n	8003b64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e040      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b64:	4b1f      	ldr	r3, [pc, #124]	; (8003be4 <HAL_RCC_OscConfig+0x538>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d030      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d129      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d122      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b94:	4013      	ands	r3, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d119      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	085b      	lsrs	r3, r3, #1
 8003bac:	3b01      	subs	r3, #1
 8003bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d10f      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d107      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40023800 	.word	0x40023800

08003be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e041      	b.n	8003c7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fe fd6c 	bl	80026ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3304      	adds	r3, #4
 8003c24:	4619      	mov	r1, r3
 8003c26:	4610      	mov	r0, r2
 8003c28:	f000 fc7e 	bl	8004528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d001      	beq.n	8003ca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e04e      	b.n	8003d3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a23      	ldr	r2, [pc, #140]	; (8003d4c <HAL_TIM_Base_Start_IT+0xc4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d022      	beq.n	8003d08 <HAL_TIM_Base_Start_IT+0x80>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cca:	d01d      	beq.n	8003d08 <HAL_TIM_Base_Start_IT+0x80>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1f      	ldr	r2, [pc, #124]	; (8003d50 <HAL_TIM_Base_Start_IT+0xc8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d018      	beq.n	8003d08 <HAL_TIM_Base_Start_IT+0x80>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <HAL_TIM_Base_Start_IT+0xcc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d013      	beq.n	8003d08 <HAL_TIM_Base_Start_IT+0x80>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1c      	ldr	r2, [pc, #112]	; (8003d58 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00e      	beq.n	8003d08 <HAL_TIM_Base_Start_IT+0x80>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1b      	ldr	r2, [pc, #108]	; (8003d5c <HAL_TIM_Base_Start_IT+0xd4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d009      	beq.n	8003d08 <HAL_TIM_Base_Start_IT+0x80>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a19      	ldr	r2, [pc, #100]	; (8003d60 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d004      	beq.n	8003d08 <HAL_TIM_Base_Start_IT+0x80>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a18      	ldr	r2, [pc, #96]	; (8003d64 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d111      	bne.n	8003d2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b06      	cmp	r3, #6
 8003d18:	d010      	beq.n	8003d3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0201 	orr.w	r2, r2, #1
 8003d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2a:	e007      	b.n	8003d3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40000800 	.word	0x40000800
 8003d58:	40000c00 	.word	0x40000c00
 8003d5c:	40010400 	.word	0x40010400
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40001800 	.word	0x40001800

08003d68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e041      	b.n	8003dfe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f839 	bl	8003e06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3304      	adds	r3, #4
 8003da4:	4619      	mov	r1, r3
 8003da6:	4610      	mov	r0, r2
 8003da8:	f000 fbbe 	bl	8004528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d109      	bne.n	8003e40 <HAL_TIM_PWM_Start+0x24>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	bf14      	ite	ne
 8003e38:	2301      	movne	r3, #1
 8003e3a:	2300      	moveq	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	e022      	b.n	8003e86 <HAL_TIM_PWM_Start+0x6a>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d109      	bne.n	8003e5a <HAL_TIM_PWM_Start+0x3e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	bf14      	ite	ne
 8003e52:	2301      	movne	r3, #1
 8003e54:	2300      	moveq	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	e015      	b.n	8003e86 <HAL_TIM_PWM_Start+0x6a>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d109      	bne.n	8003e74 <HAL_TIM_PWM_Start+0x58>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	bf14      	ite	ne
 8003e6c:	2301      	movne	r3, #1
 8003e6e:	2300      	moveq	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	e008      	b.n	8003e86 <HAL_TIM_PWM_Start+0x6a>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e07c      	b.n	8003f88 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d104      	bne.n	8003e9e <HAL_TIM_PWM_Start+0x82>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e9c:	e013      	b.n	8003ec6 <HAL_TIM_PWM_Start+0xaa>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d104      	bne.n	8003eae <HAL_TIM_PWM_Start+0x92>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eac:	e00b      	b.n	8003ec6 <HAL_TIM_PWM_Start+0xaa>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d104      	bne.n	8003ebe <HAL_TIM_PWM_Start+0xa2>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ebc:	e003      	b.n	8003ec6 <HAL_TIM_PWM_Start+0xaa>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	6839      	ldr	r1, [r7, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fe14 	bl	8004afc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a2d      	ldr	r2, [pc, #180]	; (8003f90 <HAL_TIM_PWM_Start+0x174>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <HAL_TIM_PWM_Start+0xcc>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a2c      	ldr	r2, [pc, #176]	; (8003f94 <HAL_TIM_PWM_Start+0x178>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d101      	bne.n	8003eec <HAL_TIM_PWM_Start+0xd0>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <HAL_TIM_PWM_Start+0xd2>
 8003eec:	2300      	movs	r3, #0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d007      	beq.n	8003f02 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a22      	ldr	r2, [pc, #136]	; (8003f90 <HAL_TIM_PWM_Start+0x174>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d022      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x136>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f14:	d01d      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x136>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1f      	ldr	r2, [pc, #124]	; (8003f98 <HAL_TIM_PWM_Start+0x17c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d018      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x136>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1d      	ldr	r2, [pc, #116]	; (8003f9c <HAL_TIM_PWM_Start+0x180>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x136>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <HAL_TIM_PWM_Start+0x184>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00e      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x136>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a16      	ldr	r2, [pc, #88]	; (8003f94 <HAL_TIM_PWM_Start+0x178>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x136>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <HAL_TIM_PWM_Start+0x188>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x136>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a16      	ldr	r2, [pc, #88]	; (8003fa8 <HAL_TIM_PWM_Start+0x18c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d111      	bne.n	8003f76 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b06      	cmp	r3, #6
 8003f62:	d010      	beq.n	8003f86 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f74:	e007      	b.n	8003f86 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0201 	orr.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40010000 	.word	0x40010000
 8003f94:	40010400 	.word	0x40010400
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40000800 	.word	0x40000800
 8003fa0:	40000c00 	.word	0x40000c00
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	40001800 	.word	0x40001800

08003fac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e097      	b.n	80040f0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d106      	bne.n	8003fda <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7fe fbab 	bl	8002730 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ff0:	f023 0307 	bic.w	r3, r3, #7
 8003ff4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	4619      	mov	r1, r3
 8004000:	4610      	mov	r0, r2
 8004002:	f000 fa91 	bl	8004528 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	4313      	orrs	r3, r2
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800404c:	f023 030c 	bic.w	r3, r3, #12
 8004050:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800405c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	4313      	orrs	r3, r2
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	011a      	lsls	r2, r3, #4
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	031b      	lsls	r3, r3, #12
 800407c:	4313      	orrs	r3, r2
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800408a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004092:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	4313      	orrs	r3, r2
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004108:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004110:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004118:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004120:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d110      	bne.n	800414a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d102      	bne.n	8004134 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800412e:	7b7b      	ldrb	r3, [r7, #13]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d001      	beq.n	8004138 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e069      	b.n	800420c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004148:	e031      	b.n	80041ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b04      	cmp	r3, #4
 800414e:	d110      	bne.n	8004172 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004150:	7bbb      	ldrb	r3, [r7, #14]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d102      	bne.n	800415c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004156:	7b3b      	ldrb	r3, [r7, #12]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d001      	beq.n	8004160 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e055      	b.n	800420c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004170:	e01d      	b.n	80041ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d108      	bne.n	800418a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004178:	7bbb      	ldrb	r3, [r7, #14]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d105      	bne.n	800418a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800417e:	7b7b      	ldrb	r3, [r7, #13]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d102      	bne.n	800418a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004184:	7b3b      	ldrb	r3, [r7, #12]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d001      	beq.n	800418e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e03e      	b.n	800420c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2202      	movs	r2, #2
 8004192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2202      	movs	r2, #2
 80041a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2202      	movs	r2, #2
 80041aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <HAL_TIM_Encoder_Start+0xc4>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d008      	beq.n	80041cc <HAL_TIM_Encoder_Start+0xd4>
 80041ba:	e00f      	b.n	80041dc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2201      	movs	r2, #1
 80041c2:	2100      	movs	r1, #0
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 fc99 	bl	8004afc <TIM_CCxChannelCmd>
      break;
 80041ca:	e016      	b.n	80041fa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2201      	movs	r2, #1
 80041d2:	2104      	movs	r1, #4
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 fc91 	bl	8004afc <TIM_CCxChannelCmd>
      break;
 80041da:	e00e      	b.n	80041fa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2201      	movs	r2, #1
 80041e2:	2100      	movs	r1, #0
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 fc89 	bl	8004afc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2201      	movs	r2, #1
 80041f0:	2104      	movs	r1, #4
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fc82 	bl	8004afc <TIM_CCxChannelCmd>
      break;
 80041f8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800422e:	2302      	movs	r3, #2
 8004230:	e0ae      	b.n	8004390 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b0c      	cmp	r3, #12
 800423e:	f200 809f 	bhi.w	8004380 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004242:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004248:	0800427d 	.word	0x0800427d
 800424c:	08004381 	.word	0x08004381
 8004250:	08004381 	.word	0x08004381
 8004254:	08004381 	.word	0x08004381
 8004258:	080042bd 	.word	0x080042bd
 800425c:	08004381 	.word	0x08004381
 8004260:	08004381 	.word	0x08004381
 8004264:	08004381 	.word	0x08004381
 8004268:	080042ff 	.word	0x080042ff
 800426c:	08004381 	.word	0x08004381
 8004270:	08004381 	.word	0x08004381
 8004274:	08004381 	.word	0x08004381
 8004278:	0800433f 	.word	0x0800433f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f9f0 	bl	8004668 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699a      	ldr	r2, [r3, #24]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0208 	orr.w	r2, r2, #8
 8004296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0204 	bic.w	r2, r2, #4
 80042a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6999      	ldr	r1, [r3, #24]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	691a      	ldr	r2, [r3, #16]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	619a      	str	r2, [r3, #24]
      break;
 80042ba:	e064      	b.n	8004386 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68b9      	ldr	r1, [r7, #8]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fa40 	bl	8004748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6999      	ldr	r1, [r3, #24]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	021a      	lsls	r2, r3, #8
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	619a      	str	r2, [r3, #24]
      break;
 80042fc:	e043      	b.n	8004386 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68b9      	ldr	r1, [r7, #8]
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fa95 	bl	8004834 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f042 0208 	orr.w	r2, r2, #8
 8004318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0204 	bic.w	r2, r2, #4
 8004328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69d9      	ldr	r1, [r3, #28]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	61da      	str	r2, [r3, #28]
      break;
 800433c:	e023      	b.n	8004386 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fae9 	bl	800491c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69d9      	ldr	r1, [r3, #28]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	021a      	lsls	r2, r3, #8
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	61da      	str	r2, [r3, #28]
      break;
 800437e:	e002      	b.n	8004386 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	75fb      	strb	r3, [r7, #23]
      break;
 8004384:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800438e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_TIM_ConfigClockSource+0x1c>
 80043b0:	2302      	movs	r3, #2
 80043b2:	e0b4      	b.n	800451e <HAL_TIM_ConfigClockSource+0x186>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ec:	d03e      	beq.n	800446c <HAL_TIM_ConfigClockSource+0xd4>
 80043ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f2:	f200 8087 	bhi.w	8004504 <HAL_TIM_ConfigClockSource+0x16c>
 80043f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fa:	f000 8086 	beq.w	800450a <HAL_TIM_ConfigClockSource+0x172>
 80043fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004402:	d87f      	bhi.n	8004504 <HAL_TIM_ConfigClockSource+0x16c>
 8004404:	2b70      	cmp	r3, #112	; 0x70
 8004406:	d01a      	beq.n	800443e <HAL_TIM_ConfigClockSource+0xa6>
 8004408:	2b70      	cmp	r3, #112	; 0x70
 800440a:	d87b      	bhi.n	8004504 <HAL_TIM_ConfigClockSource+0x16c>
 800440c:	2b60      	cmp	r3, #96	; 0x60
 800440e:	d050      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0x11a>
 8004410:	2b60      	cmp	r3, #96	; 0x60
 8004412:	d877      	bhi.n	8004504 <HAL_TIM_ConfigClockSource+0x16c>
 8004414:	2b50      	cmp	r3, #80	; 0x50
 8004416:	d03c      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0xfa>
 8004418:	2b50      	cmp	r3, #80	; 0x50
 800441a:	d873      	bhi.n	8004504 <HAL_TIM_ConfigClockSource+0x16c>
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d058      	beq.n	80044d2 <HAL_TIM_ConfigClockSource+0x13a>
 8004420:	2b40      	cmp	r3, #64	; 0x40
 8004422:	d86f      	bhi.n	8004504 <HAL_TIM_ConfigClockSource+0x16c>
 8004424:	2b30      	cmp	r3, #48	; 0x30
 8004426:	d064      	beq.n	80044f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004428:	2b30      	cmp	r3, #48	; 0x30
 800442a:	d86b      	bhi.n	8004504 <HAL_TIM_ConfigClockSource+0x16c>
 800442c:	2b20      	cmp	r3, #32
 800442e:	d060      	beq.n	80044f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004430:	2b20      	cmp	r3, #32
 8004432:	d867      	bhi.n	8004504 <HAL_TIM_ConfigClockSource+0x16c>
 8004434:	2b00      	cmp	r3, #0
 8004436:	d05c      	beq.n	80044f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004438:	2b10      	cmp	r3, #16
 800443a:	d05a      	beq.n	80044f2 <HAL_TIM_ConfigClockSource+0x15a>
 800443c:	e062      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	6899      	ldr	r1, [r3, #8]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f000 fb35 	bl	8004abc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004460:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	609a      	str	r2, [r3, #8]
      break;
 800446a:	e04f      	b.n	800450c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6818      	ldr	r0, [r3, #0]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	6899      	ldr	r1, [r3, #8]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f000 fb1e 	bl	8004abc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800448e:	609a      	str	r2, [r3, #8]
      break;
 8004490:	e03c      	b.n	800450c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6859      	ldr	r1, [r3, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	461a      	mov	r2, r3
 80044a0:	f000 fa92 	bl	80049c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2150      	movs	r1, #80	; 0x50
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 faeb 	bl	8004a86 <TIM_ITRx_SetConfig>
      break;
 80044b0:	e02c      	b.n	800450c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	6859      	ldr	r1, [r3, #4]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	461a      	mov	r2, r3
 80044c0:	f000 fab1 	bl	8004a26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2160      	movs	r1, #96	; 0x60
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fadb 	bl	8004a86 <TIM_ITRx_SetConfig>
      break;
 80044d0:	e01c      	b.n	800450c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6859      	ldr	r1, [r3, #4]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	461a      	mov	r2, r3
 80044e0:	f000 fa72 	bl	80049c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2140      	movs	r1, #64	; 0x40
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 facb 	bl	8004a86 <TIM_ITRx_SetConfig>
      break;
 80044f0:	e00c      	b.n	800450c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4619      	mov	r1, r3
 80044fc:	4610      	mov	r0, r2
 80044fe:	f000 fac2 	bl	8004a86 <TIM_ITRx_SetConfig>
      break;
 8004502:	e003      	b.n	800450c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
      break;
 8004508:	e000      	b.n	800450c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800450a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800451c:	7bfb      	ldrb	r3, [r7, #15]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a40      	ldr	r2, [pc, #256]	; (800463c <TIM_Base_SetConfig+0x114>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d013      	beq.n	8004568 <TIM_Base_SetConfig+0x40>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004546:	d00f      	beq.n	8004568 <TIM_Base_SetConfig+0x40>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a3d      	ldr	r2, [pc, #244]	; (8004640 <TIM_Base_SetConfig+0x118>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00b      	beq.n	8004568 <TIM_Base_SetConfig+0x40>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a3c      	ldr	r2, [pc, #240]	; (8004644 <TIM_Base_SetConfig+0x11c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d007      	beq.n	8004568 <TIM_Base_SetConfig+0x40>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a3b      	ldr	r2, [pc, #236]	; (8004648 <TIM_Base_SetConfig+0x120>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d003      	beq.n	8004568 <TIM_Base_SetConfig+0x40>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a3a      	ldr	r2, [pc, #232]	; (800464c <TIM_Base_SetConfig+0x124>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d108      	bne.n	800457a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a2f      	ldr	r2, [pc, #188]	; (800463c <TIM_Base_SetConfig+0x114>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d02b      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004588:	d027      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a2c      	ldr	r2, [pc, #176]	; (8004640 <TIM_Base_SetConfig+0x118>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d023      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a2b      	ldr	r2, [pc, #172]	; (8004644 <TIM_Base_SetConfig+0x11c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d01f      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a2a      	ldr	r2, [pc, #168]	; (8004648 <TIM_Base_SetConfig+0x120>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d01b      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a29      	ldr	r2, [pc, #164]	; (800464c <TIM_Base_SetConfig+0x124>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d017      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a28      	ldr	r2, [pc, #160]	; (8004650 <TIM_Base_SetConfig+0x128>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a27      	ldr	r2, [pc, #156]	; (8004654 <TIM_Base_SetConfig+0x12c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00f      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a26      	ldr	r2, [pc, #152]	; (8004658 <TIM_Base_SetConfig+0x130>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00b      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a25      	ldr	r2, [pc, #148]	; (800465c <TIM_Base_SetConfig+0x134>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d007      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a24      	ldr	r2, [pc, #144]	; (8004660 <TIM_Base_SetConfig+0x138>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d003      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a23      	ldr	r2, [pc, #140]	; (8004664 <TIM_Base_SetConfig+0x13c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d108      	bne.n	80045ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a0a      	ldr	r2, [pc, #40]	; (800463c <TIM_Base_SetConfig+0x114>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d003      	beq.n	8004620 <TIM_Base_SetConfig+0xf8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a0c      	ldr	r2, [pc, #48]	; (800464c <TIM_Base_SetConfig+0x124>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d103      	bne.n	8004628 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	615a      	str	r2, [r3, #20]
}
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40010000 	.word	0x40010000
 8004640:	40000400 	.word	0x40000400
 8004644:	40000800 	.word	0x40000800
 8004648:	40000c00 	.word	0x40000c00
 800464c:	40010400 	.word	0x40010400
 8004650:	40014000 	.word	0x40014000
 8004654:	40014400 	.word	0x40014400
 8004658:	40014800 	.word	0x40014800
 800465c:	40001800 	.word	0x40001800
 8004660:	40001c00 	.word	0x40001c00
 8004664:	40002000 	.word	0x40002000

08004668 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	f023 0201 	bic.w	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0303 	bic.w	r3, r3, #3
 800469e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f023 0302 	bic.w	r3, r3, #2
 80046b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a20      	ldr	r2, [pc, #128]	; (8004740 <TIM_OC1_SetConfig+0xd8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d003      	beq.n	80046cc <TIM_OC1_SetConfig+0x64>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a1f      	ldr	r2, [pc, #124]	; (8004744 <TIM_OC1_SetConfig+0xdc>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d10c      	bne.n	80046e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f023 0308 	bic.w	r3, r3, #8
 80046d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f023 0304 	bic.w	r3, r3, #4
 80046e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a15      	ldr	r2, [pc, #84]	; (8004740 <TIM_OC1_SetConfig+0xd8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d003      	beq.n	80046f6 <TIM_OC1_SetConfig+0x8e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a14      	ldr	r2, [pc, #80]	; (8004744 <TIM_OC1_SetConfig+0xdc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d111      	bne.n	800471a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	621a      	str	r2, [r3, #32]
}
 8004734:	bf00      	nop
 8004736:	371c      	adds	r7, #28
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	40010000 	.word	0x40010000
 8004744:	40010400 	.word	0x40010400

08004748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f023 0210 	bic.w	r2, r3, #16
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f023 0320 	bic.w	r3, r3, #32
 8004792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a22      	ldr	r2, [pc, #136]	; (800482c <TIM_OC2_SetConfig+0xe4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d003      	beq.n	80047b0 <TIM_OC2_SetConfig+0x68>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a21      	ldr	r2, [pc, #132]	; (8004830 <TIM_OC2_SetConfig+0xe8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d10d      	bne.n	80047cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a17      	ldr	r2, [pc, #92]	; (800482c <TIM_OC2_SetConfig+0xe4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_OC2_SetConfig+0x94>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a16      	ldr	r2, [pc, #88]	; (8004830 <TIM_OC2_SetConfig+0xe8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d113      	bne.n	8004804 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	621a      	str	r2, [r3, #32]
}
 800481e:	bf00      	nop
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40010000 	.word	0x40010000
 8004830:	40010400 	.word	0x40010400

08004834 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0303 	bic.w	r3, r3, #3
 800486a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800487c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	021b      	lsls	r3, r3, #8
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a21      	ldr	r2, [pc, #132]	; (8004914 <TIM_OC3_SetConfig+0xe0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d003      	beq.n	800489a <TIM_OC3_SetConfig+0x66>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a20      	ldr	r2, [pc, #128]	; (8004918 <TIM_OC3_SetConfig+0xe4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d10d      	bne.n	80048b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	021b      	lsls	r3, r3, #8
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a16      	ldr	r2, [pc, #88]	; (8004914 <TIM_OC3_SetConfig+0xe0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d003      	beq.n	80048c6 <TIM_OC3_SetConfig+0x92>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a15      	ldr	r2, [pc, #84]	; (8004918 <TIM_OC3_SetConfig+0xe4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d113      	bne.n	80048ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	621a      	str	r2, [r3, #32]
}
 8004908:	bf00      	nop
 800490a:	371c      	adds	r7, #28
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	40010000 	.word	0x40010000
 8004918:	40010400 	.word	0x40010400

0800491c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	021b      	lsls	r3, r3, #8
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	031b      	lsls	r3, r3, #12
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a12      	ldr	r2, [pc, #72]	; (80049c0 <TIM_OC4_SetConfig+0xa4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d003      	beq.n	8004984 <TIM_OC4_SetConfig+0x68>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a11      	ldr	r2, [pc, #68]	; (80049c4 <TIM_OC4_SetConfig+0xa8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d109      	bne.n	8004998 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800498a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	019b      	lsls	r3, r3, #6
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	621a      	str	r2, [r3, #32]
}
 80049b2:	bf00      	nop
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40010000 	.word	0x40010000
 80049c4:	40010400 	.word	0x40010400

080049c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	f023 0201 	bic.w	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f023 030a 	bic.w	r3, r3, #10
 8004a04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	621a      	str	r2, [r3, #32]
}
 8004a1a:	bf00      	nop
 8004a1c:	371c      	adds	r7, #28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b087      	sub	sp, #28
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	f023 0210 	bic.w	r2, r3, #16
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	031b      	lsls	r3, r3, #12
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	621a      	str	r2, [r3, #32]
}
 8004a7a:	bf00      	nop
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f043 0307 	orr.w	r3, r3, #7
 8004aa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	609a      	str	r2, [r3, #8]
}
 8004ab0:	bf00      	nop
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ad6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	021a      	lsls	r2, r3, #8
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	609a      	str	r2, [r3, #8]
}
 8004af0:	bf00      	nop
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	2201      	movs	r2, #1
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a1a      	ldr	r2, [r3, #32]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	401a      	ands	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1a      	ldr	r2, [r3, #32]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	fa01 f303 	lsl.w	r3, r1, r3
 8004b34:	431a      	orrs	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
	...

08004b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e05a      	b.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a21      	ldr	r2, [pc, #132]	; (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d022      	beq.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bac:	d01d      	beq.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a1d      	ldr	r2, [pc, #116]	; (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d018      	beq.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a1b      	ldr	r2, [pc, #108]	; (8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d013      	beq.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1a      	ldr	r2, [pc, #104]	; (8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00e      	beq.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a18      	ldr	r2, [pc, #96]	; (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d009      	beq.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a17      	ldr	r2, [pc, #92]	; (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d004      	beq.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a15      	ldr	r2, [pc, #84]	; (8004c3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d10c      	bne.n	8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	40010000 	.word	0x40010000
 8004c28:	40000400 	.word	0x40000400
 8004c2c:	40000800 	.word	0x40000800
 8004c30:	40000c00 	.word	0x40000c00
 8004c34:	40010400 	.word	0x40010400
 8004c38:	40014000 	.word	0x40014000
 8004c3c:	40001800 	.word	0x40001800

08004c40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e03d      	b.n	8004cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e03f      	b.n	8004d76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fd fdee 	bl	80028ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2224      	movs	r2, #36	; 0x24
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fddb 	bl	80058e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b08a      	sub	sp, #40	; 0x28
 8004d82:	af02      	add	r7, sp, #8
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	603b      	str	r3, [r7, #0]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	d17c      	bne.n	8004e98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <HAL_UART_Transmit+0x2c>
 8004da4:	88fb      	ldrh	r3, [r7, #6]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e075      	b.n	8004e9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_UART_Transmit+0x3e>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e06e      	b.n	8004e9a <HAL_UART_Transmit+0x11c>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2221      	movs	r2, #33	; 0x21
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dd2:	f7fd fe27 	bl	8002a24 <HAL_GetTick>
 8004dd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	88fa      	ldrh	r2, [r7, #6]
 8004ddc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	88fa      	ldrh	r2, [r7, #6]
 8004de2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dec:	d108      	bne.n	8004e00 <HAL_UART_Transmit+0x82>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d104      	bne.n	8004e00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	e003      	b.n	8004e08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e10:	e02a      	b.n	8004e68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2180      	movs	r1, #128	; 0x80
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 fb1f 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e036      	b.n	8004e9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10b      	bne.n	8004e4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	3302      	adds	r3, #2
 8004e46:	61bb      	str	r3, [r7, #24]
 8004e48:	e007      	b.n	8004e5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	781a      	ldrb	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	3301      	adds	r3, #1
 8004e58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1cf      	bne.n	8004e12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2140      	movs	r1, #64	; 0x40
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 faef 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e006      	b.n	8004e9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	e000      	b.n	8004e9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e98:	2302      	movs	r3, #2
  }
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3720      	adds	r7, #32
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	4613      	mov	r3, r2
 8004eae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d11d      	bne.n	8004ef8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <HAL_UART_Receive_IT+0x26>
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e016      	b.n	8004efa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_UART_Receive_IT+0x38>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e00f      	b.n	8004efa <HAL_UART_Receive_IT+0x58>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ee8:	88fb      	ldrh	r3, [r7, #6]
 8004eea:	461a      	mov	r2, r3
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fb24 	bl	800553c <UART_Start_Receive_IT>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	e000      	b.n	8004efa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ef8:	2302      	movs	r3, #2
  }
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b0ba      	sub	sp, #232	; 0xe8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10f      	bne.n	8004f6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d009      	beq.n	8004f6a <HAL_UART_IRQHandler+0x66>
 8004f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fc03 	bl	800576e <UART_Receive_IT>
      return;
 8004f68:	e256      	b.n	8005418 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 80de 	beq.w	8005130 <HAL_UART_IRQHandler+0x22c>
 8004f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80d1 	beq.w	8005130 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00b      	beq.n	8004fb2 <HAL_UART_IRQHandler+0xae>
 8004f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d005      	beq.n	8004fb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	f043 0201 	orr.w	r2, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00b      	beq.n	8004fd6 <HAL_UART_IRQHandler+0xd2>
 8004fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d005      	beq.n	8004fd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	f043 0202 	orr.w	r2, r3, #2
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00b      	beq.n	8004ffa <HAL_UART_IRQHandler+0xf6>
 8004fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	f043 0204 	orr.w	r2, r3, #4
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	2b00      	cmp	r3, #0
 8005004:	d011      	beq.n	800502a <HAL_UART_IRQHandler+0x126>
 8005006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b00      	cmp	r3, #0
 8005010:	d105      	bne.n	800501e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	f043 0208 	orr.w	r2, r3, #8
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 81ed 	beq.w	800540e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b00      	cmp	r3, #0
 800503e:	d008      	beq.n	8005052 <HAL_UART_IRQHandler+0x14e>
 8005040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fb8e 	bl	800576e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505c:	2b40      	cmp	r3, #64	; 0x40
 800505e:	bf0c      	ite	eq
 8005060:	2301      	moveq	r3, #1
 8005062:	2300      	movne	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d103      	bne.n	800507e <HAL_UART_IRQHandler+0x17a>
 8005076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800507a:	2b00      	cmp	r3, #0
 800507c:	d04f      	beq.n	800511e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fa96 	bl	80055b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508e:	2b40      	cmp	r3, #64	; 0x40
 8005090:	d141      	bne.n	8005116 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3314      	adds	r3, #20
 8005098:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3314      	adds	r3, #20
 80050ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050ce:	e841 2300 	strex	r3, r2, [r1]
 80050d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1d9      	bne.n	8005092 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d013      	beq.n	800510e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ea:	4a7d      	ldr	r2, [pc, #500]	; (80052e0 <HAL_UART_IRQHandler+0x3dc>)
 80050ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fd fdf4 	bl	8002ce0 <HAL_DMA_Abort_IT>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d016      	beq.n	800512c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005108:	4610      	mov	r0, r2
 800510a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800510c:	e00e      	b.n	800512c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f990 	bl	8005434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005114:	e00a      	b.n	800512c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f98c 	bl	8005434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511c:	e006      	b.n	800512c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f988 	bl	8005434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800512a:	e170      	b.n	800540e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512c:	bf00      	nop
    return;
 800512e:	e16e      	b.n	800540e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005134:	2b01      	cmp	r3, #1
 8005136:	f040 814a 	bne.w	80053ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800513a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 8143 	beq.w	80053ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 813c 	beq.w	80053ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005156:	2300      	movs	r3, #0
 8005158:	60bb      	str	r3, [r7, #8]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60bb      	str	r3, [r7, #8]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	f040 80b4 	bne.w	80052e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005188:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 8140 	beq.w	8005412 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800519a:	429a      	cmp	r2, r3
 800519c:	f080 8139 	bcs.w	8005412 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b2:	f000 8088 	beq.w	80052c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	330c      	adds	r3, #12
 80051bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051c4:	e853 3f00 	ldrex	r3, [r3]
 80051c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	330c      	adds	r3, #12
 80051de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1d9      	bne.n	80051b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3314      	adds	r3, #20
 8005208:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005214:	f023 0301 	bic.w	r3, r3, #1
 8005218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3314      	adds	r3, #20
 8005222:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005226:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800522a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800522e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e1      	bne.n	8005202 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3314      	adds	r3, #20
 8005244:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800524e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3314      	adds	r3, #20
 800525e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005262:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005264:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005268:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1e3      	bne.n	800523e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	330c      	adds	r3, #12
 800528a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005296:	f023 0310 	bic.w	r3, r3, #16
 800529a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	330c      	adds	r3, #12
 80052a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80052aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052b0:	e841 2300 	strex	r3, r2, [r1]
 80052b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e3      	bne.n	8005284 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fd fc9d 	bl	8002c00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	4619      	mov	r1, r3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f8b6 	bl	8005448 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052dc:	e099      	b.n	8005412 <HAL_UART_IRQHandler+0x50e>
 80052de:	bf00      	nop
 80052e0:	08005677 	.word	0x08005677
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 808b 	beq.w	8005416 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005300:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 8086 	beq.w	8005416 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	330c      	adds	r3, #12
 8005310:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800531a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005320:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	330c      	adds	r3, #12
 800532a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800532e:	647a      	str	r2, [r7, #68]	; 0x44
 8005330:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800533c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e3      	bne.n	800530a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3314      	adds	r3, #20
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	623b      	str	r3, [r7, #32]
   return(result);
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3314      	adds	r3, #20
 8005362:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005366:	633a      	str	r2, [r7, #48]	; 0x30
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800536c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1e3      	bne.n	8005342 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	330c      	adds	r3, #12
 800538e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	60fb      	str	r3, [r7, #12]
   return(result);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0310 	bic.w	r3, r3, #16
 800539e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	330c      	adds	r3, #12
 80053a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80053ac:	61fa      	str	r2, [r7, #28]
 80053ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	69b9      	ldr	r1, [r7, #24]
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	617b      	str	r3, [r7, #20]
   return(result);
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e3      	bne.n	8005388 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053c4:	4619      	mov	r1, r3
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f83e 	bl	8005448 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053cc:	e023      	b.n	8005416 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <HAL_UART_IRQHandler+0x4ea>
 80053da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f959 	bl	800569e <UART_Transmit_IT>
    return;
 80053ec:	e014      	b.n	8005418 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00e      	beq.n	8005418 <HAL_UART_IRQHandler+0x514>
 80053fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d008      	beq.n	8005418 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f999 	bl	800573e <UART_EndTransmit_IT>
    return;
 800540c:	e004      	b.n	8005418 <HAL_UART_IRQHandler+0x514>
    return;
 800540e:	bf00      	nop
 8005410:	e002      	b.n	8005418 <HAL_UART_IRQHandler+0x514>
      return;
 8005412:	bf00      	nop
 8005414:	e000      	b.n	8005418 <HAL_UART_IRQHandler+0x514>
      return;
 8005416:	bf00      	nop
  }
}
 8005418:	37e8      	adds	r7, #232	; 0xe8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop

08005420 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b090      	sub	sp, #64	; 0x40
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	4613      	mov	r3, r2
 800546e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005470:	e050      	b.n	8005514 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d04c      	beq.n	8005514 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800547a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800547c:	2b00      	cmp	r3, #0
 800547e:	d007      	beq.n	8005490 <UART_WaitOnFlagUntilTimeout+0x30>
 8005480:	f7fd fad0 	bl	8002a24 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800548c:	429a      	cmp	r2, r3
 800548e:	d241      	bcs.n	8005514 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	330c      	adds	r3, #12
 8005496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	e853 3f00 	ldrex	r3, [r3]
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	330c      	adds	r3, #12
 80054ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054b0:	637a      	str	r2, [r7, #52]	; 0x34
 80054b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054b8:	e841 2300 	strex	r3, r2, [r1]
 80054bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e5      	bne.n	8005490 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3314      	adds	r3, #20
 80054ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	e853 3f00 	ldrex	r3, [r3]
 80054d2:	613b      	str	r3, [r7, #16]
   return(result);
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f023 0301 	bic.w	r3, r3, #1
 80054da:	63bb      	str	r3, [r7, #56]	; 0x38
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3314      	adds	r3, #20
 80054e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054e4:	623a      	str	r2, [r7, #32]
 80054e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e8:	69f9      	ldr	r1, [r7, #28]
 80054ea:	6a3a      	ldr	r2, [r7, #32]
 80054ec:	e841 2300 	strex	r3, r2, [r1]
 80054f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1e5      	bne.n	80054c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e00f      	b.n	8005534 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	4013      	ands	r3, r2
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	429a      	cmp	r2, r3
 8005522:	bf0c      	ite	eq
 8005524:	2301      	moveq	r3, #1
 8005526:	2300      	movne	r3, #0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	429a      	cmp	r2, r3
 8005530:	d09f      	beq.n	8005472 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3740      	adds	r7, #64	; 0x40
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	88fa      	ldrh	r2, [r7, #6]
 800555a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2222      	movs	r2, #34	; 0x22
 8005566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005580:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695a      	ldr	r2, [r3, #20]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f042 0201 	orr.w	r2, r2, #1
 8005590:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0220 	orr.w	r2, r2, #32
 80055a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b095      	sub	sp, #84	; 0x54
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	330c      	adds	r3, #12
 80055be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	330c      	adds	r3, #12
 80055d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055d8:	643a      	str	r2, [r7, #64]	; 0x40
 80055da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e5      	bne.n	80055b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3314      	adds	r3, #20
 80055f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f023 0301 	bic.w	r3, r3, #1
 8005602:	64bb      	str	r3, [r7, #72]	; 0x48
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3314      	adds	r3, #20
 800560a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800560c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800560e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e5      	bne.n	80055ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	2b01      	cmp	r3, #1
 8005626:	d119      	bne.n	800565c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	330c      	adds	r3, #12
 800562e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	60bb      	str	r3, [r7, #8]
   return(result);
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f023 0310 	bic.w	r3, r3, #16
 800563e:	647b      	str	r3, [r7, #68]	; 0x44
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	330c      	adds	r3, #12
 8005646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005648:	61ba      	str	r2, [r7, #24]
 800564a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6979      	ldr	r1, [r7, #20]
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	613b      	str	r3, [r7, #16]
   return(result);
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e5      	bne.n	8005628 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	631a      	str	r2, [r3, #48]	; 0x30
}
 800566a:	bf00      	nop
 800566c:	3754      	adds	r7, #84	; 0x54
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f7ff fecf 	bl	8005434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b21      	cmp	r3, #33	; 0x21
 80056b0:	d13e      	bne.n	8005730 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ba:	d114      	bne.n	80056e6 <UART_Transmit_IT+0x48>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d110      	bne.n	80056e6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	1c9a      	adds	r2, r3, #2
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	621a      	str	r2, [r3, #32]
 80056e4:	e008      	b.n	80056f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	1c59      	adds	r1, r3, #1
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6211      	str	r1, [r2, #32]
 80056f0:	781a      	ldrb	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	3b01      	subs	r3, #1
 8005700:	b29b      	uxth	r3, r3
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	4619      	mov	r1, r3
 8005706:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10f      	bne.n	800572c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800571a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800572a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	e000      	b.n	8005732 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005730:	2302      	movs	r3, #2
  }
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b082      	sub	sp, #8
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005754:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff fe5e 	bl	8005420 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b08c      	sub	sp, #48	; 0x30
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b22      	cmp	r3, #34	; 0x22
 8005780:	f040 80ab 	bne.w	80058da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578c:	d117      	bne.n	80057be <UART_Receive_IT+0x50>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d113      	bne.n	80057be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005796:	2300      	movs	r3, #0
 8005798:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	1c9a      	adds	r2, r3, #2
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	629a      	str	r2, [r3, #40]	; 0x28
 80057bc:	e026      	b.n	800580c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80057c4:	2300      	movs	r3, #0
 80057c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d0:	d007      	beq.n	80057e2 <UART_Receive_IT+0x74>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10a      	bne.n	80057f0 <UART_Receive_IT+0x82>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	e008      	b.n	8005802 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005800:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29b      	uxth	r3, r3
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	4619      	mov	r1, r3
 800581a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800581c:	2b00      	cmp	r3, #0
 800581e:	d15a      	bne.n	80058d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0220 	bic.w	r2, r2, #32
 800582e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800583e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695a      	ldr	r2, [r3, #20]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0201 	bic.w	r2, r2, #1
 800584e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585c:	2b01      	cmp	r3, #1
 800585e:	d135      	bne.n	80058cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	330c      	adds	r3, #12
 800586c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	613b      	str	r3, [r7, #16]
   return(result);
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	f023 0310 	bic.w	r3, r3, #16
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	330c      	adds	r3, #12
 8005884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005886:	623a      	str	r2, [r7, #32]
 8005888:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	69f9      	ldr	r1, [r7, #28]
 800588c:	6a3a      	ldr	r2, [r7, #32]
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	61bb      	str	r3, [r7, #24]
   return(result);
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e5      	bne.n	8005866 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0310 	and.w	r3, r3, #16
 80058a4:	2b10      	cmp	r3, #16
 80058a6:	d10a      	bne.n	80058be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058a8:	2300      	movs	r3, #0
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff fdbf 	bl	8005448 <HAL_UARTEx_RxEventCallback>
 80058ca:	e002      	b.n	80058d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7fc fc05 	bl	80020dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	e002      	b.n	80058dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	e000      	b.n	80058dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80058da:	2302      	movs	r3, #2
  }
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3730      	adds	r7, #48	; 0x30
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e8:	b09f      	sub	sp, #124	; 0x7c
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fa:	68d9      	ldr	r1, [r3, #12]
 80058fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	ea40 0301 	orr.w	r3, r0, r1
 8005904:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005908:	689a      	ldr	r2, [r3, #8]
 800590a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	431a      	orrs	r2, r3
 8005910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	431a      	orrs	r2, r3
 8005916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	4313      	orrs	r3, r2
 800591c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800591e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005928:	f021 010c 	bic.w	r1, r1, #12
 800592c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005932:	430b      	orrs	r3, r1
 8005934:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005942:	6999      	ldr	r1, [r3, #24]
 8005944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	ea40 0301 	orr.w	r3, r0, r1
 800594c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800594e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4bc5      	ldr	r3, [pc, #788]	; (8005c68 <UART_SetConfig+0x384>)
 8005954:	429a      	cmp	r2, r3
 8005956:	d004      	beq.n	8005962 <UART_SetConfig+0x7e>
 8005958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	4bc3      	ldr	r3, [pc, #780]	; (8005c6c <UART_SetConfig+0x388>)
 800595e:	429a      	cmp	r2, r3
 8005960:	d103      	bne.n	800596a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005962:	f7fd fcab 	bl	80032bc <HAL_RCC_GetPCLK2Freq>
 8005966:	6778      	str	r0, [r7, #116]	; 0x74
 8005968:	e002      	b.n	8005970 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800596a:	f7fd fc93 	bl	8003294 <HAL_RCC_GetPCLK1Freq>
 800596e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005978:	f040 80b6 	bne.w	8005ae8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800597c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800597e:	461c      	mov	r4, r3
 8005980:	f04f 0500 	mov.w	r5, #0
 8005984:	4622      	mov	r2, r4
 8005986:	462b      	mov	r3, r5
 8005988:	1891      	adds	r1, r2, r2
 800598a:	6439      	str	r1, [r7, #64]	; 0x40
 800598c:	415b      	adcs	r3, r3
 800598e:	647b      	str	r3, [r7, #68]	; 0x44
 8005990:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005994:	1912      	adds	r2, r2, r4
 8005996:	eb45 0303 	adc.w	r3, r5, r3
 800599a:	f04f 0000 	mov.w	r0, #0
 800599e:	f04f 0100 	mov.w	r1, #0
 80059a2:	00d9      	lsls	r1, r3, #3
 80059a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059a8:	00d0      	lsls	r0, r2, #3
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	1911      	adds	r1, r2, r4
 80059b0:	6639      	str	r1, [r7, #96]	; 0x60
 80059b2:	416b      	adcs	r3, r5
 80059b4:	667b      	str	r3, [r7, #100]	; 0x64
 80059b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	461a      	mov	r2, r3
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	1891      	adds	r1, r2, r2
 80059c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80059c4:	415b      	adcs	r3, r3
 80059c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80059d0:	f7fb f98a 	bl	8000ce8 <__aeabi_uldivmod>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4ba5      	ldr	r3, [pc, #660]	; (8005c70 <UART_SetConfig+0x38c>)
 80059da:	fba3 2302 	umull	r2, r3, r3, r2
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	011e      	lsls	r6, r3, #4
 80059e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e4:	461c      	mov	r4, r3
 80059e6:	f04f 0500 	mov.w	r5, #0
 80059ea:	4622      	mov	r2, r4
 80059ec:	462b      	mov	r3, r5
 80059ee:	1891      	adds	r1, r2, r2
 80059f0:	6339      	str	r1, [r7, #48]	; 0x30
 80059f2:	415b      	adcs	r3, r3
 80059f4:	637b      	str	r3, [r7, #52]	; 0x34
 80059f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80059fa:	1912      	adds	r2, r2, r4
 80059fc:	eb45 0303 	adc.w	r3, r5, r3
 8005a00:	f04f 0000 	mov.w	r0, #0
 8005a04:	f04f 0100 	mov.w	r1, #0
 8005a08:	00d9      	lsls	r1, r3, #3
 8005a0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a0e:	00d0      	lsls	r0, r2, #3
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	1911      	adds	r1, r2, r4
 8005a16:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a18:	416b      	adcs	r3, r5
 8005a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	461a      	mov	r2, r3
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	1891      	adds	r1, r2, r2
 8005a28:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a2a:	415b      	adcs	r3, r3
 8005a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a32:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005a36:	f7fb f957 	bl	8000ce8 <__aeabi_uldivmod>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4b8c      	ldr	r3, [pc, #560]	; (8005c70 <UART_SetConfig+0x38c>)
 8005a40:	fba3 1302 	umull	r1, r3, r3, r2
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	2164      	movs	r1, #100	; 0x64
 8005a48:	fb01 f303 	mul.w	r3, r1, r3
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	3332      	adds	r3, #50	; 0x32
 8005a52:	4a87      	ldr	r2, [pc, #540]	; (8005c70 <UART_SetConfig+0x38c>)
 8005a54:	fba2 2303 	umull	r2, r3, r2, r3
 8005a58:	095b      	lsrs	r3, r3, #5
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a60:	441e      	add	r6, r3
 8005a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a64:	4618      	mov	r0, r3
 8005a66:	f04f 0100 	mov.w	r1, #0
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	1894      	adds	r4, r2, r2
 8005a70:	623c      	str	r4, [r7, #32]
 8005a72:	415b      	adcs	r3, r3
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
 8005a76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a7a:	1812      	adds	r2, r2, r0
 8005a7c:	eb41 0303 	adc.w	r3, r1, r3
 8005a80:	f04f 0400 	mov.w	r4, #0
 8005a84:	f04f 0500 	mov.w	r5, #0
 8005a88:	00dd      	lsls	r5, r3, #3
 8005a8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a8e:	00d4      	lsls	r4, r2, #3
 8005a90:	4622      	mov	r2, r4
 8005a92:	462b      	mov	r3, r5
 8005a94:	1814      	adds	r4, r2, r0
 8005a96:	653c      	str	r4, [r7, #80]	; 0x50
 8005a98:	414b      	adcs	r3, r1
 8005a9a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f04f 0300 	mov.w	r3, #0
 8005aa6:	1891      	adds	r1, r2, r2
 8005aa8:	61b9      	str	r1, [r7, #24]
 8005aaa:	415b      	adcs	r3, r3
 8005aac:	61fb      	str	r3, [r7, #28]
 8005aae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ab2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ab6:	f7fb f917 	bl	8000ce8 <__aeabi_uldivmod>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4b6c      	ldr	r3, [pc, #432]	; (8005c70 <UART_SetConfig+0x38c>)
 8005ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ac4:	095b      	lsrs	r3, r3, #5
 8005ac6:	2164      	movs	r1, #100	; 0x64
 8005ac8:	fb01 f303 	mul.w	r3, r1, r3
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	3332      	adds	r3, #50	; 0x32
 8005ad2:	4a67      	ldr	r2, [pc, #412]	; (8005c70 <UART_SetConfig+0x38c>)
 8005ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	f003 0207 	and.w	r2, r3, #7
 8005ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4432      	add	r2, r6
 8005ae4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ae6:	e0b9      	b.n	8005c5c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aea:	461c      	mov	r4, r3
 8005aec:	f04f 0500 	mov.w	r5, #0
 8005af0:	4622      	mov	r2, r4
 8005af2:	462b      	mov	r3, r5
 8005af4:	1891      	adds	r1, r2, r2
 8005af6:	6139      	str	r1, [r7, #16]
 8005af8:	415b      	adcs	r3, r3
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005b00:	1912      	adds	r2, r2, r4
 8005b02:	eb45 0303 	adc.w	r3, r5, r3
 8005b06:	f04f 0000 	mov.w	r0, #0
 8005b0a:	f04f 0100 	mov.w	r1, #0
 8005b0e:	00d9      	lsls	r1, r3, #3
 8005b10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b14:	00d0      	lsls	r0, r2, #3
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	eb12 0804 	adds.w	r8, r2, r4
 8005b1e:	eb43 0905 	adc.w	r9, r3, r5
 8005b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f04f 0100 	mov.w	r1, #0
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	f04f 0300 	mov.w	r3, #0
 8005b34:	008b      	lsls	r3, r1, #2
 8005b36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b3a:	0082      	lsls	r2, r0, #2
 8005b3c:	4640      	mov	r0, r8
 8005b3e:	4649      	mov	r1, r9
 8005b40:	f7fb f8d2 	bl	8000ce8 <__aeabi_uldivmod>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4b49      	ldr	r3, [pc, #292]	; (8005c70 <UART_SetConfig+0x38c>)
 8005b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	011e      	lsls	r6, r3, #4
 8005b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b54:	4618      	mov	r0, r3
 8005b56:	f04f 0100 	mov.w	r1, #0
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	1894      	adds	r4, r2, r2
 8005b60:	60bc      	str	r4, [r7, #8]
 8005b62:	415b      	adcs	r3, r3
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b6a:	1812      	adds	r2, r2, r0
 8005b6c:	eb41 0303 	adc.w	r3, r1, r3
 8005b70:	f04f 0400 	mov.w	r4, #0
 8005b74:	f04f 0500 	mov.w	r5, #0
 8005b78:	00dd      	lsls	r5, r3, #3
 8005b7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b7e:	00d4      	lsls	r4, r2, #3
 8005b80:	4622      	mov	r2, r4
 8005b82:	462b      	mov	r3, r5
 8005b84:	1814      	adds	r4, r2, r0
 8005b86:	64bc      	str	r4, [r7, #72]	; 0x48
 8005b88:	414b      	adcs	r3, r1
 8005b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f04f 0100 	mov.w	r1, #0
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	008b      	lsls	r3, r1, #2
 8005ba0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ba4:	0082      	lsls	r2, r0, #2
 8005ba6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005baa:	f7fb f89d 	bl	8000ce8 <__aeabi_uldivmod>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4b2f      	ldr	r3, [pc, #188]	; (8005c70 <UART_SetConfig+0x38c>)
 8005bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	2164      	movs	r1, #100	; 0x64
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	3332      	adds	r3, #50	; 0x32
 8005bc6:	4a2a      	ldr	r2, [pc, #168]	; (8005c70 <UART_SetConfig+0x38c>)
 8005bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bd2:	441e      	add	r6, r3
 8005bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f04f 0100 	mov.w	r1, #0
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	1894      	adds	r4, r2, r2
 8005be2:	603c      	str	r4, [r7, #0]
 8005be4:	415b      	adcs	r3, r3
 8005be6:	607b      	str	r3, [r7, #4]
 8005be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bec:	1812      	adds	r2, r2, r0
 8005bee:	eb41 0303 	adc.w	r3, r1, r3
 8005bf2:	f04f 0400 	mov.w	r4, #0
 8005bf6:	f04f 0500 	mov.w	r5, #0
 8005bfa:	00dd      	lsls	r5, r3, #3
 8005bfc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c00:	00d4      	lsls	r4, r2, #3
 8005c02:	4622      	mov	r2, r4
 8005c04:	462b      	mov	r3, r5
 8005c06:	eb12 0a00 	adds.w	sl, r2, r0
 8005c0a:	eb43 0b01 	adc.w	fp, r3, r1
 8005c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f04f 0100 	mov.w	r1, #0
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	008b      	lsls	r3, r1, #2
 8005c22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c26:	0082      	lsls	r2, r0, #2
 8005c28:	4650      	mov	r0, sl
 8005c2a:	4659      	mov	r1, fp
 8005c2c:	f7fb f85c 	bl	8000ce8 <__aeabi_uldivmod>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	4b0e      	ldr	r3, [pc, #56]	; (8005c70 <UART_SetConfig+0x38c>)
 8005c36:	fba3 1302 	umull	r1, r3, r3, r2
 8005c3a:	095b      	lsrs	r3, r3, #5
 8005c3c:	2164      	movs	r1, #100	; 0x64
 8005c3e:	fb01 f303 	mul.w	r3, r1, r3
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	011b      	lsls	r3, r3, #4
 8005c46:	3332      	adds	r3, #50	; 0x32
 8005c48:	4a09      	ldr	r2, [pc, #36]	; (8005c70 <UART_SetConfig+0x38c>)
 8005c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	f003 020f 	and.w	r2, r3, #15
 8005c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4432      	add	r2, r6
 8005c5a:	609a      	str	r2, [r3, #8]
}
 8005c5c:	bf00      	nop
 8005c5e:	377c      	adds	r7, #124	; 0x7c
 8005c60:	46bd      	mov	sp, r7
 8005c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c66:	bf00      	nop
 8005c68:	40011000 	.word	0x40011000
 8005c6c:	40011400 	.word	0x40011400
 8005c70:	51eb851f 	.word	0x51eb851f

08005c74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c86:	2b84      	cmp	r3, #132	; 0x84
 8005c88:	d005      	beq.n	8005c96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005c8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4413      	add	r3, r2
 8005c92:	3303      	adds	r3, #3
 8005c94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005c96:	68fb      	ldr	r3, [r7, #12]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005ca8:	f000 fe2a 	bl	8006900 <vTaskStartScheduler>
  
  return osOK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cb4:	b089      	sub	sp, #36	; 0x24
 8005cb6:	af04      	add	r7, sp, #16
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d020      	beq.n	8005d06 <osThreadCreate+0x54>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01c      	beq.n	8005d06 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685c      	ldr	r4, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681d      	ldr	r5, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691e      	ldr	r6, [r3, #16]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff ffc8 	bl	8005c74 <makeFreeRtosPriority>
 8005ce4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005cee:	9202      	str	r2, [sp, #8]
 8005cf0:	9301      	str	r3, [sp, #4]
 8005cf2:	9100      	str	r1, [sp, #0]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	4632      	mov	r2, r6
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f000 fc22 	bl	8006544 <xTaskCreateStatic>
 8005d00:	4603      	mov	r3, r0
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	e01c      	b.n	8005d40 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685c      	ldr	r4, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d12:	b29e      	uxth	r6, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff ffaa 	bl	8005c74 <makeFreeRtosPriority>
 8005d20:	4602      	mov	r2, r0
 8005d22:	f107 030c 	add.w	r3, r7, #12
 8005d26:	9301      	str	r3, [sp, #4]
 8005d28:	9200      	str	r2, [sp, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	4632      	mov	r2, r6
 8005d2e:	4629      	mov	r1, r5
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 fc64 	bl	80065fe <xTaskCreate>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d001      	beq.n	8005d40 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e000      	b.n	8005d42 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005d40:	68fb      	ldr	r3, [r7, #12]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <osDelay+0x16>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	e000      	b.n	8005d62 <osDelay+0x18>
 8005d60:	2301      	movs	r3, #1
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fd98 	bl	8006898 <vTaskDelay>
  
  return osOK;
 8005d68:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f103 0208 	add.w	r2, r3, #8
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f04f 32ff 	mov.w	r2, #4294967295
 8005d8a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f103 0208 	add.w	r2, r3, #8
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f103 0208 	add.w	r2, r3, #8
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	601a      	str	r2, [r3, #0]
}
 8005e08:	bf00      	nop
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2a:	d103      	bne.n	8005e34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	e00c      	b.n	8005e4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3308      	adds	r3, #8
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	e002      	b.n	8005e42 <vListInsert+0x2e>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	60fb      	str	r3, [r7, #12]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d2f6      	bcs.n	8005e3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	601a      	str	r2, [r3, #0]
}
 8005e7a:	bf00      	nop
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e86:	b480      	push	{r7}
 8005e88:	b085      	sub	sp, #20
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6892      	ldr	r2, [r2, #8]
 8005e9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6852      	ldr	r2, [r2, #4]
 8005ea6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d103      	bne.n	8005eba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	1e5a      	subs	r2, r3, #1
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
	...

08005edc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f06:	f001 fb45 	bl	8007594 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f16:	fb01 f303 	mul.w	r3, r1, r3
 8005f1a:	441a      	add	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f36:	3b01      	subs	r3, #1
 8005f38:	68f9      	ldr	r1, [r7, #12]
 8005f3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	441a      	add	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	22ff      	movs	r2, #255	; 0xff
 8005f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	22ff      	movs	r2, #255	; 0xff
 8005f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d114      	bne.n	8005f86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d01a      	beq.n	8005f9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3310      	adds	r3, #16
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 ff1b 	bl	8006da4 <xTaskRemoveFromEventList>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d012      	beq.n	8005f9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f74:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <xQueueGenericReset+0xcc>)
 8005f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	e009      	b.n	8005f9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3310      	adds	r3, #16
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fef1 	bl	8005d72 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3324      	adds	r3, #36	; 0x24
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff feec 	bl	8005d72 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f9a:	f001 fb2b 	bl	80075f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f9e:	2301      	movs	r3, #1
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08a      	sub	sp, #40	; 0x28
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	613b      	str	r3, [r7, #16]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	fb02 f303 	mul.w	r3, r2, r3
 8005fde:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	3348      	adds	r3, #72	; 0x48
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f001 fbf7 	bl	80077d8 <pvPortMalloc>
 8005fea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d011      	beq.n	8006016 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	3348      	adds	r3, #72	; 0x48
 8005ffa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006004:	79fa      	ldrb	r2, [r7, #7]
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	4613      	mov	r3, r2
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	68b9      	ldr	r1, [r7, #8]
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 f805 	bl	8006020 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006016:	69bb      	ldr	r3, [r7, #24]
	}
 8006018:	4618      	mov	r0, r3
 800601a:	3720      	adds	r7, #32
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d103      	bne.n	800603c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	e002      	b.n	8006042 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800604e:	2101      	movs	r1, #1
 8006050:	69b8      	ldr	r0, [r7, #24]
 8006052:	f7ff ff43 	bl	8005edc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006056:	bf00      	nop
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b090      	sub	sp, #64	; 0x40
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	607a      	str	r2, [r7, #4]
 800606a:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10a      	bne.n	800608c <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006088:	bf00      	nop
 800608a:	e7fe      	b.n	800608a <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d103      	bne.n	800609a <xQueueGenericSendFromISR+0x3c>
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <xQueueGenericSendFromISR+0x40>
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <xQueueGenericSendFromISR+0x42>
 800609e:	2300      	movs	r3, #0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10a      	bne.n	80060ba <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060b6:	bf00      	nop
 80060b8:	e7fe      	b.n	80060b8 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d103      	bne.n	80060c8 <xQueueGenericSendFromISR+0x6a>
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d101      	bne.n	80060cc <xQueueGenericSendFromISR+0x6e>
 80060c8:	2301      	movs	r3, #1
 80060ca:	e000      	b.n	80060ce <xQueueGenericSendFromISR+0x70>
 80060cc:	2300      	movs	r3, #0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	623b      	str	r3, [r7, #32]
}
 80060e4:	bf00      	nop
 80060e6:	e7fe      	b.n	80060e6 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060e8:	f001 fb36 	bl	8007758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060ec:	f3ef 8211 	mrs	r2, BASEPRI
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	61fa      	str	r2, [r7, #28]
 8006102:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006104:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006106:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006110:	429a      	cmp	r2, r3
 8006112:	d302      	bcc.n	800611a <xQueueGenericSendFromISR+0xbc>
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d12f      	bne.n	800617a <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800611a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006120:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	68b9      	ldr	r1, [r7, #8]
 800612e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006130:	f000 f910 	bl	8006354 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006134:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613c:	d112      	bne.n	8006164 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	2b00      	cmp	r3, #0
 8006144:	d016      	beq.n	8006174 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	3324      	adds	r3, #36	; 0x24
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fe2a 	bl	8006da4 <xTaskRemoveFromEventList>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00e      	beq.n	8006174 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00b      	beq.n	8006174 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	e007      	b.n	8006174 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006164:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006168:	3301      	adds	r3, #1
 800616a:	b2db      	uxtb	r3, r3
 800616c:	b25a      	sxtb	r2, r3
 800616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006174:	2301      	movs	r3, #1
 8006176:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006178:	e001      	b.n	800617e <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800617a:	2300      	movs	r3, #0
 800617c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800617e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006180:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006188:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800618a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800618c:	4618      	mov	r0, r3
 800618e:	3740      	adds	r7, #64	; 0x40
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08c      	sub	sp, #48	; 0x30
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061a0:	2300      	movs	r3, #0
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10a      	bne.n	80061c4 <xQueueReceive+0x30>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	623b      	str	r3, [r7, #32]
}
 80061c0:	bf00      	nop
 80061c2:	e7fe      	b.n	80061c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d103      	bne.n	80061d2 <xQueueReceive+0x3e>
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <xQueueReceive+0x42>
 80061d2:	2301      	movs	r3, #1
 80061d4:	e000      	b.n	80061d8 <xQueueReceive+0x44>
 80061d6:	2300      	movs	r3, #0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10a      	bne.n	80061f2 <xQueueReceive+0x5e>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	61fb      	str	r3, [r7, #28]
}
 80061ee:	bf00      	nop
 80061f0:	e7fe      	b.n	80061f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061f2:	f000 ff97 	bl	8007124 <xTaskGetSchedulerState>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d102      	bne.n	8006202 <xQueueReceive+0x6e>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <xQueueReceive+0x72>
 8006202:	2301      	movs	r3, #1
 8006204:	e000      	b.n	8006208 <xQueueReceive+0x74>
 8006206:	2300      	movs	r3, #0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10a      	bne.n	8006222 <xQueueReceive+0x8e>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	61bb      	str	r3, [r7, #24]
}
 800621e:	bf00      	nop
 8006220:	e7fe      	b.n	8006220 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006222:	f001 f9b7 	bl	8007594 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	2b00      	cmp	r3, #0
 8006230:	d01f      	beq.n	8006272 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006232:	68b9      	ldr	r1, [r7, #8]
 8006234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006236:	f000 f8f7 	bl	8006428 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	1e5a      	subs	r2, r3, #1
 800623e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006240:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00f      	beq.n	800626a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624c:	3310      	adds	r3, #16
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fda8 	bl	8006da4 <xTaskRemoveFromEventList>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800625a:	4b3d      	ldr	r3, [pc, #244]	; (8006350 <xQueueReceive+0x1bc>)
 800625c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800626a:	f001 f9c3 	bl	80075f4 <vPortExitCritical>
				return pdPASS;
 800626e:	2301      	movs	r3, #1
 8006270:	e069      	b.n	8006346 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d103      	bne.n	8006280 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006278:	f001 f9bc 	bl	80075f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800627c:	2300      	movs	r3, #0
 800627e:	e062      	b.n	8006346 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	2b00      	cmp	r3, #0
 8006284:	d106      	bne.n	8006294 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006286:	f107 0310 	add.w	r3, r7, #16
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fdec 	bl	8006e68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006290:	2301      	movs	r3, #1
 8006292:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006294:	f001 f9ae 	bl	80075f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006298:	f000 fb9c 	bl	80069d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800629c:	f001 f97a 	bl	8007594 <vPortEnterCritical>
 80062a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062a6:	b25b      	sxtb	r3, r3
 80062a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ac:	d103      	bne.n	80062b6 <xQueueReceive+0x122>
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062bc:	b25b      	sxtb	r3, r3
 80062be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c2:	d103      	bne.n	80062cc <xQueueReceive+0x138>
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062cc:	f001 f992 	bl	80075f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062d0:	1d3a      	adds	r2, r7, #4
 80062d2:	f107 0310 	add.w	r3, r7, #16
 80062d6:	4611      	mov	r1, r2
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 fddb 	bl	8006e94 <xTaskCheckForTimeOut>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d123      	bne.n	800632c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e6:	f000 f917 	bl	8006518 <prvIsQueueEmpty>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d017      	beq.n	8006320 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	3324      	adds	r3, #36	; 0x24
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	4611      	mov	r1, r2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fd2f 	bl	8006d5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006300:	f000 f8b8 	bl	8006474 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006304:	f000 fb74 	bl	80069f0 <xTaskResumeAll>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d189      	bne.n	8006222 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800630e:	4b10      	ldr	r3, [pc, #64]	; (8006350 <xQueueReceive+0x1bc>)
 8006310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	e780      	b.n	8006222 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006322:	f000 f8a7 	bl	8006474 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006326:	f000 fb63 	bl	80069f0 <xTaskResumeAll>
 800632a:	e77a      	b.n	8006222 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800632c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800632e:	f000 f8a1 	bl	8006474 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006332:	f000 fb5d 	bl	80069f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006338:	f000 f8ee 	bl	8006518 <prvIsQueueEmpty>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	f43f af6f 	beq.w	8006222 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006344:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006346:	4618      	mov	r0, r3
 8006348:	3730      	adds	r7, #48	; 0x30
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	e000ed04 	.word	0xe000ed04

08006354 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006360:	2300      	movs	r3, #0
 8006362:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10d      	bne.n	800638e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d14d      	bne.n	8006416 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	4618      	mov	r0, r3
 8006380:	f000 feee 	bl	8007160 <xTaskPriorityDisinherit>
 8006384:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	609a      	str	r2, [r3, #8]
 800638c:	e043      	b.n	8006416 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d119      	bne.n	80063c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6858      	ldr	r0, [r3, #4]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639c:	461a      	mov	r2, r3
 800639e:	68b9      	ldr	r1, [r7, #8]
 80063a0:	f001 fd2f 	bl	8007e02 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ac:	441a      	add	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d32b      	bcc.n	8006416 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	605a      	str	r2, [r3, #4]
 80063c6:	e026      	b.n	8006416 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	68d8      	ldr	r0, [r3, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	461a      	mov	r2, r3
 80063d2:	68b9      	ldr	r1, [r7, #8]
 80063d4:	f001 fd15 	bl	8007e02 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e0:	425b      	negs	r3, r3
 80063e2:	441a      	add	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d207      	bcs.n	8006404 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	425b      	negs	r3, r3
 80063fe:	441a      	add	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b02      	cmp	r3, #2
 8006408:	d105      	bne.n	8006416 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	3b01      	subs	r3, #1
 8006414:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800641e:	697b      	ldr	r3, [r7, #20]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d018      	beq.n	800646c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	441a      	add	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	429a      	cmp	r2, r3
 8006452:	d303      	bcc.n	800645c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68d9      	ldr	r1, [r3, #12]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006464:	461a      	mov	r2, r3
 8006466:	6838      	ldr	r0, [r7, #0]
 8006468:	f001 fccb 	bl	8007e02 <memcpy>
	}
}
 800646c:	bf00      	nop
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800647c:	f001 f88a 	bl	8007594 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006486:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006488:	e011      	b.n	80064ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	2b00      	cmp	r3, #0
 8006490:	d012      	beq.n	80064b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3324      	adds	r3, #36	; 0x24
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fc84 	bl	8006da4 <xTaskRemoveFromEventList>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064a2:	f000 fd59 	bl	8006f58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	dce9      	bgt.n	800648a <prvUnlockQueue+0x16>
 80064b6:	e000      	b.n	80064ba <prvUnlockQueue+0x46>
					break;
 80064b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	22ff      	movs	r2, #255	; 0xff
 80064be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80064c2:	f001 f897 	bl	80075f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064c6:	f001 f865 	bl	8007594 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064d2:	e011      	b.n	80064f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d012      	beq.n	8006502 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3310      	adds	r3, #16
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fc5f 	bl	8006da4 <xTaskRemoveFromEventList>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064ec:	f000 fd34 	bl	8006f58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	dce9      	bgt.n	80064d4 <prvUnlockQueue+0x60>
 8006500:	e000      	b.n	8006504 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006502:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	22ff      	movs	r2, #255	; 0xff
 8006508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800650c:	f001 f872 	bl	80075f4 <vPortExitCritical>
}
 8006510:	bf00      	nop
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006520:	f001 f838 	bl	8007594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	2b00      	cmp	r3, #0
 800652a:	d102      	bne.n	8006532 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800652c:	2301      	movs	r3, #1
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e001      	b.n	8006536 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006532:	2300      	movs	r3, #0
 8006534:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006536:	f001 f85d 	bl	80075f4 <vPortExitCritical>

	return xReturn;
 800653a:	68fb      	ldr	r3, [r7, #12]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08e      	sub	sp, #56	; 0x38
 8006548:	af04      	add	r7, sp, #16
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10a      	bne.n	800656e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655c:	f383 8811 	msr	BASEPRI, r3
 8006560:	f3bf 8f6f 	isb	sy
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	623b      	str	r3, [r7, #32]
}
 800656a:	bf00      	nop
 800656c:	e7fe      	b.n	800656c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10a      	bne.n	800658a <xTaskCreateStatic+0x46>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	61fb      	str	r3, [r7, #28]
}
 8006586:	bf00      	nop
 8006588:	e7fe      	b.n	8006588 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800658a:	23b4      	movs	r3, #180	; 0xb4
 800658c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	2bb4      	cmp	r3, #180	; 0xb4
 8006592:	d00a      	beq.n	80065aa <xTaskCreateStatic+0x66>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	61bb      	str	r3, [r7, #24]
}
 80065a6:	bf00      	nop
 80065a8:	e7fe      	b.n	80065a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80065aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d01e      	beq.n	80065f0 <xTaskCreateStatic+0xac>
 80065b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d01b      	beq.n	80065f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	2202      	movs	r2, #2
 80065c6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065ca:	2300      	movs	r3, #0
 80065cc:	9303      	str	r3, [sp, #12]
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	9302      	str	r3, [sp, #8]
 80065d2:	f107 0314 	add.w	r3, r7, #20
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 f850 	bl	8006688 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065ea:	f000 f8eb 	bl	80067c4 <prvAddNewTaskToReadyList>
 80065ee:	e001      	b.n	80065f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80065f0:	2300      	movs	r3, #0
 80065f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065f4:	697b      	ldr	r3, [r7, #20]
	}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3728      	adds	r7, #40	; 0x28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b08c      	sub	sp, #48	; 0x30
 8006602:	af04      	add	r7, sp, #16
 8006604:	60f8      	str	r0, [r7, #12]
 8006606:	60b9      	str	r1, [r7, #8]
 8006608:	603b      	str	r3, [r7, #0]
 800660a:	4613      	mov	r3, r2
 800660c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800660e:	88fb      	ldrh	r3, [r7, #6]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4618      	mov	r0, r3
 8006614:	f001 f8e0 	bl	80077d8 <pvPortMalloc>
 8006618:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00e      	beq.n	800663e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006620:	20b4      	movs	r0, #180	; 0xb4
 8006622:	f001 f8d9 	bl	80077d8 <pvPortMalloc>
 8006626:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	631a      	str	r2, [r3, #48]	; 0x30
 8006634:	e005      	b.n	8006642 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006636:	6978      	ldr	r0, [r7, #20]
 8006638:	f001 f99a 	bl	8007970 <vPortFree>
 800663c:	e001      	b.n	8006642 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800663e:	2300      	movs	r3, #0
 8006640:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d017      	beq.n	8006678 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006650:	88fa      	ldrh	r2, [r7, #6]
 8006652:	2300      	movs	r3, #0
 8006654:	9303      	str	r3, [sp, #12]
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	9302      	str	r3, [sp, #8]
 800665a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665c:	9301      	str	r3, [sp, #4]
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68b9      	ldr	r1, [r7, #8]
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 f80e 	bl	8006688 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800666c:	69f8      	ldr	r0, [r7, #28]
 800666e:	f000 f8a9 	bl	80067c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006672:	2301      	movs	r3, #1
 8006674:	61bb      	str	r3, [r7, #24]
 8006676:	e002      	b.n	800667e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006678:	f04f 33ff 	mov.w	r3, #4294967295
 800667c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800667e:	69bb      	ldr	r3, [r7, #24]
	}
 8006680:	4618      	mov	r0, r3
 8006682:	3720      	adds	r7, #32
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b088      	sub	sp, #32
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80066a0:	3b01      	subs	r3, #1
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	f023 0307 	bic.w	r3, r3, #7
 80066ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	617b      	str	r3, [r7, #20]
}
 80066cc:	bf00      	nop
 80066ce:	e7fe      	b.n	80066ce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d01f      	beq.n	8006716 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066d6:	2300      	movs	r3, #0
 80066d8:	61fb      	str	r3, [r7, #28]
 80066da:	e012      	b.n	8006702 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	4413      	add	r3, r2
 80066e2:	7819      	ldrb	r1, [r3, #0]
 80066e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	4413      	add	r3, r2
 80066ea:	3334      	adds	r3, #52	; 0x34
 80066ec:	460a      	mov	r2, r1
 80066ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	4413      	add	r3, r2
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d006      	beq.n	800670a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	3301      	adds	r3, #1
 8006700:	61fb      	str	r3, [r7, #28]
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	2b0f      	cmp	r3, #15
 8006706:	d9e9      	bls.n	80066dc <prvInitialiseNewTask+0x54>
 8006708:	e000      	b.n	800670c <prvInitialiseNewTask+0x84>
			{
				break;
 800670a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006714:	e003      	b.n	800671e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	2b06      	cmp	r3, #6
 8006722:	d901      	bls.n	8006728 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006724:	2306      	movs	r3, #6
 8006726:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800672c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006732:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006736:	2200      	movs	r2, #0
 8006738:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800673a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673c:	3304      	adds	r3, #4
 800673e:	4618      	mov	r0, r3
 8006740:	f7ff fb37 	bl	8005db2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	3318      	adds	r3, #24
 8006748:	4618      	mov	r0, r3
 800674a:	f7ff fb32 	bl	8005db2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006752:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	f1c3 0207 	rsb	r2, r3, #7
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006762:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006766:	2200      	movs	r2, #0
 8006768:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	2200      	movs	r2, #0
 8006770:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	334c      	adds	r3, #76	; 0x4c
 8006778:	2260      	movs	r2, #96	; 0x60
 800677a:	2100      	movs	r1, #0
 800677c:	4618      	mov	r0, r3
 800677e:	f001 fb4e 	bl	8007e1e <memset>
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	4a0c      	ldr	r2, [pc, #48]	; (80067b8 <prvInitialiseNewTask+0x130>)
 8006786:	651a      	str	r2, [r3, #80]	; 0x50
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	4a0c      	ldr	r2, [pc, #48]	; (80067bc <prvInitialiseNewTask+0x134>)
 800678c:	655a      	str	r2, [r3, #84]	; 0x54
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	4a0b      	ldr	r2, [pc, #44]	; (80067c0 <prvInitialiseNewTask+0x138>)
 8006792:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	69b8      	ldr	r0, [r7, #24]
 800679a:	f000 fdcd 	bl	8007338 <pxPortInitialiseStack>
 800679e:	4602      	mov	r2, r0
 80067a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80067a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067b0:	bf00      	nop
 80067b2:	3720      	adds	r7, #32
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	0800c338 	.word	0x0800c338
 80067bc:	0800c358 	.word	0x0800c358
 80067c0:	0800c318 	.word	0x0800c318

080067c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80067cc:	f000 fee2 	bl	8007594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80067d0:	4b2a      	ldr	r3, [pc, #168]	; (800687c <prvAddNewTaskToReadyList+0xb8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	4a29      	ldr	r2, [pc, #164]	; (800687c <prvAddNewTaskToReadyList+0xb8>)
 80067d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80067da:	4b29      	ldr	r3, [pc, #164]	; (8006880 <prvAddNewTaskToReadyList+0xbc>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d109      	bne.n	80067f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067e2:	4a27      	ldr	r2, [pc, #156]	; (8006880 <prvAddNewTaskToReadyList+0xbc>)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067e8:	4b24      	ldr	r3, [pc, #144]	; (800687c <prvAddNewTaskToReadyList+0xb8>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d110      	bne.n	8006812 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067f0:	f000 fbd6 	bl	8006fa0 <prvInitialiseTaskLists>
 80067f4:	e00d      	b.n	8006812 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067f6:	4b23      	ldr	r3, [pc, #140]	; (8006884 <prvAddNewTaskToReadyList+0xc0>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d109      	bne.n	8006812 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067fe:	4b20      	ldr	r3, [pc, #128]	; (8006880 <prvAddNewTaskToReadyList+0xbc>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	429a      	cmp	r2, r3
 800680a:	d802      	bhi.n	8006812 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800680c:	4a1c      	ldr	r2, [pc, #112]	; (8006880 <prvAddNewTaskToReadyList+0xbc>)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006812:	4b1d      	ldr	r3, [pc, #116]	; (8006888 <prvAddNewTaskToReadyList+0xc4>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3301      	adds	r3, #1
 8006818:	4a1b      	ldr	r2, [pc, #108]	; (8006888 <prvAddNewTaskToReadyList+0xc4>)
 800681a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	2201      	movs	r2, #1
 8006822:	409a      	lsls	r2, r3
 8006824:	4b19      	ldr	r3, [pc, #100]	; (800688c <prvAddNewTaskToReadyList+0xc8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4313      	orrs	r3, r2
 800682a:	4a18      	ldr	r2, [pc, #96]	; (800688c <prvAddNewTaskToReadyList+0xc8>)
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4a15      	ldr	r2, [pc, #84]	; (8006890 <prvAddNewTaskToReadyList+0xcc>)
 800683c:	441a      	add	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	3304      	adds	r3, #4
 8006842:	4619      	mov	r1, r3
 8006844:	4610      	mov	r0, r2
 8006846:	f7ff fac1 	bl	8005dcc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800684a:	f000 fed3 	bl	80075f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800684e:	4b0d      	ldr	r3, [pc, #52]	; (8006884 <prvAddNewTaskToReadyList+0xc0>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00e      	beq.n	8006874 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006856:	4b0a      	ldr	r3, [pc, #40]	; (8006880 <prvAddNewTaskToReadyList+0xbc>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	429a      	cmp	r2, r3
 8006862:	d207      	bcs.n	8006874 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006864:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <prvAddNewTaskToReadyList+0xd0>)
 8006866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	20000710 	.word	0x20000710
 8006880:	20000610 	.word	0x20000610
 8006884:	2000071c 	.word	0x2000071c
 8006888:	2000072c 	.word	0x2000072c
 800688c:	20000718 	.word	0x20000718
 8006890:	20000614 	.word	0x20000614
 8006894:	e000ed04 	.word	0xe000ed04

08006898 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d017      	beq.n	80068da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80068aa:	4b13      	ldr	r3, [pc, #76]	; (80068f8 <vTaskDelay+0x60>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <vTaskDelay+0x30>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	60bb      	str	r3, [r7, #8]
}
 80068c4:	bf00      	nop
 80068c6:	e7fe      	b.n	80068c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80068c8:	f000 f884 	bl	80069d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80068cc:	2100      	movs	r1, #0
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fccc 	bl	800726c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80068d4:	f000 f88c 	bl	80069f0 <xTaskResumeAll>
 80068d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d107      	bne.n	80068f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80068e0:	4b06      	ldr	r3, [pc, #24]	; (80068fc <vTaskDelay+0x64>)
 80068e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068f0:	bf00      	nop
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	20000738 	.word	0x20000738
 80068fc:	e000ed04 	.word	0xe000ed04

08006900 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08a      	sub	sp, #40	; 0x28
 8006904:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006906:	2300      	movs	r3, #0
 8006908:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800690a:	2300      	movs	r3, #0
 800690c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800690e:	463a      	mov	r2, r7
 8006910:	1d39      	adds	r1, r7, #4
 8006912:	f107 0308 	add.w	r3, r7, #8
 8006916:	4618      	mov	r0, r3
 8006918:	f7fb f87a 	bl	8001a10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	9202      	str	r2, [sp, #8]
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	2300      	movs	r3, #0
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	2300      	movs	r3, #0
 800692c:	460a      	mov	r2, r1
 800692e:	4921      	ldr	r1, [pc, #132]	; (80069b4 <vTaskStartScheduler+0xb4>)
 8006930:	4821      	ldr	r0, [pc, #132]	; (80069b8 <vTaskStartScheduler+0xb8>)
 8006932:	f7ff fe07 	bl	8006544 <xTaskCreateStatic>
 8006936:	4603      	mov	r3, r0
 8006938:	4a20      	ldr	r2, [pc, #128]	; (80069bc <vTaskStartScheduler+0xbc>)
 800693a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800693c:	4b1f      	ldr	r3, [pc, #124]	; (80069bc <vTaskStartScheduler+0xbc>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006944:	2301      	movs	r3, #1
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	e001      	b.n	800694e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d11b      	bne.n	800698c <vTaskStartScheduler+0x8c>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	613b      	str	r3, [r7, #16]
}
 8006966:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006968:	4b15      	ldr	r3, [pc, #84]	; (80069c0 <vTaskStartScheduler+0xc0>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	334c      	adds	r3, #76	; 0x4c
 800696e:	4a15      	ldr	r2, [pc, #84]	; (80069c4 <vTaskStartScheduler+0xc4>)
 8006970:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006972:	4b15      	ldr	r3, [pc, #84]	; (80069c8 <vTaskStartScheduler+0xc8>)
 8006974:	f04f 32ff 	mov.w	r2, #4294967295
 8006978:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800697a:	4b14      	ldr	r3, [pc, #80]	; (80069cc <vTaskStartScheduler+0xcc>)
 800697c:	2201      	movs	r2, #1
 800697e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006980:	4b13      	ldr	r3, [pc, #76]	; (80069d0 <vTaskStartScheduler+0xd0>)
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006986:	f000 fd63 	bl	8007450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800698a:	e00e      	b.n	80069aa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006992:	d10a      	bne.n	80069aa <vTaskStartScheduler+0xaa>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	60fb      	str	r3, [r7, #12]
}
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <vTaskStartScheduler+0xa8>
}
 80069aa:	bf00      	nop
 80069ac:	3718      	adds	r7, #24
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	0800c2f8 	.word	0x0800c2f8
 80069b8:	08006f71 	.word	0x08006f71
 80069bc:	20000734 	.word	0x20000734
 80069c0:	20000610 	.word	0x20000610
 80069c4:	20000044 	.word	0x20000044
 80069c8:	20000730 	.word	0x20000730
 80069cc:	2000071c 	.word	0x2000071c
 80069d0:	20000714 	.word	0x20000714

080069d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80069d8:	4b04      	ldr	r3, [pc, #16]	; (80069ec <vTaskSuspendAll+0x18>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3301      	adds	r3, #1
 80069de:	4a03      	ldr	r2, [pc, #12]	; (80069ec <vTaskSuspendAll+0x18>)
 80069e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80069e2:	bf00      	nop
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	20000738 	.word	0x20000738

080069f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80069fe:	4b41      	ldr	r3, [pc, #260]	; (8006b04 <xTaskResumeAll+0x114>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10a      	bne.n	8006a1c <xTaskResumeAll+0x2c>
	__asm volatile
 8006a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	603b      	str	r3, [r7, #0]
}
 8006a18:	bf00      	nop
 8006a1a:	e7fe      	b.n	8006a1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a1c:	f000 fdba 	bl	8007594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a20:	4b38      	ldr	r3, [pc, #224]	; (8006b04 <xTaskResumeAll+0x114>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3b01      	subs	r3, #1
 8006a26:	4a37      	ldr	r2, [pc, #220]	; (8006b04 <xTaskResumeAll+0x114>)
 8006a28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a2a:	4b36      	ldr	r3, [pc, #216]	; (8006b04 <xTaskResumeAll+0x114>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d161      	bne.n	8006af6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a32:	4b35      	ldr	r3, [pc, #212]	; (8006b08 <xTaskResumeAll+0x118>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d05d      	beq.n	8006af6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a3a:	e02e      	b.n	8006a9a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a3c:	4b33      	ldr	r3, [pc, #204]	; (8006b0c <xTaskResumeAll+0x11c>)
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3318      	adds	r3, #24
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff fa1c 	bl	8005e86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3304      	adds	r3, #4
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7ff fa17 	bl	8005e86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	409a      	lsls	r2, r3
 8006a60:	4b2b      	ldr	r3, [pc, #172]	; (8006b10 <xTaskResumeAll+0x120>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	4a2a      	ldr	r2, [pc, #168]	; (8006b10 <xTaskResumeAll+0x120>)
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6e:	4613      	mov	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4a27      	ldr	r2, [pc, #156]	; (8006b14 <xTaskResumeAll+0x124>)
 8006a78:	441a      	add	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4610      	mov	r0, r2
 8006a82:	f7ff f9a3 	bl	8005dcc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8a:	4b23      	ldr	r3, [pc, #140]	; (8006b18 <xTaskResumeAll+0x128>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d302      	bcc.n	8006a9a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006a94:	4b21      	ldr	r3, [pc, #132]	; (8006b1c <xTaskResumeAll+0x12c>)
 8006a96:	2201      	movs	r2, #1
 8006a98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a9a:	4b1c      	ldr	r3, [pc, #112]	; (8006b0c <xTaskResumeAll+0x11c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1cc      	bne.n	8006a3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006aa8:	f000 fb1c 	bl	80070e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006aac:	4b1c      	ldr	r3, [pc, #112]	; (8006b20 <xTaskResumeAll+0x130>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d010      	beq.n	8006ada <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ab8:	f000 f836 	bl	8006b28 <xTaskIncrementTick>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006ac2:	4b16      	ldr	r3, [pc, #88]	; (8006b1c <xTaskResumeAll+0x12c>)
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1f1      	bne.n	8006ab8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006ad4:	4b12      	ldr	r3, [pc, #72]	; (8006b20 <xTaskResumeAll+0x130>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ada:	4b10      	ldr	r3, [pc, #64]	; (8006b1c <xTaskResumeAll+0x12c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d009      	beq.n	8006af6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ae6:	4b0f      	ldr	r3, [pc, #60]	; (8006b24 <xTaskResumeAll+0x134>)
 8006ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006af6:	f000 fd7d 	bl	80075f4 <vPortExitCritical>

	return xAlreadyYielded;
 8006afa:	68bb      	ldr	r3, [r7, #8]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	20000738 	.word	0x20000738
 8006b08:	20000710 	.word	0x20000710
 8006b0c:	200006d0 	.word	0x200006d0
 8006b10:	20000718 	.word	0x20000718
 8006b14:	20000614 	.word	0x20000614
 8006b18:	20000610 	.word	0x20000610
 8006b1c:	20000724 	.word	0x20000724
 8006b20:	20000720 	.word	0x20000720
 8006b24:	e000ed04 	.word	0xe000ed04

08006b28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b32:	4b4e      	ldr	r3, [pc, #312]	; (8006c6c <xTaskIncrementTick+0x144>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f040 808e 	bne.w	8006c58 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b3c:	4b4c      	ldr	r3, [pc, #304]	; (8006c70 <xTaskIncrementTick+0x148>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3301      	adds	r3, #1
 8006b42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b44:	4a4a      	ldr	r2, [pc, #296]	; (8006c70 <xTaskIncrementTick+0x148>)
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d120      	bne.n	8006b92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b50:	4b48      	ldr	r3, [pc, #288]	; (8006c74 <xTaskIncrementTick+0x14c>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00a      	beq.n	8006b70 <xTaskIncrementTick+0x48>
	__asm volatile
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	603b      	str	r3, [r7, #0]
}
 8006b6c:	bf00      	nop
 8006b6e:	e7fe      	b.n	8006b6e <xTaskIncrementTick+0x46>
 8006b70:	4b40      	ldr	r3, [pc, #256]	; (8006c74 <xTaskIncrementTick+0x14c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	60fb      	str	r3, [r7, #12]
 8006b76:	4b40      	ldr	r3, [pc, #256]	; (8006c78 <xTaskIncrementTick+0x150>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a3e      	ldr	r2, [pc, #248]	; (8006c74 <xTaskIncrementTick+0x14c>)
 8006b7c:	6013      	str	r3, [r2, #0]
 8006b7e:	4a3e      	ldr	r2, [pc, #248]	; (8006c78 <xTaskIncrementTick+0x150>)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6013      	str	r3, [r2, #0]
 8006b84:	4b3d      	ldr	r3, [pc, #244]	; (8006c7c <xTaskIncrementTick+0x154>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	4a3c      	ldr	r2, [pc, #240]	; (8006c7c <xTaskIncrementTick+0x154>)
 8006b8c:	6013      	str	r3, [r2, #0]
 8006b8e:	f000 faa9 	bl	80070e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b92:	4b3b      	ldr	r3, [pc, #236]	; (8006c80 <xTaskIncrementTick+0x158>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d348      	bcc.n	8006c2e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b9c:	4b35      	ldr	r3, [pc, #212]	; (8006c74 <xTaskIncrementTick+0x14c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d104      	bne.n	8006bb0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ba6:	4b36      	ldr	r3, [pc, #216]	; (8006c80 <xTaskIncrementTick+0x158>)
 8006ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bac:	601a      	str	r2, [r3, #0]
					break;
 8006bae:	e03e      	b.n	8006c2e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bb0:	4b30      	ldr	r3, [pc, #192]	; (8006c74 <xTaskIncrementTick+0x14c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d203      	bcs.n	8006bd0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006bc8:	4a2d      	ldr	r2, [pc, #180]	; (8006c80 <xTaskIncrementTick+0x158>)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006bce:	e02e      	b.n	8006c2e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7ff f956 	bl	8005e86 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d004      	beq.n	8006bec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	3318      	adds	r3, #24
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff f94d 	bl	8005e86 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	409a      	lsls	r2, r3
 8006bf4:	4b23      	ldr	r3, [pc, #140]	; (8006c84 <xTaskIncrementTick+0x15c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	4a22      	ldr	r2, [pc, #136]	; (8006c84 <xTaskIncrementTick+0x15c>)
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c02:	4613      	mov	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4a1f      	ldr	r2, [pc, #124]	; (8006c88 <xTaskIncrementTick+0x160>)
 8006c0c:	441a      	add	r2, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	3304      	adds	r3, #4
 8006c12:	4619      	mov	r1, r3
 8006c14:	4610      	mov	r0, r2
 8006c16:	f7ff f8d9 	bl	8005dcc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1e:	4b1b      	ldr	r3, [pc, #108]	; (8006c8c <xTaskIncrementTick+0x164>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d3b9      	bcc.n	8006b9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c2c:	e7b6      	b.n	8006b9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c2e:	4b17      	ldr	r3, [pc, #92]	; (8006c8c <xTaskIncrementTick+0x164>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c34:	4914      	ldr	r1, [pc, #80]	; (8006c88 <xTaskIncrementTick+0x160>)
 8006c36:	4613      	mov	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	440b      	add	r3, r1
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d901      	bls.n	8006c4a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006c46:	2301      	movs	r3, #1
 8006c48:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006c4a:	4b11      	ldr	r3, [pc, #68]	; (8006c90 <xTaskIncrementTick+0x168>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d007      	beq.n	8006c62 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006c52:	2301      	movs	r3, #1
 8006c54:	617b      	str	r3, [r7, #20]
 8006c56:	e004      	b.n	8006c62 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c58:	4b0e      	ldr	r3, [pc, #56]	; (8006c94 <xTaskIncrementTick+0x16c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	4a0d      	ldr	r2, [pc, #52]	; (8006c94 <xTaskIncrementTick+0x16c>)
 8006c60:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c62:	697b      	ldr	r3, [r7, #20]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20000738 	.word	0x20000738
 8006c70:	20000714 	.word	0x20000714
 8006c74:	200006c8 	.word	0x200006c8
 8006c78:	200006cc 	.word	0x200006cc
 8006c7c:	20000728 	.word	0x20000728
 8006c80:	20000730 	.word	0x20000730
 8006c84:	20000718 	.word	0x20000718
 8006c88:	20000614 	.word	0x20000614
 8006c8c:	20000610 	.word	0x20000610
 8006c90:	20000724 	.word	0x20000724
 8006c94:	20000720 	.word	0x20000720

08006c98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c9e:	4b29      	ldr	r3, [pc, #164]	; (8006d44 <vTaskSwitchContext+0xac>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ca6:	4b28      	ldr	r3, [pc, #160]	; (8006d48 <vTaskSwitchContext+0xb0>)
 8006ca8:	2201      	movs	r2, #1
 8006caa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006cac:	e044      	b.n	8006d38 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006cae:	4b26      	ldr	r3, [pc, #152]	; (8006d48 <vTaskSwitchContext+0xb0>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cb4:	4b25      	ldr	r3, [pc, #148]	; (8006d4c <vTaskSwitchContext+0xb4>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	fab3 f383 	clz	r3, r3
 8006cc0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006cc2:	7afb      	ldrb	r3, [r7, #11]
 8006cc4:	f1c3 031f 	rsb	r3, r3, #31
 8006cc8:	617b      	str	r3, [r7, #20]
 8006cca:	4921      	ldr	r1, [pc, #132]	; (8006d50 <vTaskSwitchContext+0xb8>)
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10a      	bne.n	8006cf4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	607b      	str	r3, [r7, #4]
}
 8006cf0:	bf00      	nop
 8006cf2:	e7fe      	b.n	8006cf2 <vTaskSwitchContext+0x5a>
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4a14      	ldr	r2, [pc, #80]	; (8006d50 <vTaskSwitchContext+0xb8>)
 8006d00:	4413      	add	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	605a      	str	r2, [r3, #4]
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	3308      	adds	r3, #8
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d104      	bne.n	8006d24 <vTaskSwitchContext+0x8c>
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	605a      	str	r2, [r3, #4]
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	4a0a      	ldr	r2, [pc, #40]	; (8006d54 <vTaskSwitchContext+0xbc>)
 8006d2c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d2e:	4b09      	ldr	r3, [pc, #36]	; (8006d54 <vTaskSwitchContext+0xbc>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	334c      	adds	r3, #76	; 0x4c
 8006d34:	4a08      	ldr	r2, [pc, #32]	; (8006d58 <vTaskSwitchContext+0xc0>)
 8006d36:	6013      	str	r3, [r2, #0]
}
 8006d38:	bf00      	nop
 8006d3a:	371c      	adds	r7, #28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	20000738 	.word	0x20000738
 8006d48:	20000724 	.word	0x20000724
 8006d4c:	20000718 	.word	0x20000718
 8006d50:	20000614 	.word	0x20000614
 8006d54:	20000610 	.word	0x20000610
 8006d58:	20000044 	.word	0x20000044

08006d5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	60fb      	str	r3, [r7, #12]
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d82:	4b07      	ldr	r3, [pc, #28]	; (8006da0 <vTaskPlaceOnEventList+0x44>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3318      	adds	r3, #24
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7ff f842 	bl	8005e14 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d90:	2101      	movs	r1, #1
 8006d92:	6838      	ldr	r0, [r7, #0]
 8006d94:	f000 fa6a 	bl	800726c <prvAddCurrentTaskToDelayedList>
}
 8006d98:	bf00      	nop
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	20000610 	.word	0x20000610

08006da4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10a      	bne.n	8006dd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	60fb      	str	r3, [r7, #12]
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	3318      	adds	r3, #24
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7ff f856 	bl	8005e86 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dda:	4b1d      	ldr	r3, [pc, #116]	; (8006e50 <xTaskRemoveFromEventList+0xac>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d11c      	bne.n	8006e1c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	3304      	adds	r3, #4
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7ff f84d 	bl	8005e86 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	2201      	movs	r2, #1
 8006df2:	409a      	lsls	r2, r3
 8006df4:	4b17      	ldr	r3, [pc, #92]	; (8006e54 <xTaskRemoveFromEventList+0xb0>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	4a16      	ldr	r2, [pc, #88]	; (8006e54 <xTaskRemoveFromEventList+0xb0>)
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e02:	4613      	mov	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4a13      	ldr	r2, [pc, #76]	; (8006e58 <xTaskRemoveFromEventList+0xb4>)
 8006e0c:	441a      	add	r2, r3
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	3304      	adds	r3, #4
 8006e12:	4619      	mov	r1, r3
 8006e14:	4610      	mov	r0, r2
 8006e16:	f7fe ffd9 	bl	8005dcc <vListInsertEnd>
 8006e1a:	e005      	b.n	8006e28 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	3318      	adds	r3, #24
 8006e20:	4619      	mov	r1, r3
 8006e22:	480e      	ldr	r0, [pc, #56]	; (8006e5c <xTaskRemoveFromEventList+0xb8>)
 8006e24:	f7fe ffd2 	bl	8005dcc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2c:	4b0c      	ldr	r3, [pc, #48]	; (8006e60 <xTaskRemoveFromEventList+0xbc>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d905      	bls.n	8006e42 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e36:	2301      	movs	r3, #1
 8006e38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e3a:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <xTaskRemoveFromEventList+0xc0>)
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]
 8006e40:	e001      	b.n	8006e46 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006e42:	2300      	movs	r3, #0
 8006e44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e46:	697b      	ldr	r3, [r7, #20]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	20000738 	.word	0x20000738
 8006e54:	20000718 	.word	0x20000718
 8006e58:	20000614 	.word	0x20000614
 8006e5c:	200006d0 	.word	0x200006d0
 8006e60:	20000610 	.word	0x20000610
 8006e64:	20000724 	.word	0x20000724

08006e68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e70:	4b06      	ldr	r3, [pc, #24]	; (8006e8c <vTaskInternalSetTimeOutState+0x24>)
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e78:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <vTaskInternalSetTimeOutState+0x28>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	605a      	str	r2, [r3, #4]
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	20000728 	.word	0x20000728
 8006e90:	20000714 	.word	0x20000714

08006e94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10a      	bne.n	8006eba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	613b      	str	r3, [r7, #16]
}
 8006eb6:	bf00      	nop
 8006eb8:	e7fe      	b.n	8006eb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10a      	bne.n	8006ed6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	60fb      	str	r3, [r7, #12]
}
 8006ed2:	bf00      	nop
 8006ed4:	e7fe      	b.n	8006ed4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006ed6:	f000 fb5d 	bl	8007594 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006eda:	4b1d      	ldr	r3, [pc, #116]	; (8006f50 <xTaskCheckForTimeOut+0xbc>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef2:	d102      	bne.n	8006efa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	61fb      	str	r3, [r7, #28]
 8006ef8:	e023      	b.n	8006f42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	4b15      	ldr	r3, [pc, #84]	; (8006f54 <xTaskCheckForTimeOut+0xc0>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d007      	beq.n	8006f16 <xTaskCheckForTimeOut+0x82>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d302      	bcc.n	8006f16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f10:	2301      	movs	r3, #1
 8006f12:	61fb      	str	r3, [r7, #28]
 8006f14:	e015      	b.n	8006f42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d20b      	bcs.n	8006f38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	1ad2      	subs	r2, r2, r3
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7ff ff9b 	bl	8006e68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f32:	2300      	movs	r3, #0
 8006f34:	61fb      	str	r3, [r7, #28]
 8006f36:	e004      	b.n	8006f42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f42:	f000 fb57 	bl	80075f4 <vPortExitCritical>

	return xReturn;
 8006f46:	69fb      	ldr	r3, [r7, #28]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3720      	adds	r7, #32
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	20000714 	.word	0x20000714
 8006f54:	20000728 	.word	0x20000728

08006f58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f5c:	4b03      	ldr	r3, [pc, #12]	; (8006f6c <vTaskMissedYield+0x14>)
 8006f5e:	2201      	movs	r2, #1
 8006f60:	601a      	str	r2, [r3, #0]
}
 8006f62:	bf00      	nop
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	20000724 	.word	0x20000724

08006f70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f78:	f000 f852 	bl	8007020 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f7c:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <prvIdleTask+0x28>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d9f9      	bls.n	8006f78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f84:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <prvIdleTask+0x2c>)
 8006f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f94:	e7f0      	b.n	8006f78 <prvIdleTask+0x8>
 8006f96:	bf00      	nop
 8006f98:	20000614 	.word	0x20000614
 8006f9c:	e000ed04 	.word	0xe000ed04

08006fa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	607b      	str	r3, [r7, #4]
 8006faa:	e00c      	b.n	8006fc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4a12      	ldr	r2, [pc, #72]	; (8007000 <prvInitialiseTaskLists+0x60>)
 8006fb8:	4413      	add	r3, r2
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe fed9 	bl	8005d72 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	607b      	str	r3, [r7, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b06      	cmp	r3, #6
 8006fca:	d9ef      	bls.n	8006fac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fcc:	480d      	ldr	r0, [pc, #52]	; (8007004 <prvInitialiseTaskLists+0x64>)
 8006fce:	f7fe fed0 	bl	8005d72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fd2:	480d      	ldr	r0, [pc, #52]	; (8007008 <prvInitialiseTaskLists+0x68>)
 8006fd4:	f7fe fecd 	bl	8005d72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fd8:	480c      	ldr	r0, [pc, #48]	; (800700c <prvInitialiseTaskLists+0x6c>)
 8006fda:	f7fe feca 	bl	8005d72 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fde:	480c      	ldr	r0, [pc, #48]	; (8007010 <prvInitialiseTaskLists+0x70>)
 8006fe0:	f7fe fec7 	bl	8005d72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fe4:	480b      	ldr	r0, [pc, #44]	; (8007014 <prvInitialiseTaskLists+0x74>)
 8006fe6:	f7fe fec4 	bl	8005d72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fea:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <prvInitialiseTaskLists+0x78>)
 8006fec:	4a05      	ldr	r2, [pc, #20]	; (8007004 <prvInitialiseTaskLists+0x64>)
 8006fee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ff0:	4b0a      	ldr	r3, [pc, #40]	; (800701c <prvInitialiseTaskLists+0x7c>)
 8006ff2:	4a05      	ldr	r2, [pc, #20]	; (8007008 <prvInitialiseTaskLists+0x68>)
 8006ff4:	601a      	str	r2, [r3, #0]
}
 8006ff6:	bf00      	nop
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	20000614 	.word	0x20000614
 8007004:	200006a0 	.word	0x200006a0
 8007008:	200006b4 	.word	0x200006b4
 800700c:	200006d0 	.word	0x200006d0
 8007010:	200006e4 	.word	0x200006e4
 8007014:	200006fc 	.word	0x200006fc
 8007018:	200006c8 	.word	0x200006c8
 800701c:	200006cc 	.word	0x200006cc

08007020 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007026:	e019      	b.n	800705c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007028:	f000 fab4 	bl	8007594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800702c:	4b10      	ldr	r3, [pc, #64]	; (8007070 <prvCheckTasksWaitingTermination+0x50>)
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	3304      	adds	r3, #4
 8007038:	4618      	mov	r0, r3
 800703a:	f7fe ff24 	bl	8005e86 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800703e:	4b0d      	ldr	r3, [pc, #52]	; (8007074 <prvCheckTasksWaitingTermination+0x54>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3b01      	subs	r3, #1
 8007044:	4a0b      	ldr	r2, [pc, #44]	; (8007074 <prvCheckTasksWaitingTermination+0x54>)
 8007046:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007048:	4b0b      	ldr	r3, [pc, #44]	; (8007078 <prvCheckTasksWaitingTermination+0x58>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3b01      	subs	r3, #1
 800704e:	4a0a      	ldr	r2, [pc, #40]	; (8007078 <prvCheckTasksWaitingTermination+0x58>)
 8007050:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007052:	f000 facf 	bl	80075f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f810 	bl	800707c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800705c:	4b06      	ldr	r3, [pc, #24]	; (8007078 <prvCheckTasksWaitingTermination+0x58>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e1      	bne.n	8007028 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	200006e4 	.word	0x200006e4
 8007074:	20000710 	.word	0x20000710
 8007078:	200006f8 	.word	0x200006f8

0800707c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	334c      	adds	r3, #76	; 0x4c
 8007088:	4618      	mov	r0, r3
 800708a:	f001 fc31 	bl	80088f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007094:	2b00      	cmp	r3, #0
 8007096:	d108      	bne.n	80070aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fc67 	bl	8007970 <vPortFree>
				vPortFree( pxTCB );
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fc64 	bl	8007970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80070a8:	e018      	b.n	80070dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d103      	bne.n	80070bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fc5b 	bl	8007970 <vPortFree>
	}
 80070ba:	e00f      	b.n	80070dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d00a      	beq.n	80070dc <prvDeleteTCB+0x60>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	60fb      	str	r3, [r7, #12]
}
 80070d8:	bf00      	nop
 80070da:	e7fe      	b.n	80070da <prvDeleteTCB+0x5e>
	}
 80070dc:	bf00      	nop
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070ea:	4b0c      	ldr	r3, [pc, #48]	; (800711c <prvResetNextTaskUnblockTime+0x38>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d104      	bne.n	80070fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070f4:	4b0a      	ldr	r3, [pc, #40]	; (8007120 <prvResetNextTaskUnblockTime+0x3c>)
 80070f6:	f04f 32ff 	mov.w	r2, #4294967295
 80070fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070fc:	e008      	b.n	8007110 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070fe:	4b07      	ldr	r3, [pc, #28]	; (800711c <prvResetNextTaskUnblockTime+0x38>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	4a04      	ldr	r2, [pc, #16]	; (8007120 <prvResetNextTaskUnblockTime+0x3c>)
 800710e:	6013      	str	r3, [r2, #0]
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	200006c8 	.word	0x200006c8
 8007120:	20000730 	.word	0x20000730

08007124 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800712a:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <xTaskGetSchedulerState+0x34>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d102      	bne.n	8007138 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007132:	2301      	movs	r3, #1
 8007134:	607b      	str	r3, [r7, #4]
 8007136:	e008      	b.n	800714a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007138:	4b08      	ldr	r3, [pc, #32]	; (800715c <xTaskGetSchedulerState+0x38>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d102      	bne.n	8007146 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007140:	2302      	movs	r3, #2
 8007142:	607b      	str	r3, [r7, #4]
 8007144:	e001      	b.n	800714a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007146:	2300      	movs	r3, #0
 8007148:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800714a:	687b      	ldr	r3, [r7, #4]
	}
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	2000071c 	.word	0x2000071c
 800715c:	20000738 	.word	0x20000738

08007160 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800716c:	2300      	movs	r3, #0
 800716e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d06e      	beq.n	8007254 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007176:	4b3a      	ldr	r3, [pc, #232]	; (8007260 <xTaskPriorityDisinherit+0x100>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	429a      	cmp	r2, r3
 800717e:	d00a      	beq.n	8007196 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	60fb      	str	r3, [r7, #12]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10a      	bne.n	80071b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	60bb      	str	r3, [r7, #8]
}
 80071b0:	bf00      	nop
 80071b2:	e7fe      	b.n	80071b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b8:	1e5a      	subs	r2, r3, #1
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d044      	beq.n	8007254 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d140      	bne.n	8007254 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	3304      	adds	r3, #4
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe fe55 	bl	8005e86 <uxListRemove>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d115      	bne.n	800720e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e6:	491f      	ldr	r1, [pc, #124]	; (8007264 <xTaskPriorityDisinherit+0x104>)
 80071e8:	4613      	mov	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	440b      	add	r3, r1
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10a      	bne.n	800720e <xTaskPriorityDisinherit+0xae>
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fc:	2201      	movs	r2, #1
 80071fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007202:	43da      	mvns	r2, r3
 8007204:	4b18      	ldr	r3, [pc, #96]	; (8007268 <xTaskPriorityDisinherit+0x108>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4013      	ands	r3, r2
 800720a:	4a17      	ldr	r2, [pc, #92]	; (8007268 <xTaskPriorityDisinherit+0x108>)
 800720c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721a:	f1c3 0207 	rsb	r2, r3, #7
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007226:	2201      	movs	r2, #1
 8007228:	409a      	lsls	r2, r3
 800722a:	4b0f      	ldr	r3, [pc, #60]	; (8007268 <xTaskPriorityDisinherit+0x108>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4313      	orrs	r3, r2
 8007230:	4a0d      	ldr	r2, [pc, #52]	; (8007268 <xTaskPriorityDisinherit+0x108>)
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007238:	4613      	mov	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4a08      	ldr	r2, [pc, #32]	; (8007264 <xTaskPriorityDisinherit+0x104>)
 8007242:	441a      	add	r2, r3
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	3304      	adds	r3, #4
 8007248:	4619      	mov	r1, r3
 800724a:	4610      	mov	r0, r2
 800724c:	f7fe fdbe 	bl	8005dcc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007250:	2301      	movs	r3, #1
 8007252:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007254:	697b      	ldr	r3, [r7, #20]
	}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20000610 	.word	0x20000610
 8007264:	20000614 	.word	0x20000614
 8007268:	20000718 	.word	0x20000718

0800726c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007276:	4b29      	ldr	r3, [pc, #164]	; (800731c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800727c:	4b28      	ldr	r3, [pc, #160]	; (8007320 <prvAddCurrentTaskToDelayedList+0xb4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3304      	adds	r3, #4
 8007282:	4618      	mov	r0, r3
 8007284:	f7fe fdff 	bl	8005e86 <uxListRemove>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10b      	bne.n	80072a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800728e:	4b24      	ldr	r3, [pc, #144]	; (8007320 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007294:	2201      	movs	r2, #1
 8007296:	fa02 f303 	lsl.w	r3, r2, r3
 800729a:	43da      	mvns	r2, r3
 800729c:	4b21      	ldr	r3, [pc, #132]	; (8007324 <prvAddCurrentTaskToDelayedList+0xb8>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4013      	ands	r3, r2
 80072a2:	4a20      	ldr	r2, [pc, #128]	; (8007324 <prvAddCurrentTaskToDelayedList+0xb8>)
 80072a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ac:	d10a      	bne.n	80072c4 <prvAddCurrentTaskToDelayedList+0x58>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d007      	beq.n	80072c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072b4:	4b1a      	ldr	r3, [pc, #104]	; (8007320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3304      	adds	r3, #4
 80072ba:	4619      	mov	r1, r3
 80072bc:	481a      	ldr	r0, [pc, #104]	; (8007328 <prvAddCurrentTaskToDelayedList+0xbc>)
 80072be:	f7fe fd85 	bl	8005dcc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80072c2:	e026      	b.n	8007312 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4413      	add	r3, r2
 80072ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072cc:	4b14      	ldr	r3, [pc, #80]	; (8007320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d209      	bcs.n	80072f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072dc:	4b13      	ldr	r3, [pc, #76]	; (800732c <prvAddCurrentTaskToDelayedList+0xc0>)
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	4b0f      	ldr	r3, [pc, #60]	; (8007320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3304      	adds	r3, #4
 80072e6:	4619      	mov	r1, r3
 80072e8:	4610      	mov	r0, r2
 80072ea:	f7fe fd93 	bl	8005e14 <vListInsert>
}
 80072ee:	e010      	b.n	8007312 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072f0:	4b0f      	ldr	r3, [pc, #60]	; (8007330 <prvAddCurrentTaskToDelayedList+0xc4>)
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	4b0a      	ldr	r3, [pc, #40]	; (8007320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3304      	adds	r3, #4
 80072fa:	4619      	mov	r1, r3
 80072fc:	4610      	mov	r0, r2
 80072fe:	f7fe fd89 	bl	8005e14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007302:	4b0c      	ldr	r3, [pc, #48]	; (8007334 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	429a      	cmp	r2, r3
 800730a:	d202      	bcs.n	8007312 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800730c:	4a09      	ldr	r2, [pc, #36]	; (8007334 <prvAddCurrentTaskToDelayedList+0xc8>)
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	6013      	str	r3, [r2, #0]
}
 8007312:	bf00      	nop
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	20000714 	.word	0x20000714
 8007320:	20000610 	.word	0x20000610
 8007324:	20000718 	.word	0x20000718
 8007328:	200006fc 	.word	0x200006fc
 800732c:	200006cc 	.word	0x200006cc
 8007330:	200006c8 	.word	0x200006c8
 8007334:	20000730 	.word	0x20000730

08007338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3b04      	subs	r3, #4
 8007348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3b04      	subs	r3, #4
 8007356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	f023 0201 	bic.w	r2, r3, #1
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3b04      	subs	r3, #4
 8007366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007368:	4a0c      	ldr	r2, [pc, #48]	; (800739c <pxPortInitialiseStack+0x64>)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3b14      	subs	r3, #20
 8007372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3b04      	subs	r3, #4
 800737e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f06f 0202 	mvn.w	r2, #2
 8007386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3b20      	subs	r3, #32
 800738c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800738e:	68fb      	ldr	r3, [r7, #12]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	080073a1 	.word	0x080073a1

080073a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073aa:	4b12      	ldr	r3, [pc, #72]	; (80073f4 <prvTaskExitError+0x54>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b2:	d00a      	beq.n	80073ca <prvTaskExitError+0x2a>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	60fb      	str	r3, [r7, #12]
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <prvTaskExitError+0x28>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	60bb      	str	r3, [r7, #8]
}
 80073dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073de:	bf00      	nop
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d0fc      	beq.n	80073e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073e6:	bf00      	nop
 80073e8:	bf00      	nop
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	20000040 	.word	0x20000040
	...

08007400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007400:	4b07      	ldr	r3, [pc, #28]	; (8007420 <pxCurrentTCBConst2>)
 8007402:	6819      	ldr	r1, [r3, #0]
 8007404:	6808      	ldr	r0, [r1, #0]
 8007406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740a:	f380 8809 	msr	PSP, r0
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f04f 0000 	mov.w	r0, #0
 8007416:	f380 8811 	msr	BASEPRI, r0
 800741a:	4770      	bx	lr
 800741c:	f3af 8000 	nop.w

08007420 <pxCurrentTCBConst2>:
 8007420:	20000610 	.word	0x20000610
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop

08007428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007428:	4808      	ldr	r0, [pc, #32]	; (800744c <prvPortStartFirstTask+0x24>)
 800742a:	6800      	ldr	r0, [r0, #0]
 800742c:	6800      	ldr	r0, [r0, #0]
 800742e:	f380 8808 	msr	MSP, r0
 8007432:	f04f 0000 	mov.w	r0, #0
 8007436:	f380 8814 	msr	CONTROL, r0
 800743a:	b662      	cpsie	i
 800743c:	b661      	cpsie	f
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	df00      	svc	0
 8007448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800744a:	bf00      	nop
 800744c:	e000ed08 	.word	0xe000ed08

08007450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007456:	4b46      	ldr	r3, [pc, #280]	; (8007570 <xPortStartScheduler+0x120>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a46      	ldr	r2, [pc, #280]	; (8007574 <xPortStartScheduler+0x124>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d10a      	bne.n	8007476 <xPortStartScheduler+0x26>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	613b      	str	r3, [r7, #16]
}
 8007472:	bf00      	nop
 8007474:	e7fe      	b.n	8007474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007476:	4b3e      	ldr	r3, [pc, #248]	; (8007570 <xPortStartScheduler+0x120>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a3f      	ldr	r2, [pc, #252]	; (8007578 <xPortStartScheduler+0x128>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d10a      	bne.n	8007496 <xPortStartScheduler+0x46>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	60fb      	str	r3, [r7, #12]
}
 8007492:	bf00      	nop
 8007494:	e7fe      	b.n	8007494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007496:	4b39      	ldr	r3, [pc, #228]	; (800757c <xPortStartScheduler+0x12c>)
 8007498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	22ff      	movs	r2, #255	; 0xff
 80074a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074b0:	78fb      	ldrb	r3, [r7, #3]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	4b31      	ldr	r3, [pc, #196]	; (8007580 <xPortStartScheduler+0x130>)
 80074bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074be:	4b31      	ldr	r3, [pc, #196]	; (8007584 <xPortStartScheduler+0x134>)
 80074c0:	2207      	movs	r2, #7
 80074c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074c4:	e009      	b.n	80074da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80074c6:	4b2f      	ldr	r3, [pc, #188]	; (8007584 <xPortStartScheduler+0x134>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	4a2d      	ldr	r2, [pc, #180]	; (8007584 <xPortStartScheduler+0x134>)
 80074ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074da:	78fb      	ldrb	r3, [r7, #3]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e2:	2b80      	cmp	r3, #128	; 0x80
 80074e4:	d0ef      	beq.n	80074c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074e6:	4b27      	ldr	r3, [pc, #156]	; (8007584 <xPortStartScheduler+0x134>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f1c3 0307 	rsb	r3, r3, #7
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	d00a      	beq.n	8007508 <xPortStartScheduler+0xb8>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	60bb      	str	r3, [r7, #8]
}
 8007504:	bf00      	nop
 8007506:	e7fe      	b.n	8007506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007508:	4b1e      	ldr	r3, [pc, #120]	; (8007584 <xPortStartScheduler+0x134>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	021b      	lsls	r3, r3, #8
 800750e:	4a1d      	ldr	r2, [pc, #116]	; (8007584 <xPortStartScheduler+0x134>)
 8007510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007512:	4b1c      	ldr	r3, [pc, #112]	; (8007584 <xPortStartScheduler+0x134>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800751a:	4a1a      	ldr	r2, [pc, #104]	; (8007584 <xPortStartScheduler+0x134>)
 800751c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	b2da      	uxtb	r2, r3
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007526:	4b18      	ldr	r3, [pc, #96]	; (8007588 <xPortStartScheduler+0x138>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a17      	ldr	r2, [pc, #92]	; (8007588 <xPortStartScheduler+0x138>)
 800752c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007532:	4b15      	ldr	r3, [pc, #84]	; (8007588 <xPortStartScheduler+0x138>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a14      	ldr	r2, [pc, #80]	; (8007588 <xPortStartScheduler+0x138>)
 8007538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800753c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800753e:	f000 f8dd 	bl	80076fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007542:	4b12      	ldr	r3, [pc, #72]	; (800758c <xPortStartScheduler+0x13c>)
 8007544:	2200      	movs	r2, #0
 8007546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007548:	f000 f8fc 	bl	8007744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800754c:	4b10      	ldr	r3, [pc, #64]	; (8007590 <xPortStartScheduler+0x140>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a0f      	ldr	r2, [pc, #60]	; (8007590 <xPortStartScheduler+0x140>)
 8007552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007558:	f7ff ff66 	bl	8007428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800755c:	f7ff fb9c 	bl	8006c98 <vTaskSwitchContext>
	prvTaskExitError();
 8007560:	f7ff ff1e 	bl	80073a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	e000ed00 	.word	0xe000ed00
 8007574:	410fc271 	.word	0x410fc271
 8007578:	410fc270 	.word	0x410fc270
 800757c:	e000e400 	.word	0xe000e400
 8007580:	2000073c 	.word	0x2000073c
 8007584:	20000740 	.word	0x20000740
 8007588:	e000ed20 	.word	0xe000ed20
 800758c:	20000040 	.word	0x20000040
 8007590:	e000ef34 	.word	0xe000ef34

08007594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
	__asm volatile
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	607b      	str	r3, [r7, #4]
}
 80075ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075ae:	4b0f      	ldr	r3, [pc, #60]	; (80075ec <vPortEnterCritical+0x58>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3301      	adds	r3, #1
 80075b4:	4a0d      	ldr	r2, [pc, #52]	; (80075ec <vPortEnterCritical+0x58>)
 80075b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075b8:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <vPortEnterCritical+0x58>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d10f      	bne.n	80075e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075c0:	4b0b      	ldr	r3, [pc, #44]	; (80075f0 <vPortEnterCritical+0x5c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	603b      	str	r3, [r7, #0]
}
 80075dc:	bf00      	nop
 80075de:	e7fe      	b.n	80075de <vPortEnterCritical+0x4a>
	}
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	20000040 	.word	0x20000040
 80075f0:	e000ed04 	.word	0xe000ed04

080075f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075fa:	4b12      	ldr	r3, [pc, #72]	; (8007644 <vPortExitCritical+0x50>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <vPortExitCritical+0x24>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	607b      	str	r3, [r7, #4]
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007618:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <vPortExitCritical+0x50>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3b01      	subs	r3, #1
 800761e:	4a09      	ldr	r2, [pc, #36]	; (8007644 <vPortExitCritical+0x50>)
 8007620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007622:	4b08      	ldr	r3, [pc, #32]	; (8007644 <vPortExitCritical+0x50>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d105      	bne.n	8007636 <vPortExitCritical+0x42>
 800762a:	2300      	movs	r3, #0
 800762c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	f383 8811 	msr	BASEPRI, r3
}
 8007634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	20000040 	.word	0x20000040
	...

08007650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007650:	f3ef 8009 	mrs	r0, PSP
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	4b15      	ldr	r3, [pc, #84]	; (80076b0 <pxCurrentTCBConst>)
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	f01e 0f10 	tst.w	lr, #16
 8007660:	bf08      	it	eq
 8007662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766a:	6010      	str	r0, [r2, #0]
 800766c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007674:	f380 8811 	msr	BASEPRI, r0
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f7ff fb0a 	bl	8006c98 <vTaskSwitchContext>
 8007684:	f04f 0000 	mov.w	r0, #0
 8007688:	f380 8811 	msr	BASEPRI, r0
 800768c:	bc09      	pop	{r0, r3}
 800768e:	6819      	ldr	r1, [r3, #0]
 8007690:	6808      	ldr	r0, [r1, #0]
 8007692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007696:	f01e 0f10 	tst.w	lr, #16
 800769a:	bf08      	it	eq
 800769c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076a0:	f380 8809 	msr	PSP, r0
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	f3af 8000 	nop.w

080076b0 <pxCurrentTCBConst>:
 80076b0:	20000610 	.word	0x20000610
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop

080076b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	607b      	str	r3, [r7, #4]
}
 80076d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076d2:	f7ff fa29 	bl	8006b28 <xTaskIncrementTick>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076dc:	4b06      	ldr	r3, [pc, #24]	; (80076f8 <SysTick_Handler+0x40>)
 80076de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	2300      	movs	r3, #0
 80076e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f383 8811 	msr	BASEPRI, r3
}
 80076ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	e000ed04 	.word	0xe000ed04

080076fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007700:	4b0b      	ldr	r3, [pc, #44]	; (8007730 <vPortSetupTimerInterrupt+0x34>)
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007706:	4b0b      	ldr	r3, [pc, #44]	; (8007734 <vPortSetupTimerInterrupt+0x38>)
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800770c:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <vPortSetupTimerInterrupt+0x3c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a0a      	ldr	r2, [pc, #40]	; (800773c <vPortSetupTimerInterrupt+0x40>)
 8007712:	fba2 2303 	umull	r2, r3, r2, r3
 8007716:	099b      	lsrs	r3, r3, #6
 8007718:	4a09      	ldr	r2, [pc, #36]	; (8007740 <vPortSetupTimerInterrupt+0x44>)
 800771a:	3b01      	subs	r3, #1
 800771c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800771e:	4b04      	ldr	r3, [pc, #16]	; (8007730 <vPortSetupTimerInterrupt+0x34>)
 8007720:	2207      	movs	r2, #7
 8007722:	601a      	str	r2, [r3, #0]
}
 8007724:	bf00      	nop
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	e000e010 	.word	0xe000e010
 8007734:	e000e018 	.word	0xe000e018
 8007738:	20000038 	.word	0x20000038
 800773c:	10624dd3 	.word	0x10624dd3
 8007740:	e000e014 	.word	0xe000e014

08007744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007754 <vPortEnableVFP+0x10>
 8007748:	6801      	ldr	r1, [r0, #0]
 800774a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800774e:	6001      	str	r1, [r0, #0]
 8007750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007752:	bf00      	nop
 8007754:	e000ed88 	.word	0xe000ed88

08007758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800775e:	f3ef 8305 	mrs	r3, IPSR
 8007762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b0f      	cmp	r3, #15
 8007768:	d914      	bls.n	8007794 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800776a:	4a17      	ldr	r2, [pc, #92]	; (80077c8 <vPortValidateInterruptPriority+0x70>)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007774:	4b15      	ldr	r3, [pc, #84]	; (80077cc <vPortValidateInterruptPriority+0x74>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	7afa      	ldrb	r2, [r7, #11]
 800777a:	429a      	cmp	r2, r3
 800777c:	d20a      	bcs.n	8007794 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	607b      	str	r3, [r7, #4]
}
 8007790:	bf00      	nop
 8007792:	e7fe      	b.n	8007792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007794:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <vPortValidateInterruptPriority+0x78>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800779c:	4b0d      	ldr	r3, [pc, #52]	; (80077d4 <vPortValidateInterruptPriority+0x7c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d90a      	bls.n	80077ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80077a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	603b      	str	r3, [r7, #0]
}
 80077b6:	bf00      	nop
 80077b8:	e7fe      	b.n	80077b8 <vPortValidateInterruptPriority+0x60>
	}
 80077ba:	bf00      	nop
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	e000e3f0 	.word	0xe000e3f0
 80077cc:	2000073c 	.word	0x2000073c
 80077d0:	e000ed0c 	.word	0xe000ed0c
 80077d4:	20000740 	.word	0x20000740

080077d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08a      	sub	sp, #40	; 0x28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077e4:	f7ff f8f6 	bl	80069d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077e8:	4b5b      	ldr	r3, [pc, #364]	; (8007958 <pvPortMalloc+0x180>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077f0:	f000 f920 	bl	8007a34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077f4:	4b59      	ldr	r3, [pc, #356]	; (800795c <pvPortMalloc+0x184>)
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4013      	ands	r3, r2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f040 8093 	bne.w	8007928 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01d      	beq.n	8007844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007808:	2208      	movs	r2, #8
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4413      	add	r3, r2
 800780e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	2b00      	cmp	r3, #0
 8007818:	d014      	beq.n	8007844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f023 0307 	bic.w	r3, r3, #7
 8007820:	3308      	adds	r3, #8
 8007822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <pvPortMalloc+0x6c>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	617b      	str	r3, [r7, #20]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d06e      	beq.n	8007928 <pvPortMalloc+0x150>
 800784a:	4b45      	ldr	r3, [pc, #276]	; (8007960 <pvPortMalloc+0x188>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	429a      	cmp	r2, r3
 8007852:	d869      	bhi.n	8007928 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007854:	4b43      	ldr	r3, [pc, #268]	; (8007964 <pvPortMalloc+0x18c>)
 8007856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007858:	4b42      	ldr	r3, [pc, #264]	; (8007964 <pvPortMalloc+0x18c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800785e:	e004      	b.n	800786a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	429a      	cmp	r2, r3
 8007872:	d903      	bls.n	800787c <pvPortMalloc+0xa4>
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1f1      	bne.n	8007860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800787c:	4b36      	ldr	r3, [pc, #216]	; (8007958 <pvPortMalloc+0x180>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007882:	429a      	cmp	r2, r3
 8007884:	d050      	beq.n	8007928 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2208      	movs	r2, #8
 800788c:	4413      	add	r3, r2
 800788e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	1ad2      	subs	r2, r2, r3
 80078a0:	2308      	movs	r3, #8
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d91f      	bls.n	80078e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4413      	add	r3, r2
 80078ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00a      	beq.n	80078d0 <pvPortMalloc+0xf8>
	__asm volatile
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	613b      	str	r3, [r7, #16]
}
 80078cc:	bf00      	nop
 80078ce:	e7fe      	b.n	80078ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	1ad2      	subs	r2, r2, r3
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078e2:	69b8      	ldr	r0, [r7, #24]
 80078e4:	f000 f908 	bl	8007af8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078e8:	4b1d      	ldr	r3, [pc, #116]	; (8007960 <pvPortMalloc+0x188>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	4a1b      	ldr	r2, [pc, #108]	; (8007960 <pvPortMalloc+0x188>)
 80078f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078f6:	4b1a      	ldr	r3, [pc, #104]	; (8007960 <pvPortMalloc+0x188>)
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	4b1b      	ldr	r3, [pc, #108]	; (8007968 <pvPortMalloc+0x190>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d203      	bcs.n	800790a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007902:	4b17      	ldr	r3, [pc, #92]	; (8007960 <pvPortMalloc+0x188>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a18      	ldr	r2, [pc, #96]	; (8007968 <pvPortMalloc+0x190>)
 8007908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	4b13      	ldr	r3, [pc, #76]	; (800795c <pvPortMalloc+0x184>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	431a      	orrs	r2, r3
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800791e:	4b13      	ldr	r3, [pc, #76]	; (800796c <pvPortMalloc+0x194>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3301      	adds	r3, #1
 8007924:	4a11      	ldr	r2, [pc, #68]	; (800796c <pvPortMalloc+0x194>)
 8007926:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007928:	f7ff f862 	bl	80069f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00a      	beq.n	800794c <pvPortMalloc+0x174>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	60fb      	str	r3, [r7, #12]
}
 8007948:	bf00      	nop
 800794a:	e7fe      	b.n	800794a <pvPortMalloc+0x172>
	return pvReturn;
 800794c:	69fb      	ldr	r3, [r7, #28]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3728      	adds	r7, #40	; 0x28
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	2000434c 	.word	0x2000434c
 800795c:	20004360 	.word	0x20004360
 8007960:	20004350 	.word	0x20004350
 8007964:	20004344 	.word	0x20004344
 8007968:	20004354 	.word	0x20004354
 800796c:	20004358 	.word	0x20004358

08007970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d04d      	beq.n	8007a1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007982:	2308      	movs	r3, #8
 8007984:	425b      	negs	r3, r3
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	4413      	add	r3, r2
 800798a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	4b24      	ldr	r3, [pc, #144]	; (8007a28 <vPortFree+0xb8>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4013      	ands	r3, r2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <vPortFree+0x44>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	60fb      	str	r3, [r7, #12]
}
 80079b0:	bf00      	nop
 80079b2:	e7fe      	b.n	80079b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00a      	beq.n	80079d2 <vPortFree+0x62>
	__asm volatile
 80079bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	60bb      	str	r3, [r7, #8]
}
 80079ce:	bf00      	nop
 80079d0:	e7fe      	b.n	80079d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	4b14      	ldr	r3, [pc, #80]	; (8007a28 <vPortFree+0xb8>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4013      	ands	r3, r2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01e      	beq.n	8007a1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d11a      	bne.n	8007a1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	4b0e      	ldr	r3, [pc, #56]	; (8007a28 <vPortFree+0xb8>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	43db      	mvns	r3, r3
 80079f2:	401a      	ands	r2, r3
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079f8:	f7fe ffec 	bl	80069d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <vPortFree+0xbc>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4413      	add	r3, r2
 8007a06:	4a09      	ldr	r2, [pc, #36]	; (8007a2c <vPortFree+0xbc>)
 8007a08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a0a:	6938      	ldr	r0, [r7, #16]
 8007a0c:	f000 f874 	bl	8007af8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a10:	4b07      	ldr	r3, [pc, #28]	; (8007a30 <vPortFree+0xc0>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3301      	adds	r3, #1
 8007a16:	4a06      	ldr	r2, [pc, #24]	; (8007a30 <vPortFree+0xc0>)
 8007a18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a1a:	f7fe ffe9 	bl	80069f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a1e:	bf00      	nop
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20004360 	.word	0x20004360
 8007a2c:	20004350 	.word	0x20004350
 8007a30:	2000435c 	.word	0x2000435c

08007a34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007a3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a40:	4b27      	ldr	r3, [pc, #156]	; (8007ae0 <prvHeapInit+0xac>)
 8007a42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00c      	beq.n	8007a68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3307      	adds	r3, #7
 8007a52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f023 0307 	bic.w	r3, r3, #7
 8007a5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	4a1f      	ldr	r2, [pc, #124]	; (8007ae0 <prvHeapInit+0xac>)
 8007a64:	4413      	add	r3, r2
 8007a66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ae4 <prvHeapInit+0xb0>)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a72:	4b1c      	ldr	r3, [pc, #112]	; (8007ae4 <prvHeapInit+0xb0>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a80:	2208      	movs	r2, #8
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0307 	bic.w	r3, r3, #7
 8007a8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4a15      	ldr	r2, [pc, #84]	; (8007ae8 <prvHeapInit+0xb4>)
 8007a94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a96:	4b14      	ldr	r3, [pc, #80]	; (8007ae8 <prvHeapInit+0xb4>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a9e:	4b12      	ldr	r3, [pc, #72]	; (8007ae8 <prvHeapInit+0xb4>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	1ad2      	subs	r2, r2, r3
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ab4:	4b0c      	ldr	r3, [pc, #48]	; (8007ae8 <prvHeapInit+0xb4>)
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	4a0a      	ldr	r2, [pc, #40]	; (8007aec <prvHeapInit+0xb8>)
 8007ac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	4a09      	ldr	r2, [pc, #36]	; (8007af0 <prvHeapInit+0xbc>)
 8007aca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007acc:	4b09      	ldr	r3, [pc, #36]	; (8007af4 <prvHeapInit+0xc0>)
 8007ace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ad2:	601a      	str	r2, [r3, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	20000744 	.word	0x20000744
 8007ae4:	20004344 	.word	0x20004344
 8007ae8:	2000434c 	.word	0x2000434c
 8007aec:	20004354 	.word	0x20004354
 8007af0:	20004350 	.word	0x20004350
 8007af4:	20004360 	.word	0x20004360

08007af8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b00:	4b28      	ldr	r3, [pc, #160]	; (8007ba4 <prvInsertBlockIntoFreeList+0xac>)
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e002      	b.n	8007b0c <prvInsertBlockIntoFreeList+0x14>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d8f7      	bhi.n	8007b06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	4413      	add	r3, r2
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d108      	bne.n	8007b3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	441a      	add	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	441a      	add	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d118      	bne.n	8007b80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	4b15      	ldr	r3, [pc, #84]	; (8007ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d00d      	beq.n	8007b76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	441a      	add	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	e008      	b.n	8007b88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b76:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	e003      	b.n	8007b88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d002      	beq.n	8007b96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b96:	bf00      	nop
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	20004344 	.word	0x20004344
 8007ba8:	2000434c 	.word	0x2000434c

08007bac <atof>:
 8007bac:	2100      	movs	r1, #0
 8007bae:	f001 bd75 	b.w	800969c <strtod>

08007bb2 <atoi>:
 8007bb2:	220a      	movs	r2, #10
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	f001 be01 	b.w	80097bc <strtol>
	...

08007bbc <__errno>:
 8007bbc:	4b01      	ldr	r3, [pc, #4]	; (8007bc4 <__errno+0x8>)
 8007bbe:	6818      	ldr	r0, [r3, #0]
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	20000044 	.word	0x20000044

08007bc8 <std>:
 8007bc8:	2300      	movs	r3, #0
 8007bca:	b510      	push	{r4, lr}
 8007bcc:	4604      	mov	r4, r0
 8007bce:	e9c0 3300 	strd	r3, r3, [r0]
 8007bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bd6:	6083      	str	r3, [r0, #8]
 8007bd8:	8181      	strh	r1, [r0, #12]
 8007bda:	6643      	str	r3, [r0, #100]	; 0x64
 8007bdc:	81c2      	strh	r2, [r0, #14]
 8007bde:	6183      	str	r3, [r0, #24]
 8007be0:	4619      	mov	r1, r3
 8007be2:	2208      	movs	r2, #8
 8007be4:	305c      	adds	r0, #92	; 0x5c
 8007be6:	f000 f91a 	bl	8007e1e <memset>
 8007bea:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <std+0x38>)
 8007bec:	6263      	str	r3, [r4, #36]	; 0x24
 8007bee:	4b05      	ldr	r3, [pc, #20]	; (8007c04 <std+0x3c>)
 8007bf0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bf2:	4b05      	ldr	r3, [pc, #20]	; (8007c08 <std+0x40>)
 8007bf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bf6:	4b05      	ldr	r3, [pc, #20]	; (8007c0c <std+0x44>)
 8007bf8:	6224      	str	r4, [r4, #32]
 8007bfa:	6323      	str	r3, [r4, #48]	; 0x30
 8007bfc:	bd10      	pop	{r4, pc}
 8007bfe:	bf00      	nop
 8007c00:	080089c9 	.word	0x080089c9
 8007c04:	080089eb 	.word	0x080089eb
 8007c08:	08008a23 	.word	0x08008a23
 8007c0c:	08008a47 	.word	0x08008a47

08007c10 <_cleanup_r>:
 8007c10:	4901      	ldr	r1, [pc, #4]	; (8007c18 <_cleanup_r+0x8>)
 8007c12:	f000 b8af 	b.w	8007d74 <_fwalk_reent>
 8007c16:	bf00      	nop
 8007c18:	0800a795 	.word	0x0800a795

08007c1c <__sfmoreglue>:
 8007c1c:	b570      	push	{r4, r5, r6, lr}
 8007c1e:	1e4a      	subs	r2, r1, #1
 8007c20:	2568      	movs	r5, #104	; 0x68
 8007c22:	4355      	muls	r5, r2
 8007c24:	460e      	mov	r6, r1
 8007c26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c2a:	f000 f901 	bl	8007e30 <_malloc_r>
 8007c2e:	4604      	mov	r4, r0
 8007c30:	b140      	cbz	r0, 8007c44 <__sfmoreglue+0x28>
 8007c32:	2100      	movs	r1, #0
 8007c34:	e9c0 1600 	strd	r1, r6, [r0]
 8007c38:	300c      	adds	r0, #12
 8007c3a:	60a0      	str	r0, [r4, #8]
 8007c3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c40:	f000 f8ed 	bl	8007e1e <memset>
 8007c44:	4620      	mov	r0, r4
 8007c46:	bd70      	pop	{r4, r5, r6, pc}

08007c48 <__sfp_lock_acquire>:
 8007c48:	4801      	ldr	r0, [pc, #4]	; (8007c50 <__sfp_lock_acquire+0x8>)
 8007c4a:	f000 b8d8 	b.w	8007dfe <__retarget_lock_acquire_recursive>
 8007c4e:	bf00      	nop
 8007c50:	200045f4 	.word	0x200045f4

08007c54 <__sfp_lock_release>:
 8007c54:	4801      	ldr	r0, [pc, #4]	; (8007c5c <__sfp_lock_release+0x8>)
 8007c56:	f000 b8d3 	b.w	8007e00 <__retarget_lock_release_recursive>
 8007c5a:	bf00      	nop
 8007c5c:	200045f4 	.word	0x200045f4

08007c60 <__sinit_lock_acquire>:
 8007c60:	4801      	ldr	r0, [pc, #4]	; (8007c68 <__sinit_lock_acquire+0x8>)
 8007c62:	f000 b8cc 	b.w	8007dfe <__retarget_lock_acquire_recursive>
 8007c66:	bf00      	nop
 8007c68:	200045ef 	.word	0x200045ef

08007c6c <__sinit_lock_release>:
 8007c6c:	4801      	ldr	r0, [pc, #4]	; (8007c74 <__sinit_lock_release+0x8>)
 8007c6e:	f000 b8c7 	b.w	8007e00 <__retarget_lock_release_recursive>
 8007c72:	bf00      	nop
 8007c74:	200045ef 	.word	0x200045ef

08007c78 <__sinit>:
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	f7ff fff0 	bl	8007c60 <__sinit_lock_acquire>
 8007c80:	69a3      	ldr	r3, [r4, #24]
 8007c82:	b11b      	cbz	r3, 8007c8c <__sinit+0x14>
 8007c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c88:	f7ff bff0 	b.w	8007c6c <__sinit_lock_release>
 8007c8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c90:	6523      	str	r3, [r4, #80]	; 0x50
 8007c92:	4b13      	ldr	r3, [pc, #76]	; (8007ce0 <__sinit+0x68>)
 8007c94:	4a13      	ldr	r2, [pc, #76]	; (8007ce4 <__sinit+0x6c>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c9a:	42a3      	cmp	r3, r4
 8007c9c:	bf04      	itt	eq
 8007c9e:	2301      	moveq	r3, #1
 8007ca0:	61a3      	streq	r3, [r4, #24]
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f000 f820 	bl	8007ce8 <__sfp>
 8007ca8:	6060      	str	r0, [r4, #4]
 8007caa:	4620      	mov	r0, r4
 8007cac:	f000 f81c 	bl	8007ce8 <__sfp>
 8007cb0:	60a0      	str	r0, [r4, #8]
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f000 f818 	bl	8007ce8 <__sfp>
 8007cb8:	2200      	movs	r2, #0
 8007cba:	60e0      	str	r0, [r4, #12]
 8007cbc:	2104      	movs	r1, #4
 8007cbe:	6860      	ldr	r0, [r4, #4]
 8007cc0:	f7ff ff82 	bl	8007bc8 <std>
 8007cc4:	68a0      	ldr	r0, [r4, #8]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	2109      	movs	r1, #9
 8007cca:	f7ff ff7d 	bl	8007bc8 <std>
 8007cce:	68e0      	ldr	r0, [r4, #12]
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	2112      	movs	r1, #18
 8007cd4:	f7ff ff78 	bl	8007bc8 <std>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	61a3      	str	r3, [r4, #24]
 8007cdc:	e7d2      	b.n	8007c84 <__sinit+0xc>
 8007cde:	bf00      	nop
 8007ce0:	0800c378 	.word	0x0800c378
 8007ce4:	08007c11 	.word	0x08007c11

08007ce8 <__sfp>:
 8007ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cea:	4607      	mov	r7, r0
 8007cec:	f7ff ffac 	bl	8007c48 <__sfp_lock_acquire>
 8007cf0:	4b1e      	ldr	r3, [pc, #120]	; (8007d6c <__sfp+0x84>)
 8007cf2:	681e      	ldr	r6, [r3, #0]
 8007cf4:	69b3      	ldr	r3, [r6, #24]
 8007cf6:	b913      	cbnz	r3, 8007cfe <__sfp+0x16>
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	f7ff ffbd 	bl	8007c78 <__sinit>
 8007cfe:	3648      	adds	r6, #72	; 0x48
 8007d00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d04:	3b01      	subs	r3, #1
 8007d06:	d503      	bpl.n	8007d10 <__sfp+0x28>
 8007d08:	6833      	ldr	r3, [r6, #0]
 8007d0a:	b30b      	cbz	r3, 8007d50 <__sfp+0x68>
 8007d0c:	6836      	ldr	r6, [r6, #0]
 8007d0e:	e7f7      	b.n	8007d00 <__sfp+0x18>
 8007d10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d14:	b9d5      	cbnz	r5, 8007d4c <__sfp+0x64>
 8007d16:	4b16      	ldr	r3, [pc, #88]	; (8007d70 <__sfp+0x88>)
 8007d18:	60e3      	str	r3, [r4, #12]
 8007d1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d1e:	6665      	str	r5, [r4, #100]	; 0x64
 8007d20:	f000 f86c 	bl	8007dfc <__retarget_lock_init_recursive>
 8007d24:	f7ff ff96 	bl	8007c54 <__sfp_lock_release>
 8007d28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d30:	6025      	str	r5, [r4, #0]
 8007d32:	61a5      	str	r5, [r4, #24]
 8007d34:	2208      	movs	r2, #8
 8007d36:	4629      	mov	r1, r5
 8007d38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d3c:	f000 f86f 	bl	8007e1e <memset>
 8007d40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d48:	4620      	mov	r0, r4
 8007d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d4c:	3468      	adds	r4, #104	; 0x68
 8007d4e:	e7d9      	b.n	8007d04 <__sfp+0x1c>
 8007d50:	2104      	movs	r1, #4
 8007d52:	4638      	mov	r0, r7
 8007d54:	f7ff ff62 	bl	8007c1c <__sfmoreglue>
 8007d58:	4604      	mov	r4, r0
 8007d5a:	6030      	str	r0, [r6, #0]
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d1d5      	bne.n	8007d0c <__sfp+0x24>
 8007d60:	f7ff ff78 	bl	8007c54 <__sfp_lock_release>
 8007d64:	230c      	movs	r3, #12
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	e7ee      	b.n	8007d48 <__sfp+0x60>
 8007d6a:	bf00      	nop
 8007d6c:	0800c378 	.word	0x0800c378
 8007d70:	ffff0001 	.word	0xffff0001

08007d74 <_fwalk_reent>:
 8007d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d78:	4606      	mov	r6, r0
 8007d7a:	4688      	mov	r8, r1
 8007d7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d80:	2700      	movs	r7, #0
 8007d82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d86:	f1b9 0901 	subs.w	r9, r9, #1
 8007d8a:	d505      	bpl.n	8007d98 <_fwalk_reent+0x24>
 8007d8c:	6824      	ldr	r4, [r4, #0]
 8007d8e:	2c00      	cmp	r4, #0
 8007d90:	d1f7      	bne.n	8007d82 <_fwalk_reent+0xe>
 8007d92:	4638      	mov	r0, r7
 8007d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d98:	89ab      	ldrh	r3, [r5, #12]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d907      	bls.n	8007dae <_fwalk_reent+0x3a>
 8007d9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007da2:	3301      	adds	r3, #1
 8007da4:	d003      	beq.n	8007dae <_fwalk_reent+0x3a>
 8007da6:	4629      	mov	r1, r5
 8007da8:	4630      	mov	r0, r6
 8007daa:	47c0      	blx	r8
 8007dac:	4307      	orrs	r7, r0
 8007dae:	3568      	adds	r5, #104	; 0x68
 8007db0:	e7e9      	b.n	8007d86 <_fwalk_reent+0x12>
	...

08007db4 <__libc_init_array>:
 8007db4:	b570      	push	{r4, r5, r6, lr}
 8007db6:	4d0d      	ldr	r5, [pc, #52]	; (8007dec <__libc_init_array+0x38>)
 8007db8:	4c0d      	ldr	r4, [pc, #52]	; (8007df0 <__libc_init_array+0x3c>)
 8007dba:	1b64      	subs	r4, r4, r5
 8007dbc:	10a4      	asrs	r4, r4, #2
 8007dbe:	2600      	movs	r6, #0
 8007dc0:	42a6      	cmp	r6, r4
 8007dc2:	d109      	bne.n	8007dd8 <__libc_init_array+0x24>
 8007dc4:	4d0b      	ldr	r5, [pc, #44]	; (8007df4 <__libc_init_array+0x40>)
 8007dc6:	4c0c      	ldr	r4, [pc, #48]	; (8007df8 <__libc_init_array+0x44>)
 8007dc8:	f004 f87c 	bl	800bec4 <_init>
 8007dcc:	1b64      	subs	r4, r4, r5
 8007dce:	10a4      	asrs	r4, r4, #2
 8007dd0:	2600      	movs	r6, #0
 8007dd2:	42a6      	cmp	r6, r4
 8007dd4:	d105      	bne.n	8007de2 <__libc_init_array+0x2e>
 8007dd6:	bd70      	pop	{r4, r5, r6, pc}
 8007dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ddc:	4798      	blx	r3
 8007dde:	3601      	adds	r6, #1
 8007de0:	e7ee      	b.n	8007dc0 <__libc_init_array+0xc>
 8007de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007de6:	4798      	blx	r3
 8007de8:	3601      	adds	r6, #1
 8007dea:	e7f2      	b.n	8007dd2 <__libc_init_array+0x1e>
 8007dec:	0800c7cc 	.word	0x0800c7cc
 8007df0:	0800c7cc 	.word	0x0800c7cc
 8007df4:	0800c7cc 	.word	0x0800c7cc
 8007df8:	0800c7d0 	.word	0x0800c7d0

08007dfc <__retarget_lock_init_recursive>:
 8007dfc:	4770      	bx	lr

08007dfe <__retarget_lock_acquire_recursive>:
 8007dfe:	4770      	bx	lr

08007e00 <__retarget_lock_release_recursive>:
 8007e00:	4770      	bx	lr

08007e02 <memcpy>:
 8007e02:	440a      	add	r2, r1
 8007e04:	4291      	cmp	r1, r2
 8007e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e0a:	d100      	bne.n	8007e0e <memcpy+0xc>
 8007e0c:	4770      	bx	lr
 8007e0e:	b510      	push	{r4, lr}
 8007e10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e18:	4291      	cmp	r1, r2
 8007e1a:	d1f9      	bne.n	8007e10 <memcpy+0xe>
 8007e1c:	bd10      	pop	{r4, pc}

08007e1e <memset>:
 8007e1e:	4402      	add	r2, r0
 8007e20:	4603      	mov	r3, r0
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d100      	bne.n	8007e28 <memset+0xa>
 8007e26:	4770      	bx	lr
 8007e28:	f803 1b01 	strb.w	r1, [r3], #1
 8007e2c:	e7f9      	b.n	8007e22 <memset+0x4>
	...

08007e30 <_malloc_r>:
 8007e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e32:	1ccd      	adds	r5, r1, #3
 8007e34:	f025 0503 	bic.w	r5, r5, #3
 8007e38:	3508      	adds	r5, #8
 8007e3a:	2d0c      	cmp	r5, #12
 8007e3c:	bf38      	it	cc
 8007e3e:	250c      	movcc	r5, #12
 8007e40:	2d00      	cmp	r5, #0
 8007e42:	4606      	mov	r6, r0
 8007e44:	db01      	blt.n	8007e4a <_malloc_r+0x1a>
 8007e46:	42a9      	cmp	r1, r5
 8007e48:	d903      	bls.n	8007e52 <_malloc_r+0x22>
 8007e4a:	230c      	movs	r3, #12
 8007e4c:	6033      	str	r3, [r6, #0]
 8007e4e:	2000      	movs	r0, #0
 8007e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e52:	f003 f8df 	bl	800b014 <__malloc_lock>
 8007e56:	4921      	ldr	r1, [pc, #132]	; (8007edc <_malloc_r+0xac>)
 8007e58:	680a      	ldr	r2, [r1, #0]
 8007e5a:	4614      	mov	r4, r2
 8007e5c:	b99c      	cbnz	r4, 8007e86 <_malloc_r+0x56>
 8007e5e:	4f20      	ldr	r7, [pc, #128]	; (8007ee0 <_malloc_r+0xb0>)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	b923      	cbnz	r3, 8007e6e <_malloc_r+0x3e>
 8007e64:	4621      	mov	r1, r4
 8007e66:	4630      	mov	r0, r6
 8007e68:	f000 fd9e 	bl	80089a8 <_sbrk_r>
 8007e6c:	6038      	str	r0, [r7, #0]
 8007e6e:	4629      	mov	r1, r5
 8007e70:	4630      	mov	r0, r6
 8007e72:	f000 fd99 	bl	80089a8 <_sbrk_r>
 8007e76:	1c43      	adds	r3, r0, #1
 8007e78:	d123      	bne.n	8007ec2 <_malloc_r+0x92>
 8007e7a:	230c      	movs	r3, #12
 8007e7c:	6033      	str	r3, [r6, #0]
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f003 f8ce 	bl	800b020 <__malloc_unlock>
 8007e84:	e7e3      	b.n	8007e4e <_malloc_r+0x1e>
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	1b5b      	subs	r3, r3, r5
 8007e8a:	d417      	bmi.n	8007ebc <_malloc_r+0x8c>
 8007e8c:	2b0b      	cmp	r3, #11
 8007e8e:	d903      	bls.n	8007e98 <_malloc_r+0x68>
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	441c      	add	r4, r3
 8007e94:	6025      	str	r5, [r4, #0]
 8007e96:	e004      	b.n	8007ea2 <_malloc_r+0x72>
 8007e98:	6863      	ldr	r3, [r4, #4]
 8007e9a:	42a2      	cmp	r2, r4
 8007e9c:	bf0c      	ite	eq
 8007e9e:	600b      	streq	r3, [r1, #0]
 8007ea0:	6053      	strne	r3, [r2, #4]
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	f003 f8bc 	bl	800b020 <__malloc_unlock>
 8007ea8:	f104 000b 	add.w	r0, r4, #11
 8007eac:	1d23      	adds	r3, r4, #4
 8007eae:	f020 0007 	bic.w	r0, r0, #7
 8007eb2:	1ac2      	subs	r2, r0, r3
 8007eb4:	d0cc      	beq.n	8007e50 <_malloc_r+0x20>
 8007eb6:	1a1b      	subs	r3, r3, r0
 8007eb8:	50a3      	str	r3, [r4, r2]
 8007eba:	e7c9      	b.n	8007e50 <_malloc_r+0x20>
 8007ebc:	4622      	mov	r2, r4
 8007ebe:	6864      	ldr	r4, [r4, #4]
 8007ec0:	e7cc      	b.n	8007e5c <_malloc_r+0x2c>
 8007ec2:	1cc4      	adds	r4, r0, #3
 8007ec4:	f024 0403 	bic.w	r4, r4, #3
 8007ec8:	42a0      	cmp	r0, r4
 8007eca:	d0e3      	beq.n	8007e94 <_malloc_r+0x64>
 8007ecc:	1a21      	subs	r1, r4, r0
 8007ece:	4630      	mov	r0, r6
 8007ed0:	f000 fd6a 	bl	80089a8 <_sbrk_r>
 8007ed4:	3001      	adds	r0, #1
 8007ed6:	d1dd      	bne.n	8007e94 <_malloc_r+0x64>
 8007ed8:	e7cf      	b.n	8007e7a <_malloc_r+0x4a>
 8007eda:	bf00      	nop
 8007edc:	20004364 	.word	0x20004364
 8007ee0:	20004368 	.word	0x20004368

08007ee4 <__cvt>:
 8007ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee8:	ec55 4b10 	vmov	r4, r5, d0
 8007eec:	2d00      	cmp	r5, #0
 8007eee:	460e      	mov	r6, r1
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	462b      	mov	r3, r5
 8007ef4:	bfbb      	ittet	lt
 8007ef6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007efa:	461d      	movlt	r5, r3
 8007efc:	2300      	movge	r3, #0
 8007efe:	232d      	movlt	r3, #45	; 0x2d
 8007f00:	700b      	strb	r3, [r1, #0]
 8007f02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f08:	4691      	mov	r9, r2
 8007f0a:	f023 0820 	bic.w	r8, r3, #32
 8007f0e:	bfbc      	itt	lt
 8007f10:	4622      	movlt	r2, r4
 8007f12:	4614      	movlt	r4, r2
 8007f14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f18:	d005      	beq.n	8007f26 <__cvt+0x42>
 8007f1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f1e:	d100      	bne.n	8007f22 <__cvt+0x3e>
 8007f20:	3601      	adds	r6, #1
 8007f22:	2102      	movs	r1, #2
 8007f24:	e000      	b.n	8007f28 <__cvt+0x44>
 8007f26:	2103      	movs	r1, #3
 8007f28:	ab03      	add	r3, sp, #12
 8007f2a:	9301      	str	r3, [sp, #4]
 8007f2c:	ab02      	add	r3, sp, #8
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	ec45 4b10 	vmov	d0, r4, r5
 8007f34:	4653      	mov	r3, sl
 8007f36:	4632      	mov	r2, r6
 8007f38:	f001 fdba 	bl	8009ab0 <_dtoa_r>
 8007f3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f40:	4607      	mov	r7, r0
 8007f42:	d102      	bne.n	8007f4a <__cvt+0x66>
 8007f44:	f019 0f01 	tst.w	r9, #1
 8007f48:	d022      	beq.n	8007f90 <__cvt+0xac>
 8007f4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f4e:	eb07 0906 	add.w	r9, r7, r6
 8007f52:	d110      	bne.n	8007f76 <__cvt+0x92>
 8007f54:	783b      	ldrb	r3, [r7, #0]
 8007f56:	2b30      	cmp	r3, #48	; 0x30
 8007f58:	d10a      	bne.n	8007f70 <__cvt+0x8c>
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4620      	mov	r0, r4
 8007f60:	4629      	mov	r1, r5
 8007f62:	f7f8 fde1 	bl	8000b28 <__aeabi_dcmpeq>
 8007f66:	b918      	cbnz	r0, 8007f70 <__cvt+0x8c>
 8007f68:	f1c6 0601 	rsb	r6, r6, #1
 8007f6c:	f8ca 6000 	str.w	r6, [sl]
 8007f70:	f8da 3000 	ldr.w	r3, [sl]
 8007f74:	4499      	add	r9, r3
 8007f76:	2200      	movs	r2, #0
 8007f78:	2300      	movs	r3, #0
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	f7f8 fdd3 	bl	8000b28 <__aeabi_dcmpeq>
 8007f82:	b108      	cbz	r0, 8007f88 <__cvt+0xa4>
 8007f84:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f88:	2230      	movs	r2, #48	; 0x30
 8007f8a:	9b03      	ldr	r3, [sp, #12]
 8007f8c:	454b      	cmp	r3, r9
 8007f8e:	d307      	bcc.n	8007fa0 <__cvt+0xbc>
 8007f90:	9b03      	ldr	r3, [sp, #12]
 8007f92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f94:	1bdb      	subs	r3, r3, r7
 8007f96:	4638      	mov	r0, r7
 8007f98:	6013      	str	r3, [r2, #0]
 8007f9a:	b004      	add	sp, #16
 8007f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa0:	1c59      	adds	r1, r3, #1
 8007fa2:	9103      	str	r1, [sp, #12]
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	e7f0      	b.n	8007f8a <__cvt+0xa6>

08007fa8 <__exponent>:
 8007fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007faa:	4603      	mov	r3, r0
 8007fac:	2900      	cmp	r1, #0
 8007fae:	bfb8      	it	lt
 8007fb0:	4249      	neglt	r1, r1
 8007fb2:	f803 2b02 	strb.w	r2, [r3], #2
 8007fb6:	bfb4      	ite	lt
 8007fb8:	222d      	movlt	r2, #45	; 0x2d
 8007fba:	222b      	movge	r2, #43	; 0x2b
 8007fbc:	2909      	cmp	r1, #9
 8007fbe:	7042      	strb	r2, [r0, #1]
 8007fc0:	dd2a      	ble.n	8008018 <__exponent+0x70>
 8007fc2:	f10d 0407 	add.w	r4, sp, #7
 8007fc6:	46a4      	mov	ip, r4
 8007fc8:	270a      	movs	r7, #10
 8007fca:	46a6      	mov	lr, r4
 8007fcc:	460a      	mov	r2, r1
 8007fce:	fb91 f6f7 	sdiv	r6, r1, r7
 8007fd2:	fb07 1516 	mls	r5, r7, r6, r1
 8007fd6:	3530      	adds	r5, #48	; 0x30
 8007fd8:	2a63      	cmp	r2, #99	; 0x63
 8007fda:	f104 34ff 	add.w	r4, r4, #4294967295
 8007fde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	dcf1      	bgt.n	8007fca <__exponent+0x22>
 8007fe6:	3130      	adds	r1, #48	; 0x30
 8007fe8:	f1ae 0502 	sub.w	r5, lr, #2
 8007fec:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ff0:	1c44      	adds	r4, r0, #1
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	4561      	cmp	r1, ip
 8007ff6:	d30a      	bcc.n	800800e <__exponent+0x66>
 8007ff8:	f10d 0209 	add.w	r2, sp, #9
 8007ffc:	eba2 020e 	sub.w	r2, r2, lr
 8008000:	4565      	cmp	r5, ip
 8008002:	bf88      	it	hi
 8008004:	2200      	movhi	r2, #0
 8008006:	4413      	add	r3, r2
 8008008:	1a18      	subs	r0, r3, r0
 800800a:	b003      	add	sp, #12
 800800c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800800e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008012:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008016:	e7ed      	b.n	8007ff4 <__exponent+0x4c>
 8008018:	2330      	movs	r3, #48	; 0x30
 800801a:	3130      	adds	r1, #48	; 0x30
 800801c:	7083      	strb	r3, [r0, #2]
 800801e:	70c1      	strb	r1, [r0, #3]
 8008020:	1d03      	adds	r3, r0, #4
 8008022:	e7f1      	b.n	8008008 <__exponent+0x60>

08008024 <_printf_float>:
 8008024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008028:	ed2d 8b02 	vpush	{d8}
 800802c:	b08d      	sub	sp, #52	; 0x34
 800802e:	460c      	mov	r4, r1
 8008030:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008034:	4616      	mov	r6, r2
 8008036:	461f      	mov	r7, r3
 8008038:	4605      	mov	r5, r0
 800803a:	f002 ff57 	bl	800aeec <_localeconv_r>
 800803e:	f8d0 a000 	ldr.w	sl, [r0]
 8008042:	4650      	mov	r0, sl
 8008044:	f7f8 f8ee 	bl	8000224 <strlen>
 8008048:	2300      	movs	r3, #0
 800804a:	930a      	str	r3, [sp, #40]	; 0x28
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	9305      	str	r3, [sp, #20]
 8008050:	f8d8 3000 	ldr.w	r3, [r8]
 8008054:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008058:	3307      	adds	r3, #7
 800805a:	f023 0307 	bic.w	r3, r3, #7
 800805e:	f103 0208 	add.w	r2, r3, #8
 8008062:	f8c8 2000 	str.w	r2, [r8]
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800806e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008072:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008076:	9307      	str	r3, [sp, #28]
 8008078:	f8cd 8018 	str.w	r8, [sp, #24]
 800807c:	ee08 0a10 	vmov	s16, r0
 8008080:	4b9f      	ldr	r3, [pc, #636]	; (8008300 <_printf_float+0x2dc>)
 8008082:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008086:	f04f 32ff 	mov.w	r2, #4294967295
 800808a:	f7f8 fd7f 	bl	8000b8c <__aeabi_dcmpun>
 800808e:	bb88      	cbnz	r0, 80080f4 <_printf_float+0xd0>
 8008090:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008094:	4b9a      	ldr	r3, [pc, #616]	; (8008300 <_printf_float+0x2dc>)
 8008096:	f04f 32ff 	mov.w	r2, #4294967295
 800809a:	f7f8 fd59 	bl	8000b50 <__aeabi_dcmple>
 800809e:	bb48      	cbnz	r0, 80080f4 <_printf_float+0xd0>
 80080a0:	2200      	movs	r2, #0
 80080a2:	2300      	movs	r3, #0
 80080a4:	4640      	mov	r0, r8
 80080a6:	4649      	mov	r1, r9
 80080a8:	f7f8 fd48 	bl	8000b3c <__aeabi_dcmplt>
 80080ac:	b110      	cbz	r0, 80080b4 <_printf_float+0x90>
 80080ae:	232d      	movs	r3, #45	; 0x2d
 80080b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080b4:	4b93      	ldr	r3, [pc, #588]	; (8008304 <_printf_float+0x2e0>)
 80080b6:	4894      	ldr	r0, [pc, #592]	; (8008308 <_printf_float+0x2e4>)
 80080b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80080bc:	bf94      	ite	ls
 80080be:	4698      	movls	r8, r3
 80080c0:	4680      	movhi	r8, r0
 80080c2:	2303      	movs	r3, #3
 80080c4:	6123      	str	r3, [r4, #16]
 80080c6:	9b05      	ldr	r3, [sp, #20]
 80080c8:	f023 0204 	bic.w	r2, r3, #4
 80080cc:	6022      	str	r2, [r4, #0]
 80080ce:	f04f 0900 	mov.w	r9, #0
 80080d2:	9700      	str	r7, [sp, #0]
 80080d4:	4633      	mov	r3, r6
 80080d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80080d8:	4621      	mov	r1, r4
 80080da:	4628      	mov	r0, r5
 80080dc:	f000 f9d8 	bl	8008490 <_printf_common>
 80080e0:	3001      	adds	r0, #1
 80080e2:	f040 8090 	bne.w	8008206 <_printf_float+0x1e2>
 80080e6:	f04f 30ff 	mov.w	r0, #4294967295
 80080ea:	b00d      	add	sp, #52	; 0x34
 80080ec:	ecbd 8b02 	vpop	{d8}
 80080f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f4:	4642      	mov	r2, r8
 80080f6:	464b      	mov	r3, r9
 80080f8:	4640      	mov	r0, r8
 80080fa:	4649      	mov	r1, r9
 80080fc:	f7f8 fd46 	bl	8000b8c <__aeabi_dcmpun>
 8008100:	b140      	cbz	r0, 8008114 <_printf_float+0xf0>
 8008102:	464b      	mov	r3, r9
 8008104:	2b00      	cmp	r3, #0
 8008106:	bfbc      	itt	lt
 8008108:	232d      	movlt	r3, #45	; 0x2d
 800810a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800810e:	487f      	ldr	r0, [pc, #508]	; (800830c <_printf_float+0x2e8>)
 8008110:	4b7f      	ldr	r3, [pc, #508]	; (8008310 <_printf_float+0x2ec>)
 8008112:	e7d1      	b.n	80080b8 <_printf_float+0x94>
 8008114:	6863      	ldr	r3, [r4, #4]
 8008116:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800811a:	9206      	str	r2, [sp, #24]
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	d13f      	bne.n	80081a0 <_printf_float+0x17c>
 8008120:	2306      	movs	r3, #6
 8008122:	6063      	str	r3, [r4, #4]
 8008124:	9b05      	ldr	r3, [sp, #20]
 8008126:	6861      	ldr	r1, [r4, #4]
 8008128:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800812c:	2300      	movs	r3, #0
 800812e:	9303      	str	r3, [sp, #12]
 8008130:	ab0a      	add	r3, sp, #40	; 0x28
 8008132:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008136:	ab09      	add	r3, sp, #36	; 0x24
 8008138:	ec49 8b10 	vmov	d0, r8, r9
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	6022      	str	r2, [r4, #0]
 8008140:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008144:	4628      	mov	r0, r5
 8008146:	f7ff fecd 	bl	8007ee4 <__cvt>
 800814a:	9b06      	ldr	r3, [sp, #24]
 800814c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800814e:	2b47      	cmp	r3, #71	; 0x47
 8008150:	4680      	mov	r8, r0
 8008152:	d108      	bne.n	8008166 <_printf_float+0x142>
 8008154:	1cc8      	adds	r0, r1, #3
 8008156:	db02      	blt.n	800815e <_printf_float+0x13a>
 8008158:	6863      	ldr	r3, [r4, #4]
 800815a:	4299      	cmp	r1, r3
 800815c:	dd41      	ble.n	80081e2 <_printf_float+0x1be>
 800815e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008162:	fa5f fb8b 	uxtb.w	fp, fp
 8008166:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800816a:	d820      	bhi.n	80081ae <_printf_float+0x18a>
 800816c:	3901      	subs	r1, #1
 800816e:	465a      	mov	r2, fp
 8008170:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008174:	9109      	str	r1, [sp, #36]	; 0x24
 8008176:	f7ff ff17 	bl	8007fa8 <__exponent>
 800817a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800817c:	1813      	adds	r3, r2, r0
 800817e:	2a01      	cmp	r2, #1
 8008180:	4681      	mov	r9, r0
 8008182:	6123      	str	r3, [r4, #16]
 8008184:	dc02      	bgt.n	800818c <_printf_float+0x168>
 8008186:	6822      	ldr	r2, [r4, #0]
 8008188:	07d2      	lsls	r2, r2, #31
 800818a:	d501      	bpl.n	8008190 <_printf_float+0x16c>
 800818c:	3301      	adds	r3, #1
 800818e:	6123      	str	r3, [r4, #16]
 8008190:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008194:	2b00      	cmp	r3, #0
 8008196:	d09c      	beq.n	80080d2 <_printf_float+0xae>
 8008198:	232d      	movs	r3, #45	; 0x2d
 800819a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800819e:	e798      	b.n	80080d2 <_printf_float+0xae>
 80081a0:	9a06      	ldr	r2, [sp, #24]
 80081a2:	2a47      	cmp	r2, #71	; 0x47
 80081a4:	d1be      	bne.n	8008124 <_printf_float+0x100>
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1bc      	bne.n	8008124 <_printf_float+0x100>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e7b9      	b.n	8008122 <_printf_float+0xfe>
 80081ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80081b2:	d118      	bne.n	80081e6 <_printf_float+0x1c2>
 80081b4:	2900      	cmp	r1, #0
 80081b6:	6863      	ldr	r3, [r4, #4]
 80081b8:	dd0b      	ble.n	80081d2 <_printf_float+0x1ae>
 80081ba:	6121      	str	r1, [r4, #16]
 80081bc:	b913      	cbnz	r3, 80081c4 <_printf_float+0x1a0>
 80081be:	6822      	ldr	r2, [r4, #0]
 80081c0:	07d0      	lsls	r0, r2, #31
 80081c2:	d502      	bpl.n	80081ca <_printf_float+0x1a6>
 80081c4:	3301      	adds	r3, #1
 80081c6:	440b      	add	r3, r1
 80081c8:	6123      	str	r3, [r4, #16]
 80081ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80081cc:	f04f 0900 	mov.w	r9, #0
 80081d0:	e7de      	b.n	8008190 <_printf_float+0x16c>
 80081d2:	b913      	cbnz	r3, 80081da <_printf_float+0x1b6>
 80081d4:	6822      	ldr	r2, [r4, #0]
 80081d6:	07d2      	lsls	r2, r2, #31
 80081d8:	d501      	bpl.n	80081de <_printf_float+0x1ba>
 80081da:	3302      	adds	r3, #2
 80081dc:	e7f4      	b.n	80081c8 <_printf_float+0x1a4>
 80081de:	2301      	movs	r3, #1
 80081e0:	e7f2      	b.n	80081c8 <_printf_float+0x1a4>
 80081e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80081e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e8:	4299      	cmp	r1, r3
 80081ea:	db05      	blt.n	80081f8 <_printf_float+0x1d4>
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	6121      	str	r1, [r4, #16]
 80081f0:	07d8      	lsls	r0, r3, #31
 80081f2:	d5ea      	bpl.n	80081ca <_printf_float+0x1a6>
 80081f4:	1c4b      	adds	r3, r1, #1
 80081f6:	e7e7      	b.n	80081c8 <_printf_float+0x1a4>
 80081f8:	2900      	cmp	r1, #0
 80081fa:	bfd4      	ite	le
 80081fc:	f1c1 0202 	rsble	r2, r1, #2
 8008200:	2201      	movgt	r2, #1
 8008202:	4413      	add	r3, r2
 8008204:	e7e0      	b.n	80081c8 <_printf_float+0x1a4>
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	055a      	lsls	r2, r3, #21
 800820a:	d407      	bmi.n	800821c <_printf_float+0x1f8>
 800820c:	6923      	ldr	r3, [r4, #16]
 800820e:	4642      	mov	r2, r8
 8008210:	4631      	mov	r1, r6
 8008212:	4628      	mov	r0, r5
 8008214:	47b8      	blx	r7
 8008216:	3001      	adds	r0, #1
 8008218:	d12c      	bne.n	8008274 <_printf_float+0x250>
 800821a:	e764      	b.n	80080e6 <_printf_float+0xc2>
 800821c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008220:	f240 80e0 	bls.w	80083e4 <_printf_float+0x3c0>
 8008224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008228:	2200      	movs	r2, #0
 800822a:	2300      	movs	r3, #0
 800822c:	f7f8 fc7c 	bl	8000b28 <__aeabi_dcmpeq>
 8008230:	2800      	cmp	r0, #0
 8008232:	d034      	beq.n	800829e <_printf_float+0x27a>
 8008234:	4a37      	ldr	r2, [pc, #220]	; (8008314 <_printf_float+0x2f0>)
 8008236:	2301      	movs	r3, #1
 8008238:	4631      	mov	r1, r6
 800823a:	4628      	mov	r0, r5
 800823c:	47b8      	blx	r7
 800823e:	3001      	adds	r0, #1
 8008240:	f43f af51 	beq.w	80080e6 <_printf_float+0xc2>
 8008244:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008248:	429a      	cmp	r2, r3
 800824a:	db02      	blt.n	8008252 <_printf_float+0x22e>
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	07d8      	lsls	r0, r3, #31
 8008250:	d510      	bpl.n	8008274 <_printf_float+0x250>
 8008252:	ee18 3a10 	vmov	r3, s16
 8008256:	4652      	mov	r2, sl
 8008258:	4631      	mov	r1, r6
 800825a:	4628      	mov	r0, r5
 800825c:	47b8      	blx	r7
 800825e:	3001      	adds	r0, #1
 8008260:	f43f af41 	beq.w	80080e6 <_printf_float+0xc2>
 8008264:	f04f 0800 	mov.w	r8, #0
 8008268:	f104 091a 	add.w	r9, r4, #26
 800826c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800826e:	3b01      	subs	r3, #1
 8008270:	4543      	cmp	r3, r8
 8008272:	dc09      	bgt.n	8008288 <_printf_float+0x264>
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	079b      	lsls	r3, r3, #30
 8008278:	f100 8105 	bmi.w	8008486 <_printf_float+0x462>
 800827c:	68e0      	ldr	r0, [r4, #12]
 800827e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008280:	4298      	cmp	r0, r3
 8008282:	bfb8      	it	lt
 8008284:	4618      	movlt	r0, r3
 8008286:	e730      	b.n	80080ea <_printf_float+0xc6>
 8008288:	2301      	movs	r3, #1
 800828a:	464a      	mov	r2, r9
 800828c:	4631      	mov	r1, r6
 800828e:	4628      	mov	r0, r5
 8008290:	47b8      	blx	r7
 8008292:	3001      	adds	r0, #1
 8008294:	f43f af27 	beq.w	80080e6 <_printf_float+0xc2>
 8008298:	f108 0801 	add.w	r8, r8, #1
 800829c:	e7e6      	b.n	800826c <_printf_float+0x248>
 800829e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	dc39      	bgt.n	8008318 <_printf_float+0x2f4>
 80082a4:	4a1b      	ldr	r2, [pc, #108]	; (8008314 <_printf_float+0x2f0>)
 80082a6:	2301      	movs	r3, #1
 80082a8:	4631      	mov	r1, r6
 80082aa:	4628      	mov	r0, r5
 80082ac:	47b8      	blx	r7
 80082ae:	3001      	adds	r0, #1
 80082b0:	f43f af19 	beq.w	80080e6 <_printf_float+0xc2>
 80082b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082b8:	4313      	orrs	r3, r2
 80082ba:	d102      	bne.n	80082c2 <_printf_float+0x29e>
 80082bc:	6823      	ldr	r3, [r4, #0]
 80082be:	07d9      	lsls	r1, r3, #31
 80082c0:	d5d8      	bpl.n	8008274 <_printf_float+0x250>
 80082c2:	ee18 3a10 	vmov	r3, s16
 80082c6:	4652      	mov	r2, sl
 80082c8:	4631      	mov	r1, r6
 80082ca:	4628      	mov	r0, r5
 80082cc:	47b8      	blx	r7
 80082ce:	3001      	adds	r0, #1
 80082d0:	f43f af09 	beq.w	80080e6 <_printf_float+0xc2>
 80082d4:	f04f 0900 	mov.w	r9, #0
 80082d8:	f104 0a1a 	add.w	sl, r4, #26
 80082dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082de:	425b      	negs	r3, r3
 80082e0:	454b      	cmp	r3, r9
 80082e2:	dc01      	bgt.n	80082e8 <_printf_float+0x2c4>
 80082e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082e6:	e792      	b.n	800820e <_printf_float+0x1ea>
 80082e8:	2301      	movs	r3, #1
 80082ea:	4652      	mov	r2, sl
 80082ec:	4631      	mov	r1, r6
 80082ee:	4628      	mov	r0, r5
 80082f0:	47b8      	blx	r7
 80082f2:	3001      	adds	r0, #1
 80082f4:	f43f aef7 	beq.w	80080e6 <_printf_float+0xc2>
 80082f8:	f109 0901 	add.w	r9, r9, #1
 80082fc:	e7ee      	b.n	80082dc <_printf_float+0x2b8>
 80082fe:	bf00      	nop
 8008300:	7fefffff 	.word	0x7fefffff
 8008304:	0800c37c 	.word	0x0800c37c
 8008308:	0800c380 	.word	0x0800c380
 800830c:	0800c388 	.word	0x0800c388
 8008310:	0800c384 	.word	0x0800c384
 8008314:	0800c38c 	.word	0x0800c38c
 8008318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800831a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800831c:	429a      	cmp	r2, r3
 800831e:	bfa8      	it	ge
 8008320:	461a      	movge	r2, r3
 8008322:	2a00      	cmp	r2, #0
 8008324:	4691      	mov	r9, r2
 8008326:	dc37      	bgt.n	8008398 <_printf_float+0x374>
 8008328:	f04f 0b00 	mov.w	fp, #0
 800832c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008330:	f104 021a 	add.w	r2, r4, #26
 8008334:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008336:	9305      	str	r3, [sp, #20]
 8008338:	eba3 0309 	sub.w	r3, r3, r9
 800833c:	455b      	cmp	r3, fp
 800833e:	dc33      	bgt.n	80083a8 <_printf_float+0x384>
 8008340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008344:	429a      	cmp	r2, r3
 8008346:	db3b      	blt.n	80083c0 <_printf_float+0x39c>
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	07da      	lsls	r2, r3, #31
 800834c:	d438      	bmi.n	80083c0 <_printf_float+0x39c>
 800834e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008350:	9b05      	ldr	r3, [sp, #20]
 8008352:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	eba2 0901 	sub.w	r9, r2, r1
 800835a:	4599      	cmp	r9, r3
 800835c:	bfa8      	it	ge
 800835e:	4699      	movge	r9, r3
 8008360:	f1b9 0f00 	cmp.w	r9, #0
 8008364:	dc35      	bgt.n	80083d2 <_printf_float+0x3ae>
 8008366:	f04f 0800 	mov.w	r8, #0
 800836a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800836e:	f104 0a1a 	add.w	sl, r4, #26
 8008372:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008376:	1a9b      	subs	r3, r3, r2
 8008378:	eba3 0309 	sub.w	r3, r3, r9
 800837c:	4543      	cmp	r3, r8
 800837e:	f77f af79 	ble.w	8008274 <_printf_float+0x250>
 8008382:	2301      	movs	r3, #1
 8008384:	4652      	mov	r2, sl
 8008386:	4631      	mov	r1, r6
 8008388:	4628      	mov	r0, r5
 800838a:	47b8      	blx	r7
 800838c:	3001      	adds	r0, #1
 800838e:	f43f aeaa 	beq.w	80080e6 <_printf_float+0xc2>
 8008392:	f108 0801 	add.w	r8, r8, #1
 8008396:	e7ec      	b.n	8008372 <_printf_float+0x34e>
 8008398:	4613      	mov	r3, r2
 800839a:	4631      	mov	r1, r6
 800839c:	4642      	mov	r2, r8
 800839e:	4628      	mov	r0, r5
 80083a0:	47b8      	blx	r7
 80083a2:	3001      	adds	r0, #1
 80083a4:	d1c0      	bne.n	8008328 <_printf_float+0x304>
 80083a6:	e69e      	b.n	80080e6 <_printf_float+0xc2>
 80083a8:	2301      	movs	r3, #1
 80083aa:	4631      	mov	r1, r6
 80083ac:	4628      	mov	r0, r5
 80083ae:	9205      	str	r2, [sp, #20]
 80083b0:	47b8      	blx	r7
 80083b2:	3001      	adds	r0, #1
 80083b4:	f43f ae97 	beq.w	80080e6 <_printf_float+0xc2>
 80083b8:	9a05      	ldr	r2, [sp, #20]
 80083ba:	f10b 0b01 	add.w	fp, fp, #1
 80083be:	e7b9      	b.n	8008334 <_printf_float+0x310>
 80083c0:	ee18 3a10 	vmov	r3, s16
 80083c4:	4652      	mov	r2, sl
 80083c6:	4631      	mov	r1, r6
 80083c8:	4628      	mov	r0, r5
 80083ca:	47b8      	blx	r7
 80083cc:	3001      	adds	r0, #1
 80083ce:	d1be      	bne.n	800834e <_printf_float+0x32a>
 80083d0:	e689      	b.n	80080e6 <_printf_float+0xc2>
 80083d2:	9a05      	ldr	r2, [sp, #20]
 80083d4:	464b      	mov	r3, r9
 80083d6:	4442      	add	r2, r8
 80083d8:	4631      	mov	r1, r6
 80083da:	4628      	mov	r0, r5
 80083dc:	47b8      	blx	r7
 80083de:	3001      	adds	r0, #1
 80083e0:	d1c1      	bne.n	8008366 <_printf_float+0x342>
 80083e2:	e680      	b.n	80080e6 <_printf_float+0xc2>
 80083e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083e6:	2a01      	cmp	r2, #1
 80083e8:	dc01      	bgt.n	80083ee <_printf_float+0x3ca>
 80083ea:	07db      	lsls	r3, r3, #31
 80083ec:	d538      	bpl.n	8008460 <_printf_float+0x43c>
 80083ee:	2301      	movs	r3, #1
 80083f0:	4642      	mov	r2, r8
 80083f2:	4631      	mov	r1, r6
 80083f4:	4628      	mov	r0, r5
 80083f6:	47b8      	blx	r7
 80083f8:	3001      	adds	r0, #1
 80083fa:	f43f ae74 	beq.w	80080e6 <_printf_float+0xc2>
 80083fe:	ee18 3a10 	vmov	r3, s16
 8008402:	4652      	mov	r2, sl
 8008404:	4631      	mov	r1, r6
 8008406:	4628      	mov	r0, r5
 8008408:	47b8      	blx	r7
 800840a:	3001      	adds	r0, #1
 800840c:	f43f ae6b 	beq.w	80080e6 <_printf_float+0xc2>
 8008410:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008414:	2200      	movs	r2, #0
 8008416:	2300      	movs	r3, #0
 8008418:	f7f8 fb86 	bl	8000b28 <__aeabi_dcmpeq>
 800841c:	b9d8      	cbnz	r0, 8008456 <_printf_float+0x432>
 800841e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008420:	f108 0201 	add.w	r2, r8, #1
 8008424:	3b01      	subs	r3, #1
 8008426:	4631      	mov	r1, r6
 8008428:	4628      	mov	r0, r5
 800842a:	47b8      	blx	r7
 800842c:	3001      	adds	r0, #1
 800842e:	d10e      	bne.n	800844e <_printf_float+0x42a>
 8008430:	e659      	b.n	80080e6 <_printf_float+0xc2>
 8008432:	2301      	movs	r3, #1
 8008434:	4652      	mov	r2, sl
 8008436:	4631      	mov	r1, r6
 8008438:	4628      	mov	r0, r5
 800843a:	47b8      	blx	r7
 800843c:	3001      	adds	r0, #1
 800843e:	f43f ae52 	beq.w	80080e6 <_printf_float+0xc2>
 8008442:	f108 0801 	add.w	r8, r8, #1
 8008446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008448:	3b01      	subs	r3, #1
 800844a:	4543      	cmp	r3, r8
 800844c:	dcf1      	bgt.n	8008432 <_printf_float+0x40e>
 800844e:	464b      	mov	r3, r9
 8008450:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008454:	e6dc      	b.n	8008210 <_printf_float+0x1ec>
 8008456:	f04f 0800 	mov.w	r8, #0
 800845a:	f104 0a1a 	add.w	sl, r4, #26
 800845e:	e7f2      	b.n	8008446 <_printf_float+0x422>
 8008460:	2301      	movs	r3, #1
 8008462:	4642      	mov	r2, r8
 8008464:	e7df      	b.n	8008426 <_printf_float+0x402>
 8008466:	2301      	movs	r3, #1
 8008468:	464a      	mov	r2, r9
 800846a:	4631      	mov	r1, r6
 800846c:	4628      	mov	r0, r5
 800846e:	47b8      	blx	r7
 8008470:	3001      	adds	r0, #1
 8008472:	f43f ae38 	beq.w	80080e6 <_printf_float+0xc2>
 8008476:	f108 0801 	add.w	r8, r8, #1
 800847a:	68e3      	ldr	r3, [r4, #12]
 800847c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800847e:	1a5b      	subs	r3, r3, r1
 8008480:	4543      	cmp	r3, r8
 8008482:	dcf0      	bgt.n	8008466 <_printf_float+0x442>
 8008484:	e6fa      	b.n	800827c <_printf_float+0x258>
 8008486:	f04f 0800 	mov.w	r8, #0
 800848a:	f104 0919 	add.w	r9, r4, #25
 800848e:	e7f4      	b.n	800847a <_printf_float+0x456>

08008490 <_printf_common>:
 8008490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008494:	4616      	mov	r6, r2
 8008496:	4699      	mov	r9, r3
 8008498:	688a      	ldr	r2, [r1, #8]
 800849a:	690b      	ldr	r3, [r1, #16]
 800849c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084a0:	4293      	cmp	r3, r2
 80084a2:	bfb8      	it	lt
 80084a4:	4613      	movlt	r3, r2
 80084a6:	6033      	str	r3, [r6, #0]
 80084a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084ac:	4607      	mov	r7, r0
 80084ae:	460c      	mov	r4, r1
 80084b0:	b10a      	cbz	r2, 80084b6 <_printf_common+0x26>
 80084b2:	3301      	adds	r3, #1
 80084b4:	6033      	str	r3, [r6, #0]
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	0699      	lsls	r1, r3, #26
 80084ba:	bf42      	ittt	mi
 80084bc:	6833      	ldrmi	r3, [r6, #0]
 80084be:	3302      	addmi	r3, #2
 80084c0:	6033      	strmi	r3, [r6, #0]
 80084c2:	6825      	ldr	r5, [r4, #0]
 80084c4:	f015 0506 	ands.w	r5, r5, #6
 80084c8:	d106      	bne.n	80084d8 <_printf_common+0x48>
 80084ca:	f104 0a19 	add.w	sl, r4, #25
 80084ce:	68e3      	ldr	r3, [r4, #12]
 80084d0:	6832      	ldr	r2, [r6, #0]
 80084d2:	1a9b      	subs	r3, r3, r2
 80084d4:	42ab      	cmp	r3, r5
 80084d6:	dc26      	bgt.n	8008526 <_printf_common+0x96>
 80084d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084dc:	1e13      	subs	r3, r2, #0
 80084de:	6822      	ldr	r2, [r4, #0]
 80084e0:	bf18      	it	ne
 80084e2:	2301      	movne	r3, #1
 80084e4:	0692      	lsls	r2, r2, #26
 80084e6:	d42b      	bmi.n	8008540 <_printf_common+0xb0>
 80084e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084ec:	4649      	mov	r1, r9
 80084ee:	4638      	mov	r0, r7
 80084f0:	47c0      	blx	r8
 80084f2:	3001      	adds	r0, #1
 80084f4:	d01e      	beq.n	8008534 <_printf_common+0xa4>
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	68e5      	ldr	r5, [r4, #12]
 80084fa:	6832      	ldr	r2, [r6, #0]
 80084fc:	f003 0306 	and.w	r3, r3, #6
 8008500:	2b04      	cmp	r3, #4
 8008502:	bf08      	it	eq
 8008504:	1aad      	subeq	r5, r5, r2
 8008506:	68a3      	ldr	r3, [r4, #8]
 8008508:	6922      	ldr	r2, [r4, #16]
 800850a:	bf0c      	ite	eq
 800850c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008510:	2500      	movne	r5, #0
 8008512:	4293      	cmp	r3, r2
 8008514:	bfc4      	itt	gt
 8008516:	1a9b      	subgt	r3, r3, r2
 8008518:	18ed      	addgt	r5, r5, r3
 800851a:	2600      	movs	r6, #0
 800851c:	341a      	adds	r4, #26
 800851e:	42b5      	cmp	r5, r6
 8008520:	d11a      	bne.n	8008558 <_printf_common+0xc8>
 8008522:	2000      	movs	r0, #0
 8008524:	e008      	b.n	8008538 <_printf_common+0xa8>
 8008526:	2301      	movs	r3, #1
 8008528:	4652      	mov	r2, sl
 800852a:	4649      	mov	r1, r9
 800852c:	4638      	mov	r0, r7
 800852e:	47c0      	blx	r8
 8008530:	3001      	adds	r0, #1
 8008532:	d103      	bne.n	800853c <_printf_common+0xac>
 8008534:	f04f 30ff 	mov.w	r0, #4294967295
 8008538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800853c:	3501      	adds	r5, #1
 800853e:	e7c6      	b.n	80084ce <_printf_common+0x3e>
 8008540:	18e1      	adds	r1, r4, r3
 8008542:	1c5a      	adds	r2, r3, #1
 8008544:	2030      	movs	r0, #48	; 0x30
 8008546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800854a:	4422      	add	r2, r4
 800854c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008554:	3302      	adds	r3, #2
 8008556:	e7c7      	b.n	80084e8 <_printf_common+0x58>
 8008558:	2301      	movs	r3, #1
 800855a:	4622      	mov	r2, r4
 800855c:	4649      	mov	r1, r9
 800855e:	4638      	mov	r0, r7
 8008560:	47c0      	blx	r8
 8008562:	3001      	adds	r0, #1
 8008564:	d0e6      	beq.n	8008534 <_printf_common+0xa4>
 8008566:	3601      	adds	r6, #1
 8008568:	e7d9      	b.n	800851e <_printf_common+0x8e>
	...

0800856c <_printf_i>:
 800856c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008570:	460c      	mov	r4, r1
 8008572:	4691      	mov	r9, r2
 8008574:	7e27      	ldrb	r7, [r4, #24]
 8008576:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008578:	2f78      	cmp	r7, #120	; 0x78
 800857a:	4680      	mov	r8, r0
 800857c:	469a      	mov	sl, r3
 800857e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008582:	d807      	bhi.n	8008594 <_printf_i+0x28>
 8008584:	2f62      	cmp	r7, #98	; 0x62
 8008586:	d80a      	bhi.n	800859e <_printf_i+0x32>
 8008588:	2f00      	cmp	r7, #0
 800858a:	f000 80d8 	beq.w	800873e <_printf_i+0x1d2>
 800858e:	2f58      	cmp	r7, #88	; 0x58
 8008590:	f000 80a3 	beq.w	80086da <_printf_i+0x16e>
 8008594:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800859c:	e03a      	b.n	8008614 <_printf_i+0xa8>
 800859e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085a2:	2b15      	cmp	r3, #21
 80085a4:	d8f6      	bhi.n	8008594 <_printf_i+0x28>
 80085a6:	a001      	add	r0, pc, #4	; (adr r0, 80085ac <_printf_i+0x40>)
 80085a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80085ac:	08008605 	.word	0x08008605
 80085b0:	08008619 	.word	0x08008619
 80085b4:	08008595 	.word	0x08008595
 80085b8:	08008595 	.word	0x08008595
 80085bc:	08008595 	.word	0x08008595
 80085c0:	08008595 	.word	0x08008595
 80085c4:	08008619 	.word	0x08008619
 80085c8:	08008595 	.word	0x08008595
 80085cc:	08008595 	.word	0x08008595
 80085d0:	08008595 	.word	0x08008595
 80085d4:	08008595 	.word	0x08008595
 80085d8:	08008725 	.word	0x08008725
 80085dc:	08008649 	.word	0x08008649
 80085e0:	08008707 	.word	0x08008707
 80085e4:	08008595 	.word	0x08008595
 80085e8:	08008595 	.word	0x08008595
 80085ec:	08008747 	.word	0x08008747
 80085f0:	08008595 	.word	0x08008595
 80085f4:	08008649 	.word	0x08008649
 80085f8:	08008595 	.word	0x08008595
 80085fc:	08008595 	.word	0x08008595
 8008600:	0800870f 	.word	0x0800870f
 8008604:	680b      	ldr	r3, [r1, #0]
 8008606:	1d1a      	adds	r2, r3, #4
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	600a      	str	r2, [r1, #0]
 800860c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008614:	2301      	movs	r3, #1
 8008616:	e0a3      	b.n	8008760 <_printf_i+0x1f4>
 8008618:	6825      	ldr	r5, [r4, #0]
 800861a:	6808      	ldr	r0, [r1, #0]
 800861c:	062e      	lsls	r6, r5, #24
 800861e:	f100 0304 	add.w	r3, r0, #4
 8008622:	d50a      	bpl.n	800863a <_printf_i+0xce>
 8008624:	6805      	ldr	r5, [r0, #0]
 8008626:	600b      	str	r3, [r1, #0]
 8008628:	2d00      	cmp	r5, #0
 800862a:	da03      	bge.n	8008634 <_printf_i+0xc8>
 800862c:	232d      	movs	r3, #45	; 0x2d
 800862e:	426d      	negs	r5, r5
 8008630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008634:	485e      	ldr	r0, [pc, #376]	; (80087b0 <_printf_i+0x244>)
 8008636:	230a      	movs	r3, #10
 8008638:	e019      	b.n	800866e <_printf_i+0x102>
 800863a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800863e:	6805      	ldr	r5, [r0, #0]
 8008640:	600b      	str	r3, [r1, #0]
 8008642:	bf18      	it	ne
 8008644:	b22d      	sxthne	r5, r5
 8008646:	e7ef      	b.n	8008628 <_printf_i+0xbc>
 8008648:	680b      	ldr	r3, [r1, #0]
 800864a:	6825      	ldr	r5, [r4, #0]
 800864c:	1d18      	adds	r0, r3, #4
 800864e:	6008      	str	r0, [r1, #0]
 8008650:	0628      	lsls	r0, r5, #24
 8008652:	d501      	bpl.n	8008658 <_printf_i+0xec>
 8008654:	681d      	ldr	r5, [r3, #0]
 8008656:	e002      	b.n	800865e <_printf_i+0xf2>
 8008658:	0669      	lsls	r1, r5, #25
 800865a:	d5fb      	bpl.n	8008654 <_printf_i+0xe8>
 800865c:	881d      	ldrh	r5, [r3, #0]
 800865e:	4854      	ldr	r0, [pc, #336]	; (80087b0 <_printf_i+0x244>)
 8008660:	2f6f      	cmp	r7, #111	; 0x6f
 8008662:	bf0c      	ite	eq
 8008664:	2308      	moveq	r3, #8
 8008666:	230a      	movne	r3, #10
 8008668:	2100      	movs	r1, #0
 800866a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800866e:	6866      	ldr	r6, [r4, #4]
 8008670:	60a6      	str	r6, [r4, #8]
 8008672:	2e00      	cmp	r6, #0
 8008674:	bfa2      	ittt	ge
 8008676:	6821      	ldrge	r1, [r4, #0]
 8008678:	f021 0104 	bicge.w	r1, r1, #4
 800867c:	6021      	strge	r1, [r4, #0]
 800867e:	b90d      	cbnz	r5, 8008684 <_printf_i+0x118>
 8008680:	2e00      	cmp	r6, #0
 8008682:	d04d      	beq.n	8008720 <_printf_i+0x1b4>
 8008684:	4616      	mov	r6, r2
 8008686:	fbb5 f1f3 	udiv	r1, r5, r3
 800868a:	fb03 5711 	mls	r7, r3, r1, r5
 800868e:	5dc7      	ldrb	r7, [r0, r7]
 8008690:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008694:	462f      	mov	r7, r5
 8008696:	42bb      	cmp	r3, r7
 8008698:	460d      	mov	r5, r1
 800869a:	d9f4      	bls.n	8008686 <_printf_i+0x11a>
 800869c:	2b08      	cmp	r3, #8
 800869e:	d10b      	bne.n	80086b8 <_printf_i+0x14c>
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	07df      	lsls	r7, r3, #31
 80086a4:	d508      	bpl.n	80086b8 <_printf_i+0x14c>
 80086a6:	6923      	ldr	r3, [r4, #16]
 80086a8:	6861      	ldr	r1, [r4, #4]
 80086aa:	4299      	cmp	r1, r3
 80086ac:	bfde      	ittt	le
 80086ae:	2330      	movle	r3, #48	; 0x30
 80086b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086b8:	1b92      	subs	r2, r2, r6
 80086ba:	6122      	str	r2, [r4, #16]
 80086bc:	f8cd a000 	str.w	sl, [sp]
 80086c0:	464b      	mov	r3, r9
 80086c2:	aa03      	add	r2, sp, #12
 80086c4:	4621      	mov	r1, r4
 80086c6:	4640      	mov	r0, r8
 80086c8:	f7ff fee2 	bl	8008490 <_printf_common>
 80086cc:	3001      	adds	r0, #1
 80086ce:	d14c      	bne.n	800876a <_printf_i+0x1fe>
 80086d0:	f04f 30ff 	mov.w	r0, #4294967295
 80086d4:	b004      	add	sp, #16
 80086d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086da:	4835      	ldr	r0, [pc, #212]	; (80087b0 <_printf_i+0x244>)
 80086dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086e0:	6823      	ldr	r3, [r4, #0]
 80086e2:	680e      	ldr	r6, [r1, #0]
 80086e4:	061f      	lsls	r7, r3, #24
 80086e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80086ea:	600e      	str	r6, [r1, #0]
 80086ec:	d514      	bpl.n	8008718 <_printf_i+0x1ac>
 80086ee:	07d9      	lsls	r1, r3, #31
 80086f0:	bf44      	itt	mi
 80086f2:	f043 0320 	orrmi.w	r3, r3, #32
 80086f6:	6023      	strmi	r3, [r4, #0]
 80086f8:	b91d      	cbnz	r5, 8008702 <_printf_i+0x196>
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	f023 0320 	bic.w	r3, r3, #32
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	2310      	movs	r3, #16
 8008704:	e7b0      	b.n	8008668 <_printf_i+0xfc>
 8008706:	6823      	ldr	r3, [r4, #0]
 8008708:	f043 0320 	orr.w	r3, r3, #32
 800870c:	6023      	str	r3, [r4, #0]
 800870e:	2378      	movs	r3, #120	; 0x78
 8008710:	4828      	ldr	r0, [pc, #160]	; (80087b4 <_printf_i+0x248>)
 8008712:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008716:	e7e3      	b.n	80086e0 <_printf_i+0x174>
 8008718:	065e      	lsls	r6, r3, #25
 800871a:	bf48      	it	mi
 800871c:	b2ad      	uxthmi	r5, r5
 800871e:	e7e6      	b.n	80086ee <_printf_i+0x182>
 8008720:	4616      	mov	r6, r2
 8008722:	e7bb      	b.n	800869c <_printf_i+0x130>
 8008724:	680b      	ldr	r3, [r1, #0]
 8008726:	6826      	ldr	r6, [r4, #0]
 8008728:	6960      	ldr	r0, [r4, #20]
 800872a:	1d1d      	adds	r5, r3, #4
 800872c:	600d      	str	r5, [r1, #0]
 800872e:	0635      	lsls	r5, r6, #24
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	d501      	bpl.n	8008738 <_printf_i+0x1cc>
 8008734:	6018      	str	r0, [r3, #0]
 8008736:	e002      	b.n	800873e <_printf_i+0x1d2>
 8008738:	0671      	lsls	r1, r6, #25
 800873a:	d5fb      	bpl.n	8008734 <_printf_i+0x1c8>
 800873c:	8018      	strh	r0, [r3, #0]
 800873e:	2300      	movs	r3, #0
 8008740:	6123      	str	r3, [r4, #16]
 8008742:	4616      	mov	r6, r2
 8008744:	e7ba      	b.n	80086bc <_printf_i+0x150>
 8008746:	680b      	ldr	r3, [r1, #0]
 8008748:	1d1a      	adds	r2, r3, #4
 800874a:	600a      	str	r2, [r1, #0]
 800874c:	681e      	ldr	r6, [r3, #0]
 800874e:	6862      	ldr	r2, [r4, #4]
 8008750:	2100      	movs	r1, #0
 8008752:	4630      	mov	r0, r6
 8008754:	f7f7 fd74 	bl	8000240 <memchr>
 8008758:	b108      	cbz	r0, 800875e <_printf_i+0x1f2>
 800875a:	1b80      	subs	r0, r0, r6
 800875c:	6060      	str	r0, [r4, #4]
 800875e:	6863      	ldr	r3, [r4, #4]
 8008760:	6123      	str	r3, [r4, #16]
 8008762:	2300      	movs	r3, #0
 8008764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008768:	e7a8      	b.n	80086bc <_printf_i+0x150>
 800876a:	6923      	ldr	r3, [r4, #16]
 800876c:	4632      	mov	r2, r6
 800876e:	4649      	mov	r1, r9
 8008770:	4640      	mov	r0, r8
 8008772:	47d0      	blx	sl
 8008774:	3001      	adds	r0, #1
 8008776:	d0ab      	beq.n	80086d0 <_printf_i+0x164>
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	079b      	lsls	r3, r3, #30
 800877c:	d413      	bmi.n	80087a6 <_printf_i+0x23a>
 800877e:	68e0      	ldr	r0, [r4, #12]
 8008780:	9b03      	ldr	r3, [sp, #12]
 8008782:	4298      	cmp	r0, r3
 8008784:	bfb8      	it	lt
 8008786:	4618      	movlt	r0, r3
 8008788:	e7a4      	b.n	80086d4 <_printf_i+0x168>
 800878a:	2301      	movs	r3, #1
 800878c:	4632      	mov	r2, r6
 800878e:	4649      	mov	r1, r9
 8008790:	4640      	mov	r0, r8
 8008792:	47d0      	blx	sl
 8008794:	3001      	adds	r0, #1
 8008796:	d09b      	beq.n	80086d0 <_printf_i+0x164>
 8008798:	3501      	adds	r5, #1
 800879a:	68e3      	ldr	r3, [r4, #12]
 800879c:	9903      	ldr	r1, [sp, #12]
 800879e:	1a5b      	subs	r3, r3, r1
 80087a0:	42ab      	cmp	r3, r5
 80087a2:	dcf2      	bgt.n	800878a <_printf_i+0x21e>
 80087a4:	e7eb      	b.n	800877e <_printf_i+0x212>
 80087a6:	2500      	movs	r5, #0
 80087a8:	f104 0619 	add.w	r6, r4, #25
 80087ac:	e7f5      	b.n	800879a <_printf_i+0x22e>
 80087ae:	bf00      	nop
 80087b0:	0800c38e 	.word	0x0800c38e
 80087b4:	0800c39f 	.word	0x0800c39f

080087b8 <iprintf>:
 80087b8:	b40f      	push	{r0, r1, r2, r3}
 80087ba:	4b0a      	ldr	r3, [pc, #40]	; (80087e4 <iprintf+0x2c>)
 80087bc:	b513      	push	{r0, r1, r4, lr}
 80087be:	681c      	ldr	r4, [r3, #0]
 80087c0:	b124      	cbz	r4, 80087cc <iprintf+0x14>
 80087c2:	69a3      	ldr	r3, [r4, #24]
 80087c4:	b913      	cbnz	r3, 80087cc <iprintf+0x14>
 80087c6:	4620      	mov	r0, r4
 80087c8:	f7ff fa56 	bl	8007c78 <__sinit>
 80087cc:	ab05      	add	r3, sp, #20
 80087ce:	9a04      	ldr	r2, [sp, #16]
 80087d0:	68a1      	ldr	r1, [r4, #8]
 80087d2:	9301      	str	r3, [sp, #4]
 80087d4:	4620      	mov	r0, r4
 80087d6:	f003 f96d 	bl	800bab4 <_vfiprintf_r>
 80087da:	b002      	add	sp, #8
 80087dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087e0:	b004      	add	sp, #16
 80087e2:	4770      	bx	lr
 80087e4:	20000044 	.word	0x20000044

080087e8 <_puts_r>:
 80087e8:	b570      	push	{r4, r5, r6, lr}
 80087ea:	460e      	mov	r6, r1
 80087ec:	4605      	mov	r5, r0
 80087ee:	b118      	cbz	r0, 80087f8 <_puts_r+0x10>
 80087f0:	6983      	ldr	r3, [r0, #24]
 80087f2:	b90b      	cbnz	r3, 80087f8 <_puts_r+0x10>
 80087f4:	f7ff fa40 	bl	8007c78 <__sinit>
 80087f8:	69ab      	ldr	r3, [r5, #24]
 80087fa:	68ac      	ldr	r4, [r5, #8]
 80087fc:	b913      	cbnz	r3, 8008804 <_puts_r+0x1c>
 80087fe:	4628      	mov	r0, r5
 8008800:	f7ff fa3a 	bl	8007c78 <__sinit>
 8008804:	4b2c      	ldr	r3, [pc, #176]	; (80088b8 <_puts_r+0xd0>)
 8008806:	429c      	cmp	r4, r3
 8008808:	d120      	bne.n	800884c <_puts_r+0x64>
 800880a:	686c      	ldr	r4, [r5, #4]
 800880c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800880e:	07db      	lsls	r3, r3, #31
 8008810:	d405      	bmi.n	800881e <_puts_r+0x36>
 8008812:	89a3      	ldrh	r3, [r4, #12]
 8008814:	0598      	lsls	r0, r3, #22
 8008816:	d402      	bmi.n	800881e <_puts_r+0x36>
 8008818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800881a:	f7ff faf0 	bl	8007dfe <__retarget_lock_acquire_recursive>
 800881e:	89a3      	ldrh	r3, [r4, #12]
 8008820:	0719      	lsls	r1, r3, #28
 8008822:	d51d      	bpl.n	8008860 <_puts_r+0x78>
 8008824:	6923      	ldr	r3, [r4, #16]
 8008826:	b1db      	cbz	r3, 8008860 <_puts_r+0x78>
 8008828:	3e01      	subs	r6, #1
 800882a:	68a3      	ldr	r3, [r4, #8]
 800882c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008830:	3b01      	subs	r3, #1
 8008832:	60a3      	str	r3, [r4, #8]
 8008834:	bb39      	cbnz	r1, 8008886 <_puts_r+0x9e>
 8008836:	2b00      	cmp	r3, #0
 8008838:	da38      	bge.n	80088ac <_puts_r+0xc4>
 800883a:	4622      	mov	r2, r4
 800883c:	210a      	movs	r1, #10
 800883e:	4628      	mov	r0, r5
 8008840:	f000 ffc6 	bl	80097d0 <__swbuf_r>
 8008844:	3001      	adds	r0, #1
 8008846:	d011      	beq.n	800886c <_puts_r+0x84>
 8008848:	250a      	movs	r5, #10
 800884a:	e011      	b.n	8008870 <_puts_r+0x88>
 800884c:	4b1b      	ldr	r3, [pc, #108]	; (80088bc <_puts_r+0xd4>)
 800884e:	429c      	cmp	r4, r3
 8008850:	d101      	bne.n	8008856 <_puts_r+0x6e>
 8008852:	68ac      	ldr	r4, [r5, #8]
 8008854:	e7da      	b.n	800880c <_puts_r+0x24>
 8008856:	4b1a      	ldr	r3, [pc, #104]	; (80088c0 <_puts_r+0xd8>)
 8008858:	429c      	cmp	r4, r3
 800885a:	bf08      	it	eq
 800885c:	68ec      	ldreq	r4, [r5, #12]
 800885e:	e7d5      	b.n	800880c <_puts_r+0x24>
 8008860:	4621      	mov	r1, r4
 8008862:	4628      	mov	r0, r5
 8008864:	f001 f818 	bl	8009898 <__swsetup_r>
 8008868:	2800      	cmp	r0, #0
 800886a:	d0dd      	beq.n	8008828 <_puts_r+0x40>
 800886c:	f04f 35ff 	mov.w	r5, #4294967295
 8008870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008872:	07da      	lsls	r2, r3, #31
 8008874:	d405      	bmi.n	8008882 <_puts_r+0x9a>
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	059b      	lsls	r3, r3, #22
 800887a:	d402      	bmi.n	8008882 <_puts_r+0x9a>
 800887c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800887e:	f7ff fabf 	bl	8007e00 <__retarget_lock_release_recursive>
 8008882:	4628      	mov	r0, r5
 8008884:	bd70      	pop	{r4, r5, r6, pc}
 8008886:	2b00      	cmp	r3, #0
 8008888:	da04      	bge.n	8008894 <_puts_r+0xac>
 800888a:	69a2      	ldr	r2, [r4, #24]
 800888c:	429a      	cmp	r2, r3
 800888e:	dc06      	bgt.n	800889e <_puts_r+0xb6>
 8008890:	290a      	cmp	r1, #10
 8008892:	d004      	beq.n	800889e <_puts_r+0xb6>
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	1c5a      	adds	r2, r3, #1
 8008898:	6022      	str	r2, [r4, #0]
 800889a:	7019      	strb	r1, [r3, #0]
 800889c:	e7c5      	b.n	800882a <_puts_r+0x42>
 800889e:	4622      	mov	r2, r4
 80088a0:	4628      	mov	r0, r5
 80088a2:	f000 ff95 	bl	80097d0 <__swbuf_r>
 80088a6:	3001      	adds	r0, #1
 80088a8:	d1bf      	bne.n	800882a <_puts_r+0x42>
 80088aa:	e7df      	b.n	800886c <_puts_r+0x84>
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	250a      	movs	r5, #10
 80088b0:	1c5a      	adds	r2, r3, #1
 80088b2:	6022      	str	r2, [r4, #0]
 80088b4:	701d      	strb	r5, [r3, #0]
 80088b6:	e7db      	b.n	8008870 <_puts_r+0x88>
 80088b8:	0800c338 	.word	0x0800c338
 80088bc:	0800c358 	.word	0x0800c358
 80088c0:	0800c318 	.word	0x0800c318

080088c4 <puts>:
 80088c4:	4b02      	ldr	r3, [pc, #8]	; (80088d0 <puts+0xc>)
 80088c6:	4601      	mov	r1, r0
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	f7ff bf8d 	b.w	80087e8 <_puts_r>
 80088ce:	bf00      	nop
 80088d0:	20000044 	.word	0x20000044

080088d4 <cleanup_glue>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	460c      	mov	r4, r1
 80088d8:	6809      	ldr	r1, [r1, #0]
 80088da:	4605      	mov	r5, r0
 80088dc:	b109      	cbz	r1, 80088e2 <cleanup_glue+0xe>
 80088de:	f7ff fff9 	bl	80088d4 <cleanup_glue>
 80088e2:	4621      	mov	r1, r4
 80088e4:	4628      	mov	r0, r5
 80088e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088ea:	f003 b869 	b.w	800b9c0 <_free_r>
	...

080088f0 <_reclaim_reent>:
 80088f0:	4b2c      	ldr	r3, [pc, #176]	; (80089a4 <_reclaim_reent+0xb4>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4283      	cmp	r3, r0
 80088f6:	b570      	push	{r4, r5, r6, lr}
 80088f8:	4604      	mov	r4, r0
 80088fa:	d051      	beq.n	80089a0 <_reclaim_reent+0xb0>
 80088fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80088fe:	b143      	cbz	r3, 8008912 <_reclaim_reent+0x22>
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d14a      	bne.n	800899c <_reclaim_reent+0xac>
 8008906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008908:	6819      	ldr	r1, [r3, #0]
 800890a:	b111      	cbz	r1, 8008912 <_reclaim_reent+0x22>
 800890c:	4620      	mov	r0, r4
 800890e:	f003 f857 	bl	800b9c0 <_free_r>
 8008912:	6961      	ldr	r1, [r4, #20]
 8008914:	b111      	cbz	r1, 800891c <_reclaim_reent+0x2c>
 8008916:	4620      	mov	r0, r4
 8008918:	f003 f852 	bl	800b9c0 <_free_r>
 800891c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800891e:	b111      	cbz	r1, 8008926 <_reclaim_reent+0x36>
 8008920:	4620      	mov	r0, r4
 8008922:	f003 f84d 	bl	800b9c0 <_free_r>
 8008926:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008928:	b111      	cbz	r1, 8008930 <_reclaim_reent+0x40>
 800892a:	4620      	mov	r0, r4
 800892c:	f003 f848 	bl	800b9c0 <_free_r>
 8008930:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008932:	b111      	cbz	r1, 800893a <_reclaim_reent+0x4a>
 8008934:	4620      	mov	r0, r4
 8008936:	f003 f843 	bl	800b9c0 <_free_r>
 800893a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800893c:	b111      	cbz	r1, 8008944 <_reclaim_reent+0x54>
 800893e:	4620      	mov	r0, r4
 8008940:	f003 f83e 	bl	800b9c0 <_free_r>
 8008944:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008946:	b111      	cbz	r1, 800894e <_reclaim_reent+0x5e>
 8008948:	4620      	mov	r0, r4
 800894a:	f003 f839 	bl	800b9c0 <_free_r>
 800894e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008950:	b111      	cbz	r1, 8008958 <_reclaim_reent+0x68>
 8008952:	4620      	mov	r0, r4
 8008954:	f003 f834 	bl	800b9c0 <_free_r>
 8008958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800895a:	b111      	cbz	r1, 8008962 <_reclaim_reent+0x72>
 800895c:	4620      	mov	r0, r4
 800895e:	f003 f82f 	bl	800b9c0 <_free_r>
 8008962:	69a3      	ldr	r3, [r4, #24]
 8008964:	b1e3      	cbz	r3, 80089a0 <_reclaim_reent+0xb0>
 8008966:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008968:	4620      	mov	r0, r4
 800896a:	4798      	blx	r3
 800896c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800896e:	b1b9      	cbz	r1, 80089a0 <_reclaim_reent+0xb0>
 8008970:	4620      	mov	r0, r4
 8008972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008976:	f7ff bfad 	b.w	80088d4 <cleanup_glue>
 800897a:	5949      	ldr	r1, [r1, r5]
 800897c:	b941      	cbnz	r1, 8008990 <_reclaim_reent+0xa0>
 800897e:	3504      	adds	r5, #4
 8008980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008982:	2d80      	cmp	r5, #128	; 0x80
 8008984:	68d9      	ldr	r1, [r3, #12]
 8008986:	d1f8      	bne.n	800897a <_reclaim_reent+0x8a>
 8008988:	4620      	mov	r0, r4
 800898a:	f003 f819 	bl	800b9c0 <_free_r>
 800898e:	e7ba      	b.n	8008906 <_reclaim_reent+0x16>
 8008990:	680e      	ldr	r6, [r1, #0]
 8008992:	4620      	mov	r0, r4
 8008994:	f003 f814 	bl	800b9c0 <_free_r>
 8008998:	4631      	mov	r1, r6
 800899a:	e7ef      	b.n	800897c <_reclaim_reent+0x8c>
 800899c:	2500      	movs	r5, #0
 800899e:	e7ef      	b.n	8008980 <_reclaim_reent+0x90>
 80089a0:	bd70      	pop	{r4, r5, r6, pc}
 80089a2:	bf00      	nop
 80089a4:	20000044 	.word	0x20000044

080089a8 <_sbrk_r>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	4d06      	ldr	r5, [pc, #24]	; (80089c4 <_sbrk_r+0x1c>)
 80089ac:	2300      	movs	r3, #0
 80089ae:	4604      	mov	r4, r0
 80089b0:	4608      	mov	r0, r1
 80089b2:	602b      	str	r3, [r5, #0]
 80089b4:	f7f9 fcfe 	bl	80023b4 <_sbrk>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d102      	bne.n	80089c2 <_sbrk_r+0x1a>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	b103      	cbz	r3, 80089c2 <_sbrk_r+0x1a>
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	200045f8 	.word	0x200045f8

080089c8 <__sread>:
 80089c8:	b510      	push	{r4, lr}
 80089ca:	460c      	mov	r4, r1
 80089cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d0:	f003 f9a0 	bl	800bd14 <_read_r>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	bfab      	itete	ge
 80089d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089da:	89a3      	ldrhlt	r3, [r4, #12]
 80089dc:	181b      	addge	r3, r3, r0
 80089de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089e2:	bfac      	ite	ge
 80089e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80089e6:	81a3      	strhlt	r3, [r4, #12]
 80089e8:	bd10      	pop	{r4, pc}

080089ea <__swrite>:
 80089ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ee:	461f      	mov	r7, r3
 80089f0:	898b      	ldrh	r3, [r1, #12]
 80089f2:	05db      	lsls	r3, r3, #23
 80089f4:	4605      	mov	r5, r0
 80089f6:	460c      	mov	r4, r1
 80089f8:	4616      	mov	r6, r2
 80089fa:	d505      	bpl.n	8008a08 <__swrite+0x1e>
 80089fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a00:	2302      	movs	r3, #2
 8008a02:	2200      	movs	r2, #0
 8008a04:	f002 fa76 	bl	800aef4 <_lseek_r>
 8008a08:	89a3      	ldrh	r3, [r4, #12]
 8008a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a12:	81a3      	strh	r3, [r4, #12]
 8008a14:	4632      	mov	r2, r6
 8008a16:	463b      	mov	r3, r7
 8008a18:	4628      	mov	r0, r5
 8008a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1e:	f000 bf29 	b.w	8009874 <_write_r>

08008a22 <__sseek>:
 8008a22:	b510      	push	{r4, lr}
 8008a24:	460c      	mov	r4, r1
 8008a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2a:	f002 fa63 	bl	800aef4 <_lseek_r>
 8008a2e:	1c43      	adds	r3, r0, #1
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	bf15      	itete	ne
 8008a34:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a3e:	81a3      	strheq	r3, [r4, #12]
 8008a40:	bf18      	it	ne
 8008a42:	81a3      	strhne	r3, [r4, #12]
 8008a44:	bd10      	pop	{r4, pc}

08008a46 <__sclose>:
 8008a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a4a:	f000 bf93 	b.w	8009974 <_close_r>

08008a4e <sulp>:
 8008a4e:	b570      	push	{r4, r5, r6, lr}
 8008a50:	4604      	mov	r4, r0
 8008a52:	460d      	mov	r5, r1
 8008a54:	ec45 4b10 	vmov	d0, r4, r5
 8008a58:	4616      	mov	r6, r2
 8008a5a:	f002 fe53 	bl	800b704 <__ulp>
 8008a5e:	ec51 0b10 	vmov	r0, r1, d0
 8008a62:	b17e      	cbz	r6, 8008a84 <sulp+0x36>
 8008a64:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008a68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	dd09      	ble.n	8008a84 <sulp+0x36>
 8008a70:	051b      	lsls	r3, r3, #20
 8008a72:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008a76:	2400      	movs	r4, #0
 8008a78:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008a7c:	4622      	mov	r2, r4
 8008a7e:	462b      	mov	r3, r5
 8008a80:	f7f7 fdea 	bl	8000658 <__aeabi_dmul>
 8008a84:	bd70      	pop	{r4, r5, r6, pc}
	...

08008a88 <_strtod_l>:
 8008a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	b0a3      	sub	sp, #140	; 0x8c
 8008a8e:	461f      	mov	r7, r3
 8008a90:	2300      	movs	r3, #0
 8008a92:	931e      	str	r3, [sp, #120]	; 0x78
 8008a94:	4ba4      	ldr	r3, [pc, #656]	; (8008d28 <_strtod_l+0x2a0>)
 8008a96:	9219      	str	r2, [sp, #100]	; 0x64
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	9307      	str	r3, [sp, #28]
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	4688      	mov	r8, r1
 8008aa2:	f7f7 fbbf 	bl	8000224 <strlen>
 8008aa6:	f04f 0a00 	mov.w	sl, #0
 8008aaa:	4605      	mov	r5, r0
 8008aac:	f04f 0b00 	mov.w	fp, #0
 8008ab0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008ab4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ab6:	781a      	ldrb	r2, [r3, #0]
 8008ab8:	2a2b      	cmp	r2, #43	; 0x2b
 8008aba:	d04c      	beq.n	8008b56 <_strtod_l+0xce>
 8008abc:	d839      	bhi.n	8008b32 <_strtod_l+0xaa>
 8008abe:	2a0d      	cmp	r2, #13
 8008ac0:	d832      	bhi.n	8008b28 <_strtod_l+0xa0>
 8008ac2:	2a08      	cmp	r2, #8
 8008ac4:	d832      	bhi.n	8008b2c <_strtod_l+0xa4>
 8008ac6:	2a00      	cmp	r2, #0
 8008ac8:	d03c      	beq.n	8008b44 <_strtod_l+0xbc>
 8008aca:	2300      	movs	r3, #0
 8008acc:	930e      	str	r3, [sp, #56]	; 0x38
 8008ace:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008ad0:	7833      	ldrb	r3, [r6, #0]
 8008ad2:	2b30      	cmp	r3, #48	; 0x30
 8008ad4:	f040 80b4 	bne.w	8008c40 <_strtod_l+0x1b8>
 8008ad8:	7873      	ldrb	r3, [r6, #1]
 8008ada:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ade:	2b58      	cmp	r3, #88	; 0x58
 8008ae0:	d16c      	bne.n	8008bbc <_strtod_l+0x134>
 8008ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ae4:	9301      	str	r3, [sp, #4]
 8008ae6:	ab1e      	add	r3, sp, #120	; 0x78
 8008ae8:	9702      	str	r7, [sp, #8]
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	4a8f      	ldr	r2, [pc, #572]	; (8008d2c <_strtod_l+0x2a4>)
 8008aee:	ab1f      	add	r3, sp, #124	; 0x7c
 8008af0:	a91d      	add	r1, sp, #116	; 0x74
 8008af2:	4620      	mov	r0, r4
 8008af4:	f001 fef2 	bl	800a8dc <__gethex>
 8008af8:	f010 0707 	ands.w	r7, r0, #7
 8008afc:	4605      	mov	r5, r0
 8008afe:	d005      	beq.n	8008b0c <_strtod_l+0x84>
 8008b00:	2f06      	cmp	r7, #6
 8008b02:	d12a      	bne.n	8008b5a <_strtod_l+0xd2>
 8008b04:	3601      	adds	r6, #1
 8008b06:	2300      	movs	r3, #0
 8008b08:	961d      	str	r6, [sp, #116]	; 0x74
 8008b0a:	930e      	str	r3, [sp, #56]	; 0x38
 8008b0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f040 8596 	bne.w	8009640 <_strtod_l+0xbb8>
 8008b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b16:	b1db      	cbz	r3, 8008b50 <_strtod_l+0xc8>
 8008b18:	4652      	mov	r2, sl
 8008b1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008b1e:	ec43 2b10 	vmov	d0, r2, r3
 8008b22:	b023      	add	sp, #140	; 0x8c
 8008b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b28:	2a20      	cmp	r2, #32
 8008b2a:	d1ce      	bne.n	8008aca <_strtod_l+0x42>
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	931d      	str	r3, [sp, #116]	; 0x74
 8008b30:	e7c0      	b.n	8008ab4 <_strtod_l+0x2c>
 8008b32:	2a2d      	cmp	r2, #45	; 0x2d
 8008b34:	d1c9      	bne.n	8008aca <_strtod_l+0x42>
 8008b36:	2201      	movs	r2, #1
 8008b38:	920e      	str	r2, [sp, #56]	; 0x38
 8008b3a:	1c5a      	adds	r2, r3, #1
 8008b3c:	921d      	str	r2, [sp, #116]	; 0x74
 8008b3e:	785b      	ldrb	r3, [r3, #1]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1c4      	bne.n	8008ace <_strtod_l+0x46>
 8008b44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b46:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f040 8576 	bne.w	800963c <_strtod_l+0xbb4>
 8008b50:	4652      	mov	r2, sl
 8008b52:	465b      	mov	r3, fp
 8008b54:	e7e3      	b.n	8008b1e <_strtod_l+0x96>
 8008b56:	2200      	movs	r2, #0
 8008b58:	e7ee      	b.n	8008b38 <_strtod_l+0xb0>
 8008b5a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008b5c:	b13a      	cbz	r2, 8008b6e <_strtod_l+0xe6>
 8008b5e:	2135      	movs	r1, #53	; 0x35
 8008b60:	a820      	add	r0, sp, #128	; 0x80
 8008b62:	f002 feda 	bl	800b91a <__copybits>
 8008b66:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f002 fa9f 	bl	800b0ac <_Bfree>
 8008b6e:	3f01      	subs	r7, #1
 8008b70:	2f05      	cmp	r7, #5
 8008b72:	d807      	bhi.n	8008b84 <_strtod_l+0xfc>
 8008b74:	e8df f007 	tbb	[pc, r7]
 8008b78:	1d180b0e 	.word	0x1d180b0e
 8008b7c:	030e      	.short	0x030e
 8008b7e:	f04f 0b00 	mov.w	fp, #0
 8008b82:	46da      	mov	sl, fp
 8008b84:	0728      	lsls	r0, r5, #28
 8008b86:	d5c1      	bpl.n	8008b0c <_strtod_l+0x84>
 8008b88:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008b8c:	e7be      	b.n	8008b0c <_strtod_l+0x84>
 8008b8e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008b92:	e7f7      	b.n	8008b84 <_strtod_l+0xfc>
 8008b94:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008b98:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008b9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008ba2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008ba6:	e7ed      	b.n	8008b84 <_strtod_l+0xfc>
 8008ba8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008d30 <_strtod_l+0x2a8>
 8008bac:	f04f 0a00 	mov.w	sl, #0
 8008bb0:	e7e8      	b.n	8008b84 <_strtod_l+0xfc>
 8008bb2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008bb6:	f04f 3aff 	mov.w	sl, #4294967295
 8008bba:	e7e3      	b.n	8008b84 <_strtod_l+0xfc>
 8008bbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bbe:	1c5a      	adds	r2, r3, #1
 8008bc0:	921d      	str	r2, [sp, #116]	; 0x74
 8008bc2:	785b      	ldrb	r3, [r3, #1]
 8008bc4:	2b30      	cmp	r3, #48	; 0x30
 8008bc6:	d0f9      	beq.n	8008bbc <_strtod_l+0x134>
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d09f      	beq.n	8008b0c <_strtod_l+0x84>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	f04f 0900 	mov.w	r9, #0
 8008bd2:	9304      	str	r3, [sp, #16]
 8008bd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8008bd8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008bdc:	464f      	mov	r7, r9
 8008bde:	220a      	movs	r2, #10
 8008be0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008be2:	7806      	ldrb	r6, [r0, #0]
 8008be4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008be8:	b2d9      	uxtb	r1, r3
 8008bea:	2909      	cmp	r1, #9
 8008bec:	d92a      	bls.n	8008c44 <_strtod_l+0x1bc>
 8008bee:	9907      	ldr	r1, [sp, #28]
 8008bf0:	462a      	mov	r2, r5
 8008bf2:	f003 f8a9 	bl	800bd48 <strncmp>
 8008bf6:	b398      	cbz	r0, 8008c60 <_strtod_l+0x1d8>
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	4633      	mov	r3, r6
 8008bfc:	463d      	mov	r5, r7
 8008bfe:	9007      	str	r0, [sp, #28]
 8008c00:	4602      	mov	r2, r0
 8008c02:	2b65      	cmp	r3, #101	; 0x65
 8008c04:	d001      	beq.n	8008c0a <_strtod_l+0x182>
 8008c06:	2b45      	cmp	r3, #69	; 0x45
 8008c08:	d118      	bne.n	8008c3c <_strtod_l+0x1b4>
 8008c0a:	b91d      	cbnz	r5, 8008c14 <_strtod_l+0x18c>
 8008c0c:	9b04      	ldr	r3, [sp, #16]
 8008c0e:	4303      	orrs	r3, r0
 8008c10:	d098      	beq.n	8008b44 <_strtod_l+0xbc>
 8008c12:	2500      	movs	r5, #0
 8008c14:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008c18:	f108 0301 	add.w	r3, r8, #1
 8008c1c:	931d      	str	r3, [sp, #116]	; 0x74
 8008c1e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008c22:	2b2b      	cmp	r3, #43	; 0x2b
 8008c24:	d075      	beq.n	8008d12 <_strtod_l+0x28a>
 8008c26:	2b2d      	cmp	r3, #45	; 0x2d
 8008c28:	d07b      	beq.n	8008d22 <_strtod_l+0x29a>
 8008c2a:	f04f 0c00 	mov.w	ip, #0
 8008c2e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008c32:	2909      	cmp	r1, #9
 8008c34:	f240 8082 	bls.w	8008d3c <_strtod_l+0x2b4>
 8008c38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008c3c:	2600      	movs	r6, #0
 8008c3e:	e09d      	b.n	8008d7c <_strtod_l+0x2f4>
 8008c40:	2300      	movs	r3, #0
 8008c42:	e7c4      	b.n	8008bce <_strtod_l+0x146>
 8008c44:	2f08      	cmp	r7, #8
 8008c46:	bfd8      	it	le
 8008c48:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008c4a:	f100 0001 	add.w	r0, r0, #1
 8008c4e:	bfda      	itte	le
 8008c50:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c54:	9309      	strle	r3, [sp, #36]	; 0x24
 8008c56:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008c5a:	3701      	adds	r7, #1
 8008c5c:	901d      	str	r0, [sp, #116]	; 0x74
 8008c5e:	e7bf      	b.n	8008be0 <_strtod_l+0x158>
 8008c60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c62:	195a      	adds	r2, r3, r5
 8008c64:	921d      	str	r2, [sp, #116]	; 0x74
 8008c66:	5d5b      	ldrb	r3, [r3, r5]
 8008c68:	2f00      	cmp	r7, #0
 8008c6a:	d037      	beq.n	8008cdc <_strtod_l+0x254>
 8008c6c:	9007      	str	r0, [sp, #28]
 8008c6e:	463d      	mov	r5, r7
 8008c70:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008c74:	2a09      	cmp	r2, #9
 8008c76:	d912      	bls.n	8008c9e <_strtod_l+0x216>
 8008c78:	2201      	movs	r2, #1
 8008c7a:	e7c2      	b.n	8008c02 <_strtod_l+0x17a>
 8008c7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c7e:	1c5a      	adds	r2, r3, #1
 8008c80:	921d      	str	r2, [sp, #116]	; 0x74
 8008c82:	785b      	ldrb	r3, [r3, #1]
 8008c84:	3001      	adds	r0, #1
 8008c86:	2b30      	cmp	r3, #48	; 0x30
 8008c88:	d0f8      	beq.n	8008c7c <_strtod_l+0x1f4>
 8008c8a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008c8e:	2a08      	cmp	r2, #8
 8008c90:	f200 84db 	bhi.w	800964a <_strtod_l+0xbc2>
 8008c94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008c96:	9007      	str	r0, [sp, #28]
 8008c98:	2000      	movs	r0, #0
 8008c9a:	920a      	str	r2, [sp, #40]	; 0x28
 8008c9c:	4605      	mov	r5, r0
 8008c9e:	3b30      	subs	r3, #48	; 0x30
 8008ca0:	f100 0201 	add.w	r2, r0, #1
 8008ca4:	d014      	beq.n	8008cd0 <_strtod_l+0x248>
 8008ca6:	9907      	ldr	r1, [sp, #28]
 8008ca8:	4411      	add	r1, r2
 8008caa:	9107      	str	r1, [sp, #28]
 8008cac:	462a      	mov	r2, r5
 8008cae:	eb00 0e05 	add.w	lr, r0, r5
 8008cb2:	210a      	movs	r1, #10
 8008cb4:	4572      	cmp	r2, lr
 8008cb6:	d113      	bne.n	8008ce0 <_strtod_l+0x258>
 8008cb8:	182a      	adds	r2, r5, r0
 8008cba:	2a08      	cmp	r2, #8
 8008cbc:	f105 0501 	add.w	r5, r5, #1
 8008cc0:	4405      	add	r5, r0
 8008cc2:	dc1c      	bgt.n	8008cfe <_strtod_l+0x276>
 8008cc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cc6:	220a      	movs	r2, #10
 8008cc8:	fb02 3301 	mla	r3, r2, r1, r3
 8008ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8008cce:	2200      	movs	r2, #0
 8008cd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cd2:	1c59      	adds	r1, r3, #1
 8008cd4:	911d      	str	r1, [sp, #116]	; 0x74
 8008cd6:	785b      	ldrb	r3, [r3, #1]
 8008cd8:	4610      	mov	r0, r2
 8008cda:	e7c9      	b.n	8008c70 <_strtod_l+0x1e8>
 8008cdc:	4638      	mov	r0, r7
 8008cde:	e7d2      	b.n	8008c86 <_strtod_l+0x1fe>
 8008ce0:	2a08      	cmp	r2, #8
 8008ce2:	dc04      	bgt.n	8008cee <_strtod_l+0x266>
 8008ce4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008ce6:	434e      	muls	r6, r1
 8008ce8:	9609      	str	r6, [sp, #36]	; 0x24
 8008cea:	3201      	adds	r2, #1
 8008cec:	e7e2      	b.n	8008cb4 <_strtod_l+0x22c>
 8008cee:	f102 0c01 	add.w	ip, r2, #1
 8008cf2:	f1bc 0f10 	cmp.w	ip, #16
 8008cf6:	bfd8      	it	le
 8008cf8:	fb01 f909 	mulle.w	r9, r1, r9
 8008cfc:	e7f5      	b.n	8008cea <_strtod_l+0x262>
 8008cfe:	2d10      	cmp	r5, #16
 8008d00:	bfdc      	itt	le
 8008d02:	220a      	movle	r2, #10
 8008d04:	fb02 3909 	mlale	r9, r2, r9, r3
 8008d08:	e7e1      	b.n	8008cce <_strtod_l+0x246>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	9307      	str	r3, [sp, #28]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	e77c      	b.n	8008c0c <_strtod_l+0x184>
 8008d12:	f04f 0c00 	mov.w	ip, #0
 8008d16:	f108 0302 	add.w	r3, r8, #2
 8008d1a:	931d      	str	r3, [sp, #116]	; 0x74
 8008d1c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008d20:	e785      	b.n	8008c2e <_strtod_l+0x1a6>
 8008d22:	f04f 0c01 	mov.w	ip, #1
 8008d26:	e7f6      	b.n	8008d16 <_strtod_l+0x28e>
 8008d28:	0800c600 	.word	0x0800c600
 8008d2c:	0800c3b0 	.word	0x0800c3b0
 8008d30:	7ff00000 	.word	0x7ff00000
 8008d34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d36:	1c59      	adds	r1, r3, #1
 8008d38:	911d      	str	r1, [sp, #116]	; 0x74
 8008d3a:	785b      	ldrb	r3, [r3, #1]
 8008d3c:	2b30      	cmp	r3, #48	; 0x30
 8008d3e:	d0f9      	beq.n	8008d34 <_strtod_l+0x2ac>
 8008d40:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008d44:	2908      	cmp	r1, #8
 8008d46:	f63f af79 	bhi.w	8008c3c <_strtod_l+0x1b4>
 8008d4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008d4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d50:	9308      	str	r3, [sp, #32]
 8008d52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d54:	1c59      	adds	r1, r3, #1
 8008d56:	911d      	str	r1, [sp, #116]	; 0x74
 8008d58:	785b      	ldrb	r3, [r3, #1]
 8008d5a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008d5e:	2e09      	cmp	r6, #9
 8008d60:	d937      	bls.n	8008dd2 <_strtod_l+0x34a>
 8008d62:	9e08      	ldr	r6, [sp, #32]
 8008d64:	1b89      	subs	r1, r1, r6
 8008d66:	2908      	cmp	r1, #8
 8008d68:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008d6c:	dc02      	bgt.n	8008d74 <_strtod_l+0x2ec>
 8008d6e:	4576      	cmp	r6, lr
 8008d70:	bfa8      	it	ge
 8008d72:	4676      	movge	r6, lr
 8008d74:	f1bc 0f00 	cmp.w	ip, #0
 8008d78:	d000      	beq.n	8008d7c <_strtod_l+0x2f4>
 8008d7a:	4276      	negs	r6, r6
 8008d7c:	2d00      	cmp	r5, #0
 8008d7e:	d14f      	bne.n	8008e20 <_strtod_l+0x398>
 8008d80:	9904      	ldr	r1, [sp, #16]
 8008d82:	4301      	orrs	r1, r0
 8008d84:	f47f aec2 	bne.w	8008b0c <_strtod_l+0x84>
 8008d88:	2a00      	cmp	r2, #0
 8008d8a:	f47f aedb 	bne.w	8008b44 <_strtod_l+0xbc>
 8008d8e:	2b69      	cmp	r3, #105	; 0x69
 8008d90:	d027      	beq.n	8008de2 <_strtod_l+0x35a>
 8008d92:	dc24      	bgt.n	8008dde <_strtod_l+0x356>
 8008d94:	2b49      	cmp	r3, #73	; 0x49
 8008d96:	d024      	beq.n	8008de2 <_strtod_l+0x35a>
 8008d98:	2b4e      	cmp	r3, #78	; 0x4e
 8008d9a:	f47f aed3 	bne.w	8008b44 <_strtod_l+0xbc>
 8008d9e:	499e      	ldr	r1, [pc, #632]	; (8009018 <_strtod_l+0x590>)
 8008da0:	a81d      	add	r0, sp, #116	; 0x74
 8008da2:	f001 fff3 	bl	800ad8c <__match>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	f43f aecc 	beq.w	8008b44 <_strtod_l+0xbc>
 8008dac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b28      	cmp	r3, #40	; 0x28
 8008db2:	d12d      	bne.n	8008e10 <_strtod_l+0x388>
 8008db4:	4999      	ldr	r1, [pc, #612]	; (800901c <_strtod_l+0x594>)
 8008db6:	aa20      	add	r2, sp, #128	; 0x80
 8008db8:	a81d      	add	r0, sp, #116	; 0x74
 8008dba:	f001 fffb 	bl	800adb4 <__hexnan>
 8008dbe:	2805      	cmp	r0, #5
 8008dc0:	d126      	bne.n	8008e10 <_strtod_l+0x388>
 8008dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dc4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008dc8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008dcc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008dd0:	e69c      	b.n	8008b0c <_strtod_l+0x84>
 8008dd2:	210a      	movs	r1, #10
 8008dd4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008dd8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008ddc:	e7b9      	b.n	8008d52 <_strtod_l+0x2ca>
 8008dde:	2b6e      	cmp	r3, #110	; 0x6e
 8008de0:	e7db      	b.n	8008d9a <_strtod_l+0x312>
 8008de2:	498f      	ldr	r1, [pc, #572]	; (8009020 <_strtod_l+0x598>)
 8008de4:	a81d      	add	r0, sp, #116	; 0x74
 8008de6:	f001 ffd1 	bl	800ad8c <__match>
 8008dea:	2800      	cmp	r0, #0
 8008dec:	f43f aeaa 	beq.w	8008b44 <_strtod_l+0xbc>
 8008df0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008df2:	498c      	ldr	r1, [pc, #560]	; (8009024 <_strtod_l+0x59c>)
 8008df4:	3b01      	subs	r3, #1
 8008df6:	a81d      	add	r0, sp, #116	; 0x74
 8008df8:	931d      	str	r3, [sp, #116]	; 0x74
 8008dfa:	f001 ffc7 	bl	800ad8c <__match>
 8008dfe:	b910      	cbnz	r0, 8008e06 <_strtod_l+0x37e>
 8008e00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e02:	3301      	adds	r3, #1
 8008e04:	931d      	str	r3, [sp, #116]	; 0x74
 8008e06:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009034 <_strtod_l+0x5ac>
 8008e0a:	f04f 0a00 	mov.w	sl, #0
 8008e0e:	e67d      	b.n	8008b0c <_strtod_l+0x84>
 8008e10:	4885      	ldr	r0, [pc, #532]	; (8009028 <_strtod_l+0x5a0>)
 8008e12:	f002 ff91 	bl	800bd38 <nan>
 8008e16:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008e1a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008e1e:	e675      	b.n	8008b0c <_strtod_l+0x84>
 8008e20:	9b07      	ldr	r3, [sp, #28]
 8008e22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e24:	1af3      	subs	r3, r6, r3
 8008e26:	2f00      	cmp	r7, #0
 8008e28:	bf08      	it	eq
 8008e2a:	462f      	moveq	r7, r5
 8008e2c:	2d10      	cmp	r5, #16
 8008e2e:	9308      	str	r3, [sp, #32]
 8008e30:	46a8      	mov	r8, r5
 8008e32:	bfa8      	it	ge
 8008e34:	f04f 0810 	movge.w	r8, #16
 8008e38:	f7f7 fb94 	bl	8000564 <__aeabi_ui2d>
 8008e3c:	2d09      	cmp	r5, #9
 8008e3e:	4682      	mov	sl, r0
 8008e40:	468b      	mov	fp, r1
 8008e42:	dd13      	ble.n	8008e6c <_strtod_l+0x3e4>
 8008e44:	4b79      	ldr	r3, [pc, #484]	; (800902c <_strtod_l+0x5a4>)
 8008e46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008e4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008e4e:	f7f7 fc03 	bl	8000658 <__aeabi_dmul>
 8008e52:	4682      	mov	sl, r0
 8008e54:	4648      	mov	r0, r9
 8008e56:	468b      	mov	fp, r1
 8008e58:	f7f7 fb84 	bl	8000564 <__aeabi_ui2d>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4650      	mov	r0, sl
 8008e62:	4659      	mov	r1, fp
 8008e64:	f7f7 fa42 	bl	80002ec <__adddf3>
 8008e68:	4682      	mov	sl, r0
 8008e6a:	468b      	mov	fp, r1
 8008e6c:	2d0f      	cmp	r5, #15
 8008e6e:	dc38      	bgt.n	8008ee2 <_strtod_l+0x45a>
 8008e70:	9b08      	ldr	r3, [sp, #32]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f43f ae4a 	beq.w	8008b0c <_strtod_l+0x84>
 8008e78:	dd24      	ble.n	8008ec4 <_strtod_l+0x43c>
 8008e7a:	2b16      	cmp	r3, #22
 8008e7c:	dc0b      	bgt.n	8008e96 <_strtod_l+0x40e>
 8008e7e:	4d6b      	ldr	r5, [pc, #428]	; (800902c <_strtod_l+0x5a4>)
 8008e80:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008e84:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008e88:	4652      	mov	r2, sl
 8008e8a:	465b      	mov	r3, fp
 8008e8c:	f7f7 fbe4 	bl	8000658 <__aeabi_dmul>
 8008e90:	4682      	mov	sl, r0
 8008e92:	468b      	mov	fp, r1
 8008e94:	e63a      	b.n	8008b0c <_strtod_l+0x84>
 8008e96:	9a08      	ldr	r2, [sp, #32]
 8008e98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	db20      	blt.n	8008ee2 <_strtod_l+0x45a>
 8008ea0:	4c62      	ldr	r4, [pc, #392]	; (800902c <_strtod_l+0x5a4>)
 8008ea2:	f1c5 050f 	rsb	r5, r5, #15
 8008ea6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008eaa:	4652      	mov	r2, sl
 8008eac:	465b      	mov	r3, fp
 8008eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eb2:	f7f7 fbd1 	bl	8000658 <__aeabi_dmul>
 8008eb6:	9b08      	ldr	r3, [sp, #32]
 8008eb8:	1b5d      	subs	r5, r3, r5
 8008eba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008ebe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008ec2:	e7e3      	b.n	8008e8c <_strtod_l+0x404>
 8008ec4:	9b08      	ldr	r3, [sp, #32]
 8008ec6:	3316      	adds	r3, #22
 8008ec8:	db0b      	blt.n	8008ee2 <_strtod_l+0x45a>
 8008eca:	9b07      	ldr	r3, [sp, #28]
 8008ecc:	4a57      	ldr	r2, [pc, #348]	; (800902c <_strtod_l+0x5a4>)
 8008ece:	1b9e      	subs	r6, r3, r6
 8008ed0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008ed4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ed8:	4650      	mov	r0, sl
 8008eda:	4659      	mov	r1, fp
 8008edc:	f7f7 fce6 	bl	80008ac <__aeabi_ddiv>
 8008ee0:	e7d6      	b.n	8008e90 <_strtod_l+0x408>
 8008ee2:	9b08      	ldr	r3, [sp, #32]
 8008ee4:	eba5 0808 	sub.w	r8, r5, r8
 8008ee8:	4498      	add	r8, r3
 8008eea:	f1b8 0f00 	cmp.w	r8, #0
 8008eee:	dd71      	ble.n	8008fd4 <_strtod_l+0x54c>
 8008ef0:	f018 030f 	ands.w	r3, r8, #15
 8008ef4:	d00a      	beq.n	8008f0c <_strtod_l+0x484>
 8008ef6:	494d      	ldr	r1, [pc, #308]	; (800902c <_strtod_l+0x5a4>)
 8008ef8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008efc:	4652      	mov	r2, sl
 8008efe:	465b      	mov	r3, fp
 8008f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f04:	f7f7 fba8 	bl	8000658 <__aeabi_dmul>
 8008f08:	4682      	mov	sl, r0
 8008f0a:	468b      	mov	fp, r1
 8008f0c:	f038 080f 	bics.w	r8, r8, #15
 8008f10:	d04d      	beq.n	8008fae <_strtod_l+0x526>
 8008f12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008f16:	dd22      	ble.n	8008f5e <_strtod_l+0x4d6>
 8008f18:	2500      	movs	r5, #0
 8008f1a:	462e      	mov	r6, r5
 8008f1c:	9509      	str	r5, [sp, #36]	; 0x24
 8008f1e:	9507      	str	r5, [sp, #28]
 8008f20:	2322      	movs	r3, #34	; 0x22
 8008f22:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009034 <_strtod_l+0x5ac>
 8008f26:	6023      	str	r3, [r4, #0]
 8008f28:	f04f 0a00 	mov.w	sl, #0
 8008f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f43f adec 	beq.w	8008b0c <_strtod_l+0x84>
 8008f34:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008f36:	4620      	mov	r0, r4
 8008f38:	f002 f8b8 	bl	800b0ac <_Bfree>
 8008f3c:	9907      	ldr	r1, [sp, #28]
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f002 f8b4 	bl	800b0ac <_Bfree>
 8008f44:	4631      	mov	r1, r6
 8008f46:	4620      	mov	r0, r4
 8008f48:	f002 f8b0 	bl	800b0ac <_Bfree>
 8008f4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f002 f8ac 	bl	800b0ac <_Bfree>
 8008f54:	4629      	mov	r1, r5
 8008f56:	4620      	mov	r0, r4
 8008f58:	f002 f8a8 	bl	800b0ac <_Bfree>
 8008f5c:	e5d6      	b.n	8008b0c <_strtod_l+0x84>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008f64:	4650      	mov	r0, sl
 8008f66:	4659      	mov	r1, fp
 8008f68:	4699      	mov	r9, r3
 8008f6a:	f1b8 0f01 	cmp.w	r8, #1
 8008f6e:	dc21      	bgt.n	8008fb4 <_strtod_l+0x52c>
 8008f70:	b10b      	cbz	r3, 8008f76 <_strtod_l+0x4ee>
 8008f72:	4682      	mov	sl, r0
 8008f74:	468b      	mov	fp, r1
 8008f76:	4b2e      	ldr	r3, [pc, #184]	; (8009030 <_strtod_l+0x5a8>)
 8008f78:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008f7c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008f80:	4652      	mov	r2, sl
 8008f82:	465b      	mov	r3, fp
 8008f84:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008f88:	f7f7 fb66 	bl	8000658 <__aeabi_dmul>
 8008f8c:	4b29      	ldr	r3, [pc, #164]	; (8009034 <_strtod_l+0x5ac>)
 8008f8e:	460a      	mov	r2, r1
 8008f90:	400b      	ands	r3, r1
 8008f92:	4929      	ldr	r1, [pc, #164]	; (8009038 <_strtod_l+0x5b0>)
 8008f94:	428b      	cmp	r3, r1
 8008f96:	4682      	mov	sl, r0
 8008f98:	d8be      	bhi.n	8008f18 <_strtod_l+0x490>
 8008f9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008f9e:	428b      	cmp	r3, r1
 8008fa0:	bf86      	itte	hi
 8008fa2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800903c <_strtod_l+0x5b4>
 8008fa6:	f04f 3aff 	movhi.w	sl, #4294967295
 8008faa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008fae:	2300      	movs	r3, #0
 8008fb0:	9304      	str	r3, [sp, #16]
 8008fb2:	e081      	b.n	80090b8 <_strtod_l+0x630>
 8008fb4:	f018 0f01 	tst.w	r8, #1
 8008fb8:	d007      	beq.n	8008fca <_strtod_l+0x542>
 8008fba:	4b1d      	ldr	r3, [pc, #116]	; (8009030 <_strtod_l+0x5a8>)
 8008fbc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	f7f7 fb48 	bl	8000658 <__aeabi_dmul>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	f109 0901 	add.w	r9, r9, #1
 8008fce:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008fd2:	e7ca      	b.n	8008f6a <_strtod_l+0x4e2>
 8008fd4:	d0eb      	beq.n	8008fae <_strtod_l+0x526>
 8008fd6:	f1c8 0800 	rsb	r8, r8, #0
 8008fda:	f018 020f 	ands.w	r2, r8, #15
 8008fde:	d00a      	beq.n	8008ff6 <_strtod_l+0x56e>
 8008fe0:	4b12      	ldr	r3, [pc, #72]	; (800902c <_strtod_l+0x5a4>)
 8008fe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fe6:	4650      	mov	r0, sl
 8008fe8:	4659      	mov	r1, fp
 8008fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fee:	f7f7 fc5d 	bl	80008ac <__aeabi_ddiv>
 8008ff2:	4682      	mov	sl, r0
 8008ff4:	468b      	mov	fp, r1
 8008ff6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008ffa:	d0d8      	beq.n	8008fae <_strtod_l+0x526>
 8008ffc:	f1b8 0f1f 	cmp.w	r8, #31
 8009000:	dd1e      	ble.n	8009040 <_strtod_l+0x5b8>
 8009002:	2500      	movs	r5, #0
 8009004:	462e      	mov	r6, r5
 8009006:	9509      	str	r5, [sp, #36]	; 0x24
 8009008:	9507      	str	r5, [sp, #28]
 800900a:	2322      	movs	r3, #34	; 0x22
 800900c:	f04f 0a00 	mov.w	sl, #0
 8009010:	f04f 0b00 	mov.w	fp, #0
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	e789      	b.n	8008f2c <_strtod_l+0x4a4>
 8009018:	0800c389 	.word	0x0800c389
 800901c:	0800c3c4 	.word	0x0800c3c4
 8009020:	0800c381 	.word	0x0800c381
 8009024:	0800c504 	.word	0x0800c504
 8009028:	0800c7c0 	.word	0x0800c7c0
 800902c:	0800c6a0 	.word	0x0800c6a0
 8009030:	0800c678 	.word	0x0800c678
 8009034:	7ff00000 	.word	0x7ff00000
 8009038:	7ca00000 	.word	0x7ca00000
 800903c:	7fefffff 	.word	0x7fefffff
 8009040:	f018 0310 	ands.w	r3, r8, #16
 8009044:	bf18      	it	ne
 8009046:	236a      	movne	r3, #106	; 0x6a
 8009048:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009400 <_strtod_l+0x978>
 800904c:	9304      	str	r3, [sp, #16]
 800904e:	4650      	mov	r0, sl
 8009050:	4659      	mov	r1, fp
 8009052:	2300      	movs	r3, #0
 8009054:	f018 0f01 	tst.w	r8, #1
 8009058:	d004      	beq.n	8009064 <_strtod_l+0x5dc>
 800905a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800905e:	f7f7 fafb 	bl	8000658 <__aeabi_dmul>
 8009062:	2301      	movs	r3, #1
 8009064:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009068:	f109 0908 	add.w	r9, r9, #8
 800906c:	d1f2      	bne.n	8009054 <_strtod_l+0x5cc>
 800906e:	b10b      	cbz	r3, 8009074 <_strtod_l+0x5ec>
 8009070:	4682      	mov	sl, r0
 8009072:	468b      	mov	fp, r1
 8009074:	9b04      	ldr	r3, [sp, #16]
 8009076:	b1bb      	cbz	r3, 80090a8 <_strtod_l+0x620>
 8009078:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800907c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009080:	2b00      	cmp	r3, #0
 8009082:	4659      	mov	r1, fp
 8009084:	dd10      	ble.n	80090a8 <_strtod_l+0x620>
 8009086:	2b1f      	cmp	r3, #31
 8009088:	f340 8128 	ble.w	80092dc <_strtod_l+0x854>
 800908c:	2b34      	cmp	r3, #52	; 0x34
 800908e:	bfde      	ittt	le
 8009090:	3b20      	suble	r3, #32
 8009092:	f04f 32ff 	movle.w	r2, #4294967295
 8009096:	fa02 f303 	lslle.w	r3, r2, r3
 800909a:	f04f 0a00 	mov.w	sl, #0
 800909e:	bfcc      	ite	gt
 80090a0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80090a4:	ea03 0b01 	andle.w	fp, r3, r1
 80090a8:	2200      	movs	r2, #0
 80090aa:	2300      	movs	r3, #0
 80090ac:	4650      	mov	r0, sl
 80090ae:	4659      	mov	r1, fp
 80090b0:	f7f7 fd3a 	bl	8000b28 <__aeabi_dcmpeq>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d1a4      	bne.n	8009002 <_strtod_l+0x57a>
 80090b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80090be:	462b      	mov	r3, r5
 80090c0:	463a      	mov	r2, r7
 80090c2:	4620      	mov	r0, r4
 80090c4:	f002 f85e 	bl	800b184 <__s2b>
 80090c8:	9009      	str	r0, [sp, #36]	; 0x24
 80090ca:	2800      	cmp	r0, #0
 80090cc:	f43f af24 	beq.w	8008f18 <_strtod_l+0x490>
 80090d0:	9b07      	ldr	r3, [sp, #28]
 80090d2:	1b9e      	subs	r6, r3, r6
 80090d4:	9b08      	ldr	r3, [sp, #32]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	bfb4      	ite	lt
 80090da:	4633      	movlt	r3, r6
 80090dc:	2300      	movge	r3, #0
 80090de:	9310      	str	r3, [sp, #64]	; 0x40
 80090e0:	9b08      	ldr	r3, [sp, #32]
 80090e2:	2500      	movs	r5, #0
 80090e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80090e8:	9318      	str	r3, [sp, #96]	; 0x60
 80090ea:	462e      	mov	r6, r5
 80090ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ee:	4620      	mov	r0, r4
 80090f0:	6859      	ldr	r1, [r3, #4]
 80090f2:	f001 ff9b 	bl	800b02c <_Balloc>
 80090f6:	9007      	str	r0, [sp, #28]
 80090f8:	2800      	cmp	r0, #0
 80090fa:	f43f af11 	beq.w	8008f20 <_strtod_l+0x498>
 80090fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009100:	691a      	ldr	r2, [r3, #16]
 8009102:	3202      	adds	r2, #2
 8009104:	f103 010c 	add.w	r1, r3, #12
 8009108:	0092      	lsls	r2, r2, #2
 800910a:	300c      	adds	r0, #12
 800910c:	f7fe fe79 	bl	8007e02 <memcpy>
 8009110:	ec4b ab10 	vmov	d0, sl, fp
 8009114:	aa20      	add	r2, sp, #128	; 0x80
 8009116:	a91f      	add	r1, sp, #124	; 0x7c
 8009118:	4620      	mov	r0, r4
 800911a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800911e:	f002 fb6d 	bl	800b7fc <__d2b>
 8009122:	901e      	str	r0, [sp, #120]	; 0x78
 8009124:	2800      	cmp	r0, #0
 8009126:	f43f aefb 	beq.w	8008f20 <_strtod_l+0x498>
 800912a:	2101      	movs	r1, #1
 800912c:	4620      	mov	r0, r4
 800912e:	f002 f8c3 	bl	800b2b8 <__i2b>
 8009132:	4606      	mov	r6, r0
 8009134:	2800      	cmp	r0, #0
 8009136:	f43f aef3 	beq.w	8008f20 <_strtod_l+0x498>
 800913a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800913c:	9904      	ldr	r1, [sp, #16]
 800913e:	2b00      	cmp	r3, #0
 8009140:	bfab      	itete	ge
 8009142:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009144:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009146:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009148:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800914c:	bfac      	ite	ge
 800914e:	eb03 0902 	addge.w	r9, r3, r2
 8009152:	1ad7      	sublt	r7, r2, r3
 8009154:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009156:	eba3 0801 	sub.w	r8, r3, r1
 800915a:	4490      	add	r8, r2
 800915c:	4ba3      	ldr	r3, [pc, #652]	; (80093ec <_strtod_l+0x964>)
 800915e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009162:	4598      	cmp	r8, r3
 8009164:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009168:	f280 80cc 	bge.w	8009304 <_strtod_l+0x87c>
 800916c:	eba3 0308 	sub.w	r3, r3, r8
 8009170:	2b1f      	cmp	r3, #31
 8009172:	eba2 0203 	sub.w	r2, r2, r3
 8009176:	f04f 0101 	mov.w	r1, #1
 800917a:	f300 80b6 	bgt.w	80092ea <_strtod_l+0x862>
 800917e:	fa01 f303 	lsl.w	r3, r1, r3
 8009182:	9311      	str	r3, [sp, #68]	; 0x44
 8009184:	2300      	movs	r3, #0
 8009186:	930c      	str	r3, [sp, #48]	; 0x30
 8009188:	eb09 0802 	add.w	r8, r9, r2
 800918c:	9b04      	ldr	r3, [sp, #16]
 800918e:	45c1      	cmp	r9, r8
 8009190:	4417      	add	r7, r2
 8009192:	441f      	add	r7, r3
 8009194:	464b      	mov	r3, r9
 8009196:	bfa8      	it	ge
 8009198:	4643      	movge	r3, r8
 800919a:	42bb      	cmp	r3, r7
 800919c:	bfa8      	it	ge
 800919e:	463b      	movge	r3, r7
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	bfc2      	ittt	gt
 80091a4:	eba8 0803 	subgt.w	r8, r8, r3
 80091a8:	1aff      	subgt	r7, r7, r3
 80091aa:	eba9 0903 	subgt.w	r9, r9, r3
 80091ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	dd17      	ble.n	80091e4 <_strtod_l+0x75c>
 80091b4:	4631      	mov	r1, r6
 80091b6:	461a      	mov	r2, r3
 80091b8:	4620      	mov	r0, r4
 80091ba:	f002 f939 	bl	800b430 <__pow5mult>
 80091be:	4606      	mov	r6, r0
 80091c0:	2800      	cmp	r0, #0
 80091c2:	f43f aead 	beq.w	8008f20 <_strtod_l+0x498>
 80091c6:	4601      	mov	r1, r0
 80091c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80091ca:	4620      	mov	r0, r4
 80091cc:	f002 f88a 	bl	800b2e4 <__multiply>
 80091d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80091d2:	2800      	cmp	r0, #0
 80091d4:	f43f aea4 	beq.w	8008f20 <_strtod_l+0x498>
 80091d8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80091da:	4620      	mov	r0, r4
 80091dc:	f001 ff66 	bl	800b0ac <_Bfree>
 80091e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091e2:	931e      	str	r3, [sp, #120]	; 0x78
 80091e4:	f1b8 0f00 	cmp.w	r8, #0
 80091e8:	f300 8091 	bgt.w	800930e <_strtod_l+0x886>
 80091ec:	9b08      	ldr	r3, [sp, #32]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	dd08      	ble.n	8009204 <_strtod_l+0x77c>
 80091f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80091f4:	9907      	ldr	r1, [sp, #28]
 80091f6:	4620      	mov	r0, r4
 80091f8:	f002 f91a 	bl	800b430 <__pow5mult>
 80091fc:	9007      	str	r0, [sp, #28]
 80091fe:	2800      	cmp	r0, #0
 8009200:	f43f ae8e 	beq.w	8008f20 <_strtod_l+0x498>
 8009204:	2f00      	cmp	r7, #0
 8009206:	dd08      	ble.n	800921a <_strtod_l+0x792>
 8009208:	9907      	ldr	r1, [sp, #28]
 800920a:	463a      	mov	r2, r7
 800920c:	4620      	mov	r0, r4
 800920e:	f002 f969 	bl	800b4e4 <__lshift>
 8009212:	9007      	str	r0, [sp, #28]
 8009214:	2800      	cmp	r0, #0
 8009216:	f43f ae83 	beq.w	8008f20 <_strtod_l+0x498>
 800921a:	f1b9 0f00 	cmp.w	r9, #0
 800921e:	dd08      	ble.n	8009232 <_strtod_l+0x7aa>
 8009220:	4631      	mov	r1, r6
 8009222:	464a      	mov	r2, r9
 8009224:	4620      	mov	r0, r4
 8009226:	f002 f95d 	bl	800b4e4 <__lshift>
 800922a:	4606      	mov	r6, r0
 800922c:	2800      	cmp	r0, #0
 800922e:	f43f ae77 	beq.w	8008f20 <_strtod_l+0x498>
 8009232:	9a07      	ldr	r2, [sp, #28]
 8009234:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009236:	4620      	mov	r0, r4
 8009238:	f002 f9dc 	bl	800b5f4 <__mdiff>
 800923c:	4605      	mov	r5, r0
 800923e:	2800      	cmp	r0, #0
 8009240:	f43f ae6e 	beq.w	8008f20 <_strtod_l+0x498>
 8009244:	68c3      	ldr	r3, [r0, #12]
 8009246:	930f      	str	r3, [sp, #60]	; 0x3c
 8009248:	2300      	movs	r3, #0
 800924a:	60c3      	str	r3, [r0, #12]
 800924c:	4631      	mov	r1, r6
 800924e:	f002 f9b5 	bl	800b5bc <__mcmp>
 8009252:	2800      	cmp	r0, #0
 8009254:	da65      	bge.n	8009322 <_strtod_l+0x89a>
 8009256:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009258:	ea53 030a 	orrs.w	r3, r3, sl
 800925c:	f040 8087 	bne.w	800936e <_strtod_l+0x8e6>
 8009260:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009264:	2b00      	cmp	r3, #0
 8009266:	f040 8082 	bne.w	800936e <_strtod_l+0x8e6>
 800926a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800926e:	0d1b      	lsrs	r3, r3, #20
 8009270:	051b      	lsls	r3, r3, #20
 8009272:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009276:	d97a      	bls.n	800936e <_strtod_l+0x8e6>
 8009278:	696b      	ldr	r3, [r5, #20]
 800927a:	b913      	cbnz	r3, 8009282 <_strtod_l+0x7fa>
 800927c:	692b      	ldr	r3, [r5, #16]
 800927e:	2b01      	cmp	r3, #1
 8009280:	dd75      	ble.n	800936e <_strtod_l+0x8e6>
 8009282:	4629      	mov	r1, r5
 8009284:	2201      	movs	r2, #1
 8009286:	4620      	mov	r0, r4
 8009288:	f002 f92c 	bl	800b4e4 <__lshift>
 800928c:	4631      	mov	r1, r6
 800928e:	4605      	mov	r5, r0
 8009290:	f002 f994 	bl	800b5bc <__mcmp>
 8009294:	2800      	cmp	r0, #0
 8009296:	dd6a      	ble.n	800936e <_strtod_l+0x8e6>
 8009298:	9904      	ldr	r1, [sp, #16]
 800929a:	4a55      	ldr	r2, [pc, #340]	; (80093f0 <_strtod_l+0x968>)
 800929c:	465b      	mov	r3, fp
 800929e:	2900      	cmp	r1, #0
 80092a0:	f000 8085 	beq.w	80093ae <_strtod_l+0x926>
 80092a4:	ea02 010b 	and.w	r1, r2, fp
 80092a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80092ac:	dc7f      	bgt.n	80093ae <_strtod_l+0x926>
 80092ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80092b2:	f77f aeaa 	ble.w	800900a <_strtod_l+0x582>
 80092b6:	4a4f      	ldr	r2, [pc, #316]	; (80093f4 <_strtod_l+0x96c>)
 80092b8:	2300      	movs	r3, #0
 80092ba:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80092be:	4650      	mov	r0, sl
 80092c0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80092c4:	4659      	mov	r1, fp
 80092c6:	f7f7 f9c7 	bl	8000658 <__aeabi_dmul>
 80092ca:	460b      	mov	r3, r1
 80092cc:	4303      	orrs	r3, r0
 80092ce:	bf08      	it	eq
 80092d0:	2322      	moveq	r3, #34	; 0x22
 80092d2:	4682      	mov	sl, r0
 80092d4:	468b      	mov	fp, r1
 80092d6:	bf08      	it	eq
 80092d8:	6023      	streq	r3, [r4, #0]
 80092da:	e62b      	b.n	8008f34 <_strtod_l+0x4ac>
 80092dc:	f04f 32ff 	mov.w	r2, #4294967295
 80092e0:	fa02 f303 	lsl.w	r3, r2, r3
 80092e4:	ea03 0a0a 	and.w	sl, r3, sl
 80092e8:	e6de      	b.n	80090a8 <_strtod_l+0x620>
 80092ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80092ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80092f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80092f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80092fa:	fa01 f308 	lsl.w	r3, r1, r8
 80092fe:	930c      	str	r3, [sp, #48]	; 0x30
 8009300:	9111      	str	r1, [sp, #68]	; 0x44
 8009302:	e741      	b.n	8009188 <_strtod_l+0x700>
 8009304:	2300      	movs	r3, #0
 8009306:	930c      	str	r3, [sp, #48]	; 0x30
 8009308:	2301      	movs	r3, #1
 800930a:	9311      	str	r3, [sp, #68]	; 0x44
 800930c:	e73c      	b.n	8009188 <_strtod_l+0x700>
 800930e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009310:	4642      	mov	r2, r8
 8009312:	4620      	mov	r0, r4
 8009314:	f002 f8e6 	bl	800b4e4 <__lshift>
 8009318:	901e      	str	r0, [sp, #120]	; 0x78
 800931a:	2800      	cmp	r0, #0
 800931c:	f47f af66 	bne.w	80091ec <_strtod_l+0x764>
 8009320:	e5fe      	b.n	8008f20 <_strtod_l+0x498>
 8009322:	465f      	mov	r7, fp
 8009324:	d16e      	bne.n	8009404 <_strtod_l+0x97c>
 8009326:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009328:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800932c:	b342      	cbz	r2, 8009380 <_strtod_l+0x8f8>
 800932e:	4a32      	ldr	r2, [pc, #200]	; (80093f8 <_strtod_l+0x970>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d128      	bne.n	8009386 <_strtod_l+0x8fe>
 8009334:	9b04      	ldr	r3, [sp, #16]
 8009336:	4650      	mov	r0, sl
 8009338:	b1eb      	cbz	r3, 8009376 <_strtod_l+0x8ee>
 800933a:	4a2d      	ldr	r2, [pc, #180]	; (80093f0 <_strtod_l+0x968>)
 800933c:	403a      	ands	r2, r7
 800933e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009342:	f04f 31ff 	mov.w	r1, #4294967295
 8009346:	d819      	bhi.n	800937c <_strtod_l+0x8f4>
 8009348:	0d12      	lsrs	r2, r2, #20
 800934a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800934e:	fa01 f303 	lsl.w	r3, r1, r3
 8009352:	4298      	cmp	r0, r3
 8009354:	d117      	bne.n	8009386 <_strtod_l+0x8fe>
 8009356:	4b29      	ldr	r3, [pc, #164]	; (80093fc <_strtod_l+0x974>)
 8009358:	429f      	cmp	r7, r3
 800935a:	d102      	bne.n	8009362 <_strtod_l+0x8da>
 800935c:	3001      	adds	r0, #1
 800935e:	f43f addf 	beq.w	8008f20 <_strtod_l+0x498>
 8009362:	4b23      	ldr	r3, [pc, #140]	; (80093f0 <_strtod_l+0x968>)
 8009364:	403b      	ands	r3, r7
 8009366:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800936a:	f04f 0a00 	mov.w	sl, #0
 800936e:	9b04      	ldr	r3, [sp, #16]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1a0      	bne.n	80092b6 <_strtod_l+0x82e>
 8009374:	e5de      	b.n	8008f34 <_strtod_l+0x4ac>
 8009376:	f04f 33ff 	mov.w	r3, #4294967295
 800937a:	e7ea      	b.n	8009352 <_strtod_l+0x8ca>
 800937c:	460b      	mov	r3, r1
 800937e:	e7e8      	b.n	8009352 <_strtod_l+0x8ca>
 8009380:	ea53 030a 	orrs.w	r3, r3, sl
 8009384:	d088      	beq.n	8009298 <_strtod_l+0x810>
 8009386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009388:	b1db      	cbz	r3, 80093c2 <_strtod_l+0x93a>
 800938a:	423b      	tst	r3, r7
 800938c:	d0ef      	beq.n	800936e <_strtod_l+0x8e6>
 800938e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009390:	9a04      	ldr	r2, [sp, #16]
 8009392:	4650      	mov	r0, sl
 8009394:	4659      	mov	r1, fp
 8009396:	b1c3      	cbz	r3, 80093ca <_strtod_l+0x942>
 8009398:	f7ff fb59 	bl	8008a4e <sulp>
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093a4:	f7f6 ffa2 	bl	80002ec <__adddf3>
 80093a8:	4682      	mov	sl, r0
 80093aa:	468b      	mov	fp, r1
 80093ac:	e7df      	b.n	800936e <_strtod_l+0x8e6>
 80093ae:	4013      	ands	r3, r2
 80093b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80093b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80093b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80093bc:	f04f 3aff 	mov.w	sl, #4294967295
 80093c0:	e7d5      	b.n	800936e <_strtod_l+0x8e6>
 80093c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093c4:	ea13 0f0a 	tst.w	r3, sl
 80093c8:	e7e0      	b.n	800938c <_strtod_l+0x904>
 80093ca:	f7ff fb40 	bl	8008a4e <sulp>
 80093ce:	4602      	mov	r2, r0
 80093d0:	460b      	mov	r3, r1
 80093d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093d6:	f7f6 ff87 	bl	80002e8 <__aeabi_dsub>
 80093da:	2200      	movs	r2, #0
 80093dc:	2300      	movs	r3, #0
 80093de:	4682      	mov	sl, r0
 80093e0:	468b      	mov	fp, r1
 80093e2:	f7f7 fba1 	bl	8000b28 <__aeabi_dcmpeq>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d0c1      	beq.n	800936e <_strtod_l+0x8e6>
 80093ea:	e60e      	b.n	800900a <_strtod_l+0x582>
 80093ec:	fffffc02 	.word	0xfffffc02
 80093f0:	7ff00000 	.word	0x7ff00000
 80093f4:	39500000 	.word	0x39500000
 80093f8:	000fffff 	.word	0x000fffff
 80093fc:	7fefffff 	.word	0x7fefffff
 8009400:	0800c3d8 	.word	0x0800c3d8
 8009404:	4631      	mov	r1, r6
 8009406:	4628      	mov	r0, r5
 8009408:	f002 fa54 	bl	800b8b4 <__ratio>
 800940c:	ec59 8b10 	vmov	r8, r9, d0
 8009410:	ee10 0a10 	vmov	r0, s0
 8009414:	2200      	movs	r2, #0
 8009416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800941a:	4649      	mov	r1, r9
 800941c:	f7f7 fb98 	bl	8000b50 <__aeabi_dcmple>
 8009420:	2800      	cmp	r0, #0
 8009422:	d07c      	beq.n	800951e <_strtod_l+0xa96>
 8009424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009426:	2b00      	cmp	r3, #0
 8009428:	d04c      	beq.n	80094c4 <_strtod_l+0xa3c>
 800942a:	4b95      	ldr	r3, [pc, #596]	; (8009680 <_strtod_l+0xbf8>)
 800942c:	2200      	movs	r2, #0
 800942e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009432:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009680 <_strtod_l+0xbf8>
 8009436:	f04f 0800 	mov.w	r8, #0
 800943a:	4b92      	ldr	r3, [pc, #584]	; (8009684 <_strtod_l+0xbfc>)
 800943c:	403b      	ands	r3, r7
 800943e:	9311      	str	r3, [sp, #68]	; 0x44
 8009440:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009442:	4b91      	ldr	r3, [pc, #580]	; (8009688 <_strtod_l+0xc00>)
 8009444:	429a      	cmp	r2, r3
 8009446:	f040 80b2 	bne.w	80095ae <_strtod_l+0xb26>
 800944a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800944e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009452:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009456:	ec4b ab10 	vmov	d0, sl, fp
 800945a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800945e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009462:	f002 f94f 	bl	800b704 <__ulp>
 8009466:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800946a:	ec53 2b10 	vmov	r2, r3, d0
 800946e:	f7f7 f8f3 	bl	8000658 <__aeabi_dmul>
 8009472:	4652      	mov	r2, sl
 8009474:	465b      	mov	r3, fp
 8009476:	f7f6 ff39 	bl	80002ec <__adddf3>
 800947a:	460b      	mov	r3, r1
 800947c:	4981      	ldr	r1, [pc, #516]	; (8009684 <_strtod_l+0xbfc>)
 800947e:	4a83      	ldr	r2, [pc, #524]	; (800968c <_strtod_l+0xc04>)
 8009480:	4019      	ands	r1, r3
 8009482:	4291      	cmp	r1, r2
 8009484:	4682      	mov	sl, r0
 8009486:	d95e      	bls.n	8009546 <_strtod_l+0xabe>
 8009488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800948a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800948e:	4293      	cmp	r3, r2
 8009490:	d103      	bne.n	800949a <_strtod_l+0xa12>
 8009492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009494:	3301      	adds	r3, #1
 8009496:	f43f ad43 	beq.w	8008f20 <_strtod_l+0x498>
 800949a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009698 <_strtod_l+0xc10>
 800949e:	f04f 3aff 	mov.w	sl, #4294967295
 80094a2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80094a4:	4620      	mov	r0, r4
 80094a6:	f001 fe01 	bl	800b0ac <_Bfree>
 80094aa:	9907      	ldr	r1, [sp, #28]
 80094ac:	4620      	mov	r0, r4
 80094ae:	f001 fdfd 	bl	800b0ac <_Bfree>
 80094b2:	4631      	mov	r1, r6
 80094b4:	4620      	mov	r0, r4
 80094b6:	f001 fdf9 	bl	800b0ac <_Bfree>
 80094ba:	4629      	mov	r1, r5
 80094bc:	4620      	mov	r0, r4
 80094be:	f001 fdf5 	bl	800b0ac <_Bfree>
 80094c2:	e613      	b.n	80090ec <_strtod_l+0x664>
 80094c4:	f1ba 0f00 	cmp.w	sl, #0
 80094c8:	d11b      	bne.n	8009502 <_strtod_l+0xa7a>
 80094ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094ce:	b9f3      	cbnz	r3, 800950e <_strtod_l+0xa86>
 80094d0:	4b6b      	ldr	r3, [pc, #428]	; (8009680 <_strtod_l+0xbf8>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	4640      	mov	r0, r8
 80094d6:	4649      	mov	r1, r9
 80094d8:	f7f7 fb30 	bl	8000b3c <__aeabi_dcmplt>
 80094dc:	b9d0      	cbnz	r0, 8009514 <_strtod_l+0xa8c>
 80094de:	4640      	mov	r0, r8
 80094e0:	4649      	mov	r1, r9
 80094e2:	4b6b      	ldr	r3, [pc, #428]	; (8009690 <_strtod_l+0xc08>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	f7f7 f8b7 	bl	8000658 <__aeabi_dmul>
 80094ea:	4680      	mov	r8, r0
 80094ec:	4689      	mov	r9, r1
 80094ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80094f2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80094f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80094f8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80094fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009500:	e79b      	b.n	800943a <_strtod_l+0x9b2>
 8009502:	f1ba 0f01 	cmp.w	sl, #1
 8009506:	d102      	bne.n	800950e <_strtod_l+0xa86>
 8009508:	2f00      	cmp	r7, #0
 800950a:	f43f ad7e 	beq.w	800900a <_strtod_l+0x582>
 800950e:	4b61      	ldr	r3, [pc, #388]	; (8009694 <_strtod_l+0xc0c>)
 8009510:	2200      	movs	r2, #0
 8009512:	e78c      	b.n	800942e <_strtod_l+0x9a6>
 8009514:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009690 <_strtod_l+0xc08>
 8009518:	f04f 0800 	mov.w	r8, #0
 800951c:	e7e7      	b.n	80094ee <_strtod_l+0xa66>
 800951e:	4b5c      	ldr	r3, [pc, #368]	; (8009690 <_strtod_l+0xc08>)
 8009520:	4640      	mov	r0, r8
 8009522:	4649      	mov	r1, r9
 8009524:	2200      	movs	r2, #0
 8009526:	f7f7 f897 	bl	8000658 <__aeabi_dmul>
 800952a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800952c:	4680      	mov	r8, r0
 800952e:	4689      	mov	r9, r1
 8009530:	b933      	cbnz	r3, 8009540 <_strtod_l+0xab8>
 8009532:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009536:	9012      	str	r0, [sp, #72]	; 0x48
 8009538:	9313      	str	r3, [sp, #76]	; 0x4c
 800953a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800953e:	e7dd      	b.n	80094fc <_strtod_l+0xa74>
 8009540:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009544:	e7f9      	b.n	800953a <_strtod_l+0xab2>
 8009546:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800954a:	9b04      	ldr	r3, [sp, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d1a8      	bne.n	80094a2 <_strtod_l+0xa1a>
 8009550:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009554:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009556:	0d1b      	lsrs	r3, r3, #20
 8009558:	051b      	lsls	r3, r3, #20
 800955a:	429a      	cmp	r2, r3
 800955c:	d1a1      	bne.n	80094a2 <_strtod_l+0xa1a>
 800955e:	4640      	mov	r0, r8
 8009560:	4649      	mov	r1, r9
 8009562:	f7f7 fbd9 	bl	8000d18 <__aeabi_d2lz>
 8009566:	f7f7 f849 	bl	80005fc <__aeabi_l2d>
 800956a:	4602      	mov	r2, r0
 800956c:	460b      	mov	r3, r1
 800956e:	4640      	mov	r0, r8
 8009570:	4649      	mov	r1, r9
 8009572:	f7f6 feb9 	bl	80002e8 <__aeabi_dsub>
 8009576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009578:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800957c:	ea43 030a 	orr.w	r3, r3, sl
 8009580:	4313      	orrs	r3, r2
 8009582:	4680      	mov	r8, r0
 8009584:	4689      	mov	r9, r1
 8009586:	d053      	beq.n	8009630 <_strtod_l+0xba8>
 8009588:	a335      	add	r3, pc, #212	; (adr r3, 8009660 <_strtod_l+0xbd8>)
 800958a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958e:	f7f7 fad5 	bl	8000b3c <__aeabi_dcmplt>
 8009592:	2800      	cmp	r0, #0
 8009594:	f47f acce 	bne.w	8008f34 <_strtod_l+0x4ac>
 8009598:	a333      	add	r3, pc, #204	; (adr r3, 8009668 <_strtod_l+0xbe0>)
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	4640      	mov	r0, r8
 80095a0:	4649      	mov	r1, r9
 80095a2:	f7f7 fae9 	bl	8000b78 <__aeabi_dcmpgt>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	f43f af7b 	beq.w	80094a2 <_strtod_l+0xa1a>
 80095ac:	e4c2      	b.n	8008f34 <_strtod_l+0x4ac>
 80095ae:	9b04      	ldr	r3, [sp, #16]
 80095b0:	b333      	cbz	r3, 8009600 <_strtod_l+0xb78>
 80095b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80095b8:	d822      	bhi.n	8009600 <_strtod_l+0xb78>
 80095ba:	a32d      	add	r3, pc, #180	; (adr r3, 8009670 <_strtod_l+0xbe8>)
 80095bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c0:	4640      	mov	r0, r8
 80095c2:	4649      	mov	r1, r9
 80095c4:	f7f7 fac4 	bl	8000b50 <__aeabi_dcmple>
 80095c8:	b1a0      	cbz	r0, 80095f4 <_strtod_l+0xb6c>
 80095ca:	4649      	mov	r1, r9
 80095cc:	4640      	mov	r0, r8
 80095ce:	f7f7 fb1b 	bl	8000c08 <__aeabi_d2uiz>
 80095d2:	2801      	cmp	r0, #1
 80095d4:	bf38      	it	cc
 80095d6:	2001      	movcc	r0, #1
 80095d8:	f7f6 ffc4 	bl	8000564 <__aeabi_ui2d>
 80095dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095de:	4680      	mov	r8, r0
 80095e0:	4689      	mov	r9, r1
 80095e2:	bb13      	cbnz	r3, 800962a <_strtod_l+0xba2>
 80095e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095e8:	9014      	str	r0, [sp, #80]	; 0x50
 80095ea:	9315      	str	r3, [sp, #84]	; 0x54
 80095ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80095f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80095f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80095f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80095fc:	1a9b      	subs	r3, r3, r2
 80095fe:	930d      	str	r3, [sp, #52]	; 0x34
 8009600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009604:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009608:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800960c:	f002 f87a 	bl	800b704 <__ulp>
 8009610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009614:	ec53 2b10 	vmov	r2, r3, d0
 8009618:	f7f7 f81e 	bl	8000658 <__aeabi_dmul>
 800961c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009620:	f7f6 fe64 	bl	80002ec <__adddf3>
 8009624:	4682      	mov	sl, r0
 8009626:	468b      	mov	fp, r1
 8009628:	e78f      	b.n	800954a <_strtod_l+0xac2>
 800962a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800962e:	e7dd      	b.n	80095ec <_strtod_l+0xb64>
 8009630:	a311      	add	r3, pc, #68	; (adr r3, 8009678 <_strtod_l+0xbf0>)
 8009632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009636:	f7f7 fa81 	bl	8000b3c <__aeabi_dcmplt>
 800963a:	e7b4      	b.n	80095a6 <_strtod_l+0xb1e>
 800963c:	2300      	movs	r3, #0
 800963e:	930e      	str	r3, [sp, #56]	; 0x38
 8009640:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009642:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009644:	6013      	str	r3, [r2, #0]
 8009646:	f7ff ba65 	b.w	8008b14 <_strtod_l+0x8c>
 800964a:	2b65      	cmp	r3, #101	; 0x65
 800964c:	f43f ab5d 	beq.w	8008d0a <_strtod_l+0x282>
 8009650:	2b45      	cmp	r3, #69	; 0x45
 8009652:	f43f ab5a 	beq.w	8008d0a <_strtod_l+0x282>
 8009656:	2201      	movs	r2, #1
 8009658:	f7ff bb92 	b.w	8008d80 <_strtod_l+0x2f8>
 800965c:	f3af 8000 	nop.w
 8009660:	94a03595 	.word	0x94a03595
 8009664:	3fdfffff 	.word	0x3fdfffff
 8009668:	35afe535 	.word	0x35afe535
 800966c:	3fe00000 	.word	0x3fe00000
 8009670:	ffc00000 	.word	0xffc00000
 8009674:	41dfffff 	.word	0x41dfffff
 8009678:	94a03595 	.word	0x94a03595
 800967c:	3fcfffff 	.word	0x3fcfffff
 8009680:	3ff00000 	.word	0x3ff00000
 8009684:	7ff00000 	.word	0x7ff00000
 8009688:	7fe00000 	.word	0x7fe00000
 800968c:	7c9fffff 	.word	0x7c9fffff
 8009690:	3fe00000 	.word	0x3fe00000
 8009694:	bff00000 	.word	0xbff00000
 8009698:	7fefffff 	.word	0x7fefffff

0800969c <strtod>:
 800969c:	460a      	mov	r2, r1
 800969e:	4601      	mov	r1, r0
 80096a0:	4802      	ldr	r0, [pc, #8]	; (80096ac <strtod+0x10>)
 80096a2:	4b03      	ldr	r3, [pc, #12]	; (80096b0 <strtod+0x14>)
 80096a4:	6800      	ldr	r0, [r0, #0]
 80096a6:	f7ff b9ef 	b.w	8008a88 <_strtod_l>
 80096aa:	bf00      	nop
 80096ac:	20000044 	.word	0x20000044
 80096b0:	200000ac 	.word	0x200000ac

080096b4 <_strtol_l.isra.0>:
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096ba:	d001      	beq.n	80096c0 <_strtol_l.isra.0+0xc>
 80096bc:	2b24      	cmp	r3, #36	; 0x24
 80096be:	d906      	bls.n	80096ce <_strtol_l.isra.0+0x1a>
 80096c0:	f7fe fa7c 	bl	8007bbc <__errno>
 80096c4:	2316      	movs	r3, #22
 80096c6:	6003      	str	r3, [r0, #0]
 80096c8:	2000      	movs	r0, #0
 80096ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ce:	4f3a      	ldr	r7, [pc, #232]	; (80097b8 <_strtol_l.isra.0+0x104>)
 80096d0:	468e      	mov	lr, r1
 80096d2:	4676      	mov	r6, lr
 80096d4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80096d8:	5de5      	ldrb	r5, [r4, r7]
 80096da:	f015 0508 	ands.w	r5, r5, #8
 80096de:	d1f8      	bne.n	80096d2 <_strtol_l.isra.0+0x1e>
 80096e0:	2c2d      	cmp	r4, #45	; 0x2d
 80096e2:	d134      	bne.n	800974e <_strtol_l.isra.0+0x9a>
 80096e4:	f89e 4000 	ldrb.w	r4, [lr]
 80096e8:	f04f 0801 	mov.w	r8, #1
 80096ec:	f106 0e02 	add.w	lr, r6, #2
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d05c      	beq.n	80097ae <_strtol_l.isra.0+0xfa>
 80096f4:	2b10      	cmp	r3, #16
 80096f6:	d10c      	bne.n	8009712 <_strtol_l.isra.0+0x5e>
 80096f8:	2c30      	cmp	r4, #48	; 0x30
 80096fa:	d10a      	bne.n	8009712 <_strtol_l.isra.0+0x5e>
 80096fc:	f89e 4000 	ldrb.w	r4, [lr]
 8009700:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009704:	2c58      	cmp	r4, #88	; 0x58
 8009706:	d14d      	bne.n	80097a4 <_strtol_l.isra.0+0xf0>
 8009708:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800970c:	2310      	movs	r3, #16
 800970e:	f10e 0e02 	add.w	lr, lr, #2
 8009712:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009716:	f10c 3cff 	add.w	ip, ip, #4294967295
 800971a:	2600      	movs	r6, #0
 800971c:	fbbc f9f3 	udiv	r9, ip, r3
 8009720:	4635      	mov	r5, r6
 8009722:	fb03 ca19 	mls	sl, r3, r9, ip
 8009726:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800972a:	2f09      	cmp	r7, #9
 800972c:	d818      	bhi.n	8009760 <_strtol_l.isra.0+0xac>
 800972e:	463c      	mov	r4, r7
 8009730:	42a3      	cmp	r3, r4
 8009732:	dd24      	ble.n	800977e <_strtol_l.isra.0+0xca>
 8009734:	2e00      	cmp	r6, #0
 8009736:	db1f      	blt.n	8009778 <_strtol_l.isra.0+0xc4>
 8009738:	45a9      	cmp	r9, r5
 800973a:	d31d      	bcc.n	8009778 <_strtol_l.isra.0+0xc4>
 800973c:	d101      	bne.n	8009742 <_strtol_l.isra.0+0x8e>
 800973e:	45a2      	cmp	sl, r4
 8009740:	db1a      	blt.n	8009778 <_strtol_l.isra.0+0xc4>
 8009742:	fb05 4503 	mla	r5, r5, r3, r4
 8009746:	2601      	movs	r6, #1
 8009748:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800974c:	e7eb      	b.n	8009726 <_strtol_l.isra.0+0x72>
 800974e:	2c2b      	cmp	r4, #43	; 0x2b
 8009750:	bf08      	it	eq
 8009752:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009756:	46a8      	mov	r8, r5
 8009758:	bf08      	it	eq
 800975a:	f106 0e02 	addeq.w	lr, r6, #2
 800975e:	e7c7      	b.n	80096f0 <_strtol_l.isra.0+0x3c>
 8009760:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009764:	2f19      	cmp	r7, #25
 8009766:	d801      	bhi.n	800976c <_strtol_l.isra.0+0xb8>
 8009768:	3c37      	subs	r4, #55	; 0x37
 800976a:	e7e1      	b.n	8009730 <_strtol_l.isra.0+0x7c>
 800976c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009770:	2f19      	cmp	r7, #25
 8009772:	d804      	bhi.n	800977e <_strtol_l.isra.0+0xca>
 8009774:	3c57      	subs	r4, #87	; 0x57
 8009776:	e7db      	b.n	8009730 <_strtol_l.isra.0+0x7c>
 8009778:	f04f 36ff 	mov.w	r6, #4294967295
 800977c:	e7e4      	b.n	8009748 <_strtol_l.isra.0+0x94>
 800977e:	2e00      	cmp	r6, #0
 8009780:	da05      	bge.n	800978e <_strtol_l.isra.0+0xda>
 8009782:	2322      	movs	r3, #34	; 0x22
 8009784:	6003      	str	r3, [r0, #0]
 8009786:	4665      	mov	r5, ip
 8009788:	b942      	cbnz	r2, 800979c <_strtol_l.isra.0+0xe8>
 800978a:	4628      	mov	r0, r5
 800978c:	e79d      	b.n	80096ca <_strtol_l.isra.0+0x16>
 800978e:	f1b8 0f00 	cmp.w	r8, #0
 8009792:	d000      	beq.n	8009796 <_strtol_l.isra.0+0xe2>
 8009794:	426d      	negs	r5, r5
 8009796:	2a00      	cmp	r2, #0
 8009798:	d0f7      	beq.n	800978a <_strtol_l.isra.0+0xd6>
 800979a:	b10e      	cbz	r6, 80097a0 <_strtol_l.isra.0+0xec>
 800979c:	f10e 31ff 	add.w	r1, lr, #4294967295
 80097a0:	6011      	str	r1, [r2, #0]
 80097a2:	e7f2      	b.n	800978a <_strtol_l.isra.0+0xd6>
 80097a4:	2430      	movs	r4, #48	; 0x30
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1b3      	bne.n	8009712 <_strtol_l.isra.0+0x5e>
 80097aa:	2308      	movs	r3, #8
 80097ac:	e7b1      	b.n	8009712 <_strtol_l.isra.0+0x5e>
 80097ae:	2c30      	cmp	r4, #48	; 0x30
 80097b0:	d0a4      	beq.n	80096fc <_strtol_l.isra.0+0x48>
 80097b2:	230a      	movs	r3, #10
 80097b4:	e7ad      	b.n	8009712 <_strtol_l.isra.0+0x5e>
 80097b6:	bf00      	nop
 80097b8:	0800c401 	.word	0x0800c401

080097bc <strtol>:
 80097bc:	4613      	mov	r3, r2
 80097be:	460a      	mov	r2, r1
 80097c0:	4601      	mov	r1, r0
 80097c2:	4802      	ldr	r0, [pc, #8]	; (80097cc <strtol+0x10>)
 80097c4:	6800      	ldr	r0, [r0, #0]
 80097c6:	f7ff bf75 	b.w	80096b4 <_strtol_l.isra.0>
 80097ca:	bf00      	nop
 80097cc:	20000044 	.word	0x20000044

080097d0 <__swbuf_r>:
 80097d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d2:	460e      	mov	r6, r1
 80097d4:	4614      	mov	r4, r2
 80097d6:	4605      	mov	r5, r0
 80097d8:	b118      	cbz	r0, 80097e2 <__swbuf_r+0x12>
 80097da:	6983      	ldr	r3, [r0, #24]
 80097dc:	b90b      	cbnz	r3, 80097e2 <__swbuf_r+0x12>
 80097de:	f7fe fa4b 	bl	8007c78 <__sinit>
 80097e2:	4b21      	ldr	r3, [pc, #132]	; (8009868 <__swbuf_r+0x98>)
 80097e4:	429c      	cmp	r4, r3
 80097e6:	d12b      	bne.n	8009840 <__swbuf_r+0x70>
 80097e8:	686c      	ldr	r4, [r5, #4]
 80097ea:	69a3      	ldr	r3, [r4, #24]
 80097ec:	60a3      	str	r3, [r4, #8]
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	071a      	lsls	r2, r3, #28
 80097f2:	d52f      	bpl.n	8009854 <__swbuf_r+0x84>
 80097f4:	6923      	ldr	r3, [r4, #16]
 80097f6:	b36b      	cbz	r3, 8009854 <__swbuf_r+0x84>
 80097f8:	6923      	ldr	r3, [r4, #16]
 80097fa:	6820      	ldr	r0, [r4, #0]
 80097fc:	1ac0      	subs	r0, r0, r3
 80097fe:	6963      	ldr	r3, [r4, #20]
 8009800:	b2f6      	uxtb	r6, r6
 8009802:	4283      	cmp	r3, r0
 8009804:	4637      	mov	r7, r6
 8009806:	dc04      	bgt.n	8009812 <__swbuf_r+0x42>
 8009808:	4621      	mov	r1, r4
 800980a:	4628      	mov	r0, r5
 800980c:	f000 ffc2 	bl	800a794 <_fflush_r>
 8009810:	bb30      	cbnz	r0, 8009860 <__swbuf_r+0x90>
 8009812:	68a3      	ldr	r3, [r4, #8]
 8009814:	3b01      	subs	r3, #1
 8009816:	60a3      	str	r3, [r4, #8]
 8009818:	6823      	ldr	r3, [r4, #0]
 800981a:	1c5a      	adds	r2, r3, #1
 800981c:	6022      	str	r2, [r4, #0]
 800981e:	701e      	strb	r6, [r3, #0]
 8009820:	6963      	ldr	r3, [r4, #20]
 8009822:	3001      	adds	r0, #1
 8009824:	4283      	cmp	r3, r0
 8009826:	d004      	beq.n	8009832 <__swbuf_r+0x62>
 8009828:	89a3      	ldrh	r3, [r4, #12]
 800982a:	07db      	lsls	r3, r3, #31
 800982c:	d506      	bpl.n	800983c <__swbuf_r+0x6c>
 800982e:	2e0a      	cmp	r6, #10
 8009830:	d104      	bne.n	800983c <__swbuf_r+0x6c>
 8009832:	4621      	mov	r1, r4
 8009834:	4628      	mov	r0, r5
 8009836:	f000 ffad 	bl	800a794 <_fflush_r>
 800983a:	b988      	cbnz	r0, 8009860 <__swbuf_r+0x90>
 800983c:	4638      	mov	r0, r7
 800983e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009840:	4b0a      	ldr	r3, [pc, #40]	; (800986c <__swbuf_r+0x9c>)
 8009842:	429c      	cmp	r4, r3
 8009844:	d101      	bne.n	800984a <__swbuf_r+0x7a>
 8009846:	68ac      	ldr	r4, [r5, #8]
 8009848:	e7cf      	b.n	80097ea <__swbuf_r+0x1a>
 800984a:	4b09      	ldr	r3, [pc, #36]	; (8009870 <__swbuf_r+0xa0>)
 800984c:	429c      	cmp	r4, r3
 800984e:	bf08      	it	eq
 8009850:	68ec      	ldreq	r4, [r5, #12]
 8009852:	e7ca      	b.n	80097ea <__swbuf_r+0x1a>
 8009854:	4621      	mov	r1, r4
 8009856:	4628      	mov	r0, r5
 8009858:	f000 f81e 	bl	8009898 <__swsetup_r>
 800985c:	2800      	cmp	r0, #0
 800985e:	d0cb      	beq.n	80097f8 <__swbuf_r+0x28>
 8009860:	f04f 37ff 	mov.w	r7, #4294967295
 8009864:	e7ea      	b.n	800983c <__swbuf_r+0x6c>
 8009866:	bf00      	nop
 8009868:	0800c338 	.word	0x0800c338
 800986c:	0800c358 	.word	0x0800c358
 8009870:	0800c318 	.word	0x0800c318

08009874 <_write_r>:
 8009874:	b538      	push	{r3, r4, r5, lr}
 8009876:	4d07      	ldr	r5, [pc, #28]	; (8009894 <_write_r+0x20>)
 8009878:	4604      	mov	r4, r0
 800987a:	4608      	mov	r0, r1
 800987c:	4611      	mov	r1, r2
 800987e:	2200      	movs	r2, #0
 8009880:	602a      	str	r2, [r5, #0]
 8009882:	461a      	mov	r2, r3
 8009884:	f7f8 fd46 	bl	8002314 <_write>
 8009888:	1c43      	adds	r3, r0, #1
 800988a:	d102      	bne.n	8009892 <_write_r+0x1e>
 800988c:	682b      	ldr	r3, [r5, #0]
 800988e:	b103      	cbz	r3, 8009892 <_write_r+0x1e>
 8009890:	6023      	str	r3, [r4, #0]
 8009892:	bd38      	pop	{r3, r4, r5, pc}
 8009894:	200045f8 	.word	0x200045f8

08009898 <__swsetup_r>:
 8009898:	4b32      	ldr	r3, [pc, #200]	; (8009964 <__swsetup_r+0xcc>)
 800989a:	b570      	push	{r4, r5, r6, lr}
 800989c:	681d      	ldr	r5, [r3, #0]
 800989e:	4606      	mov	r6, r0
 80098a0:	460c      	mov	r4, r1
 80098a2:	b125      	cbz	r5, 80098ae <__swsetup_r+0x16>
 80098a4:	69ab      	ldr	r3, [r5, #24]
 80098a6:	b913      	cbnz	r3, 80098ae <__swsetup_r+0x16>
 80098a8:	4628      	mov	r0, r5
 80098aa:	f7fe f9e5 	bl	8007c78 <__sinit>
 80098ae:	4b2e      	ldr	r3, [pc, #184]	; (8009968 <__swsetup_r+0xd0>)
 80098b0:	429c      	cmp	r4, r3
 80098b2:	d10f      	bne.n	80098d4 <__swsetup_r+0x3c>
 80098b4:	686c      	ldr	r4, [r5, #4]
 80098b6:	89a3      	ldrh	r3, [r4, #12]
 80098b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098bc:	0719      	lsls	r1, r3, #28
 80098be:	d42c      	bmi.n	800991a <__swsetup_r+0x82>
 80098c0:	06dd      	lsls	r5, r3, #27
 80098c2:	d411      	bmi.n	80098e8 <__swsetup_r+0x50>
 80098c4:	2309      	movs	r3, #9
 80098c6:	6033      	str	r3, [r6, #0]
 80098c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098cc:	81a3      	strh	r3, [r4, #12]
 80098ce:	f04f 30ff 	mov.w	r0, #4294967295
 80098d2:	e03e      	b.n	8009952 <__swsetup_r+0xba>
 80098d4:	4b25      	ldr	r3, [pc, #148]	; (800996c <__swsetup_r+0xd4>)
 80098d6:	429c      	cmp	r4, r3
 80098d8:	d101      	bne.n	80098de <__swsetup_r+0x46>
 80098da:	68ac      	ldr	r4, [r5, #8]
 80098dc:	e7eb      	b.n	80098b6 <__swsetup_r+0x1e>
 80098de:	4b24      	ldr	r3, [pc, #144]	; (8009970 <__swsetup_r+0xd8>)
 80098e0:	429c      	cmp	r4, r3
 80098e2:	bf08      	it	eq
 80098e4:	68ec      	ldreq	r4, [r5, #12]
 80098e6:	e7e6      	b.n	80098b6 <__swsetup_r+0x1e>
 80098e8:	0758      	lsls	r0, r3, #29
 80098ea:	d512      	bpl.n	8009912 <__swsetup_r+0x7a>
 80098ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ee:	b141      	cbz	r1, 8009902 <__swsetup_r+0x6a>
 80098f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098f4:	4299      	cmp	r1, r3
 80098f6:	d002      	beq.n	80098fe <__swsetup_r+0x66>
 80098f8:	4630      	mov	r0, r6
 80098fa:	f002 f861 	bl	800b9c0 <_free_r>
 80098fe:	2300      	movs	r3, #0
 8009900:	6363      	str	r3, [r4, #52]	; 0x34
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009908:	81a3      	strh	r3, [r4, #12]
 800990a:	2300      	movs	r3, #0
 800990c:	6063      	str	r3, [r4, #4]
 800990e:	6923      	ldr	r3, [r4, #16]
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	f043 0308 	orr.w	r3, r3, #8
 8009918:	81a3      	strh	r3, [r4, #12]
 800991a:	6923      	ldr	r3, [r4, #16]
 800991c:	b94b      	cbnz	r3, 8009932 <__swsetup_r+0x9a>
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009928:	d003      	beq.n	8009932 <__swsetup_r+0x9a>
 800992a:	4621      	mov	r1, r4
 800992c:	4630      	mov	r0, r6
 800992e:	f001 fb17 	bl	800af60 <__smakebuf_r>
 8009932:	89a0      	ldrh	r0, [r4, #12]
 8009934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009938:	f010 0301 	ands.w	r3, r0, #1
 800993c:	d00a      	beq.n	8009954 <__swsetup_r+0xbc>
 800993e:	2300      	movs	r3, #0
 8009940:	60a3      	str	r3, [r4, #8]
 8009942:	6963      	ldr	r3, [r4, #20]
 8009944:	425b      	negs	r3, r3
 8009946:	61a3      	str	r3, [r4, #24]
 8009948:	6923      	ldr	r3, [r4, #16]
 800994a:	b943      	cbnz	r3, 800995e <__swsetup_r+0xc6>
 800994c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009950:	d1ba      	bne.n	80098c8 <__swsetup_r+0x30>
 8009952:	bd70      	pop	{r4, r5, r6, pc}
 8009954:	0781      	lsls	r1, r0, #30
 8009956:	bf58      	it	pl
 8009958:	6963      	ldrpl	r3, [r4, #20]
 800995a:	60a3      	str	r3, [r4, #8]
 800995c:	e7f4      	b.n	8009948 <__swsetup_r+0xb0>
 800995e:	2000      	movs	r0, #0
 8009960:	e7f7      	b.n	8009952 <__swsetup_r+0xba>
 8009962:	bf00      	nop
 8009964:	20000044 	.word	0x20000044
 8009968:	0800c338 	.word	0x0800c338
 800996c:	0800c358 	.word	0x0800c358
 8009970:	0800c318 	.word	0x0800c318

08009974 <_close_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4d06      	ldr	r5, [pc, #24]	; (8009990 <_close_r+0x1c>)
 8009978:	2300      	movs	r3, #0
 800997a:	4604      	mov	r4, r0
 800997c:	4608      	mov	r0, r1
 800997e:	602b      	str	r3, [r5, #0]
 8009980:	f7f8 fce4 	bl	800234c <_close>
 8009984:	1c43      	adds	r3, r0, #1
 8009986:	d102      	bne.n	800998e <_close_r+0x1a>
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	b103      	cbz	r3, 800998e <_close_r+0x1a>
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	bd38      	pop	{r3, r4, r5, pc}
 8009990:	200045f8 	.word	0x200045f8

08009994 <quorem>:
 8009994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009998:	6903      	ldr	r3, [r0, #16]
 800999a:	690c      	ldr	r4, [r1, #16]
 800999c:	42a3      	cmp	r3, r4
 800999e:	4607      	mov	r7, r0
 80099a0:	f2c0 8081 	blt.w	8009aa6 <quorem+0x112>
 80099a4:	3c01      	subs	r4, #1
 80099a6:	f101 0814 	add.w	r8, r1, #20
 80099aa:	f100 0514 	add.w	r5, r0, #20
 80099ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099b2:	9301      	str	r3, [sp, #4]
 80099b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80099b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099bc:	3301      	adds	r3, #1
 80099be:	429a      	cmp	r2, r3
 80099c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80099c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80099c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80099cc:	d331      	bcc.n	8009a32 <quorem+0x9e>
 80099ce:	f04f 0e00 	mov.w	lr, #0
 80099d2:	4640      	mov	r0, r8
 80099d4:	46ac      	mov	ip, r5
 80099d6:	46f2      	mov	sl, lr
 80099d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80099dc:	b293      	uxth	r3, r2
 80099de:	fb06 e303 	mla	r3, r6, r3, lr
 80099e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	ebaa 0303 	sub.w	r3, sl, r3
 80099ec:	0c12      	lsrs	r2, r2, #16
 80099ee:	f8dc a000 	ldr.w	sl, [ip]
 80099f2:	fb06 e202 	mla	r2, r6, r2, lr
 80099f6:	fa13 f38a 	uxtah	r3, r3, sl
 80099fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80099fe:	fa1f fa82 	uxth.w	sl, r2
 8009a02:	f8dc 2000 	ldr.w	r2, [ip]
 8009a06:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009a0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a14:	4581      	cmp	r9, r0
 8009a16:	f84c 3b04 	str.w	r3, [ip], #4
 8009a1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009a1e:	d2db      	bcs.n	80099d8 <quorem+0x44>
 8009a20:	f855 300b 	ldr.w	r3, [r5, fp]
 8009a24:	b92b      	cbnz	r3, 8009a32 <quorem+0x9e>
 8009a26:	9b01      	ldr	r3, [sp, #4]
 8009a28:	3b04      	subs	r3, #4
 8009a2a:	429d      	cmp	r5, r3
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	d32e      	bcc.n	8009a8e <quorem+0xfa>
 8009a30:	613c      	str	r4, [r7, #16]
 8009a32:	4638      	mov	r0, r7
 8009a34:	f001 fdc2 	bl	800b5bc <__mcmp>
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	db24      	blt.n	8009a86 <quorem+0xf2>
 8009a3c:	3601      	adds	r6, #1
 8009a3e:	4628      	mov	r0, r5
 8009a40:	f04f 0c00 	mov.w	ip, #0
 8009a44:	f858 2b04 	ldr.w	r2, [r8], #4
 8009a48:	f8d0 e000 	ldr.w	lr, [r0]
 8009a4c:	b293      	uxth	r3, r2
 8009a4e:	ebac 0303 	sub.w	r3, ip, r3
 8009a52:	0c12      	lsrs	r2, r2, #16
 8009a54:	fa13 f38e 	uxtah	r3, r3, lr
 8009a58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009a5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a66:	45c1      	cmp	r9, r8
 8009a68:	f840 3b04 	str.w	r3, [r0], #4
 8009a6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009a70:	d2e8      	bcs.n	8009a44 <quorem+0xb0>
 8009a72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a7a:	b922      	cbnz	r2, 8009a86 <quorem+0xf2>
 8009a7c:	3b04      	subs	r3, #4
 8009a7e:	429d      	cmp	r5, r3
 8009a80:	461a      	mov	r2, r3
 8009a82:	d30a      	bcc.n	8009a9a <quorem+0x106>
 8009a84:	613c      	str	r4, [r7, #16]
 8009a86:	4630      	mov	r0, r6
 8009a88:	b003      	add	sp, #12
 8009a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8e:	6812      	ldr	r2, [r2, #0]
 8009a90:	3b04      	subs	r3, #4
 8009a92:	2a00      	cmp	r2, #0
 8009a94:	d1cc      	bne.n	8009a30 <quorem+0x9c>
 8009a96:	3c01      	subs	r4, #1
 8009a98:	e7c7      	b.n	8009a2a <quorem+0x96>
 8009a9a:	6812      	ldr	r2, [r2, #0]
 8009a9c:	3b04      	subs	r3, #4
 8009a9e:	2a00      	cmp	r2, #0
 8009aa0:	d1f0      	bne.n	8009a84 <quorem+0xf0>
 8009aa2:	3c01      	subs	r4, #1
 8009aa4:	e7eb      	b.n	8009a7e <quorem+0xea>
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	e7ee      	b.n	8009a88 <quorem+0xf4>
 8009aaa:	0000      	movs	r0, r0
 8009aac:	0000      	movs	r0, r0
	...

08009ab0 <_dtoa_r>:
 8009ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab4:	ed2d 8b02 	vpush	{d8}
 8009ab8:	ec57 6b10 	vmov	r6, r7, d0
 8009abc:	b095      	sub	sp, #84	; 0x54
 8009abe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ac0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009ac4:	9105      	str	r1, [sp, #20]
 8009ac6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009aca:	4604      	mov	r4, r0
 8009acc:	9209      	str	r2, [sp, #36]	; 0x24
 8009ace:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ad0:	b975      	cbnz	r5, 8009af0 <_dtoa_r+0x40>
 8009ad2:	2010      	movs	r0, #16
 8009ad4:	f001 fa84 	bl	800afe0 <malloc>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	6260      	str	r0, [r4, #36]	; 0x24
 8009adc:	b920      	cbnz	r0, 8009ae8 <_dtoa_r+0x38>
 8009ade:	4bb2      	ldr	r3, [pc, #712]	; (8009da8 <_dtoa_r+0x2f8>)
 8009ae0:	21ea      	movs	r1, #234	; 0xea
 8009ae2:	48b2      	ldr	r0, [pc, #712]	; (8009dac <_dtoa_r+0x2fc>)
 8009ae4:	f002 f950 	bl	800bd88 <__assert_func>
 8009ae8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009aec:	6005      	str	r5, [r0, #0]
 8009aee:	60c5      	str	r5, [r0, #12]
 8009af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009af2:	6819      	ldr	r1, [r3, #0]
 8009af4:	b151      	cbz	r1, 8009b0c <_dtoa_r+0x5c>
 8009af6:	685a      	ldr	r2, [r3, #4]
 8009af8:	604a      	str	r2, [r1, #4]
 8009afa:	2301      	movs	r3, #1
 8009afc:	4093      	lsls	r3, r2
 8009afe:	608b      	str	r3, [r1, #8]
 8009b00:	4620      	mov	r0, r4
 8009b02:	f001 fad3 	bl	800b0ac <_Bfree>
 8009b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b08:	2200      	movs	r2, #0
 8009b0a:	601a      	str	r2, [r3, #0]
 8009b0c:	1e3b      	subs	r3, r7, #0
 8009b0e:	bfb9      	ittee	lt
 8009b10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b14:	9303      	strlt	r3, [sp, #12]
 8009b16:	2300      	movge	r3, #0
 8009b18:	f8c8 3000 	strge.w	r3, [r8]
 8009b1c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009b20:	4ba3      	ldr	r3, [pc, #652]	; (8009db0 <_dtoa_r+0x300>)
 8009b22:	bfbc      	itt	lt
 8009b24:	2201      	movlt	r2, #1
 8009b26:	f8c8 2000 	strlt.w	r2, [r8]
 8009b2a:	ea33 0309 	bics.w	r3, r3, r9
 8009b2e:	d11b      	bne.n	8009b68 <_dtoa_r+0xb8>
 8009b30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b32:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b36:	6013      	str	r3, [r2, #0]
 8009b38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b3c:	4333      	orrs	r3, r6
 8009b3e:	f000 857a 	beq.w	800a636 <_dtoa_r+0xb86>
 8009b42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b44:	b963      	cbnz	r3, 8009b60 <_dtoa_r+0xb0>
 8009b46:	4b9b      	ldr	r3, [pc, #620]	; (8009db4 <_dtoa_r+0x304>)
 8009b48:	e024      	b.n	8009b94 <_dtoa_r+0xe4>
 8009b4a:	4b9b      	ldr	r3, [pc, #620]	; (8009db8 <_dtoa_r+0x308>)
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	3308      	adds	r3, #8
 8009b50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009b52:	6013      	str	r3, [r2, #0]
 8009b54:	9800      	ldr	r0, [sp, #0]
 8009b56:	b015      	add	sp, #84	; 0x54
 8009b58:	ecbd 8b02 	vpop	{d8}
 8009b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b60:	4b94      	ldr	r3, [pc, #592]	; (8009db4 <_dtoa_r+0x304>)
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	3303      	adds	r3, #3
 8009b66:	e7f3      	b.n	8009b50 <_dtoa_r+0xa0>
 8009b68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	ec51 0b17 	vmov	r0, r1, d7
 8009b72:	2300      	movs	r3, #0
 8009b74:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009b78:	f7f6 ffd6 	bl	8000b28 <__aeabi_dcmpeq>
 8009b7c:	4680      	mov	r8, r0
 8009b7e:	b158      	cbz	r0, 8009b98 <_dtoa_r+0xe8>
 8009b80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b82:	2301      	movs	r3, #1
 8009b84:	6013      	str	r3, [r2, #0]
 8009b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 8551 	beq.w	800a630 <_dtoa_r+0xb80>
 8009b8e:	488b      	ldr	r0, [pc, #556]	; (8009dbc <_dtoa_r+0x30c>)
 8009b90:	6018      	str	r0, [r3, #0]
 8009b92:	1e43      	subs	r3, r0, #1
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	e7dd      	b.n	8009b54 <_dtoa_r+0xa4>
 8009b98:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009b9c:	aa12      	add	r2, sp, #72	; 0x48
 8009b9e:	a913      	add	r1, sp, #76	; 0x4c
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f001 fe2b 	bl	800b7fc <__d2b>
 8009ba6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009baa:	4683      	mov	fp, r0
 8009bac:	2d00      	cmp	r5, #0
 8009bae:	d07c      	beq.n	8009caa <_dtoa_r+0x1fa>
 8009bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bb2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009bb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009bbe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009bc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009bc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009bca:	4b7d      	ldr	r3, [pc, #500]	; (8009dc0 <_dtoa_r+0x310>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	4630      	mov	r0, r6
 8009bd0:	4639      	mov	r1, r7
 8009bd2:	f7f6 fb89 	bl	80002e8 <__aeabi_dsub>
 8009bd6:	a36e      	add	r3, pc, #440	; (adr r3, 8009d90 <_dtoa_r+0x2e0>)
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	f7f6 fd3c 	bl	8000658 <__aeabi_dmul>
 8009be0:	a36d      	add	r3, pc, #436	; (adr r3, 8009d98 <_dtoa_r+0x2e8>)
 8009be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be6:	f7f6 fb81 	bl	80002ec <__adddf3>
 8009bea:	4606      	mov	r6, r0
 8009bec:	4628      	mov	r0, r5
 8009bee:	460f      	mov	r7, r1
 8009bf0:	f7f6 fcc8 	bl	8000584 <__aeabi_i2d>
 8009bf4:	a36a      	add	r3, pc, #424	; (adr r3, 8009da0 <_dtoa_r+0x2f0>)
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	f7f6 fd2d 	bl	8000658 <__aeabi_dmul>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	4630      	mov	r0, r6
 8009c04:	4639      	mov	r1, r7
 8009c06:	f7f6 fb71 	bl	80002ec <__adddf3>
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	460f      	mov	r7, r1
 8009c0e:	f7f6 ffd3 	bl	8000bb8 <__aeabi_d2iz>
 8009c12:	2200      	movs	r2, #0
 8009c14:	4682      	mov	sl, r0
 8009c16:	2300      	movs	r3, #0
 8009c18:	4630      	mov	r0, r6
 8009c1a:	4639      	mov	r1, r7
 8009c1c:	f7f6 ff8e 	bl	8000b3c <__aeabi_dcmplt>
 8009c20:	b148      	cbz	r0, 8009c36 <_dtoa_r+0x186>
 8009c22:	4650      	mov	r0, sl
 8009c24:	f7f6 fcae 	bl	8000584 <__aeabi_i2d>
 8009c28:	4632      	mov	r2, r6
 8009c2a:	463b      	mov	r3, r7
 8009c2c:	f7f6 ff7c 	bl	8000b28 <__aeabi_dcmpeq>
 8009c30:	b908      	cbnz	r0, 8009c36 <_dtoa_r+0x186>
 8009c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c36:	f1ba 0f16 	cmp.w	sl, #22
 8009c3a:	d854      	bhi.n	8009ce6 <_dtoa_r+0x236>
 8009c3c:	4b61      	ldr	r3, [pc, #388]	; (8009dc4 <_dtoa_r+0x314>)
 8009c3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c4a:	f7f6 ff77 	bl	8000b3c <__aeabi_dcmplt>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d04b      	beq.n	8009cea <_dtoa_r+0x23a>
 8009c52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c56:	2300      	movs	r3, #0
 8009c58:	930e      	str	r3, [sp, #56]	; 0x38
 8009c5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c5c:	1b5d      	subs	r5, r3, r5
 8009c5e:	1e6b      	subs	r3, r5, #1
 8009c60:	9304      	str	r3, [sp, #16]
 8009c62:	bf43      	ittte	mi
 8009c64:	2300      	movmi	r3, #0
 8009c66:	f1c5 0801 	rsbmi	r8, r5, #1
 8009c6a:	9304      	strmi	r3, [sp, #16]
 8009c6c:	f04f 0800 	movpl.w	r8, #0
 8009c70:	f1ba 0f00 	cmp.w	sl, #0
 8009c74:	db3b      	blt.n	8009cee <_dtoa_r+0x23e>
 8009c76:	9b04      	ldr	r3, [sp, #16]
 8009c78:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009c7c:	4453      	add	r3, sl
 8009c7e:	9304      	str	r3, [sp, #16]
 8009c80:	2300      	movs	r3, #0
 8009c82:	9306      	str	r3, [sp, #24]
 8009c84:	9b05      	ldr	r3, [sp, #20]
 8009c86:	2b09      	cmp	r3, #9
 8009c88:	d869      	bhi.n	8009d5e <_dtoa_r+0x2ae>
 8009c8a:	2b05      	cmp	r3, #5
 8009c8c:	bfc4      	itt	gt
 8009c8e:	3b04      	subgt	r3, #4
 8009c90:	9305      	strgt	r3, [sp, #20]
 8009c92:	9b05      	ldr	r3, [sp, #20]
 8009c94:	f1a3 0302 	sub.w	r3, r3, #2
 8009c98:	bfcc      	ite	gt
 8009c9a:	2500      	movgt	r5, #0
 8009c9c:	2501      	movle	r5, #1
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	d869      	bhi.n	8009d76 <_dtoa_r+0x2c6>
 8009ca2:	e8df f003 	tbb	[pc, r3]
 8009ca6:	4e2c      	.short	0x4e2c
 8009ca8:	5a4c      	.short	0x5a4c
 8009caa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009cae:	441d      	add	r5, r3
 8009cb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009cb4:	2b20      	cmp	r3, #32
 8009cb6:	bfc1      	itttt	gt
 8009cb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009cbc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009cc0:	fa09 f303 	lslgt.w	r3, r9, r3
 8009cc4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009cc8:	bfda      	itte	le
 8009cca:	f1c3 0320 	rsble	r3, r3, #32
 8009cce:	fa06 f003 	lslle.w	r0, r6, r3
 8009cd2:	4318      	orrgt	r0, r3
 8009cd4:	f7f6 fc46 	bl	8000564 <__aeabi_ui2d>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	4606      	mov	r6, r0
 8009cdc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009ce0:	3d01      	subs	r5, #1
 8009ce2:	9310      	str	r3, [sp, #64]	; 0x40
 8009ce4:	e771      	b.n	8009bca <_dtoa_r+0x11a>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e7b6      	b.n	8009c58 <_dtoa_r+0x1a8>
 8009cea:	900e      	str	r0, [sp, #56]	; 0x38
 8009cec:	e7b5      	b.n	8009c5a <_dtoa_r+0x1aa>
 8009cee:	f1ca 0300 	rsb	r3, sl, #0
 8009cf2:	9306      	str	r3, [sp, #24]
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	eba8 080a 	sub.w	r8, r8, sl
 8009cfa:	930d      	str	r3, [sp, #52]	; 0x34
 8009cfc:	e7c2      	b.n	8009c84 <_dtoa_r+0x1d4>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	9308      	str	r3, [sp, #32]
 8009d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	dc39      	bgt.n	8009d7c <_dtoa_r+0x2cc>
 8009d08:	f04f 0901 	mov.w	r9, #1
 8009d0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009d10:	464b      	mov	r3, r9
 8009d12:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009d16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009d18:	2200      	movs	r2, #0
 8009d1a:	6042      	str	r2, [r0, #4]
 8009d1c:	2204      	movs	r2, #4
 8009d1e:	f102 0614 	add.w	r6, r2, #20
 8009d22:	429e      	cmp	r6, r3
 8009d24:	6841      	ldr	r1, [r0, #4]
 8009d26:	d92f      	bls.n	8009d88 <_dtoa_r+0x2d8>
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f001 f97f 	bl	800b02c <_Balloc>
 8009d2e:	9000      	str	r0, [sp, #0]
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d14b      	bne.n	8009dcc <_dtoa_r+0x31c>
 8009d34:	4b24      	ldr	r3, [pc, #144]	; (8009dc8 <_dtoa_r+0x318>)
 8009d36:	4602      	mov	r2, r0
 8009d38:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009d3c:	e6d1      	b.n	8009ae2 <_dtoa_r+0x32>
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e7de      	b.n	8009d00 <_dtoa_r+0x250>
 8009d42:	2300      	movs	r3, #0
 8009d44:	9308      	str	r3, [sp, #32]
 8009d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d48:	eb0a 0903 	add.w	r9, sl, r3
 8009d4c:	f109 0301 	add.w	r3, r9, #1
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	9301      	str	r3, [sp, #4]
 8009d54:	bfb8      	it	lt
 8009d56:	2301      	movlt	r3, #1
 8009d58:	e7dd      	b.n	8009d16 <_dtoa_r+0x266>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e7f2      	b.n	8009d44 <_dtoa_r+0x294>
 8009d5e:	2501      	movs	r5, #1
 8009d60:	2300      	movs	r3, #0
 8009d62:	9305      	str	r3, [sp, #20]
 8009d64:	9508      	str	r5, [sp, #32]
 8009d66:	f04f 39ff 	mov.w	r9, #4294967295
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009d70:	2312      	movs	r3, #18
 8009d72:	9209      	str	r2, [sp, #36]	; 0x24
 8009d74:	e7cf      	b.n	8009d16 <_dtoa_r+0x266>
 8009d76:	2301      	movs	r3, #1
 8009d78:	9308      	str	r3, [sp, #32]
 8009d7a:	e7f4      	b.n	8009d66 <_dtoa_r+0x2b6>
 8009d7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009d80:	f8cd 9004 	str.w	r9, [sp, #4]
 8009d84:	464b      	mov	r3, r9
 8009d86:	e7c6      	b.n	8009d16 <_dtoa_r+0x266>
 8009d88:	3101      	adds	r1, #1
 8009d8a:	6041      	str	r1, [r0, #4]
 8009d8c:	0052      	lsls	r2, r2, #1
 8009d8e:	e7c6      	b.n	8009d1e <_dtoa_r+0x26e>
 8009d90:	636f4361 	.word	0x636f4361
 8009d94:	3fd287a7 	.word	0x3fd287a7
 8009d98:	8b60c8b3 	.word	0x8b60c8b3
 8009d9c:	3fc68a28 	.word	0x3fc68a28
 8009da0:	509f79fb 	.word	0x509f79fb
 8009da4:	3fd34413 	.word	0x3fd34413
 8009da8:	0800c50e 	.word	0x0800c50e
 8009dac:	0800c525 	.word	0x0800c525
 8009db0:	7ff00000 	.word	0x7ff00000
 8009db4:	0800c50a 	.word	0x0800c50a
 8009db8:	0800c501 	.word	0x0800c501
 8009dbc:	0800c38d 	.word	0x0800c38d
 8009dc0:	3ff80000 	.word	0x3ff80000
 8009dc4:	0800c6a0 	.word	0x0800c6a0
 8009dc8:	0800c584 	.word	0x0800c584
 8009dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dce:	9a00      	ldr	r2, [sp, #0]
 8009dd0:	601a      	str	r2, [r3, #0]
 8009dd2:	9b01      	ldr	r3, [sp, #4]
 8009dd4:	2b0e      	cmp	r3, #14
 8009dd6:	f200 80ad 	bhi.w	8009f34 <_dtoa_r+0x484>
 8009dda:	2d00      	cmp	r5, #0
 8009ddc:	f000 80aa 	beq.w	8009f34 <_dtoa_r+0x484>
 8009de0:	f1ba 0f00 	cmp.w	sl, #0
 8009de4:	dd36      	ble.n	8009e54 <_dtoa_r+0x3a4>
 8009de6:	4ac3      	ldr	r2, [pc, #780]	; (800a0f4 <_dtoa_r+0x644>)
 8009de8:	f00a 030f 	and.w	r3, sl, #15
 8009dec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009df0:	ed93 7b00 	vldr	d7, [r3]
 8009df4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009df8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009dfc:	eeb0 8a47 	vmov.f32	s16, s14
 8009e00:	eef0 8a67 	vmov.f32	s17, s15
 8009e04:	d016      	beq.n	8009e34 <_dtoa_r+0x384>
 8009e06:	4bbc      	ldr	r3, [pc, #752]	; (800a0f8 <_dtoa_r+0x648>)
 8009e08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e10:	f7f6 fd4c 	bl	80008ac <__aeabi_ddiv>
 8009e14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e18:	f007 070f 	and.w	r7, r7, #15
 8009e1c:	2503      	movs	r5, #3
 8009e1e:	4eb6      	ldr	r6, [pc, #728]	; (800a0f8 <_dtoa_r+0x648>)
 8009e20:	b957      	cbnz	r7, 8009e38 <_dtoa_r+0x388>
 8009e22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e26:	ec53 2b18 	vmov	r2, r3, d8
 8009e2a:	f7f6 fd3f 	bl	80008ac <__aeabi_ddiv>
 8009e2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e32:	e029      	b.n	8009e88 <_dtoa_r+0x3d8>
 8009e34:	2502      	movs	r5, #2
 8009e36:	e7f2      	b.n	8009e1e <_dtoa_r+0x36e>
 8009e38:	07f9      	lsls	r1, r7, #31
 8009e3a:	d508      	bpl.n	8009e4e <_dtoa_r+0x39e>
 8009e3c:	ec51 0b18 	vmov	r0, r1, d8
 8009e40:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e44:	f7f6 fc08 	bl	8000658 <__aeabi_dmul>
 8009e48:	ec41 0b18 	vmov	d8, r0, r1
 8009e4c:	3501      	adds	r5, #1
 8009e4e:	107f      	asrs	r7, r7, #1
 8009e50:	3608      	adds	r6, #8
 8009e52:	e7e5      	b.n	8009e20 <_dtoa_r+0x370>
 8009e54:	f000 80a6 	beq.w	8009fa4 <_dtoa_r+0x4f4>
 8009e58:	f1ca 0600 	rsb	r6, sl, #0
 8009e5c:	4ba5      	ldr	r3, [pc, #660]	; (800a0f4 <_dtoa_r+0x644>)
 8009e5e:	4fa6      	ldr	r7, [pc, #664]	; (800a0f8 <_dtoa_r+0x648>)
 8009e60:	f006 020f 	and.w	r2, r6, #15
 8009e64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e70:	f7f6 fbf2 	bl	8000658 <__aeabi_dmul>
 8009e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e78:	1136      	asrs	r6, r6, #4
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	2502      	movs	r5, #2
 8009e7e:	2e00      	cmp	r6, #0
 8009e80:	f040 8085 	bne.w	8009f8e <_dtoa_r+0x4de>
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1d2      	bne.n	8009e2e <_dtoa_r+0x37e>
 8009e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 808c 	beq.w	8009fa8 <_dtoa_r+0x4f8>
 8009e90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e94:	4b99      	ldr	r3, [pc, #612]	; (800a0fc <_dtoa_r+0x64c>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	4630      	mov	r0, r6
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	f7f6 fe4e 	bl	8000b3c <__aeabi_dcmplt>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	f000 8081 	beq.w	8009fa8 <_dtoa_r+0x4f8>
 8009ea6:	9b01      	ldr	r3, [sp, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d07d      	beq.n	8009fa8 <_dtoa_r+0x4f8>
 8009eac:	f1b9 0f00 	cmp.w	r9, #0
 8009eb0:	dd3c      	ble.n	8009f2c <_dtoa_r+0x47c>
 8009eb2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009eb6:	9307      	str	r3, [sp, #28]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	4b91      	ldr	r3, [pc, #580]	; (800a100 <_dtoa_r+0x650>)
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	4639      	mov	r1, r7
 8009ec0:	f7f6 fbca 	bl	8000658 <__aeabi_dmul>
 8009ec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ec8:	3501      	adds	r5, #1
 8009eca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009ece:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	f7f6 fb56 	bl	8000584 <__aeabi_i2d>
 8009ed8:	4632      	mov	r2, r6
 8009eda:	463b      	mov	r3, r7
 8009edc:	f7f6 fbbc 	bl	8000658 <__aeabi_dmul>
 8009ee0:	4b88      	ldr	r3, [pc, #544]	; (800a104 <_dtoa_r+0x654>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f7f6 fa02 	bl	80002ec <__adddf3>
 8009ee8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ef0:	9303      	str	r3, [sp, #12]
 8009ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d15c      	bne.n	8009fb2 <_dtoa_r+0x502>
 8009ef8:	4b83      	ldr	r3, [pc, #524]	; (800a108 <_dtoa_r+0x658>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	4630      	mov	r0, r6
 8009efe:	4639      	mov	r1, r7
 8009f00:	f7f6 f9f2 	bl	80002e8 <__aeabi_dsub>
 8009f04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f08:	4606      	mov	r6, r0
 8009f0a:	460f      	mov	r7, r1
 8009f0c:	f7f6 fe34 	bl	8000b78 <__aeabi_dcmpgt>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	f040 8296 	bne.w	800a442 <_dtoa_r+0x992>
 8009f16:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f20:	4639      	mov	r1, r7
 8009f22:	f7f6 fe0b 	bl	8000b3c <__aeabi_dcmplt>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	f040 8288 	bne.w	800a43c <_dtoa_r+0x98c>
 8009f2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009f30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f2c0 8158 	blt.w	800a1ec <_dtoa_r+0x73c>
 8009f3c:	f1ba 0f0e 	cmp.w	sl, #14
 8009f40:	f300 8154 	bgt.w	800a1ec <_dtoa_r+0x73c>
 8009f44:	4b6b      	ldr	r3, [pc, #428]	; (800a0f4 <_dtoa_r+0x644>)
 8009f46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f280 80e3 	bge.w	800a11c <_dtoa_r+0x66c>
 8009f56:	9b01      	ldr	r3, [sp, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	f300 80df 	bgt.w	800a11c <_dtoa_r+0x66c>
 8009f5e:	f040 826d 	bne.w	800a43c <_dtoa_r+0x98c>
 8009f62:	4b69      	ldr	r3, [pc, #420]	; (800a108 <_dtoa_r+0x658>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	4640      	mov	r0, r8
 8009f68:	4649      	mov	r1, r9
 8009f6a:	f7f6 fb75 	bl	8000658 <__aeabi_dmul>
 8009f6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f72:	f7f6 fdf7 	bl	8000b64 <__aeabi_dcmpge>
 8009f76:	9e01      	ldr	r6, [sp, #4]
 8009f78:	4637      	mov	r7, r6
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	f040 8243 	bne.w	800a406 <_dtoa_r+0x956>
 8009f80:	9d00      	ldr	r5, [sp, #0]
 8009f82:	2331      	movs	r3, #49	; 0x31
 8009f84:	f805 3b01 	strb.w	r3, [r5], #1
 8009f88:	f10a 0a01 	add.w	sl, sl, #1
 8009f8c:	e23f      	b.n	800a40e <_dtoa_r+0x95e>
 8009f8e:	07f2      	lsls	r2, r6, #31
 8009f90:	d505      	bpl.n	8009f9e <_dtoa_r+0x4ee>
 8009f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f96:	f7f6 fb5f 	bl	8000658 <__aeabi_dmul>
 8009f9a:	3501      	adds	r5, #1
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	1076      	asrs	r6, r6, #1
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	e76c      	b.n	8009e7e <_dtoa_r+0x3ce>
 8009fa4:	2502      	movs	r5, #2
 8009fa6:	e76f      	b.n	8009e88 <_dtoa_r+0x3d8>
 8009fa8:	9b01      	ldr	r3, [sp, #4]
 8009faa:	f8cd a01c 	str.w	sl, [sp, #28]
 8009fae:	930c      	str	r3, [sp, #48]	; 0x30
 8009fb0:	e78d      	b.n	8009ece <_dtoa_r+0x41e>
 8009fb2:	9900      	ldr	r1, [sp, #0]
 8009fb4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009fb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fb8:	4b4e      	ldr	r3, [pc, #312]	; (800a0f4 <_dtoa_r+0x644>)
 8009fba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009fbe:	4401      	add	r1, r0
 8009fc0:	9102      	str	r1, [sp, #8]
 8009fc2:	9908      	ldr	r1, [sp, #32]
 8009fc4:	eeb0 8a47 	vmov.f32	s16, s14
 8009fc8:	eef0 8a67 	vmov.f32	s17, s15
 8009fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009fd4:	2900      	cmp	r1, #0
 8009fd6:	d045      	beq.n	800a064 <_dtoa_r+0x5b4>
 8009fd8:	494c      	ldr	r1, [pc, #304]	; (800a10c <_dtoa_r+0x65c>)
 8009fda:	2000      	movs	r0, #0
 8009fdc:	f7f6 fc66 	bl	80008ac <__aeabi_ddiv>
 8009fe0:	ec53 2b18 	vmov	r2, r3, d8
 8009fe4:	f7f6 f980 	bl	80002e8 <__aeabi_dsub>
 8009fe8:	9d00      	ldr	r5, [sp, #0]
 8009fea:	ec41 0b18 	vmov	d8, r0, r1
 8009fee:	4639      	mov	r1, r7
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	f7f6 fde1 	bl	8000bb8 <__aeabi_d2iz>
 8009ff6:	900c      	str	r0, [sp, #48]	; 0x30
 8009ff8:	f7f6 fac4 	bl	8000584 <__aeabi_i2d>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	460b      	mov	r3, r1
 800a000:	4630      	mov	r0, r6
 800a002:	4639      	mov	r1, r7
 800a004:	f7f6 f970 	bl	80002e8 <__aeabi_dsub>
 800a008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a00a:	3330      	adds	r3, #48	; 0x30
 800a00c:	f805 3b01 	strb.w	r3, [r5], #1
 800a010:	ec53 2b18 	vmov	r2, r3, d8
 800a014:	4606      	mov	r6, r0
 800a016:	460f      	mov	r7, r1
 800a018:	f7f6 fd90 	bl	8000b3c <__aeabi_dcmplt>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d165      	bne.n	800a0ec <_dtoa_r+0x63c>
 800a020:	4632      	mov	r2, r6
 800a022:	463b      	mov	r3, r7
 800a024:	4935      	ldr	r1, [pc, #212]	; (800a0fc <_dtoa_r+0x64c>)
 800a026:	2000      	movs	r0, #0
 800a028:	f7f6 f95e 	bl	80002e8 <__aeabi_dsub>
 800a02c:	ec53 2b18 	vmov	r2, r3, d8
 800a030:	f7f6 fd84 	bl	8000b3c <__aeabi_dcmplt>
 800a034:	2800      	cmp	r0, #0
 800a036:	f040 80b9 	bne.w	800a1ac <_dtoa_r+0x6fc>
 800a03a:	9b02      	ldr	r3, [sp, #8]
 800a03c:	429d      	cmp	r5, r3
 800a03e:	f43f af75 	beq.w	8009f2c <_dtoa_r+0x47c>
 800a042:	4b2f      	ldr	r3, [pc, #188]	; (800a100 <_dtoa_r+0x650>)
 800a044:	ec51 0b18 	vmov	r0, r1, d8
 800a048:	2200      	movs	r2, #0
 800a04a:	f7f6 fb05 	bl	8000658 <__aeabi_dmul>
 800a04e:	4b2c      	ldr	r3, [pc, #176]	; (800a100 <_dtoa_r+0x650>)
 800a050:	ec41 0b18 	vmov	d8, r0, r1
 800a054:	2200      	movs	r2, #0
 800a056:	4630      	mov	r0, r6
 800a058:	4639      	mov	r1, r7
 800a05a:	f7f6 fafd 	bl	8000658 <__aeabi_dmul>
 800a05e:	4606      	mov	r6, r0
 800a060:	460f      	mov	r7, r1
 800a062:	e7c4      	b.n	8009fee <_dtoa_r+0x53e>
 800a064:	ec51 0b17 	vmov	r0, r1, d7
 800a068:	f7f6 faf6 	bl	8000658 <__aeabi_dmul>
 800a06c:	9b02      	ldr	r3, [sp, #8]
 800a06e:	9d00      	ldr	r5, [sp, #0]
 800a070:	930c      	str	r3, [sp, #48]	; 0x30
 800a072:	ec41 0b18 	vmov	d8, r0, r1
 800a076:	4639      	mov	r1, r7
 800a078:	4630      	mov	r0, r6
 800a07a:	f7f6 fd9d 	bl	8000bb8 <__aeabi_d2iz>
 800a07e:	9011      	str	r0, [sp, #68]	; 0x44
 800a080:	f7f6 fa80 	bl	8000584 <__aeabi_i2d>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	4630      	mov	r0, r6
 800a08a:	4639      	mov	r1, r7
 800a08c:	f7f6 f92c 	bl	80002e8 <__aeabi_dsub>
 800a090:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a092:	3330      	adds	r3, #48	; 0x30
 800a094:	f805 3b01 	strb.w	r3, [r5], #1
 800a098:	9b02      	ldr	r3, [sp, #8]
 800a09a:	429d      	cmp	r5, r3
 800a09c:	4606      	mov	r6, r0
 800a09e:	460f      	mov	r7, r1
 800a0a0:	f04f 0200 	mov.w	r2, #0
 800a0a4:	d134      	bne.n	800a110 <_dtoa_r+0x660>
 800a0a6:	4b19      	ldr	r3, [pc, #100]	; (800a10c <_dtoa_r+0x65c>)
 800a0a8:	ec51 0b18 	vmov	r0, r1, d8
 800a0ac:	f7f6 f91e 	bl	80002ec <__adddf3>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	4639      	mov	r1, r7
 800a0b8:	f7f6 fd5e 	bl	8000b78 <__aeabi_dcmpgt>
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	d175      	bne.n	800a1ac <_dtoa_r+0x6fc>
 800a0c0:	ec53 2b18 	vmov	r2, r3, d8
 800a0c4:	4911      	ldr	r1, [pc, #68]	; (800a10c <_dtoa_r+0x65c>)
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	f7f6 f90e 	bl	80002e8 <__aeabi_dsub>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	4639      	mov	r1, r7
 800a0d4:	f7f6 fd32 	bl	8000b3c <__aeabi_dcmplt>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	f43f af27 	beq.w	8009f2c <_dtoa_r+0x47c>
 800a0de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0e0:	1e6b      	subs	r3, r5, #1
 800a0e2:	930c      	str	r3, [sp, #48]	; 0x30
 800a0e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a0e8:	2b30      	cmp	r3, #48	; 0x30
 800a0ea:	d0f8      	beq.n	800a0de <_dtoa_r+0x62e>
 800a0ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a0f0:	e04a      	b.n	800a188 <_dtoa_r+0x6d8>
 800a0f2:	bf00      	nop
 800a0f4:	0800c6a0 	.word	0x0800c6a0
 800a0f8:	0800c678 	.word	0x0800c678
 800a0fc:	3ff00000 	.word	0x3ff00000
 800a100:	40240000 	.word	0x40240000
 800a104:	401c0000 	.word	0x401c0000
 800a108:	40140000 	.word	0x40140000
 800a10c:	3fe00000 	.word	0x3fe00000
 800a110:	4baf      	ldr	r3, [pc, #700]	; (800a3d0 <_dtoa_r+0x920>)
 800a112:	f7f6 faa1 	bl	8000658 <__aeabi_dmul>
 800a116:	4606      	mov	r6, r0
 800a118:	460f      	mov	r7, r1
 800a11a:	e7ac      	b.n	800a076 <_dtoa_r+0x5c6>
 800a11c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a120:	9d00      	ldr	r5, [sp, #0]
 800a122:	4642      	mov	r2, r8
 800a124:	464b      	mov	r3, r9
 800a126:	4630      	mov	r0, r6
 800a128:	4639      	mov	r1, r7
 800a12a:	f7f6 fbbf 	bl	80008ac <__aeabi_ddiv>
 800a12e:	f7f6 fd43 	bl	8000bb8 <__aeabi_d2iz>
 800a132:	9002      	str	r0, [sp, #8]
 800a134:	f7f6 fa26 	bl	8000584 <__aeabi_i2d>
 800a138:	4642      	mov	r2, r8
 800a13a:	464b      	mov	r3, r9
 800a13c:	f7f6 fa8c 	bl	8000658 <__aeabi_dmul>
 800a140:	4602      	mov	r2, r0
 800a142:	460b      	mov	r3, r1
 800a144:	4630      	mov	r0, r6
 800a146:	4639      	mov	r1, r7
 800a148:	f7f6 f8ce 	bl	80002e8 <__aeabi_dsub>
 800a14c:	9e02      	ldr	r6, [sp, #8]
 800a14e:	9f01      	ldr	r7, [sp, #4]
 800a150:	3630      	adds	r6, #48	; 0x30
 800a152:	f805 6b01 	strb.w	r6, [r5], #1
 800a156:	9e00      	ldr	r6, [sp, #0]
 800a158:	1bae      	subs	r6, r5, r6
 800a15a:	42b7      	cmp	r7, r6
 800a15c:	4602      	mov	r2, r0
 800a15e:	460b      	mov	r3, r1
 800a160:	d137      	bne.n	800a1d2 <_dtoa_r+0x722>
 800a162:	f7f6 f8c3 	bl	80002ec <__adddf3>
 800a166:	4642      	mov	r2, r8
 800a168:	464b      	mov	r3, r9
 800a16a:	4606      	mov	r6, r0
 800a16c:	460f      	mov	r7, r1
 800a16e:	f7f6 fd03 	bl	8000b78 <__aeabi_dcmpgt>
 800a172:	b9c8      	cbnz	r0, 800a1a8 <_dtoa_r+0x6f8>
 800a174:	4642      	mov	r2, r8
 800a176:	464b      	mov	r3, r9
 800a178:	4630      	mov	r0, r6
 800a17a:	4639      	mov	r1, r7
 800a17c:	f7f6 fcd4 	bl	8000b28 <__aeabi_dcmpeq>
 800a180:	b110      	cbz	r0, 800a188 <_dtoa_r+0x6d8>
 800a182:	9b02      	ldr	r3, [sp, #8]
 800a184:	07d9      	lsls	r1, r3, #31
 800a186:	d40f      	bmi.n	800a1a8 <_dtoa_r+0x6f8>
 800a188:	4620      	mov	r0, r4
 800a18a:	4659      	mov	r1, fp
 800a18c:	f000 ff8e 	bl	800b0ac <_Bfree>
 800a190:	2300      	movs	r3, #0
 800a192:	702b      	strb	r3, [r5, #0]
 800a194:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a196:	f10a 0001 	add.w	r0, sl, #1
 800a19a:	6018      	str	r0, [r3, #0]
 800a19c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f43f acd8 	beq.w	8009b54 <_dtoa_r+0xa4>
 800a1a4:	601d      	str	r5, [r3, #0]
 800a1a6:	e4d5      	b.n	8009b54 <_dtoa_r+0xa4>
 800a1a8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a1ac:	462b      	mov	r3, r5
 800a1ae:	461d      	mov	r5, r3
 800a1b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1b4:	2a39      	cmp	r2, #57	; 0x39
 800a1b6:	d108      	bne.n	800a1ca <_dtoa_r+0x71a>
 800a1b8:	9a00      	ldr	r2, [sp, #0]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d1f7      	bne.n	800a1ae <_dtoa_r+0x6fe>
 800a1be:	9a07      	ldr	r2, [sp, #28]
 800a1c0:	9900      	ldr	r1, [sp, #0]
 800a1c2:	3201      	adds	r2, #1
 800a1c4:	9207      	str	r2, [sp, #28]
 800a1c6:	2230      	movs	r2, #48	; 0x30
 800a1c8:	700a      	strb	r2, [r1, #0]
 800a1ca:	781a      	ldrb	r2, [r3, #0]
 800a1cc:	3201      	adds	r2, #1
 800a1ce:	701a      	strb	r2, [r3, #0]
 800a1d0:	e78c      	b.n	800a0ec <_dtoa_r+0x63c>
 800a1d2:	4b7f      	ldr	r3, [pc, #508]	; (800a3d0 <_dtoa_r+0x920>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f7f6 fa3f 	bl	8000658 <__aeabi_dmul>
 800a1da:	2200      	movs	r2, #0
 800a1dc:	2300      	movs	r3, #0
 800a1de:	4606      	mov	r6, r0
 800a1e0:	460f      	mov	r7, r1
 800a1e2:	f7f6 fca1 	bl	8000b28 <__aeabi_dcmpeq>
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	d09b      	beq.n	800a122 <_dtoa_r+0x672>
 800a1ea:	e7cd      	b.n	800a188 <_dtoa_r+0x6d8>
 800a1ec:	9a08      	ldr	r2, [sp, #32]
 800a1ee:	2a00      	cmp	r2, #0
 800a1f0:	f000 80c4 	beq.w	800a37c <_dtoa_r+0x8cc>
 800a1f4:	9a05      	ldr	r2, [sp, #20]
 800a1f6:	2a01      	cmp	r2, #1
 800a1f8:	f300 80a8 	bgt.w	800a34c <_dtoa_r+0x89c>
 800a1fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a1fe:	2a00      	cmp	r2, #0
 800a200:	f000 80a0 	beq.w	800a344 <_dtoa_r+0x894>
 800a204:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a208:	9e06      	ldr	r6, [sp, #24]
 800a20a:	4645      	mov	r5, r8
 800a20c:	9a04      	ldr	r2, [sp, #16]
 800a20e:	2101      	movs	r1, #1
 800a210:	441a      	add	r2, r3
 800a212:	4620      	mov	r0, r4
 800a214:	4498      	add	r8, r3
 800a216:	9204      	str	r2, [sp, #16]
 800a218:	f001 f84e 	bl	800b2b8 <__i2b>
 800a21c:	4607      	mov	r7, r0
 800a21e:	2d00      	cmp	r5, #0
 800a220:	dd0b      	ble.n	800a23a <_dtoa_r+0x78a>
 800a222:	9b04      	ldr	r3, [sp, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	dd08      	ble.n	800a23a <_dtoa_r+0x78a>
 800a228:	42ab      	cmp	r3, r5
 800a22a:	9a04      	ldr	r2, [sp, #16]
 800a22c:	bfa8      	it	ge
 800a22e:	462b      	movge	r3, r5
 800a230:	eba8 0803 	sub.w	r8, r8, r3
 800a234:	1aed      	subs	r5, r5, r3
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	9304      	str	r3, [sp, #16]
 800a23a:	9b06      	ldr	r3, [sp, #24]
 800a23c:	b1fb      	cbz	r3, 800a27e <_dtoa_r+0x7ce>
 800a23e:	9b08      	ldr	r3, [sp, #32]
 800a240:	2b00      	cmp	r3, #0
 800a242:	f000 809f 	beq.w	800a384 <_dtoa_r+0x8d4>
 800a246:	2e00      	cmp	r6, #0
 800a248:	dd11      	ble.n	800a26e <_dtoa_r+0x7be>
 800a24a:	4639      	mov	r1, r7
 800a24c:	4632      	mov	r2, r6
 800a24e:	4620      	mov	r0, r4
 800a250:	f001 f8ee 	bl	800b430 <__pow5mult>
 800a254:	465a      	mov	r2, fp
 800a256:	4601      	mov	r1, r0
 800a258:	4607      	mov	r7, r0
 800a25a:	4620      	mov	r0, r4
 800a25c:	f001 f842 	bl	800b2e4 <__multiply>
 800a260:	4659      	mov	r1, fp
 800a262:	9007      	str	r0, [sp, #28]
 800a264:	4620      	mov	r0, r4
 800a266:	f000 ff21 	bl	800b0ac <_Bfree>
 800a26a:	9b07      	ldr	r3, [sp, #28]
 800a26c:	469b      	mov	fp, r3
 800a26e:	9b06      	ldr	r3, [sp, #24]
 800a270:	1b9a      	subs	r2, r3, r6
 800a272:	d004      	beq.n	800a27e <_dtoa_r+0x7ce>
 800a274:	4659      	mov	r1, fp
 800a276:	4620      	mov	r0, r4
 800a278:	f001 f8da 	bl	800b430 <__pow5mult>
 800a27c:	4683      	mov	fp, r0
 800a27e:	2101      	movs	r1, #1
 800a280:	4620      	mov	r0, r4
 800a282:	f001 f819 	bl	800b2b8 <__i2b>
 800a286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a288:	2b00      	cmp	r3, #0
 800a28a:	4606      	mov	r6, r0
 800a28c:	dd7c      	ble.n	800a388 <_dtoa_r+0x8d8>
 800a28e:	461a      	mov	r2, r3
 800a290:	4601      	mov	r1, r0
 800a292:	4620      	mov	r0, r4
 800a294:	f001 f8cc 	bl	800b430 <__pow5mult>
 800a298:	9b05      	ldr	r3, [sp, #20]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	4606      	mov	r6, r0
 800a29e:	dd76      	ble.n	800a38e <_dtoa_r+0x8de>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	9306      	str	r3, [sp, #24]
 800a2a4:	6933      	ldr	r3, [r6, #16]
 800a2a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a2aa:	6918      	ldr	r0, [r3, #16]
 800a2ac:	f000 ffb4 	bl	800b218 <__hi0bits>
 800a2b0:	f1c0 0020 	rsb	r0, r0, #32
 800a2b4:	9b04      	ldr	r3, [sp, #16]
 800a2b6:	4418      	add	r0, r3
 800a2b8:	f010 001f 	ands.w	r0, r0, #31
 800a2bc:	f000 8086 	beq.w	800a3cc <_dtoa_r+0x91c>
 800a2c0:	f1c0 0320 	rsb	r3, r0, #32
 800a2c4:	2b04      	cmp	r3, #4
 800a2c6:	dd7f      	ble.n	800a3c8 <_dtoa_r+0x918>
 800a2c8:	f1c0 001c 	rsb	r0, r0, #28
 800a2cc:	9b04      	ldr	r3, [sp, #16]
 800a2ce:	4403      	add	r3, r0
 800a2d0:	4480      	add	r8, r0
 800a2d2:	4405      	add	r5, r0
 800a2d4:	9304      	str	r3, [sp, #16]
 800a2d6:	f1b8 0f00 	cmp.w	r8, #0
 800a2da:	dd05      	ble.n	800a2e8 <_dtoa_r+0x838>
 800a2dc:	4659      	mov	r1, fp
 800a2de:	4642      	mov	r2, r8
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f001 f8ff 	bl	800b4e4 <__lshift>
 800a2e6:	4683      	mov	fp, r0
 800a2e8:	9b04      	ldr	r3, [sp, #16]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	dd05      	ble.n	800a2fa <_dtoa_r+0x84a>
 800a2ee:	4631      	mov	r1, r6
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f001 f8f6 	bl	800b4e4 <__lshift>
 800a2f8:	4606      	mov	r6, r0
 800a2fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d069      	beq.n	800a3d4 <_dtoa_r+0x924>
 800a300:	4631      	mov	r1, r6
 800a302:	4658      	mov	r0, fp
 800a304:	f001 f95a 	bl	800b5bc <__mcmp>
 800a308:	2800      	cmp	r0, #0
 800a30a:	da63      	bge.n	800a3d4 <_dtoa_r+0x924>
 800a30c:	2300      	movs	r3, #0
 800a30e:	4659      	mov	r1, fp
 800a310:	220a      	movs	r2, #10
 800a312:	4620      	mov	r0, r4
 800a314:	f000 feec 	bl	800b0f0 <__multadd>
 800a318:	9b08      	ldr	r3, [sp, #32]
 800a31a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a31e:	4683      	mov	fp, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	f000 818f 	beq.w	800a644 <_dtoa_r+0xb94>
 800a326:	4639      	mov	r1, r7
 800a328:	2300      	movs	r3, #0
 800a32a:	220a      	movs	r2, #10
 800a32c:	4620      	mov	r0, r4
 800a32e:	f000 fedf 	bl	800b0f0 <__multadd>
 800a332:	f1b9 0f00 	cmp.w	r9, #0
 800a336:	4607      	mov	r7, r0
 800a338:	f300 808e 	bgt.w	800a458 <_dtoa_r+0x9a8>
 800a33c:	9b05      	ldr	r3, [sp, #20]
 800a33e:	2b02      	cmp	r3, #2
 800a340:	dc50      	bgt.n	800a3e4 <_dtoa_r+0x934>
 800a342:	e089      	b.n	800a458 <_dtoa_r+0x9a8>
 800a344:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a346:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a34a:	e75d      	b.n	800a208 <_dtoa_r+0x758>
 800a34c:	9b01      	ldr	r3, [sp, #4]
 800a34e:	1e5e      	subs	r6, r3, #1
 800a350:	9b06      	ldr	r3, [sp, #24]
 800a352:	42b3      	cmp	r3, r6
 800a354:	bfbf      	itttt	lt
 800a356:	9b06      	ldrlt	r3, [sp, #24]
 800a358:	9606      	strlt	r6, [sp, #24]
 800a35a:	1af2      	sublt	r2, r6, r3
 800a35c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a35e:	bfb6      	itet	lt
 800a360:	189b      	addlt	r3, r3, r2
 800a362:	1b9e      	subge	r6, r3, r6
 800a364:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a366:	9b01      	ldr	r3, [sp, #4]
 800a368:	bfb8      	it	lt
 800a36a:	2600      	movlt	r6, #0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	bfb5      	itete	lt
 800a370:	eba8 0503 	sublt.w	r5, r8, r3
 800a374:	9b01      	ldrge	r3, [sp, #4]
 800a376:	2300      	movlt	r3, #0
 800a378:	4645      	movge	r5, r8
 800a37a:	e747      	b.n	800a20c <_dtoa_r+0x75c>
 800a37c:	9e06      	ldr	r6, [sp, #24]
 800a37e:	9f08      	ldr	r7, [sp, #32]
 800a380:	4645      	mov	r5, r8
 800a382:	e74c      	b.n	800a21e <_dtoa_r+0x76e>
 800a384:	9a06      	ldr	r2, [sp, #24]
 800a386:	e775      	b.n	800a274 <_dtoa_r+0x7c4>
 800a388:	9b05      	ldr	r3, [sp, #20]
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	dc18      	bgt.n	800a3c0 <_dtoa_r+0x910>
 800a38e:	9b02      	ldr	r3, [sp, #8]
 800a390:	b9b3      	cbnz	r3, 800a3c0 <_dtoa_r+0x910>
 800a392:	9b03      	ldr	r3, [sp, #12]
 800a394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a398:	b9a3      	cbnz	r3, 800a3c4 <_dtoa_r+0x914>
 800a39a:	9b03      	ldr	r3, [sp, #12]
 800a39c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3a0:	0d1b      	lsrs	r3, r3, #20
 800a3a2:	051b      	lsls	r3, r3, #20
 800a3a4:	b12b      	cbz	r3, 800a3b2 <_dtoa_r+0x902>
 800a3a6:	9b04      	ldr	r3, [sp, #16]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	9304      	str	r3, [sp, #16]
 800a3ac:	f108 0801 	add.w	r8, r8, #1
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	9306      	str	r3, [sp, #24]
 800a3b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f47f af74 	bne.w	800a2a4 <_dtoa_r+0x7f4>
 800a3bc:	2001      	movs	r0, #1
 800a3be:	e779      	b.n	800a2b4 <_dtoa_r+0x804>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	e7f6      	b.n	800a3b2 <_dtoa_r+0x902>
 800a3c4:	9b02      	ldr	r3, [sp, #8]
 800a3c6:	e7f4      	b.n	800a3b2 <_dtoa_r+0x902>
 800a3c8:	d085      	beq.n	800a2d6 <_dtoa_r+0x826>
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	301c      	adds	r0, #28
 800a3ce:	e77d      	b.n	800a2cc <_dtoa_r+0x81c>
 800a3d0:	40240000 	.word	0x40240000
 800a3d4:	9b01      	ldr	r3, [sp, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	dc38      	bgt.n	800a44c <_dtoa_r+0x99c>
 800a3da:	9b05      	ldr	r3, [sp, #20]
 800a3dc:	2b02      	cmp	r3, #2
 800a3de:	dd35      	ble.n	800a44c <_dtoa_r+0x99c>
 800a3e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a3e4:	f1b9 0f00 	cmp.w	r9, #0
 800a3e8:	d10d      	bne.n	800a406 <_dtoa_r+0x956>
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	464b      	mov	r3, r9
 800a3ee:	2205      	movs	r2, #5
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	f000 fe7d 	bl	800b0f0 <__multadd>
 800a3f6:	4601      	mov	r1, r0
 800a3f8:	4606      	mov	r6, r0
 800a3fa:	4658      	mov	r0, fp
 800a3fc:	f001 f8de 	bl	800b5bc <__mcmp>
 800a400:	2800      	cmp	r0, #0
 800a402:	f73f adbd 	bgt.w	8009f80 <_dtoa_r+0x4d0>
 800a406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a408:	9d00      	ldr	r5, [sp, #0]
 800a40a:	ea6f 0a03 	mvn.w	sl, r3
 800a40e:	f04f 0800 	mov.w	r8, #0
 800a412:	4631      	mov	r1, r6
 800a414:	4620      	mov	r0, r4
 800a416:	f000 fe49 	bl	800b0ac <_Bfree>
 800a41a:	2f00      	cmp	r7, #0
 800a41c:	f43f aeb4 	beq.w	800a188 <_dtoa_r+0x6d8>
 800a420:	f1b8 0f00 	cmp.w	r8, #0
 800a424:	d005      	beq.n	800a432 <_dtoa_r+0x982>
 800a426:	45b8      	cmp	r8, r7
 800a428:	d003      	beq.n	800a432 <_dtoa_r+0x982>
 800a42a:	4641      	mov	r1, r8
 800a42c:	4620      	mov	r0, r4
 800a42e:	f000 fe3d 	bl	800b0ac <_Bfree>
 800a432:	4639      	mov	r1, r7
 800a434:	4620      	mov	r0, r4
 800a436:	f000 fe39 	bl	800b0ac <_Bfree>
 800a43a:	e6a5      	b.n	800a188 <_dtoa_r+0x6d8>
 800a43c:	2600      	movs	r6, #0
 800a43e:	4637      	mov	r7, r6
 800a440:	e7e1      	b.n	800a406 <_dtoa_r+0x956>
 800a442:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a444:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a448:	4637      	mov	r7, r6
 800a44a:	e599      	b.n	8009f80 <_dtoa_r+0x4d0>
 800a44c:	9b08      	ldr	r3, [sp, #32]
 800a44e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	f000 80fd 	beq.w	800a652 <_dtoa_r+0xba2>
 800a458:	2d00      	cmp	r5, #0
 800a45a:	dd05      	ble.n	800a468 <_dtoa_r+0x9b8>
 800a45c:	4639      	mov	r1, r7
 800a45e:	462a      	mov	r2, r5
 800a460:	4620      	mov	r0, r4
 800a462:	f001 f83f 	bl	800b4e4 <__lshift>
 800a466:	4607      	mov	r7, r0
 800a468:	9b06      	ldr	r3, [sp, #24]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d05c      	beq.n	800a528 <_dtoa_r+0xa78>
 800a46e:	6879      	ldr	r1, [r7, #4]
 800a470:	4620      	mov	r0, r4
 800a472:	f000 fddb 	bl	800b02c <_Balloc>
 800a476:	4605      	mov	r5, r0
 800a478:	b928      	cbnz	r0, 800a486 <_dtoa_r+0x9d6>
 800a47a:	4b80      	ldr	r3, [pc, #512]	; (800a67c <_dtoa_r+0xbcc>)
 800a47c:	4602      	mov	r2, r0
 800a47e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a482:	f7ff bb2e 	b.w	8009ae2 <_dtoa_r+0x32>
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	3202      	adds	r2, #2
 800a48a:	0092      	lsls	r2, r2, #2
 800a48c:	f107 010c 	add.w	r1, r7, #12
 800a490:	300c      	adds	r0, #12
 800a492:	f7fd fcb6 	bl	8007e02 <memcpy>
 800a496:	2201      	movs	r2, #1
 800a498:	4629      	mov	r1, r5
 800a49a:	4620      	mov	r0, r4
 800a49c:	f001 f822 	bl	800b4e4 <__lshift>
 800a4a0:	9b00      	ldr	r3, [sp, #0]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	9301      	str	r3, [sp, #4]
 800a4a6:	9b00      	ldr	r3, [sp, #0]
 800a4a8:	444b      	add	r3, r9
 800a4aa:	9307      	str	r3, [sp, #28]
 800a4ac:	9b02      	ldr	r3, [sp, #8]
 800a4ae:	f003 0301 	and.w	r3, r3, #1
 800a4b2:	46b8      	mov	r8, r7
 800a4b4:	9306      	str	r3, [sp, #24]
 800a4b6:	4607      	mov	r7, r0
 800a4b8:	9b01      	ldr	r3, [sp, #4]
 800a4ba:	4631      	mov	r1, r6
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	4658      	mov	r0, fp
 800a4c0:	9302      	str	r3, [sp, #8]
 800a4c2:	f7ff fa67 	bl	8009994 <quorem>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	3330      	adds	r3, #48	; 0x30
 800a4ca:	9004      	str	r0, [sp, #16]
 800a4cc:	4641      	mov	r1, r8
 800a4ce:	4658      	mov	r0, fp
 800a4d0:	9308      	str	r3, [sp, #32]
 800a4d2:	f001 f873 	bl	800b5bc <__mcmp>
 800a4d6:	463a      	mov	r2, r7
 800a4d8:	4681      	mov	r9, r0
 800a4da:	4631      	mov	r1, r6
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f001 f889 	bl	800b5f4 <__mdiff>
 800a4e2:	68c2      	ldr	r2, [r0, #12]
 800a4e4:	9b08      	ldr	r3, [sp, #32]
 800a4e6:	4605      	mov	r5, r0
 800a4e8:	bb02      	cbnz	r2, 800a52c <_dtoa_r+0xa7c>
 800a4ea:	4601      	mov	r1, r0
 800a4ec:	4658      	mov	r0, fp
 800a4ee:	f001 f865 	bl	800b5bc <__mcmp>
 800a4f2:	9b08      	ldr	r3, [sp, #32]
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a4fe:	f000 fdd5 	bl	800b0ac <_Bfree>
 800a502:	9b05      	ldr	r3, [sp, #20]
 800a504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a506:	9d01      	ldr	r5, [sp, #4]
 800a508:	ea43 0102 	orr.w	r1, r3, r2
 800a50c:	9b06      	ldr	r3, [sp, #24]
 800a50e:	430b      	orrs	r3, r1
 800a510:	9b08      	ldr	r3, [sp, #32]
 800a512:	d10d      	bne.n	800a530 <_dtoa_r+0xa80>
 800a514:	2b39      	cmp	r3, #57	; 0x39
 800a516:	d029      	beq.n	800a56c <_dtoa_r+0xabc>
 800a518:	f1b9 0f00 	cmp.w	r9, #0
 800a51c:	dd01      	ble.n	800a522 <_dtoa_r+0xa72>
 800a51e:	9b04      	ldr	r3, [sp, #16]
 800a520:	3331      	adds	r3, #49	; 0x31
 800a522:	9a02      	ldr	r2, [sp, #8]
 800a524:	7013      	strb	r3, [r2, #0]
 800a526:	e774      	b.n	800a412 <_dtoa_r+0x962>
 800a528:	4638      	mov	r0, r7
 800a52a:	e7b9      	b.n	800a4a0 <_dtoa_r+0x9f0>
 800a52c:	2201      	movs	r2, #1
 800a52e:	e7e2      	b.n	800a4f6 <_dtoa_r+0xa46>
 800a530:	f1b9 0f00 	cmp.w	r9, #0
 800a534:	db06      	blt.n	800a544 <_dtoa_r+0xa94>
 800a536:	9905      	ldr	r1, [sp, #20]
 800a538:	ea41 0909 	orr.w	r9, r1, r9
 800a53c:	9906      	ldr	r1, [sp, #24]
 800a53e:	ea59 0101 	orrs.w	r1, r9, r1
 800a542:	d120      	bne.n	800a586 <_dtoa_r+0xad6>
 800a544:	2a00      	cmp	r2, #0
 800a546:	ddec      	ble.n	800a522 <_dtoa_r+0xa72>
 800a548:	4659      	mov	r1, fp
 800a54a:	2201      	movs	r2, #1
 800a54c:	4620      	mov	r0, r4
 800a54e:	9301      	str	r3, [sp, #4]
 800a550:	f000 ffc8 	bl	800b4e4 <__lshift>
 800a554:	4631      	mov	r1, r6
 800a556:	4683      	mov	fp, r0
 800a558:	f001 f830 	bl	800b5bc <__mcmp>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	9b01      	ldr	r3, [sp, #4]
 800a560:	dc02      	bgt.n	800a568 <_dtoa_r+0xab8>
 800a562:	d1de      	bne.n	800a522 <_dtoa_r+0xa72>
 800a564:	07da      	lsls	r2, r3, #31
 800a566:	d5dc      	bpl.n	800a522 <_dtoa_r+0xa72>
 800a568:	2b39      	cmp	r3, #57	; 0x39
 800a56a:	d1d8      	bne.n	800a51e <_dtoa_r+0xa6e>
 800a56c:	9a02      	ldr	r2, [sp, #8]
 800a56e:	2339      	movs	r3, #57	; 0x39
 800a570:	7013      	strb	r3, [r2, #0]
 800a572:	462b      	mov	r3, r5
 800a574:	461d      	mov	r5, r3
 800a576:	3b01      	subs	r3, #1
 800a578:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a57c:	2a39      	cmp	r2, #57	; 0x39
 800a57e:	d050      	beq.n	800a622 <_dtoa_r+0xb72>
 800a580:	3201      	adds	r2, #1
 800a582:	701a      	strb	r2, [r3, #0]
 800a584:	e745      	b.n	800a412 <_dtoa_r+0x962>
 800a586:	2a00      	cmp	r2, #0
 800a588:	dd03      	ble.n	800a592 <_dtoa_r+0xae2>
 800a58a:	2b39      	cmp	r3, #57	; 0x39
 800a58c:	d0ee      	beq.n	800a56c <_dtoa_r+0xabc>
 800a58e:	3301      	adds	r3, #1
 800a590:	e7c7      	b.n	800a522 <_dtoa_r+0xa72>
 800a592:	9a01      	ldr	r2, [sp, #4]
 800a594:	9907      	ldr	r1, [sp, #28]
 800a596:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a59a:	428a      	cmp	r2, r1
 800a59c:	d02a      	beq.n	800a5f4 <_dtoa_r+0xb44>
 800a59e:	4659      	mov	r1, fp
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	220a      	movs	r2, #10
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f000 fda3 	bl	800b0f0 <__multadd>
 800a5aa:	45b8      	cmp	r8, r7
 800a5ac:	4683      	mov	fp, r0
 800a5ae:	f04f 0300 	mov.w	r3, #0
 800a5b2:	f04f 020a 	mov.w	r2, #10
 800a5b6:	4641      	mov	r1, r8
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	d107      	bne.n	800a5cc <_dtoa_r+0xb1c>
 800a5bc:	f000 fd98 	bl	800b0f0 <__multadd>
 800a5c0:	4680      	mov	r8, r0
 800a5c2:	4607      	mov	r7, r0
 800a5c4:	9b01      	ldr	r3, [sp, #4]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	9301      	str	r3, [sp, #4]
 800a5ca:	e775      	b.n	800a4b8 <_dtoa_r+0xa08>
 800a5cc:	f000 fd90 	bl	800b0f0 <__multadd>
 800a5d0:	4639      	mov	r1, r7
 800a5d2:	4680      	mov	r8, r0
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	220a      	movs	r2, #10
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f000 fd89 	bl	800b0f0 <__multadd>
 800a5de:	4607      	mov	r7, r0
 800a5e0:	e7f0      	b.n	800a5c4 <_dtoa_r+0xb14>
 800a5e2:	f1b9 0f00 	cmp.w	r9, #0
 800a5e6:	9a00      	ldr	r2, [sp, #0]
 800a5e8:	bfcc      	ite	gt
 800a5ea:	464d      	movgt	r5, r9
 800a5ec:	2501      	movle	r5, #1
 800a5ee:	4415      	add	r5, r2
 800a5f0:	f04f 0800 	mov.w	r8, #0
 800a5f4:	4659      	mov	r1, fp
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	9301      	str	r3, [sp, #4]
 800a5fc:	f000 ff72 	bl	800b4e4 <__lshift>
 800a600:	4631      	mov	r1, r6
 800a602:	4683      	mov	fp, r0
 800a604:	f000 ffda 	bl	800b5bc <__mcmp>
 800a608:	2800      	cmp	r0, #0
 800a60a:	dcb2      	bgt.n	800a572 <_dtoa_r+0xac2>
 800a60c:	d102      	bne.n	800a614 <_dtoa_r+0xb64>
 800a60e:	9b01      	ldr	r3, [sp, #4]
 800a610:	07db      	lsls	r3, r3, #31
 800a612:	d4ae      	bmi.n	800a572 <_dtoa_r+0xac2>
 800a614:	462b      	mov	r3, r5
 800a616:	461d      	mov	r5, r3
 800a618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a61c:	2a30      	cmp	r2, #48	; 0x30
 800a61e:	d0fa      	beq.n	800a616 <_dtoa_r+0xb66>
 800a620:	e6f7      	b.n	800a412 <_dtoa_r+0x962>
 800a622:	9a00      	ldr	r2, [sp, #0]
 800a624:	429a      	cmp	r2, r3
 800a626:	d1a5      	bne.n	800a574 <_dtoa_r+0xac4>
 800a628:	f10a 0a01 	add.w	sl, sl, #1
 800a62c:	2331      	movs	r3, #49	; 0x31
 800a62e:	e779      	b.n	800a524 <_dtoa_r+0xa74>
 800a630:	4b13      	ldr	r3, [pc, #76]	; (800a680 <_dtoa_r+0xbd0>)
 800a632:	f7ff baaf 	b.w	8009b94 <_dtoa_r+0xe4>
 800a636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f47f aa86 	bne.w	8009b4a <_dtoa_r+0x9a>
 800a63e:	4b11      	ldr	r3, [pc, #68]	; (800a684 <_dtoa_r+0xbd4>)
 800a640:	f7ff baa8 	b.w	8009b94 <_dtoa_r+0xe4>
 800a644:	f1b9 0f00 	cmp.w	r9, #0
 800a648:	dc03      	bgt.n	800a652 <_dtoa_r+0xba2>
 800a64a:	9b05      	ldr	r3, [sp, #20]
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	f73f aec9 	bgt.w	800a3e4 <_dtoa_r+0x934>
 800a652:	9d00      	ldr	r5, [sp, #0]
 800a654:	4631      	mov	r1, r6
 800a656:	4658      	mov	r0, fp
 800a658:	f7ff f99c 	bl	8009994 <quorem>
 800a65c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a660:	f805 3b01 	strb.w	r3, [r5], #1
 800a664:	9a00      	ldr	r2, [sp, #0]
 800a666:	1aaa      	subs	r2, r5, r2
 800a668:	4591      	cmp	r9, r2
 800a66a:	ddba      	ble.n	800a5e2 <_dtoa_r+0xb32>
 800a66c:	4659      	mov	r1, fp
 800a66e:	2300      	movs	r3, #0
 800a670:	220a      	movs	r2, #10
 800a672:	4620      	mov	r0, r4
 800a674:	f000 fd3c 	bl	800b0f0 <__multadd>
 800a678:	4683      	mov	fp, r0
 800a67a:	e7eb      	b.n	800a654 <_dtoa_r+0xba4>
 800a67c:	0800c584 	.word	0x0800c584
 800a680:	0800c38c 	.word	0x0800c38c
 800a684:	0800c501 	.word	0x0800c501

0800a688 <__sflush_r>:
 800a688:	898a      	ldrh	r2, [r1, #12]
 800a68a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a68e:	4605      	mov	r5, r0
 800a690:	0710      	lsls	r0, r2, #28
 800a692:	460c      	mov	r4, r1
 800a694:	d458      	bmi.n	800a748 <__sflush_r+0xc0>
 800a696:	684b      	ldr	r3, [r1, #4]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	dc05      	bgt.n	800a6a8 <__sflush_r+0x20>
 800a69c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	dc02      	bgt.n	800a6a8 <__sflush_r+0x20>
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6aa:	2e00      	cmp	r6, #0
 800a6ac:	d0f9      	beq.n	800a6a2 <__sflush_r+0x1a>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6b4:	682f      	ldr	r7, [r5, #0]
 800a6b6:	602b      	str	r3, [r5, #0]
 800a6b8:	d032      	beq.n	800a720 <__sflush_r+0x98>
 800a6ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6bc:	89a3      	ldrh	r3, [r4, #12]
 800a6be:	075a      	lsls	r2, r3, #29
 800a6c0:	d505      	bpl.n	800a6ce <__sflush_r+0x46>
 800a6c2:	6863      	ldr	r3, [r4, #4]
 800a6c4:	1ac0      	subs	r0, r0, r3
 800a6c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6c8:	b10b      	cbz	r3, 800a6ce <__sflush_r+0x46>
 800a6ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6cc:	1ac0      	subs	r0, r0, r3
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6d4:	6a21      	ldr	r1, [r4, #32]
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	47b0      	blx	r6
 800a6da:	1c43      	adds	r3, r0, #1
 800a6dc:	89a3      	ldrh	r3, [r4, #12]
 800a6de:	d106      	bne.n	800a6ee <__sflush_r+0x66>
 800a6e0:	6829      	ldr	r1, [r5, #0]
 800a6e2:	291d      	cmp	r1, #29
 800a6e4:	d82c      	bhi.n	800a740 <__sflush_r+0xb8>
 800a6e6:	4a2a      	ldr	r2, [pc, #168]	; (800a790 <__sflush_r+0x108>)
 800a6e8:	40ca      	lsrs	r2, r1
 800a6ea:	07d6      	lsls	r6, r2, #31
 800a6ec:	d528      	bpl.n	800a740 <__sflush_r+0xb8>
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	6062      	str	r2, [r4, #4]
 800a6f2:	04d9      	lsls	r1, r3, #19
 800a6f4:	6922      	ldr	r2, [r4, #16]
 800a6f6:	6022      	str	r2, [r4, #0]
 800a6f8:	d504      	bpl.n	800a704 <__sflush_r+0x7c>
 800a6fa:	1c42      	adds	r2, r0, #1
 800a6fc:	d101      	bne.n	800a702 <__sflush_r+0x7a>
 800a6fe:	682b      	ldr	r3, [r5, #0]
 800a700:	b903      	cbnz	r3, 800a704 <__sflush_r+0x7c>
 800a702:	6560      	str	r0, [r4, #84]	; 0x54
 800a704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a706:	602f      	str	r7, [r5, #0]
 800a708:	2900      	cmp	r1, #0
 800a70a:	d0ca      	beq.n	800a6a2 <__sflush_r+0x1a>
 800a70c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a710:	4299      	cmp	r1, r3
 800a712:	d002      	beq.n	800a71a <__sflush_r+0x92>
 800a714:	4628      	mov	r0, r5
 800a716:	f001 f953 	bl	800b9c0 <_free_r>
 800a71a:	2000      	movs	r0, #0
 800a71c:	6360      	str	r0, [r4, #52]	; 0x34
 800a71e:	e7c1      	b.n	800a6a4 <__sflush_r+0x1c>
 800a720:	6a21      	ldr	r1, [r4, #32]
 800a722:	2301      	movs	r3, #1
 800a724:	4628      	mov	r0, r5
 800a726:	47b0      	blx	r6
 800a728:	1c41      	adds	r1, r0, #1
 800a72a:	d1c7      	bne.n	800a6bc <__sflush_r+0x34>
 800a72c:	682b      	ldr	r3, [r5, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d0c4      	beq.n	800a6bc <__sflush_r+0x34>
 800a732:	2b1d      	cmp	r3, #29
 800a734:	d001      	beq.n	800a73a <__sflush_r+0xb2>
 800a736:	2b16      	cmp	r3, #22
 800a738:	d101      	bne.n	800a73e <__sflush_r+0xb6>
 800a73a:	602f      	str	r7, [r5, #0]
 800a73c:	e7b1      	b.n	800a6a2 <__sflush_r+0x1a>
 800a73e:	89a3      	ldrh	r3, [r4, #12]
 800a740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a744:	81a3      	strh	r3, [r4, #12]
 800a746:	e7ad      	b.n	800a6a4 <__sflush_r+0x1c>
 800a748:	690f      	ldr	r7, [r1, #16]
 800a74a:	2f00      	cmp	r7, #0
 800a74c:	d0a9      	beq.n	800a6a2 <__sflush_r+0x1a>
 800a74e:	0793      	lsls	r3, r2, #30
 800a750:	680e      	ldr	r6, [r1, #0]
 800a752:	bf08      	it	eq
 800a754:	694b      	ldreq	r3, [r1, #20]
 800a756:	600f      	str	r7, [r1, #0]
 800a758:	bf18      	it	ne
 800a75a:	2300      	movne	r3, #0
 800a75c:	eba6 0807 	sub.w	r8, r6, r7
 800a760:	608b      	str	r3, [r1, #8]
 800a762:	f1b8 0f00 	cmp.w	r8, #0
 800a766:	dd9c      	ble.n	800a6a2 <__sflush_r+0x1a>
 800a768:	6a21      	ldr	r1, [r4, #32]
 800a76a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a76c:	4643      	mov	r3, r8
 800a76e:	463a      	mov	r2, r7
 800a770:	4628      	mov	r0, r5
 800a772:	47b0      	blx	r6
 800a774:	2800      	cmp	r0, #0
 800a776:	dc06      	bgt.n	800a786 <__sflush_r+0xfe>
 800a778:	89a3      	ldrh	r3, [r4, #12]
 800a77a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a77e:	81a3      	strh	r3, [r4, #12]
 800a780:	f04f 30ff 	mov.w	r0, #4294967295
 800a784:	e78e      	b.n	800a6a4 <__sflush_r+0x1c>
 800a786:	4407      	add	r7, r0
 800a788:	eba8 0800 	sub.w	r8, r8, r0
 800a78c:	e7e9      	b.n	800a762 <__sflush_r+0xda>
 800a78e:	bf00      	nop
 800a790:	20400001 	.word	0x20400001

0800a794 <_fflush_r>:
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	690b      	ldr	r3, [r1, #16]
 800a798:	4605      	mov	r5, r0
 800a79a:	460c      	mov	r4, r1
 800a79c:	b913      	cbnz	r3, 800a7a4 <_fflush_r+0x10>
 800a79e:	2500      	movs	r5, #0
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	b118      	cbz	r0, 800a7ae <_fflush_r+0x1a>
 800a7a6:	6983      	ldr	r3, [r0, #24]
 800a7a8:	b90b      	cbnz	r3, 800a7ae <_fflush_r+0x1a>
 800a7aa:	f7fd fa65 	bl	8007c78 <__sinit>
 800a7ae:	4b14      	ldr	r3, [pc, #80]	; (800a800 <_fflush_r+0x6c>)
 800a7b0:	429c      	cmp	r4, r3
 800a7b2:	d11b      	bne.n	800a7ec <_fflush_r+0x58>
 800a7b4:	686c      	ldr	r4, [r5, #4]
 800a7b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d0ef      	beq.n	800a79e <_fflush_r+0xa>
 800a7be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7c0:	07d0      	lsls	r0, r2, #31
 800a7c2:	d404      	bmi.n	800a7ce <_fflush_r+0x3a>
 800a7c4:	0599      	lsls	r1, r3, #22
 800a7c6:	d402      	bmi.n	800a7ce <_fflush_r+0x3a>
 800a7c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7ca:	f7fd fb18 	bl	8007dfe <__retarget_lock_acquire_recursive>
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	4621      	mov	r1, r4
 800a7d2:	f7ff ff59 	bl	800a688 <__sflush_r>
 800a7d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7d8:	07da      	lsls	r2, r3, #31
 800a7da:	4605      	mov	r5, r0
 800a7dc:	d4e0      	bmi.n	800a7a0 <_fflush_r+0xc>
 800a7de:	89a3      	ldrh	r3, [r4, #12]
 800a7e0:	059b      	lsls	r3, r3, #22
 800a7e2:	d4dd      	bmi.n	800a7a0 <_fflush_r+0xc>
 800a7e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7e6:	f7fd fb0b 	bl	8007e00 <__retarget_lock_release_recursive>
 800a7ea:	e7d9      	b.n	800a7a0 <_fflush_r+0xc>
 800a7ec:	4b05      	ldr	r3, [pc, #20]	; (800a804 <_fflush_r+0x70>)
 800a7ee:	429c      	cmp	r4, r3
 800a7f0:	d101      	bne.n	800a7f6 <_fflush_r+0x62>
 800a7f2:	68ac      	ldr	r4, [r5, #8]
 800a7f4:	e7df      	b.n	800a7b6 <_fflush_r+0x22>
 800a7f6:	4b04      	ldr	r3, [pc, #16]	; (800a808 <_fflush_r+0x74>)
 800a7f8:	429c      	cmp	r4, r3
 800a7fa:	bf08      	it	eq
 800a7fc:	68ec      	ldreq	r4, [r5, #12]
 800a7fe:	e7da      	b.n	800a7b6 <_fflush_r+0x22>
 800a800:	0800c338 	.word	0x0800c338
 800a804:	0800c358 	.word	0x0800c358
 800a808:	0800c318 	.word	0x0800c318

0800a80c <rshift>:
 800a80c:	6903      	ldr	r3, [r0, #16]
 800a80e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a812:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a816:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a81a:	f100 0414 	add.w	r4, r0, #20
 800a81e:	dd45      	ble.n	800a8ac <rshift+0xa0>
 800a820:	f011 011f 	ands.w	r1, r1, #31
 800a824:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a828:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a82c:	d10c      	bne.n	800a848 <rshift+0x3c>
 800a82e:	f100 0710 	add.w	r7, r0, #16
 800a832:	4629      	mov	r1, r5
 800a834:	42b1      	cmp	r1, r6
 800a836:	d334      	bcc.n	800a8a2 <rshift+0x96>
 800a838:	1a9b      	subs	r3, r3, r2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	1eea      	subs	r2, r5, #3
 800a83e:	4296      	cmp	r6, r2
 800a840:	bf38      	it	cc
 800a842:	2300      	movcc	r3, #0
 800a844:	4423      	add	r3, r4
 800a846:	e015      	b.n	800a874 <rshift+0x68>
 800a848:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a84c:	f1c1 0820 	rsb	r8, r1, #32
 800a850:	40cf      	lsrs	r7, r1
 800a852:	f105 0e04 	add.w	lr, r5, #4
 800a856:	46a1      	mov	r9, r4
 800a858:	4576      	cmp	r6, lr
 800a85a:	46f4      	mov	ip, lr
 800a85c:	d815      	bhi.n	800a88a <rshift+0x7e>
 800a85e:	1a9b      	subs	r3, r3, r2
 800a860:	009a      	lsls	r2, r3, #2
 800a862:	3a04      	subs	r2, #4
 800a864:	3501      	adds	r5, #1
 800a866:	42ae      	cmp	r6, r5
 800a868:	bf38      	it	cc
 800a86a:	2200      	movcc	r2, #0
 800a86c:	18a3      	adds	r3, r4, r2
 800a86e:	50a7      	str	r7, [r4, r2]
 800a870:	b107      	cbz	r7, 800a874 <rshift+0x68>
 800a872:	3304      	adds	r3, #4
 800a874:	1b1a      	subs	r2, r3, r4
 800a876:	42a3      	cmp	r3, r4
 800a878:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a87c:	bf08      	it	eq
 800a87e:	2300      	moveq	r3, #0
 800a880:	6102      	str	r2, [r0, #16]
 800a882:	bf08      	it	eq
 800a884:	6143      	streq	r3, [r0, #20]
 800a886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a88a:	f8dc c000 	ldr.w	ip, [ip]
 800a88e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a892:	ea4c 0707 	orr.w	r7, ip, r7
 800a896:	f849 7b04 	str.w	r7, [r9], #4
 800a89a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a89e:	40cf      	lsrs	r7, r1
 800a8a0:	e7da      	b.n	800a858 <rshift+0x4c>
 800a8a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a8a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a8aa:	e7c3      	b.n	800a834 <rshift+0x28>
 800a8ac:	4623      	mov	r3, r4
 800a8ae:	e7e1      	b.n	800a874 <rshift+0x68>

0800a8b0 <__hexdig_fun>:
 800a8b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a8b4:	2b09      	cmp	r3, #9
 800a8b6:	d802      	bhi.n	800a8be <__hexdig_fun+0xe>
 800a8b8:	3820      	subs	r0, #32
 800a8ba:	b2c0      	uxtb	r0, r0
 800a8bc:	4770      	bx	lr
 800a8be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a8c2:	2b05      	cmp	r3, #5
 800a8c4:	d801      	bhi.n	800a8ca <__hexdig_fun+0x1a>
 800a8c6:	3847      	subs	r0, #71	; 0x47
 800a8c8:	e7f7      	b.n	800a8ba <__hexdig_fun+0xa>
 800a8ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a8ce:	2b05      	cmp	r3, #5
 800a8d0:	d801      	bhi.n	800a8d6 <__hexdig_fun+0x26>
 800a8d2:	3827      	subs	r0, #39	; 0x27
 800a8d4:	e7f1      	b.n	800a8ba <__hexdig_fun+0xa>
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	4770      	bx	lr
	...

0800a8dc <__gethex>:
 800a8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e0:	ed2d 8b02 	vpush	{d8}
 800a8e4:	b089      	sub	sp, #36	; 0x24
 800a8e6:	ee08 0a10 	vmov	s16, r0
 800a8ea:	9304      	str	r3, [sp, #16]
 800a8ec:	4bbc      	ldr	r3, [pc, #752]	; (800abe0 <__gethex+0x304>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	9301      	str	r3, [sp, #4]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	468b      	mov	fp, r1
 800a8f6:	4690      	mov	r8, r2
 800a8f8:	f7f5 fc94 	bl	8000224 <strlen>
 800a8fc:	9b01      	ldr	r3, [sp, #4]
 800a8fe:	f8db 2000 	ldr.w	r2, [fp]
 800a902:	4403      	add	r3, r0
 800a904:	4682      	mov	sl, r0
 800a906:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a90a:	9305      	str	r3, [sp, #20]
 800a90c:	1c93      	adds	r3, r2, #2
 800a90e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a912:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a916:	32fe      	adds	r2, #254	; 0xfe
 800a918:	18d1      	adds	r1, r2, r3
 800a91a:	461f      	mov	r7, r3
 800a91c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a920:	9100      	str	r1, [sp, #0]
 800a922:	2830      	cmp	r0, #48	; 0x30
 800a924:	d0f8      	beq.n	800a918 <__gethex+0x3c>
 800a926:	f7ff ffc3 	bl	800a8b0 <__hexdig_fun>
 800a92a:	4604      	mov	r4, r0
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d13a      	bne.n	800a9a6 <__gethex+0xca>
 800a930:	9901      	ldr	r1, [sp, #4]
 800a932:	4652      	mov	r2, sl
 800a934:	4638      	mov	r0, r7
 800a936:	f001 fa07 	bl	800bd48 <strncmp>
 800a93a:	4605      	mov	r5, r0
 800a93c:	2800      	cmp	r0, #0
 800a93e:	d168      	bne.n	800aa12 <__gethex+0x136>
 800a940:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a944:	eb07 060a 	add.w	r6, r7, sl
 800a948:	f7ff ffb2 	bl	800a8b0 <__hexdig_fun>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	d062      	beq.n	800aa16 <__gethex+0x13a>
 800a950:	4633      	mov	r3, r6
 800a952:	7818      	ldrb	r0, [r3, #0]
 800a954:	2830      	cmp	r0, #48	; 0x30
 800a956:	461f      	mov	r7, r3
 800a958:	f103 0301 	add.w	r3, r3, #1
 800a95c:	d0f9      	beq.n	800a952 <__gethex+0x76>
 800a95e:	f7ff ffa7 	bl	800a8b0 <__hexdig_fun>
 800a962:	2301      	movs	r3, #1
 800a964:	fab0 f480 	clz	r4, r0
 800a968:	0964      	lsrs	r4, r4, #5
 800a96a:	4635      	mov	r5, r6
 800a96c:	9300      	str	r3, [sp, #0]
 800a96e:	463a      	mov	r2, r7
 800a970:	4616      	mov	r6, r2
 800a972:	3201      	adds	r2, #1
 800a974:	7830      	ldrb	r0, [r6, #0]
 800a976:	f7ff ff9b 	bl	800a8b0 <__hexdig_fun>
 800a97a:	2800      	cmp	r0, #0
 800a97c:	d1f8      	bne.n	800a970 <__gethex+0x94>
 800a97e:	9901      	ldr	r1, [sp, #4]
 800a980:	4652      	mov	r2, sl
 800a982:	4630      	mov	r0, r6
 800a984:	f001 f9e0 	bl	800bd48 <strncmp>
 800a988:	b980      	cbnz	r0, 800a9ac <__gethex+0xd0>
 800a98a:	b94d      	cbnz	r5, 800a9a0 <__gethex+0xc4>
 800a98c:	eb06 050a 	add.w	r5, r6, sl
 800a990:	462a      	mov	r2, r5
 800a992:	4616      	mov	r6, r2
 800a994:	3201      	adds	r2, #1
 800a996:	7830      	ldrb	r0, [r6, #0]
 800a998:	f7ff ff8a 	bl	800a8b0 <__hexdig_fun>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d1f8      	bne.n	800a992 <__gethex+0xb6>
 800a9a0:	1bad      	subs	r5, r5, r6
 800a9a2:	00ad      	lsls	r5, r5, #2
 800a9a4:	e004      	b.n	800a9b0 <__gethex+0xd4>
 800a9a6:	2400      	movs	r4, #0
 800a9a8:	4625      	mov	r5, r4
 800a9aa:	e7e0      	b.n	800a96e <__gethex+0x92>
 800a9ac:	2d00      	cmp	r5, #0
 800a9ae:	d1f7      	bne.n	800a9a0 <__gethex+0xc4>
 800a9b0:	7833      	ldrb	r3, [r6, #0]
 800a9b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a9b6:	2b50      	cmp	r3, #80	; 0x50
 800a9b8:	d13b      	bne.n	800aa32 <__gethex+0x156>
 800a9ba:	7873      	ldrb	r3, [r6, #1]
 800a9bc:	2b2b      	cmp	r3, #43	; 0x2b
 800a9be:	d02c      	beq.n	800aa1a <__gethex+0x13e>
 800a9c0:	2b2d      	cmp	r3, #45	; 0x2d
 800a9c2:	d02e      	beq.n	800aa22 <__gethex+0x146>
 800a9c4:	1c71      	adds	r1, r6, #1
 800a9c6:	f04f 0900 	mov.w	r9, #0
 800a9ca:	7808      	ldrb	r0, [r1, #0]
 800a9cc:	f7ff ff70 	bl	800a8b0 <__hexdig_fun>
 800a9d0:	1e43      	subs	r3, r0, #1
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	2b18      	cmp	r3, #24
 800a9d6:	d82c      	bhi.n	800aa32 <__gethex+0x156>
 800a9d8:	f1a0 0210 	sub.w	r2, r0, #16
 800a9dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a9e0:	f7ff ff66 	bl	800a8b0 <__hexdig_fun>
 800a9e4:	1e43      	subs	r3, r0, #1
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	2b18      	cmp	r3, #24
 800a9ea:	d91d      	bls.n	800aa28 <__gethex+0x14c>
 800a9ec:	f1b9 0f00 	cmp.w	r9, #0
 800a9f0:	d000      	beq.n	800a9f4 <__gethex+0x118>
 800a9f2:	4252      	negs	r2, r2
 800a9f4:	4415      	add	r5, r2
 800a9f6:	f8cb 1000 	str.w	r1, [fp]
 800a9fa:	b1e4      	cbz	r4, 800aa36 <__gethex+0x15a>
 800a9fc:	9b00      	ldr	r3, [sp, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	bf14      	ite	ne
 800aa02:	2700      	movne	r7, #0
 800aa04:	2706      	moveq	r7, #6
 800aa06:	4638      	mov	r0, r7
 800aa08:	b009      	add	sp, #36	; 0x24
 800aa0a:	ecbd 8b02 	vpop	{d8}
 800aa0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa12:	463e      	mov	r6, r7
 800aa14:	4625      	mov	r5, r4
 800aa16:	2401      	movs	r4, #1
 800aa18:	e7ca      	b.n	800a9b0 <__gethex+0xd4>
 800aa1a:	f04f 0900 	mov.w	r9, #0
 800aa1e:	1cb1      	adds	r1, r6, #2
 800aa20:	e7d3      	b.n	800a9ca <__gethex+0xee>
 800aa22:	f04f 0901 	mov.w	r9, #1
 800aa26:	e7fa      	b.n	800aa1e <__gethex+0x142>
 800aa28:	230a      	movs	r3, #10
 800aa2a:	fb03 0202 	mla	r2, r3, r2, r0
 800aa2e:	3a10      	subs	r2, #16
 800aa30:	e7d4      	b.n	800a9dc <__gethex+0x100>
 800aa32:	4631      	mov	r1, r6
 800aa34:	e7df      	b.n	800a9f6 <__gethex+0x11a>
 800aa36:	1bf3      	subs	r3, r6, r7
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	2b07      	cmp	r3, #7
 800aa3e:	dc0b      	bgt.n	800aa58 <__gethex+0x17c>
 800aa40:	ee18 0a10 	vmov	r0, s16
 800aa44:	f000 faf2 	bl	800b02c <_Balloc>
 800aa48:	4604      	mov	r4, r0
 800aa4a:	b940      	cbnz	r0, 800aa5e <__gethex+0x182>
 800aa4c:	4b65      	ldr	r3, [pc, #404]	; (800abe4 <__gethex+0x308>)
 800aa4e:	4602      	mov	r2, r0
 800aa50:	21de      	movs	r1, #222	; 0xde
 800aa52:	4865      	ldr	r0, [pc, #404]	; (800abe8 <__gethex+0x30c>)
 800aa54:	f001 f998 	bl	800bd88 <__assert_func>
 800aa58:	3101      	adds	r1, #1
 800aa5a:	105b      	asrs	r3, r3, #1
 800aa5c:	e7ee      	b.n	800aa3c <__gethex+0x160>
 800aa5e:	f100 0914 	add.w	r9, r0, #20
 800aa62:	f04f 0b00 	mov.w	fp, #0
 800aa66:	f1ca 0301 	rsb	r3, sl, #1
 800aa6a:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa6e:	f8cd b000 	str.w	fp, [sp]
 800aa72:	9306      	str	r3, [sp, #24]
 800aa74:	42b7      	cmp	r7, r6
 800aa76:	d340      	bcc.n	800aafa <__gethex+0x21e>
 800aa78:	9802      	ldr	r0, [sp, #8]
 800aa7a:	9b00      	ldr	r3, [sp, #0]
 800aa7c:	f840 3b04 	str.w	r3, [r0], #4
 800aa80:	eba0 0009 	sub.w	r0, r0, r9
 800aa84:	1080      	asrs	r0, r0, #2
 800aa86:	0146      	lsls	r6, r0, #5
 800aa88:	6120      	str	r0, [r4, #16]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 fbc4 	bl	800b218 <__hi0bits>
 800aa90:	1a30      	subs	r0, r6, r0
 800aa92:	f8d8 6000 	ldr.w	r6, [r8]
 800aa96:	42b0      	cmp	r0, r6
 800aa98:	dd63      	ble.n	800ab62 <__gethex+0x286>
 800aa9a:	1b87      	subs	r7, r0, r6
 800aa9c:	4639      	mov	r1, r7
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f000 ff5e 	bl	800b960 <__any_on>
 800aaa4:	4682      	mov	sl, r0
 800aaa6:	b1a8      	cbz	r0, 800aad4 <__gethex+0x1f8>
 800aaa8:	1e7b      	subs	r3, r7, #1
 800aaaa:	1159      	asrs	r1, r3, #5
 800aaac:	f003 021f 	and.w	r2, r3, #31
 800aab0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aab4:	f04f 0a01 	mov.w	sl, #1
 800aab8:	fa0a f202 	lsl.w	r2, sl, r2
 800aabc:	420a      	tst	r2, r1
 800aabe:	d009      	beq.n	800aad4 <__gethex+0x1f8>
 800aac0:	4553      	cmp	r3, sl
 800aac2:	dd05      	ble.n	800aad0 <__gethex+0x1f4>
 800aac4:	1eb9      	subs	r1, r7, #2
 800aac6:	4620      	mov	r0, r4
 800aac8:	f000 ff4a 	bl	800b960 <__any_on>
 800aacc:	2800      	cmp	r0, #0
 800aace:	d145      	bne.n	800ab5c <__gethex+0x280>
 800aad0:	f04f 0a02 	mov.w	sl, #2
 800aad4:	4639      	mov	r1, r7
 800aad6:	4620      	mov	r0, r4
 800aad8:	f7ff fe98 	bl	800a80c <rshift>
 800aadc:	443d      	add	r5, r7
 800aade:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aae2:	42ab      	cmp	r3, r5
 800aae4:	da4c      	bge.n	800ab80 <__gethex+0x2a4>
 800aae6:	ee18 0a10 	vmov	r0, s16
 800aaea:	4621      	mov	r1, r4
 800aaec:	f000 fade 	bl	800b0ac <_Bfree>
 800aaf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	6013      	str	r3, [r2, #0]
 800aaf6:	27a3      	movs	r7, #163	; 0xa3
 800aaf8:	e785      	b.n	800aa06 <__gethex+0x12a>
 800aafa:	1e73      	subs	r3, r6, #1
 800aafc:	9a05      	ldr	r2, [sp, #20]
 800aafe:	9303      	str	r3, [sp, #12]
 800ab00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d019      	beq.n	800ab3c <__gethex+0x260>
 800ab08:	f1bb 0f20 	cmp.w	fp, #32
 800ab0c:	d107      	bne.n	800ab1e <__gethex+0x242>
 800ab0e:	9b02      	ldr	r3, [sp, #8]
 800ab10:	9a00      	ldr	r2, [sp, #0]
 800ab12:	f843 2b04 	str.w	r2, [r3], #4
 800ab16:	9302      	str	r3, [sp, #8]
 800ab18:	2300      	movs	r3, #0
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	469b      	mov	fp, r3
 800ab1e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ab22:	f7ff fec5 	bl	800a8b0 <__hexdig_fun>
 800ab26:	9b00      	ldr	r3, [sp, #0]
 800ab28:	f000 000f 	and.w	r0, r0, #15
 800ab2c:	fa00 f00b 	lsl.w	r0, r0, fp
 800ab30:	4303      	orrs	r3, r0
 800ab32:	9300      	str	r3, [sp, #0]
 800ab34:	f10b 0b04 	add.w	fp, fp, #4
 800ab38:	9b03      	ldr	r3, [sp, #12]
 800ab3a:	e00d      	b.n	800ab58 <__gethex+0x27c>
 800ab3c:	9b03      	ldr	r3, [sp, #12]
 800ab3e:	9a06      	ldr	r2, [sp, #24]
 800ab40:	4413      	add	r3, r2
 800ab42:	42bb      	cmp	r3, r7
 800ab44:	d3e0      	bcc.n	800ab08 <__gethex+0x22c>
 800ab46:	4618      	mov	r0, r3
 800ab48:	9901      	ldr	r1, [sp, #4]
 800ab4a:	9307      	str	r3, [sp, #28]
 800ab4c:	4652      	mov	r2, sl
 800ab4e:	f001 f8fb 	bl	800bd48 <strncmp>
 800ab52:	9b07      	ldr	r3, [sp, #28]
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d1d7      	bne.n	800ab08 <__gethex+0x22c>
 800ab58:	461e      	mov	r6, r3
 800ab5a:	e78b      	b.n	800aa74 <__gethex+0x198>
 800ab5c:	f04f 0a03 	mov.w	sl, #3
 800ab60:	e7b8      	b.n	800aad4 <__gethex+0x1f8>
 800ab62:	da0a      	bge.n	800ab7a <__gethex+0x29e>
 800ab64:	1a37      	subs	r7, r6, r0
 800ab66:	4621      	mov	r1, r4
 800ab68:	ee18 0a10 	vmov	r0, s16
 800ab6c:	463a      	mov	r2, r7
 800ab6e:	f000 fcb9 	bl	800b4e4 <__lshift>
 800ab72:	1bed      	subs	r5, r5, r7
 800ab74:	4604      	mov	r4, r0
 800ab76:	f100 0914 	add.w	r9, r0, #20
 800ab7a:	f04f 0a00 	mov.w	sl, #0
 800ab7e:	e7ae      	b.n	800aade <__gethex+0x202>
 800ab80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ab84:	42a8      	cmp	r0, r5
 800ab86:	dd72      	ble.n	800ac6e <__gethex+0x392>
 800ab88:	1b45      	subs	r5, r0, r5
 800ab8a:	42ae      	cmp	r6, r5
 800ab8c:	dc36      	bgt.n	800abfc <__gethex+0x320>
 800ab8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	d02a      	beq.n	800abec <__gethex+0x310>
 800ab96:	2b03      	cmp	r3, #3
 800ab98:	d02c      	beq.n	800abf4 <__gethex+0x318>
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d115      	bne.n	800abca <__gethex+0x2ee>
 800ab9e:	42ae      	cmp	r6, r5
 800aba0:	d113      	bne.n	800abca <__gethex+0x2ee>
 800aba2:	2e01      	cmp	r6, #1
 800aba4:	d10b      	bne.n	800abbe <__gethex+0x2e2>
 800aba6:	9a04      	ldr	r2, [sp, #16]
 800aba8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800abac:	6013      	str	r3, [r2, #0]
 800abae:	2301      	movs	r3, #1
 800abb0:	6123      	str	r3, [r4, #16]
 800abb2:	f8c9 3000 	str.w	r3, [r9]
 800abb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800abb8:	2762      	movs	r7, #98	; 0x62
 800abba:	601c      	str	r4, [r3, #0]
 800abbc:	e723      	b.n	800aa06 <__gethex+0x12a>
 800abbe:	1e71      	subs	r1, r6, #1
 800abc0:	4620      	mov	r0, r4
 800abc2:	f000 fecd 	bl	800b960 <__any_on>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d1ed      	bne.n	800aba6 <__gethex+0x2ca>
 800abca:	ee18 0a10 	vmov	r0, s16
 800abce:	4621      	mov	r1, r4
 800abd0:	f000 fa6c 	bl	800b0ac <_Bfree>
 800abd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800abd6:	2300      	movs	r3, #0
 800abd8:	6013      	str	r3, [r2, #0]
 800abda:	2750      	movs	r7, #80	; 0x50
 800abdc:	e713      	b.n	800aa06 <__gethex+0x12a>
 800abde:	bf00      	nop
 800abe0:	0800c600 	.word	0x0800c600
 800abe4:	0800c584 	.word	0x0800c584
 800abe8:	0800c595 	.word	0x0800c595
 800abec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1eb      	bne.n	800abca <__gethex+0x2ee>
 800abf2:	e7d8      	b.n	800aba6 <__gethex+0x2ca>
 800abf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1d5      	bne.n	800aba6 <__gethex+0x2ca>
 800abfa:	e7e6      	b.n	800abca <__gethex+0x2ee>
 800abfc:	1e6f      	subs	r7, r5, #1
 800abfe:	f1ba 0f00 	cmp.w	sl, #0
 800ac02:	d131      	bne.n	800ac68 <__gethex+0x38c>
 800ac04:	b127      	cbz	r7, 800ac10 <__gethex+0x334>
 800ac06:	4639      	mov	r1, r7
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f000 fea9 	bl	800b960 <__any_on>
 800ac0e:	4682      	mov	sl, r0
 800ac10:	117b      	asrs	r3, r7, #5
 800ac12:	2101      	movs	r1, #1
 800ac14:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ac18:	f007 071f 	and.w	r7, r7, #31
 800ac1c:	fa01 f707 	lsl.w	r7, r1, r7
 800ac20:	421f      	tst	r7, r3
 800ac22:	4629      	mov	r1, r5
 800ac24:	4620      	mov	r0, r4
 800ac26:	bf18      	it	ne
 800ac28:	f04a 0a02 	orrne.w	sl, sl, #2
 800ac2c:	1b76      	subs	r6, r6, r5
 800ac2e:	f7ff fded 	bl	800a80c <rshift>
 800ac32:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ac36:	2702      	movs	r7, #2
 800ac38:	f1ba 0f00 	cmp.w	sl, #0
 800ac3c:	d048      	beq.n	800acd0 <__gethex+0x3f4>
 800ac3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	d015      	beq.n	800ac72 <__gethex+0x396>
 800ac46:	2b03      	cmp	r3, #3
 800ac48:	d017      	beq.n	800ac7a <__gethex+0x39e>
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d109      	bne.n	800ac62 <__gethex+0x386>
 800ac4e:	f01a 0f02 	tst.w	sl, #2
 800ac52:	d006      	beq.n	800ac62 <__gethex+0x386>
 800ac54:	f8d9 0000 	ldr.w	r0, [r9]
 800ac58:	ea4a 0a00 	orr.w	sl, sl, r0
 800ac5c:	f01a 0f01 	tst.w	sl, #1
 800ac60:	d10e      	bne.n	800ac80 <__gethex+0x3a4>
 800ac62:	f047 0710 	orr.w	r7, r7, #16
 800ac66:	e033      	b.n	800acd0 <__gethex+0x3f4>
 800ac68:	f04f 0a01 	mov.w	sl, #1
 800ac6c:	e7d0      	b.n	800ac10 <__gethex+0x334>
 800ac6e:	2701      	movs	r7, #1
 800ac70:	e7e2      	b.n	800ac38 <__gethex+0x35c>
 800ac72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac74:	f1c3 0301 	rsb	r3, r3, #1
 800ac78:	9315      	str	r3, [sp, #84]	; 0x54
 800ac7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d0f0      	beq.n	800ac62 <__gethex+0x386>
 800ac80:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ac84:	f104 0314 	add.w	r3, r4, #20
 800ac88:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ac8c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ac90:	f04f 0c00 	mov.w	ip, #0
 800ac94:	4618      	mov	r0, r3
 800ac96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac9a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ac9e:	d01c      	beq.n	800acda <__gethex+0x3fe>
 800aca0:	3201      	adds	r2, #1
 800aca2:	6002      	str	r2, [r0, #0]
 800aca4:	2f02      	cmp	r7, #2
 800aca6:	f104 0314 	add.w	r3, r4, #20
 800acaa:	d13f      	bne.n	800ad2c <__gethex+0x450>
 800acac:	f8d8 2000 	ldr.w	r2, [r8]
 800acb0:	3a01      	subs	r2, #1
 800acb2:	42b2      	cmp	r2, r6
 800acb4:	d10a      	bne.n	800accc <__gethex+0x3f0>
 800acb6:	1171      	asrs	r1, r6, #5
 800acb8:	2201      	movs	r2, #1
 800acba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800acbe:	f006 061f 	and.w	r6, r6, #31
 800acc2:	fa02 f606 	lsl.w	r6, r2, r6
 800acc6:	421e      	tst	r6, r3
 800acc8:	bf18      	it	ne
 800acca:	4617      	movne	r7, r2
 800accc:	f047 0720 	orr.w	r7, r7, #32
 800acd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acd2:	601c      	str	r4, [r3, #0]
 800acd4:	9b04      	ldr	r3, [sp, #16]
 800acd6:	601d      	str	r5, [r3, #0]
 800acd8:	e695      	b.n	800aa06 <__gethex+0x12a>
 800acda:	4299      	cmp	r1, r3
 800acdc:	f843 cc04 	str.w	ip, [r3, #-4]
 800ace0:	d8d8      	bhi.n	800ac94 <__gethex+0x3b8>
 800ace2:	68a3      	ldr	r3, [r4, #8]
 800ace4:	459b      	cmp	fp, r3
 800ace6:	db19      	blt.n	800ad1c <__gethex+0x440>
 800ace8:	6861      	ldr	r1, [r4, #4]
 800acea:	ee18 0a10 	vmov	r0, s16
 800acee:	3101      	adds	r1, #1
 800acf0:	f000 f99c 	bl	800b02c <_Balloc>
 800acf4:	4681      	mov	r9, r0
 800acf6:	b918      	cbnz	r0, 800ad00 <__gethex+0x424>
 800acf8:	4b1a      	ldr	r3, [pc, #104]	; (800ad64 <__gethex+0x488>)
 800acfa:	4602      	mov	r2, r0
 800acfc:	2184      	movs	r1, #132	; 0x84
 800acfe:	e6a8      	b.n	800aa52 <__gethex+0x176>
 800ad00:	6922      	ldr	r2, [r4, #16]
 800ad02:	3202      	adds	r2, #2
 800ad04:	f104 010c 	add.w	r1, r4, #12
 800ad08:	0092      	lsls	r2, r2, #2
 800ad0a:	300c      	adds	r0, #12
 800ad0c:	f7fd f879 	bl	8007e02 <memcpy>
 800ad10:	4621      	mov	r1, r4
 800ad12:	ee18 0a10 	vmov	r0, s16
 800ad16:	f000 f9c9 	bl	800b0ac <_Bfree>
 800ad1a:	464c      	mov	r4, r9
 800ad1c:	6923      	ldr	r3, [r4, #16]
 800ad1e:	1c5a      	adds	r2, r3, #1
 800ad20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad24:	6122      	str	r2, [r4, #16]
 800ad26:	2201      	movs	r2, #1
 800ad28:	615a      	str	r2, [r3, #20]
 800ad2a:	e7bb      	b.n	800aca4 <__gethex+0x3c8>
 800ad2c:	6922      	ldr	r2, [r4, #16]
 800ad2e:	455a      	cmp	r2, fp
 800ad30:	dd0b      	ble.n	800ad4a <__gethex+0x46e>
 800ad32:	2101      	movs	r1, #1
 800ad34:	4620      	mov	r0, r4
 800ad36:	f7ff fd69 	bl	800a80c <rshift>
 800ad3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad3e:	3501      	adds	r5, #1
 800ad40:	42ab      	cmp	r3, r5
 800ad42:	f6ff aed0 	blt.w	800aae6 <__gethex+0x20a>
 800ad46:	2701      	movs	r7, #1
 800ad48:	e7c0      	b.n	800accc <__gethex+0x3f0>
 800ad4a:	f016 061f 	ands.w	r6, r6, #31
 800ad4e:	d0fa      	beq.n	800ad46 <__gethex+0x46a>
 800ad50:	449a      	add	sl, r3
 800ad52:	f1c6 0620 	rsb	r6, r6, #32
 800ad56:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ad5a:	f000 fa5d 	bl	800b218 <__hi0bits>
 800ad5e:	42b0      	cmp	r0, r6
 800ad60:	dbe7      	blt.n	800ad32 <__gethex+0x456>
 800ad62:	e7f0      	b.n	800ad46 <__gethex+0x46a>
 800ad64:	0800c584 	.word	0x0800c584

0800ad68 <L_shift>:
 800ad68:	f1c2 0208 	rsb	r2, r2, #8
 800ad6c:	0092      	lsls	r2, r2, #2
 800ad6e:	b570      	push	{r4, r5, r6, lr}
 800ad70:	f1c2 0620 	rsb	r6, r2, #32
 800ad74:	6843      	ldr	r3, [r0, #4]
 800ad76:	6804      	ldr	r4, [r0, #0]
 800ad78:	fa03 f506 	lsl.w	r5, r3, r6
 800ad7c:	432c      	orrs	r4, r5
 800ad7e:	40d3      	lsrs	r3, r2
 800ad80:	6004      	str	r4, [r0, #0]
 800ad82:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad86:	4288      	cmp	r0, r1
 800ad88:	d3f4      	bcc.n	800ad74 <L_shift+0xc>
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}

0800ad8c <__match>:
 800ad8c:	b530      	push	{r4, r5, lr}
 800ad8e:	6803      	ldr	r3, [r0, #0]
 800ad90:	3301      	adds	r3, #1
 800ad92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad96:	b914      	cbnz	r4, 800ad9e <__match+0x12>
 800ad98:	6003      	str	r3, [r0, #0]
 800ad9a:	2001      	movs	r0, #1
 800ad9c:	bd30      	pop	{r4, r5, pc}
 800ad9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ada2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ada6:	2d19      	cmp	r5, #25
 800ada8:	bf98      	it	ls
 800adaa:	3220      	addls	r2, #32
 800adac:	42a2      	cmp	r2, r4
 800adae:	d0f0      	beq.n	800ad92 <__match+0x6>
 800adb0:	2000      	movs	r0, #0
 800adb2:	e7f3      	b.n	800ad9c <__match+0x10>

0800adb4 <__hexnan>:
 800adb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb8:	680b      	ldr	r3, [r1, #0]
 800adba:	6801      	ldr	r1, [r0, #0]
 800adbc:	115e      	asrs	r6, r3, #5
 800adbe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800adc2:	f013 031f 	ands.w	r3, r3, #31
 800adc6:	b087      	sub	sp, #28
 800adc8:	bf18      	it	ne
 800adca:	3604      	addne	r6, #4
 800adcc:	2500      	movs	r5, #0
 800adce:	1f37      	subs	r7, r6, #4
 800add0:	4682      	mov	sl, r0
 800add2:	4690      	mov	r8, r2
 800add4:	9301      	str	r3, [sp, #4]
 800add6:	f846 5c04 	str.w	r5, [r6, #-4]
 800adda:	46b9      	mov	r9, r7
 800addc:	463c      	mov	r4, r7
 800adde:	9502      	str	r5, [sp, #8]
 800ade0:	46ab      	mov	fp, r5
 800ade2:	784a      	ldrb	r2, [r1, #1]
 800ade4:	1c4b      	adds	r3, r1, #1
 800ade6:	9303      	str	r3, [sp, #12]
 800ade8:	b342      	cbz	r2, 800ae3c <__hexnan+0x88>
 800adea:	4610      	mov	r0, r2
 800adec:	9105      	str	r1, [sp, #20]
 800adee:	9204      	str	r2, [sp, #16]
 800adf0:	f7ff fd5e 	bl	800a8b0 <__hexdig_fun>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	d14f      	bne.n	800ae98 <__hexnan+0xe4>
 800adf8:	9a04      	ldr	r2, [sp, #16]
 800adfa:	9905      	ldr	r1, [sp, #20]
 800adfc:	2a20      	cmp	r2, #32
 800adfe:	d818      	bhi.n	800ae32 <__hexnan+0x7e>
 800ae00:	9b02      	ldr	r3, [sp, #8]
 800ae02:	459b      	cmp	fp, r3
 800ae04:	dd13      	ble.n	800ae2e <__hexnan+0x7a>
 800ae06:	454c      	cmp	r4, r9
 800ae08:	d206      	bcs.n	800ae18 <__hexnan+0x64>
 800ae0a:	2d07      	cmp	r5, #7
 800ae0c:	dc04      	bgt.n	800ae18 <__hexnan+0x64>
 800ae0e:	462a      	mov	r2, r5
 800ae10:	4649      	mov	r1, r9
 800ae12:	4620      	mov	r0, r4
 800ae14:	f7ff ffa8 	bl	800ad68 <L_shift>
 800ae18:	4544      	cmp	r4, r8
 800ae1a:	d950      	bls.n	800aebe <__hexnan+0x10a>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	f1a4 0904 	sub.w	r9, r4, #4
 800ae22:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae26:	f8cd b008 	str.w	fp, [sp, #8]
 800ae2a:	464c      	mov	r4, r9
 800ae2c:	461d      	mov	r5, r3
 800ae2e:	9903      	ldr	r1, [sp, #12]
 800ae30:	e7d7      	b.n	800ade2 <__hexnan+0x2e>
 800ae32:	2a29      	cmp	r2, #41	; 0x29
 800ae34:	d156      	bne.n	800aee4 <__hexnan+0x130>
 800ae36:	3102      	adds	r1, #2
 800ae38:	f8ca 1000 	str.w	r1, [sl]
 800ae3c:	f1bb 0f00 	cmp.w	fp, #0
 800ae40:	d050      	beq.n	800aee4 <__hexnan+0x130>
 800ae42:	454c      	cmp	r4, r9
 800ae44:	d206      	bcs.n	800ae54 <__hexnan+0xa0>
 800ae46:	2d07      	cmp	r5, #7
 800ae48:	dc04      	bgt.n	800ae54 <__hexnan+0xa0>
 800ae4a:	462a      	mov	r2, r5
 800ae4c:	4649      	mov	r1, r9
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f7ff ff8a 	bl	800ad68 <L_shift>
 800ae54:	4544      	cmp	r4, r8
 800ae56:	d934      	bls.n	800aec2 <__hexnan+0x10e>
 800ae58:	f1a8 0204 	sub.w	r2, r8, #4
 800ae5c:	4623      	mov	r3, r4
 800ae5e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae62:	f842 1f04 	str.w	r1, [r2, #4]!
 800ae66:	429f      	cmp	r7, r3
 800ae68:	d2f9      	bcs.n	800ae5e <__hexnan+0xaa>
 800ae6a:	1b3b      	subs	r3, r7, r4
 800ae6c:	f023 0303 	bic.w	r3, r3, #3
 800ae70:	3304      	adds	r3, #4
 800ae72:	3401      	adds	r4, #1
 800ae74:	3e03      	subs	r6, #3
 800ae76:	42b4      	cmp	r4, r6
 800ae78:	bf88      	it	hi
 800ae7a:	2304      	movhi	r3, #4
 800ae7c:	4443      	add	r3, r8
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f843 2b04 	str.w	r2, [r3], #4
 800ae84:	429f      	cmp	r7, r3
 800ae86:	d2fb      	bcs.n	800ae80 <__hexnan+0xcc>
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	b91b      	cbnz	r3, 800ae94 <__hexnan+0xe0>
 800ae8c:	4547      	cmp	r7, r8
 800ae8e:	d127      	bne.n	800aee0 <__hexnan+0x12c>
 800ae90:	2301      	movs	r3, #1
 800ae92:	603b      	str	r3, [r7, #0]
 800ae94:	2005      	movs	r0, #5
 800ae96:	e026      	b.n	800aee6 <__hexnan+0x132>
 800ae98:	3501      	adds	r5, #1
 800ae9a:	2d08      	cmp	r5, #8
 800ae9c:	f10b 0b01 	add.w	fp, fp, #1
 800aea0:	dd06      	ble.n	800aeb0 <__hexnan+0xfc>
 800aea2:	4544      	cmp	r4, r8
 800aea4:	d9c3      	bls.n	800ae2e <__hexnan+0x7a>
 800aea6:	2300      	movs	r3, #0
 800aea8:	f844 3c04 	str.w	r3, [r4, #-4]
 800aeac:	2501      	movs	r5, #1
 800aeae:	3c04      	subs	r4, #4
 800aeb0:	6822      	ldr	r2, [r4, #0]
 800aeb2:	f000 000f 	and.w	r0, r0, #15
 800aeb6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aeba:	6022      	str	r2, [r4, #0]
 800aebc:	e7b7      	b.n	800ae2e <__hexnan+0x7a>
 800aebe:	2508      	movs	r5, #8
 800aec0:	e7b5      	b.n	800ae2e <__hexnan+0x7a>
 800aec2:	9b01      	ldr	r3, [sp, #4]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d0df      	beq.n	800ae88 <__hexnan+0xd4>
 800aec8:	f04f 32ff 	mov.w	r2, #4294967295
 800aecc:	f1c3 0320 	rsb	r3, r3, #32
 800aed0:	fa22 f303 	lsr.w	r3, r2, r3
 800aed4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aed8:	401a      	ands	r2, r3
 800aeda:	f846 2c04 	str.w	r2, [r6, #-4]
 800aede:	e7d3      	b.n	800ae88 <__hexnan+0xd4>
 800aee0:	3f04      	subs	r7, #4
 800aee2:	e7d1      	b.n	800ae88 <__hexnan+0xd4>
 800aee4:	2004      	movs	r0, #4
 800aee6:	b007      	add	sp, #28
 800aee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aeec <_localeconv_r>:
 800aeec:	4800      	ldr	r0, [pc, #0]	; (800aef0 <_localeconv_r+0x4>)
 800aeee:	4770      	bx	lr
 800aef0:	2000019c 	.word	0x2000019c

0800aef4 <_lseek_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4d07      	ldr	r5, [pc, #28]	; (800af14 <_lseek_r+0x20>)
 800aef8:	4604      	mov	r4, r0
 800aefa:	4608      	mov	r0, r1
 800aefc:	4611      	mov	r1, r2
 800aefe:	2200      	movs	r2, #0
 800af00:	602a      	str	r2, [r5, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	f7f7 fa49 	bl	800239a <_lseek>
 800af08:	1c43      	adds	r3, r0, #1
 800af0a:	d102      	bne.n	800af12 <_lseek_r+0x1e>
 800af0c:	682b      	ldr	r3, [r5, #0]
 800af0e:	b103      	cbz	r3, 800af12 <_lseek_r+0x1e>
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	bd38      	pop	{r3, r4, r5, pc}
 800af14:	200045f8 	.word	0x200045f8

0800af18 <__swhatbuf_r>:
 800af18:	b570      	push	{r4, r5, r6, lr}
 800af1a:	460e      	mov	r6, r1
 800af1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af20:	2900      	cmp	r1, #0
 800af22:	b096      	sub	sp, #88	; 0x58
 800af24:	4614      	mov	r4, r2
 800af26:	461d      	mov	r5, r3
 800af28:	da07      	bge.n	800af3a <__swhatbuf_r+0x22>
 800af2a:	2300      	movs	r3, #0
 800af2c:	602b      	str	r3, [r5, #0]
 800af2e:	89b3      	ldrh	r3, [r6, #12]
 800af30:	061a      	lsls	r2, r3, #24
 800af32:	d410      	bmi.n	800af56 <__swhatbuf_r+0x3e>
 800af34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af38:	e00e      	b.n	800af58 <__swhatbuf_r+0x40>
 800af3a:	466a      	mov	r2, sp
 800af3c:	f000 ff54 	bl	800bde8 <_fstat_r>
 800af40:	2800      	cmp	r0, #0
 800af42:	dbf2      	blt.n	800af2a <__swhatbuf_r+0x12>
 800af44:	9a01      	ldr	r2, [sp, #4]
 800af46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af4e:	425a      	negs	r2, r3
 800af50:	415a      	adcs	r2, r3
 800af52:	602a      	str	r2, [r5, #0]
 800af54:	e7ee      	b.n	800af34 <__swhatbuf_r+0x1c>
 800af56:	2340      	movs	r3, #64	; 0x40
 800af58:	2000      	movs	r0, #0
 800af5a:	6023      	str	r3, [r4, #0]
 800af5c:	b016      	add	sp, #88	; 0x58
 800af5e:	bd70      	pop	{r4, r5, r6, pc}

0800af60 <__smakebuf_r>:
 800af60:	898b      	ldrh	r3, [r1, #12]
 800af62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af64:	079d      	lsls	r5, r3, #30
 800af66:	4606      	mov	r6, r0
 800af68:	460c      	mov	r4, r1
 800af6a:	d507      	bpl.n	800af7c <__smakebuf_r+0x1c>
 800af6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af70:	6023      	str	r3, [r4, #0]
 800af72:	6123      	str	r3, [r4, #16]
 800af74:	2301      	movs	r3, #1
 800af76:	6163      	str	r3, [r4, #20]
 800af78:	b002      	add	sp, #8
 800af7a:	bd70      	pop	{r4, r5, r6, pc}
 800af7c:	ab01      	add	r3, sp, #4
 800af7e:	466a      	mov	r2, sp
 800af80:	f7ff ffca 	bl	800af18 <__swhatbuf_r>
 800af84:	9900      	ldr	r1, [sp, #0]
 800af86:	4605      	mov	r5, r0
 800af88:	4630      	mov	r0, r6
 800af8a:	f7fc ff51 	bl	8007e30 <_malloc_r>
 800af8e:	b948      	cbnz	r0, 800afa4 <__smakebuf_r+0x44>
 800af90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af94:	059a      	lsls	r2, r3, #22
 800af96:	d4ef      	bmi.n	800af78 <__smakebuf_r+0x18>
 800af98:	f023 0303 	bic.w	r3, r3, #3
 800af9c:	f043 0302 	orr.w	r3, r3, #2
 800afa0:	81a3      	strh	r3, [r4, #12]
 800afa2:	e7e3      	b.n	800af6c <__smakebuf_r+0xc>
 800afa4:	4b0d      	ldr	r3, [pc, #52]	; (800afdc <__smakebuf_r+0x7c>)
 800afa6:	62b3      	str	r3, [r6, #40]	; 0x28
 800afa8:	89a3      	ldrh	r3, [r4, #12]
 800afaa:	6020      	str	r0, [r4, #0]
 800afac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afb0:	81a3      	strh	r3, [r4, #12]
 800afb2:	9b00      	ldr	r3, [sp, #0]
 800afb4:	6163      	str	r3, [r4, #20]
 800afb6:	9b01      	ldr	r3, [sp, #4]
 800afb8:	6120      	str	r0, [r4, #16]
 800afba:	b15b      	cbz	r3, 800afd4 <__smakebuf_r+0x74>
 800afbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afc0:	4630      	mov	r0, r6
 800afc2:	f000 ff23 	bl	800be0c <_isatty_r>
 800afc6:	b128      	cbz	r0, 800afd4 <__smakebuf_r+0x74>
 800afc8:	89a3      	ldrh	r3, [r4, #12]
 800afca:	f023 0303 	bic.w	r3, r3, #3
 800afce:	f043 0301 	orr.w	r3, r3, #1
 800afd2:	81a3      	strh	r3, [r4, #12]
 800afd4:	89a0      	ldrh	r0, [r4, #12]
 800afd6:	4305      	orrs	r5, r0
 800afd8:	81a5      	strh	r5, [r4, #12]
 800afda:	e7cd      	b.n	800af78 <__smakebuf_r+0x18>
 800afdc:	08007c11 	.word	0x08007c11

0800afe0 <malloc>:
 800afe0:	4b02      	ldr	r3, [pc, #8]	; (800afec <malloc+0xc>)
 800afe2:	4601      	mov	r1, r0
 800afe4:	6818      	ldr	r0, [r3, #0]
 800afe6:	f7fc bf23 	b.w	8007e30 <_malloc_r>
 800afea:	bf00      	nop
 800afec:	20000044 	.word	0x20000044

0800aff0 <__ascii_mbtowc>:
 800aff0:	b082      	sub	sp, #8
 800aff2:	b901      	cbnz	r1, 800aff6 <__ascii_mbtowc+0x6>
 800aff4:	a901      	add	r1, sp, #4
 800aff6:	b142      	cbz	r2, 800b00a <__ascii_mbtowc+0x1a>
 800aff8:	b14b      	cbz	r3, 800b00e <__ascii_mbtowc+0x1e>
 800affa:	7813      	ldrb	r3, [r2, #0]
 800affc:	600b      	str	r3, [r1, #0]
 800affe:	7812      	ldrb	r2, [r2, #0]
 800b000:	1e10      	subs	r0, r2, #0
 800b002:	bf18      	it	ne
 800b004:	2001      	movne	r0, #1
 800b006:	b002      	add	sp, #8
 800b008:	4770      	bx	lr
 800b00a:	4610      	mov	r0, r2
 800b00c:	e7fb      	b.n	800b006 <__ascii_mbtowc+0x16>
 800b00e:	f06f 0001 	mvn.w	r0, #1
 800b012:	e7f8      	b.n	800b006 <__ascii_mbtowc+0x16>

0800b014 <__malloc_lock>:
 800b014:	4801      	ldr	r0, [pc, #4]	; (800b01c <__malloc_lock+0x8>)
 800b016:	f7fc bef2 	b.w	8007dfe <__retarget_lock_acquire_recursive>
 800b01a:	bf00      	nop
 800b01c:	200045f0 	.word	0x200045f0

0800b020 <__malloc_unlock>:
 800b020:	4801      	ldr	r0, [pc, #4]	; (800b028 <__malloc_unlock+0x8>)
 800b022:	f7fc beed 	b.w	8007e00 <__retarget_lock_release_recursive>
 800b026:	bf00      	nop
 800b028:	200045f0 	.word	0x200045f0

0800b02c <_Balloc>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b030:	4604      	mov	r4, r0
 800b032:	460d      	mov	r5, r1
 800b034:	b976      	cbnz	r6, 800b054 <_Balloc+0x28>
 800b036:	2010      	movs	r0, #16
 800b038:	f7ff ffd2 	bl	800afe0 <malloc>
 800b03c:	4602      	mov	r2, r0
 800b03e:	6260      	str	r0, [r4, #36]	; 0x24
 800b040:	b920      	cbnz	r0, 800b04c <_Balloc+0x20>
 800b042:	4b18      	ldr	r3, [pc, #96]	; (800b0a4 <_Balloc+0x78>)
 800b044:	4818      	ldr	r0, [pc, #96]	; (800b0a8 <_Balloc+0x7c>)
 800b046:	2166      	movs	r1, #102	; 0x66
 800b048:	f000 fe9e 	bl	800bd88 <__assert_func>
 800b04c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b050:	6006      	str	r6, [r0, #0]
 800b052:	60c6      	str	r6, [r0, #12]
 800b054:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b056:	68f3      	ldr	r3, [r6, #12]
 800b058:	b183      	cbz	r3, 800b07c <_Balloc+0x50>
 800b05a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b062:	b9b8      	cbnz	r0, 800b094 <_Balloc+0x68>
 800b064:	2101      	movs	r1, #1
 800b066:	fa01 f605 	lsl.w	r6, r1, r5
 800b06a:	1d72      	adds	r2, r6, #5
 800b06c:	0092      	lsls	r2, r2, #2
 800b06e:	4620      	mov	r0, r4
 800b070:	f000 fc97 	bl	800b9a2 <_calloc_r>
 800b074:	b160      	cbz	r0, 800b090 <_Balloc+0x64>
 800b076:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b07a:	e00e      	b.n	800b09a <_Balloc+0x6e>
 800b07c:	2221      	movs	r2, #33	; 0x21
 800b07e:	2104      	movs	r1, #4
 800b080:	4620      	mov	r0, r4
 800b082:	f000 fc8e 	bl	800b9a2 <_calloc_r>
 800b086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b088:	60f0      	str	r0, [r6, #12]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1e4      	bne.n	800b05a <_Balloc+0x2e>
 800b090:	2000      	movs	r0, #0
 800b092:	bd70      	pop	{r4, r5, r6, pc}
 800b094:	6802      	ldr	r2, [r0, #0]
 800b096:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b09a:	2300      	movs	r3, #0
 800b09c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0a0:	e7f7      	b.n	800b092 <_Balloc+0x66>
 800b0a2:	bf00      	nop
 800b0a4:	0800c50e 	.word	0x0800c50e
 800b0a8:	0800c614 	.word	0x0800c614

0800b0ac <_Bfree>:
 800b0ac:	b570      	push	{r4, r5, r6, lr}
 800b0ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b0b0:	4605      	mov	r5, r0
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	b976      	cbnz	r6, 800b0d4 <_Bfree+0x28>
 800b0b6:	2010      	movs	r0, #16
 800b0b8:	f7ff ff92 	bl	800afe0 <malloc>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	6268      	str	r0, [r5, #36]	; 0x24
 800b0c0:	b920      	cbnz	r0, 800b0cc <_Bfree+0x20>
 800b0c2:	4b09      	ldr	r3, [pc, #36]	; (800b0e8 <_Bfree+0x3c>)
 800b0c4:	4809      	ldr	r0, [pc, #36]	; (800b0ec <_Bfree+0x40>)
 800b0c6:	218a      	movs	r1, #138	; 0x8a
 800b0c8:	f000 fe5e 	bl	800bd88 <__assert_func>
 800b0cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0d0:	6006      	str	r6, [r0, #0]
 800b0d2:	60c6      	str	r6, [r0, #12]
 800b0d4:	b13c      	cbz	r4, 800b0e6 <_Bfree+0x3a>
 800b0d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b0d8:	6862      	ldr	r2, [r4, #4]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0e0:	6021      	str	r1, [r4, #0]
 800b0e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0e6:	bd70      	pop	{r4, r5, r6, pc}
 800b0e8:	0800c50e 	.word	0x0800c50e
 800b0ec:	0800c614 	.word	0x0800c614

0800b0f0 <__multadd>:
 800b0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f4:	690e      	ldr	r6, [r1, #16]
 800b0f6:	4607      	mov	r7, r0
 800b0f8:	4698      	mov	r8, r3
 800b0fa:	460c      	mov	r4, r1
 800b0fc:	f101 0014 	add.w	r0, r1, #20
 800b100:	2300      	movs	r3, #0
 800b102:	6805      	ldr	r5, [r0, #0]
 800b104:	b2a9      	uxth	r1, r5
 800b106:	fb02 8101 	mla	r1, r2, r1, r8
 800b10a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b10e:	0c2d      	lsrs	r5, r5, #16
 800b110:	fb02 c505 	mla	r5, r2, r5, ip
 800b114:	b289      	uxth	r1, r1
 800b116:	3301      	adds	r3, #1
 800b118:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b11c:	429e      	cmp	r6, r3
 800b11e:	f840 1b04 	str.w	r1, [r0], #4
 800b122:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b126:	dcec      	bgt.n	800b102 <__multadd+0x12>
 800b128:	f1b8 0f00 	cmp.w	r8, #0
 800b12c:	d022      	beq.n	800b174 <__multadd+0x84>
 800b12e:	68a3      	ldr	r3, [r4, #8]
 800b130:	42b3      	cmp	r3, r6
 800b132:	dc19      	bgt.n	800b168 <__multadd+0x78>
 800b134:	6861      	ldr	r1, [r4, #4]
 800b136:	4638      	mov	r0, r7
 800b138:	3101      	adds	r1, #1
 800b13a:	f7ff ff77 	bl	800b02c <_Balloc>
 800b13e:	4605      	mov	r5, r0
 800b140:	b928      	cbnz	r0, 800b14e <__multadd+0x5e>
 800b142:	4602      	mov	r2, r0
 800b144:	4b0d      	ldr	r3, [pc, #52]	; (800b17c <__multadd+0x8c>)
 800b146:	480e      	ldr	r0, [pc, #56]	; (800b180 <__multadd+0x90>)
 800b148:	21b5      	movs	r1, #181	; 0xb5
 800b14a:	f000 fe1d 	bl	800bd88 <__assert_func>
 800b14e:	6922      	ldr	r2, [r4, #16]
 800b150:	3202      	adds	r2, #2
 800b152:	f104 010c 	add.w	r1, r4, #12
 800b156:	0092      	lsls	r2, r2, #2
 800b158:	300c      	adds	r0, #12
 800b15a:	f7fc fe52 	bl	8007e02 <memcpy>
 800b15e:	4621      	mov	r1, r4
 800b160:	4638      	mov	r0, r7
 800b162:	f7ff ffa3 	bl	800b0ac <_Bfree>
 800b166:	462c      	mov	r4, r5
 800b168:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b16c:	3601      	adds	r6, #1
 800b16e:	f8c3 8014 	str.w	r8, [r3, #20]
 800b172:	6126      	str	r6, [r4, #16]
 800b174:	4620      	mov	r0, r4
 800b176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b17a:	bf00      	nop
 800b17c:	0800c584 	.word	0x0800c584
 800b180:	0800c614 	.word	0x0800c614

0800b184 <__s2b>:
 800b184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b188:	460c      	mov	r4, r1
 800b18a:	4615      	mov	r5, r2
 800b18c:	461f      	mov	r7, r3
 800b18e:	2209      	movs	r2, #9
 800b190:	3308      	adds	r3, #8
 800b192:	4606      	mov	r6, r0
 800b194:	fb93 f3f2 	sdiv	r3, r3, r2
 800b198:	2100      	movs	r1, #0
 800b19a:	2201      	movs	r2, #1
 800b19c:	429a      	cmp	r2, r3
 800b19e:	db09      	blt.n	800b1b4 <__s2b+0x30>
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	f7ff ff43 	bl	800b02c <_Balloc>
 800b1a6:	b940      	cbnz	r0, 800b1ba <__s2b+0x36>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	4b19      	ldr	r3, [pc, #100]	; (800b210 <__s2b+0x8c>)
 800b1ac:	4819      	ldr	r0, [pc, #100]	; (800b214 <__s2b+0x90>)
 800b1ae:	21ce      	movs	r1, #206	; 0xce
 800b1b0:	f000 fdea 	bl	800bd88 <__assert_func>
 800b1b4:	0052      	lsls	r2, r2, #1
 800b1b6:	3101      	adds	r1, #1
 800b1b8:	e7f0      	b.n	800b19c <__s2b+0x18>
 800b1ba:	9b08      	ldr	r3, [sp, #32]
 800b1bc:	6143      	str	r3, [r0, #20]
 800b1be:	2d09      	cmp	r5, #9
 800b1c0:	f04f 0301 	mov.w	r3, #1
 800b1c4:	6103      	str	r3, [r0, #16]
 800b1c6:	dd16      	ble.n	800b1f6 <__s2b+0x72>
 800b1c8:	f104 0909 	add.w	r9, r4, #9
 800b1cc:	46c8      	mov	r8, r9
 800b1ce:	442c      	add	r4, r5
 800b1d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b1d4:	4601      	mov	r1, r0
 800b1d6:	3b30      	subs	r3, #48	; 0x30
 800b1d8:	220a      	movs	r2, #10
 800b1da:	4630      	mov	r0, r6
 800b1dc:	f7ff ff88 	bl	800b0f0 <__multadd>
 800b1e0:	45a0      	cmp	r8, r4
 800b1e2:	d1f5      	bne.n	800b1d0 <__s2b+0x4c>
 800b1e4:	f1a5 0408 	sub.w	r4, r5, #8
 800b1e8:	444c      	add	r4, r9
 800b1ea:	1b2d      	subs	r5, r5, r4
 800b1ec:	1963      	adds	r3, r4, r5
 800b1ee:	42bb      	cmp	r3, r7
 800b1f0:	db04      	blt.n	800b1fc <__s2b+0x78>
 800b1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1f6:	340a      	adds	r4, #10
 800b1f8:	2509      	movs	r5, #9
 800b1fa:	e7f6      	b.n	800b1ea <__s2b+0x66>
 800b1fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b200:	4601      	mov	r1, r0
 800b202:	3b30      	subs	r3, #48	; 0x30
 800b204:	220a      	movs	r2, #10
 800b206:	4630      	mov	r0, r6
 800b208:	f7ff ff72 	bl	800b0f0 <__multadd>
 800b20c:	e7ee      	b.n	800b1ec <__s2b+0x68>
 800b20e:	bf00      	nop
 800b210:	0800c584 	.word	0x0800c584
 800b214:	0800c614 	.word	0x0800c614

0800b218 <__hi0bits>:
 800b218:	0c03      	lsrs	r3, r0, #16
 800b21a:	041b      	lsls	r3, r3, #16
 800b21c:	b9d3      	cbnz	r3, 800b254 <__hi0bits+0x3c>
 800b21e:	0400      	lsls	r0, r0, #16
 800b220:	2310      	movs	r3, #16
 800b222:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b226:	bf04      	itt	eq
 800b228:	0200      	lsleq	r0, r0, #8
 800b22a:	3308      	addeq	r3, #8
 800b22c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b230:	bf04      	itt	eq
 800b232:	0100      	lsleq	r0, r0, #4
 800b234:	3304      	addeq	r3, #4
 800b236:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b23a:	bf04      	itt	eq
 800b23c:	0080      	lsleq	r0, r0, #2
 800b23e:	3302      	addeq	r3, #2
 800b240:	2800      	cmp	r0, #0
 800b242:	db05      	blt.n	800b250 <__hi0bits+0x38>
 800b244:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b248:	f103 0301 	add.w	r3, r3, #1
 800b24c:	bf08      	it	eq
 800b24e:	2320      	moveq	r3, #32
 800b250:	4618      	mov	r0, r3
 800b252:	4770      	bx	lr
 800b254:	2300      	movs	r3, #0
 800b256:	e7e4      	b.n	800b222 <__hi0bits+0xa>

0800b258 <__lo0bits>:
 800b258:	6803      	ldr	r3, [r0, #0]
 800b25a:	f013 0207 	ands.w	r2, r3, #7
 800b25e:	4601      	mov	r1, r0
 800b260:	d00b      	beq.n	800b27a <__lo0bits+0x22>
 800b262:	07da      	lsls	r2, r3, #31
 800b264:	d424      	bmi.n	800b2b0 <__lo0bits+0x58>
 800b266:	0798      	lsls	r0, r3, #30
 800b268:	bf49      	itett	mi
 800b26a:	085b      	lsrmi	r3, r3, #1
 800b26c:	089b      	lsrpl	r3, r3, #2
 800b26e:	2001      	movmi	r0, #1
 800b270:	600b      	strmi	r3, [r1, #0]
 800b272:	bf5c      	itt	pl
 800b274:	600b      	strpl	r3, [r1, #0]
 800b276:	2002      	movpl	r0, #2
 800b278:	4770      	bx	lr
 800b27a:	b298      	uxth	r0, r3
 800b27c:	b9b0      	cbnz	r0, 800b2ac <__lo0bits+0x54>
 800b27e:	0c1b      	lsrs	r3, r3, #16
 800b280:	2010      	movs	r0, #16
 800b282:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b286:	bf04      	itt	eq
 800b288:	0a1b      	lsreq	r3, r3, #8
 800b28a:	3008      	addeq	r0, #8
 800b28c:	071a      	lsls	r2, r3, #28
 800b28e:	bf04      	itt	eq
 800b290:	091b      	lsreq	r3, r3, #4
 800b292:	3004      	addeq	r0, #4
 800b294:	079a      	lsls	r2, r3, #30
 800b296:	bf04      	itt	eq
 800b298:	089b      	lsreq	r3, r3, #2
 800b29a:	3002      	addeq	r0, #2
 800b29c:	07da      	lsls	r2, r3, #31
 800b29e:	d403      	bmi.n	800b2a8 <__lo0bits+0x50>
 800b2a0:	085b      	lsrs	r3, r3, #1
 800b2a2:	f100 0001 	add.w	r0, r0, #1
 800b2a6:	d005      	beq.n	800b2b4 <__lo0bits+0x5c>
 800b2a8:	600b      	str	r3, [r1, #0]
 800b2aa:	4770      	bx	lr
 800b2ac:	4610      	mov	r0, r2
 800b2ae:	e7e8      	b.n	800b282 <__lo0bits+0x2a>
 800b2b0:	2000      	movs	r0, #0
 800b2b2:	4770      	bx	lr
 800b2b4:	2020      	movs	r0, #32
 800b2b6:	4770      	bx	lr

0800b2b8 <__i2b>:
 800b2b8:	b510      	push	{r4, lr}
 800b2ba:	460c      	mov	r4, r1
 800b2bc:	2101      	movs	r1, #1
 800b2be:	f7ff feb5 	bl	800b02c <_Balloc>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	b928      	cbnz	r0, 800b2d2 <__i2b+0x1a>
 800b2c6:	4b05      	ldr	r3, [pc, #20]	; (800b2dc <__i2b+0x24>)
 800b2c8:	4805      	ldr	r0, [pc, #20]	; (800b2e0 <__i2b+0x28>)
 800b2ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b2ce:	f000 fd5b 	bl	800bd88 <__assert_func>
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	6144      	str	r4, [r0, #20]
 800b2d6:	6103      	str	r3, [r0, #16]
 800b2d8:	bd10      	pop	{r4, pc}
 800b2da:	bf00      	nop
 800b2dc:	0800c584 	.word	0x0800c584
 800b2e0:	0800c614 	.word	0x0800c614

0800b2e4 <__multiply>:
 800b2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e8:	4614      	mov	r4, r2
 800b2ea:	690a      	ldr	r2, [r1, #16]
 800b2ec:	6923      	ldr	r3, [r4, #16]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	bfb8      	it	lt
 800b2f2:	460b      	movlt	r3, r1
 800b2f4:	460d      	mov	r5, r1
 800b2f6:	bfbc      	itt	lt
 800b2f8:	4625      	movlt	r5, r4
 800b2fa:	461c      	movlt	r4, r3
 800b2fc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b300:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b304:	68ab      	ldr	r3, [r5, #8]
 800b306:	6869      	ldr	r1, [r5, #4]
 800b308:	eb0a 0709 	add.w	r7, sl, r9
 800b30c:	42bb      	cmp	r3, r7
 800b30e:	b085      	sub	sp, #20
 800b310:	bfb8      	it	lt
 800b312:	3101      	addlt	r1, #1
 800b314:	f7ff fe8a 	bl	800b02c <_Balloc>
 800b318:	b930      	cbnz	r0, 800b328 <__multiply+0x44>
 800b31a:	4602      	mov	r2, r0
 800b31c:	4b42      	ldr	r3, [pc, #264]	; (800b428 <__multiply+0x144>)
 800b31e:	4843      	ldr	r0, [pc, #268]	; (800b42c <__multiply+0x148>)
 800b320:	f240 115d 	movw	r1, #349	; 0x15d
 800b324:	f000 fd30 	bl	800bd88 <__assert_func>
 800b328:	f100 0614 	add.w	r6, r0, #20
 800b32c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b330:	4633      	mov	r3, r6
 800b332:	2200      	movs	r2, #0
 800b334:	4543      	cmp	r3, r8
 800b336:	d31e      	bcc.n	800b376 <__multiply+0x92>
 800b338:	f105 0c14 	add.w	ip, r5, #20
 800b33c:	f104 0314 	add.w	r3, r4, #20
 800b340:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b344:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b348:	9202      	str	r2, [sp, #8]
 800b34a:	ebac 0205 	sub.w	r2, ip, r5
 800b34e:	3a15      	subs	r2, #21
 800b350:	f022 0203 	bic.w	r2, r2, #3
 800b354:	3204      	adds	r2, #4
 800b356:	f105 0115 	add.w	r1, r5, #21
 800b35a:	458c      	cmp	ip, r1
 800b35c:	bf38      	it	cc
 800b35e:	2204      	movcc	r2, #4
 800b360:	9201      	str	r2, [sp, #4]
 800b362:	9a02      	ldr	r2, [sp, #8]
 800b364:	9303      	str	r3, [sp, #12]
 800b366:	429a      	cmp	r2, r3
 800b368:	d808      	bhi.n	800b37c <__multiply+0x98>
 800b36a:	2f00      	cmp	r7, #0
 800b36c:	dc55      	bgt.n	800b41a <__multiply+0x136>
 800b36e:	6107      	str	r7, [r0, #16]
 800b370:	b005      	add	sp, #20
 800b372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b376:	f843 2b04 	str.w	r2, [r3], #4
 800b37a:	e7db      	b.n	800b334 <__multiply+0x50>
 800b37c:	f8b3 a000 	ldrh.w	sl, [r3]
 800b380:	f1ba 0f00 	cmp.w	sl, #0
 800b384:	d020      	beq.n	800b3c8 <__multiply+0xe4>
 800b386:	f105 0e14 	add.w	lr, r5, #20
 800b38a:	46b1      	mov	r9, r6
 800b38c:	2200      	movs	r2, #0
 800b38e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b392:	f8d9 b000 	ldr.w	fp, [r9]
 800b396:	b2a1      	uxth	r1, r4
 800b398:	fa1f fb8b 	uxth.w	fp, fp
 800b39c:	fb0a b101 	mla	r1, sl, r1, fp
 800b3a0:	4411      	add	r1, r2
 800b3a2:	f8d9 2000 	ldr.w	r2, [r9]
 800b3a6:	0c24      	lsrs	r4, r4, #16
 800b3a8:	0c12      	lsrs	r2, r2, #16
 800b3aa:	fb0a 2404 	mla	r4, sl, r4, r2
 800b3ae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b3b2:	b289      	uxth	r1, r1
 800b3b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b3b8:	45f4      	cmp	ip, lr
 800b3ba:	f849 1b04 	str.w	r1, [r9], #4
 800b3be:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b3c2:	d8e4      	bhi.n	800b38e <__multiply+0xaa>
 800b3c4:	9901      	ldr	r1, [sp, #4]
 800b3c6:	5072      	str	r2, [r6, r1]
 800b3c8:	9a03      	ldr	r2, [sp, #12]
 800b3ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b3ce:	3304      	adds	r3, #4
 800b3d0:	f1b9 0f00 	cmp.w	r9, #0
 800b3d4:	d01f      	beq.n	800b416 <__multiply+0x132>
 800b3d6:	6834      	ldr	r4, [r6, #0]
 800b3d8:	f105 0114 	add.w	r1, r5, #20
 800b3dc:	46b6      	mov	lr, r6
 800b3de:	f04f 0a00 	mov.w	sl, #0
 800b3e2:	880a      	ldrh	r2, [r1, #0]
 800b3e4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b3e8:	fb09 b202 	mla	r2, r9, r2, fp
 800b3ec:	4492      	add	sl, r2
 800b3ee:	b2a4      	uxth	r4, r4
 800b3f0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b3f4:	f84e 4b04 	str.w	r4, [lr], #4
 800b3f8:	f851 4b04 	ldr.w	r4, [r1], #4
 800b3fc:	f8be 2000 	ldrh.w	r2, [lr]
 800b400:	0c24      	lsrs	r4, r4, #16
 800b402:	fb09 2404 	mla	r4, r9, r4, r2
 800b406:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b40a:	458c      	cmp	ip, r1
 800b40c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b410:	d8e7      	bhi.n	800b3e2 <__multiply+0xfe>
 800b412:	9a01      	ldr	r2, [sp, #4]
 800b414:	50b4      	str	r4, [r6, r2]
 800b416:	3604      	adds	r6, #4
 800b418:	e7a3      	b.n	800b362 <__multiply+0x7e>
 800b41a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d1a5      	bne.n	800b36e <__multiply+0x8a>
 800b422:	3f01      	subs	r7, #1
 800b424:	e7a1      	b.n	800b36a <__multiply+0x86>
 800b426:	bf00      	nop
 800b428:	0800c584 	.word	0x0800c584
 800b42c:	0800c614 	.word	0x0800c614

0800b430 <__pow5mult>:
 800b430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b434:	4615      	mov	r5, r2
 800b436:	f012 0203 	ands.w	r2, r2, #3
 800b43a:	4606      	mov	r6, r0
 800b43c:	460f      	mov	r7, r1
 800b43e:	d007      	beq.n	800b450 <__pow5mult+0x20>
 800b440:	4c25      	ldr	r4, [pc, #148]	; (800b4d8 <__pow5mult+0xa8>)
 800b442:	3a01      	subs	r2, #1
 800b444:	2300      	movs	r3, #0
 800b446:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b44a:	f7ff fe51 	bl	800b0f0 <__multadd>
 800b44e:	4607      	mov	r7, r0
 800b450:	10ad      	asrs	r5, r5, #2
 800b452:	d03d      	beq.n	800b4d0 <__pow5mult+0xa0>
 800b454:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b456:	b97c      	cbnz	r4, 800b478 <__pow5mult+0x48>
 800b458:	2010      	movs	r0, #16
 800b45a:	f7ff fdc1 	bl	800afe0 <malloc>
 800b45e:	4602      	mov	r2, r0
 800b460:	6270      	str	r0, [r6, #36]	; 0x24
 800b462:	b928      	cbnz	r0, 800b470 <__pow5mult+0x40>
 800b464:	4b1d      	ldr	r3, [pc, #116]	; (800b4dc <__pow5mult+0xac>)
 800b466:	481e      	ldr	r0, [pc, #120]	; (800b4e0 <__pow5mult+0xb0>)
 800b468:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b46c:	f000 fc8c 	bl	800bd88 <__assert_func>
 800b470:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b474:	6004      	str	r4, [r0, #0]
 800b476:	60c4      	str	r4, [r0, #12]
 800b478:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b47c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b480:	b94c      	cbnz	r4, 800b496 <__pow5mult+0x66>
 800b482:	f240 2171 	movw	r1, #625	; 0x271
 800b486:	4630      	mov	r0, r6
 800b488:	f7ff ff16 	bl	800b2b8 <__i2b>
 800b48c:	2300      	movs	r3, #0
 800b48e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b492:	4604      	mov	r4, r0
 800b494:	6003      	str	r3, [r0, #0]
 800b496:	f04f 0900 	mov.w	r9, #0
 800b49a:	07eb      	lsls	r3, r5, #31
 800b49c:	d50a      	bpl.n	800b4b4 <__pow5mult+0x84>
 800b49e:	4639      	mov	r1, r7
 800b4a0:	4622      	mov	r2, r4
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	f7ff ff1e 	bl	800b2e4 <__multiply>
 800b4a8:	4639      	mov	r1, r7
 800b4aa:	4680      	mov	r8, r0
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	f7ff fdfd 	bl	800b0ac <_Bfree>
 800b4b2:	4647      	mov	r7, r8
 800b4b4:	106d      	asrs	r5, r5, #1
 800b4b6:	d00b      	beq.n	800b4d0 <__pow5mult+0xa0>
 800b4b8:	6820      	ldr	r0, [r4, #0]
 800b4ba:	b938      	cbnz	r0, 800b4cc <__pow5mult+0x9c>
 800b4bc:	4622      	mov	r2, r4
 800b4be:	4621      	mov	r1, r4
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	f7ff ff0f 	bl	800b2e4 <__multiply>
 800b4c6:	6020      	str	r0, [r4, #0]
 800b4c8:	f8c0 9000 	str.w	r9, [r0]
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	e7e4      	b.n	800b49a <__pow5mult+0x6a>
 800b4d0:	4638      	mov	r0, r7
 800b4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4d6:	bf00      	nop
 800b4d8:	0800c768 	.word	0x0800c768
 800b4dc:	0800c50e 	.word	0x0800c50e
 800b4e0:	0800c614 	.word	0x0800c614

0800b4e4 <__lshift>:
 800b4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e8:	460c      	mov	r4, r1
 800b4ea:	6849      	ldr	r1, [r1, #4]
 800b4ec:	6923      	ldr	r3, [r4, #16]
 800b4ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b4f2:	68a3      	ldr	r3, [r4, #8]
 800b4f4:	4607      	mov	r7, r0
 800b4f6:	4691      	mov	r9, r2
 800b4f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b4fc:	f108 0601 	add.w	r6, r8, #1
 800b500:	42b3      	cmp	r3, r6
 800b502:	db0b      	blt.n	800b51c <__lshift+0x38>
 800b504:	4638      	mov	r0, r7
 800b506:	f7ff fd91 	bl	800b02c <_Balloc>
 800b50a:	4605      	mov	r5, r0
 800b50c:	b948      	cbnz	r0, 800b522 <__lshift+0x3e>
 800b50e:	4602      	mov	r2, r0
 800b510:	4b28      	ldr	r3, [pc, #160]	; (800b5b4 <__lshift+0xd0>)
 800b512:	4829      	ldr	r0, [pc, #164]	; (800b5b8 <__lshift+0xd4>)
 800b514:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b518:	f000 fc36 	bl	800bd88 <__assert_func>
 800b51c:	3101      	adds	r1, #1
 800b51e:	005b      	lsls	r3, r3, #1
 800b520:	e7ee      	b.n	800b500 <__lshift+0x1c>
 800b522:	2300      	movs	r3, #0
 800b524:	f100 0114 	add.w	r1, r0, #20
 800b528:	f100 0210 	add.w	r2, r0, #16
 800b52c:	4618      	mov	r0, r3
 800b52e:	4553      	cmp	r3, sl
 800b530:	db33      	blt.n	800b59a <__lshift+0xb6>
 800b532:	6920      	ldr	r0, [r4, #16]
 800b534:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b538:	f104 0314 	add.w	r3, r4, #20
 800b53c:	f019 091f 	ands.w	r9, r9, #31
 800b540:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b544:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b548:	d02b      	beq.n	800b5a2 <__lshift+0xbe>
 800b54a:	f1c9 0e20 	rsb	lr, r9, #32
 800b54e:	468a      	mov	sl, r1
 800b550:	2200      	movs	r2, #0
 800b552:	6818      	ldr	r0, [r3, #0]
 800b554:	fa00 f009 	lsl.w	r0, r0, r9
 800b558:	4302      	orrs	r2, r0
 800b55a:	f84a 2b04 	str.w	r2, [sl], #4
 800b55e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b562:	459c      	cmp	ip, r3
 800b564:	fa22 f20e 	lsr.w	r2, r2, lr
 800b568:	d8f3      	bhi.n	800b552 <__lshift+0x6e>
 800b56a:	ebac 0304 	sub.w	r3, ip, r4
 800b56e:	3b15      	subs	r3, #21
 800b570:	f023 0303 	bic.w	r3, r3, #3
 800b574:	3304      	adds	r3, #4
 800b576:	f104 0015 	add.w	r0, r4, #21
 800b57a:	4584      	cmp	ip, r0
 800b57c:	bf38      	it	cc
 800b57e:	2304      	movcc	r3, #4
 800b580:	50ca      	str	r2, [r1, r3]
 800b582:	b10a      	cbz	r2, 800b588 <__lshift+0xa4>
 800b584:	f108 0602 	add.w	r6, r8, #2
 800b588:	3e01      	subs	r6, #1
 800b58a:	4638      	mov	r0, r7
 800b58c:	612e      	str	r6, [r5, #16]
 800b58e:	4621      	mov	r1, r4
 800b590:	f7ff fd8c 	bl	800b0ac <_Bfree>
 800b594:	4628      	mov	r0, r5
 800b596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b59a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b59e:	3301      	adds	r3, #1
 800b5a0:	e7c5      	b.n	800b52e <__lshift+0x4a>
 800b5a2:	3904      	subs	r1, #4
 800b5a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b5ac:	459c      	cmp	ip, r3
 800b5ae:	d8f9      	bhi.n	800b5a4 <__lshift+0xc0>
 800b5b0:	e7ea      	b.n	800b588 <__lshift+0xa4>
 800b5b2:	bf00      	nop
 800b5b4:	0800c584 	.word	0x0800c584
 800b5b8:	0800c614 	.word	0x0800c614

0800b5bc <__mcmp>:
 800b5bc:	b530      	push	{r4, r5, lr}
 800b5be:	6902      	ldr	r2, [r0, #16]
 800b5c0:	690c      	ldr	r4, [r1, #16]
 800b5c2:	1b12      	subs	r2, r2, r4
 800b5c4:	d10e      	bne.n	800b5e4 <__mcmp+0x28>
 800b5c6:	f100 0314 	add.w	r3, r0, #20
 800b5ca:	3114      	adds	r1, #20
 800b5cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b5d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b5d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b5d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b5dc:	42a5      	cmp	r5, r4
 800b5de:	d003      	beq.n	800b5e8 <__mcmp+0x2c>
 800b5e0:	d305      	bcc.n	800b5ee <__mcmp+0x32>
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	4610      	mov	r0, r2
 800b5e6:	bd30      	pop	{r4, r5, pc}
 800b5e8:	4283      	cmp	r3, r0
 800b5ea:	d3f3      	bcc.n	800b5d4 <__mcmp+0x18>
 800b5ec:	e7fa      	b.n	800b5e4 <__mcmp+0x28>
 800b5ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f2:	e7f7      	b.n	800b5e4 <__mcmp+0x28>

0800b5f4 <__mdiff>:
 800b5f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f8:	460c      	mov	r4, r1
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	4611      	mov	r1, r2
 800b5fe:	4620      	mov	r0, r4
 800b600:	4617      	mov	r7, r2
 800b602:	f7ff ffdb 	bl	800b5bc <__mcmp>
 800b606:	1e05      	subs	r5, r0, #0
 800b608:	d110      	bne.n	800b62c <__mdiff+0x38>
 800b60a:	4629      	mov	r1, r5
 800b60c:	4630      	mov	r0, r6
 800b60e:	f7ff fd0d 	bl	800b02c <_Balloc>
 800b612:	b930      	cbnz	r0, 800b622 <__mdiff+0x2e>
 800b614:	4b39      	ldr	r3, [pc, #228]	; (800b6fc <__mdiff+0x108>)
 800b616:	4602      	mov	r2, r0
 800b618:	f240 2132 	movw	r1, #562	; 0x232
 800b61c:	4838      	ldr	r0, [pc, #224]	; (800b700 <__mdiff+0x10c>)
 800b61e:	f000 fbb3 	bl	800bd88 <__assert_func>
 800b622:	2301      	movs	r3, #1
 800b624:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b628:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b62c:	bfa4      	itt	ge
 800b62e:	463b      	movge	r3, r7
 800b630:	4627      	movge	r7, r4
 800b632:	4630      	mov	r0, r6
 800b634:	6879      	ldr	r1, [r7, #4]
 800b636:	bfa6      	itte	ge
 800b638:	461c      	movge	r4, r3
 800b63a:	2500      	movge	r5, #0
 800b63c:	2501      	movlt	r5, #1
 800b63e:	f7ff fcf5 	bl	800b02c <_Balloc>
 800b642:	b920      	cbnz	r0, 800b64e <__mdiff+0x5a>
 800b644:	4b2d      	ldr	r3, [pc, #180]	; (800b6fc <__mdiff+0x108>)
 800b646:	4602      	mov	r2, r0
 800b648:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b64c:	e7e6      	b.n	800b61c <__mdiff+0x28>
 800b64e:	693e      	ldr	r6, [r7, #16]
 800b650:	60c5      	str	r5, [r0, #12]
 800b652:	6925      	ldr	r5, [r4, #16]
 800b654:	f107 0114 	add.w	r1, r7, #20
 800b658:	f104 0914 	add.w	r9, r4, #20
 800b65c:	f100 0e14 	add.w	lr, r0, #20
 800b660:	f107 0210 	add.w	r2, r7, #16
 800b664:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b668:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b66c:	46f2      	mov	sl, lr
 800b66e:	2700      	movs	r7, #0
 800b670:	f859 3b04 	ldr.w	r3, [r9], #4
 800b674:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b678:	fa1f f883 	uxth.w	r8, r3
 800b67c:	fa17 f78b 	uxtah	r7, r7, fp
 800b680:	0c1b      	lsrs	r3, r3, #16
 800b682:	eba7 0808 	sub.w	r8, r7, r8
 800b686:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b68a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b68e:	fa1f f888 	uxth.w	r8, r8
 800b692:	141f      	asrs	r7, r3, #16
 800b694:	454d      	cmp	r5, r9
 800b696:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b69a:	f84a 3b04 	str.w	r3, [sl], #4
 800b69e:	d8e7      	bhi.n	800b670 <__mdiff+0x7c>
 800b6a0:	1b2b      	subs	r3, r5, r4
 800b6a2:	3b15      	subs	r3, #21
 800b6a4:	f023 0303 	bic.w	r3, r3, #3
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	3415      	adds	r4, #21
 800b6ac:	42a5      	cmp	r5, r4
 800b6ae:	bf38      	it	cc
 800b6b0:	2304      	movcc	r3, #4
 800b6b2:	4419      	add	r1, r3
 800b6b4:	4473      	add	r3, lr
 800b6b6:	469e      	mov	lr, r3
 800b6b8:	460d      	mov	r5, r1
 800b6ba:	4565      	cmp	r5, ip
 800b6bc:	d30e      	bcc.n	800b6dc <__mdiff+0xe8>
 800b6be:	f10c 0203 	add.w	r2, ip, #3
 800b6c2:	1a52      	subs	r2, r2, r1
 800b6c4:	f022 0203 	bic.w	r2, r2, #3
 800b6c8:	3903      	subs	r1, #3
 800b6ca:	458c      	cmp	ip, r1
 800b6cc:	bf38      	it	cc
 800b6ce:	2200      	movcc	r2, #0
 800b6d0:	441a      	add	r2, r3
 800b6d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b6d6:	b17b      	cbz	r3, 800b6f8 <__mdiff+0x104>
 800b6d8:	6106      	str	r6, [r0, #16]
 800b6da:	e7a5      	b.n	800b628 <__mdiff+0x34>
 800b6dc:	f855 8b04 	ldr.w	r8, [r5], #4
 800b6e0:	fa17 f488 	uxtah	r4, r7, r8
 800b6e4:	1422      	asrs	r2, r4, #16
 800b6e6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b6ea:	b2a4      	uxth	r4, r4
 800b6ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b6f0:	f84e 4b04 	str.w	r4, [lr], #4
 800b6f4:	1417      	asrs	r7, r2, #16
 800b6f6:	e7e0      	b.n	800b6ba <__mdiff+0xc6>
 800b6f8:	3e01      	subs	r6, #1
 800b6fa:	e7ea      	b.n	800b6d2 <__mdiff+0xde>
 800b6fc:	0800c584 	.word	0x0800c584
 800b700:	0800c614 	.word	0x0800c614

0800b704 <__ulp>:
 800b704:	b082      	sub	sp, #8
 800b706:	ed8d 0b00 	vstr	d0, [sp]
 800b70a:	9b01      	ldr	r3, [sp, #4]
 800b70c:	4912      	ldr	r1, [pc, #72]	; (800b758 <__ulp+0x54>)
 800b70e:	4019      	ands	r1, r3
 800b710:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b714:	2900      	cmp	r1, #0
 800b716:	dd05      	ble.n	800b724 <__ulp+0x20>
 800b718:	2200      	movs	r2, #0
 800b71a:	460b      	mov	r3, r1
 800b71c:	ec43 2b10 	vmov	d0, r2, r3
 800b720:	b002      	add	sp, #8
 800b722:	4770      	bx	lr
 800b724:	4249      	negs	r1, r1
 800b726:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b72a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b72e:	f04f 0200 	mov.w	r2, #0
 800b732:	f04f 0300 	mov.w	r3, #0
 800b736:	da04      	bge.n	800b742 <__ulp+0x3e>
 800b738:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b73c:	fa41 f300 	asr.w	r3, r1, r0
 800b740:	e7ec      	b.n	800b71c <__ulp+0x18>
 800b742:	f1a0 0114 	sub.w	r1, r0, #20
 800b746:	291e      	cmp	r1, #30
 800b748:	bfda      	itte	le
 800b74a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b74e:	fa20 f101 	lsrle.w	r1, r0, r1
 800b752:	2101      	movgt	r1, #1
 800b754:	460a      	mov	r2, r1
 800b756:	e7e1      	b.n	800b71c <__ulp+0x18>
 800b758:	7ff00000 	.word	0x7ff00000

0800b75c <__b2d>:
 800b75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75e:	6905      	ldr	r5, [r0, #16]
 800b760:	f100 0714 	add.w	r7, r0, #20
 800b764:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b768:	1f2e      	subs	r6, r5, #4
 800b76a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b76e:	4620      	mov	r0, r4
 800b770:	f7ff fd52 	bl	800b218 <__hi0bits>
 800b774:	f1c0 0320 	rsb	r3, r0, #32
 800b778:	280a      	cmp	r0, #10
 800b77a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b7f8 <__b2d+0x9c>
 800b77e:	600b      	str	r3, [r1, #0]
 800b780:	dc14      	bgt.n	800b7ac <__b2d+0x50>
 800b782:	f1c0 0e0b 	rsb	lr, r0, #11
 800b786:	fa24 f10e 	lsr.w	r1, r4, lr
 800b78a:	42b7      	cmp	r7, r6
 800b78c:	ea41 030c 	orr.w	r3, r1, ip
 800b790:	bf34      	ite	cc
 800b792:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b796:	2100      	movcs	r1, #0
 800b798:	3015      	adds	r0, #21
 800b79a:	fa04 f000 	lsl.w	r0, r4, r0
 800b79e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b7a2:	ea40 0201 	orr.w	r2, r0, r1
 800b7a6:	ec43 2b10 	vmov	d0, r2, r3
 800b7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7ac:	42b7      	cmp	r7, r6
 800b7ae:	bf3a      	itte	cc
 800b7b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b7b4:	f1a5 0608 	subcc.w	r6, r5, #8
 800b7b8:	2100      	movcs	r1, #0
 800b7ba:	380b      	subs	r0, #11
 800b7bc:	d017      	beq.n	800b7ee <__b2d+0x92>
 800b7be:	f1c0 0c20 	rsb	ip, r0, #32
 800b7c2:	fa04 f500 	lsl.w	r5, r4, r0
 800b7c6:	42be      	cmp	r6, r7
 800b7c8:	fa21 f40c 	lsr.w	r4, r1, ip
 800b7cc:	ea45 0504 	orr.w	r5, r5, r4
 800b7d0:	bf8c      	ite	hi
 800b7d2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b7d6:	2400      	movls	r4, #0
 800b7d8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b7dc:	fa01 f000 	lsl.w	r0, r1, r0
 800b7e0:	fa24 f40c 	lsr.w	r4, r4, ip
 800b7e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b7e8:	ea40 0204 	orr.w	r2, r0, r4
 800b7ec:	e7db      	b.n	800b7a6 <__b2d+0x4a>
 800b7ee:	ea44 030c 	orr.w	r3, r4, ip
 800b7f2:	460a      	mov	r2, r1
 800b7f4:	e7d7      	b.n	800b7a6 <__b2d+0x4a>
 800b7f6:	bf00      	nop
 800b7f8:	3ff00000 	.word	0x3ff00000

0800b7fc <__d2b>:
 800b7fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b800:	4689      	mov	r9, r1
 800b802:	2101      	movs	r1, #1
 800b804:	ec57 6b10 	vmov	r6, r7, d0
 800b808:	4690      	mov	r8, r2
 800b80a:	f7ff fc0f 	bl	800b02c <_Balloc>
 800b80e:	4604      	mov	r4, r0
 800b810:	b930      	cbnz	r0, 800b820 <__d2b+0x24>
 800b812:	4602      	mov	r2, r0
 800b814:	4b25      	ldr	r3, [pc, #148]	; (800b8ac <__d2b+0xb0>)
 800b816:	4826      	ldr	r0, [pc, #152]	; (800b8b0 <__d2b+0xb4>)
 800b818:	f240 310a 	movw	r1, #778	; 0x30a
 800b81c:	f000 fab4 	bl	800bd88 <__assert_func>
 800b820:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b824:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b828:	bb35      	cbnz	r5, 800b878 <__d2b+0x7c>
 800b82a:	2e00      	cmp	r6, #0
 800b82c:	9301      	str	r3, [sp, #4]
 800b82e:	d028      	beq.n	800b882 <__d2b+0x86>
 800b830:	4668      	mov	r0, sp
 800b832:	9600      	str	r6, [sp, #0]
 800b834:	f7ff fd10 	bl	800b258 <__lo0bits>
 800b838:	9900      	ldr	r1, [sp, #0]
 800b83a:	b300      	cbz	r0, 800b87e <__d2b+0x82>
 800b83c:	9a01      	ldr	r2, [sp, #4]
 800b83e:	f1c0 0320 	rsb	r3, r0, #32
 800b842:	fa02 f303 	lsl.w	r3, r2, r3
 800b846:	430b      	orrs	r3, r1
 800b848:	40c2      	lsrs	r2, r0
 800b84a:	6163      	str	r3, [r4, #20]
 800b84c:	9201      	str	r2, [sp, #4]
 800b84e:	9b01      	ldr	r3, [sp, #4]
 800b850:	61a3      	str	r3, [r4, #24]
 800b852:	2b00      	cmp	r3, #0
 800b854:	bf14      	ite	ne
 800b856:	2202      	movne	r2, #2
 800b858:	2201      	moveq	r2, #1
 800b85a:	6122      	str	r2, [r4, #16]
 800b85c:	b1d5      	cbz	r5, 800b894 <__d2b+0x98>
 800b85e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b862:	4405      	add	r5, r0
 800b864:	f8c9 5000 	str.w	r5, [r9]
 800b868:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b86c:	f8c8 0000 	str.w	r0, [r8]
 800b870:	4620      	mov	r0, r4
 800b872:	b003      	add	sp, #12
 800b874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b87c:	e7d5      	b.n	800b82a <__d2b+0x2e>
 800b87e:	6161      	str	r1, [r4, #20]
 800b880:	e7e5      	b.n	800b84e <__d2b+0x52>
 800b882:	a801      	add	r0, sp, #4
 800b884:	f7ff fce8 	bl	800b258 <__lo0bits>
 800b888:	9b01      	ldr	r3, [sp, #4]
 800b88a:	6163      	str	r3, [r4, #20]
 800b88c:	2201      	movs	r2, #1
 800b88e:	6122      	str	r2, [r4, #16]
 800b890:	3020      	adds	r0, #32
 800b892:	e7e3      	b.n	800b85c <__d2b+0x60>
 800b894:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b898:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b89c:	f8c9 0000 	str.w	r0, [r9]
 800b8a0:	6918      	ldr	r0, [r3, #16]
 800b8a2:	f7ff fcb9 	bl	800b218 <__hi0bits>
 800b8a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b8aa:	e7df      	b.n	800b86c <__d2b+0x70>
 800b8ac:	0800c584 	.word	0x0800c584
 800b8b0:	0800c614 	.word	0x0800c614

0800b8b4 <__ratio>:
 800b8b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b8:	4688      	mov	r8, r1
 800b8ba:	4669      	mov	r1, sp
 800b8bc:	4681      	mov	r9, r0
 800b8be:	f7ff ff4d 	bl	800b75c <__b2d>
 800b8c2:	a901      	add	r1, sp, #4
 800b8c4:	4640      	mov	r0, r8
 800b8c6:	ec55 4b10 	vmov	r4, r5, d0
 800b8ca:	f7ff ff47 	bl	800b75c <__b2d>
 800b8ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b8d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b8d6:	eba3 0c02 	sub.w	ip, r3, r2
 800b8da:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b8de:	1a9b      	subs	r3, r3, r2
 800b8e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b8e4:	ec51 0b10 	vmov	r0, r1, d0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	bfd6      	itet	le
 800b8ec:	460a      	movle	r2, r1
 800b8ee:	462a      	movgt	r2, r5
 800b8f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b8f4:	468b      	mov	fp, r1
 800b8f6:	462f      	mov	r7, r5
 800b8f8:	bfd4      	ite	le
 800b8fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b8fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b902:	4620      	mov	r0, r4
 800b904:	ee10 2a10 	vmov	r2, s0
 800b908:	465b      	mov	r3, fp
 800b90a:	4639      	mov	r1, r7
 800b90c:	f7f4 ffce 	bl	80008ac <__aeabi_ddiv>
 800b910:	ec41 0b10 	vmov	d0, r0, r1
 800b914:	b003      	add	sp, #12
 800b916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b91a <__copybits>:
 800b91a:	3901      	subs	r1, #1
 800b91c:	b570      	push	{r4, r5, r6, lr}
 800b91e:	1149      	asrs	r1, r1, #5
 800b920:	6914      	ldr	r4, [r2, #16]
 800b922:	3101      	adds	r1, #1
 800b924:	f102 0314 	add.w	r3, r2, #20
 800b928:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b92c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b930:	1f05      	subs	r5, r0, #4
 800b932:	42a3      	cmp	r3, r4
 800b934:	d30c      	bcc.n	800b950 <__copybits+0x36>
 800b936:	1aa3      	subs	r3, r4, r2
 800b938:	3b11      	subs	r3, #17
 800b93a:	f023 0303 	bic.w	r3, r3, #3
 800b93e:	3211      	adds	r2, #17
 800b940:	42a2      	cmp	r2, r4
 800b942:	bf88      	it	hi
 800b944:	2300      	movhi	r3, #0
 800b946:	4418      	add	r0, r3
 800b948:	2300      	movs	r3, #0
 800b94a:	4288      	cmp	r0, r1
 800b94c:	d305      	bcc.n	800b95a <__copybits+0x40>
 800b94e:	bd70      	pop	{r4, r5, r6, pc}
 800b950:	f853 6b04 	ldr.w	r6, [r3], #4
 800b954:	f845 6f04 	str.w	r6, [r5, #4]!
 800b958:	e7eb      	b.n	800b932 <__copybits+0x18>
 800b95a:	f840 3b04 	str.w	r3, [r0], #4
 800b95e:	e7f4      	b.n	800b94a <__copybits+0x30>

0800b960 <__any_on>:
 800b960:	f100 0214 	add.w	r2, r0, #20
 800b964:	6900      	ldr	r0, [r0, #16]
 800b966:	114b      	asrs	r3, r1, #5
 800b968:	4298      	cmp	r0, r3
 800b96a:	b510      	push	{r4, lr}
 800b96c:	db11      	blt.n	800b992 <__any_on+0x32>
 800b96e:	dd0a      	ble.n	800b986 <__any_on+0x26>
 800b970:	f011 011f 	ands.w	r1, r1, #31
 800b974:	d007      	beq.n	800b986 <__any_on+0x26>
 800b976:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b97a:	fa24 f001 	lsr.w	r0, r4, r1
 800b97e:	fa00 f101 	lsl.w	r1, r0, r1
 800b982:	428c      	cmp	r4, r1
 800b984:	d10b      	bne.n	800b99e <__any_on+0x3e>
 800b986:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d803      	bhi.n	800b996 <__any_on+0x36>
 800b98e:	2000      	movs	r0, #0
 800b990:	bd10      	pop	{r4, pc}
 800b992:	4603      	mov	r3, r0
 800b994:	e7f7      	b.n	800b986 <__any_on+0x26>
 800b996:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b99a:	2900      	cmp	r1, #0
 800b99c:	d0f5      	beq.n	800b98a <__any_on+0x2a>
 800b99e:	2001      	movs	r0, #1
 800b9a0:	e7f6      	b.n	800b990 <__any_on+0x30>

0800b9a2 <_calloc_r>:
 800b9a2:	b513      	push	{r0, r1, r4, lr}
 800b9a4:	434a      	muls	r2, r1
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	9201      	str	r2, [sp, #4]
 800b9aa:	f7fc fa41 	bl	8007e30 <_malloc_r>
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	b118      	cbz	r0, 800b9ba <_calloc_r+0x18>
 800b9b2:	9a01      	ldr	r2, [sp, #4]
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	f7fc fa32 	bl	8007e1e <memset>
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	b002      	add	sp, #8
 800b9be:	bd10      	pop	{r4, pc}

0800b9c0 <_free_r>:
 800b9c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9c2:	2900      	cmp	r1, #0
 800b9c4:	d048      	beq.n	800ba58 <_free_r+0x98>
 800b9c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ca:	9001      	str	r0, [sp, #4]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f1a1 0404 	sub.w	r4, r1, #4
 800b9d2:	bfb8      	it	lt
 800b9d4:	18e4      	addlt	r4, r4, r3
 800b9d6:	f7ff fb1d 	bl	800b014 <__malloc_lock>
 800b9da:	4a20      	ldr	r2, [pc, #128]	; (800ba5c <_free_r+0x9c>)
 800b9dc:	9801      	ldr	r0, [sp, #4]
 800b9de:	6813      	ldr	r3, [r2, #0]
 800b9e0:	4615      	mov	r5, r2
 800b9e2:	b933      	cbnz	r3, 800b9f2 <_free_r+0x32>
 800b9e4:	6063      	str	r3, [r4, #4]
 800b9e6:	6014      	str	r4, [r2, #0]
 800b9e8:	b003      	add	sp, #12
 800b9ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9ee:	f7ff bb17 	b.w	800b020 <__malloc_unlock>
 800b9f2:	42a3      	cmp	r3, r4
 800b9f4:	d90b      	bls.n	800ba0e <_free_r+0x4e>
 800b9f6:	6821      	ldr	r1, [r4, #0]
 800b9f8:	1862      	adds	r2, r4, r1
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	bf04      	itt	eq
 800b9fe:	681a      	ldreq	r2, [r3, #0]
 800ba00:	685b      	ldreq	r3, [r3, #4]
 800ba02:	6063      	str	r3, [r4, #4]
 800ba04:	bf04      	itt	eq
 800ba06:	1852      	addeq	r2, r2, r1
 800ba08:	6022      	streq	r2, [r4, #0]
 800ba0a:	602c      	str	r4, [r5, #0]
 800ba0c:	e7ec      	b.n	800b9e8 <_free_r+0x28>
 800ba0e:	461a      	mov	r2, r3
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	b10b      	cbz	r3, 800ba18 <_free_r+0x58>
 800ba14:	42a3      	cmp	r3, r4
 800ba16:	d9fa      	bls.n	800ba0e <_free_r+0x4e>
 800ba18:	6811      	ldr	r1, [r2, #0]
 800ba1a:	1855      	adds	r5, r2, r1
 800ba1c:	42a5      	cmp	r5, r4
 800ba1e:	d10b      	bne.n	800ba38 <_free_r+0x78>
 800ba20:	6824      	ldr	r4, [r4, #0]
 800ba22:	4421      	add	r1, r4
 800ba24:	1854      	adds	r4, r2, r1
 800ba26:	42a3      	cmp	r3, r4
 800ba28:	6011      	str	r1, [r2, #0]
 800ba2a:	d1dd      	bne.n	800b9e8 <_free_r+0x28>
 800ba2c:	681c      	ldr	r4, [r3, #0]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	6053      	str	r3, [r2, #4]
 800ba32:	4421      	add	r1, r4
 800ba34:	6011      	str	r1, [r2, #0]
 800ba36:	e7d7      	b.n	800b9e8 <_free_r+0x28>
 800ba38:	d902      	bls.n	800ba40 <_free_r+0x80>
 800ba3a:	230c      	movs	r3, #12
 800ba3c:	6003      	str	r3, [r0, #0]
 800ba3e:	e7d3      	b.n	800b9e8 <_free_r+0x28>
 800ba40:	6825      	ldr	r5, [r4, #0]
 800ba42:	1961      	adds	r1, r4, r5
 800ba44:	428b      	cmp	r3, r1
 800ba46:	bf04      	itt	eq
 800ba48:	6819      	ldreq	r1, [r3, #0]
 800ba4a:	685b      	ldreq	r3, [r3, #4]
 800ba4c:	6063      	str	r3, [r4, #4]
 800ba4e:	bf04      	itt	eq
 800ba50:	1949      	addeq	r1, r1, r5
 800ba52:	6021      	streq	r1, [r4, #0]
 800ba54:	6054      	str	r4, [r2, #4]
 800ba56:	e7c7      	b.n	800b9e8 <_free_r+0x28>
 800ba58:	b003      	add	sp, #12
 800ba5a:	bd30      	pop	{r4, r5, pc}
 800ba5c:	20004364 	.word	0x20004364

0800ba60 <__sfputc_r>:
 800ba60:	6893      	ldr	r3, [r2, #8]
 800ba62:	3b01      	subs	r3, #1
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	b410      	push	{r4}
 800ba68:	6093      	str	r3, [r2, #8]
 800ba6a:	da08      	bge.n	800ba7e <__sfputc_r+0x1e>
 800ba6c:	6994      	ldr	r4, [r2, #24]
 800ba6e:	42a3      	cmp	r3, r4
 800ba70:	db01      	blt.n	800ba76 <__sfputc_r+0x16>
 800ba72:	290a      	cmp	r1, #10
 800ba74:	d103      	bne.n	800ba7e <__sfputc_r+0x1e>
 800ba76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba7a:	f7fd bea9 	b.w	80097d0 <__swbuf_r>
 800ba7e:	6813      	ldr	r3, [r2, #0]
 800ba80:	1c58      	adds	r0, r3, #1
 800ba82:	6010      	str	r0, [r2, #0]
 800ba84:	7019      	strb	r1, [r3, #0]
 800ba86:	4608      	mov	r0, r1
 800ba88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba8c:	4770      	bx	lr

0800ba8e <__sfputs_r>:
 800ba8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba90:	4606      	mov	r6, r0
 800ba92:	460f      	mov	r7, r1
 800ba94:	4614      	mov	r4, r2
 800ba96:	18d5      	adds	r5, r2, r3
 800ba98:	42ac      	cmp	r4, r5
 800ba9a:	d101      	bne.n	800baa0 <__sfputs_r+0x12>
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	e007      	b.n	800bab0 <__sfputs_r+0x22>
 800baa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baa4:	463a      	mov	r2, r7
 800baa6:	4630      	mov	r0, r6
 800baa8:	f7ff ffda 	bl	800ba60 <__sfputc_r>
 800baac:	1c43      	adds	r3, r0, #1
 800baae:	d1f3      	bne.n	800ba98 <__sfputs_r+0xa>
 800bab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bab4 <_vfiprintf_r>:
 800bab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab8:	460d      	mov	r5, r1
 800baba:	b09d      	sub	sp, #116	; 0x74
 800babc:	4614      	mov	r4, r2
 800babe:	4698      	mov	r8, r3
 800bac0:	4606      	mov	r6, r0
 800bac2:	b118      	cbz	r0, 800bacc <_vfiprintf_r+0x18>
 800bac4:	6983      	ldr	r3, [r0, #24]
 800bac6:	b90b      	cbnz	r3, 800bacc <_vfiprintf_r+0x18>
 800bac8:	f7fc f8d6 	bl	8007c78 <__sinit>
 800bacc:	4b89      	ldr	r3, [pc, #548]	; (800bcf4 <_vfiprintf_r+0x240>)
 800bace:	429d      	cmp	r5, r3
 800bad0:	d11b      	bne.n	800bb0a <_vfiprintf_r+0x56>
 800bad2:	6875      	ldr	r5, [r6, #4]
 800bad4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bad6:	07d9      	lsls	r1, r3, #31
 800bad8:	d405      	bmi.n	800bae6 <_vfiprintf_r+0x32>
 800bada:	89ab      	ldrh	r3, [r5, #12]
 800badc:	059a      	lsls	r2, r3, #22
 800bade:	d402      	bmi.n	800bae6 <_vfiprintf_r+0x32>
 800bae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bae2:	f7fc f98c 	bl	8007dfe <__retarget_lock_acquire_recursive>
 800bae6:	89ab      	ldrh	r3, [r5, #12]
 800bae8:	071b      	lsls	r3, r3, #28
 800baea:	d501      	bpl.n	800baf0 <_vfiprintf_r+0x3c>
 800baec:	692b      	ldr	r3, [r5, #16]
 800baee:	b9eb      	cbnz	r3, 800bb2c <_vfiprintf_r+0x78>
 800baf0:	4629      	mov	r1, r5
 800baf2:	4630      	mov	r0, r6
 800baf4:	f7fd fed0 	bl	8009898 <__swsetup_r>
 800baf8:	b1c0      	cbz	r0, 800bb2c <_vfiprintf_r+0x78>
 800bafa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bafc:	07dc      	lsls	r4, r3, #31
 800bafe:	d50e      	bpl.n	800bb1e <_vfiprintf_r+0x6a>
 800bb00:	f04f 30ff 	mov.w	r0, #4294967295
 800bb04:	b01d      	add	sp, #116	; 0x74
 800bb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb0a:	4b7b      	ldr	r3, [pc, #492]	; (800bcf8 <_vfiprintf_r+0x244>)
 800bb0c:	429d      	cmp	r5, r3
 800bb0e:	d101      	bne.n	800bb14 <_vfiprintf_r+0x60>
 800bb10:	68b5      	ldr	r5, [r6, #8]
 800bb12:	e7df      	b.n	800bad4 <_vfiprintf_r+0x20>
 800bb14:	4b79      	ldr	r3, [pc, #484]	; (800bcfc <_vfiprintf_r+0x248>)
 800bb16:	429d      	cmp	r5, r3
 800bb18:	bf08      	it	eq
 800bb1a:	68f5      	ldreq	r5, [r6, #12]
 800bb1c:	e7da      	b.n	800bad4 <_vfiprintf_r+0x20>
 800bb1e:	89ab      	ldrh	r3, [r5, #12]
 800bb20:	0598      	lsls	r0, r3, #22
 800bb22:	d4ed      	bmi.n	800bb00 <_vfiprintf_r+0x4c>
 800bb24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb26:	f7fc f96b 	bl	8007e00 <__retarget_lock_release_recursive>
 800bb2a:	e7e9      	b.n	800bb00 <_vfiprintf_r+0x4c>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb30:	2320      	movs	r3, #32
 800bb32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb36:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb3a:	2330      	movs	r3, #48	; 0x30
 800bb3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bd00 <_vfiprintf_r+0x24c>
 800bb40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb44:	f04f 0901 	mov.w	r9, #1
 800bb48:	4623      	mov	r3, r4
 800bb4a:	469a      	mov	sl, r3
 800bb4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb50:	b10a      	cbz	r2, 800bb56 <_vfiprintf_r+0xa2>
 800bb52:	2a25      	cmp	r2, #37	; 0x25
 800bb54:	d1f9      	bne.n	800bb4a <_vfiprintf_r+0x96>
 800bb56:	ebba 0b04 	subs.w	fp, sl, r4
 800bb5a:	d00b      	beq.n	800bb74 <_vfiprintf_r+0xc0>
 800bb5c:	465b      	mov	r3, fp
 800bb5e:	4622      	mov	r2, r4
 800bb60:	4629      	mov	r1, r5
 800bb62:	4630      	mov	r0, r6
 800bb64:	f7ff ff93 	bl	800ba8e <__sfputs_r>
 800bb68:	3001      	adds	r0, #1
 800bb6a:	f000 80aa 	beq.w	800bcc2 <_vfiprintf_r+0x20e>
 800bb6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb70:	445a      	add	r2, fp
 800bb72:	9209      	str	r2, [sp, #36]	; 0x24
 800bb74:	f89a 3000 	ldrb.w	r3, [sl]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f000 80a2 	beq.w	800bcc2 <_vfiprintf_r+0x20e>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f04f 32ff 	mov.w	r2, #4294967295
 800bb84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb88:	f10a 0a01 	add.w	sl, sl, #1
 800bb8c:	9304      	str	r3, [sp, #16]
 800bb8e:	9307      	str	r3, [sp, #28]
 800bb90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb94:	931a      	str	r3, [sp, #104]	; 0x68
 800bb96:	4654      	mov	r4, sl
 800bb98:	2205      	movs	r2, #5
 800bb9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb9e:	4858      	ldr	r0, [pc, #352]	; (800bd00 <_vfiprintf_r+0x24c>)
 800bba0:	f7f4 fb4e 	bl	8000240 <memchr>
 800bba4:	9a04      	ldr	r2, [sp, #16]
 800bba6:	b9d8      	cbnz	r0, 800bbe0 <_vfiprintf_r+0x12c>
 800bba8:	06d1      	lsls	r1, r2, #27
 800bbaa:	bf44      	itt	mi
 800bbac:	2320      	movmi	r3, #32
 800bbae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbb2:	0713      	lsls	r3, r2, #28
 800bbb4:	bf44      	itt	mi
 800bbb6:	232b      	movmi	r3, #43	; 0x2b
 800bbb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbbc:	f89a 3000 	ldrb.w	r3, [sl]
 800bbc0:	2b2a      	cmp	r3, #42	; 0x2a
 800bbc2:	d015      	beq.n	800bbf0 <_vfiprintf_r+0x13c>
 800bbc4:	9a07      	ldr	r2, [sp, #28]
 800bbc6:	4654      	mov	r4, sl
 800bbc8:	2000      	movs	r0, #0
 800bbca:	f04f 0c0a 	mov.w	ip, #10
 800bbce:	4621      	mov	r1, r4
 800bbd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbd4:	3b30      	subs	r3, #48	; 0x30
 800bbd6:	2b09      	cmp	r3, #9
 800bbd8:	d94e      	bls.n	800bc78 <_vfiprintf_r+0x1c4>
 800bbda:	b1b0      	cbz	r0, 800bc0a <_vfiprintf_r+0x156>
 800bbdc:	9207      	str	r2, [sp, #28]
 800bbde:	e014      	b.n	800bc0a <_vfiprintf_r+0x156>
 800bbe0:	eba0 0308 	sub.w	r3, r0, r8
 800bbe4:	fa09 f303 	lsl.w	r3, r9, r3
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	9304      	str	r3, [sp, #16]
 800bbec:	46a2      	mov	sl, r4
 800bbee:	e7d2      	b.n	800bb96 <_vfiprintf_r+0xe2>
 800bbf0:	9b03      	ldr	r3, [sp, #12]
 800bbf2:	1d19      	adds	r1, r3, #4
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	9103      	str	r1, [sp, #12]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	bfbb      	ittet	lt
 800bbfc:	425b      	neglt	r3, r3
 800bbfe:	f042 0202 	orrlt.w	r2, r2, #2
 800bc02:	9307      	strge	r3, [sp, #28]
 800bc04:	9307      	strlt	r3, [sp, #28]
 800bc06:	bfb8      	it	lt
 800bc08:	9204      	strlt	r2, [sp, #16]
 800bc0a:	7823      	ldrb	r3, [r4, #0]
 800bc0c:	2b2e      	cmp	r3, #46	; 0x2e
 800bc0e:	d10c      	bne.n	800bc2a <_vfiprintf_r+0x176>
 800bc10:	7863      	ldrb	r3, [r4, #1]
 800bc12:	2b2a      	cmp	r3, #42	; 0x2a
 800bc14:	d135      	bne.n	800bc82 <_vfiprintf_r+0x1ce>
 800bc16:	9b03      	ldr	r3, [sp, #12]
 800bc18:	1d1a      	adds	r2, r3, #4
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	9203      	str	r2, [sp, #12]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	bfb8      	it	lt
 800bc22:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc26:	3402      	adds	r4, #2
 800bc28:	9305      	str	r3, [sp, #20]
 800bc2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bd10 <_vfiprintf_r+0x25c>
 800bc2e:	7821      	ldrb	r1, [r4, #0]
 800bc30:	2203      	movs	r2, #3
 800bc32:	4650      	mov	r0, sl
 800bc34:	f7f4 fb04 	bl	8000240 <memchr>
 800bc38:	b140      	cbz	r0, 800bc4c <_vfiprintf_r+0x198>
 800bc3a:	2340      	movs	r3, #64	; 0x40
 800bc3c:	eba0 000a 	sub.w	r0, r0, sl
 800bc40:	fa03 f000 	lsl.w	r0, r3, r0
 800bc44:	9b04      	ldr	r3, [sp, #16]
 800bc46:	4303      	orrs	r3, r0
 800bc48:	3401      	adds	r4, #1
 800bc4a:	9304      	str	r3, [sp, #16]
 800bc4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc50:	482c      	ldr	r0, [pc, #176]	; (800bd04 <_vfiprintf_r+0x250>)
 800bc52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc56:	2206      	movs	r2, #6
 800bc58:	f7f4 faf2 	bl	8000240 <memchr>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	d03f      	beq.n	800bce0 <_vfiprintf_r+0x22c>
 800bc60:	4b29      	ldr	r3, [pc, #164]	; (800bd08 <_vfiprintf_r+0x254>)
 800bc62:	bb1b      	cbnz	r3, 800bcac <_vfiprintf_r+0x1f8>
 800bc64:	9b03      	ldr	r3, [sp, #12]
 800bc66:	3307      	adds	r3, #7
 800bc68:	f023 0307 	bic.w	r3, r3, #7
 800bc6c:	3308      	adds	r3, #8
 800bc6e:	9303      	str	r3, [sp, #12]
 800bc70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc72:	443b      	add	r3, r7
 800bc74:	9309      	str	r3, [sp, #36]	; 0x24
 800bc76:	e767      	b.n	800bb48 <_vfiprintf_r+0x94>
 800bc78:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc7c:	460c      	mov	r4, r1
 800bc7e:	2001      	movs	r0, #1
 800bc80:	e7a5      	b.n	800bbce <_vfiprintf_r+0x11a>
 800bc82:	2300      	movs	r3, #0
 800bc84:	3401      	adds	r4, #1
 800bc86:	9305      	str	r3, [sp, #20]
 800bc88:	4619      	mov	r1, r3
 800bc8a:	f04f 0c0a 	mov.w	ip, #10
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc94:	3a30      	subs	r2, #48	; 0x30
 800bc96:	2a09      	cmp	r2, #9
 800bc98:	d903      	bls.n	800bca2 <_vfiprintf_r+0x1ee>
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d0c5      	beq.n	800bc2a <_vfiprintf_r+0x176>
 800bc9e:	9105      	str	r1, [sp, #20]
 800bca0:	e7c3      	b.n	800bc2a <_vfiprintf_r+0x176>
 800bca2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bca6:	4604      	mov	r4, r0
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e7f0      	b.n	800bc8e <_vfiprintf_r+0x1da>
 800bcac:	ab03      	add	r3, sp, #12
 800bcae:	9300      	str	r3, [sp, #0]
 800bcb0:	462a      	mov	r2, r5
 800bcb2:	4b16      	ldr	r3, [pc, #88]	; (800bd0c <_vfiprintf_r+0x258>)
 800bcb4:	a904      	add	r1, sp, #16
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	f7fc f9b4 	bl	8008024 <_printf_float>
 800bcbc:	4607      	mov	r7, r0
 800bcbe:	1c78      	adds	r0, r7, #1
 800bcc0:	d1d6      	bne.n	800bc70 <_vfiprintf_r+0x1bc>
 800bcc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcc4:	07d9      	lsls	r1, r3, #31
 800bcc6:	d405      	bmi.n	800bcd4 <_vfiprintf_r+0x220>
 800bcc8:	89ab      	ldrh	r3, [r5, #12]
 800bcca:	059a      	lsls	r2, r3, #22
 800bccc:	d402      	bmi.n	800bcd4 <_vfiprintf_r+0x220>
 800bcce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcd0:	f7fc f896 	bl	8007e00 <__retarget_lock_release_recursive>
 800bcd4:	89ab      	ldrh	r3, [r5, #12]
 800bcd6:	065b      	lsls	r3, r3, #25
 800bcd8:	f53f af12 	bmi.w	800bb00 <_vfiprintf_r+0x4c>
 800bcdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcde:	e711      	b.n	800bb04 <_vfiprintf_r+0x50>
 800bce0:	ab03      	add	r3, sp, #12
 800bce2:	9300      	str	r3, [sp, #0]
 800bce4:	462a      	mov	r2, r5
 800bce6:	4b09      	ldr	r3, [pc, #36]	; (800bd0c <_vfiprintf_r+0x258>)
 800bce8:	a904      	add	r1, sp, #16
 800bcea:	4630      	mov	r0, r6
 800bcec:	f7fc fc3e 	bl	800856c <_printf_i>
 800bcf0:	e7e4      	b.n	800bcbc <_vfiprintf_r+0x208>
 800bcf2:	bf00      	nop
 800bcf4:	0800c338 	.word	0x0800c338
 800bcf8:	0800c358 	.word	0x0800c358
 800bcfc:	0800c318 	.word	0x0800c318
 800bd00:	0800c774 	.word	0x0800c774
 800bd04:	0800c77e 	.word	0x0800c77e
 800bd08:	08008025 	.word	0x08008025
 800bd0c:	0800ba8f 	.word	0x0800ba8f
 800bd10:	0800c77a 	.word	0x0800c77a

0800bd14 <_read_r>:
 800bd14:	b538      	push	{r3, r4, r5, lr}
 800bd16:	4d07      	ldr	r5, [pc, #28]	; (800bd34 <_read_r+0x20>)
 800bd18:	4604      	mov	r4, r0
 800bd1a:	4608      	mov	r0, r1
 800bd1c:	4611      	mov	r1, r2
 800bd1e:	2200      	movs	r2, #0
 800bd20:	602a      	str	r2, [r5, #0]
 800bd22:	461a      	mov	r2, r3
 800bd24:	f7f6 fad9 	bl	80022da <_read>
 800bd28:	1c43      	adds	r3, r0, #1
 800bd2a:	d102      	bne.n	800bd32 <_read_r+0x1e>
 800bd2c:	682b      	ldr	r3, [r5, #0]
 800bd2e:	b103      	cbz	r3, 800bd32 <_read_r+0x1e>
 800bd30:	6023      	str	r3, [r4, #0]
 800bd32:	bd38      	pop	{r3, r4, r5, pc}
 800bd34:	200045f8 	.word	0x200045f8

0800bd38 <nan>:
 800bd38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bd40 <nan+0x8>
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop
 800bd40:	00000000 	.word	0x00000000
 800bd44:	7ff80000 	.word	0x7ff80000

0800bd48 <strncmp>:
 800bd48:	b510      	push	{r4, lr}
 800bd4a:	b16a      	cbz	r2, 800bd68 <strncmp+0x20>
 800bd4c:	3901      	subs	r1, #1
 800bd4e:	1884      	adds	r4, r0, r2
 800bd50:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bd54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d103      	bne.n	800bd64 <strncmp+0x1c>
 800bd5c:	42a0      	cmp	r0, r4
 800bd5e:	d001      	beq.n	800bd64 <strncmp+0x1c>
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1f5      	bne.n	800bd50 <strncmp+0x8>
 800bd64:	1a98      	subs	r0, r3, r2
 800bd66:	bd10      	pop	{r4, pc}
 800bd68:	4610      	mov	r0, r2
 800bd6a:	e7fc      	b.n	800bd66 <strncmp+0x1e>

0800bd6c <__ascii_wctomb>:
 800bd6c:	b149      	cbz	r1, 800bd82 <__ascii_wctomb+0x16>
 800bd6e:	2aff      	cmp	r2, #255	; 0xff
 800bd70:	bf85      	ittet	hi
 800bd72:	238a      	movhi	r3, #138	; 0x8a
 800bd74:	6003      	strhi	r3, [r0, #0]
 800bd76:	700a      	strbls	r2, [r1, #0]
 800bd78:	f04f 30ff 	movhi.w	r0, #4294967295
 800bd7c:	bf98      	it	ls
 800bd7e:	2001      	movls	r0, #1
 800bd80:	4770      	bx	lr
 800bd82:	4608      	mov	r0, r1
 800bd84:	4770      	bx	lr
	...

0800bd88 <__assert_func>:
 800bd88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd8a:	4614      	mov	r4, r2
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	4b09      	ldr	r3, [pc, #36]	; (800bdb4 <__assert_func+0x2c>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4605      	mov	r5, r0
 800bd94:	68d8      	ldr	r0, [r3, #12]
 800bd96:	b14c      	cbz	r4, 800bdac <__assert_func+0x24>
 800bd98:	4b07      	ldr	r3, [pc, #28]	; (800bdb8 <__assert_func+0x30>)
 800bd9a:	9100      	str	r1, [sp, #0]
 800bd9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bda0:	4906      	ldr	r1, [pc, #24]	; (800bdbc <__assert_func+0x34>)
 800bda2:	462b      	mov	r3, r5
 800bda4:	f000 f80e 	bl	800bdc4 <fiprintf>
 800bda8:	f000 f840 	bl	800be2c <abort>
 800bdac:	4b04      	ldr	r3, [pc, #16]	; (800bdc0 <__assert_func+0x38>)
 800bdae:	461c      	mov	r4, r3
 800bdb0:	e7f3      	b.n	800bd9a <__assert_func+0x12>
 800bdb2:	bf00      	nop
 800bdb4:	20000044 	.word	0x20000044
 800bdb8:	0800c785 	.word	0x0800c785
 800bdbc:	0800c792 	.word	0x0800c792
 800bdc0:	0800c7c0 	.word	0x0800c7c0

0800bdc4 <fiprintf>:
 800bdc4:	b40e      	push	{r1, r2, r3}
 800bdc6:	b503      	push	{r0, r1, lr}
 800bdc8:	4601      	mov	r1, r0
 800bdca:	ab03      	add	r3, sp, #12
 800bdcc:	4805      	ldr	r0, [pc, #20]	; (800bde4 <fiprintf+0x20>)
 800bdce:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdd2:	6800      	ldr	r0, [r0, #0]
 800bdd4:	9301      	str	r3, [sp, #4]
 800bdd6:	f7ff fe6d 	bl	800bab4 <_vfiprintf_r>
 800bdda:	b002      	add	sp, #8
 800bddc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bde0:	b003      	add	sp, #12
 800bde2:	4770      	bx	lr
 800bde4:	20000044 	.word	0x20000044

0800bde8 <_fstat_r>:
 800bde8:	b538      	push	{r3, r4, r5, lr}
 800bdea:	4d07      	ldr	r5, [pc, #28]	; (800be08 <_fstat_r+0x20>)
 800bdec:	2300      	movs	r3, #0
 800bdee:	4604      	mov	r4, r0
 800bdf0:	4608      	mov	r0, r1
 800bdf2:	4611      	mov	r1, r2
 800bdf4:	602b      	str	r3, [r5, #0]
 800bdf6:	f7f6 fab5 	bl	8002364 <_fstat>
 800bdfa:	1c43      	adds	r3, r0, #1
 800bdfc:	d102      	bne.n	800be04 <_fstat_r+0x1c>
 800bdfe:	682b      	ldr	r3, [r5, #0]
 800be00:	b103      	cbz	r3, 800be04 <_fstat_r+0x1c>
 800be02:	6023      	str	r3, [r4, #0]
 800be04:	bd38      	pop	{r3, r4, r5, pc}
 800be06:	bf00      	nop
 800be08:	200045f8 	.word	0x200045f8

0800be0c <_isatty_r>:
 800be0c:	b538      	push	{r3, r4, r5, lr}
 800be0e:	4d06      	ldr	r5, [pc, #24]	; (800be28 <_isatty_r+0x1c>)
 800be10:	2300      	movs	r3, #0
 800be12:	4604      	mov	r4, r0
 800be14:	4608      	mov	r0, r1
 800be16:	602b      	str	r3, [r5, #0]
 800be18:	f7f6 fab4 	bl	8002384 <_isatty>
 800be1c:	1c43      	adds	r3, r0, #1
 800be1e:	d102      	bne.n	800be26 <_isatty_r+0x1a>
 800be20:	682b      	ldr	r3, [r5, #0]
 800be22:	b103      	cbz	r3, 800be26 <_isatty_r+0x1a>
 800be24:	6023      	str	r3, [r4, #0]
 800be26:	bd38      	pop	{r3, r4, r5, pc}
 800be28:	200045f8 	.word	0x200045f8

0800be2c <abort>:
 800be2c:	b508      	push	{r3, lr}
 800be2e:	2006      	movs	r0, #6
 800be30:	f000 f82c 	bl	800be8c <raise>
 800be34:	2001      	movs	r0, #1
 800be36:	f7f6 fa46 	bl	80022c6 <_exit>

0800be3a <_raise_r>:
 800be3a:	291f      	cmp	r1, #31
 800be3c:	b538      	push	{r3, r4, r5, lr}
 800be3e:	4604      	mov	r4, r0
 800be40:	460d      	mov	r5, r1
 800be42:	d904      	bls.n	800be4e <_raise_r+0x14>
 800be44:	2316      	movs	r3, #22
 800be46:	6003      	str	r3, [r0, #0]
 800be48:	f04f 30ff 	mov.w	r0, #4294967295
 800be4c:	bd38      	pop	{r3, r4, r5, pc}
 800be4e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be50:	b112      	cbz	r2, 800be58 <_raise_r+0x1e>
 800be52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be56:	b94b      	cbnz	r3, 800be6c <_raise_r+0x32>
 800be58:	4620      	mov	r0, r4
 800be5a:	f000 f831 	bl	800bec0 <_getpid_r>
 800be5e:	462a      	mov	r2, r5
 800be60:	4601      	mov	r1, r0
 800be62:	4620      	mov	r0, r4
 800be64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be68:	f000 b818 	b.w	800be9c <_kill_r>
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d00a      	beq.n	800be86 <_raise_r+0x4c>
 800be70:	1c59      	adds	r1, r3, #1
 800be72:	d103      	bne.n	800be7c <_raise_r+0x42>
 800be74:	2316      	movs	r3, #22
 800be76:	6003      	str	r3, [r0, #0]
 800be78:	2001      	movs	r0, #1
 800be7a:	e7e7      	b.n	800be4c <_raise_r+0x12>
 800be7c:	2400      	movs	r4, #0
 800be7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be82:	4628      	mov	r0, r5
 800be84:	4798      	blx	r3
 800be86:	2000      	movs	r0, #0
 800be88:	e7e0      	b.n	800be4c <_raise_r+0x12>
	...

0800be8c <raise>:
 800be8c:	4b02      	ldr	r3, [pc, #8]	; (800be98 <raise+0xc>)
 800be8e:	4601      	mov	r1, r0
 800be90:	6818      	ldr	r0, [r3, #0]
 800be92:	f7ff bfd2 	b.w	800be3a <_raise_r>
 800be96:	bf00      	nop
 800be98:	20000044 	.word	0x20000044

0800be9c <_kill_r>:
 800be9c:	b538      	push	{r3, r4, r5, lr}
 800be9e:	4d07      	ldr	r5, [pc, #28]	; (800bebc <_kill_r+0x20>)
 800bea0:	2300      	movs	r3, #0
 800bea2:	4604      	mov	r4, r0
 800bea4:	4608      	mov	r0, r1
 800bea6:	4611      	mov	r1, r2
 800bea8:	602b      	str	r3, [r5, #0]
 800beaa:	f7f6 f9fc 	bl	80022a6 <_kill>
 800beae:	1c43      	adds	r3, r0, #1
 800beb0:	d102      	bne.n	800beb8 <_kill_r+0x1c>
 800beb2:	682b      	ldr	r3, [r5, #0]
 800beb4:	b103      	cbz	r3, 800beb8 <_kill_r+0x1c>
 800beb6:	6023      	str	r3, [r4, #0]
 800beb8:	bd38      	pop	{r3, r4, r5, pc}
 800beba:	bf00      	nop
 800bebc:	200045f8 	.word	0x200045f8

0800bec0 <_getpid_r>:
 800bec0:	f7f6 b9e9 	b.w	8002296 <_getpid>

0800bec4 <_init>:
 800bec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bec6:	bf00      	nop
 800bec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beca:	bc08      	pop	{r3}
 800becc:	469e      	mov	lr, r3
 800bece:	4770      	bx	lr

0800bed0 <_fini>:
 800bed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed2:	bf00      	nop
 800bed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bed6:	bc08      	pop	{r3}
 800bed8:	469e      	mov	lr, r3
 800beda:	4770      	bx	lr
